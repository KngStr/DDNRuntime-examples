//----------------------------------------------------------------------------
//  mscorlib.dll: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.x
//----------------------------------------------------------------------------
//  UnitName: DDN.mscorlib
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.mscorlib;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.InitNETFramework;

type

{ types } 

  SByte = ShortInt;
  PSByte = PShortInt;

type

{ enums }

  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.RegistryHive')]
  DNRegistryHive = type Integer;
  DNRegistryHiveHelper = record helper for DNRegistryHive
  public const
    ClassesRoot = -2147483648;
    CurrentUser = -2147483647;
    LocalMachine = -2147483646;
    Users = -2147483645;
    PerformanceData = -2147483644;
    CurrentConfig = -2147483643;
    DynData = -2147483642;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.RegistryKeyPermissionCheck')]
  DNRegistryKeyPermissionCheck = type Integer;
  DNRegistryKeyPermissionCheckHelper = record helper for DNRegistryKeyPermissionCheck
  public const
    Default_ = 0;
    ReadSubTree = 1;
    ReadWriteSubTree = 2;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.RegistryOptions')]
  DNRegistryOptions = type Integer;
  DNRegistryOptionsHelper = record helper for DNRegistryOptions
  public const
    None = 0;
    Volatile = 1;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.RegistryValueKind')]
  DNRegistryValueKind = type Integer;
  DNRegistryValueKindHelper = record helper for DNRegistryValueKind
  public const
    Unknown = 0;
    String_ = 1;
    ExpandString = 2;
    Binary = 3;
    DWord = 4;
    MultiString = 7;
    QWord = 11;
    None = -1;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.RegistryValueOptions')]
  DNRegistryValueOptions = type Integer;
  DNRegistryValueOptionsHelper = record helper for DNRegistryValueOptions
  public const
    None = 0;
    DoNotExpandEnvironmentNames = 1;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.RegistryView')]
  DNRegistryView = type Integer;
  DNRegistryViewHelper = record helper for DNRegistryView
  public const
    Default_ = 0;
    Registry64 = 256;
    Registry32 = 512;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.ActivationContext+ContextForm')]
  DNActivationContext_ContextForm = type Integer;
  DNActivationContext_ContextFormHelper = record helper for DNActivationContext_ContextForm
  public const
    Loose = 0;
    StoreBounded = 1;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.AppDomainManagerInitializationOptions')]
  DNAppDomainManagerInitializationOptions = type Integer;
  DNAppDomainManagerInitializationOptionsHelper = record helper for DNAppDomainManagerInitializationOptions
  public const
    None = 0;
    RegisterWithHost = 1;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.AttributeTargets')]
  DNAttributeTargets = type Integer;
  DNAttributeTargetsHelper = record helper for DNAttributeTargets
  public const
    Assembly = 1;
    Module = 2;
    Class_ = 4;
    Struct = 8;
    Enum = 16;
    Constructor_ = 32;
    Method = 64;
    Property_ = 128;
    Field = 256;
    Event = 512;
    Interface_ = 1024;
    Parameter = 2048;
    Delegate = 4096;
    ReturnValue = 8192;
    GenericParameter = 16384;
    All = 32767;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Base64FormattingOptions')]
  DNBase64FormattingOptions = type Integer;
  DNBase64FormattingOptionsHelper = record helper for DNBase64FormattingOptions
  public const
    None = 0;
    InsertLineBreaks = 1;
  end;


  //-------------namespace: System.Collections.Concurrent----------------
  [DNTypeName('System.Collections.Concurrent.EnumerablePartitionerOptions')]
  DNEnumerablePartitionerOptions = type Integer;
  DNEnumerablePartitionerOptionsHelper = record helper for DNEnumerablePartitionerOptions
  public const
    None = 0;
    NoBuffering = 1;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  [DNTypeName('System.Configuration.Assemblies.AssemblyHashAlgorithm')]
  DNAssemblyHashAlgorithm = type Integer;
  DNAssemblyHashAlgorithmHelper = record helper for DNAssemblyHashAlgorithm
  public const
    None = 0;
    MD5 = 32771;
    SHA1 = 32772;
    SHA256 = 32780;
    SHA384 = 32781;
    SHA512 = 32782;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  [DNTypeName('System.Configuration.Assemblies.AssemblyVersionCompatibility')]
  DNAssemblyVersionCompatibility = type Integer;
  DNAssemblyVersionCompatibilityHelper = record helper for DNAssemblyVersionCompatibility
  public const
    SameMachine = 1;
    SameProcess = 2;
    SameDomain = 3;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.ConsoleColor')]
  DNConsoleColor = type Integer;
  DNConsoleColorHelper = record helper for DNConsoleColor
  public const
    Black = 0;
    DarkBlue = 1;
    DarkGreen = 2;
    DarkCyan = 3;
    DarkRed = 4;
    DarkMagenta = 5;
    DarkYellow = 6;
    Gray = 7;
    DarkGray = 8;
    Blue = 9;
    Green = 10;
    Cyan = 11;
    Red = 12;
    Magenta = 13;
    Yellow = 14;
    White = 15;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.ConsoleKey')]
  DNConsoleKey = type Integer;
  DNConsoleKeyHelper = record helper for DNConsoleKey
  public const
    Backspace = 8;
    Tab = 9;
    Clear = 12;
    Enter = 13;
    Pause = 19;
    Escape = 27;
    Spacebar = 32;
    PageUp = 33;
    PageDown = 34;
    End_ = 35;
    Home = 36;
    LeftArrow = 37;
    UpArrow = 38;
    RightArrow = 39;
    DownArrow = 40;
    Select = 41;
    Print = 42;
    Execute = 43;
    PrintScreen = 44;
    Insert = 45;
    Delete = 46;
    Help = 47;
    D0 = 48;
    D1 = 49;
    D2 = 50;
    D3 = 51;
    D4 = 52;
    D5 = 53;
    D6 = 54;
    D7 = 55;
    D8 = 56;
    D9 = 57;
    A = 65;
    B = 66;
    C = 67;
    D = 68;
    E = 69;
    F = 70;
    G = 71;
    H = 72;
    I = 73;
    J = 74;
    K = 75;
    L = 76;
    M = 77;
    N = 78;
    O = 79;
    P = 80;
    Q = 81;
    R = 82;
    S = 83;
    T = 84;
    U = 85;
    V = 86;
    W = 87;
    X = 88;
    Y = 89;
    Z = 90;
    LeftWindows = 91;
    RightWindows = 92;
    Applications = 93;
    Sleep = 95;
    NumPad0 = 96;
    NumPad1 = 97;
    NumPad2 = 98;
    NumPad3 = 99;
    NumPad4 = 100;
    NumPad5 = 101;
    NumPad6 = 102;
    NumPad7 = 103;
    NumPad8 = 104;
    NumPad9 = 105;
    Multiply = 106;
    Add = 107;
    Separator = 108;
    Subtract = 109;
    Decimal = 110;
    Divide = 111;
    F1 = 112;
    F2 = 113;
    F3 = 114;
    F4 = 115;
    F5 = 116;
    F6 = 117;
    F7 = 118;
    F8 = 119;
    F9 = 120;
    F10 = 121;
    F11 = 122;
    F12 = 123;
    F13 = 124;
    F14 = 125;
    F15 = 126;
    F16 = 127;
    F17 = 128;
    F18 = 129;
    F19 = 130;
    F20 = 131;
    F21 = 132;
    F22 = 133;
    F23 = 134;
    F24 = 135;
    BrowserBack = 166;
    BrowserForward = 167;
    BrowserRefresh = 168;
    BrowserStop = 169;
    BrowserSearch = 170;
    BrowserFavorites = 171;
    BrowserHome = 172;
    VolumeMute = 173;
    VolumeDown = 174;
    VolumeUp = 175;
    MediaNext = 176;
    MediaPrevious = 177;
    MediaStop = 178;
    MediaPlay = 179;
    LaunchMail = 180;
    LaunchMediaSelect = 181;
    LaunchApp1 = 182;
    LaunchApp2 = 183;
    Oem1 = 186;
    OemPlus = 187;
    OemComma = 188;
    OemMinus = 189;
    OemPeriod = 190;
    Oem2 = 191;
    Oem3 = 192;
    Oem4 = 219;
    Oem5 = 220;
    Oem6 = 221;
    Oem7 = 222;
    Oem8 = 223;
    Oem102 = 226;
    Process = 229;
    Packet = 231;
    Attention = 246;
    CrSel = 247;
    ExSel = 248;
    EraseEndOfFile = 249;
    Play = 250;
    Zoom = 251;
    NoName = 252;
    Pa1 = 253;
    OemClear = 254;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.ConsoleModifiers')]
  DNConsoleModifiers = type Integer;
  DNConsoleModifiersHelper = record helper for DNConsoleModifiers
  public const
    Alt = 1;
    Shift = 2;
    Control = 4;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.ConsoleSpecialKey')]
  DNConsoleSpecialKey = type Integer;
  DNConsoleSpecialKeyHelper = record helper for DNConsoleSpecialKey
  public const
    ControlC = 0;
    ControlBreak = 1;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.DateTimeKind')]
  DNDateTimeKind = type Integer;
  DNDateTimeKindHelper = record helper for DNDateTimeKind
  public const
    Unspecified = 0;
    Utc = 1;
    Local = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.DayOfWeek')]
  DNDayOfWeek = type Integer;
  DNDayOfWeekHelper = record helper for DNDayOfWeek
  public const
    Sunday = 0;
    Monday = 1;
    Tuesday = 2;
    Wednesday = 3;
    Thursday = 4;
    Friday = 5;
    Saturday = 6;
  end;


  //-------------namespace: System.Diagnostics.Contracts----------------
  [DNTypeName('System.Diagnostics.Contracts.ContractFailureKind')]
  DNContractFailureKind = type Integer;
  DNContractFailureKindHelper = record helper for DNContractFailureKind
  public const
    Precondition = 0;
    Postcondition = 1;
    PostconditionOnException = 2;
    Invariant = 3;
    Assert = 4;
    Assume = 5;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.DebuggableAttribute+DebuggingModes')]
  DNDebuggableAttribute_DebuggingModes = type Integer;
  DNDebuggableAttribute_DebuggingModesHelper = record helper for DNDebuggableAttribute_DebuggingModes
  public const
    None = 0;
    Default_ = 1;
    IgnoreSymbolStoreSequencePoints = 2;
    EnableEditAndContinue = 4;
    DisableOptimizations = 256;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.DebuggerBrowsableState')]
  DNDebuggerBrowsableState = type Integer;
  DNDebuggerBrowsableStateHelper = record helper for DNDebuggerBrowsableState
  public const
    Never = 0;
    Collapsed = 2;
    RootHidden = 3;
  end;


  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.SymAddressKind')]
  DNSymAddressKind = type Integer;
  DNSymAddressKindHelper = record helper for DNSymAddressKind
  public const
    ILOffset = 1;
    NativeRVA = 2;
    NativeRegister = 3;
    NativeRegisterRelative = 4;
    NativeOffset = 5;
    NativeRegisterRegister = 6;
    NativeRegisterStack = 7;
    NativeStackRegister = 8;
    BitField = 9;
    NativeSectionOffset = 10;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventActivityOptions')]
  DNEventActivityOptions = type Integer;
  DNEventActivityOptionsHelper = record helper for DNEventActivityOptions
  public const
    None = 0;
    Disable = 2;
    Recursive = 4;
    Detachable = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventChannel')]
  DNEventChannel = type Integer;
  DNEventChannelHelper = record helper for DNEventChannel
  public const
    None = 0;
    Admin = 16;
    Operational = 17;
    Analytic = 18;
    Debug = 19;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventCommand')]
  DNEventCommand = type Integer;
  DNEventCommandHelper = record helper for DNEventCommand
  public const
    Update = 0;
    Disable = -3;
    Enable = -2;
    SendManifest = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventFieldFormat')]
  DNEventFieldFormat = type Integer;
  DNEventFieldFormatHelper = record helper for DNEventFieldFormat
  public const
    Default_ = 0;
    String_ = 2;
    Boolean = 3;
    Hexadecimal = 4;
    Xml = 11;
    Json = 12;
    HResult = 15;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventFieldTags')]
  DNEventFieldTags = type Integer;
  DNEventFieldTagsHelper = record helper for DNEventFieldTags
  public const
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventKeywords')]
  DNEventKeywords = type Integer;
  DNEventKeywordsHelper = record helper for DNEventKeywords
  public const
    None = 0;
    MicrosoftTelemetry = 562949953421312;
    WdiContext = 562949953421312;
    WdiDiagnostic = 1125899906842624;
    Sqm = 2251799813685248;
    AuditFailure = 4503599627370496;
    CorrelationHint = 4503599627370496;
    AuditSuccess = 9007199254740992;
    EventLogClassic = 36028797018963968;
    All = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventLevel')]
  DNEventLevel = type Integer;
  DNEventLevelHelper = record helper for DNEventLevel
  public const
    LogAlways = 0;
    Critical = 1;
    Error = 2;
    Warning = 3;
    Informational = 4;
    Verbose = 5;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventManifestOptions')]
  DNEventManifestOptions = type Integer;
  DNEventManifestOptionsHelper = record helper for DNEventManifestOptions
  public const
    None = 0;
    Strict_ = 1;
    AllCultures = 2;
    OnlyIfNeededForRegistration = 4;
    AllowEventSourceOverride = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventOpcode')]
  DNEventOpcode = type Integer;
  DNEventOpcodeHelper = record helper for DNEventOpcode
  public const
    Info = 0;
    Start = 1;
    Stop = 2;
    DataCollectionStart = 3;
    DataCollectionStop = 4;
    Extension = 5;
    Reply = 6;
    Resume = 7;
    Suspend = 8;
    Send = 9;
    Receive = 240;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventSourceSettings')]
  DNEventSourceSettings = type Integer;
  DNEventSourceSettingsHelper = record helper for DNEventSourceSettings
  public const
    Default_ = 0;
    ThrowOnEventWriteErrors = 1;
    EtwManifestEventFormat = 4;
    EtwSelfDescribingEventFormat = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventTags')]
  DNEventTags = type Integer;
  DNEventTagsHelper = record helper for DNEventTags
  public const
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventTask')]
  DNEventTask = type Integer;
  DNEventTaskHelper = record helper for DNEventTask
  public const
    None = 0;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Environment+SpecialFolder')]
  DNEnvironment_SpecialFolder = type Integer;
  DNEnvironment_SpecialFolderHelper = record helper for DNEnvironment_SpecialFolder
  public const
    Desktop = 0;
    Programs = 2;
    MyDocuments = 5;
    Personal = 5;
    Favorites = 6;
    Startup = 7;
    Recent = 8;
    SendTo = 9;
    StartMenu = 11;
    MyMusic = 13;
    MyVideos = 14;
    DesktopDirectory = 16;
    MyComputer = 17;
    NetworkShortcuts = 19;
    Fonts = 20;
    Templates = 21;
    CommonStartMenu = 22;
    CommonPrograms = 23;
    CommonStartup = 24;
    CommonDesktopDirectory = 25;
    ApplicationData = 26;
    PrinterShortcuts = 27;
    LocalApplicationData = 28;
    InternetCache = 32;
    Cookies = 33;
    History = 34;
    CommonApplicationData = 35;
    Windows = 36;
    System = 37;
    ProgramFiles = 38;
    MyPictures = 39;
    UserProfile = 40;
    SystemX86 = 41;
    ProgramFilesX86 = 42;
    CommonProgramFiles = 43;
    CommonProgramFilesX86 = 44;
    CommonTemplates = 45;
    CommonDocuments = 46;
    CommonAdminTools = 47;
    AdminTools = 48;
    CommonMusic = 53;
    CommonPictures = 54;
    CommonVideos = 55;
    Resources = 56;
    LocalizedResources = 57;
    CommonOemLinks = 58;
    CDBurning = 59;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Environment+SpecialFolderOption')]
  DNEnvironment_SpecialFolderOption = type Integer;
  DNEnvironment_SpecialFolderOptionHelper = record helper for DNEnvironment_SpecialFolderOption
  public const
    None = 0;
    DoNotVerify = 16384;
    Create = 32768;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.EnvironmentVariableTarget')]
  DNEnvironmentVariableTarget = type Integer;
  DNEnvironmentVariableTargetHelper = record helper for DNEnvironmentVariableTarget
  public const
    Process = 0;
    User = 1;
    Machine = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GCCollectionMode')]
  DNGCCollectionMode = type Integer;
  DNGCCollectionModeHelper = record helper for DNGCCollectionMode
  public const
    Default_ = 0;
    Forced = 1;
    Optimized = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GCNotificationStatus')]
  DNGCNotificationStatus = type Integer;
  DNGCNotificationStatusHelper = record helper for DNGCNotificationStatus
  public const
    Succeeded = 0;
    Failed = 1;
    Canceled = 2;
    Timeout = 3;
    NotApplicable = 4;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CalendarAlgorithmType')]
  DNCalendarAlgorithmType = type Integer;
  DNCalendarAlgorithmTypeHelper = record helper for DNCalendarAlgorithmType
  public const
    Unknown = 0;
    SolarCalendar = 1;
    LunarCalendar = 2;
    LunisolarCalendar = 3;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CalendarWeekRule')]
  DNCalendarWeekRule = type Integer;
  DNCalendarWeekRuleHelper = record helper for DNCalendarWeekRule
  public const
    FirstDay = 0;
    FirstFullWeek = 1;
    FirstFourDayWeek = 2;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CompareOptions')]
  DNCompareOptions = type Integer;
  DNCompareOptionsHelper = record helper for DNCompareOptions
  public const
    None = 0;
    IgnoreCase = 1;
    IgnoreNonSpace = 2;
    IgnoreSymbols = 4;
    IgnoreKanaType = 8;
    IgnoreWidth = 16;
    OrdinalIgnoreCase = 268435456;
    StringSort = 536870912;
    Ordinal = 1073741824;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CultureTypes')]
  DNCultureTypes = type Integer;
  DNCultureTypesHelper = record helper for DNCultureTypes
  public const
    NeutralCultures = 1;
    SpecificCultures = 2;
    InstalledWin32Cultures = 4;
    AllCultures = 7;
    UserCustomCulture = 8;
    ReplacementCultures = 16;
    WindowsOnlyCultures = 32;
    FrameworkCultures = 64;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.DateTimeStyles')]
  DNDateTimeStyles = type Integer;
  DNDateTimeStylesHelper = record helper for DNDateTimeStyles
  public const
    None = 0;
    AllowLeadingWhite = 1;
    AllowTrailingWhite = 2;
    AllowInnerWhite = 4;
    AllowWhiteSpaces = 7;
    NoCurrentDateDefault = 8;
    AdjustToUniversal = 16;
    AssumeLocal = 32;
    AssumeUniversal = 64;
    RoundtripKind = 128;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.DigitShapes')]
  DNDigitShapes = type Integer;
  DNDigitShapesHelper = record helper for DNDigitShapes
  public const
    Context = 0;
    None = 1;
    NativeNational = 2;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.GregorianCalendarTypes')]
  DNGregorianCalendarTypes = type Integer;
  DNGregorianCalendarTypesHelper = record helper for DNGregorianCalendarTypes
  public const
    Localized = 1;
    USEnglish = 2;
    MiddleEastFrench = 9;
    Arabic = 10;
    TransliteratedEnglish = 11;
    TransliteratedFrench = 12;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.NumberStyles')]
  DNNumberStyles = type Integer;
  DNNumberStylesHelper = record helper for DNNumberStyles
  public const
    None = 0;
    AllowLeadingWhite = 1;
    AllowTrailingWhite = 2;
    AllowLeadingSign = 4;
    Integer = 7;
    AllowTrailingSign = 8;
    AllowParentheses = 16;
    AllowDecimalPoint = 32;
    AllowThousands = 64;
    Number = 111;
    AllowExponent = 128;
    Float = 167;
    AllowCurrencySymbol = 256;
    Currency = 383;
    Any = 511;
    AllowHexSpecifier = 512;
    HexNumber = 515;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.TimeSpanStyles')]
  DNTimeSpanStyles = type Integer;
  DNTimeSpanStylesHelper = record helper for DNTimeSpanStyles
  public const
    None = 0;
    AssumeNegative = 1;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.UnicodeCategory')]
  DNUnicodeCategory = type Integer;
  DNUnicodeCategoryHelper = record helper for DNUnicodeCategory
  public const
    UppercaseLetter = 0;
    LowercaseLetter = 1;
    TitlecaseLetter = 2;
    ModifierLetter = 3;
    OtherLetter = 4;
    NonSpacingMark = 5;
    SpacingCombiningMark = 6;
    EnclosingMark = 7;
    DecimalDigitNumber = 8;
    LetterNumber = 9;
    OtherNumber = 10;
    SpaceSeparator = 11;
    LineSeparator = 12;
    ParagraphSeparator = 13;
    Control = 14;
    Format = 15;
    Surrogate = 16;
    PrivateUse = 17;
    ConnectorPunctuation = 18;
    DashPunctuation = 19;
    OpenPunctuation = 20;
    ClosePunctuation = 21;
    InitialQuotePunctuation = 22;
    FinalQuotePunctuation = 23;
    OtherPunctuation = 24;
    MathSymbol = 25;
    CurrencySymbol = 26;
    ModifierSymbol = 27;
    OtherSymbol = 28;
    OtherNotAssigned = 29;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.DriveType')]
  DNDriveType = type Integer;
  DNDriveTypeHelper = record helper for DNDriveType
  public const
    Unknown = 0;
    NoRootDirectory = 1;
    Removable = 2;
    Fixed = 3;
    Network = 4;
    CDRom = 5;
    Ram = 6;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileAccess')]
  DNFileAccess = type Integer;
  DNFileAccessHelper = record helper for DNFileAccess
  public const
    Read = 1;
    Write = 2;
    ReadWrite = 3;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileAttributes')]
  DNFileAttributes = type Integer;
  DNFileAttributesHelper = record helper for DNFileAttributes
  public const
    ReadOnly = 1;
    Hidden = 2;
    System = 4;
    Directory = 16;
    Archive = 32;
    Device = 64;
    Normal = 128;
    Temporary = 256;
    SparseFile = 512;
    ReparsePoint = 1024;
    Compressed = 2048;
    Offline = 4096;
    NotContentIndexed = 8192;
    Encrypted = 16384;
    IntegrityStream = 32768;
    NoScrubData = 131072;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileMode')]
  DNFileMode = type Integer;
  DNFileModeHelper = record helper for DNFileMode
  public const
    CreateNew = 1;
    Create = 2;
    Open = 3;
    OpenOrCreate = 4;
    Truncate = 5;
    Append = 6;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileOptions')]
  DNFileOptions = type Integer;
  DNFileOptionsHelper = record helper for DNFileOptions
  public const
    None = 0;
    Encrypted = 16384;
    DeleteOnClose = 67108864;
    SequentialScan = 134217728;
    RandomAccess = 268435456;
    Asynchronous = 1073741824;
    WriteThrough = -2147483648;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileShare')]
  DNFileShare = type Integer;
  DNFileShareHelper = record helper for DNFileShare
  public const
    None = 0;
    Read = 1;
    Write = 2;
    ReadWrite = 3;
    Delete = 4;
    Inheritable = 16;
  end;


  //-------------namespace: System.IO.IsolatedStorage----------------
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageScope')]
  DNIsolatedStorageScope = type Integer;
  DNIsolatedStorageScopeHelper = record helper for DNIsolatedStorageScope
  public const
    None = 0;
    User = 1;
    Domain = 2;
    Assembly = 4;
    Roaming = 8;
    Machine = 16;
    Application = 32;
  end;


  //-------------namespace: System.IO.IsolatedStorage----------------
  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageSecurityOptions')]
  DNIsolatedStorageSecurityOptions = type Integer;
  DNIsolatedStorageSecurityOptionsHelper = record helper for DNIsolatedStorageSecurityOptions
  public const
    IncreaseQuotaForApplication = 4;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.SearchOption')]
  DNSearchOption = type Integer;
  DNSearchOptionHelper = record helper for DNSearchOption
  public const
    TopDirectoryOnly = 0;
    AllDirectories = 1;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.SeekOrigin')]
  DNSeekOrigin = type Integer;
  DNSeekOriginHelper = record helper for DNSeekOrigin
  public const
    Begin_ = 0;
    Current = 1;
    End_ = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.LoaderOptimization')]
  DNLoaderOptimization = type Integer;
  DNLoaderOptimizationHelper = record helper for DNLoaderOptimization
  public const
    NotSpecified = 0;
    SingleDomain = 1;
    MultiDomain = 2;
    MultiDomainHost = 3;
    DomainMask = 3;
    DisallowBindings = 4;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.MidpointRounding')]
  DNMidpointRounding = type Integer;
  DNMidpointRoundingHelper = record helper for DNMidpointRounding
  public const
    ToEven = 0;
    AwayFromZero = 1;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.PlatformID')]
  DNPlatformID = type Integer;
  DNPlatformIDHelper = record helper for DNPlatformID
  public const
    Win32S = 0;
    Win32Windows = 1;
    Win32NT = 2;
    WinCE = 3;
    Unix = 4;
    Xbox = 5;
    MacOSX = 6;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyContentType')]
  DNAssemblyContentType = type Integer;
  DNAssemblyContentTypeHelper = record helper for DNAssemblyContentType
  public const
    Default_ = 0;
    WindowsRuntime = 1;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyNameFlags')]
  DNAssemblyNameFlags = type Integer;
  DNAssemblyNameFlagsHelper = record helper for DNAssemblyNameFlags
  public const
    None = 0;
    PublicKey = 1;
    Retargetable = 256;
    EnableJITcompileOptimizer = 16384;
    EnableJITcompileTracking = 32768;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.BindingFlags')]
  DNBindingFlags = type Integer;
  DNBindingFlagsHelper = record helper for DNBindingFlags
  public const
    Default_ = 0;
    IgnoreCase = 1;
    DeclaredOnly = 2;
    Instance = 4;
    Static_ = 8;
    Public_ = 16;
    NonPublic = 32;
    FlattenHierarchy = 64;
    InvokeMethod = 256;
    CreateInstance = 512;
    GetField = 1024;
    SetField = 2048;
    GetProperty = 4096;
    SetProperty = 8192;
    PutDispProperty = 16384;
    PutRefDispProperty = 32768;
    ExactBinding = 65536;
    SuppressChangeType = 131072;
    OptionalParamBinding = 262144;
    IgnoreReturn = 16777216;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.CallingConventions')]
  DNCallingConventions = type Integer;
  DNCallingConventionsHelper = record helper for DNCallingConventions
  public const
    Standard = 1;
    VarArgs_ = 2;
    Any = 3;
    HasThis = 32;
    ExplicitThis = 64;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.AssemblyBuilderAccess')]
  DNAssemblyBuilderAccess = type Integer;
  DNAssemblyBuilderAccessHelper = record helper for DNAssemblyBuilderAccess
  public const
    Run = 1;
    Save = 2;
    RunAndSave = 3;
    ReflectionOnly = 6;
    RunAndCollect = 9;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.FlowControl')]
  DNFlowControl = type Integer;
  DNFlowControlHelper = record helper for DNFlowControl
  public const
    Branch = 0;
    Break = 1;
    Call = 2;
    Cond_Branch = 3;
    Meta = 4;
    Next = 5;
    Phi = 6;
    Return = 7;
    Throw = 8;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.OpCodeType')]
  DNOpCodeType = type Integer;
  DNOpCodeTypeHelper = record helper for DNOpCodeType
  public const
    Annotation = 0;
    Macro = 1;
    Nternal = 2;
    Objmodel = 3;
    Prefix = 4;
    Primitive = 5;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.OperandType')]
  DNOperandType = type Integer;
  DNOperandTypeHelper = record helper for DNOperandType
  public const
    InlineBrTarget = 0;
    InlineField = 1;
    InlineI = 2;
    InlineI8 = 3;
    InlineMethod = 4;
    InlineNone = 5;
    InlinePhi = 6;
    InlineR = 7;
    InlineSig = 9;
    InlineString = 10;
    InlineSwitch = 11;
    InlineTok = 12;
    InlineType = 13;
    InlineVar = 14;
    ShortInlineBrTarget = 15;
    ShortInlineI = 16;
    ShortInlineR = 17;
    ShortInlineVar = 18;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.PackingSize')]
  DNPackingSize = type Integer;
  DNPackingSizeHelper = record helper for DNPackingSize
  public const
    Unspecified = 0;
    Size1 = 1;
    Size2 = 2;
    Size4 = 4;
    Size8 = 8;
    Size16 = 16;
    Size32 = 32;
    Size64 = 64;
    Size128 = 128;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.PEFileKinds')]
  DNPEFileKinds = type Integer;
  DNPEFileKindsHelper = record helper for DNPEFileKinds
  public const
    Dll = 1;
    ConsoleApplication = 2;
    WindowApplication = 3;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.StackBehaviour')]
  DNStackBehaviour = type Integer;
  DNStackBehaviourHelper = record helper for DNStackBehaviour
  public const
    Pop0 = 0;
    Pop1 = 1;
    Pop1_pop1 = 2;
    Popi = 3;
    Popi_pop1 = 4;
    Popi_popi = 5;
    Popi_popi8 = 6;
    Popi_popi_popi = 7;
    Popi_popr4 = 8;
    Popi_popr8 = 9;
    Popref = 10;
    Popref_pop1 = 11;
    Popref_popi = 12;
    Popref_popi_popi = 13;
    Popref_popi_popi8 = 14;
    Popref_popi_popr4 = 15;
    Popref_popi_popr8 = 16;
    Popref_popi_popref = 17;
    Push0 = 18;
    Push1 = 19;
    Push1_push1 = 20;
    Pushi = 21;
    Pushi8 = 22;
    Pushr4 = 23;
    Pushr8 = 24;
    Pushref = 25;
    Varpop = 26;
    Varpush = 27;
    Popref_popi_pop1 = 28;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.EventAttributes')]
  DNEventAttributes = type Integer;
  DNEventAttributesHelper = record helper for DNEventAttributes
  public const
    None = 0;
    SpecialName = 512;
    ReservedMask = 1024;
    RTSpecialName = 1024;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ExceptionHandlingClauseOptions')]
  DNExceptionHandlingClauseOptions = type Integer;
  DNExceptionHandlingClauseOptionsHelper = record helper for DNExceptionHandlingClauseOptions
  public const
    Clause = 0;
    Filter = 1;
    Finally_ = 2;
    Fault = 4;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.FieldAttributes')]
  DNFieldAttributes = type Integer;
  DNFieldAttributesHelper = record helper for DNFieldAttributes
  public const
    PrivateScope = 0;
    Private_ = 1;
    FamANDAssem = 2;
    Assembly = 3;
    Family = 4;
    FamORAssem = 5;
    Public_ = 6;
    FieldAccessMask = 7;
    Static_ = 16;
    InitOnly = 32;
    Literal = 64;
    NotSerialized = 128;
    HasFieldRVA = 256;
    SpecialName = 512;
    RTSpecialName = 1024;
    HasFieldMarshal = 4096;
    PinvokeImpl = 8192;
    HasDefault = 32768;
    ReservedMask = 38144;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.GenericParameterAttributes')]
  DNGenericParameterAttributes = type Integer;
  DNGenericParameterAttributesHelper = record helper for DNGenericParameterAttributes
  public const
    None = 0;
    Covariant = 1;
    Contravariant = 2;
    VarianceMask = 3;
    ReferenceTypeConstraint = 4;
    NotNullableValueTypeConstraint = 8;
    DefaultConstructorConstraint = 16;
    SpecialConstraintMask = 28;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ImageFileMachine')]
  DNImageFileMachine = type Integer;
  DNImageFileMachineHelper = record helper for DNImageFileMachine
  public const
    I386 = 332;
    ARM = 452;
    IA64 = 512;
    AMD64 = 34404;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MemberTypes')]
  DNMemberTypes = type Integer;
  DNMemberTypesHelper = record helper for DNMemberTypes
  public const
    Constructor_ = 1;
    Event = 2;
    Field = 4;
    Method = 8;
    Property_ = 16;
    TypeInfo = 32;
    Custom = 64;
    NestedType = 128;
    All = 191;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodAttributes')]
  DNMethodAttributes = type Integer;
  DNMethodAttributesHelper = record helper for DNMethodAttributes
  public const
    ReuseSlot = 0;
    PrivateScope = 0;
    Private_ = 1;
    FamANDAssem = 2;
    Assembly = 3;
    Family = 4;
    FamORAssem = 5;
    Public_ = 6;
    MemberAccessMask = 7;
    UnmanagedExport = 8;
    Static_ = 16;
    Final_ = 32;
    Virtual_ = 64;
    HideBySig = 128;
    NewSlot = 256;
    VtableLayoutMask = 256;
    CheckAccessOnOverride = 512;
    Abstract_ = 1024;
    SpecialName = 2048;
    RTSpecialName = 4096;
    PinvokeImpl = 8192;
    HasSecurity = 16384;
    RequireSecObject = 32768;
    ReservedMask = 53248;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodImplAttributes')]
  DNMethodImplAttributes = type Integer;
  DNMethodImplAttributesHelper = record helper for DNMethodImplAttributes
  public const
    IL = 0;
    Managed = 0;
    Native = 1;
    OPTIL = 2;
    Runtime = 3;
    CodeTypeMask = 3;
    Unmanaged = 4;
    ManagedMask = 4;
    NoInlining = 8;
    ForwardRef = 16;
    Synchronized = 32;
    NoOptimization = 64;
    PreserveSig = 128;
    AggressiveInlining = 256;
    SecurityMitigations = 1024;
    InternalCall = 4096;
    MaxMethodImplVal = 65535;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ParameterAttributes')]
  DNParameterAttributes = type Integer;
  DNParameterAttributesHelper = record helper for DNParameterAttributes
  public const
    None = 0;
    In_ = 1;
    Out_ = 2;
    Lcid = 4;
    Retval = 8;
    Optional = 16;
    HasDefault = 4096;
    HasFieldMarshal = 8192;
    Reserved3 = 16384;
    Reserved4 = 32768;
    ReservedMask = 61440;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.PortableExecutableKinds')]
  DNPortableExecutableKinds = type Integer;
  DNPortableExecutableKindsHelper = record helper for DNPortableExecutableKinds
  public const
    NotAPortableExecutableImage = 0;
    ILOnly = 1;
    Required32Bit = 2;
    PE32Plus = 4;
    Unmanaged32Bit = 8;
    Preferred32Bit = 16;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ProcessorArchitecture')]
  DNProcessorArchitecture = type Integer;
  DNProcessorArchitectureHelper = record helper for DNProcessorArchitecture
  public const
    None = 0;
    MSIL = 1;
    X86 = 2;
    IA64 = 3;
    Amd64 = 4;
    Arm = 5;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.PropertyAttributes')]
  DNPropertyAttributes = type Integer;
  DNPropertyAttributesHelper = record helper for DNPropertyAttributes
  public const
    None = 0;
    SpecialName = 512;
    RTSpecialName = 1024;
    HasDefault = 4096;
    Reserved2 = 8192;
    Reserved3 = 16384;
    Reserved4 = 32768;
    ReservedMask = 62464;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ResourceAttributes')]
  DNResourceAttributes = type Integer;
  DNResourceAttributesHelper = record helper for DNResourceAttributes
  public const
    Public_ = 1;
    Private_ = 2;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ResourceLocation')]
  DNResourceLocation = type Integer;
  DNResourceLocationHelper = record helper for DNResourceLocation
  public const
    Embedded = 1;
    ContainedInAnotherAssembly = 2;
    ContainedInManifestFile = 4;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.TypeAttributes')]
  DNTypeAttributes = type Integer;
  DNTypeAttributesHelper = record helper for DNTypeAttributes
  public const
    NotPublic = 0;
    AutoLayout = 0;
    AnsiClass = 0;
    Class_ = 0;
    Public_ = 1;
    NestedPublic = 2;
    NestedPrivate = 3;
    NestedFamily = 4;
    NestedAssembly = 5;
    NestedFamANDAssem = 6;
    NestedFamORAssem = 7;
    VisibilityMask = 7;
    SequentialLayout = 8;
    ExplicitLayout = 16;
    LayoutMask = 24;
    Interface_ = 32;
    ClassSemanticsMask = 32;
    Abstract_ = 128;
    Sealed_ = 256;
    SpecialName = 1024;
    RTSpecialName = 2048;
    Import = 4096;
    Serializable = 8192;
    WindowsRuntime = 16384;
    UnicodeClass = 65536;
    AutoClass = 131072;
    StringFormatMask = 196608;
    CustomFormatClass = 196608;
    HasSecurity = 262144;
    ReservedMask = 264192;
    BeforeFieldInit = 1048576;
    CustomFormatMask = 12582912;
  end;


  //-------------namespace: System.Resources----------------
  [DNTypeName('System.Resources.UltimateResourceFallbackLocation')]
  DNUltimateResourceFallbackLocation = type Integer;
  DNUltimateResourceFallbackLocationHelper = record helper for DNUltimateResourceFallbackLocation
  public const
    MainAssembly = 0;
    Satellite = 1;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxations')]
  DNCompilationRelaxations = type Integer;
  DNCompilationRelaxationsHelper = record helper for DNCompilationRelaxations
  public const
    NoStringInterning = 8;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.LoadHint')]
  DNLoadHint = type Integer;
  DNLoadHintHelper = record helper for DNLoadHint
  public const
    Default_ = 0;
    Always = 1;
    Sometimes = 2;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.MethodCodeType')]
  DNMethodCodeType = type Integer;
  DNMethodCodeTypeHelper = record helper for DNMethodCodeType
  public const
    IL = 0;
    Native = 1;
    OPTIL = 2;
    Runtime = 3;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.MethodImplOptions')]
  DNMethodImplOptions = type Integer;
  DNMethodImplOptionsHelper = record helper for DNMethodImplOptions
  public const
    Unmanaged = 4;
    NoInlining = 8;
    ForwardRef = 16;
    Synchronized = 32;
    NoOptimization = 64;
    PreserveSig = 128;
    AggressiveInlining = 256;
    SecurityMitigations = 1024;
    InternalCall = 4096;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  [DNTypeName('System.Runtime.ConstrainedExecution.Cer')]
  DNCer = type Integer;
  DNCerHelper = record helper for DNCer
  public const
    None = 0;
    MayFail = 1;
    Success = 2;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  [DNTypeName('System.Runtime.ConstrainedExecution.Consistency')]
  DNConsistency = type Integer;
  DNConsistencyHelper = record helper for DNConsistency
  public const
    MayCorruptProcess = 0;
    MayCorruptAppDomain = 1;
    MayCorruptInstance = 2;
    WillNotCorruptState = 3;
  end;


  //-------------namespace: System.Runtime----------------
  [DNTypeName('System.Runtime.GCLargeObjectHeapCompactionMode')]
  DNGCLargeObjectHeapCompactionMode = type Integer;
  DNGCLargeObjectHeapCompactionModeHelper = record helper for DNGCLargeObjectHeapCompactionMode
  public const
    Default_ = 1;
    CompactOnce = 2;
  end;


  //-------------namespace: System.Runtime----------------
  [DNTypeName('System.Runtime.GCLatencyMode')]
  DNGCLatencyMode = type Integer;
  DNGCLatencyModeHelper = record helper for DNGCLatencyMode
  public const
    Batch = 0;
    Interactive = 1;
    LowLatency = 2;
    SustainedLowLatency = 3;
    NoGCRegion = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.Architecture')]
  DNArchitecture = type Integer;
  DNArchitectureHelper = record helper for DNArchitecture
  public const
    X86 = 0;
    X64 = 1;
    Arm = 2;
    Arm64 = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.AssemblyRegistrationFlags')]
  DNAssemblyRegistrationFlags = type Integer;
  DNAssemblyRegistrationFlagsHelper = record helper for DNAssemblyRegistrationFlags
  public const
    None = 0;
    SetCodeBase = 1;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CALLCONV')]
  DNInteropServices_CALLCONV = type Integer;
  DNInteropServices_CALLCONVHelper = record helper for DNInteropServices_CALLCONV
  public const
    CC_CDECL = 1;
    CC_MSCPASCAL = 2;
    CC_PASCAL = 2;
    CC_MACPASCAL = 3;
    CC_STDCALL = 4;
    CC_RESERVED = 5;
    CC_SYSCALL = 6;
    CC_MPWCDECL = 7;
    CC_MPWPASCAL = 8;
    CC_MAX = 9;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CallingConvention')]
  DNCallingConvention = type Integer;
  DNCallingConventionHelper = record helper for DNCallingConvention
  public const
    Winapi = 1;
    Cdecl_ = 2;
    StdCall_ = 3;
    ThisCall = 4;
    FastCall = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CharSet')]
  DNCharSet = type Integer;
  DNCharSetHelper = record helper for DNCharSet
  public const
    None = 1;
    Ansi = 2;
    Unicode = 3;
    Auto = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceType')]
  DNClassInterfaceType = type Integer;
  DNClassInterfaceTypeHelper = record helper for DNClassInterfaceType
  public const
    None = 0;
    AutoDispatch = 1;
    AutoDual = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ComInterfaceType')]
  DNComInterfaceType = type Integer;
  DNComInterfaceTypeHelper = record helper for DNComInterfaceType
  public const
    InterfaceIsDual = 0;
    InterfaceIsIUnknown = 1;
    InterfaceIsIDispatch = 2;
    InterfaceIsIInspectable = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ComMemberType')]
  DNComMemberType = type Integer;
  DNComMemberTypeHelper = record helper for DNComMemberType
  public const
    Method = 0;
    PropGet = 1;
    PropSet = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.CALLCONV')]
  DNComTypes_CALLCONV = type Integer;
  DNComTypes_CALLCONVHelper = record helper for DNComTypes_CALLCONV
  public const
    CC_CDECL = 1;
    CC_MSCPASCAL = 2;
    CC_PASCAL = 2;
    CC_MACPASCAL = 3;
    CC_STDCALL = 4;
    CC_RESERVED = 5;
    CC_SYSCALL = 6;
    CC_MPWCDECL = 7;
    CC_MPWPASCAL = 8;
    CC_MAX = 9;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.DESCKIND')]
  DNComTypes_DESCKIND = type Integer;
  DNComTypes_DESCKINDHelper = record helper for DNComTypes_DESCKIND
  public const
    DESCKIND_NONE = 0;
    DESCKIND_FUNCDESC = 1;
    DESCKIND_VARDESC = 2;
    DESCKIND_TYPECOMP = 3;
    DESCKIND_IMPLICITAPPOBJ = 4;
    DESCKIND_MAX = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCFLAGS')]
  DNComTypes_FUNCFLAGS = type Integer;
  DNComTypes_FUNCFLAGSHelper = record helper for DNComTypes_FUNCFLAGS
  public const
    FUNCFLAG_FRESTRICTED = 1;
    FUNCFLAG_FSOURCE = 2;
    FUNCFLAG_FBINDABLE = 4;
    FUNCFLAG_FREQUESTEDIT = 8;
    FUNCFLAG_FDISPLAYBIND = 16;
    FUNCFLAG_FDEFAULTBIND = 32;
    FUNCFLAG_FHIDDEN = 64;
    FUNCFLAG_FUSESGETLASTERROR = 128;
    FUNCFLAG_FDEFAULTCOLLELEM = 256;
    FUNCFLAG_FUIDEFAULT = 512;
    FUNCFLAG_FNONBROWSABLE = 1024;
    FUNCFLAG_FREPLACEABLE = 2048;
    FUNCFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCKIND')]
  DNComTypes_FUNCKIND = type Integer;
  DNComTypes_FUNCKINDHelper = record helper for DNComTypes_FUNCKIND
  public const
    FUNC_VIRTUAL = 0;
    FUNC_PUREVIRTUAL = 1;
    FUNC_NONVIRTUAL = 2;
    FUNC_STATIC = 3;
    FUNC_DISPATCH = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLFLAG')]
  DNComTypes_IDLFLAG = type Integer;
  DNComTypes_IDLFLAGHelper = record helper for DNComTypes_IDLFLAG
  public const
    IDLFLAG_NONE = 0;
    IDLFLAG_FIN = 1;
    IDLFLAG_FOUT = 2;
    IDLFLAG_FLCID = 4;
    IDLFLAG_FRETVAL = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS')]
  DNComTypes_IMPLTYPEFLAGS = type Integer;
  DNComTypes_IMPLTYPEFLAGSHelper = record helper for DNComTypes_IMPLTYPEFLAGS
  public const
    IMPLTYPEFLAG_FDEFAULT = 1;
    IMPLTYPEFLAG_FSOURCE = 2;
    IMPLTYPEFLAG_FRESTRICTED = 4;
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.INVOKEKIND')]
  DNComTypes_INVOKEKIND = type Integer;
  DNComTypes_INVOKEKINDHelper = record helper for DNComTypes_INVOKEKIND
  public const
    INVOKE_FUNC = 1;
    INVOKE_PROPERTYGET = 2;
    INVOKE_PROPERTYPUT = 4;
    INVOKE_PROPERTYPUTREF = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.LIBFLAGS')]
  DNComTypes_LIBFLAGS = type Integer;
  DNComTypes_LIBFLAGSHelper = record helper for DNComTypes_LIBFLAGS
  public const
    LIBFLAG_FRESTRICTED = 1;
    LIBFLAG_FCONTROL = 2;
    LIBFLAG_FHIDDEN = 4;
    LIBFLAG_FHASDISKIMAGE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMFLAG')]
  DNComTypes_PARAMFLAG = type Integer;
  DNComTypes_PARAMFLAGHelper = record helper for DNComTypes_PARAMFLAG
  public const
    PARAMFLAG_NONE = 0;
    PARAMFLAG_FIN = 1;
    PARAMFLAG_FOUT = 2;
    PARAMFLAG_FLCID = 4;
    PARAMFLAG_FRETVAL = 8;
    PARAMFLAG_FOPT = 16;
    PARAMFLAG_FHASDEFAULT = 32;
    PARAMFLAG_FHASCUSTDATA = 64;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.SYSKIND')]
  DNComTypes_SYSKIND = type Integer;
  DNComTypes_SYSKINDHelper = record helper for DNComTypes_SYSKIND
  public const
    SYS_WIN16 = 0;
    SYS_WIN32 = 1;
    SYS_MAC = 2;
    SYS_WIN64 = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEFLAGS')]
  DNComTypes_TYPEFLAGS = type Integer;
  DNComTypes_TYPEFLAGSHelper = record helper for DNComTypes_TYPEFLAGS
  public const
    TYPEFLAG_FAPPOBJECT = 1;
    TYPEFLAG_FCANCREATE = 2;
    TYPEFLAG_FLICENSED = 4;
    TYPEFLAG_FPREDECLID = 8;
    TYPEFLAG_FHIDDEN = 16;
    TYPEFLAG_FCONTROL = 32;
    TYPEFLAG_FDUAL = 64;
    TYPEFLAG_FNONEXTENSIBLE = 128;
    TYPEFLAG_FOLEAUTOMATION = 256;
    TYPEFLAG_FRESTRICTED = 512;
    TYPEFLAG_FAGGREGATABLE = 1024;
    TYPEFLAG_FREPLACEABLE = 2048;
    TYPEFLAG_FDISPATCHABLE = 4096;
    TYPEFLAG_FREVERSEBIND = 8192;
    TYPEFLAG_FPROXY = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEKIND')]
  DNComTypes_TYPEKIND = type Integer;
  DNComTypes_TYPEKINDHelper = record helper for DNComTypes_TYPEKIND
  public const
    TKIND_ENUM = 0;
    TKIND_RECORD = 1;
    TKIND_MODULE = 2;
    TKIND_INTERFACE = 3;
    TKIND_DISPATCH = 4;
    TKIND_COCLASS = 5;
    TKIND_ALIAS = 6;
    TKIND_UNION = 7;
    TKIND_MAX = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARFLAGS')]
  DNComTypes_VARFLAGS = type Integer;
  DNComTypes_VARFLAGSHelper = record helper for DNComTypes_VARFLAGS
  public const
    VARFLAG_FREADONLY = 1;
    VARFLAG_FSOURCE = 2;
    VARFLAG_FBINDABLE = 4;
    VARFLAG_FREQUESTEDIT = 8;
    VARFLAG_FDISPLAYBIND = 16;
    VARFLAG_FDEFAULTBIND = 32;
    VARFLAG_FHIDDEN = 64;
    VARFLAG_FRESTRICTED = 128;
    VARFLAG_FDEFAULTCOLLELEM = 256;
    VARFLAG_FUIDEFAULT = 512;
    VARFLAG_FNONBROWSABLE = 1024;
    VARFLAG_FREPLACEABLE = 2048;
    VARFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARKIND')]
  DNVARKIND = type Integer;
  DNVARKINDHelper = record helper for DNVARKIND
  public const
    VAR_PERINSTANCE = 0;
    VAR_STATIC = 1;
    VAR_CONST = 2;
    VAR_DISPATCH = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceMode')]
  DNCustomQueryInterfaceMode = type Integer;
  DNCustomQueryInterfaceModeHelper = record helper for DNCustomQueryInterfaceMode
  public const
    Ignore = 0;
    Allow = 1;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceResult')]
  DNCustomQueryInterfaceResult = type Integer;
  DNCustomQueryInterfaceResultHelper = record helper for DNCustomQueryInterfaceResult
  public const
    Handled = 0;
    NotHandled = 1;
    Failed = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.DESCKIND')]
  DNInteropServices_DESCKIND = type Integer;
  DNInteropServices_DESCKINDHelper = record helper for DNInteropServices_DESCKIND
  public const
    DESCKIND_NONE = 0;
    DESCKIND_FUNCDESC = 1;
    DESCKIND_VARDESC = 2;
    DESCKIND_TYPECOMP = 3;
    DESCKIND_IMPLICITAPPOBJ = 4;
    DESCKIND_MAX = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.DllImportSearchPath')]
  DNDllImportSearchPath = type Integer;
  DNDllImportSearchPathHelper = record helper for DNDllImportSearchPath
  public const
    LegacyBehavior = 0;
    AssemblyDirectory = 2;
    UseDllDirectoryForDependencies = 256;
    ApplicationDirectory = 512;
    UserDirectories = 1024;
    System32 = 2048;
    SafeDirectories = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ExporterEventKind')]
  DNExporterEventKind = type Integer;
  DNExporterEventKindHelper = record helper for DNExporterEventKind
  public const
    NOTIF_TYPECONVERTED = 0;
    NOTIF_CONVERTWARNING = 1;
    ERROR_REFTOINVALIDASSEMBLY = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.FUNCFLAGS')]
  DNInteropServices_FUNCFLAGS = type Integer;
  DNInteropServices_FUNCFLAGSHelper = record helper for DNInteropServices_FUNCFLAGS
  public const
    FUNCFLAG_FRESTRICTED = 1;
    FUNCFLAG_FSOURCE = 2;
    FUNCFLAG_FBINDABLE = 4;
    FUNCFLAG_FREQUESTEDIT = 8;
    FUNCFLAG_FDISPLAYBIND = 16;
    FUNCFLAG_FDEFAULTBIND = 32;
    FUNCFLAG_FHIDDEN = 64;
    FUNCFLAG_FUSESGETLASTERROR = 128;
    FUNCFLAG_FDEFAULTCOLLELEM = 256;
    FUNCFLAG_FUIDEFAULT = 512;
    FUNCFLAG_FNONBROWSABLE = 1024;
    FUNCFLAG_FREPLACEABLE = 2048;
    FUNCFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.FUNCKIND')]
  DNInteropServices_FUNCKIND = type Integer;
  DNInteropServices_FUNCKINDHelper = record helper for DNInteropServices_FUNCKIND
  public const
    FUNC_VIRTUAL = 0;
    FUNC_PUREVIRTUAL = 1;
    FUNC_NONVIRTUAL = 2;
    FUNC_STATIC = 3;
    FUNC_DISPATCH = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.GCHandleType')]
  DNGCHandleType = type Integer;
  DNGCHandleTypeHelper = record helper for DNGCHandleType
  public const
    Weak = 0;
    WeakTrackResurrection = 1;
    Normal = 2;
    Pinned = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.IDispatchImplType')]
  DNIDispatchImplType = type Integer;
  DNIDispatchImplTypeHelper = record helper for DNIDispatchImplType
  public const
    SystemDefinedImpl = 0;
    InternalImpl = 1;
    CompatibleImpl = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.IDLFLAG')]
  DNInteropServices_IDLFLAG = type Integer;
  DNInteropServices_IDLFLAGHelper = record helper for DNInteropServices_IDLFLAG
  public const
    IDLFLAG_NONE = 0;
    IDLFLAG_FIN = 1;
    IDLFLAG_FOUT = 2;
    IDLFLAG_FLCID = 4;
    IDLFLAG_FRETVAL = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.IMPLTYPEFLAGS')]
  DNInteropServices_IMPLTYPEFLAGS = type Integer;
  DNInteropServices_IMPLTYPEFLAGSHelper = record helper for DNInteropServices_IMPLTYPEFLAGS
  public const
    IMPLTYPEFLAG_FDEFAULT = 1;
    IMPLTYPEFLAG_FSOURCE = 2;
    IMPLTYPEFLAG_FRESTRICTED = 4;
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ImporterEventKind')]
  DNImporterEventKind = type Integer;
  DNImporterEventKindHelper = record helper for DNImporterEventKind
  public const
    NOTIF_TYPECONVERTED = 0;
    NOTIF_CONVERTWARNING = 1;
    ERROR_REFTOINVALIDTYPELIB = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.INVOKEKIND')]
  DNInteropServices_INVOKEKIND = type Integer;
  DNInteropServices_INVOKEKINDHelper = record helper for DNInteropServices_INVOKEKIND
  public const
    INVOKE_FUNC = 1;
    INVOKE_PROPERTYGET = 2;
    INVOKE_PROPERTYPUT = 4;
    INVOKE_PROPERTYPUTREF = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.LayoutKind')]
  DNLayoutKind = type Integer;
  DNLayoutKindHelper = record helper for DNLayoutKind
  public const
    Sequential = 0;
    Explicit = 2;
    Auto = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.LIBFLAGS')]
  DNInteropServices_LIBFLAGS = type Integer;
  DNInteropServices_LIBFLAGSHelper = record helper for DNInteropServices_LIBFLAGS
  public const
    LIBFLAG_FRESTRICTED = 1;
    LIBFLAG_FCONTROL = 2;
    LIBFLAG_FHIDDEN = 4;
    LIBFLAG_FHASDISKIMAGE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.PARAMFLAG')]
  DNInteropServices_PARAMFLAG = type Integer;
  DNInteropServices_PARAMFLAGHelper = record helper for DNInteropServices_PARAMFLAG
  public const
    PARAMFLAG_NONE = 0;
    PARAMFLAG_FIN = 1;
    PARAMFLAG_FOUT = 2;
    PARAMFLAG_FLCID = 4;
    PARAMFLAG_FRETVAL = 8;
    PARAMFLAG_FOPT = 16;
    PARAMFLAG_FHASDEFAULT = 32;
    PARAMFLAG_FHASCUSTDATA = 64;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.RegistrationClassContext')]
  DNRegistrationClassContext = type Integer;
  DNRegistrationClassContextHelper = record helper for DNRegistrationClassContext
  public const
    InProcessServer = 1;
    InProcessHandler = 2;
    LocalServer = 4;
    InProcessServer16 = 8;
    RemoteServer = 16;
    InProcessHandler16 = 32;
    Reserved1 = 64;
    Reserved2 = 128;
    Reserved3 = 256;
    Reserved4 = 512;
    NoCodeDownload = 1024;
    Reserved5 = 2048;
    NoCustomMarshal = 4096;
    EnableCodeDownload = 8192;
    NoFailureLog = 16384;
    DisableActivateAsActivator = 32768;
    EnableActivateAsActivator = 65536;
    FromDefaultContext = 131072;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.RegistrationConnectionType')]
  DNRegistrationConnectionType = type Integer;
  DNRegistrationConnectionTypeHelper = record helper for DNRegistrationConnectionType
  public const
    SingleUse = 0;
    MultipleUse = 1;
    MultiSeparate = 2;
    Suspended = 4;
    Surrogate = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.SYSKIND')]
  DNInteropServices_SYSKIND = type Integer;
  DNInteropServices_SYSKINDHelper = record helper for DNInteropServices_SYSKIND
  public const
    SYS_WIN16 = 0;
    SYS_WIN32 = 1;
    SYS_MAC = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.TYPEFLAGS')]
  DNInteropServices_TYPEFLAGS = type Integer;
  DNInteropServices_TYPEFLAGSHelper = record helper for DNInteropServices_TYPEFLAGS
  public const
    TYPEFLAG_FAPPOBJECT = 1;
    TYPEFLAG_FCANCREATE = 2;
    TYPEFLAG_FLICENSED = 4;
    TYPEFLAG_FPREDECLID = 8;
    TYPEFLAG_FHIDDEN = 16;
    TYPEFLAG_FCONTROL = 32;
    TYPEFLAG_FDUAL = 64;
    TYPEFLAG_FNONEXTENSIBLE = 128;
    TYPEFLAG_FOLEAUTOMATION = 256;
    TYPEFLAG_FRESTRICTED = 512;
    TYPEFLAG_FAGGREGATABLE = 1024;
    TYPEFLAG_FREPLACEABLE = 2048;
    TYPEFLAG_FDISPATCHABLE = 4096;
    TYPEFLAG_FREVERSEBIND = 8192;
    TYPEFLAG_FPROXY = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.TYPEKIND')]
  DNInteropServices_TYPEKIND = type Integer;
  DNInteropServices_TYPEKINDHelper = record helper for DNInteropServices_TYPEKIND
  public const
    TKIND_ENUM = 0;
    TKIND_RECORD = 1;
    TKIND_MODULE = 2;
    TKIND_INTERFACE = 3;
    TKIND_DISPATCH = 4;
    TKIND_COCLASS = 5;
    TKIND_ALIAS = 6;
    TKIND_UNION = 7;
    TKIND_MAX = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.TypeLibExporterFlags')]
  DNTypeLibExporterFlags = type Integer;
  DNTypeLibExporterFlagsHelper = record helper for DNTypeLibExporterFlags
  public const
    None = 0;
    OnlyReferenceRegistered = 1;
    CallerResolvedReferences = 2;
    OldNames = 4;
    ExportAs32Bit = 16;
    ExportAs64Bit = 32;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.TypeLibFuncFlags')]
  DNTypeLibFuncFlags = type Integer;
  DNTypeLibFuncFlagsHelper = record helper for DNTypeLibFuncFlags
  public const
    FRestricted = 1;
    FSource = 2;
    FBindable = 4;
    FRequestEdit = 8;
    FDisplayBind = 16;
    FDefaultBind = 32;
    FHidden = 64;
    FUsesGetLastError = 128;
    FDefaultCollelem = 256;
    FUiDefault = 512;
    FNonBrowsable = 1024;
    FReplaceable = 2048;
    FImmediateBind = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.TypeLibImporterFlags')]
  DNTypeLibImporterFlags = type Integer;
  DNTypeLibImporterFlagsHelper = record helper for DNTypeLibImporterFlags
  public const
    None = 0;
    PrimaryInteropAssembly = 1;
    UnsafeInterfaces = 2;
    SafeArrayAsSystemArray = 4;
    TransformDispRetVals = 8;
    PreventClassMembers = 16;
    SerializableValueClasses = 32;
    ImportAsX86 = 256;
    ImportAsX64 = 512;
    ImportAsItanium = 1024;
    ImportAsAgnostic = 2048;
    ReflectionOnlyLoading = 4096;
    NoDefineVersionResource = 8192;
    ImportAsArm = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.TypeLibTypeFlags')]
  DNTypeLibTypeFlags = type Integer;
  DNTypeLibTypeFlagsHelper = record helper for DNTypeLibTypeFlags
  public const
    FAppObject = 1;
    FCanCreate = 2;
    FLicensed = 4;
    FPreDeclId = 8;
    FHidden = 16;
    FControl = 32;
    FDual = 64;
    FNonExtensible = 128;
    FOleAutomation = 256;
    FRestricted = 512;
    FAggregatable = 1024;
    FReplaceable = 2048;
    FDispatchable = 4096;
    FReverseBind = 8192;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.TypeLibVarFlags')]
  DNTypeLibVarFlags = type Integer;
  DNTypeLibVarFlagsHelper = record helper for DNTypeLibVarFlags
  public const
    FReadOnly = 1;
    FSource = 2;
    FBindable = 4;
    FRequestEdit = 8;
    FDisplayBind = 16;
    FDefaultBind = 32;
    FHidden = 64;
    FRestricted = 128;
    FDefaultCollelem = 256;
    FUiDefault = 512;
    FNonBrowsable = 1024;
    FReplaceable = 2048;
    FImmediateBind = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UnmanagedType')]
  DNUnmanagedType = type Integer;
  DNUnmanagedTypeHelper = record helper for DNUnmanagedType
  public const
    Bool = 2;
    I1 = 3;
    U1 = 4;
    I2 = 5;
    U2 = 6;
    I4 = 7;
    U4 = 8;
    I8 = 9;
    U8 = 10;
    R4 = 11;
    R8 = 12;
    Currency = 15;
    BStr = 19;
    LPStr = 20;
    LPWStr = 21;
    LPTStr = 22;
    ByValTStr = 23;
    IUnknown = 25;
    IDispatch = 26;
    Struct = 27;
    Interface_ = 28;
    SafeArray = 29;
    ByValArray = 30;
    SysInt = 31;
    SysUInt = 32;
    VBByRefStr = 34;
    AnsiBStr = 35;
    TBStr = 36;
    VariantBool = 37;
    FunctionPtr = 38;
    AsAny = 40;
    LPArray = 42;
    LPStruct = 43;
    CustomMarshaler = 44;
    Error = 45;
    IInspectable = 46;
    HString = 47;
    LPUTF8Str = 48;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.VarEnum')]
  DNVarEnum = type Integer;
  DNVarEnumHelper = record helper for DNVarEnum
  public const
    VT_EMPTY = 0;
    VT_NULL = 1;
    VT_I2 = 2;
    VT_I4 = 3;
    VT_R4 = 4;
    VT_R8 = 5;
    VT_CY = 6;
    VT_DATE = 7;
    VT_BSTR = 8;
    VT_DISPATCH = 9;
    VT_ERROR = 10;
    VT_BOOL = 11;
    VT_VARIANT = 12;
    VT_UNKNOWN = 13;
    VT_DECIMAL = 14;
    VT_I1 = 16;
    VT_UI1 = 17;
    VT_UI2 = 18;
    VT_UI4 = 19;
    VT_I8 = 20;
    VT_UI8 = 21;
    VT_INT = 22;
    VT_UINT = 23;
    VT_VOID = 24;
    VT_HRESULT = 25;
    VT_PTR = 26;
    VT_SAFEARRAY = 27;
    VT_CARRAY = 28;
    VT_USERDEFINED = 29;
    VT_LPSTR = 30;
    VT_LPWSTR = 31;
    VT_RECORD = 36;
    VT_FILETIME = 64;
    VT_BLOB = 65;
    VT_STREAM = 66;
    VT_STORAGE = 67;
    VT_STREAMED_OBJECT = 68;
    VT_STORED_OBJECT = 69;
    VT_BLOB_OBJECT = 70;
    VT_CF = 71;
    VT_CLSID = 72;
    VT_VECTOR = 4096;
    VT_ARRAY = 8192;
    VT_BYREF = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.VARFLAGS')]
  DNInteropServices_VARFLAGS = type Integer;
  DNInteropServices_VARFLAGSHelper = record helper for DNInteropServices_VARFLAGS
  public const
    VARFLAG_FREADONLY = 1;
    VARFLAG_FSOURCE = 2;
    VARFLAG_FBINDABLE = 4;
    VARFLAG_FREQUESTEDIT = 8;
    VARFLAG_FDISPLAYBIND = 16;
    VARFLAG_FDEFAULTBIND = 32;
    VARFLAG_FHIDDEN = 64;
    VARFLAG_FRESTRICTED = 128;
    VARFLAG_FDEFAULTCOLLELEM = 256;
    VARFLAG_FUIDEFAULT = 512;
    VARFLAG_FNONBROWSABLE = 1024;
    VARFLAG_FREPLACEABLE = 2048;
    VARFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.Remoting.Activation----------------
  [DNTypeName('System.Runtime.Remoting.Activation.ActivatorLevel')]
  DNActivatorLevel = type Integer;
  DNActivatorLevelHelper = record helper for DNActivatorLevel
  public const
    Construction = 4;
    Context = 8;
    AppDomain = 12;
    Process = 16;
    Machine = 20;
  end;


  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.ServerProcessing')]
  DNServerProcessing = type Integer;
  DNServerProcessingHelper = record helper for DNServerProcessing
  public const
    Complete = 0;
    OneWay = 1;
    Async = 2;
  end;


  //-------------namespace: System.Runtime.Remoting----------------
  [DNTypeName('System.Runtime.Remoting.CustomErrorsModes')]
  DNCustomErrorsModes = type Integer;
  DNCustomErrorsModesHelper = record helper for DNCustomErrorsModes
  public const
    On_ = 0;
    Off = 1;
    RemoteOnly = 2;
  end;


  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  [DNTypeName('System.Runtime.Remoting.Lifetime.LeaseState')]
  DNLeaseState = type Integer;
  DNLeaseStateHelper = record helper for DNLeaseState
  public const
    Null = 0;
    Initial = 1;
    Active = 2;
    Renewing = 3;
    Expired = 4;
  end;


  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  [DNTypeName('System.Runtime.Remoting.Metadata.SoapOption')]
  DNSoapOption = type Integer;
  DNSoapOptionHelper = record helper for DNSoapOption
  public const
    None = 0;
    AlwaysIncludeTypes = 1;
    XsdString = 2;
    EmbedAll = 4;
    Option1 = 8;
    Option2 = 16;
  end;


  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  [DNTypeName('System.Runtime.Remoting.Metadata.XmlFieldOrderOption')]
  DNXmlFieldOrderOption = type Integer;
  DNXmlFieldOrderOptionHelper = record helper for DNXmlFieldOrderOption
  public const
    All = 0;
    Sequence = 1;
    Choice = 2;
  end;


  //-------------namespace: System.Runtime.Remoting----------------
  [DNTypeName('System.Runtime.Remoting.WellKnownObjectMode')]
  DNWellKnownObjectMode = type Integer;
  DNWellKnownObjectModeHelper = record helper for DNWellKnownObjectMode
  public const
    Singleton = 1;
    SingleCall = 2;
  end;


  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  [DNTypeName('System.Runtime.Serialization.Formatters.FormatterAssemblyStyle')]
  DNFormatterAssemblyStyle = type Integer;
  DNFormatterAssemblyStyleHelper = record helper for DNFormatterAssemblyStyle
  public const
    Simple = 0;
    Full = 1;
  end;


  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  [DNTypeName('System.Runtime.Serialization.Formatters.FormatterTypeStyle')]
  DNFormatterTypeStyle = type Integer;
  DNFormatterTypeStyleHelper = record helper for DNFormatterTypeStyle
  public const
    TypesWhenNeeded = 0;
    TypesAlways = 1;
    XsdString = 2;
  end;


  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  [DNTypeName('System.Runtime.Serialization.Formatters.TypeFilterLevel')]
  DNTypeFilterLevel = type Integer;
  DNTypeFilterLevelHelper = record helper for DNTypeFilterLevel
  public const
    Low = 2;
    Full = 3;
  end;


  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.StreamingContextStates')]
  DNStreamingContextStates = type Integer;
  DNStreamingContextStatesHelper = record helper for DNStreamingContextStates
  public const
    CrossProcess = 1;
    CrossMachine = 2;
    File_ = 4;
    Persistence = 8;
    Remoting = 16;
    Other = 32;
    Clone = 64;
    CrossAppDomain = 128;
    All = 255;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesOptions')]
  DNComponentGuaranteesOptions = type Integer;
  DNComponentGuaranteesOptionsHelper = record helper for DNComponentGuaranteesOptions
  public const
    None = 0;
    Exchange = 1;
    Stable = 2;
    SideBySide = 4;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ResourceScope')]
  DNResourceScope = type Integer;
  DNResourceScopeHelper = record helper for DNResourceScope
  public const
    None = 0;
    Machine = 1;
    Process = 2;
    AppDomain = 4;
    Library_ = 8;
    Private_ = 16;
    Assembly = 32;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AccessControlActions')]
  DNAccessControlActions = type Integer;
  DNAccessControlActionsHelper = record helper for DNAccessControlActions
  public const
    None = 0;
    View = 1;
    Change = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AccessControlModification')]
  DNAccessControlModification = type Integer;
  DNAccessControlModificationHelper = record helper for DNAccessControlModification
  public const
    Add = 0;
    Set_ = 1;
    Reset = 2;
    Remove = 3;
    RemoveAll = 4;
    RemoveSpecific = 5;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AccessControlSections')]
  DNAccessControlSections = type Integer;
  DNAccessControlSectionsHelper = record helper for DNAccessControlSections
  public const
    None = 0;
    Audit = 1;
    Access = 2;
    Owner = 4;
    Group = 8;
    All = 15;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AccessControlType')]
  DNAccessControlType = type Integer;
  DNAccessControlTypeHelper = record helper for DNAccessControlType
  public const
    Allow = 0;
    Deny = 1;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AceFlags')]
  DNAceFlags = type Integer;
  DNAceFlagsHelper = record helper for DNAceFlags
  public const
    None = 0;
    ObjectInherit = 1;
    ContainerInherit = 2;
    NoPropagateInherit = 4;
    InheritOnly = 8;
    InheritanceFlags = 15;
    Inherited_ = 16;
    SuccessfulAccess = 64;
    FailedAccess = 128;
    AuditFlags = 192;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AceQualifier')]
  DNAceQualifier = type Integer;
  DNAceQualifierHelper = record helper for DNAceQualifier
  public const
    AccessAllowed = 0;
    AccessDenied = 1;
    SystemAudit = 2;
    SystemAlarm = 3;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AceType')]
  DNAceType = type Integer;
  DNAceTypeHelper = record helper for DNAceType
  public const
    AccessAllowed = 0;
    AccessDenied = 1;
    SystemAudit = 2;
    SystemAlarm = 3;
    AccessAllowedCompound = 4;
    AccessAllowedObject = 5;
    AccessDeniedObject = 6;
    SystemAuditObject = 7;
    SystemAlarmObject = 8;
    AccessAllowedCallback = 9;
    AccessDeniedCallback = 10;
    AccessAllowedCallbackObject = 11;
    AccessDeniedCallbackObject = 12;
    SystemAuditCallback = 13;
    SystemAlarmCallback = 14;
    SystemAuditCallbackObject = 15;
    SystemAlarmCallbackObject = 16;
    MaxDefinedAceType = 16;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.AuditFlags')]
  DNAuditFlags = type Integer;
  DNAuditFlagsHelper = record helper for DNAuditFlags
  public const
    None = 0;
    Success = 1;
    Failure = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.CompoundAceType')]
  DNCompoundAceType = type Integer;
  DNCompoundAceTypeHelper = record helper for DNCompoundAceType
  public const
    Impersonation = 1;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.ControlFlags')]
  DNControlFlags = type Integer;
  DNControlFlagsHelper = record helper for DNControlFlags
  public const
    None = 0;
    OwnerDefaulted = 1;
    GroupDefaulted = 2;
    DiscretionaryAclPresent = 4;
    DiscretionaryAclDefaulted = 8;
    SystemAclPresent = 16;
    SystemAclDefaulted = 32;
    DiscretionaryAclUntrusted = 64;
    ServerSecurity = 128;
    DiscretionaryAclAutoInheritRequired = 256;
    SystemAclAutoInheritRequired = 512;
    DiscretionaryAclAutoInherited = 1024;
    SystemAclAutoInherited = 2048;
    DiscretionaryAclProtected = 4096;
    SystemAclProtected = 8192;
    RMControlValid = 16384;
    SelfRelative = 32768;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.CryptoKeyRights')]
  DNCryptoKeyRights = type Integer;
  DNCryptoKeyRightsHelper = record helper for DNCryptoKeyRights
  public const
    ReadData = 1;
    WriteData = 2;
    ReadExtendedAttributes = 8;
    WriteExtendedAttributes = 16;
    ReadAttributes = 128;
    WriteAttributes = 256;
    Delete = 65536;
    ReadPermissions = 131072;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    Synchronize = 1048576;
    FullControl = 2032027;
    GenericAll = 268435456;
    GenericExecute = 536870912;
    GenericWrite = 1073741824;
    GenericRead = -2147483648;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.EventWaitHandleRights')]
  DNEventWaitHandleRights = type Integer;
  DNEventWaitHandleRightsHelper = record helper for DNEventWaitHandleRights
  public const
    Modify = 2;
    Delete = 65536;
    ReadPermissions = 131072;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    Synchronize = 1048576;
    FullControl = 2031619;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.FileSystemRights')]
  DNFileSystemRights = type Integer;
  DNFileSystemRightsHelper = record helper for DNFileSystemRights
  public const
    ListDirectory = 1;
    ReadData = 1;
    WriteData = 2;
    CreateFiles = 2;
    CreateDirectories = 4;
    AppendData = 4;
    ReadExtendedAttributes = 8;
    WriteExtendedAttributes = 16;
    Traverse = 32;
    ExecuteFile = 32;
    DeleteSubdirectoriesAndFiles = 64;
    ReadAttributes = 128;
    WriteAttributes = 256;
    Write = 278;
    Delete = 65536;
    ReadPermissions = 131072;
    Read = 131209;
    ReadAndExecute = 131241;
    Modify = 197055;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    Synchronize = 1048576;
    FullControl = 2032127;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.InheritanceFlags')]
  DNInheritanceFlags = type Integer;
  DNInheritanceFlagsHelper = record helper for DNInheritanceFlags
  public const
    None = 0;
    ContainerInherit = 1;
    ObjectInherit = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.MutexRights')]
  DNMutexRights = type Integer;
  DNMutexRightsHelper = record helper for DNMutexRights
  public const
    Modify = 1;
    Delete = 65536;
    ReadPermissions = 131072;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    Synchronize = 1048576;
    FullControl = 2031617;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.ObjectAceFlags')]
  DNObjectAceFlags = type Integer;
  DNObjectAceFlagsHelper = record helper for DNObjectAceFlags
  public const
    None = 0;
    ObjectAceTypePresent = 1;
    InheritedObjectAceTypePresent = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.PropagationFlags')]
  DNPropagationFlags = type Integer;
  DNPropagationFlagsHelper = record helper for DNPropagationFlags
  public const
    None = 0;
    NoPropagateInherit = 1;
    InheritOnly = 2;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.RegistryRights')]
  DNRegistryRights = type Integer;
  DNRegistryRightsHelper = record helper for DNRegistryRights
  public const
    QueryValues = 1;
    SetValue = 2;
    CreateSubKey = 4;
    EnumerateSubKeys = 8;
    Notify = 16;
    CreateLink = 32;
    Delete = 65536;
    ReadPermissions = 131072;
    WriteKey = 131078;
    ExecuteKey = 131097;
    ReadKey = 131097;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    FullControl = 983103;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.ResourceType')]
  DNResourceType = type Integer;
  DNResourceTypeHelper = record helper for DNResourceType
  public const
    Unknown = 0;
    FileObject = 1;
    Service = 2;
    Printer = 3;
    RegistryKey = 4;
    LMShare = 5;
    KernelObject = 6;
    WindowObject = 7;
    DSObject = 8;
    DSObjectAll = 9;
    ProviderDefined = 10;
    WmiGuidObject = 11;
    RegistryWow6432Key = 12;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.SecurityInfos')]
  DNSecurityInfos = type Integer;
  DNSecurityInfosHelper = record helper for DNSecurityInfos
  public const
    Owner = 1;
    Group = 2;
    DiscretionaryAcl = 4;
    SystemAcl = 8;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CipherMode')]
  DNCipherMode = type Integer;
  DNCipherModeHelper = record helper for DNCipherMode
  public const
    CBC = 1;
    ECB = 2;
    OFB = 3;
    CFB = 4;
    CTS = 5;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CryptoStreamMode')]
  DNCryptoStreamMode = type Integer;
  DNCryptoStreamModeHelper = record helper for DNCryptoStreamMode
  public const
    Read = 0;
    Write = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CspProviderFlags')]
  DNCspProviderFlags = type Integer;
  DNCspProviderFlagsHelper = record helper for DNCspProviderFlags
  public const
    NoFlags = 0;
    UseMachineKeyStore = 1;
    UseDefaultKeyContainer = 2;
    UseNonExportableKey = 4;
    UseExistingKey = 8;
    UseArchivableKey = 16;
    UseUserProtectedKey = 32;
    NoPrompt = 64;
    CreateEphemeralKey = 128;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.FromBase64TransformMode')]
  DNFromBase64TransformMode = type Integer;
  DNFromBase64TransformModeHelper = record helper for DNFromBase64TransformMode
  public const
    IgnoreWhiteSpaces = 0;
    DoNotIgnoreWhiteSpaces = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.KeyNumber')]
  DNKeyNumber = type Integer;
  DNKeyNumberHelper = record helper for DNKeyNumber
  public const
    Exchange = 1;
    Signature = 2;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.PaddingMode')]
  DNPaddingMode = type Integer;
  DNPaddingModeHelper = record helper for DNPaddingMode
  public const
    None = 1;
    PKCS7 = 2;
    Zeros = 3;
    ANSIX923 = 4;
    ISO10126 = 5;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.RSAEncryptionPaddingMode')]
  DNRSAEncryptionPaddingMode = type Integer;
  DNRSAEncryptionPaddingModeHelper = record helper for DNRSAEncryptionPaddingMode
  public const
    Pkcs1 = 0;
    Oaep = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.RSASignaturePaddingMode')]
  DNRSASignaturePaddingMode = type Integer;
  DNRSASignaturePaddingModeHelper = record helper for DNRSASignaturePaddingMode
  public const
    Pkcs1 = 0;
    Pss = 1;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ContentType')]
  DNX509ContentType = type Integer;
  DNX509ContentTypeHelper = record helper for DNX509ContentType
  public const
    Unknown = 0;
    Cert = 1;
    SerializedCert = 2;
    Pfx = 3;
    Pkcs12 = 3;
    SerializedStore = 4;
    Pkcs7 = 5;
    Authenticode = 6;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509KeyStorageFlags')]
  DNX509KeyStorageFlags = type Integer;
  DNX509KeyStorageFlagsHelper = record helper for DNX509KeyStorageFlags
  public const
    DefaultKeySet = 0;
    UserKeySet = 1;
    MachineKeySet = 2;
    Exportable = 4;
    UserProtected = 8;
    PersistKeySet = 16;
    EphemeralKeySet = 32;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.HostSecurityManagerOptions')]
  DNHostSecurityManagerOptions = type Integer;
  DNHostSecurityManagerOptionsHelper = record helper for DNHostSecurityManagerOptions
  public const
    None = 0;
    HostAppDomainEvidence = 1;
    HostPolicyLevel = 2;
    HostAssemblyEvidence = 4;
    HostDetermineApplicationTrust = 8;
    HostResolvePolicy = 16;
    AllFlags = 31;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.PartialTrustVisibilityLevel')]
  DNPartialTrustVisibilityLevel = type Integer;
  DNPartialTrustVisibilityLevelHelper = record helper for DNPartialTrustVisibilityLevel
  public const
    VisibleToAllHosts = 0;
    NotVisibleByDefault = 1;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.EnvironmentPermissionAccess')]
  DNEnvironmentPermissionAccess = type Integer;
  DNEnvironmentPermissionAccessHelper = record helper for DNEnvironmentPermissionAccess
  public const
    NoAccess = 0;
    Read = 1;
    Write = 2;
    AllAccess = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.FileDialogPermissionAccess')]
  DNFileDialogPermissionAccess = type Integer;
  DNFileDialogPermissionAccessHelper = record helper for DNFileDialogPermissionAccess
  public const
    None = 0;
    Open = 1;
    Save = 2;
    OpenSave = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.FileIOPermissionAccess')]
  DNFileIOPermissionAccess = type Integer;
  DNFileIOPermissionAccessHelper = record helper for DNFileIOPermissionAccess
  public const
    NoAccess = 0;
    Read = 1;
    Write = 2;
    Append = 4;
    PathDiscovery = 8;
    AllAccess = 15;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.HostProtectionResource')]
  DNHostProtectionResource = type Integer;
  DNHostProtectionResourceHelper = record helper for DNHostProtectionResource
  public const
    None = 0;
    Synchronization = 1;
    SharedState = 2;
    ExternalProcessMgmt = 4;
    SelfAffectingProcessMgmt = 8;
    ExternalThreading = 16;
    SelfAffectingThreading = 32;
    SecurityInfrastructure = 64;
    UI = 128;
    MayLeakOnAbort = 256;
    All = 511;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.IsolatedStorageContainment')]
  DNIsolatedStorageContainment = type Integer;
  DNIsolatedStorageContainmentHelper = record helper for DNIsolatedStorageContainment
  public const
    None = 0;
    DomainIsolationByUser = 16;
    ApplicationIsolationByUser = 21;
    AssemblyIsolationByUser = 32;
    DomainIsolationByMachine = 48;
    AssemblyIsolationByMachine = 64;
    ApplicationIsolationByMachine = 69;
    DomainIsolationByRoamingUser = 80;
    AssemblyIsolationByRoamingUser = 96;
    ApplicationIsolationByRoamingUser = 101;
    AdministerIsolatedStorageByUser = 112;
    UnrestrictedIsolatedStorage = 240;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.KeyContainerPermissionFlags')]
  DNKeyContainerPermissionFlags = type Integer;
  DNKeyContainerPermissionFlagsHelper = record helper for DNKeyContainerPermissionFlags
  public const
    NoFlags = 0;
    Create = 1;
    Open = 2;
    Delete = 4;
    Import = 16;
    Export_ = 32;
    Sign = 256;
    Decrypt = 512;
    ViewAcl = 4096;
    ChangeAcl = 8192;
    AllFlags = 13111;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.PermissionState')]
  DNPermissionState = type Integer;
  DNPermissionStateHelper = record helper for DNPermissionState
  public const
    None = 0;
    Unrestricted = 1;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.ReflectionPermissionFlag')]
  DNReflectionPermissionFlag = type Integer;
  DNReflectionPermissionFlagHelper = record helper for DNReflectionPermissionFlag
  public const
    NoFlags = 0;
    TypeInformation = 1;
    MemberAccess = 2;
    ReflectionEmit = 4;
    AllFlags = 7;
    RestrictedMemberAccess = 8;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.RegistryPermissionAccess')]
  DNRegistryPermissionAccess = type Integer;
  DNRegistryPermissionAccessHelper = record helper for DNRegistryPermissionAccess
  public const
    NoAccess = 0;
    Read = 1;
    Write = 2;
    Create = 4;
    AllAccess = 7;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityAction')]
  DNSecurityAction = type Integer;
  DNSecurityActionHelper = record helper for DNSecurityAction
  public const
    Demand = 2;
    Assert = 3;
    Deny = 4;
    PermitOnly = 5;
    LinkDemand = 6;
    InheritanceDemand = 7;
    RequestMinimum = 8;
    RequestOptional = 9;
    RequestRefuse = 10;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityPermissionFlag')]
  DNSecurityPermissionFlag = type Integer;
  DNSecurityPermissionFlagHelper = record helper for DNSecurityPermissionFlag
  public const
    NoFlags = 0;
    Assertion = 1;
    UnmanagedCode = 2;
    SkipVerification = 4;
    Execution = 8;
    ControlThread = 16;
    ControlEvidence = 32;
    ControlPolicy = 64;
    SerializationFormatter = 128;
    ControlDomainPolicy = 256;
    ControlPrincipal = 512;
    ControlAppDomain = 1024;
    RemotingConfiguration = 2048;
    Infrastructure = 4096;
    BindingRedirects = 8192;
    AllFlags = 16383;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.UIPermissionClipboard')]
  DNUIPermissionClipboard = type Integer;
  DNUIPermissionClipboardHelper = record helper for DNUIPermissionClipboard
  public const
    NoClipboard = 0;
    OwnClipboard = 1;
    AllClipboard = 2;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.UIPermissionWindow')]
  DNUIPermissionWindow = type Integer;
  DNUIPermissionWindowHelper = record helper for DNUIPermissionWindow
  public const
    NoWindows = 0;
    SafeSubWindows = 1;
    SafeTopLevelWindows = 2;
    AllWindows = 3;
  end;


  //-------------namespace: System.Security.Policy----------------
  [DNTypeName('System.Security.Policy.ApplicationVersionMatch')]
  DNApplicationVersionMatch = type Integer;
  DNApplicationVersionMatchHelper = record helper for DNApplicationVersionMatch
  public const
    MatchExactVersion = 0;
    MatchAllVersions = 1;
  end;


  //-------------namespace: System.Security.Policy----------------
  [DNTypeName('System.Security.Policy.PolicyStatementAttribute')]
  DNPolicyStatementAttribute = type Integer;
  DNPolicyStatementAttributeHelper = record helper for DNPolicyStatementAttribute
  public const
    Nothing = 0;
    Exclusive = 1;
    LevelFinal = 2;
    All = 3;
  end;


  //-------------namespace: System.Security.Policy----------------
  [DNTypeName('System.Security.Policy.TrustManagerUIContext')]
  DNTrustManagerUIContext = type Integer;
  DNTrustManagerUIContextHelper = record helper for DNTrustManagerUIContext
  public const
    Install = 0;
    Upgrade = 1;
    Run = 2;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.PolicyLevelType')]
  DNPolicyLevelType = type Integer;
  DNPolicyLevelTypeHelper = record helper for DNPolicyLevelType
  public const
    User = 0;
    Machine = 1;
    Enterprise = 2;
    AppDomain = 3;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.PrincipalPolicy')]
  DNPrincipalPolicy = type Integer;
  DNPrincipalPolicyHelper = record helper for DNPrincipalPolicy
  public const
    UnauthenticatedPrincipal = 0;
    NoPrincipal = 1;
    WindowsPrincipal = 2;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.TokenAccessLevels')]
  DNTokenAccessLevels = type Integer;
  DNTokenAccessLevelsHelper = record helper for DNTokenAccessLevels
  public const
    AssignPrimary = 1;
    Duplicate = 2;
    Impersonate = 4;
    Query = 8;
    QuerySource = 16;
    AdjustPrivileges = 32;
    AdjustGroups = 64;
    AdjustDefault = 128;
    AdjustSessionId = 256;
    Read = 131080;
    Write = 131296;
    AllAccess = 983551;
    MaximumAllowed = 33554432;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.TokenImpersonationLevel')]
  DNTokenImpersonationLevel = type Integer;
  DNTokenImpersonationLevelHelper = record helper for DNTokenImpersonationLevel
  public const
    None = 0;
    Anonymous = 1;
    Identification = 2;
    Impersonation = 3;
    Delegation = 4;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.WellKnownSidType')]
  DNWellKnownSidType = type Integer;
  DNWellKnownSidTypeHelper = record helper for DNWellKnownSidType
  public const
    NullSid = 0;
    WorldSid = 1;
    LocalSid = 2;
    CreatorOwnerSid = 3;
    CreatorGroupSid = 4;
    CreatorOwnerServerSid = 5;
    CreatorGroupServerSid = 6;
    NTAuthoritySid = 7;
    DialupSid = 8;
    NetworkSid = 9;
    BatchSid = 10;
    InteractiveSid = 11;
    ServiceSid = 12;
    AnonymousSid = 13;
    ProxySid = 14;
    EnterpriseControllersSid = 15;
    SelfSid = 16;
    AuthenticatedUserSid = 17;
    RestrictedCodeSid = 18;
    TerminalServerSid = 19;
    RemoteLogonIdSid = 20;
    LogonIdsSid = 21;
    LocalSystemSid = 22;
    LocalServiceSid = 23;
    NetworkServiceSid = 24;
    BuiltinDomainSid = 25;
    BuiltinAdministratorsSid = 26;
    BuiltinUsersSid = 27;
    BuiltinGuestsSid = 28;
    BuiltinPowerUsersSid = 29;
    BuiltinAccountOperatorsSid = 30;
    BuiltinSystemOperatorsSid = 31;
    BuiltinPrintOperatorsSid = 32;
    BuiltinBackupOperatorsSid = 33;
    BuiltinReplicatorSid = 34;
    BuiltinPreWindows2000CompatibleAccessSid = 35;
    BuiltinRemoteDesktopUsersSid = 36;
    BuiltinNetworkConfigurationOperatorsSid = 37;
    AccountAdministratorSid = 38;
    AccountGuestSid = 39;
    AccountKrbtgtSid = 40;
    AccountDomainAdminsSid = 41;
    AccountDomainUsersSid = 42;
    AccountDomainGuestsSid = 43;
    AccountComputersSid = 44;
    AccountControllersSid = 45;
    AccountCertAdminsSid = 46;
    AccountSchemaAdminsSid = 47;
    AccountEnterpriseAdminsSid = 48;
    AccountPolicyAdminsSid = 49;
    AccountRasAndIasServersSid = 50;
    NtlmAuthenticationSid = 51;
    DigestAuthenticationSid = 52;
    SChannelAuthenticationSid = 53;
    ThisOrganizationSid = 54;
    OtherOrganizationSid = 55;
    BuiltinIncomingForestTrustBuildersSid = 56;
    BuiltinPerformanceMonitoringUsersSid = 57;
    BuiltinPerformanceLoggingUsersSid = 58;
    BuiltinAuthorizationAccessSid = 59;
    WinBuiltinTerminalServerLicenseServersSid = 60;
    MaxDefined = 60;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.WindowsAccountType')]
  DNWindowsAccountType = type Integer;
  DNWindowsAccountTypeHelper = record helper for DNWindowsAccountType
  public const
    Normal = 0;
    Guest = 1;
    System = 2;
    Anonymous = 3;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.WindowsBuiltInRole')]
  DNWindowsBuiltInRole = type Integer;
  DNWindowsBuiltInRoleHelper = record helper for DNWindowsBuiltInRole
  public const
    Administrator = 544;
    User = 545;
    Guest = 546;
    PowerUser = 547;
    AccountOperator = 548;
    SystemOperator = 549;
    PrintOperator = 550;
    BackupOperator = 551;
    Replicator = 552;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityContextSource')]
  DNSecurityContextSource = type Integer;
  DNSecurityContextSourceHelper = record helper for DNSecurityContextSource
  public const
    CurrentAppDomain = 0;
    CurrentAssembly = 1;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityCriticalScope')]
  DNSecurityCriticalScope = type Integer;
  DNSecurityCriticalScopeHelper = record helper for DNSecurityCriticalScope
  public const
    Explicit = 0;
    Everything = 1;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityRuleSet')]
  DNSecurityRuleSet = type Integer;
  DNSecurityRuleSetHelper = record helper for DNSecurityRuleSet
  public const
    None = 0;
    Level1 = 1;
    Level2 = 2;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityZone')]
  DNSecurityZone = type Integer;
  DNSecurityZoneHelper = record helper for DNSecurityZone
  public const
    MyComputer = 0;
    Intranet = 1;
    Trusted = 2;
    Internet = 3;
    Untrusted = 4;
    NoZone = -1;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.StringComparison')]
  DNStringComparison = type Integer;
  DNStringComparisonHelper = record helper for DNStringComparison
  public const
    CurrentCulture = 0;
    CurrentCultureIgnoreCase = 1;
    InvariantCulture = 2;
    InvariantCultureIgnoreCase = 3;
    Ordinal = 4;
    OrdinalIgnoreCase = 5;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.StringSplitOptions')]
  DNStringSplitOptions = type Integer;
  DNStringSplitOptionsHelper = record helper for DNStringSplitOptions
  public const
    None = 0;
    RemoveEmptyEntries = 1;
  end;


  //-------------namespace: System.Text----------------
  [DNTypeName('System.Text.NormalizationForm')]
  DNNormalizationForm = type Integer;
  DNNormalizationFormHelper = record helper for DNNormalizationForm
  public const
    FormC = 1;
    FormD = 2;
    FormKC = 5;
    FormKD = 6;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ApartmentState')]
  DNApartmentState = type Integer;
  DNApartmentStateHelper = record helper for DNApartmentState
  public const
    STA = 0;
    MTA = 1;
    Unknown = 2;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.EventResetMode')]
  DNEventResetMode = type Integer;
  DNEventResetModeHelper = record helper for DNEventResetMode
  public const
    AutoReset = 0;
    ManualReset = 1;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.LazyThreadSafetyMode')]
  DNLazyThreadSafetyMode = type Integer;
  DNLazyThreadSafetyModeHelper = record helper for DNLazyThreadSafetyMode
  public const
    None = 0;
    PublicationOnly = 1;
    ExecutionAndPublication = 2;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskContinuationOptions')]
  DNTaskContinuationOptions = type Integer;
  DNTaskContinuationOptionsHelper = record helper for DNTaskContinuationOptions
  public const
    None = 0;
    PreferFairness = 1;
    LongRunning = 2;
    AttachedToParent = 4;
    DenyChildAttach = 8;
    HideScheduler = 16;
    LazyCancellation = 32;
    RunContinuationsAsynchronously = 64;
    NotOnRanToCompletion = 65536;
    NotOnFaulted = 131072;
    OnlyOnCanceled = 196608;
    NotOnCanceled = 262144;
    OnlyOnFaulted = 327680;
    OnlyOnRanToCompletion = 393216;
    ExecuteSynchronously = 524288;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskCreationOptions')]
  DNTaskCreationOptions = type Integer;
  DNTaskCreationOptionsHelper = record helper for DNTaskCreationOptions
  public const
    None = 0;
    PreferFairness = 1;
    LongRunning = 2;
    AttachedToParent = 4;
    DenyChildAttach = 8;
    HideScheduler = 16;
    RunContinuationsAsynchronously = 64;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskStatus')]
  DNTaskStatus = type Integer;
  DNTaskStatusHelper = record helper for DNTaskStatus
  public const
    Created = 0;
    WaitingForActivation = 1;
    WaitingToRun = 2;
    Running = 3;
    WaitingForChildrenToComplete = 4;
    RanToCompletion = 5;
    Canceled = 6;
    Faulted = 7;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ThreadPriority')]
  DNThreadPriority = type Integer;
  DNThreadPriorityHelper = record helper for DNThreadPriority
  public const
    Lowest = 0;
    BelowNormal = 1;
    Normal = 2;
    AboveNormal = 3;
    Highest = 4;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ThreadState')]
  DNThreadState = type Integer;
  DNThreadStateHelper = record helper for DNThreadState
  public const
    Running = 0;
    StopRequested = 1;
    SuspendRequested = 2;
    Background = 4;
    Unstarted = 8;
    Stopped = 16;
    WaitSleepJoin = 32;
    Suspended = 64;
    AbortRequested = 128;
    Aborted = 256;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.TypeCode')]
  DNTypeCode = type Integer;
  DNTypeCodeHelper = record helper for DNTypeCode
  public const
    Empty = 0;
    Object_ = 1;
    DBNull = 2;
    Boolean = 3;
    Char = 4;
    SByte = 5;
    Byte = 6;
    Int16 = 7;
    UInt16 = 8;
    Int32 = 9;
    UInt32 = 10;
    Int64 = 11;
    UInt64 = 12;
    Single = 13;
    Double = 14;
    Decimal = 15;
    DateTime = 16;
    String_ = 18;
  end;




type


{ declares }

  DNObject = interface; // System.Object
  DNIDisposable = interface; // type: System.IDisposable, namespace: System
  DNIEnumerator = interface; // type: System.Collections.IEnumerator, namespace: System.Collections
  DNIEnumerator<T> = interface; // type: System.Collections.Generic.IEnumerator`1, namespace: System.Collections.Generic
  DNIEnumerable = interface; // type: System.Collections.IEnumerable, namespace: System.Collections
  DNIEnumerable<T> = interface; // type: System.Collections.Generic.IEnumerable`1, namespace: System.Collections.Generic
  DNICollection = interface; // type: System.Collections.ICollection, namespace: System.Collections
  DNICollection<T> = interface; // type: System.Collections.Generic.ICollection`1, namespace: System.Collections.Generic
  DNIList = interface; // type: System.Collections.IList, namespace: System.Collections
  DNIList<T> = interface; // type: System.Collections.Generic.IList`1, namespace: System.Collections.Generic
  DNIDictionary = interface; // type: System.Collections.IDictionary, namespace: System.Collections
  DNIDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IDictionary`2, namespace: System.Collections.Generic
  DNIComparer = interface; // type: System.Collections.IComparer, namespace: System.Collections
  DNIComparer<T> = interface; // type: System.Collections.Generic.IComparer`1, namespace: System.Collections.Generic
  DN_AppDomain = interface; // type: System._AppDomain, namespace: System
  DNIEqualityComparer<T> = interface; // type: System.Collections.Generic.IEqualityComparer`1, namespace: System.Collections.Generic
  DNIProducerConsumerCollection<T> = interface; // type: System.Collections.Concurrent.IProducerConsumerCollection`1, namespace: System.Collections.Concurrent
  DNIReadOnlyCollection<T> = interface; // type: System.Collections.Generic.IReadOnlyCollection`1, namespace: System.Collections.Generic
  DNIReadOnlyDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IReadOnlyDictionary`2, namespace: System.Collections.Generic
  DNIReadOnlyList<T> = interface; // type: System.Collections.Generic.IReadOnlyList`1, namespace: System.Collections.Generic
  DNIResourceReader = interface; // type: System.Resources.IResourceReader, namespace: System.Resources
  DNIDictionaryEnumerator = interface; // type: System.Collections.IDictionaryEnumerator, namespace: System.Collections
  DNIEqualityComparer = interface; // type: System.Collections.IEqualityComparer, namespace: System.Collections
  DNIHashCodeProvider = interface; // type: System.Collections.IHashCodeProvider, namespace: System.Collections
  DNIStructuralComparable = interface; // type: System.Collections.IStructuralComparable, namespace: System.Collections
  DNIStructuralEquatable = interface; // type: System.Collections.IStructuralEquatable, namespace: System.Collections
  DNISymbolBinder = interface; // type: System.Diagnostics.SymbolStore.ISymbolBinder, namespace: System.Diagnostics.SymbolStore
  DNISymbolBinder1 = interface; // type: System.Diagnostics.SymbolStore.ISymbolBinder1, namespace: System.Diagnostics.SymbolStore
  DNISymbolDocument = interface; // type: System.Diagnostics.SymbolStore.ISymbolDocument, namespace: System.Diagnostics.SymbolStore
  DNISymbolDocumentWriter = interface; // type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter, namespace: System.Diagnostics.SymbolStore
  DNISymbolMethod = interface; // type: System.Diagnostics.SymbolStore.ISymbolMethod, namespace: System.Diagnostics.SymbolStore
  DNISymbolNamespace = interface; // type: System.Diagnostics.SymbolStore.ISymbolNamespace, namespace: System.Diagnostics.SymbolStore
  DNISymbolReader = interface; // type: System.Diagnostics.SymbolStore.ISymbolReader, namespace: System.Diagnostics.SymbolStore
  DNISymbolScope = interface; // type: System.Diagnostics.SymbolStore.ISymbolScope, namespace: System.Diagnostics.SymbolStore
  DNISymbolVariable = interface; // type: System.Diagnostics.SymbolStore.ISymbolVariable, namespace: System.Diagnostics.SymbolStore
  DNISymbolWriter = interface; // type: System.Diagnostics.SymbolStore.ISymbolWriter, namespace: System.Diagnostics.SymbolStore
  DNIAppDomainSetup = interface; // type: System.IAppDomainSetup, namespace: System
  DNIAsyncResult = interface; // type: System.IAsyncResult, namespace: System
  DNICloneable = interface; // type: System.ICloneable, namespace: System
  DNIComparable<T> = interface; // type: System.IComparable`1, namespace: System
  DNIComparable = interface; // type: System.IComparable, namespace: System
  DNIConvertible = interface; // type: System.IConvertible, namespace: System
  DNICustomFormatter = interface; // type: System.ICustomFormatter, namespace: System
  DNIResourceWriter = interface; // type: System.Resources.IResourceWriter, namespace: System.Resources
  DNICryptoTransform = interface; // type: System.Security.Cryptography.ICryptoTransform, namespace: System.Security.Cryptography
  DNIEquatable<T> = interface; // type: System.IEquatable`1, namespace: System
  DNIFormatProvider = interface; // type: System.IFormatProvider, namespace: System
  DNIFormattable = interface; // type: System.IFormattable, namespace: System
  DNINormalizeForIsolatedStorage = interface; // type: System.IO.IsolatedStorage.INormalizeForIsolatedStorage, namespace: System.IO.IsolatedStorage
  DNIObservable<T> = interface; // type: System.IObservable`1, namespace: System
  DNIObserver<T> = interface; // type: System.IObserver`1, namespace: System
  DNIProgress<T> = interface; // type: System.IProgress`1, namespace: System
  DNIServiceProvider = interface; // type: System.IServiceProvider, namespace: System
  DNICustomAttributeProvider = interface; // type: System.Reflection.ICustomAttributeProvider, namespace: System.Reflection
  DNIReflect = interface; // type: System.Reflection.IReflect, namespace: System.Reflection
  DNIExpando = interface; // type: System.Runtime.InteropServices.Expando.IExpando, namespace: System.Runtime.InteropServices.Expando
  DNIReflectableType = interface; // type: System.Reflection.IReflectableType, namespace: System.Reflection
  DNIAsyncStateMachine = interface; // type: System.Runtime.CompilerServices.IAsyncStateMachine, namespace: System.Runtime.CompilerServices
  DNINotifyCompletion = interface; // type: System.Runtime.CompilerServices.INotifyCompletion, namespace: System.Runtime.CompilerServices
  DNICriticalNotifyCompletion = interface; // type: System.Runtime.CompilerServices.ICriticalNotifyCompletion, namespace: System.Runtime.CompilerServices
  DNITuple = interface; // type: System.Runtime.CompilerServices.ITuple, namespace: System.Runtime.CompilerServices
  DN_Activator = interface; // type: System.Runtime.InteropServices._Activator, namespace: System.Runtime.InteropServices
  DN_Assembly = interface; // type: System.Runtime.InteropServices._Assembly, namespace: System.Runtime.InteropServices
  DN_AssemblyBuilder = interface; // type: System.Runtime.InteropServices._AssemblyBuilder, namespace: System.Runtime.InteropServices
  DN_AssemblyName = interface; // type: System.Runtime.InteropServices._AssemblyName, namespace: System.Runtime.InteropServices
  DN_Attribute = interface; // type: System.Runtime.InteropServices._Attribute, namespace: System.Runtime.InteropServices
  DN_ConstructorBuilder = interface; // type: System.Runtime.InteropServices._ConstructorBuilder, namespace: System.Runtime.InteropServices
  DN_ConstructorInfo = interface; // type: System.Runtime.InteropServices._ConstructorInfo, namespace: System.Runtime.InteropServices
  DN_CustomAttributeBuilder = interface; // type: System.Runtime.InteropServices._CustomAttributeBuilder, namespace: System.Runtime.InteropServices
  DN_EnumBuilder = interface; // type: System.Runtime.InteropServices._EnumBuilder, namespace: System.Runtime.InteropServices
  DN_EventBuilder = interface; // type: System.Runtime.InteropServices._EventBuilder, namespace: System.Runtime.InteropServices
  DN_EventInfo = interface; // type: System.Runtime.InteropServices._EventInfo, namespace: System.Runtime.InteropServices
  DN_Exception = interface; // type: System.Runtime.InteropServices._Exception, namespace: System.Runtime.InteropServices
  DN_FieldBuilder = interface; // type: System.Runtime.InteropServices._FieldBuilder, namespace: System.Runtime.InteropServices
  DN_FieldInfo = interface; // type: System.Runtime.InteropServices._FieldInfo, namespace: System.Runtime.InteropServices
  DN_ILGenerator = interface; // type: System.Runtime.InteropServices._ILGenerator, namespace: System.Runtime.InteropServices
  DN_LocalBuilder = interface; // type: System.Runtime.InteropServices._LocalBuilder, namespace: System.Runtime.InteropServices
  DN_MemberInfo = interface; // type: System.Runtime.InteropServices._MemberInfo, namespace: System.Runtime.InteropServices
  DN_MethodBase = interface; // type: System.Runtime.InteropServices._MethodBase, namespace: System.Runtime.InteropServices
  DN_MethodBuilder = interface; // type: System.Runtime.InteropServices._MethodBuilder, namespace: System.Runtime.InteropServices
  DN_MethodInfo = interface; // type: System.Runtime.InteropServices._MethodInfo, namespace: System.Runtime.InteropServices
  DN_MethodRental = interface; // type: System.Runtime.InteropServices._MethodRental, namespace: System.Runtime.InteropServices
  DN_Module = interface; // type: System.Runtime.InteropServices._Module, namespace: System.Runtime.InteropServices
  DN_ModuleBuilder = interface; // type: System.Runtime.InteropServices._ModuleBuilder, namespace: System.Runtime.InteropServices
  DN_ParameterBuilder = interface; // type: System.Runtime.InteropServices._ParameterBuilder, namespace: System.Runtime.InteropServices
  DN_ParameterInfo = interface; // type: System.Runtime.InteropServices._ParameterInfo, namespace: System.Runtime.InteropServices
  DN_PropertyBuilder = interface; // type: System.Runtime.InteropServices._PropertyBuilder, namespace: System.Runtime.InteropServices
  DN_PropertyInfo = interface; // type: System.Runtime.InteropServices._PropertyInfo, namespace: System.Runtime.InteropServices
  DN_SignatureHelper = interface; // type: System.Runtime.InteropServices._SignatureHelper, namespace: System.Runtime.InteropServices
  DN_Thread = interface; // type: System.Runtime.InteropServices._Thread, namespace: System.Runtime.InteropServices
  DN_Type = interface; // type: System.Runtime.InteropServices._Type, namespace: System.Runtime.InteropServices
  DN_TypeBuilder = interface; // type: System.Runtime.InteropServices._TypeBuilder, namespace: System.Runtime.InteropServices
  DNIBindCtx = interface; // type: System.Runtime.InteropServices.ComTypes.IBindCtx, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPoint = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPoint, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPointContainer = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPointContainer, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnectionPoints = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnections = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnections, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumString = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumString, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumVARIANT = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumVARIANT, namespace: System.Runtime.InteropServices.ComTypes
  DNIMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIPersistFile = interface; // type: System.Runtime.InteropServices.ComTypes.IPersistFile, namespace: System.Runtime.InteropServices.ComTypes
  DNIRunningObjectTable = interface; // type: System.Runtime.InteropServices.ComTypes.IRunningObjectTable, namespace: System.Runtime.InteropServices.ComTypes
  DNIStream = interface; // type: System.Runtime.InteropServices.ComTypes.IStream, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeComp = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeComp, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo2, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib2, namespace: System.Runtime.InteropServices.ComTypes
  DNICustomAdapter = interface; // type: System.Runtime.InteropServices.ICustomAdapter, namespace: System.Runtime.InteropServices
  DNICustomFactory = interface; // type: System.Runtime.InteropServices.ICustomFactory, namespace: System.Runtime.InteropServices
  DNICustomMarshaler = interface; // type: System.Runtime.InteropServices.ICustomMarshaler, namespace: System.Runtime.InteropServices
  DNICustomQueryInterface = interface; // type: System.Runtime.InteropServices.ICustomQueryInterface, namespace: System.Runtime.InteropServices
  DNIRegistrationServices = interface; // type: System.Runtime.InteropServices.IRegistrationServices, namespace: System.Runtime.InteropServices
  DNITypeLibConverter = interface; // type: System.Runtime.InteropServices.ITypeLibConverter, namespace: System.Runtime.InteropServices
  DNITypeLibExporterNameProvider = interface; // type: System.Runtime.InteropServices.ITypeLibExporterNameProvider, namespace: System.Runtime.InteropServices
  DNITypeLibExporterNotifySink = interface; // type: System.Runtime.InteropServices.ITypeLibExporterNotifySink, namespace: System.Runtime.InteropServices
  DNITypeLibImporterNotifySink = interface; // type: System.Runtime.InteropServices.ITypeLibImporterNotifySink, namespace: System.Runtime.InteropServices
  DNUCOMIBindCtx = interface; // type: System.Runtime.InteropServices.UCOMIBindCtx, namespace: System.Runtime.InteropServices
  DNUCOMIConnectionPoint = interface; // type: System.Runtime.InteropServices.UCOMIConnectionPoint, namespace: System.Runtime.InteropServices
  DNUCOMIConnectionPointContainer = interface; // type: System.Runtime.InteropServices.UCOMIConnectionPointContainer, namespace: System.Runtime.InteropServices
  DNUCOMIEnumConnectionPoints = interface; // type: System.Runtime.InteropServices.UCOMIEnumConnectionPoints, namespace: System.Runtime.InteropServices
  DNUCOMIEnumConnections = interface; // type: System.Runtime.InteropServices.UCOMIEnumConnections, namespace: System.Runtime.InteropServices
  DNUCOMIEnumMoniker = interface; // type: System.Runtime.InteropServices.UCOMIEnumMoniker, namespace: System.Runtime.InteropServices
  DNUCOMIEnumString = interface; // type: System.Runtime.InteropServices.UCOMIEnumString, namespace: System.Runtime.InteropServices
  DNUCOMIEnumVARIANT = interface; // type: System.Runtime.InteropServices.UCOMIEnumVARIANT, namespace: System.Runtime.InteropServices
  DNUCOMIMoniker = interface; // type: System.Runtime.InteropServices.UCOMIMoniker, namespace: System.Runtime.InteropServices
  DNUCOMIPersistFile = interface; // type: System.Runtime.InteropServices.UCOMIPersistFile, namespace: System.Runtime.InteropServices
  DNUCOMIRunningObjectTable = interface; // type: System.Runtime.InteropServices.UCOMIRunningObjectTable, namespace: System.Runtime.InteropServices
  DNUCOMIStream = interface; // type: System.Runtime.InteropServices.UCOMIStream, namespace: System.Runtime.InteropServices
  DNUCOMITypeComp = interface; // type: System.Runtime.InteropServices.UCOMITypeComp, namespace: System.Runtime.InteropServices
  DNUCOMITypeInfo = interface; // type: System.Runtime.InteropServices.UCOMITypeInfo, namespace: System.Runtime.InteropServices
  DNUCOMITypeLib = interface; // type: System.Runtime.InteropServices.UCOMITypeLib, namespace: System.Runtime.InteropServices
  DNIActivationFactory = interface; // type: System.Runtime.InteropServices.WindowsRuntime.IActivationFactory, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNIActivator = interface; // type: System.Runtime.Remoting.Activation.IActivator, namespace: System.Runtime.Remoting.Activation
  DNIChannel = interface; // type: System.Runtime.Remoting.Channels.IChannel, namespace: System.Runtime.Remoting.Channels
  DNIChannelReceiver = interface; // type: System.Runtime.Remoting.Channels.IChannelReceiver, namespace: System.Runtime.Remoting.Channels
  DNIChannelSender = interface; // type: System.Runtime.Remoting.Channels.IChannelSender, namespace: System.Runtime.Remoting.Channels
  DNIChannelDataStore = interface; // type: System.Runtime.Remoting.Channels.IChannelDataStore, namespace: System.Runtime.Remoting.Channels
  DNIChannelReceiverHook = interface; // type: System.Runtime.Remoting.Channels.IChannelReceiverHook, namespace: System.Runtime.Remoting.Channels
  DNIChannelSinkBase = interface; // type: System.Runtime.Remoting.Channels.IChannelSinkBase, namespace: System.Runtime.Remoting.Channels
  DNIClientChannelSink = interface; // type: System.Runtime.Remoting.Channels.IClientChannelSink, namespace: System.Runtime.Remoting.Channels
  DNIServerChannelSink = interface; // type: System.Runtime.Remoting.Channels.IServerChannelSink, namespace: System.Runtime.Remoting.Channels
  DNIClientChannelSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IClientChannelSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIClientFormatterSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IClientFormatterSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIClientResponseChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNIClientChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IClientChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNISecurableChannel = interface; // type: System.Runtime.Remoting.Channels.ISecurableChannel, namespace: System.Runtime.Remoting.Channels
  DNIServerChannelSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IServerChannelSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIServerFormatterSinkProvider = interface; // type: System.Runtime.Remoting.Channels.IServerFormatterSinkProvider, namespace: System.Runtime.Remoting.Channels
  DNIServerResponseChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNIServerChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.IServerChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNITransportHeaders = interface; // type: System.Runtime.Remoting.Channels.ITransportHeaders, namespace: System.Runtime.Remoting.Channels
  DNIContextAttribute = interface; // type: System.Runtime.Remoting.Contexts.IContextAttribute, namespace: System.Runtime.Remoting.Contexts
  DNIContextProperty = interface; // type: System.Runtime.Remoting.Contexts.IContextProperty, namespace: System.Runtime.Remoting.Contexts
  DNIContextPropertyActivator = interface; // type: System.Runtime.Remoting.Contexts.IContextPropertyActivator, namespace: System.Runtime.Remoting.Contexts
  DNIContributeClientContextSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeClientContextSink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeDynamicSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeDynamicSink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeEnvoySink = interface; // type: System.Runtime.Remoting.Contexts.IContributeEnvoySink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeObjectSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeObjectSink, namespace: System.Runtime.Remoting.Contexts
  DNIContributeServerContextSink = interface; // type: System.Runtime.Remoting.Contexts.IContributeServerContextSink, namespace: System.Runtime.Remoting.Contexts
  DNIDynamicMessageSink = interface; // type: System.Runtime.Remoting.Contexts.IDynamicMessageSink, namespace: System.Runtime.Remoting.Contexts
  DNIDynamicProperty = interface; // type: System.Runtime.Remoting.Contexts.IDynamicProperty, namespace: System.Runtime.Remoting.Contexts
  DNIChannelInfo = interface; // type: System.Runtime.Remoting.IChannelInfo, namespace: System.Runtime.Remoting
  DNIEnvoyInfo = interface; // type: System.Runtime.Remoting.IEnvoyInfo, namespace: System.Runtime.Remoting
  DNIObjectHandle = interface; // type: System.Runtime.Remoting.IObjectHandle, namespace: System.Runtime.Remoting
  DNIRemotingTypeInfo = interface; // type: System.Runtime.Remoting.IRemotingTypeInfo, namespace: System.Runtime.Remoting
  DNILease = interface; // type: System.Runtime.Remoting.Lifetime.ILease, namespace: System.Runtime.Remoting.Lifetime
  DNISponsor = interface; // type: System.Runtime.Remoting.Lifetime.ISponsor, namespace: System.Runtime.Remoting.Lifetime
  DNILogicalThreadAffinative = interface; // type: System.Runtime.Remoting.Messaging.ILogicalThreadAffinative, namespace: System.Runtime.Remoting.Messaging
  DNIMessage = interface; // type: System.Runtime.Remoting.Messaging.IMessage, namespace: System.Runtime.Remoting.Messaging
  DNIMethodMessage = interface; // type: System.Runtime.Remoting.Messaging.IMethodMessage, namespace: System.Runtime.Remoting.Messaging
  DNIMethodCallMessage = interface; // type: System.Runtime.Remoting.Messaging.IMethodCallMessage, namespace: System.Runtime.Remoting.Messaging
  DNIConstructionCallMessage = interface; // type: System.Runtime.Remoting.Activation.IConstructionCallMessage, namespace: System.Runtime.Remoting.Activation
  DNIMethodReturnMessage = interface; // type: System.Runtime.Remoting.Messaging.IMethodReturnMessage, namespace: System.Runtime.Remoting.Messaging
  DNIConstructionReturnMessage = interface; // type: System.Runtime.Remoting.Activation.IConstructionReturnMessage, namespace: System.Runtime.Remoting.Activation
  DNIMessageCtrl = interface; // type: System.Runtime.Remoting.Messaging.IMessageCtrl, namespace: System.Runtime.Remoting.Messaging
  DNIMessageSink = interface; // type: System.Runtime.Remoting.Messaging.IMessageSink, namespace: System.Runtime.Remoting.Messaging
  DNIClientFormatterSink = interface; // type: System.Runtime.Remoting.Channels.IClientFormatterSink, namespace: System.Runtime.Remoting.Channels
  DNISoapXsd = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNITrackingHandler = interface; // type: System.Runtime.Remoting.Services.ITrackingHandler, namespace: System.Runtime.Remoting.Services
  DNIFieldInfo = interface; // type: System.Runtime.Serialization.Formatters.IFieldInfo, namespace: System.Runtime.Serialization.Formatters
  DNISoapMessage = interface; // type: System.Runtime.Serialization.Formatters.ISoapMessage, namespace: System.Runtime.Serialization.Formatters
  DNIDeserializationCallback = interface; // type: System.Runtime.Serialization.IDeserializationCallback, namespace: System.Runtime.Serialization
  DNIFormatter = interface; // type: System.Runtime.Serialization.IFormatter, namespace: System.Runtime.Serialization
  DNIRemotingFormatter = interface; // type: System.Runtime.Remoting.Messaging.IRemotingFormatter, namespace: System.Runtime.Remoting.Messaging
  DNIFormatterConverter = interface; // type: System.Runtime.Serialization.IFormatterConverter, namespace: System.Runtime.Serialization
  DNIObjectReference = interface; // type: System.Runtime.Serialization.IObjectReference, namespace: System.Runtime.Serialization
  DNISafeSerializationData = interface; // type: System.Runtime.Serialization.ISafeSerializationData, namespace: System.Runtime.Serialization
  DNISerializable = interface; // type: System.Runtime.Serialization.ISerializable, namespace: System.Runtime.Serialization
  DNISerializationSurrogate = interface; // type: System.Runtime.Serialization.ISerializationSurrogate, namespace: System.Runtime.Serialization
  DNISurrogateSelector = interface; // type: System.Runtime.Serialization.ISurrogateSelector, namespace: System.Runtime.Serialization
  DNICspAsymmetricAlgorithm = interface; // type: System.Security.Cryptography.ICspAsymmetricAlgorithm, namespace: System.Security.Cryptography
  DNIEvidenceFactory = interface; // type: System.Security.IEvidenceFactory, namespace: System.Security
  DNISecurityEncodable = interface; // type: System.Security.ISecurityEncodable, namespace: System.Security
  DNIPermission = interface; // type: System.Security.IPermission, namespace: System.Security
  DNIApplicationTrustManager = interface; // type: System.Security.Policy.IApplicationTrustManager, namespace: System.Security.Policy
  DNIMembershipCondition = interface; // type: System.Security.Policy.IMembershipCondition, namespace: System.Security.Policy
  DNISecurityPolicyEncodable = interface; // type: System.Security.ISecurityPolicyEncodable, namespace: System.Security
  DNIStackWalk = interface; // type: System.Security.IStackWalk, namespace: System.Security
  DNIUnrestrictedPermission = interface; // type: System.Security.Permissions.IUnrestrictedPermission, namespace: System.Security.Permissions
  DNIIdentityPermissionFactory = interface; // type: System.Security.Policy.IIdentityPermissionFactory, namespace: System.Security.Policy
  DNIIdentity = interface; // type: System.Security.Principal.IIdentity, namespace: System.Security.Principal
  DNIPrincipal = interface; // type: System.Security.Principal.IPrincipal, namespace: System.Security.Principal
  DNRegistry = interface; // type: Microsoft.Win32.Registry, namespace: Microsoft.Win32
  DNActivationContext = interface; // type: System.ActivationContext, namespace: System
  DNActivator = interface; // type: System.Activator, namespace: System
  DNAppContext = interface; // type: System.AppContext, namespace: System
  DNAppDomainSetup = interface; // type: System.AppDomainSetup, namespace: System
  DNApplicationId = interface; // type: System.ApplicationId, namespace: System
  DNApplicationIdentity = interface; // type: System.ApplicationIdentity, namespace: System
  DNArray = interface; // type: System.Array, namespace: System
  DNAttribute = interface; // type: System.Attribute, namespace: System
  DNAttributeUsageAttribute = interface; // type: System.AttributeUsageAttribute, namespace: System
  DNCLSCompliantAttribute = interface; // type: System.CLSCompliantAttribute, namespace: System
  DNContextStaticAttribute = interface; // type: System.ContextStaticAttribute, namespace: System
  DNSuppressMessageAttribute = interface; // type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNConditionalAttribute = interface; // type: System.Diagnostics.ConditionalAttribute, namespace: System.Diagnostics
  DNContractAbbreviatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractAbbreviatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractArgumentValidatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassForAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassForAttribute, namespace: System.Diagnostics.Contracts
  DNContractInvariantMethodAttribute = interface; // type: System.Diagnostics.Contracts.ContractInvariantMethodAttribute, namespace: System.Diagnostics.Contracts
  DNContractOptionAttribute = interface; // type: System.Diagnostics.Contracts.ContractOptionAttribute, namespace: System.Diagnostics.Contracts
  DNContractPublicPropertyNameAttribute = interface; // type: System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute, namespace: System.Diagnostics.Contracts
  DNContractReferenceAssemblyAttribute = interface; // type: System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute, namespace: System.Diagnostics.Contracts
  DNContractRuntimeIgnoredAttribute = interface; // type: System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute, namespace: System.Diagnostics.Contracts
  DNContractVerificationAttribute = interface; // type: System.Diagnostics.Contracts.ContractVerificationAttribute, namespace: System.Diagnostics.Contracts
  DNPureAttribute = interface; // type: System.Diagnostics.Contracts.PureAttribute, namespace: System.Diagnostics.Contracts
  DNDebuggableAttribute = interface; // type: System.Diagnostics.DebuggableAttribute, namespace: System.Diagnostics
  DNDebuggerBrowsableAttribute = interface; // type: System.Diagnostics.DebuggerBrowsableAttribute, namespace: System.Diagnostics
  DNDebuggerDisplayAttribute = interface; // type: System.Diagnostics.DebuggerDisplayAttribute, namespace: System.Diagnostics
  DNDebuggerHiddenAttribute = interface; // type: System.Diagnostics.DebuggerHiddenAttribute, namespace: System.Diagnostics
  DNDebuggerNonUserCodeAttribute = interface; // type: System.Diagnostics.DebuggerNonUserCodeAttribute, namespace: System.Diagnostics
  DNDebuggerStepperBoundaryAttribute = interface; // type: System.Diagnostics.DebuggerStepperBoundaryAttribute, namespace: System.Diagnostics
  DNDebuggerStepThroughAttribute = interface; // type: System.Diagnostics.DebuggerStepThroughAttribute, namespace: System.Diagnostics
  DNDebuggerTypeProxyAttribute = interface; // type: System.Diagnostics.DebuggerTypeProxyAttribute, namespace: System.Diagnostics
  DNDebuggerVisualizerAttribute = interface; // type: System.Diagnostics.DebuggerVisualizerAttribute, namespace: System.Diagnostics
  DNEventAttribute = interface; // type: System.Diagnostics.Tracing.EventAttribute, namespace: System.Diagnostics.Tracing
  DNEventDataAttribute = interface; // type: System.Diagnostics.Tracing.EventDataAttribute, namespace: System.Diagnostics.Tracing
  DNEventFieldAttribute = interface; // type: System.Diagnostics.Tracing.EventFieldAttribute, namespace: System.Diagnostics.Tracing
  DNEventIgnoreAttribute = interface; // type: System.Diagnostics.Tracing.EventIgnoreAttribute, namespace: System.Diagnostics.Tracing
  DNEventSourceAttribute = interface; // type: System.Diagnostics.Tracing.EventSourceAttribute, namespace: System.Diagnostics.Tracing
  DNNonEventAttribute = interface; // type: System.Diagnostics.Tracing.NonEventAttribute, namespace: System.Diagnostics.Tracing
  DNFlagsAttribute = interface; // type: System.FlagsAttribute, namespace: System
  DNLoaderOptimizationAttribute = interface; // type: System.LoaderOptimizationAttribute, namespace: System
  DNMTAThreadAttribute = interface; // type: System.MTAThreadAttribute, namespace: System
  DNNonSerializedAttribute = interface; // type: System.NonSerializedAttribute, namespace: System
  DNObsoleteAttribute = interface; // type: System.ObsoleteAttribute, namespace: System
  DNParamArrayAttribute = interface; // type: System.ParamArrayAttribute, namespace: System
  DNAssemblyAlgorithmIdAttribute = interface; // type: System.Reflection.AssemblyAlgorithmIdAttribute, namespace: System.Reflection
  DNAssemblyCompanyAttribute = interface; // type: System.Reflection.AssemblyCompanyAttribute, namespace: System.Reflection
  DNAssemblyConfigurationAttribute = interface; // type: System.Reflection.AssemblyConfigurationAttribute, namespace: System.Reflection
  DNAssemblyCopyrightAttribute = interface; // type: System.Reflection.AssemblyCopyrightAttribute, namespace: System.Reflection
  DNAssemblyCultureAttribute = interface; // type: System.Reflection.AssemblyCultureAttribute, namespace: System.Reflection
  DNAssemblyDefaultAliasAttribute = interface; // type: System.Reflection.AssemblyDefaultAliasAttribute, namespace: System.Reflection
  DNAssemblyDelaySignAttribute = interface; // type: System.Reflection.AssemblyDelaySignAttribute, namespace: System.Reflection
  DNAssemblyDescriptionAttribute = interface; // type: System.Reflection.AssemblyDescriptionAttribute, namespace: System.Reflection
  DNAssemblyFileVersionAttribute = interface; // type: System.Reflection.AssemblyFileVersionAttribute, namespace: System.Reflection
  DNAssemblyFlagsAttribute = interface; // type: System.Reflection.AssemblyFlagsAttribute, namespace: System.Reflection
  DNAssemblyInformationalVersionAttribute = interface; // type: System.Reflection.AssemblyInformationalVersionAttribute, namespace: System.Reflection
  DNAssemblyKeyFileAttribute = interface; // type: System.Reflection.AssemblyKeyFileAttribute, namespace: System.Reflection
  DNAssemblyKeyNameAttribute = interface; // type: System.Reflection.AssemblyKeyNameAttribute, namespace: System.Reflection
  DNAssemblyMetadataAttribute = interface; // type: System.Reflection.AssemblyMetadataAttribute, namespace: System.Reflection
  DNAssemblyProductAttribute = interface; // type: System.Reflection.AssemblyProductAttribute, namespace: System.Reflection
  DNAssemblySignatureKeyAttribute = interface; // type: System.Reflection.AssemblySignatureKeyAttribute, namespace: System.Reflection
  DNAssemblyTitleAttribute = interface; // type: System.Reflection.AssemblyTitleAttribute, namespace: System.Reflection
  DNAssemblyTrademarkAttribute = interface; // type: System.Reflection.AssemblyTrademarkAttribute, namespace: System.Reflection
  DNAssemblyVersionAttribute = interface; // type: System.Reflection.AssemblyVersionAttribute, namespace: System.Reflection
  DNDefaultMemberAttribute = interface; // type: System.Reflection.DefaultMemberAttribute, namespace: System.Reflection
  DNObfuscateAssemblyAttribute = interface; // type: System.Reflection.ObfuscateAssemblyAttribute, namespace: System.Reflection
  DNObfuscationAttribute = interface; // type: System.Reflection.ObfuscationAttribute, namespace: System.Reflection
  DNNeutralResourcesLanguageAttribute = interface; // type: System.Resources.NeutralResourcesLanguageAttribute, namespace: System.Resources
  DNSatelliteContractVersionAttribute = interface; // type: System.Resources.SatelliteContractVersionAttribute, namespace: System.Resources
  DNAssemblyTargetedPatchBandAttribute = interface; // type: System.Runtime.AssemblyTargetedPatchBandAttribute, namespace: System.Runtime
  DNAccessedThroughPropertyAttribute = interface; // type: System.Runtime.CompilerServices.AccessedThroughPropertyAttribute, namespace: System.Runtime.CompilerServices
  DNCallerFilePathAttribute = interface; // type: System.Runtime.CompilerServices.CallerFilePathAttribute, namespace: System.Runtime.CompilerServices
  DNCallerLineNumberAttribute = interface; // type: System.Runtime.CompilerServices.CallerLineNumberAttribute, namespace: System.Runtime.CompilerServices
  DNCallerMemberNameAttribute = interface; // type: System.Runtime.CompilerServices.CallerMemberNameAttribute, namespace: System.Runtime.CompilerServices
  DNCompilationRelaxationsAttribute = interface; // type: System.Runtime.CompilerServices.CompilationRelaxationsAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGeneratedAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGeneratedAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGlobalScopeAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGlobalScopeAttribute, namespace: System.Runtime.CompilerServices
  DNCustomConstantAttribute = interface; // type: System.Runtime.CompilerServices.CustomConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDateTimeConstantAttribute = interface; // type: System.Runtime.CompilerServices.DateTimeConstantAttribute, namespace: System.Runtime.CompilerServices
  DNIDispatchConstantAttribute = interface; // type: System.Runtime.CompilerServices.IDispatchConstantAttribute, namespace: System.Runtime.CompilerServices
  DNIUnknownConstantAttribute = interface; // type: System.Runtime.CompilerServices.IUnknownConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDecimalConstantAttribute = interface; // type: System.Runtime.CompilerServices.DecimalConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDefaultDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DefaultDependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDisablePrivateReflectionAttribute = interface; // type: System.Runtime.CompilerServices.DisablePrivateReflectionAttribute, namespace: System.Runtime.CompilerServices
  DNDiscardableAttribute = interface; // type: System.Runtime.CompilerServices.DiscardableAttribute, namespace: System.Runtime.CompilerServices
  DNExtensionAttribute = interface; // type: System.Runtime.CompilerServices.ExtensionAttribute, namespace: System.Runtime.CompilerServices
  DNFixedAddressValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNFixedBufferAttribute = interface; // type: System.Runtime.CompilerServices.FixedBufferAttribute, namespace: System.Runtime.CompilerServices
  DNHasCopySemanticsAttribute = interface; // type: System.Runtime.CompilerServices.HasCopySemanticsAttribute, namespace: System.Runtime.CompilerServices
  DNIndexerNameAttribute = interface; // type: System.Runtime.CompilerServices.IndexerNameAttribute, namespace: System.Runtime.CompilerServices
  DNInternalsVisibleToAttribute = interface; // type: System.Runtime.CompilerServices.InternalsVisibleToAttribute, namespace: System.Runtime.CompilerServices
  DNIsByRefLikeAttribute = interface; // type: System.Runtime.CompilerServices.IsByRefLikeAttribute, namespace: System.Runtime.CompilerServices
  DNIsReadOnlyAttribute = interface; // type: System.Runtime.CompilerServices.IsReadOnlyAttribute, namespace: System.Runtime.CompilerServices
  DNMethodImplAttribute = interface; // type: System.Runtime.CompilerServices.MethodImplAttribute, namespace: System.Runtime.CompilerServices
  DNNativeCppClassAttribute = interface; // type: System.Runtime.CompilerServices.NativeCppClassAttribute, namespace: System.Runtime.CompilerServices
  DNReferenceAssemblyAttribute = interface; // type: System.Runtime.CompilerServices.ReferenceAssemblyAttribute, namespace: System.Runtime.CompilerServices
  DNRequiredAttributeAttribute = interface; // type: System.Runtime.CompilerServices.RequiredAttributeAttribute, namespace: System.Runtime.CompilerServices
  DNRuntimeCompatibilityAttribute = interface; // type: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute, namespace: System.Runtime.CompilerServices
  DNScopelessEnumAttribute = interface; // type: System.Runtime.CompilerServices.ScopelessEnumAttribute, namespace: System.Runtime.CompilerServices
  DNSpecialNameAttribute = interface; // type: System.Runtime.CompilerServices.SpecialNameAttribute, namespace: System.Runtime.CompilerServices
  DNStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.StateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNAsyncStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.AsyncStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNIteratorStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.IteratorStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNStringFreezingAttribute = interface; // type: System.Runtime.CompilerServices.StringFreezingAttribute, namespace: System.Runtime.CompilerServices
  DNSuppressIldasmAttribute = interface; // type: System.Runtime.CompilerServices.SuppressIldasmAttribute, namespace: System.Runtime.CompilerServices
  DNTupleElementNamesAttribute = interface; // type: System.Runtime.CompilerServices.TupleElementNamesAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedFromAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedFromAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedToAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedToAttribute, namespace: System.Runtime.CompilerServices
  DNUnsafeValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.UnsafeValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNPrePrepareMethodAttribute = interface; // type: System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute, namespace: System.Runtime.ConstrainedExecution
  DNReliabilityContractAttribute = interface; // type: System.Runtime.ConstrainedExecution.ReliabilityContractAttribute, namespace: System.Runtime.ConstrainedExecution
  DNHandleProcessCorruptedStateExceptionsAttribute = interface; // type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute, namespace: System.Runtime.ExceptionServices
  DNAllowReversePInvokeCallsAttribute = interface; // type: System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute, namespace: System.Runtime.InteropServices
  DNAutomationProxyAttribute = interface; // type: System.Runtime.InteropServices.AutomationProxyAttribute, namespace: System.Runtime.InteropServices
  DNBestFitMappingAttribute = interface; // type: System.Runtime.InteropServices.BestFitMappingAttribute, namespace: System.Runtime.InteropServices
  DNClassInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ClassInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNCoClassAttribute = interface; // type: System.Runtime.InteropServices.CoClassAttribute, namespace: System.Runtime.InteropServices
  DNComAliasNameAttribute = interface; // type: System.Runtime.InteropServices.ComAliasNameAttribute, namespace: System.Runtime.InteropServices
  DNComCompatibleVersionAttribute = interface; // type: System.Runtime.InteropServices.ComCompatibleVersionAttribute, namespace: System.Runtime.InteropServices
  DNComConversionLossAttribute = interface; // type: System.Runtime.InteropServices.ComConversionLossAttribute, namespace: System.Runtime.InteropServices
  DNComDefaultInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ComDefaultInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNComEventInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ComEventInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNComImportAttribute = interface; // type: System.Runtime.InteropServices.ComImportAttribute, namespace: System.Runtime.InteropServices
  DNComRegisterFunctionAttribute = interface; // type: System.Runtime.InteropServices.ComRegisterFunctionAttribute, namespace: System.Runtime.InteropServices
  DNComSourceInterfacesAttribute = interface; // type: System.Runtime.InteropServices.ComSourceInterfacesAttribute, namespace: System.Runtime.InteropServices
  DNComUnregisterFunctionAttribute = interface; // type: System.Runtime.InteropServices.ComUnregisterFunctionAttribute, namespace: System.Runtime.InteropServices
  DNComVisibleAttribute = interface; // type: System.Runtime.InteropServices.ComVisibleAttribute, namespace: System.Runtime.InteropServices
  DNDefaultCharSetAttribute = interface; // type: System.Runtime.InteropServices.DefaultCharSetAttribute, namespace: System.Runtime.InteropServices
  DNDefaultDllImportSearchPathsAttribute = interface; // type: System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute, namespace: System.Runtime.InteropServices
  DNDispIdAttribute = interface; // type: System.Runtime.InteropServices.DispIdAttribute, namespace: System.Runtime.InteropServices
  DNDllImportAttribute = interface; // type: System.Runtime.InteropServices.DllImportAttribute, namespace: System.Runtime.InteropServices
  DNFieldOffsetAttribute = interface; // type: System.Runtime.InteropServices.FieldOffsetAttribute, namespace: System.Runtime.InteropServices
  DNGuidAttribute = interface; // type: System.Runtime.InteropServices.GuidAttribute, namespace: System.Runtime.InteropServices
  DNIDispatchImplAttribute = interface; // type: System.Runtime.InteropServices.IDispatchImplAttribute, namespace: System.Runtime.InteropServices
  DNImportedFromTypeLibAttribute = interface; // type: System.Runtime.InteropServices.ImportedFromTypeLibAttribute, namespace: System.Runtime.InteropServices
  DNInAttribute = interface; // type: System.Runtime.InteropServices.InAttribute, namespace: System.Runtime.InteropServices
  DNInterfaceTypeAttribute = interface; // type: System.Runtime.InteropServices.InterfaceTypeAttribute, namespace: System.Runtime.InteropServices
  DNLCIDConversionAttribute = interface; // type: System.Runtime.InteropServices.LCIDConversionAttribute, namespace: System.Runtime.InteropServices
  DNManagedToNativeComInteropStubAttribute = interface; // type: System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute, namespace: System.Runtime.InteropServices
  DNMarshalAsAttribute = interface; // type: System.Runtime.InteropServices.MarshalAsAttribute, namespace: System.Runtime.InteropServices
  DNOptionalAttribute = interface; // type: System.Runtime.InteropServices.OptionalAttribute, namespace: System.Runtime.InteropServices
  DNOutAttribute = interface; // type: System.Runtime.InteropServices.OutAttribute, namespace: System.Runtime.InteropServices
  DNPreserveSigAttribute = interface; // type: System.Runtime.InteropServices.PreserveSigAttribute, namespace: System.Runtime.InteropServices
  DNPrimaryInteropAssemblyAttribute = interface; // type: System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute, namespace: System.Runtime.InteropServices
  DNProgIdAttribute = interface; // type: System.Runtime.InteropServices.ProgIdAttribute, namespace: System.Runtime.InteropServices
  DNSetWin32ContextInIDispatchAttribute = interface; // type: System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute, namespace: System.Runtime.InteropServices
  DNStructLayoutAttribute = interface; // type: System.Runtime.InteropServices.StructLayoutAttribute, namespace: System.Runtime.InteropServices
  DNTypeIdentifierAttribute = interface; // type: System.Runtime.InteropServices.TypeIdentifierAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibFuncAttribute = interface; // type: System.Runtime.InteropServices.TypeLibFuncAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibImportClassAttribute = interface; // type: System.Runtime.InteropServices.TypeLibImportClassAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibTypeAttribute = interface; // type: System.Runtime.InteropServices.TypeLibTypeAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibVarAttribute = interface; // type: System.Runtime.InteropServices.TypeLibVarAttribute, namespace: System.Runtime.InteropServices
  DNTypeLibVersionAttribute = interface; // type: System.Runtime.InteropServices.TypeLibVersionAttribute, namespace: System.Runtime.InteropServices
  DNUnmanagedFunctionPointerAttribute = interface; // type: System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute, namespace: System.Runtime.InteropServices
  DNDefaultInterfaceAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNInterfaceImplementedInVersionAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNReadOnlyArrayAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNReturnValueNameAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWriteOnlyArrayAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNContextAttribute = interface; // type: System.Runtime.Remoting.Contexts.ContextAttribute, namespace: System.Runtime.Remoting.Contexts
  DNUrlAttribute = interface; // type: System.Runtime.Remoting.Activation.UrlAttribute, namespace: System.Runtime.Remoting.Activation
  DNSynchronizationAttribute = interface; // type: System.Runtime.Remoting.Contexts.SynchronizationAttribute, namespace: System.Runtime.Remoting.Contexts
  DNOneWayAttribute = interface; // type: System.Runtime.Remoting.Messaging.OneWayAttribute, namespace: System.Runtime.Remoting.Messaging
  DNSoapAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapFieldAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapFieldAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapMethodAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapMethodAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapParameterAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapParameterAttribute, namespace: System.Runtime.Remoting.Metadata
  DNSoapTypeAttribute = interface; // type: System.Runtime.Remoting.Metadata.SoapTypeAttribute, namespace: System.Runtime.Remoting.Metadata
  DNProxyAttribute = interface; // type: System.Runtime.Remoting.Proxies.ProxyAttribute, namespace: System.Runtime.Remoting.Proxies
  DNOnDeserializedAttribute = interface; // type: System.Runtime.Serialization.OnDeserializedAttribute, namespace: System.Runtime.Serialization
  DNOnDeserializingAttribute = interface; // type: System.Runtime.Serialization.OnDeserializingAttribute, namespace: System.Runtime.Serialization
  DNOnSerializedAttribute = interface; // type: System.Runtime.Serialization.OnSerializedAttribute, namespace: System.Runtime.Serialization
  DNOnSerializingAttribute = interface; // type: System.Runtime.Serialization.OnSerializingAttribute, namespace: System.Runtime.Serialization
  DNOptionalFieldAttribute = interface; // type: System.Runtime.Serialization.OptionalFieldAttribute, namespace: System.Runtime.Serialization
  DNTargetedPatchingOptOutAttribute = interface; // type: System.Runtime.TargetedPatchingOptOutAttribute, namespace: System.Runtime
  DNComponentGuaranteesAttribute = interface; // type: System.Runtime.Versioning.ComponentGuaranteesAttribute, namespace: System.Runtime.Versioning
  DNResourceConsumptionAttribute = interface; // type: System.Runtime.Versioning.ResourceConsumptionAttribute, namespace: System.Runtime.Versioning
  DNResourceExposureAttribute = interface; // type: System.Runtime.Versioning.ResourceExposureAttribute, namespace: System.Runtime.Versioning
  DNTargetFrameworkAttribute = interface; // type: System.Runtime.Versioning.TargetFrameworkAttribute, namespace: System.Runtime.Versioning
  DNAllowPartiallyTrustedCallersAttribute = interface; // type: System.Security.AllowPartiallyTrustedCallersAttribute, namespace: System.Security
  DNSecurityAttribute = interface; // type: System.Security.Permissions.SecurityAttribute, namespace: System.Security.Permissions
  DNCodeAccessSecurityAttribute = interface; // type: System.Security.Permissions.CodeAccessSecurityAttribute, namespace: System.Security.Permissions
  DNEnvironmentPermissionAttribute = interface; // type: System.Security.Permissions.EnvironmentPermissionAttribute, namespace: System.Security.Permissions
  DNFileDialogPermissionAttribute = interface; // type: System.Security.Permissions.FileDialogPermissionAttribute, namespace: System.Security.Permissions
  DNFileIOPermissionAttribute = interface; // type: System.Security.Permissions.FileIOPermissionAttribute, namespace: System.Security.Permissions
  DNGacIdentityPermissionAttribute = interface; // type: System.Security.Permissions.GacIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNHostProtectionAttribute = interface; // type: System.Security.Permissions.HostProtectionAttribute, namespace: System.Security.Permissions
  DNIsolatedStoragePermissionAttribute = interface; // type: System.Security.Permissions.IsolatedStoragePermissionAttribute, namespace: System.Security.Permissions
  DNIsolatedStorageFilePermissionAttribute = interface; // type: System.Security.Permissions.IsolatedStorageFilePermissionAttribute, namespace: System.Security.Permissions
  DNKeyContainerPermissionAttribute = interface; // type: System.Security.Permissions.KeyContainerPermissionAttribute, namespace: System.Security.Permissions
  DNPermissionSetAttribute = interface; // type: System.Security.Permissions.PermissionSetAttribute, namespace: System.Security.Permissions
  DNPrincipalPermissionAttribute = interface; // type: System.Security.Permissions.PrincipalPermissionAttribute, namespace: System.Security.Permissions
  DNPublisherIdentityPermissionAttribute = interface; // type: System.Security.Permissions.PublisherIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNReflectionPermissionAttribute = interface; // type: System.Security.Permissions.ReflectionPermissionAttribute, namespace: System.Security.Permissions
  DNRegistryPermissionAttribute = interface; // type: System.Security.Permissions.RegistryPermissionAttribute, namespace: System.Security.Permissions
  DNSecurityPermissionAttribute = interface; // type: System.Security.Permissions.SecurityPermissionAttribute, namespace: System.Security.Permissions
  DNSiteIdentityPermissionAttribute = interface; // type: System.Security.Permissions.SiteIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNStrongNameIdentityPermissionAttribute = interface; // type: System.Security.Permissions.StrongNameIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNUIPermissionAttribute = interface; // type: System.Security.Permissions.UIPermissionAttribute, namespace: System.Security.Permissions
  DNUrlIdentityPermissionAttribute = interface; // type: System.Security.Permissions.UrlIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNZoneIdentityPermissionAttribute = interface; // type: System.Security.Permissions.ZoneIdentityPermissionAttribute, namespace: System.Security.Permissions
  DNSecurityCriticalAttribute = interface; // type: System.Security.SecurityCriticalAttribute, namespace: System.Security
  DNSecurityRulesAttribute = interface; // type: System.Security.SecurityRulesAttribute, namespace: System.Security
  DNSecuritySafeCriticalAttribute = interface; // type: System.Security.SecuritySafeCriticalAttribute, namespace: System.Security
  DNSecurityTransparentAttribute = interface; // type: System.Security.SecurityTransparentAttribute, namespace: System.Security
  DNSecurityTreatAsSafeAttribute = interface; // type: System.Security.SecurityTreatAsSafeAttribute, namespace: System.Security
  DNSuppressUnmanagedCodeSecurityAttribute = interface; // type: System.Security.SuppressUnmanagedCodeSecurityAttribute, namespace: System.Security
  DNUnverifiableCodeAttribute = interface; // type: System.Security.UnverifiableCodeAttribute, namespace: System.Security
  DNSerializableAttribute = interface; // type: System.SerializableAttribute, namespace: System
  DNSTAThreadAttribute = interface; // type: System.STAThreadAttribute, namespace: System
  DNThreadStaticAttribute = interface; // type: System.ThreadStaticAttribute, namespace: System
  DNBitConverter = interface; // type: System.BitConverter, namespace: System
  DNBuffer = interface; // type: System.Buffer, namespace: System
  DNCharEnumerator = interface; // type: System.CharEnumerator, namespace: System
  DNArrayList = interface; // type: System.Collections.ArrayList, namespace: System.Collections
  DNBitArray = interface; // type: System.Collections.BitArray, namespace: System.Collections
  DNCaseInsensitiveComparer = interface; // type: System.Collections.CaseInsensitiveComparer, namespace: System.Collections
  DNCaseInsensitiveHashCodeProvider = interface; // type: System.Collections.CaseInsensitiveHashCodeProvider, namespace: System.Collections
  DNCollectionBase = interface; // type: System.Collections.CollectionBase, namespace: System.Collections
  DNComparer = interface; // type: System.Collections.Comparer, namespace: System.Collections
  DNConcurrentDictionary<TKey, TValue> = interface; // type: System.Collections.Concurrent.ConcurrentDictionary`2, namespace: System.Collections.Concurrent
  DNConcurrentQueue<T> = interface; // type: System.Collections.Concurrent.ConcurrentQueue`1, namespace: System.Collections.Concurrent
  DNConcurrentStack<T> = interface; // type: System.Collections.Concurrent.ConcurrentStack`1, namespace: System.Collections.Concurrent
  DNPartitioner<TSource> = interface; // type: System.Collections.Concurrent.Partitioner`1, namespace: System.Collections.Concurrent
  DNOrderablePartitioner<TSource> = interface; // type: System.Collections.Concurrent.OrderablePartitioner`1, namespace: System.Collections.Concurrent
  DNPartitioner = interface; // type: System.Collections.Concurrent.Partitioner, namespace: System.Collections.Concurrent
  DNDictionaryBase = interface; // type: System.Collections.DictionaryBase, namespace: System.Collections
  DNComparer<T> = interface; // type: System.Collections.Generic.Comparer`1, namespace: System.Collections.Generic
  DNDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2, namespace: System.Collections.Generic
  DNDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+KeyCollection, namespace: System.Collections.Generic
  DNDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+ValueCollection, namespace: System.Collections.Generic
  DNEqualityComparer<T> = interface; // type: System.Collections.Generic.EqualityComparer`1, namespace: System.Collections.Generic
  DNList<T> = interface; // type: System.Collections.Generic.List`1, namespace: System.Collections.Generic
  DNHashtable = interface; // type: System.Collections.Hashtable, namespace: System.Collections
  DNCollection<T> = interface; // type: System.Collections.ObjectModel.Collection`1, namespace: System.Collections.ObjectModel
  DNKeyedCollection<TKey, TItem> = interface; // type: System.Collections.ObjectModel.KeyedCollection`2, namespace: System.Collections.ObjectModel
  DNReadOnlyCollection<T> = interface; // type: System.Collections.ObjectModel.ReadOnlyCollection`1, namespace: System.Collections.ObjectModel
  DNReadOnlyDictionary<TKey, TValue> = interface; // type: System.Collections.ObjectModel.ReadOnlyDictionary`2, namespace: System.Collections.ObjectModel
  DNReadOnlyDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection, namespace: System.Collections.ObjectModel
  DNReadOnlyDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection, namespace: System.Collections.ObjectModel
  DNQueue = interface; // type: System.Collections.Queue, namespace: System.Collections
  DNReadOnlyCollectionBase = interface; // type: System.Collections.ReadOnlyCollectionBase, namespace: System.Collections
  DNAuthorizationRuleCollection = interface; // type: System.Security.AccessControl.AuthorizationRuleCollection, namespace: System.Security.AccessControl
  DNSortedList = interface; // type: System.Collections.SortedList, namespace: System.Collections
  DNStack = interface; // type: System.Collections.Stack, namespace: System.Collections
  DNStructuralComparisons = interface; // type: System.Collections.StructuralComparisons, namespace: System.Collections
  DNConsole = interface; // type: System.Console, namespace: System
  DNConvert = interface; // type: System.Convert, namespace: System
  DNDBNull = interface; // type: System.DBNull, namespace: System
  DNDelegate = interface; // type: System.Delegate, namespace: System
  DNMulticastDelegate = interface; // type: System.MulticastDelegate, namespace: System
  DNInternalActivationContextHelper = interface; // type: System.Deployment.Internal.InternalActivationContextHelper, namespace: System.Deployment.Internal
  DNInternalApplicationIdentityHelper = interface; // type: System.Deployment.Internal.InternalApplicationIdentityHelper, namespace: System.Deployment.Internal
  DNContract = interface; // type: System.Diagnostics.Contracts.Contract, namespace: System.Diagnostics.Contracts
  DNInternal_ContractHelper = interface; // type: System.Diagnostics.Contracts.Internal.ContractHelper, namespace: System.Diagnostics.Contracts.Internal
  DNDebugger = interface; // type: System.Diagnostics.Debugger, namespace: System.Diagnostics
  DNStackFrame = interface; // type: System.Diagnostics.StackFrame, namespace: System.Diagnostics
  DNStackTrace = interface; // type: System.Diagnostics.StackTrace, namespace: System.Diagnostics
  DNSymDocumentType = interface; // type: System.Diagnostics.SymbolStore.SymDocumentType, namespace: System.Diagnostics.SymbolStore
  DNSymLanguageType = interface; // type: System.Diagnostics.SymbolStore.SymLanguageType, namespace: System.Diagnostics.SymbolStore
  DNSymLanguageVendor = interface; // type: System.Diagnostics.SymbolStore.SymLanguageVendor, namespace: System.Diagnostics.SymbolStore
  DNEventListener = interface; // type: System.Diagnostics.Tracing.EventListener, namespace: System.Diagnostics.Tracing
  DNEventSource = interface; // type: System.Diagnostics.Tracing.EventSource, namespace: System.Diagnostics.Tracing
  DNEnvironment = interface; // type: System.Environment, namespace: System
  DNEventArgs = interface; // type: System.EventArgs, namespace: System
  DNAssemblyLoadEventArgs = interface; // type: System.AssemblyLoadEventArgs, namespace: System
  DNConsoleCancelEventArgs = interface; // type: System.ConsoleCancelEventArgs, namespace: System
  DNContractFailedEventArgs = interface; // type: System.Diagnostics.Contracts.ContractFailedEventArgs, namespace: System.Diagnostics.Contracts
  DNEventCommandEventArgs = interface; // type: System.Diagnostics.Tracing.EventCommandEventArgs, namespace: System.Diagnostics.Tracing
  DNEventSourceCreatedEventArgs = interface; // type: System.Diagnostics.Tracing.EventSourceCreatedEventArgs, namespace: System.Diagnostics.Tracing
  DNEventWrittenEventArgs = interface; // type: System.Diagnostics.Tracing.EventWrittenEventArgs, namespace: System.Diagnostics.Tracing
  DNResolveEventArgs = interface; // type: System.ResolveEventArgs, namespace: System
  DNFirstChanceExceptionEventArgs = interface; // type: System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs, namespace: System.Runtime.ExceptionServices
  DNDesignerNamespaceResolveEventArgs = interface; // type: System.Runtime.InteropServices.WindowsRuntime.DesignerNamespaceResolveEventArgs, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNNamespaceResolveEventArgs = interface; // type: System.Runtime.InteropServices.WindowsRuntime.NamespaceResolveEventArgs, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNSafeSerializationEventArgs = interface; // type: System.Runtime.Serialization.SafeSerializationEventArgs, namespace: System.Runtime.Serialization
  DNUnobservedTaskExceptionEventArgs = interface; // type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs, namespace: System.Threading.Tasks
  DNUnhandledExceptionEventArgs = interface; // type: System.UnhandledExceptionEventArgs, namespace: System
  DNException = interface; // type: System.Exception, namespace: System
  DNAggregateException = interface; // type: System.AggregateException, namespace: System
  DNApplicationException = interface; // type: System.ApplicationException, namespace: System
  DNInvalidFilterCriteriaException = interface; // type: System.Reflection.InvalidFilterCriteriaException, namespace: System.Reflection
  DNTargetException = interface; // type: System.Reflection.TargetException, namespace: System.Reflection
  DNTargetInvocationException = interface; // type: System.Reflection.TargetInvocationException, namespace: System.Reflection
  DNTargetParameterCountException = interface; // type: System.Reflection.TargetParameterCountException, namespace: System.Reflection
  DNWaitHandleCannotBeOpenedException = interface; // type: System.Threading.WaitHandleCannotBeOpenedException, namespace: System.Threading
  DNEventSourceException = interface; // type: System.Diagnostics.Tracing.EventSourceException, namespace: System.Diagnostics.Tracing
  DNInvalidTimeZoneException = interface; // type: System.InvalidTimeZoneException, namespace: System
  DNIsolatedStorageException = interface; // type: System.IO.IsolatedStorage.IsolatedStorageException, namespace: System.IO.IsolatedStorage
  DNRuntimeWrappedException = interface; // type: System.Runtime.CompilerServices.RuntimeWrappedException, namespace: System.Runtime.CompilerServices
  DNSystemException = interface; // type: System.SystemException, namespace: System
  DNAccessViolationException = interface; // type: System.AccessViolationException, namespace: System
  DNAppDomainUnloadedException = interface; // type: System.AppDomainUnloadedException, namespace: System
  DNArgumentException = interface; // type: System.ArgumentException, namespace: System
  DNArgumentNullException = interface; // type: System.ArgumentNullException, namespace: System
  DNArgumentOutOfRangeException = interface; // type: System.ArgumentOutOfRangeException, namespace: System
  DNDuplicateWaitObjectException = interface; // type: System.DuplicateWaitObjectException, namespace: System
  DNCultureNotFoundException = interface; // type: System.Globalization.CultureNotFoundException, namespace: System.Globalization
  DNDecoderFallbackException = interface; // type: System.Text.DecoderFallbackException, namespace: System.Text
  DNEncoderFallbackException = interface; // type: System.Text.EncoderFallbackException, namespace: System.Text
  DNArithmeticException = interface; // type: System.ArithmeticException, namespace: System
  DNDivideByZeroException = interface; // type: System.DivideByZeroException, namespace: System
  DNNotFiniteNumberException = interface; // type: System.NotFiniteNumberException, namespace: System
  DNOverflowException = interface; // type: System.OverflowException, namespace: System
  DNArrayTypeMismatchException = interface; // type: System.ArrayTypeMismatchException, namespace: System
  DNBadImageFormatException = interface; // type: System.BadImageFormatException, namespace: System
  DNCannotUnloadAppDomainException = interface; // type: System.CannotUnloadAppDomainException, namespace: System
  DNKeyNotFoundException = interface; // type: System.Collections.Generic.KeyNotFoundException, namespace: System.Collections.Generic
  DNContextMarshalException = interface; // type: System.ContextMarshalException, namespace: System
  DNDataMisalignedException = interface; // type: System.DataMisalignedException, namespace: System
  DNExecutionEngineException = interface; // type: System.ExecutionEngineException, namespace: System
  DNFormatException = interface; // type: System.FormatException, namespace: System
  DNCustomAttributeFormatException = interface; // type: System.Reflection.CustomAttributeFormatException, namespace: System.Reflection
  DNIndexOutOfRangeException = interface; // type: System.IndexOutOfRangeException, namespace: System
  DNInsufficientExecutionStackException = interface; // type: System.InsufficientExecutionStackException, namespace: System
  DNInvalidCastException = interface; // type: System.InvalidCastException, namespace: System
  DNInvalidOperationException = interface; // type: System.InvalidOperationException, namespace: System
  DNObjectDisposedException = interface; // type: System.ObjectDisposedException, namespace: System
  DNInvalidProgramException = interface; // type: System.InvalidProgramException, namespace: System
  DNIOException = interface; // type: System.IO.IOException, namespace: System.IO
  DNDirectoryNotFoundException = interface; // type: System.IO.DirectoryNotFoundException, namespace: System.IO
  DNDriveNotFoundException = interface; // type: System.IO.DriveNotFoundException, namespace: System.IO
  DNEndOfStreamException = interface; // type: System.IO.EndOfStreamException, namespace: System.IO
  DNFileLoadException = interface; // type: System.IO.FileLoadException, namespace: System.IO
  DNFileNotFoundException = interface; // type: System.IO.FileNotFoundException, namespace: System.IO
  DNPathTooLongException = interface; // type: System.IO.PathTooLongException, namespace: System.IO
  DNMemberAccessException = interface; // type: System.MemberAccessException, namespace: System
  DNFieldAccessException = interface; // type: System.FieldAccessException, namespace: System
  DNMethodAccessException = interface; // type: System.MethodAccessException, namespace: System
  DNMissingMemberException = interface; // type: System.MissingMemberException, namespace: System
  DNMissingFieldException = interface; // type: System.MissingFieldException, namespace: System
  DNMissingMethodException = interface; // type: System.MissingMethodException, namespace: System
  DNMulticastNotSupportedException = interface; // type: System.MulticastNotSupportedException, namespace: System
  DNNotImplementedException = interface; // type: System.NotImplementedException, namespace: System
  DNNotSupportedException = interface; // type: System.NotSupportedException, namespace: System
  DNPlatformNotSupportedException = interface; // type: System.PlatformNotSupportedException, namespace: System
  DNNullReferenceException = interface; // type: System.NullReferenceException, namespace: System
  DNOperationCanceledException = interface; // type: System.OperationCanceledException, namespace: System
  DNTaskCanceledException = interface; // type: System.Threading.Tasks.TaskCanceledException, namespace: System.Threading.Tasks
  DNOutOfMemoryException = interface; // type: System.OutOfMemoryException, namespace: System
  DNInsufficientMemoryException = interface; // type: System.InsufficientMemoryException, namespace: System
  DNRankException = interface; // type: System.RankException, namespace: System
  DNAmbiguousMatchException = interface; // type: System.Reflection.AmbiguousMatchException, namespace: System.Reflection
  DNReflectionTypeLoadException = interface; // type: System.Reflection.ReflectionTypeLoadException, namespace: System.Reflection
  DNMissingManifestResourceException = interface; // type: System.Resources.MissingManifestResourceException, namespace: System.Resources
  DNMissingSatelliteAssemblyException = interface; // type: System.Resources.MissingSatelliteAssemblyException, namespace: System.Resources
  DNExternalException = interface; // type: System.Runtime.InteropServices.ExternalException, namespace: System.Runtime.InteropServices
  DNCOMException = interface; // type: System.Runtime.InteropServices.COMException, namespace: System.Runtime.InteropServices
  DNSEHException = interface; // type: System.Runtime.InteropServices.SEHException, namespace: System.Runtime.InteropServices
  DNInvalidComObjectException = interface; // type: System.Runtime.InteropServices.InvalidComObjectException, namespace: System.Runtime.InteropServices
  DNInvalidOleVariantTypeException = interface; // type: System.Runtime.InteropServices.InvalidOleVariantTypeException, namespace: System.Runtime.InteropServices
  DNMarshalDirectiveException = interface; // type: System.Runtime.InteropServices.MarshalDirectiveException, namespace: System.Runtime.InteropServices
  DNSafeArrayRankMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayRankMismatchException, namespace: System.Runtime.InteropServices
  DNSafeArrayTypeMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayTypeMismatchException, namespace: System.Runtime.InteropServices
  DNRemotingException = interface; // type: System.Runtime.Remoting.RemotingException, namespace: System.Runtime.Remoting
  DNRemotingTimeoutException = interface; // type: System.Runtime.Remoting.RemotingTimeoutException, namespace: System.Runtime.Remoting
  DNServerException = interface; // type: System.Runtime.Remoting.ServerException, namespace: System.Runtime.Remoting
  DNSerializationException = interface; // type: System.Runtime.Serialization.SerializationException, namespace: System.Runtime.Serialization
  DNCryptographicException = interface; // type: System.Security.Cryptography.CryptographicException, namespace: System.Security.Cryptography
  DNCryptographicUnexpectedOperationException = interface; // type: System.Security.Cryptography.CryptographicUnexpectedOperationException, namespace: System.Security.Cryptography
  DNHostProtectionException = interface; // type: System.Security.HostProtectionException, namespace: System.Security
  DNPolicyException = interface; // type: System.Security.Policy.PolicyException, namespace: System.Security.Policy
  DNIdentityNotMappedException = interface; // type: System.Security.Principal.IdentityNotMappedException, namespace: System.Security.Principal
  DNSecurityException = interface; // type: System.Security.SecurityException, namespace: System.Security
  DNVerificationException = interface; // type: System.Security.VerificationException, namespace: System.Security
  DNXmlSyntaxException = interface; // type: System.Security.XmlSyntaxException, namespace: System.Security
  DNStackOverflowException = interface; // type: System.StackOverflowException, namespace: System
  DNAbandonedMutexException = interface; // type: System.Threading.AbandonedMutexException, namespace: System.Threading
  DNSemaphoreFullException = interface; // type: System.Threading.SemaphoreFullException, namespace: System.Threading
  DNSynchronizationLockException = interface; // type: System.Threading.SynchronizationLockException, namespace: System.Threading
  DNThreadAbortException = interface; // type: System.Threading.ThreadAbortException, namespace: System.Threading
  DNThreadInterruptedException = interface; // type: System.Threading.ThreadInterruptedException, namespace: System.Threading
  DNThreadStartException = interface; // type: System.Threading.ThreadStartException, namespace: System.Threading
  DNThreadStateException = interface; // type: System.Threading.ThreadStateException, namespace: System.Threading
  DNTimeoutException = interface; // type: System.TimeoutException, namespace: System
  DNTypeInitializationException = interface; // type: System.TypeInitializationException, namespace: System
  DNTypeLoadException = interface; // type: System.TypeLoadException, namespace: System
  DNDllNotFoundException = interface; // type: System.DllNotFoundException, namespace: System
  DNEntryPointNotFoundException = interface; // type: System.EntryPointNotFoundException, namespace: System
  DNTypeAccessException = interface; // type: System.TypeAccessException, namespace: System
  DNTypeUnloadedException = interface; // type: System.TypeUnloadedException, namespace: System
  DNUnauthorizedAccessException = interface; // type: System.UnauthorizedAccessException, namespace: System
  DNPrivilegeNotHeldException = interface; // type: System.Security.AccessControl.PrivilegeNotHeldException, namespace: System.Security.AccessControl
  DNLockRecursionException = interface; // type: System.Threading.LockRecursionException, namespace: System.Threading
  DNTaskSchedulerException = interface; // type: System.Threading.Tasks.TaskSchedulerException, namespace: System.Threading.Tasks
  DNTimeZoneNotFoundException = interface; // type: System.TimeZoneNotFoundException, namespace: System
  DNFormattableString = interface; // type: System.FormattableString, namespace: System
  DNGC = interface; // type: System.GC, namespace: System
  DNCalendar = interface; // type: System.Globalization.Calendar, namespace: System.Globalization
  DNEastAsianLunisolarCalendar = interface; // type: System.Globalization.EastAsianLunisolarCalendar, namespace: System.Globalization
  DNChineseLunisolarCalendar = interface; // type: System.Globalization.ChineseLunisolarCalendar, namespace: System.Globalization
  DNJapaneseLunisolarCalendar = interface; // type: System.Globalization.JapaneseLunisolarCalendar, namespace: System.Globalization
  DNKoreanLunisolarCalendar = interface; // type: System.Globalization.KoreanLunisolarCalendar, namespace: System.Globalization
  DNTaiwanLunisolarCalendar = interface; // type: System.Globalization.TaiwanLunisolarCalendar, namespace: System.Globalization
  DNGregorianCalendar = interface; // type: System.Globalization.GregorianCalendar, namespace: System.Globalization
  DNHebrewCalendar = interface; // type: System.Globalization.HebrewCalendar, namespace: System.Globalization
  DNHijriCalendar = interface; // type: System.Globalization.HijriCalendar, namespace: System.Globalization
  DNJapaneseCalendar = interface; // type: System.Globalization.JapaneseCalendar, namespace: System.Globalization
  DNJulianCalendar = interface; // type: System.Globalization.JulianCalendar, namespace: System.Globalization
  DNKoreanCalendar = interface; // type: System.Globalization.KoreanCalendar, namespace: System.Globalization
  DNPersianCalendar = interface; // type: System.Globalization.PersianCalendar, namespace: System.Globalization
  DNTaiwanCalendar = interface; // type: System.Globalization.TaiwanCalendar, namespace: System.Globalization
  DNThaiBuddhistCalendar = interface; // type: System.Globalization.ThaiBuddhistCalendar, namespace: System.Globalization
  DNUmAlQuraCalendar = interface; // type: System.Globalization.UmAlQuraCalendar, namespace: System.Globalization
  DNCharUnicodeInfo = interface; // type: System.Globalization.CharUnicodeInfo, namespace: System.Globalization
  DNCompareInfo = interface; // type: System.Globalization.CompareInfo, namespace: System.Globalization
  DNCultureInfo = interface; // type: System.Globalization.CultureInfo, namespace: System.Globalization
  DNDateTimeFormatInfo = interface; // type: System.Globalization.DateTimeFormatInfo, namespace: System.Globalization
  DNDaylightTime = interface; // type: System.Globalization.DaylightTime, namespace: System.Globalization
  DNGlobalizationExtensions = interface; // type: System.Globalization.GlobalizationExtensions, namespace: System.Globalization
  DNIdnMapping = interface; // type: System.Globalization.IdnMapping, namespace: System.Globalization
  DNNumberFormatInfo = interface; // type: System.Globalization.NumberFormatInfo, namespace: System.Globalization
  DNRegionInfo = interface; // type: System.Globalization.RegionInfo, namespace: System.Globalization
  DNSortKey = interface; // type: System.Globalization.SortKey, namespace: System.Globalization
  DNSortVersion = interface; // type: System.Globalization.SortVersion, namespace: System.Globalization
  DNStringInfo = interface; // type: System.Globalization.StringInfo, namespace: System.Globalization
  DNTextElementEnumerator = interface; // type: System.Globalization.TextElementEnumerator, namespace: System.Globalization
  DNTextInfo = interface; // type: System.Globalization.TextInfo, namespace: System.Globalization
  DNBinaryReader = interface; // type: System.IO.BinaryReader, namespace: System.IO
  DNBinaryWriter = interface; // type: System.IO.BinaryWriter, namespace: System.IO
  DNDirectory = interface; // type: System.IO.Directory, namespace: System.IO
  DNDriveInfo = interface; // type: System.IO.DriveInfo, namespace: System.IO
  DNFile = interface; // type: System.IO.File, namespace: System.IO
  DNPath = interface; // type: System.IO.Path, namespace: System.IO
  DNUnmanagedMemoryAccessor = interface; // type: System.IO.UnmanagedMemoryAccessor, namespace: System.IO
  DNLazy<T> = interface; // type: System.Lazy`1, namespace: System
  DNLocalDataStoreSlot = interface; // type: System.LocalDataStoreSlot, namespace: System
  DNMarshalByRefObject = interface; // type: System.MarshalByRefObject, namespace: System
  DNRegistryKey = interface; // type: Microsoft.Win32.RegistryKey, namespace: Microsoft.Win32
  DNAppDomain = interface; // type: System.AppDomain, namespace: System
  DNAppDomainManager = interface; // type: System.AppDomainManager, namespace: System
  DNContextBoundObject = interface; // type: System.ContextBoundObject, namespace: System
  DNFileSystemInfo = interface; // type: System.IO.FileSystemInfo, namespace: System.IO
  DNDirectoryInfo = interface; // type: System.IO.DirectoryInfo, namespace: System.IO
  DNFileInfo = interface; // type: System.IO.FileInfo, namespace: System.IO
  DNIsolatedStorage = interface; // type: System.IO.IsolatedStorage.IsolatedStorage, namespace: System.IO.IsolatedStorage
  DNIsolatedStorageFile = interface; // type: System.IO.IsolatedStorage.IsolatedStorageFile, namespace: System.IO.IsolatedStorage
  DNStream = interface; // type: System.IO.Stream, namespace: System.IO
  DNBufferedStream = interface; // type: System.IO.BufferedStream, namespace: System.IO
  DNFileStream = interface; // type: System.IO.FileStream, namespace: System.IO
  DNIsolatedStorageFileStream = interface; // type: System.IO.IsolatedStorage.IsolatedStorageFileStream, namespace: System.IO.IsolatedStorage
  DNMemoryStream = interface; // type: System.IO.MemoryStream, namespace: System.IO
  DNUnmanagedMemoryStream = interface; // type: System.IO.UnmanagedMemoryStream, namespace: System.IO
  DNCryptoStream = interface; // type: System.Security.Cryptography.CryptoStream, namespace: System.Security.Cryptography
  DNTextReader = interface; // type: System.IO.TextReader, namespace: System.IO
  DNStreamReader = interface; // type: System.IO.StreamReader, namespace: System.IO
  DNStringReader = interface; // type: System.IO.StringReader, namespace: System.IO
  DNTextWriter = interface; // type: System.IO.TextWriter, namespace: System.IO
  DNStreamWriter = interface; // type: System.IO.StreamWriter, namespace: System.IO
  DNStringWriter = interface; // type: System.IO.StringWriter, namespace: System.IO
  DNAssemblyNameProxy = interface; // type: System.Reflection.AssemblyNameProxy, namespace: System.Reflection
  DNClientSponsor = interface; // type: System.Runtime.Remoting.Lifetime.ClientSponsor, namespace: System.Runtime.Remoting.Lifetime
  DNObjectHandle = interface; // type: System.Runtime.Remoting.ObjectHandle, namespace: System.Runtime.Remoting
  DNRegisteredWaitHandle = interface; // type: System.Threading.RegisteredWaitHandle, namespace: System.Threading
  DNTimer = interface; // type: System.Threading.Timer, namespace: System.Threading
  DNWaitHandle = interface; // type: System.Threading.WaitHandle, namespace: System.Threading
  DNEventWaitHandle = interface; // type: System.Threading.EventWaitHandle, namespace: System.Threading
  DNAutoResetEvent = interface; // type: System.Threading.AutoResetEvent, namespace: System.Threading
  DNManualResetEvent = interface; // type: System.Threading.ManualResetEvent, namespace: System.Threading
  DNMutex = interface; // type: System.Threading.Mutex, namespace: System.Threading
  DNMath = interface; // type: System.Math, namespace: System
  DNNullable = interface; // type: System.Nullable, namespace: System
  DNOperatingSystem = interface; // type: System.OperatingSystem, namespace: System
  DNProgress<T> = interface; // type: System.Progress`1, namespace: System
  DNRandom = interface; // type: System.Random, namespace: System
  DNAssembly = interface; // type: System.Reflection.Assembly, namespace: System.Reflection
  DNAssemblyBuilder = interface; // type: System.Reflection.Emit.AssemblyBuilder, namespace: System.Reflection.Emit
  DNAssemblyName = interface; // type: System.Reflection.AssemblyName, namespace: System.Reflection
  DNBinder = interface; // type: System.Reflection.Binder, namespace: System.Reflection
  DNCustomAttributeData = interface; // type: System.Reflection.CustomAttributeData, namespace: System.Reflection
  DNCustomAttributeExtensions = interface; // type: System.Reflection.CustomAttributeExtensions, namespace: System.Reflection
  DNCustomAttributeBuilder = interface; // type: System.Reflection.Emit.CustomAttributeBuilder, namespace: System.Reflection.Emit
  DNDynamicILInfo = interface; // type: System.Reflection.Emit.DynamicILInfo, namespace: System.Reflection.Emit
  DNEventBuilder = interface; // type: System.Reflection.Emit.EventBuilder, namespace: System.Reflection.Emit
  DNILGenerator = interface; // type: System.Reflection.Emit.ILGenerator, namespace: System.Reflection.Emit
  DNMethodRental = interface; // type: System.Reflection.Emit.MethodRental, namespace: System.Reflection.Emit
  DNOpCodes = interface; // type: System.Reflection.Emit.OpCodes, namespace: System.Reflection.Emit
  DNParameterBuilder = interface; // type: System.Reflection.Emit.ParameterBuilder, namespace: System.Reflection.Emit
  DNSignatureHelper = interface; // type: System.Reflection.Emit.SignatureHelper, namespace: System.Reflection.Emit
  DNUnmanagedMarshal = interface; // type: System.Reflection.Emit.UnmanagedMarshal, namespace: System.Reflection.Emit
  DNExceptionHandlingClause = interface; // type: System.Reflection.ExceptionHandlingClause, namespace: System.Reflection
  DNIntrospectionExtensions = interface; // type: System.Reflection.IntrospectionExtensions, namespace: System.Reflection
  DNLocalVariableInfo = interface; // type: System.Reflection.LocalVariableInfo, namespace: System.Reflection
  DNLocalBuilder = interface; // type: System.Reflection.Emit.LocalBuilder, namespace: System.Reflection.Emit
  DNManifestResourceInfo = interface; // type: System.Reflection.ManifestResourceInfo, namespace: System.Reflection
  DNMemberInfo = interface; // type: System.Reflection.MemberInfo, namespace: System.Reflection
  DNEventInfo = interface; // type: System.Reflection.EventInfo, namespace: System.Reflection
  DNFieldInfo = interface; // type: System.Reflection.FieldInfo, namespace: System.Reflection
  DNFieldBuilder = interface; // type: System.Reflection.Emit.FieldBuilder, namespace: System.Reflection.Emit
  DNMethodBase = interface; // type: System.Reflection.MethodBase, namespace: System.Reflection
  DNConstructorInfo = interface; // type: System.Reflection.ConstructorInfo, namespace: System.Reflection
  DNConstructorBuilder = interface; // type: System.Reflection.Emit.ConstructorBuilder, namespace: System.Reflection.Emit
  DNMethodInfo = interface; // type: System.Reflection.MethodInfo, namespace: System.Reflection
  DNDynamicMethod = interface; // type: System.Reflection.Emit.DynamicMethod, namespace: System.Reflection.Emit
  DNMethodBuilder = interface; // type: System.Reflection.Emit.MethodBuilder, namespace: System.Reflection.Emit
  DNPropertyInfo = interface; // type: System.Reflection.PropertyInfo, namespace: System.Reflection
  DNPropertyBuilder = interface; // type: System.Reflection.Emit.PropertyBuilder, namespace: System.Reflection.Emit
  DNType = interface; // type: System.Type, namespace: System
  DNTypeInfo = interface; // type: System.Reflection.TypeInfo, namespace: System.Reflection
  DNEnumBuilder = interface; // type: System.Reflection.Emit.EnumBuilder, namespace: System.Reflection.Emit
  DNGenericTypeParameterBuilder = interface; // type: System.Reflection.Emit.GenericTypeParameterBuilder, namespace: System.Reflection.Emit
  DNTypeBuilder = interface; // type: System.Reflection.Emit.TypeBuilder, namespace: System.Reflection.Emit
  DNTypeDelegator = interface; // type: System.Reflection.TypeDelegator, namespace: System.Reflection
  DNMethodBody = interface; // type: System.Reflection.MethodBody, namespace: System.Reflection
  DNMissing = interface; // type: System.Reflection.Missing, namespace: System.Reflection
  DNModule = interface; // type: System.Reflection.Module, namespace: System.Reflection
  DNModuleBuilder = interface; // type: System.Reflection.Emit.ModuleBuilder, namespace: System.Reflection.Emit
  DNParameterInfo = interface; // type: System.Reflection.ParameterInfo, namespace: System.Reflection
  DNPointer = interface; // type: System.Reflection.Pointer, namespace: System.Reflection
  DNReflectionContext = interface; // type: System.Reflection.ReflectionContext, namespace: System.Reflection
  DNRuntimeReflectionExtensions = interface; // type: System.Reflection.RuntimeReflectionExtensions, namespace: System.Reflection
  DNStrongNameKeyPair = interface; // type: System.Reflection.StrongNameKeyPair, namespace: System.Reflection
  DNResourceManager = interface; // type: System.Resources.ResourceManager, namespace: System.Resources
  DNResourceReader = interface; // type: System.Resources.ResourceReader, namespace: System.Resources
  DNResourceSet = interface; // type: System.Resources.ResourceSet, namespace: System.Resources
  DNResourceWriter = interface; // type: System.Resources.ResourceWriter, namespace: System.Resources
  DNCallConvCdecl = interface; // type: System.Runtime.CompilerServices.CallConvCdecl, namespace: System.Runtime.CompilerServices
  DNCallConvFastcall = interface; // type: System.Runtime.CompilerServices.CallConvFastcall, namespace: System.Runtime.CompilerServices
  DNCallConvStdcall = interface; // type: System.Runtime.CompilerServices.CallConvStdcall, namespace: System.Runtime.CompilerServices
  DNCallConvThiscall = interface; // type: System.Runtime.CompilerServices.CallConvThiscall, namespace: System.Runtime.CompilerServices
  DNCompilerMarshalOverride = interface; // type: System.Runtime.CompilerServices.CompilerMarshalOverride, namespace: System.Runtime.CompilerServices
  DNConditionalWeakTable<TKey, TValue> = interface; // type: System.Runtime.CompilerServices.ConditionalWeakTable`2, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ContractHelper = interface; // type: System.Runtime.CompilerServices.ContractHelper, namespace: System.Runtime.CompilerServices
  DNFormattableStringFactory = interface; // type: System.Runtime.CompilerServices.FormattableStringFactory, namespace: System.Runtime.CompilerServices
  DNIsBoxed = interface; // type: System.Runtime.CompilerServices.IsBoxed, namespace: System.Runtime.CompilerServices
  DNIsByValue = interface; // type: System.Runtime.CompilerServices.IsByValue, namespace: System.Runtime.CompilerServices
  DNIsConst = interface; // type: System.Runtime.CompilerServices.IsConst, namespace: System.Runtime.CompilerServices
  DNIsCopyConstructed = interface; // type: System.Runtime.CompilerServices.IsCopyConstructed, namespace: System.Runtime.CompilerServices
  DNIsExplicitlyDereferenced = interface; // type: System.Runtime.CompilerServices.IsExplicitlyDereferenced, namespace: System.Runtime.CompilerServices
  DNIsImplicitlyDereferenced = interface; // type: System.Runtime.CompilerServices.IsImplicitlyDereferenced, namespace: System.Runtime.CompilerServices
  DNIsJitIntrinsic = interface; // type: System.Runtime.CompilerServices.IsJitIntrinsic, namespace: System.Runtime.CompilerServices
  DNIsLong = interface; // type: System.Runtime.CompilerServices.IsLong, namespace: System.Runtime.CompilerServices
  DNIsPinned = interface; // type: System.Runtime.CompilerServices.IsPinned, namespace: System.Runtime.CompilerServices
  DNIsSignUnspecifiedByte = interface; // type: System.Runtime.CompilerServices.IsSignUnspecifiedByte, namespace: System.Runtime.CompilerServices
  DNIsUdtReturn = interface; // type: System.Runtime.CompilerServices.IsUdtReturn, namespace: System.Runtime.CompilerServices
  DNIsVolatile = interface; // type: System.Runtime.CompilerServices.IsVolatile, namespace: System.Runtime.CompilerServices
  DNRuntimeFeature = interface; // type: System.Runtime.CompilerServices.RuntimeFeature, namespace: System.Runtime.CompilerServices
  DNRuntimeHelpers = interface; // type: System.Runtime.CompilerServices.RuntimeHelpers, namespace: System.Runtime.CompilerServices
  DNCriticalFinalizerObject = interface; // type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject, namespace: System.Runtime.ConstrainedExecution
  DNCriticalHandle = interface; // type: System.Runtime.InteropServices.CriticalHandle, namespace: System.Runtime.InteropServices
  DNCriticalHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandle = interface; // type: System.Runtime.InteropServices.SafeHandle, namespace: System.Runtime.InteropServices
  DNSafeAccessTokenHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeFileHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeFileHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeRegistryHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeRegistryHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeWaitHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeWaitHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeBuffer = interface; // type: System.Runtime.InteropServices.SafeBuffer, namespace: System.Runtime.InteropServices
  DNMemoryFailPoint = interface; // type: System.Runtime.MemoryFailPoint, namespace: System.Runtime
  DNReaderWriterLock = interface; // type: System.Threading.ReaderWriterLock, namespace: System.Threading
  DNThread = interface; // type: System.Threading.Thread, namespace: System.Threading
  DNWindowsRuntimeDesignerContext = interface; // type: System.Runtime.DesignerServices.WindowsRuntimeDesignerContext, namespace: System.Runtime.DesignerServices
  DNExceptionDispatchInfo = interface; // type: System.Runtime.ExceptionServices.ExceptionDispatchInfo, namespace: System.Runtime.ExceptionServices
  DNGCSettings = interface; // type: System.Runtime.GCSettings, namespace: System.Runtime
  DNApplicationActivator = interface; // type: System.Runtime.Hosting.ApplicationActivator, namespace: System.Runtime.Hosting
  DNBStrWrapper = interface; // type: System.Runtime.InteropServices.BStrWrapper, namespace: System.Runtime.InteropServices
  DNComEventsHelper = interface; // type: System.Runtime.InteropServices.ComEventsHelper, namespace: System.Runtime.InteropServices
  DNCurrencyWrapper = interface; // type: System.Runtime.InteropServices.CurrencyWrapper, namespace: System.Runtime.InteropServices
  DNDispatchWrapper = interface; // type: System.Runtime.InteropServices.DispatchWrapper, namespace: System.Runtime.InteropServices
  DNErrorWrapper = interface; // type: System.Runtime.InteropServices.ErrorWrapper, namespace: System.Runtime.InteropServices
  DNExtensibleClassFactory = interface; // type: System.Runtime.InteropServices.ExtensibleClassFactory, namespace: System.Runtime.InteropServices
  DNMarshal = interface; // type: System.Runtime.InteropServices.Marshal, namespace: System.Runtime.InteropServices
  DNRegistrationServices = interface; // type: System.Runtime.InteropServices.RegistrationServices, namespace: System.Runtime.InteropServices
  DNRuntimeEnvironment = interface; // type: System.Runtime.InteropServices.RuntimeEnvironment, namespace: System.Runtime.InteropServices
  DNRuntimeInformation = interface; // type: System.Runtime.InteropServices.RuntimeInformation, namespace: System.Runtime.InteropServices
  DNTypeLibConverter = interface; // type: System.Runtime.InteropServices.TypeLibConverter, namespace: System.Runtime.InteropServices
  DNUnknownWrapper = interface; // type: System.Runtime.InteropServices.UnknownWrapper, namespace: System.Runtime.InteropServices
  DNVariantWrapper = interface; // type: System.Runtime.InteropServices.VariantWrapper, namespace: System.Runtime.InteropServices
  DNEventRegistrationTokenTable<T> = interface; // type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWindowsRuntimeMarshal = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWindowsRuntimeMetadata = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMetadata, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNProfileOptimization = interface; // type: System.Runtime.ProfileOptimization, namespace: System.Runtime
  DNBaseChannelObjectWithProperties = interface; // type: System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties, namespace: System.Runtime.Remoting.Channels
  DNBaseChannelSinkWithProperties = interface; // type: System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties, namespace: System.Runtime.Remoting.Channels
  DNBaseChannelWithProperties = interface; // type: System.Runtime.Remoting.Channels.BaseChannelWithProperties, namespace: System.Runtime.Remoting.Channels
  DNChannelDataStore = interface; // type: System.Runtime.Remoting.Channels.ChannelDataStore, namespace: System.Runtime.Remoting.Channels
  DNChannelServices = interface; // type: System.Runtime.Remoting.Channels.ChannelServices, namespace: System.Runtime.Remoting.Channels
  DNClientChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.ClientChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNServerChannelSinkStack = interface; // type: System.Runtime.Remoting.Channels.ServerChannelSinkStack, namespace: System.Runtime.Remoting.Channels
  DNSinkProviderData = interface; // type: System.Runtime.Remoting.Channels.SinkProviderData, namespace: System.Runtime.Remoting.Channels
  DNTransportHeaders = interface; // type: System.Runtime.Remoting.Channels.TransportHeaders, namespace: System.Runtime.Remoting.Channels
  DNContext = interface; // type: System.Runtime.Remoting.Contexts.Context, namespace: System.Runtime.Remoting.Contexts
  DNContextProperty = interface; // type: System.Runtime.Remoting.Contexts.ContextProperty, namespace: System.Runtime.Remoting.Contexts
  DNInternalRemotingServices = interface; // type: System.Runtime.Remoting.InternalRemotingServices, namespace: System.Runtime.Remoting
  DNLifetimeServices = interface; // type: System.Runtime.Remoting.Lifetime.LifetimeServices, namespace: System.Runtime.Remoting.Lifetime
  DNAsyncResult = interface; // type: System.Runtime.Remoting.Messaging.AsyncResult, namespace: System.Runtime.Remoting.Messaging
  DNCallContext = interface; // type: System.Runtime.Remoting.Messaging.CallContext, namespace: System.Runtime.Remoting.Messaging
  DNHeader = interface; // type: System.Runtime.Remoting.Messaging.Header, namespace: System.Runtime.Remoting.Messaging
  DNInternalMessageWrapper = interface; // type: System.Runtime.Remoting.Messaging.InternalMessageWrapper, namespace: System.Runtime.Remoting.Messaging
  DNMethodCallMessageWrapper = interface; // type: System.Runtime.Remoting.Messaging.MethodCallMessageWrapper, namespace: System.Runtime.Remoting.Messaging
  DNMethodReturnMessageWrapper = interface; // type: System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper, namespace: System.Runtime.Remoting.Messaging
  DNLogicalCallContext = interface; // type: System.Runtime.Remoting.Messaging.LogicalCallContext, namespace: System.Runtime.Remoting.Messaging
  DNMethodCall = interface; // type: System.Runtime.Remoting.Messaging.MethodCall, namespace: System.Runtime.Remoting.Messaging
  DNConstructionCall = interface; // type: System.Runtime.Remoting.Messaging.ConstructionCall, namespace: System.Runtime.Remoting.Messaging
  DNMethodResponse = interface; // type: System.Runtime.Remoting.Messaging.MethodResponse, namespace: System.Runtime.Remoting.Messaging
  DNConstructionResponse = interface; // type: System.Runtime.Remoting.Messaging.ConstructionResponse, namespace: System.Runtime.Remoting.Messaging
  DNRemotingSurrogateSelector = interface; // type: System.Runtime.Remoting.Messaging.RemotingSurrogateSelector, namespace: System.Runtime.Remoting.Messaging
  DNReturnMessage = interface; // type: System.Runtime.Remoting.Messaging.ReturnMessage, namespace: System.Runtime.Remoting.Messaging
  DNSoapAnyUri = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapBase64Binary = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDate = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDateTime = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDay = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapDuration = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapEntities = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapEntity = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapHexBinary = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapId = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapIdref = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapIdrefs = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapLanguage = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapMonth = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapMonthDay = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapName = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNcName = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNegativeInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNmtoken = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNmtokens = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNonNegativeInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNonPositiveInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNormalizedString = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapNotation = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapPositiveInteger = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapQName = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapTime = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapToken = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapYear = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNSoapYearMonth = interface; // type: System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth, namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
  DNObjRef = interface; // type: System.Runtime.Remoting.ObjRef, namespace: System.Runtime.Remoting
  DNRealProxy = interface; // type: System.Runtime.Remoting.Proxies.RealProxy, namespace: System.Runtime.Remoting.Proxies
  DNRemotingConfiguration = interface; // type: System.Runtime.Remoting.RemotingConfiguration, namespace: System.Runtime.Remoting
  DNRemotingServices = interface; // type: System.Runtime.Remoting.RemotingServices, namespace: System.Runtime.Remoting
  DNEnterpriseServicesHelper = interface; // type: System.Runtime.Remoting.Services.EnterpriseServicesHelper, namespace: System.Runtime.Remoting.Services
  DNTrackingServices = interface; // type: System.Runtime.Remoting.Services.TrackingServices, namespace: System.Runtime.Remoting.Services
  DNSoapServices = interface; // type: System.Runtime.Remoting.SoapServices, namespace: System.Runtime.Remoting
  DNTypeEntry = interface; // type: System.Runtime.Remoting.TypeEntry, namespace: System.Runtime.Remoting
  DNActivatedClientTypeEntry = interface; // type: System.Runtime.Remoting.ActivatedClientTypeEntry, namespace: System.Runtime.Remoting
  DNActivatedServiceTypeEntry = interface; // type: System.Runtime.Remoting.ActivatedServiceTypeEntry, namespace: System.Runtime.Remoting
  DNWellKnownClientTypeEntry = interface; // type: System.Runtime.Remoting.WellKnownClientTypeEntry, namespace: System.Runtime.Remoting
  DNWellKnownServiceTypeEntry = interface; // type: System.Runtime.Remoting.WellKnownServiceTypeEntry, namespace: System.Runtime.Remoting
  DNFormatter = interface; // type: System.Runtime.Serialization.Formatter, namespace: System.Runtime.Serialization
  DNFormatterConverter = interface; // type: System.Runtime.Serialization.FormatterConverter, namespace: System.Runtime.Serialization
  DNBinaryFormatter = interface; // type: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter, namespace: System.Runtime.Serialization.Formatters.Binary
  DNInternalRM = interface; // type: System.Runtime.Serialization.Formatters.InternalRM, namespace: System.Runtime.Serialization.Formatters
  DNInternalST = interface; // type: System.Runtime.Serialization.Formatters.InternalST, namespace: System.Runtime.Serialization.Formatters
  DNServerFault = interface; // type: System.Runtime.Serialization.Formatters.ServerFault, namespace: System.Runtime.Serialization.Formatters
  DNSoapFault = interface; // type: System.Runtime.Serialization.Formatters.SoapFault, namespace: System.Runtime.Serialization.Formatters
  DNSoapMessage = interface; // type: System.Runtime.Serialization.Formatters.SoapMessage, namespace: System.Runtime.Serialization.Formatters
  DNFormatterServices = interface; // type: System.Runtime.Serialization.FormatterServices, namespace: System.Runtime.Serialization
  DNObjectIDGenerator = interface; // type: System.Runtime.Serialization.ObjectIDGenerator, namespace: System.Runtime.Serialization
  DNObjectManager = interface; // type: System.Runtime.Serialization.ObjectManager, namespace: System.Runtime.Serialization
  DNSerializationBinder = interface; // type: System.Runtime.Serialization.SerializationBinder, namespace: System.Runtime.Serialization
  DNSerializationInfo = interface; // type: System.Runtime.Serialization.SerializationInfo, namespace: System.Runtime.Serialization
  DNSerializationInfoEnumerator = interface; // type: System.Runtime.Serialization.SerializationInfoEnumerator, namespace: System.Runtime.Serialization
  DNSerializationObjectManager = interface; // type: System.Runtime.Serialization.SerializationObjectManager, namespace: System.Runtime.Serialization
  DNSurrogateSelector = interface; // type: System.Runtime.Serialization.SurrogateSelector, namespace: System.Runtime.Serialization
  DNCompatibilitySwitch = interface; // type: System.Runtime.Versioning.CompatibilitySwitch, namespace: System.Runtime.Versioning
  DNVersioningHelper = interface; // type: System.Runtime.Versioning.VersioningHelper, namespace: System.Runtime.Versioning
  DNAceEnumerator = interface; // type: System.Security.AccessControl.AceEnumerator, namespace: System.Security.AccessControl
  DNAuthorizationRule = interface; // type: System.Security.AccessControl.AuthorizationRule, namespace: System.Security.AccessControl
  DNAccessRule = interface; // type: System.Security.AccessControl.AccessRule, namespace: System.Security.AccessControl
  DNAccessRule<T> = interface; // type: System.Security.AccessControl.AccessRule`1, namespace: System.Security.AccessControl
  DNCryptoKeyAccessRule = interface; // type: System.Security.AccessControl.CryptoKeyAccessRule, namespace: System.Security.AccessControl
  DNEventWaitHandleAccessRule = interface; // type: System.Security.AccessControl.EventWaitHandleAccessRule, namespace: System.Security.AccessControl
  DNFileSystemAccessRule = interface; // type: System.Security.AccessControl.FileSystemAccessRule, namespace: System.Security.AccessControl
  DNMutexAccessRule = interface; // type: System.Security.AccessControl.MutexAccessRule, namespace: System.Security.AccessControl
  DNObjectAccessRule = interface; // type: System.Security.AccessControl.ObjectAccessRule, namespace: System.Security.AccessControl
  DNRegistryAccessRule = interface; // type: System.Security.AccessControl.RegistryAccessRule, namespace: System.Security.AccessControl
  DNAuditRule = interface; // type: System.Security.AccessControl.AuditRule, namespace: System.Security.AccessControl
  DNAuditRule<T> = interface; // type: System.Security.AccessControl.AuditRule`1, namespace: System.Security.AccessControl
  DNCryptoKeyAuditRule = interface; // type: System.Security.AccessControl.CryptoKeyAuditRule, namespace: System.Security.AccessControl
  DNEventWaitHandleAuditRule = interface; // type: System.Security.AccessControl.EventWaitHandleAuditRule, namespace: System.Security.AccessControl
  DNFileSystemAuditRule = interface; // type: System.Security.AccessControl.FileSystemAuditRule, namespace: System.Security.AccessControl
  DNMutexAuditRule = interface; // type: System.Security.AccessControl.MutexAuditRule, namespace: System.Security.AccessControl
  DNObjectAuditRule = interface; // type: System.Security.AccessControl.ObjectAuditRule, namespace: System.Security.AccessControl
  DNRegistryAuditRule = interface; // type: System.Security.AccessControl.RegistryAuditRule, namespace: System.Security.AccessControl
  DNGenericAce = interface; // type: System.Security.AccessControl.GenericAce, namespace: System.Security.AccessControl
  DNCustomAce = interface; // type: System.Security.AccessControl.CustomAce, namespace: System.Security.AccessControl
  DNKnownAce = interface; // type: System.Security.AccessControl.KnownAce, namespace: System.Security.AccessControl
  DNCompoundAce = interface; // type: System.Security.AccessControl.CompoundAce, namespace: System.Security.AccessControl
  DNQualifiedAce = interface; // type: System.Security.AccessControl.QualifiedAce, namespace: System.Security.AccessControl
  DNCommonAce = interface; // type: System.Security.AccessControl.CommonAce, namespace: System.Security.AccessControl
  DNObjectAce = interface; // type: System.Security.AccessControl.ObjectAce, namespace: System.Security.AccessControl
  DNGenericAcl = interface; // type: System.Security.AccessControl.GenericAcl, namespace: System.Security.AccessControl
  DNCommonAcl = interface; // type: System.Security.AccessControl.CommonAcl, namespace: System.Security.AccessControl
  DNDiscretionaryAcl = interface; // type: System.Security.AccessControl.DiscretionaryAcl, namespace: System.Security.AccessControl
  DNSystemAcl = interface; // type: System.Security.AccessControl.SystemAcl, namespace: System.Security.AccessControl
  DNRawAcl = interface; // type: System.Security.AccessControl.RawAcl, namespace: System.Security.AccessControl
  DNGenericSecurityDescriptor = interface; // type: System.Security.AccessControl.GenericSecurityDescriptor, namespace: System.Security.AccessControl
  DNCommonSecurityDescriptor = interface; // type: System.Security.AccessControl.CommonSecurityDescriptor, namespace: System.Security.AccessControl
  DNRawSecurityDescriptor = interface; // type: System.Security.AccessControl.RawSecurityDescriptor, namespace: System.Security.AccessControl
  DNObjectSecurity = interface; // type: System.Security.AccessControl.ObjectSecurity, namespace: System.Security.AccessControl
  DNCommonObjectSecurity = interface; // type: System.Security.AccessControl.CommonObjectSecurity, namespace: System.Security.AccessControl
  DNNativeObjectSecurity = interface; // type: System.Security.AccessControl.NativeObjectSecurity, namespace: System.Security.AccessControl
  DNCryptoKeySecurity = interface; // type: System.Security.AccessControl.CryptoKeySecurity, namespace: System.Security.AccessControl
  DNEventWaitHandleSecurity = interface; // type: System.Security.AccessControl.EventWaitHandleSecurity, namespace: System.Security.AccessControl
  DNFileSystemSecurity = interface; // type: System.Security.AccessControl.FileSystemSecurity, namespace: System.Security.AccessControl
  DNDirectorySecurity = interface; // type: System.Security.AccessControl.DirectorySecurity, namespace: System.Security.AccessControl
  DNFileSecurity = interface; // type: System.Security.AccessControl.FileSecurity, namespace: System.Security.AccessControl
  DNMutexSecurity = interface; // type: System.Security.AccessControl.MutexSecurity, namespace: System.Security.AccessControl
  DNObjectSecurity<T> = interface; // type: System.Security.AccessControl.ObjectSecurity`1, namespace: System.Security.AccessControl
  DNRegistrySecurity = interface; // type: System.Security.AccessControl.RegistrySecurity, namespace: System.Security.AccessControl
  DNDirectoryObjectSecurity = interface; // type: System.Security.AccessControl.DirectoryObjectSecurity, namespace: System.Security.AccessControl
  DNClaim = interface; // type: System.Security.Claims.Claim, namespace: System.Security.Claims
  DNClaimsIdentity = interface; // type: System.Security.Claims.ClaimsIdentity, namespace: System.Security.Claims
  DNGenericIdentity = interface; // type: System.Security.Principal.GenericIdentity, namespace: System.Security.Principal
  DNWindowsIdentity = interface; // type: System.Security.Principal.WindowsIdentity, namespace: System.Security.Principal
  DNClaimsPrincipal = interface; // type: System.Security.Claims.ClaimsPrincipal, namespace: System.Security.Claims
  DNGenericPrincipal = interface; // type: System.Security.Principal.GenericPrincipal, namespace: System.Security.Principal
  DNWindowsPrincipal = interface; // type: System.Security.Principal.WindowsPrincipal, namespace: System.Security.Principal
  DNClaimTypes = interface; // type: System.Security.Claims.ClaimTypes, namespace: System.Security.Claims
  DNClaimValueTypes = interface; // type: System.Security.Claims.ClaimValueTypes, namespace: System.Security.Claims
  DNCodeAccessPermission = interface; // type: System.Security.CodeAccessPermission, namespace: System.Security
  DNEnvironmentPermission = interface; // type: System.Security.Permissions.EnvironmentPermission, namespace: System.Security.Permissions
  DNFileDialogPermission = interface; // type: System.Security.Permissions.FileDialogPermission, namespace: System.Security.Permissions
  DNFileIOPermission = interface; // type: System.Security.Permissions.FileIOPermission, namespace: System.Security.Permissions
  DNGacIdentityPermission = interface; // type: System.Security.Permissions.GacIdentityPermission, namespace: System.Security.Permissions
  DNIsolatedStoragePermission = interface; // type: System.Security.Permissions.IsolatedStoragePermission, namespace: System.Security.Permissions
  DNIsolatedStorageFilePermission = interface; // type: System.Security.Permissions.IsolatedStorageFilePermission, namespace: System.Security.Permissions
  DNKeyContainerPermission = interface; // type: System.Security.Permissions.KeyContainerPermission, namespace: System.Security.Permissions
  DNPublisherIdentityPermission = interface; // type: System.Security.Permissions.PublisherIdentityPermission, namespace: System.Security.Permissions
  DNReflectionPermission = interface; // type: System.Security.Permissions.ReflectionPermission, namespace: System.Security.Permissions
  DNRegistryPermission = interface; // type: System.Security.Permissions.RegistryPermission, namespace: System.Security.Permissions
  DNSecurityPermission = interface; // type: System.Security.Permissions.SecurityPermission, namespace: System.Security.Permissions
  DNSiteIdentityPermission = interface; // type: System.Security.Permissions.SiteIdentityPermission, namespace: System.Security.Permissions
  DNStrongNameIdentityPermission = interface; // type: System.Security.Permissions.StrongNameIdentityPermission, namespace: System.Security.Permissions
  DNUIPermission = interface; // type: System.Security.Permissions.UIPermission, namespace: System.Security.Permissions
  DNUrlIdentityPermission = interface; // type: System.Security.Permissions.UrlIdentityPermission, namespace: System.Security.Permissions
  DNZoneIdentityPermission = interface; // type: System.Security.Permissions.ZoneIdentityPermission, namespace: System.Security.Permissions
  DNAsymmetricAlgorithm = interface; // type: System.Security.Cryptography.AsymmetricAlgorithm, namespace: System.Security.Cryptography
  DNDSA = interface; // type: System.Security.Cryptography.DSA, namespace: System.Security.Cryptography
  DNDSACryptoServiceProvider = interface; // type: System.Security.Cryptography.DSACryptoServiceProvider, namespace: System.Security.Cryptography
  DNRSA = interface; // type: System.Security.Cryptography.RSA, namespace: System.Security.Cryptography
  DNRSACryptoServiceProvider = interface; // type: System.Security.Cryptography.RSACryptoServiceProvider, namespace: System.Security.Cryptography
  DNAsymmetricKeyExchangeDeformatter = interface; // type: System.Security.Cryptography.AsymmetricKeyExchangeDeformatter, namespace: System.Security.Cryptography
  DNRSAOAEPKeyExchangeDeformatter = interface; // type: System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter, namespace: System.Security.Cryptography
  DNRSAPKCS1KeyExchangeDeformatter = interface; // type: System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter, namespace: System.Security.Cryptography
  DNAsymmetricKeyExchangeFormatter = interface; // type: System.Security.Cryptography.AsymmetricKeyExchangeFormatter, namespace: System.Security.Cryptography
  DNRSAOAEPKeyExchangeFormatter = interface; // type: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter, namespace: System.Security.Cryptography
  DNRSAPKCS1KeyExchangeFormatter = interface; // type: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter, namespace: System.Security.Cryptography
  DNAsymmetricSignatureDeformatter = interface; // type: System.Security.Cryptography.AsymmetricSignatureDeformatter, namespace: System.Security.Cryptography
  DNDSASignatureDeformatter = interface; // type: System.Security.Cryptography.DSASignatureDeformatter, namespace: System.Security.Cryptography
  DNRSAPKCS1SignatureDeformatter = interface; // type: System.Security.Cryptography.RSAPKCS1SignatureDeformatter, namespace: System.Security.Cryptography
  DNAsymmetricSignatureFormatter = interface; // type: System.Security.Cryptography.AsymmetricSignatureFormatter, namespace: System.Security.Cryptography
  DNDSASignatureFormatter = interface; // type: System.Security.Cryptography.DSASignatureFormatter, namespace: System.Security.Cryptography
  DNRSAPKCS1SignatureFormatter = interface; // type: System.Security.Cryptography.RSAPKCS1SignatureFormatter, namespace: System.Security.Cryptography
  DNCryptoAPITransform = interface; // type: System.Security.Cryptography.CryptoAPITransform, namespace: System.Security.Cryptography
  DNCryptoConfig = interface; // type: System.Security.Cryptography.CryptoConfig, namespace: System.Security.Cryptography
  DNCspKeyContainerInfo = interface; // type: System.Security.Cryptography.CspKeyContainerInfo, namespace: System.Security.Cryptography
  DNCspParameters = interface; // type: System.Security.Cryptography.CspParameters, namespace: System.Security.Cryptography
  DNDeriveBytes = interface; // type: System.Security.Cryptography.DeriveBytes, namespace: System.Security.Cryptography
  DNPasswordDeriveBytes = interface; // type: System.Security.Cryptography.PasswordDeriveBytes, namespace: System.Security.Cryptography
  DNRfc2898DeriveBytes = interface; // type: System.Security.Cryptography.Rfc2898DeriveBytes, namespace: System.Security.Cryptography
  DNFromBase64Transform = interface; // type: System.Security.Cryptography.FromBase64Transform, namespace: System.Security.Cryptography
  DNHashAlgorithm = interface; // type: System.Security.Cryptography.HashAlgorithm, namespace: System.Security.Cryptography
  DNKeyedHashAlgorithm = interface; // type: System.Security.Cryptography.KeyedHashAlgorithm, namespace: System.Security.Cryptography
  DNHMAC = interface; // type: System.Security.Cryptography.HMAC, namespace: System.Security.Cryptography
  DNHMACMD5 = interface; // type: System.Security.Cryptography.HMACMD5, namespace: System.Security.Cryptography
  DNHMACRIPEMD160 = interface; // type: System.Security.Cryptography.HMACRIPEMD160, namespace: System.Security.Cryptography
  DNHMACSHA1 = interface; // type: System.Security.Cryptography.HMACSHA1, namespace: System.Security.Cryptography
  DNHMACSHA256 = interface; // type: System.Security.Cryptography.HMACSHA256, namespace: System.Security.Cryptography
  DNHMACSHA384 = interface; // type: System.Security.Cryptography.HMACSHA384, namespace: System.Security.Cryptography
  DNHMACSHA512 = interface; // type: System.Security.Cryptography.HMACSHA512, namespace: System.Security.Cryptography
  DNMACTripleDES = interface; // type: System.Security.Cryptography.MACTripleDES, namespace: System.Security.Cryptography
  DNMD5 = interface; // type: System.Security.Cryptography.MD5, namespace: System.Security.Cryptography
  DNMD5CryptoServiceProvider = interface; // type: System.Security.Cryptography.MD5CryptoServiceProvider, namespace: System.Security.Cryptography
  DNRIPEMD160 = interface; // type: System.Security.Cryptography.RIPEMD160, namespace: System.Security.Cryptography
  DNRIPEMD160Managed = interface; // type: System.Security.Cryptography.RIPEMD160Managed, namespace: System.Security.Cryptography
  DNSHA1 = interface; // type: System.Security.Cryptography.SHA1, namespace: System.Security.Cryptography
  DNSHA1CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA1CryptoServiceProvider, namespace: System.Security.Cryptography
  DNSHA1Managed = interface; // type: System.Security.Cryptography.SHA1Managed, namespace: System.Security.Cryptography
  DNSHA256 = interface; // type: System.Security.Cryptography.SHA256, namespace: System.Security.Cryptography
  DNSHA256Managed = interface; // type: System.Security.Cryptography.SHA256Managed, namespace: System.Security.Cryptography
  DNSHA384 = interface; // type: System.Security.Cryptography.SHA384, namespace: System.Security.Cryptography
  DNSHA384Managed = interface; // type: System.Security.Cryptography.SHA384Managed, namespace: System.Security.Cryptography
  DNSHA512 = interface; // type: System.Security.Cryptography.SHA512, namespace: System.Security.Cryptography
  DNSHA512Managed = interface; // type: System.Security.Cryptography.SHA512Managed, namespace: System.Security.Cryptography
  DNKeySizes = interface; // type: System.Security.Cryptography.KeySizes, namespace: System.Security.Cryptography
  DNMaskGenerationMethod = interface; // type: System.Security.Cryptography.MaskGenerationMethod, namespace: System.Security.Cryptography
  DNPKCS1MaskGenerationMethod = interface; // type: System.Security.Cryptography.PKCS1MaskGenerationMethod, namespace: System.Security.Cryptography
  DNRandomNumberGenerator = interface; // type: System.Security.Cryptography.RandomNumberGenerator, namespace: System.Security.Cryptography
  DNRNGCryptoServiceProvider = interface; // type: System.Security.Cryptography.RNGCryptoServiceProvider, namespace: System.Security.Cryptography
  DNRijndaelManagedTransform = interface; // type: System.Security.Cryptography.RijndaelManagedTransform, namespace: System.Security.Cryptography
  DNRSAEncryptionPadding = interface; // type: System.Security.Cryptography.RSAEncryptionPadding, namespace: System.Security.Cryptography
  DNRSASignaturePadding = interface; // type: System.Security.Cryptography.RSASignaturePadding, namespace: System.Security.Cryptography
  DNSignatureDescription = interface; // type: System.Security.Cryptography.SignatureDescription, namespace: System.Security.Cryptography
  DNSymmetricAlgorithm = interface; // type: System.Security.Cryptography.SymmetricAlgorithm, namespace: System.Security.Cryptography
  DNAes = interface; // type: System.Security.Cryptography.Aes, namespace: System.Security.Cryptography
  DNDES = interface; // type: System.Security.Cryptography.DES, namespace: System.Security.Cryptography
  DNDESCryptoServiceProvider = interface; // type: System.Security.Cryptography.DESCryptoServiceProvider, namespace: System.Security.Cryptography
  DNRC2 = interface; // type: System.Security.Cryptography.RC2, namespace: System.Security.Cryptography
  DNRC2CryptoServiceProvider = interface; // type: System.Security.Cryptography.RC2CryptoServiceProvider, namespace: System.Security.Cryptography
  DNRijndael = interface; // type: System.Security.Cryptography.Rijndael, namespace: System.Security.Cryptography
  DNRijndaelManaged = interface; // type: System.Security.Cryptography.RijndaelManaged, namespace: System.Security.Cryptography
  DNTripleDES = interface; // type: System.Security.Cryptography.TripleDES, namespace: System.Security.Cryptography
  DNTripleDESCryptoServiceProvider = interface; // type: System.Security.Cryptography.TripleDESCryptoServiceProvider, namespace: System.Security.Cryptography
  DNToBase64Transform = interface; // type: System.Security.Cryptography.ToBase64Transform, namespace: System.Security.Cryptography
  DNX509Certificate = interface; // type: System.Security.Cryptography.X509Certificates.X509Certificate, namespace: System.Security.Cryptography.X509Certificates
  DNHostSecurityManager = interface; // type: System.Security.HostSecurityManager, namespace: System.Security
  DNKeyContainerPermissionAccessEntry = interface; // type: System.Security.Permissions.KeyContainerPermissionAccessEntry, namespace: System.Security.Permissions
  DNKeyContainerPermissionAccessEntryCollection = interface; // type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection, namespace: System.Security.Permissions
  DNKeyContainerPermissionAccessEntryEnumerator = interface; // type: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator, namespace: System.Security.Permissions
  DNPrincipalPermission = interface; // type: System.Security.Permissions.PrincipalPermission, namespace: System.Security.Permissions
  DNStrongNamePublicKeyBlob = interface; // type: System.Security.Permissions.StrongNamePublicKeyBlob, namespace: System.Security.Permissions
  DNPermissionSet = interface; // type: System.Security.PermissionSet, namespace: System.Security
  DNNamedPermissionSet = interface; // type: System.Security.NamedPermissionSet, namespace: System.Security
  DNReadOnlyPermissionSet = interface; // type: System.Security.ReadOnlyPermissionSet, namespace: System.Security
  DNAllMembershipCondition = interface; // type: System.Security.Policy.AllMembershipCondition, namespace: System.Security.Policy
  DNApplicationDirectoryMembershipCondition = interface; // type: System.Security.Policy.ApplicationDirectoryMembershipCondition, namespace: System.Security.Policy
  DNApplicationSecurityInfo = interface; // type: System.Security.Policy.ApplicationSecurityInfo, namespace: System.Security.Policy
  DNApplicationSecurityManager = interface; // type: System.Security.Policy.ApplicationSecurityManager, namespace: System.Security.Policy
  DNApplicationTrustCollection = interface; // type: System.Security.Policy.ApplicationTrustCollection, namespace: System.Security.Policy
  DNApplicationTrustEnumerator = interface; // type: System.Security.Policy.ApplicationTrustEnumerator, namespace: System.Security.Policy
  DNCodeConnectAccess = interface; // type: System.Security.Policy.CodeConnectAccess, namespace: System.Security.Policy
  DNCodeGroup = interface; // type: System.Security.Policy.CodeGroup, namespace: System.Security.Policy
  DNFileCodeGroup = interface; // type: System.Security.Policy.FileCodeGroup, namespace: System.Security.Policy
  DNFirstMatchCodeGroup = interface; // type: System.Security.Policy.FirstMatchCodeGroup, namespace: System.Security.Policy
  DNNetCodeGroup = interface; // type: System.Security.Policy.NetCodeGroup, namespace: System.Security.Policy
  DNUnionCodeGroup = interface; // type: System.Security.Policy.UnionCodeGroup, namespace: System.Security.Policy
  DNEvidence = interface; // type: System.Security.Policy.Evidence, namespace: System.Security.Policy
  DNEvidenceBase = interface; // type: System.Security.Policy.EvidenceBase, namespace: System.Security.Policy
  DNActivationArguments = interface; // type: System.Runtime.Hosting.ActivationArguments, namespace: System.Runtime.Hosting
  DNApplicationDirectory = interface; // type: System.Security.Policy.ApplicationDirectory, namespace: System.Security.Policy
  DNApplicationTrust = interface; // type: System.Security.Policy.ApplicationTrust, namespace: System.Security.Policy
  DNGacInstalled = interface; // type: System.Security.Policy.GacInstalled, namespace: System.Security.Policy
  DNHash = interface; // type: System.Security.Policy.Hash, namespace: System.Security.Policy
  DNPermissionRequestEvidence = interface; // type: System.Security.Policy.PermissionRequestEvidence, namespace: System.Security.Policy
  DNPublisher = interface; // type: System.Security.Policy.Publisher, namespace: System.Security.Policy
  DNSite = interface; // type: System.Security.Policy.Site, namespace: System.Security.Policy
  DNStrongName = interface; // type: System.Security.Policy.StrongName, namespace: System.Security.Policy
  DNUrl = interface; // type: System.Security.Policy.Url, namespace: System.Security.Policy
  DNZone = interface; // type: System.Security.Policy.Zone, namespace: System.Security.Policy
  DNGacMembershipCondition = interface; // type: System.Security.Policy.GacMembershipCondition, namespace: System.Security.Policy
  DNHashMembershipCondition = interface; // type: System.Security.Policy.HashMembershipCondition, namespace: System.Security.Policy
  DNPolicyLevel = interface; // type: System.Security.Policy.PolicyLevel, namespace: System.Security.Policy
  DNPolicyStatement = interface; // type: System.Security.Policy.PolicyStatement, namespace: System.Security.Policy
  DNPublisherMembershipCondition = interface; // type: System.Security.Policy.PublisherMembershipCondition, namespace: System.Security.Policy
  DNSiteMembershipCondition = interface; // type: System.Security.Policy.SiteMembershipCondition, namespace: System.Security.Policy
  DNStrongNameMembershipCondition = interface; // type: System.Security.Policy.StrongNameMembershipCondition, namespace: System.Security.Policy
  DNTrustManagerContext = interface; // type: System.Security.Policy.TrustManagerContext, namespace: System.Security.Policy
  DNUrlMembershipCondition = interface; // type: System.Security.Policy.UrlMembershipCondition, namespace: System.Security.Policy
  DNZoneMembershipCondition = interface; // type: System.Security.Policy.ZoneMembershipCondition, namespace: System.Security.Policy
  DNIdentityReference = interface; // type: System.Security.Principal.IdentityReference, namespace: System.Security.Principal
  DNNTAccount = interface; // type: System.Security.Principal.NTAccount, namespace: System.Security.Principal
  DNSecurityIdentifier = interface; // type: System.Security.Principal.SecurityIdentifier, namespace: System.Security.Principal
  DNIdentityReferenceCollection = interface; // type: System.Security.Principal.IdentityReferenceCollection, namespace: System.Security.Principal
  DNWindowsImpersonationContext = interface; // type: System.Security.Principal.WindowsImpersonationContext, namespace: System.Security.Principal
  DNSecureString = interface; // type: System.Security.SecureString, namespace: System.Security
  DNSecurityContext = interface; // type: System.Security.SecurityContext, namespace: System.Security
  DNSecurityElement = interface; // type: System.Security.SecurityElement, namespace: System.Security
  DNSecurityManager = interface; // type: System.Security.SecurityManager, namespace: System.Security
  DNSecurityState = interface; // type: System.Security.SecurityState, namespace: System.Security
  DNIsolatedStorageSecurityState = interface; // type: System.IO.IsolatedStorage.IsolatedStorageSecurityState, namespace: System.IO.IsolatedStorage
  DNString = interface; // type: System.String, namespace: System
  DNStringComparer = interface; // type: System.StringComparer, namespace: System
  DNDecoder = interface; // type: System.Text.Decoder, namespace: System.Text
  DNDecoderFallback = interface; // type: System.Text.DecoderFallback, namespace: System.Text
  DNDecoderExceptionFallback = interface; // type: System.Text.DecoderExceptionFallback, namespace: System.Text
  DNDecoderReplacementFallback = interface; // type: System.Text.DecoderReplacementFallback, namespace: System.Text
  DNDecoderFallbackBuffer = interface; // type: System.Text.DecoderFallbackBuffer, namespace: System.Text
  DNDecoderExceptionFallbackBuffer = interface; // type: System.Text.DecoderExceptionFallbackBuffer, namespace: System.Text
  DNDecoderReplacementFallbackBuffer = interface; // type: System.Text.DecoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoder = interface; // type: System.Text.Encoder, namespace: System.Text
  DNEncoderFallback = interface; // type: System.Text.EncoderFallback, namespace: System.Text
  DNEncoderExceptionFallback = interface; // type: System.Text.EncoderExceptionFallback, namespace: System.Text
  DNEncoderReplacementFallback = interface; // type: System.Text.EncoderReplacementFallback, namespace: System.Text
  DNEncoderFallbackBuffer = interface; // type: System.Text.EncoderFallbackBuffer, namespace: System.Text
  DNEncoderExceptionFallbackBuffer = interface; // type: System.Text.EncoderExceptionFallbackBuffer, namespace: System.Text
  DNEncoderReplacementFallbackBuffer = interface; // type: System.Text.EncoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoding = interface; // type: System.Text.Encoding, namespace: System.Text
  DNASCIIEncoding = interface; // type: System.Text.ASCIIEncoding, namespace: System.Text
  DNUnicodeEncoding = interface; // type: System.Text.UnicodeEncoding, namespace: System.Text
  DNUTF32Encoding = interface; // type: System.Text.UTF32Encoding, namespace: System.Text
  DNUTF7Encoding = interface; // type: System.Text.UTF7Encoding, namespace: System.Text
  DNUTF8Encoding = interface; // type: System.Text.UTF8Encoding, namespace: System.Text
  DNEncodingInfo = interface; // type: System.Text.EncodingInfo, namespace: System.Text
  DNEncodingProvider = interface; // type: System.Text.EncodingProvider, namespace: System.Text
  DNStringBuilder = interface; // type: System.Text.StringBuilder, namespace: System.Text
  DNAsyncLocal<T> = interface; // type: System.Threading.AsyncLocal`1, namespace: System.Threading
  DNCancellationTokenSource = interface; // type: System.Threading.CancellationTokenSource, namespace: System.Threading
  DNCompressedStack = interface; // type: System.Threading.CompressedStack, namespace: System.Threading
  DNCountdownEvent = interface; // type: System.Threading.CountdownEvent, namespace: System.Threading
  DNExecutionContext = interface; // type: System.Threading.ExecutionContext, namespace: System.Threading
  DNHostExecutionContext = interface; // type: System.Threading.HostExecutionContext, namespace: System.Threading
  DNHostExecutionContextManager = interface; // type: System.Threading.HostExecutionContextManager, namespace: System.Threading
  DNInterlocked = interface; // type: System.Threading.Interlocked, namespace: System.Threading
  DNLazyInitializer = interface; // type: System.Threading.LazyInitializer, namespace: System.Threading
  DNManualResetEventSlim = interface; // type: System.Threading.ManualResetEventSlim, namespace: System.Threading
  DNMonitor = interface; // type: System.Threading.Monitor, namespace: System.Threading
  DNOverlapped = interface; // type: System.Threading.Overlapped, namespace: System.Threading
  DNPreAllocatedOverlapped = interface; // type: System.Threading.PreAllocatedOverlapped, namespace: System.Threading
  DNSemaphoreSlim = interface; // type: System.Threading.SemaphoreSlim, namespace: System.Threading
  DNSynchronizationContext = interface; // type: System.Threading.SynchronizationContext, namespace: System.Threading
  DNConcurrentExclusiveSchedulerPair = interface; // type: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair, namespace: System.Threading.Tasks
  DNParallel = interface; // type: System.Threading.Tasks.Parallel, namespace: System.Threading.Tasks
  DNParallelLoopState = interface; // type: System.Threading.Tasks.ParallelLoopState, namespace: System.Threading.Tasks
  DNParallelOptions = interface; // type: System.Threading.Tasks.ParallelOptions, namespace: System.Threading.Tasks
  DNTask = interface; // type: System.Threading.Tasks.Task, namespace: System.Threading.Tasks
  DNTask<TResult> = interface; // type: System.Threading.Tasks.Task`1, namespace: System.Threading.Tasks
  DNTaskCompletionSource<TResult> = interface; // type: System.Threading.Tasks.TaskCompletionSource`1, namespace: System.Threading.Tasks
  DNTaskFactory<TResult> = interface; // type: System.Threading.Tasks.TaskFactory`1, namespace: System.Threading.Tasks
  DNTaskFactory = interface; // type: System.Threading.Tasks.TaskFactory, namespace: System.Threading.Tasks
  DNTaskScheduler = interface; // type: System.Threading.Tasks.TaskScheduler, namespace: System.Threading.Tasks
  DNThreadLocal<T> = interface; // type: System.Threading.ThreadLocal`1, namespace: System.Threading
  DNThreadPool = interface; // type: System.Threading.ThreadPool, namespace: System.Threading
  DNThreadPoolBoundHandle = interface; // type: System.Threading.ThreadPoolBoundHandle, namespace: System.Threading
  DNTimeout = interface; // type: System.Threading.Timeout, namespace: System.Threading
  DNVolatile = interface; // type: System.Threading.Volatile, namespace: System.Threading
  DNWaitHandleExtensions = interface; // type: System.Threading.WaitHandleExtensions, namespace: System.Threading
  DNTimeZone = interface; // type: System.TimeZone, namespace: System
  DNTimeZoneInfo = interface; // type: System.TimeZoneInfo, namespace: System
  DNTimeZoneInfo_AdjustmentRule = interface; // type: System.TimeZoneInfo+AdjustmentRule, namespace: System
  DNTuple<T1> = interface; // type: System.Tuple`1, namespace: System
  DNTuple<T1, T2> = interface; // type: System.Tuple`2, namespace: System
  DNTuple<T1, T2, T3> = interface; // type: System.Tuple`3, namespace: System
  DNTuple<T1, T2, T3, T4> = interface; // type: System.Tuple`4, namespace: System
  DNTuple<T1, T2, T3, T4, T5> = interface; // type: System.Tuple`5, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6> = interface; // type: System.Tuple`6, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6, T7> = interface; // type: System.Tuple`7, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface; // type: System.Tuple`8, namespace: System
  DNTuple = interface; // type: System.Tuple, namespace: System
  DNTupleExtensions = interface; // type: System.TupleExtensions, namespace: System
  DNValueType = interface; // type: System.ValueType, namespace: System
  DNArgIterator = interface; // type: System.ArgIterator, namespace: System
  DNArraySegment<T> = interface; // type: System.ArraySegment`1, namespace: System
  DNBoolean = interface; // type: System.Boolean, namespace: System
  DNByte = interface; // type: System.Byte, namespace: System
  DNChar = interface; // type: System.Char, namespace: System
  DNDictionaryEntry = interface; // type: System.Collections.DictionaryEntry, namespace: System.Collections
  DNDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+Enumerator, namespace: System.Collections.Generic
  DNDictionary_KeyCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator, namespace: System.Collections.Generic
  DNDictionary_ValueCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator, namespace: System.Collections.Generic
  DNKeyValuePair<TKey, TValue> = interface; // type: System.Collections.Generic.KeyValuePair`2, namespace: System.Collections.Generic
  DNList_Enumerator<T> = interface; // type: System.Collections.Generic.List`1+Enumerator, namespace: System.Collections.Generic
  DNAssemblyHash = interface; // type: System.Configuration.Assemblies.AssemblyHash, namespace: System.Configuration.Assemblies
  DNConsoleKeyInfo = interface; // type: System.ConsoleKeyInfo, namespace: System
  DNDateTime = interface; // type: System.DateTime, namespace: System
  DNDateTimeOffset = interface; // type: System.DateTimeOffset, namespace: System
  DNDecimal = interface; // type: System.Decimal, namespace: System
  DNSymbolToken = interface; // type: System.Diagnostics.SymbolStore.SymbolToken, namespace: System.Diagnostics.SymbolStore
  DNEventSourceOptions = interface; // type: System.Diagnostics.Tracing.EventSourceOptions, namespace: System.Diagnostics.Tracing
  DNDouble = interface; // type: System.Double, namespace: System
  DNEnum = interface; // type: System.Enum, namespace: System
  DNGuid = interface; // type: System.Guid, namespace: System
  DNInt16 = interface; // type: System.Int16, namespace: System
  DNInt32 = interface; // type: System.Int32, namespace: System
  DNInt64 = interface; // type: System.Int64, namespace: System
  DNIntPtr = interface; // type: System.IntPtr, namespace: System
  DNModuleHandle = interface; // type: System.ModuleHandle, namespace: System
  DNNullable<T> = interface; // type: System.Nullable`1, namespace: System
  DNCustomAttributeNamedArgument = interface; // type: System.Reflection.CustomAttributeNamedArgument, namespace: System.Reflection
  DNCustomAttributeTypedArgument = interface; // type: System.Reflection.CustomAttributeTypedArgument, namespace: System.Reflection
  DNEventToken = interface; // type: System.Reflection.Emit.EventToken, namespace: System.Reflection.Emit
  DNExceptionHandler = interface; // type: System.Reflection.Emit.ExceptionHandler, namespace: System.Reflection.Emit
  DNFieldToken = interface; // type: System.Reflection.Emit.FieldToken, namespace: System.Reflection.Emit
  DNLabel = interface; // type: System.Reflection.Emit.Label, namespace: System.Reflection.Emit
  DNMethodToken = interface; // type: System.Reflection.Emit.MethodToken, namespace: System.Reflection.Emit
  DNOpCode = interface; // type: System.Reflection.Emit.OpCode, namespace: System.Reflection.Emit
  DNParameterToken = interface; // type: System.Reflection.Emit.ParameterToken, namespace: System.Reflection.Emit
  DNPropertyToken = interface; // type: System.Reflection.Emit.PropertyToken, namespace: System.Reflection.Emit
  DNSignatureToken = interface; // type: System.Reflection.Emit.SignatureToken, namespace: System.Reflection.Emit
  DNStringToken = interface; // type: System.Reflection.Emit.StringToken, namespace: System.Reflection.Emit
  DNTypeToken = interface; // type: System.Reflection.Emit.TypeToken, namespace: System.Reflection.Emit
  DNInterfaceMapping = interface; // type: System.Reflection.InterfaceMapping, namespace: System.Reflection
  DNParameterModifier = interface; // type: System.Reflection.ParameterModifier, namespace: System.Reflection
  DNAsyncTaskMethodBuilder<TResult> = interface; // type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1, namespace: System.Runtime.CompilerServices
  DNAsyncTaskMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, namespace: System.Runtime.CompilerServices
  DNAsyncVoidMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.TaskAwaiter`1, namespace: System.Runtime.CompilerServices
  DNTaskAwaiter = interface; // type: System.Runtime.CompilerServices.TaskAwaiter, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable = interface; // type: System.Runtime.CompilerServices.YieldAwaitable, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable_YieldAwaiter = interface; // type: System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter, namespace: System.Runtime.CompilerServices
  DNArrayWithOffset = interface; // type: System.Runtime.InteropServices.ArrayWithOffset, namespace: System.Runtime.InteropServices
  DNInteropServices_BIND_OPTS = interface; // type: System.Runtime.InteropServices.BIND_OPTS, namespace: System.Runtime.InteropServices
  DNInteropServices_BINDPTR = interface; // type: System.Runtime.InteropServices.BINDPTR, namespace: System.Runtime.InteropServices
  DNComTypes_BIND_OPTS = interface; // type: System.Runtime.InteropServices.ComTypes.BIND_OPTS, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_BINDPTR = interface; // type: System.Runtime.InteropServices.ComTypes.BINDPTR, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_CONNECTDATA = interface; // type: System.Runtime.InteropServices.ComTypes.CONNECTDATA, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_DISPPARAMS = interface; // type: System.Runtime.InteropServices.ComTypes.DISPPARAMS, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_ELEMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_ELEMDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_EXCEPINFO = interface; // type: System.Runtime.InteropServices.ComTypes.EXCEPINFO, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_FILETIME = interface; // type: System.Runtime.InteropServices.ComTypes.FILETIME, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_FUNCDESC = interface; // type: System.Runtime.InteropServices.ComTypes.FUNCDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_IDLDESC = interface; // type: System.Runtime.InteropServices.ComTypes.IDLDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_PARAMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.PARAMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_STATSTG = interface; // type: System.Runtime.InteropServices.ComTypes.STATSTG, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_TYPEATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_TYPEDESC = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_TYPELIBATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPELIBATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_VARDESC = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNComTypes_VARDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNInteropServices_CONNECTDATA = interface; // type: System.Runtime.InteropServices.CONNECTDATA, namespace: System.Runtime.InteropServices
  DNInteropServices_DISPPARAMS = interface; // type: System.Runtime.InteropServices.DISPPARAMS, namespace: System.Runtime.InteropServices
  DNInteropServices_ELEMDESC = interface; // type: System.Runtime.InteropServices.ELEMDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_ELEMDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ELEMDESC+DESCUNION, namespace: System.Runtime.InteropServices
  DNInteropServices_EXCEPINFO = interface; // type: System.Runtime.InteropServices.EXCEPINFO, namespace: System.Runtime.InteropServices
  DNInteropServices_FILETIME = interface; // type: System.Runtime.InteropServices.FILETIME, namespace: System.Runtime.InteropServices
  DNInteropServices_FUNCDESC = interface; // type: System.Runtime.InteropServices.FUNCDESC, namespace: System.Runtime.InteropServices
  DNGCHandle = interface; // type: System.Runtime.InteropServices.GCHandle, namespace: System.Runtime.InteropServices
  DNHandleRef = interface; // type: System.Runtime.InteropServices.HandleRef, namespace: System.Runtime.InteropServices
  DNInteropServices_IDLDESC = interface; // type: System.Runtime.InteropServices.IDLDESC, namespace: System.Runtime.InteropServices
  DNOSPlatform = interface; // type: System.Runtime.InteropServices.OSPlatform, namespace: System.Runtime.InteropServices
  DNInteropServices_PARAMDESC = interface; // type: System.Runtime.InteropServices.PARAMDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_STATSTG = interface; // type: System.Runtime.InteropServices.STATSTG, namespace: System.Runtime.InteropServices
  DNInteropServices_TYPEATTR = interface; // type: System.Runtime.InteropServices.TYPEATTR, namespace: System.Runtime.InteropServices
  DNInteropServices_TYPEDESC = interface; // type: System.Runtime.InteropServices.TYPEDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_TYPELIBATTR = interface; // type: System.Runtime.InteropServices.TYPELIBATTR, namespace: System.Runtime.InteropServices
  DNInteropServices_VARDESC = interface; // type: System.Runtime.InteropServices.VARDESC, namespace: System.Runtime.InteropServices
  DNInteropServices_VARDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.VARDESC+DESCUNION, namespace: System.Runtime.InteropServices
  DNEventRegistrationToken = interface; // type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNSerializationEntry = interface; // type: System.Runtime.Serialization.SerializationEntry, namespace: System.Runtime.Serialization
  DNStreamingContext = interface; // type: System.Runtime.Serialization.StreamingContext, namespace: System.Runtime.Serialization
  DNRuntimeArgumentHandle = interface; // type: System.RuntimeArgumentHandle, namespace: System
  DNRuntimeFieldHandle = interface; // type: System.RuntimeFieldHandle, namespace: System
  DNRuntimeMethodHandle = interface; // type: System.RuntimeMethodHandle, namespace: System
  DNRuntimeTypeHandle = interface; // type: System.RuntimeTypeHandle, namespace: System
  DNSByte = interface; // type: System.SByte, namespace: System
  DNDSAParameters = interface; // type: System.Security.Cryptography.DSAParameters, namespace: System.Security.Cryptography
  DNHashAlgorithmName = interface; // type: System.Security.Cryptography.HashAlgorithmName, namespace: System.Security.Cryptography
  DNRSAParameters = interface; // type: System.Security.Cryptography.RSAParameters, namespace: System.Security.Cryptography
  DNSingle = interface; // type: System.Single, namespace: System
  DNAsyncFlowControl = interface; // type: System.Threading.AsyncFlowControl, namespace: System.Threading
  DNAsyncLocalValueChangedArgs<T> = interface; // type: System.Threading.AsyncLocalValueChangedArgs`1, namespace: System.Threading
  DNCancellationToken = interface; // type: System.Threading.CancellationToken, namespace: System.Threading
  DNCancellationTokenRegistration = interface; // type: System.Threading.CancellationTokenRegistration, namespace: System.Threading
  DNLockCookie = interface; // type: System.Threading.LockCookie, namespace: System.Threading
  DNNativeOverlapped = interface; // type: System.Threading.NativeOverlapped, namespace: System.Threading
  DNSpinLock = interface; // type: System.Threading.SpinLock, namespace: System.Threading
  DNSpinWait = interface; // type: System.Threading.SpinWait, namespace: System.Threading
  DNParallelLoopResult = interface; // type: System.Threading.Tasks.ParallelLoopResult, namespace: System.Threading.Tasks
  DNTimeSpan = interface; // type: System.TimeSpan, namespace: System
  DNTimeZoneInfo_TransitionTime = interface; // type: System.TimeZoneInfo+TransitionTime, namespace: System
  DNTypedReference = interface; // type: System.TypedReference, namespace: System
  DNUInt16 = interface; // type: System.UInt16, namespace: System
  DNUInt32 = interface; // type: System.UInt32, namespace: System
  DNUInt64 = interface; // type: System.UInt64, namespace: System
  DNUIntPtr = interface; // type: System.UIntPtr, namespace: System
  DNValueTuple<T1> = interface; // type: System.ValueTuple`1, namespace: System
  DNValueTuple<T1, T2> = interface; // type: System.ValueTuple`2, namespace: System
  DNValueTuple<T1, T2, T3> = interface; // type: System.ValueTuple`3, namespace: System
  DNValueTuple<T1, T2, T3, T4> = interface; // type: System.ValueTuple`4, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5> = interface; // type: System.ValueTuple`5, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6> = interface; // type: System.ValueTuple`6, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7> = interface; // type: System.ValueTuple`7, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface; // type: System.ValueTuple`8, namespace: System
  DNValueTuple = interface; // type: System.ValueTuple, namespace: System
  DNVoid = interface; // type: System.Void, namespace: System
  DNVersion = interface; // type: System.Version, namespace: System
  DNWeakReference<T> = interface; // type: System.WeakReference`1, namespace: System
  DNWeakReference = interface; // type: System.WeakReference, namespace: System

{ delegates }

  [DNTypeName('System.Action`1')]
  DNAction<T> = procedure(obj: T) of object;

  [DNTypeName('System.Action`2')]
  DNAction<T1, T2> = procedure(arg1: T1; arg2: T2) of object;

  [DNTypeName('System.Action`3')]
  DNAction<T1, T2, T3> = procedure(arg1: T1; arg2: T2; arg3: T3) of object;

  [DNTypeName('System.Action`4')]
  DNAction<T1, T2, T3, T4> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4) of object;

  [DNTypeName('System.Action`5')]
  DNAction<T1, T2, T3, T4, T5> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5) of object;

  [DNTypeName('System.Action`6')]
  DNAction<T1, T2, T3, T4, T5, T6> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6) of object;

  [DNTypeName('System.Action`7')]
  DNAction<T1, T2, T3, T4, T5, T6, T7> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7) of object;

  [DNTypeName('System.Action`8')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8) of object;

  [DNTypeName('System.Action')]
  DNAction = procedure of object;

  [DNTypeName('System.AppDomainInitializer')]
  DNAppDomainInitializer = procedure(args: TArray<string>) of object;

  [DNTypeName('System.AssemblyLoadEventHandler')]
  DNAssemblyLoadEventHandler = procedure(sender: DNObject; args: DNAssemblyLoadEventArgs) of object;

  [DNTypeName('System.AsyncCallback')]
  DNAsyncCallback = procedure(ar: DNIAsyncResult) of object;

  [DNTypeName('System.Comparison`1')]
  DNComparison<T> = function(x: T; y: T): Int32 of object;

  [DNTypeName('System.ConsoleCancelEventHandler')]
  DNConsoleCancelEventHandler = procedure(sender: DNObject; e: DNConsoleCancelEventArgs) of object;

  [DNTypeName('System.Converter`2')]
  DNConverter<TInput, TOutput> = function(input: TInput): TOutput of object;

  [DNTypeName('System.CrossAppDomainDelegate')]
  DNCrossAppDomainDelegate = procedure of object;

  [DNTypeName('System.EventHandler`1')]
  DNEventHandler<TEventArgs> = procedure(sender: DNObject; e: TEventArgs) of object;

  [DNTypeName('System.EventHandler')]
  DNEventHandler = procedure(sender: DNObject; e: DNEventArgs) of object;

  [DNTypeName('System.Func`1')]
  DNFunc<TResult> = function: TResult of object;

  [DNTypeName('System.Func`2')]
  DNFunc<T, TResult> = function(arg: T): TResult of object;

  [DNTypeName('System.Func`3')]
  DNFunc<T1, T2, TResult> = function(arg1: T1; arg2: T2): TResult of object;

  [DNTypeName('System.Func`4')]
  DNFunc<T1, T2, T3, TResult> = function(arg1: T1; arg2: T2; arg3: T3): TResult of object;

  [DNTypeName('System.Func`5')]
  DNFunc<T1, T2, T3, T4, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4): TResult of object;

  [DNTypeName('System.Func`6')]
  DNFunc<T1, T2, T3, T4, T5, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5): TResult of object;

  [DNTypeName('System.Func`7')]
  DNFunc<T1, T2, T3, T4, T5, T6, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6): TResult of object;

  [DNTypeName('System.Func`8')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7): TResult of object;

  [DNTypeName('System.Func`9')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8): TResult of object;

  [DNTypeName('System.Predicate`1')]
  DNPredicate<T> = function(obj: T): Boolean of object;

  [DNTypeName('System.Reflection.MemberFilter')]
  DNMemberFilter = function(m: DNMemberInfo; filterCriteria: DNObject): Boolean of object;

  [DNTypeName('System.Reflection.ModuleResolveEventHandler')]
  DNModuleResolveEventHandler = function(sender: DNObject; e: DNResolveEventArgs): DNModule of object;

  [DNTypeName('System.Reflection.TypeFilter')]
  DNTypeFilter = function(m: DNType; filterCriteria: DNObject): Boolean of object;

  [DNTypeName('System.ResolveEventHandler')]
  DNResolveEventHandler = function(sender: DNObject; args: DNResolveEventArgs): DNAssembly of object;

  [DNTypeName('System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback')]
  DNConditionalWeakTable_CreateValueCallback<TKey, TValue> = function(key: TKey): TValue of object;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode')]
  DNRuntimeHelpers_CleanupCode = procedure(userData: DNObject; exceptionThrown: Boolean) of object;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+TryCode')]
  DNRuntimeHelpers_TryCode = procedure(userData: DNObject) of object;

  [DNTypeName('System.Runtime.InteropServices.ObjectCreationDelegate')]
  DNObjectCreationDelegate = function(aggregator: IntPtr): IntPtr of object;

  [DNTypeName('System.Runtime.Remoting.Contexts.CrossContextDelegate')]
  DNCrossContextDelegate = procedure of object;

  [DNTypeName('System.Runtime.Remoting.Messaging.HeaderHandler')]
  DNHeaderHandler = function(headers: TArray<DNHeader>): DNObject of object;

  [DNTypeName('System.Runtime.Remoting.Messaging.MessageSurrogateFilter')]
  DNMessageSurrogateFilter = function(key: string; value: DNObject): Boolean of object;

  [DNTypeName('System.Threading.ContextCallback')]
  DNContextCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.IOCompletionCallback')]
  DNIOCompletionCallback = procedure(errorCode: UInt32; numBytes: UInt32; var pOVERLAP: DNNativeOverlapped) of object;

  [DNTypeName('System.Threading.ParameterizedThreadStart')]
  DNParameterizedThreadStart = procedure(obj: DNObject) of object;

  [DNTypeName('System.Threading.SendOrPostCallback')]
  DNSendOrPostCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.ThreadStart')]
  DNThreadStart = procedure of object;

  [DNTypeName('System.Threading.TimerCallback')]
  DNTimerCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.WaitCallback')]
  DNWaitCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.WaitOrTimerCallback')]
  DNWaitOrTimerCallback = procedure(state: DNObject; timedOut: Boolean) of object;

  [DNTypeName('System.UnhandledExceptionEventHandler')]
  DNUnhandledExceptionEventHandler = procedure(sender: DNObject; e: DNUnhandledExceptionEventArgs) of object;



  { TDNGenericImport }

  TDNGenericImport<C: IDNClass; T: IDNInstance> = class(TDNCustomGenericImport<C, T>)
  private
    class function GetTypeId: DNType; static;
  public
    class property typeid: DNType read GetTypeId;
  end;

{ objects }


  DNObjectClass = interface(IDNClass)
    [IID_DNObjectClass_Name]
    {class} function init: DNObject;
    {class} function ReferenceEquals(objA, objB: DNObject): Boolean;
    {class} function Equals(objA, objB: DNObject): Boolean;
  end;

  [DNTypeName(DNObject_FullName)]
  DNObject = interface(IDNInstance)
    [IID_DNObject_Name]
    function Equals(obj: DNObject) : Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;
  end;
  TDNObject = class(TDNGenericImport<DNObjectClass, DNObject>) end;


  //-------------namespace: System----------------
  [DNTypeName('System.IDisposable')]
  DNIDisposable = interface(DNObject)
  ['{805D7A98-D4AF-3F0F-967F-E5CF45312D2C}']
  { methods } 

    procedure Dispose;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEnumerator')]
  DNIEnumerator = interface(DNObject)
  ['{496B0ABF-CDEE-11D3-88E8-00902754C43A}']
  { getters & setters } 

    function get_Current: DNObject;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;

  { propertys } 

    property Current: DNObject read get_Current;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEnumerator`1')]
  DNIEnumerator<T> = interface(DNIEnumerator)
  ['{ACCB6202-26B6-3447-AEFA-73B653F93530}']
  { getters & setters } 

    function get_Current: T;

  { propertys } 

    property Current: T read get_Current;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEnumerable')]
  DNIEnumerable = interface(DNObject)
  ['{496B0ABE-CDEE-11D3-88E8-00902754C43A}']
  { methods } 

    function GetEnumerator: DNIEnumerator;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEnumerable`1')]
  DNIEnumerable<T> = interface(DNIEnumerable)
  ['{AEF9EC8A-1E73-365B-8DA2-800A3A6166E6}']
  { methods } 

    function GetEnumerator: DNIEnumerator<T>;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.ICollection')]
  DNICollection = interface(DNIEnumerable)
  ['{DE8DB6F8-D101-3A92-8D1C-E72E5F10E992}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure CopyTo(&array: DNArray; index: Int32);

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.ICollection`1')]
  DNICollection<T> = interface(DNIEnumerable<T>)
  ['{4E0BA8E9-C074-3990-BE19-EF596EC42B01}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure Add(item: T);
    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function Remove(item: T): Boolean;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IList')]
  DNIList = interface(DNICollection)
  ['{7BCFA00F-F764-3113-9140-3BBD127A96BB}']
  { getters & setters } 

    function get_Item(index: Int32): DNObject;
    procedure set_Item(index: Int32; value: DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    function Add(value: DNObject): Int32;
    function &Contains(value: DNObject): Boolean;
    procedure Clear;
    function IndexOf(value: DNObject): Int32;
    procedure Insert(index: Int32; value: DNObject);
    procedure Remove(value: DNObject);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IList`1')]
  DNIList<T> = interface(DNICollection<T>)
  ['{5C185EDF-6A24-396D-886F-16F49368D2AB}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    procedure set_Item(index: Int32; value: T);

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: T read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IDictionary')]
  DNIDictionary = interface(DNICollection)
  ['{6A6841DF-3287-3D87-8060-CE0B4C77D2A1}']
  { getters & setters } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure Remove(key: DNObject);

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IDictionary`2')]
  DNIDictionary<TKey, TValue> = interface(DNICollection<DNKeyValuePair<TKey, TValue>>)
  ['{A799EDAA-B36F-31DA-9B95-D75BE19D1CCC}']
  { getters & setters } 

    function get_Item(key: TKey): TValue;
    procedure set_Item(key: TKey; value: TValue);
    function get_Keys: DNICollection<TKey>;
    function get_Values: DNICollection<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    procedure Add(key: TKey; value: TValue);
    function Remove(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item write set_Item; default;
    property Keys: DNICollection<TKey> read get_Keys;
    property Values: DNICollection<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IComparer')]
  DNIComparer = interface(DNObject)
  ['{C20FD3EB-7022-3D14-8477-760FAB54E50D}']
  { methods } 

    function Compare(x: DNObject; y: DNObject): Int32;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IComparer`1')]
  DNIComparer<T> = interface(DNObject)
  ['{2EABC2B4-F497-3FA8-AB24-876A15E92896}']
  { methods } 

    function Compare(x: T; y: T): Int32;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System._AppDomain')]
  DN_AppDomain = interface(DNObject)
  ['{05F696DC-2B29-3663-AD8B-C4389CF2A713}']
  { getters & setters } 

    function get_Evidence: DNEvidence;
    function get_FriendlyName: string;
    function get_BaseDirectory: string;
    function get_RelativeSearchPath: string;
    function get_ShadowCopyFiles: Boolean;
    function get_DynamicDirectory: string;

  { events } 

    procedure add_DomainUnload(value: DNEventHandler);
    procedure remove_DomainUnload(value: DNEventHandler);
    procedure add_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    procedure remove_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    procedure add_ProcessExit(value: DNEventHandler);
    procedure remove_ProcessExit(value: DNEventHandler);
    procedure add_TypeResolve(value: DNResolveEventHandler);
    procedure remove_TypeResolve(value: DNResolveEventHandler);
    procedure add_ResourceResolve(value: DNResolveEventHandler);
    procedure remove_ResourceResolve(value: DNResolveEventHandler);
    procedure add_AssemblyResolve(value: DNResolveEventHandler);
    procedure remove_AssemblyResolve(value: DNResolveEventHandler);
    procedure add_UnhandledException(value: DNUnhandledExceptionEventHandler);
    procedure remove_UnhandledException(value: DNUnhandledExceptionEventHandler);

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function InitializeLifetimeService: DNObject;
    function GetLifetimeService: DNObject;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet; isSynchronized: Boolean): DNAssemblyBuilder; overload;
    function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    function Load(assemblyString: string): DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityEvidence: DNEvidence): DNAssembly; overload;
    function Load(assemblyRef: DNAssemblyName; assemblySecurity: DNEvidence): DNAssembly; overload;
    function Load(assemblyString: string; assemblySecurity: DNEvidence): DNAssembly; overload;
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence): Int32; overload;
    function ExecuteAssembly(assemblyFile: string): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    function GetAssemblies: TArray<DNAssembly>;
    procedure AppendPrivatePath(path: string);
    procedure ClearPrivatePath;
    procedure SetShadowCopyPath(s: string);
    procedure ClearShadowCopyPath;
    procedure SetCachePath(s: string);
    procedure SetData(name: string; data: DNObject);
    function GetData(name: string): DNObject;
    procedure SetAppDomainPolicy(domainPolicy: DNPolicyLevel);
    procedure SetThreadPrincipal(principal: DNIPrincipal);
    procedure SetPrincipalPolicy(policy: DNPrincipalPolicy);
    procedure DoCallBack(theDelegate: DNCrossAppDomainDelegate);

  { propertys } 

    property Evidence: DNEvidence read get_Evidence;
    property FriendlyName: string read get_FriendlyName;
    property BaseDirectory: string read get_BaseDirectory;
    property RelativeSearchPath: string read get_RelativeSearchPath;
    property ShadowCopyFiles: Boolean read get_ShadowCopyFiles;
    property DynamicDirectory: string read get_DynamicDirectory;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEqualityComparer`1')]
  DNIEqualityComparer<T> = interface(DNObject)
  ['{042728AF-01BC-3F31-8294-AC99DF654C3A}']
  { methods } 

    function Equals(x: T; y: T): Boolean;
    function GetHashCode(obj: T): Int32;

  end;

  //-------------namespace: System.Collections.Concurrent----------------
  [DNTypeName('System.Collections.Concurrent.IProducerConsumerCollection`1')]
  DNIProducerConsumerCollection<T> = interface(DNIEnumerable<T>)
  ['{2B733F8C-2E75-3440-851D-877C316DA9EF}']
  { methods } 

    procedure CopyTo(&array: TArray<T>; index: Int32);
    function TryAdd(item: T): Boolean;
    function TryTake(out item: T): Boolean;
    function ToArray: TArray<T>;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyCollection`1')]
  DNIReadOnlyCollection<T> = interface(DNIEnumerable<T>)
  ['{476EF854-57E0-3FEB-908B-5CA9913352C0}']
  { getters & setters } 

    function get_Count: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyDictionary`2')]
  DNIReadOnlyDictionary<TKey, TValue> = interface(DNIReadOnlyCollection<DNKeyValuePair<TKey, TValue>>)
  ['{A8F1184E-7A7F-3F9F-A938-E036EE41494D}']
  { getters & setters } 

    function get_Item(key: TKey): TValue;
    function get_Keys: DNIEnumerable<TKey>;
    function get_Values: DNIEnumerable<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item; default;
    property Keys: DNIEnumerable<TKey> read get_Keys;
    property Values: DNIEnumerable<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyList`1')]
  DNIReadOnlyList<T> = interface(DNIReadOnlyCollection<T>)
  ['{9F6980D7-8DC2-39CF-875B-A8A36DDC242D}']
  { getters & setters } 

    function get_Item(index: Int32): T;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
  end;

  //-------------namespace: System.Resources----------------
  [DNTypeName('System.Resources.IResourceReader')]
  DNIResourceReader = interface(DNIEnumerable)
  ['{8965A22F-FBA8-36AD-8132-70BBD0DA457D}']
  { methods } 

    procedure Close;
    function GetEnumerator: DNIDictionaryEnumerator;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IDictionaryEnumerator')]
  DNIDictionaryEnumerator = interface(DNIEnumerator)
  ['{35D574BF-7A4F-3588-8C19-12212A0FE4DC}']
  { getters & setters } 

    function get_Key: DNObject;
    function get_Value: DNObject;
    function get_Entry: DNDictionaryEntry;

  { propertys } 

    property Key: DNObject read get_Key;
    property Value: DNObject read get_Value;
    property Entry: DNDictionaryEntry read get_Entry;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEqualityComparer')]
  DNIEqualityComparer = interface(DNObject)
  ['{AAB7C6EA-CAB0-3ADB-82AA-CF32E29AF238}']
  { methods } 

    function Equals(x: DNObject; y: DNObject): Boolean;
    function GetHashCode(obj: DNObject): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IHashCodeProvider')]
  DNIHashCodeProvider = interface(DNObject)
  ['{5D573036-3435-3C5A-AEFF-2B8191082C71}']
  { methods } 

    function GetHashCode(obj: DNObject): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IStructuralComparable')]
  DNIStructuralComparable = interface(DNObject)
  ['{5F42069E-418C-3D99-802E-D15197F23880}']
  { methods } 

    function CompareTo(other: DNObject; comparer: DNIComparer): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IStructuralEquatable')]
  DNIStructuralEquatable = interface(DNObject)
  ['{F077A941-0EFB-39D2-8DE3-E207BCB7A7DB}']
  { methods } 

    function Equals(other: DNObject; comparer: DNIEqualityComparer): Boolean;
    function GetHashCode(comparer: DNIEqualityComparer): Int32;

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolBinder')]
  DNISymbolBinder = interface(DNObject)
  ['{20808ADC-CC01-3F3A-8F09-ED12940FC212}']
  { methods } 

    function GetReader(importer: Int32; filename: string; searchPath: string): DNISymbolReader;

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolBinder1')]
  DNISymbolBinder1 = interface(DNObject)
  ['{027C036A-4052-3821-85DE-B53319DF1211}']
  { methods } 

    function GetReader(importer: IntPtr; filename: string; searchPath: string): DNISymbolReader;

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolDocument')]
  DNISymbolDocument = interface(DNObject)
  ['{1C32F012-2684-3EFE-8D50-9C2973ACC00B}']
  { getters & setters } 

    function get_URL: string;
    function get_DocumentType: DNGuid;
    function get_Language: DNGuid;
    function get_LanguageVendor: DNGuid;
    function get_CheckSumAlgorithmId: DNGuid;
    function get_HasEmbeddedSource: Boolean;
    function get_SourceLength: Int32;

  { methods } 

    function GetCheckSum: TArray<Byte>;
    function FindClosestLine(line: Int32): Int32;
    function GetSourceRange(startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32): TArray<Byte>;

  { propertys } 

    property URL: string read get_URL;
    property DocumentType: DNGuid read get_DocumentType;
    property Language: DNGuid read get_Language;
    property LanguageVendor: DNGuid read get_LanguageVendor;
    property CheckSumAlgorithmId: DNGuid read get_CheckSumAlgorithmId;
    property HasEmbeddedSource: Boolean read get_HasEmbeddedSource;
    property SourceLength: Int32 read get_SourceLength;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolDocumentWriter')]
  DNISymbolDocumentWriter = interface(DNObject)
  ['{FA682F24-3A3C-390D-B8A2-96F1106F4B37}']
  { methods } 

    procedure SetSource(source: TArray<Byte>);
    procedure SetCheckSum(algorithmId: DNGuid; checkSum: TArray<Byte>);

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolMethod')]
  DNISymbolMethod = interface(DNObject)
  ['{25C72EB0-E437-3F17-946D-3B72A3ACFF37}']
  { getters & setters } 

    function get_Token: DNSymbolToken;
    function get_SequencePointCount: Int32;
    function get_RootScope: DNISymbolScope;

  { methods } 

    procedure GetSequencePoints(offsets: TArray<Int32>; documents: TArray<DNISymbolDocument>; lines: TArray<Int32>; columns: TArray<Int32>; endLines: TArray<Int32>; endColumns: TArray<Int32>);
    function GetScope(offset: Int32): DNISymbolScope;
    function GetOffset(document: DNISymbolDocument; line: Int32; column: Int32): Int32;
    function GetRanges(document: DNISymbolDocument; line: Int32; column: Int32): TArray<Int32>;
    function GetParameters: TArray<DNISymbolVariable>;
    function GetNamespace: DNISymbolNamespace;
    function GetSourceStartEnd(docs: TArray<DNISymbolDocument>; lines: TArray<Int32>; columns: TArray<Int32>): Boolean;

  { propertys } 

    property Token: DNSymbolToken read get_Token;
    property SequencePointCount: Int32 read get_SequencePointCount;
    property RootScope: DNISymbolScope read get_RootScope;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolNamespace')]
  DNISymbolNamespace = interface(DNObject)
  ['{23ED2454-6899-3C28-BAB7-6EC86683964A}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function GetNamespaces: TArray<DNISymbolNamespace>;
    function GetVariables: TArray<DNISymbolVariable>;

  { propertys } 

    property Name: string read get_Name;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolReader')]
  DNISymbolReader = interface(DNObject)
  ['{E809A5F1-D3D7-3144-9BEF-FE8AC0364699}']
  { getters & setters } 

    function get_UserEntryPoint: DNSymbolToken;

  { methods } 

    function GetDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocument;
    function GetDocuments: TArray<DNISymbolDocument>;
    function GetMethod(method: DNSymbolToken): DNISymbolMethod; overload;
    function GetMethod(method: DNSymbolToken; version: Int32): DNISymbolMethod; overload;
    function GetVariables(parent: DNSymbolToken): TArray<DNISymbolVariable>;
    function GetGlobalVariables: TArray<DNISymbolVariable>;
    function GetMethodFromDocumentPosition(document: DNISymbolDocument; line: Int32; column: Int32): DNISymbolMethod;
    function GetSymAttribute(parent: DNSymbolToken; name: string): TArray<Byte>;
    function GetNamespaces: TArray<DNISymbolNamespace>;

  { propertys } 

    property UserEntryPoint: DNSymbolToken read get_UserEntryPoint;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolScope')]
  DNISymbolScope = interface(DNObject)
  ['{1CEE3A11-01AE-3244-A939-4972FC9703EF}']
  { getters & setters } 

    function get_Method: DNISymbolMethod;
    function get_Parent: DNISymbolScope;
    function get_StartOffset: Int32;
    function get_EndOffset: Int32;

  { methods } 

    function GetChildren: TArray<DNISymbolScope>;
    function GetLocals: TArray<DNISymbolVariable>;
    function GetNamespaces: TArray<DNISymbolNamespace>;

  { propertys } 

    property Method: DNISymbolMethod read get_Method;
    property Parent: DNISymbolScope read get_Parent;
    property StartOffset: Int32 read get_StartOffset;
    property EndOffset: Int32 read get_EndOffset;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolVariable')]
  DNISymbolVariable = interface(DNObject)
  ['{4042BD4D-B5AB-30E8-919B-14910687BAAE}']
  { getters & setters } 

    function get_Name: string;
    function get_Attributes: DNObject;
    function get_AddressKind: DNSymAddressKind;
    function get_AddressField1: Int32;
    function get_AddressField2: Int32;
    function get_AddressField3: Int32;
    function get_StartOffset: Int32;
    function get_EndOffset: Int32;

  { methods } 

    function GetSignature: TArray<Byte>;

  { propertys } 

    property Name: string read get_Name;
    property Attributes: DNObject read get_Attributes;
    property AddressKind: DNSymAddressKind read get_AddressKind;
    property AddressField1: Int32 read get_AddressField1;
    property AddressField2: Int32 read get_AddressField2;
    property AddressField3: Int32 read get_AddressField3;
    property StartOffset: Int32 read get_StartOffset;
    property EndOffset: Int32 read get_EndOffset;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolWriter')]
  DNISymbolWriter = interface(DNObject)
  ['{DA295A1B-C5BD-3B34-8ACD-1D7D334FFB7F}']
  { methods } 

    procedure Initialize(emitter: IntPtr; filename: string; fFullBuild: Boolean);
    function DefineDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocumentWriter;
    procedure SetUserEntryPoint(entryMethod: DNSymbolToken);
    procedure OpenMethod(method: DNSymbolToken);
    procedure CloseMethod;
    procedure DefineSequencePoints(document: DNISymbolDocumentWriter; offsets: TArray<Int32>; lines: TArray<Int32>; columns: TArray<Int32>; endLines: TArray<Int32>; endColumns: TArray<Int32>);
    function OpenScope(startOffset: Int32): Int32;
    procedure CloseScope(endOffset: Int32);
    procedure SetScopeRange(scopeID: Int32; startOffset: Int32; endOffset: Int32);
    procedure DefineLocalVariable(name: string; attributes: DNFieldAttributes; signature: TArray<Byte>; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32; startOffset: Int32; endOffset: Int32);
    procedure DefineParameter(name: string; attributes: DNParameterAttributes; sequence: Int32; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32);
    procedure DefineField(parent: DNSymbolToken; name: string; attributes: DNFieldAttributes; signature: TArray<Byte>; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32);
    procedure DefineGlobalVariable(name: string; attributes: DNFieldAttributes; signature: TArray<Byte>; addrKind: DNSymAddressKind; addr1: Int32; addr2: Int32; addr3: Int32);
    procedure Close;
    procedure SetSymAttribute(parent: DNSymbolToken; name: string; data: TArray<Byte>);
    procedure OpenNamespace(name: string);
    procedure CloseNamespace;
    procedure UsingNamespace(fullName: string);
    procedure SetMethodSourceRange(startDoc: DNISymbolDocumentWriter; startLine: Int32; startColumn: Int32; endDoc: DNISymbolDocumentWriter; endLine: Int32; endColumn: Int32);
    procedure SetUnderlyingWriter(underlyingWriter: IntPtr);

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IAppDomainSetup')]
  DNIAppDomainSetup = interface(DNObject)
  ['{27FFF232-A7A8-40DD-8D4A-734AD59FCD41}']
  { getters & setters } 

    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_CachePath: string;
    procedure set_CachePath(value: string);
    function get_ConfigurationFile: string;
    procedure set_ConfigurationFile(value: string);
    function get_DynamicBase: string;
    procedure set_DynamicBase(value: string);
    function get_LicenseFile: string;
    procedure set_LicenseFile(value: string);
    function get_PrivateBinPath: string;
    procedure set_PrivateBinPath(value: string);
    function get_PrivateBinPathProbe: string;
    procedure set_PrivateBinPathProbe(value: string);
    function get_ShadowCopyDirectories: string;
    procedure set_ShadowCopyDirectories(value: string);
    function get_ShadowCopyFiles: string;
    procedure set_ShadowCopyFiles(value: string);

  { propertys } 

    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property CachePath: string read get_CachePath write set_CachePath;
    property ConfigurationFile: string read get_ConfigurationFile write set_ConfigurationFile;
    property DynamicBase: string read get_DynamicBase write set_DynamicBase;
    property LicenseFile: string read get_LicenseFile write set_LicenseFile;
    property PrivateBinPath: string read get_PrivateBinPath write set_PrivateBinPath;
    property PrivateBinPathProbe: string read get_PrivateBinPathProbe write set_PrivateBinPathProbe;
    property ShadowCopyDirectories: string read get_ShadowCopyDirectories write set_ShadowCopyDirectories;
    property ShadowCopyFiles: string read get_ShadowCopyFiles write set_ShadowCopyFiles;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IAsyncResult')]
  DNIAsyncResult = interface(DNObject)
  ['{11AB34E7-0176-3C9E-9EFE-197858400A3D}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_AsyncWaitHandle: DNWaitHandle;
    function get_AsyncState: DNObject;
    function get_CompletedSynchronously: Boolean;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property AsyncWaitHandle: DNWaitHandle read get_AsyncWaitHandle;
    property AsyncState: DNObject read get_AsyncState;
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.ICloneable')]
  DNICloneable = interface(DNObject)
  ['{0CB251A7-3AB3-3B5C-A0B8-9DDF88824B85}']
  { methods } 

    function Clone: DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IComparable`1')]
  DNIComparable<T> = interface(DNObject)
  ['{338A8432-786C-3D79-B779-A4F8DCF27835}']
  { methods } 

    function CompareTo(other: T): Int32;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IComparable')]
  DNIComparable = interface(DNObject)
  ['{DEB0E770-91FD-3CF6-9A6C-E6A3656F3965}']
  { methods } 

    function CompareTo(obj: DNObject): Int32;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IConvertible')]
  DNIConvertible = interface(DNObject)
  ['{805E3B62-B5E9-393D-8941-377D8BF4556B}']
  { methods } 

    function GetTypeCode: DNTypeCode;
    function ToBoolean(provider: DNIFormatProvider): Boolean;
    function ToChar(provider: DNIFormatProvider): Char;
    function ToSByte(provider: DNIFormatProvider): SByte;
    function ToByte(provider: DNIFormatProvider): Byte;
    function ToInt16(provider: DNIFormatProvider): Int16;
    function ToUInt16(provider: DNIFormatProvider): UInt16;
    function ToInt32(provider: DNIFormatProvider): Int32;
    function ToUInt32(provider: DNIFormatProvider): UInt32;
    function ToInt64(provider: DNIFormatProvider): Int64;
    function ToUInt64(provider: DNIFormatProvider): UInt64;
    function ToSingle(provider: DNIFormatProvider): Single;
    function ToDouble(provider: DNIFormatProvider): Double;
    function ToDecimal(provider: DNIFormatProvider): DNDecimal;
    function ToDateTime(provider: DNIFormatProvider): DNDateTime;
    function ToString(provider: DNIFormatProvider): string;
    function ToType(conversionType: DNType; provider: DNIFormatProvider): DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.ICustomFormatter')]
  DNICustomFormatter = interface(DNObject)
  ['{2B130940-CA5E-3406-8385-E259E68AB039}']
  { methods } 

    function Format(format: string; arg: DNObject; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System.Resources----------------
  [DNTypeName('System.Resources.IResourceWriter')]
  DNIResourceWriter = interface(DNIDisposable)
  ['{E97AA6E5-595E-31C3-82F0-688FB91954C6}']
  { methods } 

    procedure AddResource(name: string; value: string); overload;
    procedure AddResource(name: string; value: DNObject); overload;
    procedure AddResource(name: string; value: TArray<Byte>); overload;
    procedure Close;
    procedure Generate;

  end;

  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.ICryptoTransform')]
  DNICryptoTransform = interface(DNIDisposable)
  ['{8ABAD867-F515-3CF6-BB62-5F0C88B3BB11}']
  { getters & setters } 

    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;

  { propertys } 

    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IEquatable`1')]
  DNIEquatable<T> = interface(DNObject)
  ['{D8C49BA7-BBAC-3BE5-8E80-A1E4303A61C0}']
  { methods } 

    function Equals(other: T): Boolean;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IFormatProvider')]
  DNIFormatProvider = interface(DNObject)
  ['{C8CB1DED-2814-396A-9CC0-473CA49779CC}']
  { methods } 

    function GetFormat(formatType: DNType): DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IFormattable')]
  DNIFormattable = interface(DNObject)
  ['{9A604EE7-E630-3DED-9444-BAAE247075AB}']
  { methods } 

    function ToString(format: string; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  [DNTypeName('System.IO.IsolatedStorage.INormalizeForIsolatedStorage')]
  DNINormalizeForIsolatedStorage = interface(DNObject)
  ['{F5006531-D4D7-319E-9EDA-9B4B65AD8D4F}']
  { methods } 

    function Normalize: DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IObservable`1')]
  DNIObservable<T> = interface(DNObject)
  ['{77D444A0-2C02-3905-95B0-C8472428A426}']
  { methods } 

    function Subscribe(observer: DNIObserver<T>): DNIDisposable;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IObserver`1')]
  DNIObserver<T> = interface(DNObject)
  ['{4A56B314-BB5D-3AF3-94A0-2AEE2D46D190}']
  { methods } 

    procedure OnNext(value: T);
    procedure OnError(error: DNException);
    procedure OnCompleted;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IProgress`1')]
  DNIProgress<T> = interface(DNObject)
  ['{8085FDF6-F705-333C-ABF8-57C1AB36DB20}']
  { methods } 

    procedure Report(value: T);

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IServiceProvider')]
  DNIServiceProvider = interface(DNObject)
  ['{8F10F540-7F5D-3F37-8D79-1E0AEB074AA0}']
  { methods } 

    function GetService(serviceType: DNType): DNObject;

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ICustomAttributeProvider')]
  DNICustomAttributeProvider = interface(DNObject)
  ['{B9B91146-D6C2-3A62-8159-C2D1794CDEB0}']
  { methods } 

    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.IReflect')]
  DNIReflect = interface(DNObject)
  ['{AFBF15E5-C37C-11D2-B88E-00A0C9B471B8}']
  { getters & setters } 

    function get_UnderlyingSystemType: DNType;

  { methods } 

    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject;

  { propertys } 

    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
  end;

  //-------------namespace: System.Runtime.InteropServices.Expando----------------
  [DNTypeName('System.Runtime.InteropServices.Expando.IExpando')]
  DNIExpando = interface(DNIReflect)
  ['{AFBF15E6-C37C-11D2-B88E-00A0C9B471B8}']
  { methods } 

    function AddField(name: string): DNFieldInfo;
    function AddProperty(name: string): DNPropertyInfo;
    function AddMethod(name: string; method: DNDelegate): DNMethodInfo;
    procedure RemoveMember(m: DNMemberInfo);

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.IReflectableType')]
  DNIReflectableType = interface(DNObject)
  ['{9D4D816F-A167-38FF-83F1-F4AFAF7C0412}']
  { methods } 

    function GetTypeInfo: DNTypeInfo;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IAsyncStateMachine')]
  DNIAsyncStateMachine = interface(DNObject)
  ['{78436D2D-A751-3D5C-B4B8-D2275D0542E7}']
  { methods } 

    procedure MoveNext;
    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.INotifyCompletion')]
  DNINotifyCompletion = interface(DNObject)
  ['{D4C9B012-6CD0-35E2-9FE8-56E01550DF1E}']
  { methods } 

    procedure OnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ICriticalNotifyCompletion')]
  DNICriticalNotifyCompletion = interface(DNINotifyCompletion)
  ['{11441015-06E6-3E6A-8764-473239C52FE3}']
  { methods } 

    procedure UnsafeOnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ITuple')]
  DNITuple = interface(DNObject)
  ['{2AEF8AB4-8880-35C3-90A9-47409DCB82E5}']
  { getters & setters } 

    function get_Length: Int32;
    function get_Item(index: Int32): DNObject;

  { propertys } 

    property Length: Int32 read get_Length;
    property Item[index: Int32]: DNObject read get_Item; default;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._Activator')]
  DN_Activator = interface(DNObject)
  ['{03973551-57A1-3900-A2B5-9083E3FF2943}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._Assembly')]
  DN_Assembly = interface(DNObject)
  ['{17156360-2F1A-384A-BC52-FDE93C215C5B}']
  { getters & setters } 

    function get_CodeBase: string;
    function get_EscapedCodeBase: string;
    function get_FullName: string;
    function get_EntryPoint: DNMethodInfo;
    function get_Location: string;
    function get_Evidence: DNEvidence;
    function get_GlobalAssemblyCache: Boolean;

  { events } 

    procedure add_ModuleResolve(value: DNModuleResolveEventHandler);
    procedure remove_ModuleResolve(value: DNModuleResolveEventHandler);

  { methods } 

    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType; overload;
    function GetName: DNAssemblyName; overload;
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function GetExportedTypes: TArray<DNType>;
    function GetTypes: TArray<DNType>;
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    function GetManifestResourceStream(name: string): DNStream; overload;
    function GetFile(name: string): DNFileStream;
    function GetFiles: TArray<DNFileStream>; overload;
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    function GetManifestResourceNames: TArray<string>;
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetModules: TArray<DNModule>; overload;
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetModule(name: string): DNModule;
    function GetReferencedAssemblies: TArray<DNAssemblyName>;

  { propertys } 

    property CodeBase: string read get_CodeBase;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property FullName: string read get_FullName;
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    property Location: string read get_Location;
    property Evidence: DNEvidence read get_Evidence;
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._AssemblyBuilder')]
  DN_AssemblyBuilder = interface(DNObject)
  ['{BEBB2505-8B54-3443-AEAD-142A16DD9CC7}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._AssemblyName')]
  DN_AssemblyName = interface(DNObject)
  ['{B42B6AAC-317E-34D5-9FA9-093BB4160C50}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._Attribute')]
  DN_Attribute = interface(DNObject)
  ['{917B14D0-2D9E-38B8-92A9-381ACF52F7C0}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._ConstructorBuilder')]
  DN_ConstructorBuilder = interface(DNObject)
  ['{ED3E4384-D7E2-3FA7-8FFD-8940D330519A}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._ConstructorInfo')]
  DN_ConstructorInfo = interface(DNObject)
  ['{E9A19478-9646-3679-9B10-8411AE1FD57D}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke_2(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject;
    function Invoke_3(obj: DNObject; parameters: TArray<DNObject>): DNObject;
    function Invoke_4(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject;
    function Invoke_5(parameters: TArray<DNObject>): DNObject;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._CustomAttributeBuilder')]
  DN_CustomAttributeBuilder = interface(DNObject)
  ['{BE9ACCE8-AAFF-3B91-81AE-8211663F5CAD}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._EnumBuilder')]
  DN_EnumBuilder = interface(DNObject)
  ['{C7BD73DE-9F85-3290-88EE-090B8BDFE2DF}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._EventBuilder')]
  DN_EventBuilder = interface(DNObject)
  ['{AADABA99-895D-3D65-9760-B1F12621FAE8}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._EventInfo')]
  DN_EventInfo = interface(DNObject)
  ['{9DE59C64-D889-35A1-B897-587D74469E5B}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Attributes: DNEventAttributes;
    function get_EventHandlerType: DNType;
    function get_IsSpecialName: Boolean;
    function get_IsMulticast: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetAddMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRemoveMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRaiseMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetAddMethod: DNMethodInfo; overload;
    function GetRemoveMethod: DNMethodInfo; overload;
    function GetRaiseMethod: DNMethodInfo; overload;
    procedure AddEventHandler(target: DNObject; handler: DNDelegate);
    procedure RemoveEventHandler(target: DNObject; handler: DNDelegate);

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Attributes: DNEventAttributes read get_Attributes;
    property EventHandlerType: DNType read get_EventHandlerType;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsMulticast: Boolean read get_IsMulticast;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._Exception')]
  DN_Exception = interface(DNObject)
  ['{B36B5C63-42EF-38BC-A07E-0B34C98F164A}']
  { getters & setters } 

    function get_Message: string;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);

  { propertys } 

    property Message: string read get_Message;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._FieldBuilder')]
  DN_FieldBuilder = interface(DNObject)
  ['{CE1A3BF5-975E-30CC-97C9-1EF70F8F3993}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._FieldInfo')]
  DN_FieldInfo = interface(DNObject)
  ['{8A7C1442-A9FB-366B-80D8-4939FFA6DBE0}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_FieldType: DNType;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Attributes: DNFieldAttributes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetValue(obj: DNObject): DNObject;
    function GetValueDirect(obj: DNTypedReference): DNObject;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    procedure SetValue(obj: DNObject; value: DNObject); overload;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property FieldType: DNType read get_FieldType;
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    property Attributes: DNFieldAttributes read get_Attributes;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._ILGenerator')]
  DN_ILGenerator = interface(DNObject)
  ['{A4924B27-6E3B-37F7-9B83-A4501955E6A7}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._LocalBuilder')]
  DN_LocalBuilder = interface(DNObject)
  ['{4E6350D1-A08B-3DEC-9A3E-C465F9AEEC0C}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._MemberInfo')]
  DN_MemberInfo = interface(DNObject)
  ['{F7102FA9-CABB-3A74-A6DA-B4567EF1B079}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._MethodBase')]
  DN_MethodBase = interface(DNObject)
  ['{6240837A-707F-3181-8E98-A36AE086766B}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr); overload;
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._MethodBuilder')]
  DN_MethodBuilder = interface(DNObject)
  ['{007D8A14-FDF3-363E-9A0B-FEC0618260A2}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._MethodInfo')]
  DN_MethodInfo = interface(DNObject)
  ['{FFCC1B5D-ECB8-38DD-9B01-3DC8ABC2AA5F}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr); overload;
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetBaseDefinition: DNMethodInfo;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property ReturnType: DNType read get_ReturnType;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._MethodRental')]
  DN_MethodRental = interface(DNObject)
  ['{C2323C25-F57F-3880-8A4D-12EBEA7A5852}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._Module')]
  DN_Module = interface(DNObject)
  ['{D002E9BA-D9E3-3749-B1D3-D565A08B13E7}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._ModuleBuilder')]
  DN_ModuleBuilder = interface(DNObject)
  ['{D05FFA9A-04AF-3519-8EE1-8D93AD73430B}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._ParameterBuilder')]
  DN_ParameterBuilder = interface(DNObject)
  ['{36329EBA-F97A-3565-BC07-0ED5C6EF19FC}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._ParameterInfo')]
  DN_ParameterInfo = interface(DNObject)
  ['{993634C4-E47A-32CC-BE08-85F567DC27D6}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._PropertyBuilder')]
  DN_PropertyBuilder = interface(DNObject)
  ['{15F9A479-9397-3A63-ACBD-F51977FB0F02}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._PropertyInfo')]
  DN_PropertyInfo = interface(DNObject)
  ['{F59ED4E4-E68F-3218-BD77-061AA82824BF}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_IsSpecialName: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    function ToString: string;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetIndexParameters: TArray<DNParameterInfo>;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property PropertyType: DNType read get_PropertyType;
    property Attributes: DNPropertyAttributes read get_Attributes;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property IsSpecialName: Boolean read get_IsSpecialName;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._SignatureHelper')]
  DN_SignatureHelper = interface(DNObject)
  ['{7D13DD37-5A04-393C-BBCA-A5FEA802893D}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._Thread')]
  DN_Thread = interface(DNObject)
  ['{C281C7F1-4AA9-3517-961A-463CFED57E75}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._Type')]
  DN_Type = interface(DNObject)
  ['{BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_TypeInitializer: DNConstructorInfo;
    function get_Attributes: DNTypeAttributes;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;

  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);
    function ToString: string;
    function Equals(other: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetArrayRank: Int32;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetElementType: DNType;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function Equals(o: DNType): Boolean; overload;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property GUID: DNGuid read get_GUID;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices._TypeBuilder')]
  DN_TypeBuilder = interface(DNObject)
  ['{7E5678EE-48B3-3F83-B076-C58543498A58}']
  { methods } 

    procedure GetTypeInfoCount(out pcTInfo: UInt32);
    procedure GetTypeInfo(iTInfo: UInt32; lcid: UInt32; ppTInfo: IntPtr);
    procedure GetIDsOfNames(out riid: DNGuid; rgszNames: IntPtr; cNames: UInt32; lcid: UInt32; rgDispId: IntPtr);
    procedure Invoke(dispIdMember: UInt32; out riid: DNGuid; lcid: UInt32; wFlags: Int16; pDispParams: IntPtr; pVarResult: IntPtr; pExcepInfo: IntPtr; puArgErr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IBindCtx')]
  DNIBindCtx = interface(DNObject)
  ['{0000000E-0000-0000-C000-000000000046}']
  { methods } 

    procedure RegisterObjectBound(punk: DNObject);
    procedure RevokeObjectBound(punk: DNObject);
    procedure ReleaseBoundObjects;
    procedure SetBindOptions(out pbindopts: DNComTypes_BIND_OPTS);
    procedure GetBindOptions(out pbindopts: DNComTypes_BIND_OPTS);
    procedure GetRunningObjectTable(out pprot: DNIRunningObjectTable);
    procedure RegisterObjectParam(pszKey: string; punk: DNObject);
    procedure GetObjectParam(pszKey: string; out ppunk: DNObject);
    procedure EnumObjectParam(out ppenum: DNIEnumString);
    function RevokeObjectParam(pszKey: string): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPoint')]
  DNIConnectionPoint = interface(DNObject)
  ['{B196B286-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure GetConnectionInterface(out pIID: DNGuid);
    procedure GetConnectionPointContainer(out ppCPC: DNIConnectionPointContainer);
    procedure Advise(pUnkSink: DNObject; out pdwCookie: Int32);
    procedure Unadvise(dwCookie: Int32);
    procedure EnumConnections(out ppEnum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPointContainer')]
  DNIConnectionPointContainer = interface(DNObject)
  ['{B196B284-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure EnumConnectionPoints(out ppEnum: DNIEnumConnectionPoints);
    procedure FindConnectionPoint(out riid: DNGuid; out ppCP: DNIConnectionPoint);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints')]
  DNIEnumConnectionPoints = interface(DNObject)
  ['{B196B285-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNIConnectionPoint>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnectionPoints);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnections')]
  DNIEnumConnections = interface(DNObject)
  ['{B196B287-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNComTypes_CONNECTDATA>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumMoniker')]
  DNIEnumMoniker = interface(DNObject)
  ['{00000102-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNIMoniker>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumString')]
  DNIEnumString = interface(DNObject)
  ['{00000101-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<string>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumString);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumVARIANT')]
  DNIEnumVARIANT = interface(DNObject)
  ['{00020404-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgVar: TArray<DNObject>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    function Clone: DNIEnumVARIANT;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMoniker')]
  DNIMoniker = interface(DNObject)
  ['{0000000F-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pStm: DNIStream);
    procedure Save(pStm: DNIStream; fClearDirty: Boolean);
    procedure GetSizeMax(out pcbSize: Int64);
    procedure BindToObject(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riidResult: DNGuid; out ppvResult: DNObject);
    procedure BindToStorage(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riid: DNGuid; out ppvObj: DNObject);
    procedure Reduce(pbc: DNIBindCtx; dwReduceHowFar: Int32; out ppmkToLeft: DNIMoniker; out ppmkReduced: DNIMoniker);
    procedure ComposeWith(pmkRight: DNIMoniker; fOnlyIfNotGeneric: Boolean; out ppmkComposite: DNIMoniker);
    procedure Enum(fForward: Boolean; out ppenumMoniker: DNIEnumMoniker);
    function IsEqual(pmkOtherMoniker: DNIMoniker): Int32;
    procedure Hash(out pdwHash: Int32);
    function IsRunning(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pmkNewlyRunning: DNIMoniker): Int32;
    procedure GetTimeOfLastChange(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out pFileTime: DNComTypes_FILETIME);
    procedure Inverse(out ppmk: DNIMoniker);
    procedure CommonPrefixWith(pmkOther: DNIMoniker; out ppmkPrefix: DNIMoniker);
    procedure RelativePathTo(pmkOther: DNIMoniker; out ppmkRelPath: DNIMoniker);
    procedure GetDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out ppszDisplayName: string);
    procedure ParseDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pszDisplayName: string; out pchEaten: Int32; out ppmkOut: DNIMoniker);
    function IsSystemMoniker(out pdwMksys: Int32): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IPersistFile')]
  DNIPersistFile = interface(DNObject)
  ['{0000010B-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pszFileName: string; dwMode: Int32);
    procedure Save(pszFileName: string; fRemember: Boolean);
    procedure SaveCompleted(pszFileName: string);
    procedure GetCurFile(out ppszFileName: string);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IRunningObjectTable')]
  DNIRunningObjectTable = interface(DNObject)
  ['{00000010-0000-0000-C000-000000000046}']
  { methods } 

    function &Register(grfFlags: Int32; punkObject: DNObject; pmkObjectName: DNIMoniker): Int32;
    procedure Revoke(dwRegister: Int32);
    function IsRunning(pmkObjectName: DNIMoniker): Int32;
    function GetObject(pmkObjectName: DNIMoniker; out ppunkObject: DNObject): Int32;
    procedure NoteChangeTime(dwRegister: Int32; out pfiletime: DNComTypes_FILETIME);
    function GetTimeOfLastChange(pmkObjectName: DNIMoniker; out pfiletime: DNComTypes_FILETIME): Int32;
    procedure EnumRunning(out ppenumMoniker: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IStream')]
  DNIStream = interface(DNObject)
  ['{0000000C-0000-0000-C000-000000000046}']
  { methods } 

    procedure Read([out]pv: TArray<Byte>; cb: Int32; pcbRead: IntPtr);
    procedure Write(pv: TArray<Byte>; cb: Int32; pcbWritten: IntPtr);
    procedure Seek(dlibMove: Int64; dwOrigin: Int32; plibNewPosition: IntPtr);
    procedure SetSize(libNewSize: Int64);
    procedure CopyTo(pstm: DNIStream; cb: Int64; pcbRead: IntPtr; pcbWritten: IntPtr);
    procedure Commit(grfCommitFlags: Int32);
    procedure Revert;
    procedure LockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure UnlockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure Stat(out pstatstg: DNComTypes_STATSTG; grfStatFlag: Int32);
    procedure Clone(out ppstm: DNIStream);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeComp')]
  DNITypeComp = interface(DNObject)
  ['{00020403-0000-0000-C000-000000000046}']
  { methods } 

    procedure Bind(szName: string; lHashVal: Int32; wFlags: Int16; out ppTInfo: DNITypeInfo; out pDescKind: DNComTypes_DESCKIND; out pBindPtr: DNComTypes_BINDPTR);
    procedure BindType(szName: string; lHashVal: Int32; out ppTInfo: DNITypeInfo; out ppTComp: DNITypeComp);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo')]
  DNITypeInfo = interface(DNObject)
  ['{00020401-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; [out]rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNComTypes_IMPLTYPEFLAGS);
    procedure GetIDsOfNames([in]rgszNames: TArray<string>; cNames: Int32; [out]pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNComTypes_DISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNComTypes_INVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNComTypes_INVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    procedure ReleaseVarDesc(pVarDesc: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo2')]
  DNITypeInfo2 = interface(DNITypeInfo)
  ['{00020412-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; [out]rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNComTypes_IMPLTYPEFLAGS);
    procedure GetIDsOfNames([in]rgszNames: TArray<string>; cNames: Int32; [out]pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNComTypes_DISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNComTypes_INVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNComTypes_INVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    procedure ReleaseVarDesc(pVarDesc: IntPtr);
    procedure GetTypeKind(out pTypeKind: DNComTypes_TYPEKIND);
    procedure GetTypeFlags(out pTypeFlags: Int32);
    procedure GetFuncIndexOfMemId(memid: Int32; invKind: DNComTypes_INVOKEKIND; out pFuncIndex: Int32);
    procedure GetVarIndexOfMemId(memid: Int32; out pVarIndex: Int32);
    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    procedure GetFuncCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetParamCustData(indexFunc: Int32; indexParam: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetVarCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetImplTypeCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetDocumentation2(memid: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    procedure GetAllCustData(pCustData: IntPtr);
    procedure GetAllFuncCustData(index: Int32; pCustData: IntPtr);
    procedure GetAllParamCustData(indexFunc: Int32; indexParam: Int32; pCustData: IntPtr);
    procedure GetAllVarCustData(index: Int32; pCustData: IntPtr);
    procedure GetAllImplTypeCustData(index: Int32; pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib')]
  DNITypeLib = interface(DNObject)
  ['{00020402-0000-0000-C000-000000000046}']
  { methods } 

    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNComTypes_TYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; [out]ppTInfo: TArray<DNITypeInfo>; [out]rgMemId: TArray<Int32>; out pcFound: Int16);
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib2')]
  DNITypeLib2 = interface(DNITypeLib)
  ['{00020411-0000-0000-C000-000000000046}']
  { methods } 

    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNComTypes_TYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; [out]ppTInfo: TArray<DNITypeInfo>; [out]rgMemId: TArray<Int32>; out pcFound: Int16);
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);
    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    procedure GetDocumentation2(index: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    procedure GetLibStatistics(pcUniqueNames: IntPtr; out pcchUniqueNames: Int32);
    procedure GetAllCustData(pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomAdapter')]
  DNICustomAdapter = interface(DNObject)
  ['{3CC86595-FEB5-3CE9-BA14-D05C8DC3321C}']
  { methods } 

    function GetUnderlyingObject: DNObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomFactory')]
  DNICustomFactory = interface(DNObject)
  ['{0CA9008E-EE90-356E-9F6D-B59E6006B9A4}']
  { methods } 

    function CreateInstance(serverType: DNType): DNMarshalByRefObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomMarshaler')]
  DNICustomMarshaler = interface(DNObject)
  ['{601CD486-04BF-3213-9EA9-06EBE4351D74}']
  { methods } 

    function MarshalNativeToManaged(pNativeData: IntPtr): DNObject;
    function MarshalManagedToNative(ManagedObj: DNObject): IntPtr;
    procedure CleanUpNativeData(pNativeData: IntPtr);
    procedure CleanUpManagedData(ManagedObj: DNObject);
    function GetNativeDataSize: Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomQueryInterface')]
  DNICustomQueryInterface = interface(DNObject)
  ['{8888FE72-8A4D-3E9A-845B-946F7A635805}']
  { methods } 

    function GetInterface(out iid: DNGuid; out ppv: IntPtr): DNCustomQueryInterfaceResult;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.IRegistrationServices')]
  DNIRegistrationServices = interface(DNObject)
  ['{CCBD682C-73A5-4568-B8B0-C7007E11ABA2}']
  { methods } 

    function RegisterAssembly(assembly: DNAssembly; flags: DNAssemblyRegistrationFlags): Boolean;
    function UnregisterAssembly(assembly: DNAssembly): Boolean;
    function GetRegistrableTypesInAssembly(assembly: DNAssembly): TArray<DNType>;
    function GetProgIdForType(&type: DNType): string;
    procedure RegisterTypeForComClients(&type: DNType; out g: DNGuid);
    function GetManagedCategoryGuid: DNGuid;
    function TypeRequiresRegistration(&type: DNType): Boolean;
    function TypeRepresentsComType(&type: DNType): Boolean;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ITypeLibConverter')]
  DNITypeLibConverter = interface(DNObject)
  ['{F1C3BF78-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: DNTypeLibImporterFlags; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; asmNamespace: string; asmVersion: DNVersion): DNAssemblyBuilder; overload;
    function ConvertAssemblyToTypeLib(assembly: DNAssembly; typeLibName: string; flags: DNTypeLibExporterFlags; notifySink: DNITypeLibExporterNotifySink): DNObject;
    function GetPrimaryInteropAssembly(g: DNGuid; major: Int32; minor: Int32; lcid: Int32; out asmName: string; out asmCodeBase: string): Boolean;
    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: Int32; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; unsafeInterfaces: Boolean): DNAssemblyBuilder; overload;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ITypeLibExporterNameProvider')]
  DNITypeLibExporterNameProvider = interface(DNObject)
  ['{FA1F3615-ACB9-486D-9EAC-1BEF87E36B09}']
  { methods } 

    function GetNames: TArray<string>;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ITypeLibExporterNotifySink')]
  DNITypeLibExporterNotifySink = interface(DNObject)
  ['{F1C3BF77-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    procedure ReportEvent(eventKind: DNExporterEventKind; eventCode: Int32; eventMsg: string);
    function ResolveRef(assembly: DNAssembly): DNObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ITypeLibImporterNotifySink')]
  DNITypeLibImporterNotifySink = interface(DNObject)
  ['{F1C3BF76-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    procedure ReportEvent(eventKind: DNImporterEventKind; eventCode: Int32; eventMsg: string);
    function ResolveRef(typeLib: DNObject): DNAssembly;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIBindCtx')]
  DNUCOMIBindCtx = interface(DNObject)
  ['{0000000E-0000-0000-C000-000000000046}']
  { methods } 

    procedure RegisterObjectBound(punk: DNObject);
    procedure RevokeObjectBound(punk: DNObject);
    procedure ReleaseBoundObjects;
    procedure SetBindOptions(out pbindopts: DNInteropServices_BIND_OPTS);
    procedure GetBindOptions(out pbindopts: DNInteropServices_BIND_OPTS);
    procedure GetRunningObjectTable(out pprot: DNUCOMIRunningObjectTable);
    procedure RegisterObjectParam(pszKey: string; punk: DNObject);
    procedure GetObjectParam(pszKey: string; out ppunk: DNObject);
    procedure EnumObjectParam(out ppenum: DNUCOMIEnumString);
    procedure RevokeObjectParam(pszKey: string);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIConnectionPoint')]
  DNUCOMIConnectionPoint = interface(DNObject)
  ['{B196B286-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure GetConnectionInterface(out pIID: DNGuid);
    procedure GetConnectionPointContainer(out ppCPC: DNUCOMIConnectionPointContainer);
    procedure Advise(pUnkSink: DNObject; out pdwCookie: Int32);
    procedure Unadvise(dwCookie: Int32);
    procedure EnumConnections(out ppEnum: DNUCOMIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIConnectionPointContainer')]
  DNUCOMIConnectionPointContainer = interface(DNObject)
  ['{B196B284-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure EnumConnectionPoints(out ppEnum: DNUCOMIEnumConnectionPoints);
    procedure FindConnectionPoint(out riid: DNGuid; out ppCP: DNUCOMIConnectionPoint);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumConnectionPoints')]
  DNUCOMIEnumConnectionPoints = interface(DNObject)
  ['{B196B285-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNUCOMIConnectionPoint>; out pceltFetched: Int32): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    procedure Clone(out ppenum: DNUCOMIEnumConnectionPoints);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumConnections')]
  DNUCOMIEnumConnections = interface(DNObject)
  ['{B196B287-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNInteropServices_CONNECTDATA>; out pceltFetched: Int32): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNUCOMIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumMoniker')]
  DNUCOMIEnumMoniker = interface(DNObject)
  ['{00000102-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNUCOMIMoniker>; out pceltFetched: Int32): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    procedure Clone(out ppenum: DNUCOMIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumString')]
  DNUCOMIEnumString = interface(DNObject)
  ['{00000101-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<string>; out pceltFetched: Int32): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    procedure Clone(out ppenum: DNUCOMIEnumString);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIEnumVARIANT')]
  DNUCOMIEnumVARIANT = interface(DNObject)
  ['{00020404-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; rgvar: Int32; pceltFetched: Int32): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    procedure Clone(ppenum: Int32);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIMoniker')]
  DNUCOMIMoniker = interface(DNObject)
  ['{0000000F-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pStm: DNUCOMIStream);
    procedure Save(pStm: DNUCOMIStream; fClearDirty: Boolean);
    procedure GetSizeMax(out pcbSize: Int64);
    procedure BindToObject(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out riidResult: DNGuid; out ppvResult: DNObject);
    procedure BindToStorage(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out riid: DNGuid; out ppvObj: DNObject);
    procedure Reduce(pbc: DNUCOMIBindCtx; dwReduceHowFar: Int32; out ppmkToLeft: DNUCOMIMoniker; out ppmkReduced: DNUCOMIMoniker);
    procedure ComposeWith(pmkRight: DNUCOMIMoniker; fOnlyIfNotGeneric: Boolean; out ppmkComposite: DNUCOMIMoniker);
    procedure Enum(fForward: Boolean; out ppenumMoniker: DNUCOMIEnumMoniker);
    procedure IsEqual(pmkOtherMoniker: DNUCOMIMoniker);
    procedure Hash(out pdwHash: Int32);
    procedure IsRunning(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; pmkNewlyRunning: DNUCOMIMoniker);
    procedure GetTimeOfLastChange(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out pFileTime: DNInteropServices_FILETIME);
    procedure Inverse(out ppmk: DNUCOMIMoniker);
    procedure CommonPrefixWith(pmkOther: DNUCOMIMoniker; out ppmkPrefix: DNUCOMIMoniker);
    procedure RelativePathTo(pmkOther: DNUCOMIMoniker; out ppmkRelPath: DNUCOMIMoniker);
    procedure GetDisplayName(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; out ppszDisplayName: string);
    procedure ParseDisplayName(pbc: DNUCOMIBindCtx; pmkToLeft: DNUCOMIMoniker; pszDisplayName: string; out pchEaten: Int32; out ppmkOut: DNUCOMIMoniker);
    procedure IsSystemMoniker(out pdwMksys: Int32);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIPersistFile')]
  DNUCOMIPersistFile = interface(DNObject)
  ['{0000010B-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pszFileName: string; dwMode: Int32);
    procedure Save(pszFileName: string; fRemember: Boolean);
    procedure SaveCompleted(pszFileName: string);
    procedure GetCurFile(out ppszFileName: string);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIRunningObjectTable')]
  DNUCOMIRunningObjectTable = interface(DNObject)
  ['{00000010-0000-0000-C000-000000000046}']
  { methods } 

    procedure &Register(grfFlags: Int32; punkObject: DNObject; pmkObjectName: DNUCOMIMoniker; out pdwRegister: Int32);
    procedure Revoke(dwRegister: Int32);
    procedure IsRunning(pmkObjectName: DNUCOMIMoniker);
    procedure GetObject(pmkObjectName: DNUCOMIMoniker; out ppunkObject: DNObject);
    procedure NoteChangeTime(dwRegister: Int32; out pfiletime: DNInteropServices_FILETIME);
    procedure GetTimeOfLastChange(pmkObjectName: DNUCOMIMoniker; out pfiletime: DNInteropServices_FILETIME);
    procedure EnumRunning(out ppenumMoniker: DNUCOMIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMIStream')]
  DNUCOMIStream = interface(DNObject)
  ['{0000000C-0000-0000-C000-000000000046}']
  { methods } 

    procedure Read([out]pv: TArray<Byte>; cb: Int32; pcbRead: IntPtr);
    procedure Write(pv: TArray<Byte>; cb: Int32; pcbWritten: IntPtr);
    procedure Seek(dlibMove: Int64; dwOrigin: Int32; plibNewPosition: IntPtr);
    procedure SetSize(libNewSize: Int64);
    procedure CopyTo(pstm: DNUCOMIStream; cb: Int64; pcbRead: IntPtr; pcbWritten: IntPtr);
    procedure Commit(grfCommitFlags: Int32);
    procedure Revert;
    procedure LockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure UnlockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure Stat(out pstatstg: DNInteropServices_STATSTG; grfStatFlag: Int32);
    procedure Clone(out ppstm: DNUCOMIStream);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMITypeComp')]
  DNUCOMITypeComp = interface(DNObject)
  ['{00020403-0000-0000-C000-000000000046}']
  { methods } 

    procedure Bind(szName: string; lHashVal: Int32; wFlags: Int16; out ppTInfo: DNUCOMITypeInfo; out pDescKind: DNInteropServices_DESCKIND; out pBindPtr: DNInteropServices_BINDPTR);
    procedure BindType(szName: string; lHashVal: Int32; out ppTInfo: DNUCOMITypeInfo; out ppTComp: DNUCOMITypeComp);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMITypeInfo')]
  DNUCOMITypeInfo = interface(DNObject)
  ['{00020401-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNUCOMITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; [out]rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: Int32);
    procedure GetIDsOfNames([in]rgszNames: TArray<string>; cNames: Int32; [out]pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNInteropServices_DISPPARAMS; out pVarResult: DNObject; out pExcepInfo: DNInteropServices_EXCEPINFO; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNInteropServices_INVOKEKIND; out pBstrDllName: string; out pBstrName: string; out pwOrdinal: Int16);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNUCOMITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNInteropServices_INVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNUCOMITypeLib; out pIndex: Int32);
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    procedure ReleaseVarDesc(pVarDesc: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UCOMITypeLib')]
  DNUCOMITypeLib = interface(DNObject)
  ['{00020402-0000-0000-C000-000000000046}']
  { methods } 

    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNUCOMITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNInteropServices_TYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNUCOMITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNUCOMITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; [out]ppTInfo: TArray<DNUCOMITypeInfo>; [out]rgMemId: TArray<Int32>; out pcFound: Int16);
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.IActivationFactory')]
  DNIActivationFactory = interface(DNObject)
  ['{00000035-0000-0000-C000-000000000046}']
  { methods } 

    function ActivateInstance: DNObject;

  end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  [DNTypeName('System.Runtime.Remoting.Activation.IActivator')]
  DNIActivator = interface(DNObject)
  ['{C02BBB79-5AA8-390D-927F-717B7BFF06A1}']
  { getters & setters } 

    function get_NextActivator: DNIActivator;
    procedure set_NextActivator(value: DNIActivator);
    function get_Level: DNActivatorLevel;

  { methods } 

    function Activate(msg: DNIConstructionCallMessage): DNIConstructionReturnMessage;

  { propertys } 

    property NextActivator: DNIActivator read get_NextActivator write set_NextActivator;
    property Level: DNActivatorLevel read get_Level;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IChannel')]
  DNIChannel = interface(DNObject)
  ['{563581E8-C86D-39E2-B2E8-6C23F7987A4B}']
  { getters & setters } 

    function get_ChannelPriority: Int32;
    function get_ChannelName: string;

  { methods } 

    function Parse(url: string; out objectURI: string): string;

  { propertys } 

    property ChannelPriority: Int32 read get_ChannelPriority;
    property ChannelName: string read get_ChannelName;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelReceiver')]
  DNIChannelReceiver = interface(DNIChannel)
  ['{48AD41DA-0872-31DA-9887-F81F213527E6}']
  { getters & setters } 

    function get_ChannelData: DNObject;

  { methods } 

    function GetUrlsForUri(objectURI: string): TArray<string>;
    procedure StartListening(data: DNObject);
    procedure StopListening(data: DNObject);

  { propertys } 

    property ChannelData: DNObject read get_ChannelData;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelSender')]
  DNIChannelSender = interface(DNIChannel)
  ['{10F1D605-E201-3145-B7AE-3AD746701986}']
  { methods } 

    function CreateMessageSink(url: string; remoteChannelData: DNObject; out objectURI: string): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelDataStore')]
  DNIChannelDataStore = interface(DNObject)
  ['{1E250CCD-DC30-3217-A7E4-148F375A0088}']
  { getters & setters } 

    function get_ChannelUris: TArray<string>;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);

  { propertys } 

    property ChannelUris: TArray<string> read get_ChannelUris;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelReceiverHook')]
  DNIChannelReceiverHook = interface(DNObject)
  ['{3A02D3F7-3F40-3022-853D-CFDA765182FE}']
  { getters & setters } 

    function get_ChannelScheme: string;
    function get_WantsToListen: Boolean;
    function get_ChannelSinkChain: DNIServerChannelSink;

  { methods } 

    procedure AddHookChannelUri(channelUri: string);

  { propertys } 

    property ChannelScheme: string read get_ChannelScheme;
    property WantsToListen: Boolean read get_WantsToListen;
    property ChannelSinkChain: DNIServerChannelSink read get_ChannelSinkChain;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IChannelSinkBase')]
  DNIChannelSinkBase = interface(DNObject)
  ['{308DE042-ACC8-32F8-B632-7CB9799D9AA6}']
  { getters & setters } 

    function get_Properties: DNIDictionary;

  { propertys } 

    property Properties: DNIDictionary read get_Properties;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IClientChannelSink')]
  DNIClientChannelSink = interface(DNIChannelSinkBase)
  ['{FF726320-6B92-3E6C-AAAC-F97063D0B142}']
  { getters & setters } 

    function get_NextChannelSink: DNIClientChannelSink;

  { methods } 

    procedure ProcessMessage(msg: DNIMessage; requestHeaders: DNITransportHeaders; requestStream: DNStream; out responseHeaders: DNITransportHeaders; out responseStream: DNStream);
    procedure AsyncProcessRequest(sinkStack: DNIClientChannelSinkStack; msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    procedure AsyncProcessResponse(sinkStack: DNIClientResponseChannelSinkStack; state: DNObject; headers: DNITransportHeaders; stream: DNStream);
    function GetRequestStream(msg: DNIMessage; headers: DNITransportHeaders): DNStream;

  { propertys } 

    property NextChannelSink: DNIClientChannelSink read get_NextChannelSink;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IServerChannelSink')]
  DNIServerChannelSink = interface(DNIChannelSinkBase)
  ['{21B5F37B-BEF3-354C-8F84-0F9F0863F5C5}']
  { getters & setters } 

    function get_NextChannelSink: DNIServerChannelSink;

  { methods } 

    function ProcessMessage(sinkStack: DNIServerChannelSinkStack; requestMsg: DNIMessage; requestHeaders: DNITransportHeaders; requestStream: DNStream; out responseMsg: DNIMessage; out responseHeaders: DNITransportHeaders; out responseStream: DNStream): DNServerProcessing;
    procedure AsyncProcessResponse(sinkStack: DNIServerResponseChannelSinkStack; state: DNObject; msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    function GetResponseStream(sinkStack: DNIServerResponseChannelSinkStack; state: DNObject; msg: DNIMessage; headers: DNITransportHeaders): DNStream;

  { propertys } 

    property NextChannelSink: DNIServerChannelSink read get_NextChannelSink;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IClientChannelSinkProvider')]
  DNIClientChannelSinkProvider = interface(DNObject)
  ['{3F8742C2-AC57-3440-A283-FE5FF4C75025}']
  { getters & setters } 

    function get_Next: DNIClientChannelSinkProvider;
    procedure set_Next(value: DNIClientChannelSinkProvider);

  { methods } 

    function CreateSink(channel: DNIChannelSender; url: string; remoteChannelData: DNObject): DNIClientChannelSink;

  { propertys } 

    property Next: DNIClientChannelSinkProvider read get_Next write set_Next;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IClientFormatterSinkProvider')]
  DNIClientFormatterSinkProvider = interface(DNIClientChannelSinkProvider)
  ['{6D94B6F3-DA91-3C2F-B876-083769667468}']
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack')]
  DNIClientResponseChannelSinkStack = interface(DNObject)
  ['{3AFAB213-F5A2-3241-93BA-329EA4BA8016}']
  { methods } 

    procedure AsyncProcessResponse(headers: DNITransportHeaders; stream: DNStream);
    procedure DispatchReplyMessage(msg: DNIMessage);
    procedure DispatchException(e: DNException);

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IClientChannelSinkStack')]
  DNIClientChannelSinkStack = interface(DNIClientResponseChannelSinkStack)
  ['{3A5FDE6B-DB46-34E8-BACD-16EA5A440540}']
  { methods } 

    procedure Push(sink: DNIClientChannelSink; state: DNObject);
    function Pop(sink: DNIClientChannelSink): DNObject;

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.ISecurableChannel')]
  DNISecurableChannel = interface(DNObject)
  ['{2C31F750-F729-3A69-8C5D-11184B3E76E7}']
  { getters & setters } 

    function get_IsSecured: Boolean;
    procedure set_IsSecured(value: Boolean);

  { propertys } 

    property IsSecured: Boolean read get_IsSecured write set_IsSecured;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IServerChannelSinkProvider')]
  DNIServerChannelSinkProvider = interface(DNObject)
  ['{7DD6E975-24EA-323C-A98C-0FDE96F9C4E6}']
  { getters & setters } 

    function get_Next: DNIServerChannelSinkProvider;
    procedure set_Next(value: DNIServerChannelSinkProvider);

  { methods } 

    procedure GetChannelData(channelData: DNIChannelDataStore);
    function CreateSink(channel: DNIChannelReceiver): DNIServerChannelSink;

  { propertys } 

    property Next: DNIServerChannelSinkProvider read get_Next write set_Next;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IServerFormatterSinkProvider')]
  DNIServerFormatterSinkProvider = interface(DNIServerChannelSinkProvider)
  ['{042B5200-4317-3E4D-B653-7E9A08F1A5F2}']
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack')]
  DNIServerResponseChannelSinkStack = interface(DNObject)
  ['{9BE679A6-61FD-38FC-A7B2-89982D33338B}']
  { methods } 

    procedure AsyncProcessResponse(msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    function GetResponseStream(msg: DNIMessage; headers: DNITransportHeaders): DNStream;

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IServerChannelSinkStack')]
  DNIServerChannelSinkStack = interface(DNIServerResponseChannelSinkStack)
  ['{E694A733-768D-314D-B317-DCEAD136B11D}']
  { methods } 

    procedure Push(sink: DNIServerChannelSink; state: DNObject);
    function Pop(sink: DNIServerChannelSink): DNObject;
    procedure Store(sink: DNIServerChannelSink; state: DNObject);
    procedure StoreAndDispatch(sink: DNIServerChannelSink; state: DNObject);
    procedure ServerCallback(ar: DNIAsyncResult);

  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.ITransportHeaders')]
  DNITransportHeaders = interface(DNObject)
  ['{1AC82FBE-4FF0-383C-BBFD-FE40ECB3628D}']
  { getters & setters } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);

  { methods } 

    function GetEnumerator: DNIEnumerator;

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContextAttribute')]
  DNIContextAttribute = interface(DNObject)
  ['{4A68BAA3-27AA-314A-BDBB-6AE9BDFC0420}']
  { methods } 

    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    procedure GetPropertiesForNewContext(msg: DNIConstructionCallMessage);

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContextProperty')]
  DNIContextProperty = interface(DNObject)
  ['{F01D896D-8D5F-3235-BE59-20E1E10DC22A}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function IsNewContextOK(newCtx: DNContext): Boolean;
    procedure Freeze(newContext: DNContext);

  { propertys } 

    property Name: string read get_Name;
  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContextPropertyActivator')]
  DNIContextPropertyActivator = interface(DNObject)
  ['{7197B56B-5FA1-31EF-B38B-62FEE737277F}']
  { methods } 

    function IsOKToActivate(msg: DNIConstructionCallMessage): Boolean;
    procedure CollectFromClientContext(msg: DNIConstructionCallMessage);
    function DeliverClientContextToServerContext(msg: DNIConstructionCallMessage): Boolean;
    procedure CollectFromServerContext(msg: DNIConstructionReturnMessage);
    function DeliverServerContextToClientContext(msg: DNIConstructionReturnMessage): Boolean;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeClientContextSink')]
  DNIContributeClientContextSink = interface(DNObject)
  ['{4DB956B7-69D0-312A-AA75-44FB55FD5D4B}']
  { methods } 

    function GetClientContextSink(nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeDynamicSink')]
  DNIContributeDynamicSink = interface(DNObject)
  ['{A0FE9B86-0C06-32CE-85FA-2FF1B58697FB}']
  { methods } 

    function GetDynamicSink: DNIDynamicMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeEnvoySink')]
  DNIContributeEnvoySink = interface(DNObject)
  ['{124777B6-0308-3569-97E5-E6FE88EAE4EB}']
  { methods } 

    function GetEnvoySink(obj: DNMarshalByRefObject; nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeObjectSink')]
  DNIContributeObjectSink = interface(DNObject)
  ['{6A5D38BC-2789-3546-81A1-F10C0FB59366}']
  { methods } 

    function GetObjectSink(obj: DNMarshalByRefObject; nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IContributeServerContextSink')]
  DNIContributeServerContextSink = interface(DNObject)
  ['{0CAA23EC-F78C-39C9-8D25-B7A9CE4097A7}']
  { methods } 

    function GetServerContextSink(nextSink: DNIMessageSink): DNIMessageSink;

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IDynamicMessageSink')]
  DNIDynamicMessageSink = interface(DNObject)
  ['{C74076BB-8A2D-3C20-A542-625329E9AF04}']
  { methods } 

    procedure ProcessMessageStart(reqMsg: DNIMessage; bCliSide: Boolean; bAsync: Boolean);
    procedure ProcessMessageFinish(replyMsg: DNIMessage; bCliSide: Boolean; bAsync: Boolean);

  end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  [DNTypeName('System.Runtime.Remoting.Contexts.IDynamicProperty')]
  DNIDynamicProperty = interface(DNObject)
  ['{00A358D4-4D58-3B9D-8FB6-FB7F6BC1713B}']
  { getters & setters } 

    function get_Name: string;

  { propertys } 

    property Name: string read get_Name;
  end;

  //-------------namespace: System.Runtime.Remoting----------------
  [DNTypeName('System.Runtime.Remoting.IChannelInfo')]
  DNIChannelInfo = interface(DNObject)
  ['{855E6566-014A-3FE8-AA70-1EAC771E3A88}']
  { getters & setters } 

    function get_ChannelData: TArray<DNObject>;
    procedure set_ChannelData(value: TArray<DNObject>);

  { propertys } 

    property ChannelData: TArray<DNObject> read get_ChannelData write set_ChannelData;
  end;

  //-------------namespace: System.Runtime.Remoting----------------
  [DNTypeName('System.Runtime.Remoting.IEnvoyInfo')]
  DNIEnvoyInfo = interface(DNObject)
  ['{2A6E91B9-A874-38E4-99C2-C5D83D78140D}']
  { getters & setters } 

    function get_EnvoySinks: DNIMessageSink;
    procedure set_EnvoySinks(value: DNIMessageSink);

  { propertys } 

    property EnvoySinks: DNIMessageSink read get_EnvoySinks write set_EnvoySinks;
  end;

  //-------------namespace: System.Runtime.Remoting----------------
  [DNTypeName('System.Runtime.Remoting.IObjectHandle')]
  DNIObjectHandle = interface(DNObject)
  ['{C460E2B4-E199-412A-8456-84DC3E4838C3}']
  { methods } 

    function Unwrap: DNObject;

  end;

  //-------------namespace: System.Runtime.Remoting----------------
  [DNTypeName('System.Runtime.Remoting.IRemotingTypeInfo')]
  DNIRemotingTypeInfo = interface(DNObject)
  ['{C09EFFA9-1FFE-3A52-A733-6236CBC45E7B}']
  { getters & setters } 

    function get_TypeName: string;
    procedure set_TypeName(value: string);

  { methods } 

    function CanCastTo(fromType: DNType; o: DNObject): Boolean;

  { propertys } 

    property TypeName: string read get_TypeName write set_TypeName;
  end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  [DNTypeName('System.Runtime.Remoting.Lifetime.ILease')]
  DNILease = interface(DNObject)
  ['{53A561F2-CBBF-3748-BFFE-2180002DB3DF}']
  { getters & setters } 

    function get_RenewOnCallTime: DNTimeSpan;
    procedure set_RenewOnCallTime(value: DNTimeSpan);
    function get_SponsorshipTimeout: DNTimeSpan;
    procedure set_SponsorshipTimeout(value: DNTimeSpan);
    function get_InitialLeaseTime: DNTimeSpan;
    procedure set_InitialLeaseTime(value: DNTimeSpan);
    function get_CurrentLeaseTime: DNTimeSpan;
    function get_CurrentState: DNLeaseState;

  { methods } 

    procedure &Register(obj: DNISponsor; renewalTime: DNTimeSpan); overload;
    procedure &Register(obj: DNISponsor); overload;
    procedure Unregister(obj: DNISponsor);
    function Renew(renewalTime: DNTimeSpan): DNTimeSpan;

  { propertys } 

    property RenewOnCallTime: DNTimeSpan read get_RenewOnCallTime write set_RenewOnCallTime;
    property SponsorshipTimeout: DNTimeSpan read get_SponsorshipTimeout write set_SponsorshipTimeout;
    property InitialLeaseTime: DNTimeSpan read get_InitialLeaseTime write set_InitialLeaseTime;
    property CurrentLeaseTime: DNTimeSpan read get_CurrentLeaseTime;
    property CurrentState: DNLeaseState read get_CurrentState;
  end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  [DNTypeName('System.Runtime.Remoting.Lifetime.ISponsor')]
  DNISponsor = interface(DNObject)
  ['{675591AF-0508-3131-A7CC-287D265CA7D6}']
  { methods } 

    function Renewal(lease: DNILease): DNTimeSpan;

  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.ILogicalThreadAffinative')]
  DNILogicalThreadAffinative = interface(DNObject)
  ['{4D125449-BA27-3927-8589-3E1B34B622E5}']
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.IMessage')]
  DNIMessage = interface(DNObject)
  ['{1A8B0DE6-B825-38C5-B744-8F93075FD6FA}']
  { getters & setters } 

    function get_Properties: DNIDictionary;

  { propertys } 

    property Properties: DNIDictionary read get_Properties;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.IMethodMessage')]
  DNIMethodMessage = interface(DNIMessage)
  ['{8E5E0B95-750E-310D-892C-8CA7231CF75B}']
  { getters & setters } 

    function get_Uri: string;
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_HasVarArgs: Boolean;
    function get_LogicalCallContext: DNLogicalCallContext;
    function get_MethodBase: DNMethodBase;

  { methods } 

    function GetArgName(index: Int32): string;
    function GetArg(argNum: Int32): DNObject;

  { propertys } 

    property Uri: string read get_Uri;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
    property MethodBase: DNMethodBase read get_MethodBase;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.IMethodCallMessage')]
  DNIMethodCallMessage = interface(DNIMethodMessage)
  ['{B90EFAA6-25E4-33D2-ACA3-94BF74DC4AB9}']
  { getters & setters } 

    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;

  { methods } 

    function GetInArgName(index: Int32): string;
    function GetInArg(argNum: Int32): DNObject;

  { propertys } 

    property InArgCount: Int32 read get_InArgCount;
    property InArgs: TArray<DNObject> read get_InArgs;
  end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  [DNTypeName('System.Runtime.Remoting.Activation.IConstructionCallMessage')]
  DNIConstructionCallMessage = interface(DNIMethodCallMessage)
  ['{FA28E3AF-7D09-31D5-BEEB-7F2626497CDE}']
  { getters & setters } 

    function get_Activator: DNIActivator;
    procedure set_Activator(value: DNIActivator);
    function get_CallSiteActivationAttributes: TArray<DNObject>;
    function get_ActivationTypeName: string;
    function get_ActivationType: DNType;
    function get_ContextProperties: DNIList;

  { propertys } 

    property Activator: DNIActivator read get_Activator write set_Activator;
    property CallSiteActivationAttributes: TArray<DNObject> read get_CallSiteActivationAttributes;
    property ActivationTypeName: string read get_ActivationTypeName;
    property ActivationType: DNType read get_ActivationType;
    property ContextProperties: DNIList read get_ContextProperties;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.IMethodReturnMessage')]
  DNIMethodReturnMessage = interface(DNIMethodMessage)
  ['{F617690A-55F4-36AF-9149-D199831F8594}']
  { getters & setters } 

    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;

  { methods } 

    function GetOutArgName(index: Int32): string;
    function GetOutArg(argNum: Int32): DNObject;

  { propertys } 

    property OutArgCount: Int32 read get_OutArgCount;
    property OutArgs: TArray<DNObject> read get_OutArgs;
    property Exception: DNException read get_Exception;
    property ReturnValue: DNObject read get_ReturnValue;
  end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  [DNTypeName('System.Runtime.Remoting.Activation.IConstructionReturnMessage')]
  DNIConstructionReturnMessage = interface(DNIMethodReturnMessage)
  ['{CA0AB564-F5E9-3A7F-A80B-EB0AEEFA44E9}']
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.IMessageCtrl')]
  DNIMessageCtrl = interface(DNObject)
  ['{3677CBB0-784D-3C15-BBC8-75CD7DC3901E}']
  { methods } 

    procedure Cancel(msToCancel: Int32);

  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.IMessageSink')]
  DNIMessageSink = interface(DNObject)
  ['{941F8AAA-A353-3B1D-A019-12E44377F1CD}']
  { getters & setters } 

    function get_NextSink: DNIMessageSink;

  { methods } 

    function SyncProcessMessage(msg: DNIMessage): DNIMessage;
    function AsyncProcessMessage(msg: DNIMessage; replySink: DNIMessageSink): DNIMessageCtrl;

  { propertys } 

    property NextSink: DNIMessageSink read get_NextSink;
  end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  [DNTypeName('System.Runtime.Remoting.Channels.IClientFormatterSink')]
  DNIClientFormatterSink = interface(DNIMessageSink)
  ['{46527C03-B144-3CF0-86B3-B8776148A6E9}']
  end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd')]
  DNISoapXsd = interface(DNObject)
  ['{80031D2A-AD59-3FB4-97F3-B864D71DA86B}']
  { methods } 

    function GetXsdType: string;

  end;

  //-------------namespace: System.Runtime.Remoting.Services----------------
  [DNTypeName('System.Runtime.Remoting.Services.ITrackingHandler')]
  DNITrackingHandler = interface(DNObject)
  ['{03EC7D10-17A5-3585-9A2E-0596FCAC3870}']
  { methods } 

    procedure MarshaledObject(obj: DNObject; &or: DNObjRef);
    procedure UnmarshaledObject(obj: DNObject; &or: DNObjRef);
    procedure DisconnectedObject(obj: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  [DNTypeName('System.Runtime.Serialization.Formatters.IFieldInfo')]
  DNIFieldInfo = interface(DNObject)
  ['{CC18FD4D-AA2D-3AB4-9848-584BBAE4AB44}']
  { getters & setters } 

    function get_FieldNames: TArray<string>;
    procedure set_FieldNames(value: TArray<string>);
    function get_FieldTypes: TArray<DNType>;
    procedure set_FieldTypes(value: TArray<DNType>);

  { propertys } 

    property FieldNames: TArray<string> read get_FieldNames write set_FieldNames;
    property FieldTypes: TArray<DNType> read get_FieldTypes write set_FieldTypes;
  end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  [DNTypeName('System.Runtime.Serialization.Formatters.ISoapMessage')]
  DNISoapMessage = interface(DNObject)
  ['{E699146C-7793-3455-9BEF-964C90D8F995}']
  { getters & setters } 

    function get_ParamNames: TArray<string>;
    procedure set_ParamNames(value: TArray<string>);
    function get_ParamValues: TArray<DNObject>;
    procedure set_ParamValues(value: TArray<DNObject>);
    function get_ParamTypes: TArray<DNType>;
    procedure set_ParamTypes(value: TArray<DNType>);
    function get_MethodName: string;
    procedure set_MethodName(value: string);
    function get_XmlNameSpace: string;
    procedure set_XmlNameSpace(value: string);
    function get_Headers: TArray<DNHeader>;
    procedure set_Headers(value: TArray<DNHeader>);

  { propertys } 

    property ParamNames: TArray<string> read get_ParamNames write set_ParamNames;
    property ParamValues: TArray<DNObject> read get_ParamValues write set_ParamValues;
    property ParamTypes: TArray<DNType> read get_ParamTypes write set_ParamTypes;
    property MethodName: string read get_MethodName write set_MethodName;
    property XmlNameSpace: string read get_XmlNameSpace write set_XmlNameSpace;
    property Headers: TArray<DNHeader> read get_Headers write set_Headers;
  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IDeserializationCallback')]
  DNIDeserializationCallback = interface(DNObject)
  ['{AB3F47E4-C227-3B05-BF9F-94649BEF9888}']
  { methods } 

    procedure OnDeserialization(sender: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IFormatter')]
  DNIFormatter = interface(DNObject)
  ['{93D7A8C5-D2EB-319B-A374-A65D321F2AA9}']
  { getters & setters } 

    function get_SurrogateSelector: DNISurrogateSelector;
    procedure set_SurrogateSelector(value: DNISurrogateSelector);
    function get_Binder: DNSerializationBinder;
    procedure set_Binder(value: DNSerializationBinder);
    function get_Context: DNStreamingContext;
    procedure set_Context(value: DNStreamingContext);

  { methods } 

    function Deserialize(serializationStream: DNStream): DNObject;
    procedure Serialize(serializationStream: DNStream; graph: DNObject);

  { propertys } 

    property SurrogateSelector: DNISurrogateSelector read get_SurrogateSelector write set_SurrogateSelector;
    property Binder: DNSerializationBinder read get_Binder write set_Binder;
    property Context: DNStreamingContext read get_Context write set_Context;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  [DNTypeName('System.Runtime.Remoting.Messaging.IRemotingFormatter')]
  DNIRemotingFormatter = interface(DNIFormatter)
  ['{AE1850FD-3596-3727-A242-2FC31C5A0312}']
  { methods } 

    function Deserialize(serializationStream: DNStream; handler: DNHeaderHandler): DNObject;
    procedure Serialize(serializationStream: DNStream; graph: DNObject; headers: TArray<DNHeader>);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IFormatterConverter')]
  DNIFormatterConverter = interface(DNObject)
  ['{F4F5C303-FAD3-3D0C-A4DF-BB82B5EE308F}']
  { methods } 

    function Convert(value: DNObject; &type: DNType): DNObject; overload;
    function Convert(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    function ToBoolean(value: DNObject): Boolean;
    function ToChar(value: DNObject): Char;
    function ToSByte(value: DNObject): SByte;
    function ToByte(value: DNObject): Byte;
    function ToInt16(value: DNObject): Int16;
    function ToUInt16(value: DNObject): UInt16;
    function ToInt32(value: DNObject): Int32;
    function ToUInt32(value: DNObject): UInt32;
    function ToInt64(value: DNObject): Int64;
    function ToUInt64(value: DNObject): UInt64;
    function ToSingle(value: DNObject): Single;
    function ToDouble(value: DNObject): Double;
    function ToDecimal(value: DNObject): DNDecimal;
    function ToDateTime(value: DNObject): DNDateTime;
    function ToString(value: DNObject): string;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IObjectReference')]
  DNIObjectReference = interface(DNObject)
  ['{6E70ED5F-0439-38CE-83BB-860F1421F29F}']
  { methods } 

    function GetRealObject(context: DNStreamingContext): DNObject;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISafeSerializationData')]
  DNISafeSerializationData = interface(DNObject)
  ['{6638EFCA-7315-308E-9696-D2EE876EBC8C}']
  { methods } 

    procedure CompleteDeserialization(deserialized: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISerializable')]
  DNISerializable = interface(DNObject)
  ['{D0EEAA62-3D30-3EE2-B896-A2F34DDA47D8}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISerializationSurrogate')]
  DNISerializationSurrogate = interface(DNObject)
  ['{62339172-DBFA-337B-8AC8-053B241E06AB}']
  { methods } 

    procedure GetObjectData(obj: DNObject; info: DNSerializationInfo; context: DNStreamingContext);
    function SetObjectData(obj: DNObject; info: DNSerializationInfo; context: DNStreamingContext; selector: DNISurrogateSelector): DNObject;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISurrogateSelector')]
  DNISurrogateSelector = interface(DNObject)
  ['{7C66FF18-A1A5-3E19-857B-0E7B6A9E3F38}']
  { methods } 

    procedure ChainSelector(selector: DNISurrogateSelector);
    function GetSurrogate(&type: DNType; context: DNStreamingContext; out selector: DNISurrogateSelector): DNISerializationSurrogate;
    function GetNextSelector: DNISurrogateSelector;

  end;

  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.ICspAsymmetricAlgorithm')]
  DNICspAsymmetricAlgorithm = interface(DNObject)
  ['{494A7583-190E-3693-9EC4-DE54DC6A84A2}']
  { getters & setters } 

    function get_CspKeyContainerInfo: DNCspKeyContainerInfo;

  { methods } 

    function ExportCspBlob(includePrivateParameters: Boolean): TArray<Byte>;
    procedure ImportCspBlob(rawData: TArray<Byte>);

  { propertys } 

    property CspKeyContainerInfo: DNCspKeyContainerInfo read get_CspKeyContainerInfo;
  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.IEvidenceFactory')]
  DNIEvidenceFactory = interface(DNObject)
  ['{35A8F3AC-FE28-360F-A0C0-9A4D50C4682A}']
  { getters & setters } 

    function get_Evidence: DNEvidence;

  { propertys } 

    property Evidence: DNEvidence read get_Evidence;
  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.ISecurityEncodable')]
  DNISecurityEncodable = interface(DNObject)
  ['{FD46BDE5-ACDF-3CA5-B189-F0678387077F}']
  { methods } 

    function ToXml: DNSecurityElement;
    procedure FromXml(e: DNSecurityElement);

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.IPermission')]
  DNIPermission = interface(DNISecurityEncodable)
  ['{A19B3FC6-D680-3DD4-A17A-F58A7D481494}']
  { methods } 

    function Copy: DNIPermission;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    procedure Demand;

  end;

  //-------------namespace: System.Security.Policy----------------
  [DNTypeName('System.Security.Policy.IApplicationTrustManager')]
  DNIApplicationTrustManager = interface(DNISecurityEncodable)
  ['{427E255D-AF02-3B0D-8CE3-A2BB94BA300F}']
  { methods } 

    function DetermineApplicationTrust(activationContext: DNActivationContext; context: DNTrustManagerContext): DNApplicationTrust;

  end;

  //-------------namespace: System.Security.Policy----------------
  [DNTypeName('System.Security.Policy.IMembershipCondition')]
  DNIMembershipCondition = interface(DNISecurityEncodable)
  ['{6844EFF4-4F86-3CA1-A1EA-AAF583A6395E}']
  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.ISecurityPolicyEncodable')]
  DNISecurityPolicyEncodable = interface(DNObject)
  ['{E6C21BA7-21BB-34E9-8E57-DB66D8CE4A70}']
  { methods } 

    function ToXml(level: DNPolicyLevel): DNSecurityElement;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel);

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.IStackWalk')]
  DNIStackWalk = interface(DNObject)
  ['{60FC57B0-4A46-32A0-A5B4-B05B0DE8E781}']
  { methods } 

    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;

  end;

  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.IUnrestrictedPermission')]
  DNIUnrestrictedPermission = interface(DNObject)
  ['{0F1284E6-4399-3963-8DDD-A6A4904F66C8}']
  { methods } 

    function IsUnrestricted: Boolean;

  end;

  //-------------namespace: System.Security.Policy----------------
  [DNTypeName('System.Security.Policy.IIdentityPermissionFactory')]
  DNIIdentityPermissionFactory = interface(DNObject)
  ['{4E95244E-C6FC-3A86-8DB7-1712454DE3B6}']
  { methods } 

    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;

  end;

  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.IIdentity')]
  DNIIdentity = interface(DNObject)
  ['{F4205A87-4D46-303D-B1D9-5A99F7C90D30}']
  { getters & setters } 

    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;

  { propertys } 

    property Name: string read get_Name;
    property AuthenticationType: string read get_AuthenticationType;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
  end;

  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.IPrincipal')]
  DNIPrincipal = interface(DNObject)
  ['{4283CA6C-D291-3481-83C9-9554481FE888}']
  { getters & setters } 

    function get_Identity: DNIIdentity;

  { methods } 

    function IsInRole(role: string): Boolean;

  { propertys } 

    property Identity: DNIIdentity read get_Identity;
  end;

  //-------------namespace: Microsoft.Win32----------------
  DNRegistryClass = interface(DNObjectClass)
  ['{E9377746-111F-5D57-B980-2DDA890397DE}']
  { static fields getter & setter } 

   function __fakeFieldGet_CurrentUser: DNRegistryKey;
   function __fakeFieldGet_LocalMachine: DNRegistryKey;
   function __fakeFieldGet_ClassesRoot: DNRegistryKey;
   function __fakeFieldGet_Users: DNRegistryKey;
   function __fakeFieldGet_PerformanceData: DNRegistryKey;
   function __fakeFieldGet_CurrentConfig: DNRegistryKey;
   function __fakeFieldGet_DynData: DNRegistryKey;

  { static fields } 

    {class} property CurrentUser: DNRegistryKey read __fakeFieldGet_CurrentUser;
    {class} property LocalMachine: DNRegistryKey read __fakeFieldGet_LocalMachine;
    {class} property ClassesRoot: DNRegistryKey read __fakeFieldGet_ClassesRoot;
    {class} property Users: DNRegistryKey read __fakeFieldGet_Users;
    {class} property PerformanceData: DNRegistryKey read __fakeFieldGet_PerformanceData;
    {class} property CurrentConfig: DNRegistryKey read __fakeFieldGet_CurrentConfig;
    {class} property DynData: DNRegistryKey read __fakeFieldGet_DynData;

  { static methods } 

    {class} function GetValue(keyName: string; valueName: string; defaultValue: DNObject): DNObject;
    {class} procedure SetValue(keyName: string; valueName: string; value: DNObject; valueKind: DNRegistryValueKind); overload;
    {class} procedure SetValue(keyName: string; valueName: string; value: DNObject); overload;

  end;

  [DNTypeName('Microsoft.Win32.Registry')]
  DNRegistry = interface(DNObject)
  ['{9B4EF4FA-742E-3878-953A-474999711087}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRegistry = class(TDNGenericImport<DNRegistryClass, DNRegistry>) end;

  //-------------namespace: System----------------
  DNActivationContextClass = interface(DNObjectClass)
  ['{58CE500E-E72A-5F15-A7E3-EB2D11C6804B}']
  { static methods } 

    {class} function CreatePartialActivationContext(identity: DNApplicationIdentity): DNActivationContext; overload;
    {class} function CreatePartialActivationContext(identity: DNApplicationIdentity; manifestPaths: TArray<string>): DNActivationContext; overload;

  end;

  [DNTypeName('System.ActivationContext')]
  DNActivationContext = interface(DNIDisposable)
  ['{2A7E9689-335E-3820-804B-924EB00C16D6}']
  { getters & setters } 

    function get_Identity: DNApplicationIdentity;
    function get_Form: DNActivationContext_ContextForm;
    function get_ApplicationManifestBytes: TArray<Byte>;
    function get_DeploymentManifestBytes: TArray<Byte>;

  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Identity: DNApplicationIdentity read get_Identity;
    property Form: DNActivationContext_ContextForm read get_Form;
    property ApplicationManifestBytes: TArray<Byte> read get_ApplicationManifestBytes;
    property DeploymentManifestBytes: TArray<Byte> read get_DeploymentManifestBytes;
  end;

  TDNActivationContext = class(TDNGenericImport<DNActivationContextClass, DNActivationContext>) end;

  //-------------namespace: System----------------
  DNActivatorClass = interface(DNObjectClass)
  ['{44C7F458-4D1C-51F0-AB46-06DC8CA6C481}']
  { static methods } 

    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>; activationAttributes: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType): DNObject; overload;
    {class} function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    {class} function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstance(&type: DNType; nonPublic: Boolean): DNObject; overload;
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityInfo: DNEvidence): DNObjectHandle; overload;
    {class} function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityInfo: DNEvidence): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstance(domain: DNAppDomain; assemblyName: string; typeName: string): DNObjectHandle; overload;
    {class} function CreateInstance(domain: DNAppDomain; assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    {class} function CreateInstance(domain: DNAppDomain; assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(domain: DNAppDomain; assemblyFile: string; typeName: string): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(domain: DNAppDomain; assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(domain: DNAppDomain; assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstance(activationContext: DNActivationContext): DNObjectHandle; overload;
    {class} function CreateInstance(activationContext: DNActivationContext; activationCustomData: TArray<string>): DNObjectHandle; overload;
    {class} function CreateComInstanceFrom(assemblyName: string; typeName: string): DNObjectHandle; overload;
    {class} function CreateComInstanceFrom(assemblyName: string; typeName: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNObjectHandle; overload;
    {class} function GetObject(&type: DNType; url: string): DNObject; overload;
    {class} function GetObject(&type: DNType; url: string; state: DNObject): DNObject; overload;

  end;

  [DNTypeName('System.Activator')]
  DNActivator = interface(DN_Activator)
  ['{9BA4FD4E-2BC2-31A0-B721-D17ABA5B12C3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNActivator = class(TDNGenericImport<DNActivatorClass, DNActivator>) end;

  //-------------namespace: System----------------
  DNAppContextClass = interface(DNObjectClass)
  ['{9A61E5B2-5DDF-5909-B808-D61E2DECB755}']
  { static getter & setter } 

    {class} function get_BaseDirectory: string;
    {class} function get_TargetFrameworkName: string;

  { static methods } 

    {class} function TryGetSwitch(switchName: string; out isEnabled: Boolean): Boolean;
    {class} procedure SetSwitch(switchName: string; isEnabled: Boolean);
    {class} function GetData(name: string): DNObject;

  { static propertys } 

    {class} property BaseDirectory: string read get_BaseDirectory;
    {class} property TargetFrameworkName: string read get_TargetFrameworkName;
  end;

  [DNTypeName('System.AppContext')]
  DNAppContext = interface(DNObject)
  ['{405A21FB-0DB3-31A2-B3E6-7549238B770E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAppContext = class(TDNGenericImport<DNAppContextClass, DNAppContext>) end;

  //-------------namespace: System----------------
  DNAppDomainSetupClass = interface(DNObjectClass)
  ['{22AC667D-591A-5C4B-BE9A-059DD1ACD440}']
  { constructors } 

    {class} function init: DNAppDomainSetup; overload;
    {class} function init(activationContext: DNActivationContext): DNAppDomainSetup; overload;
    {class} function init(activationArguments: DNActivationArguments): DNAppDomainSetup; overload;

  end;

  [DNTypeName('System.AppDomainSetup')]
  DNAppDomainSetup = interface(DNIAppDomainSetup)
  ['{3E8E0F03-D3FD-3A93-BAE0-C74A6494DBCA}']
  { getters & setters } 

    function get_AppDomainManagerAssembly: string;
    procedure set_AppDomainManagerAssembly(value: string);
    function get_AppDomainManagerType: string;
    procedure set_AppDomainManagerType(value: string);
    function get_PartialTrustVisibleAssemblies: TArray<string>;
    procedure set_PartialTrustVisibleAssemblies(value: TArray<string>);
    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_ConfigurationFile: string;
    procedure set_ConfigurationFile(value: string);
    function get_TargetFrameworkName: string;
    procedure set_TargetFrameworkName(value: string);
    function get_DynamicBase: string;
    procedure set_DynamicBase(value: string);
    function get_DisallowPublisherPolicy: Boolean;
    procedure set_DisallowPublisherPolicy(value: Boolean);
    function get_DisallowBindingRedirects: Boolean;
    procedure set_DisallowBindingRedirects(value: Boolean);
    function get_DisallowCodeDownload: Boolean;
    procedure set_DisallowCodeDownload(value: Boolean);
    function get_DisallowApplicationBaseProbing: Boolean;
    procedure set_DisallowApplicationBaseProbing(value: Boolean);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_AppDomainInitializer: DNAppDomainInitializer;
    procedure set_AppDomainInitializer(value: DNAppDomainInitializer);
    function get_AppDomainInitializerArguments: TArray<string>;
    procedure set_AppDomainInitializerArguments(value: TArray<string>);
    function get_ActivationArguments: DNActivationArguments;
    procedure set_ActivationArguments(value: DNActivationArguments);
    function get_ApplicationTrust: DNApplicationTrust;
    procedure set_ApplicationTrust(value: DNApplicationTrust);
    function get_PrivateBinPath: string;
    procedure set_PrivateBinPath(value: string);
    function get_PrivateBinPathProbe: string;
    procedure set_PrivateBinPathProbe(value: string);
    function get_ShadowCopyDirectories: string;
    procedure set_ShadowCopyDirectories(value: string);
    function get_ShadowCopyFiles: string;
    procedure set_ShadowCopyFiles(value: string);
    function get_CachePath: string;
    procedure set_CachePath(value: string);
    function get_LicenseFile: string;
    procedure set_LicenseFile(value: string);
    function get_LoaderOptimization: DNLoaderOptimization;
    procedure set_LoaderOptimization(value: DNLoaderOptimization);
    function get_SandboxInterop: Boolean;
    procedure set_SandboxInterop(value: Boolean);

  { methods } 

    function GetConfigurationBytes: TArray<Byte>;
    procedure SetConfigurationBytes(value: TArray<Byte>);
    procedure SetCompatibilitySwitches(switches: DNIEnumerable<string>);
    procedure SetNativeFunction(functionName: string; functionVersion: Int32; functionPointer: IntPtr);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AppDomainManagerAssembly: string read get_AppDomainManagerAssembly write set_AppDomainManagerAssembly;
    property AppDomainManagerType: string read get_AppDomainManagerType write set_AppDomainManagerType;
    property PartialTrustVisibleAssemblies: TArray<string> read get_PartialTrustVisibleAssemblies write set_PartialTrustVisibleAssemblies;
    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    property ConfigurationFile: string read get_ConfigurationFile write set_ConfigurationFile;
    property TargetFrameworkName: string read get_TargetFrameworkName write set_TargetFrameworkName;
    property DynamicBase: string read get_DynamicBase write set_DynamicBase;
    property DisallowPublisherPolicy: Boolean read get_DisallowPublisherPolicy write set_DisallowPublisherPolicy;
    property DisallowBindingRedirects: Boolean read get_DisallowBindingRedirects write set_DisallowBindingRedirects;
    property DisallowCodeDownload: Boolean read get_DisallowCodeDownload write set_DisallowCodeDownload;
    property DisallowApplicationBaseProbing: Boolean read get_DisallowApplicationBaseProbing write set_DisallowApplicationBaseProbing;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property AppDomainInitializer: DNAppDomainInitializer read get_AppDomainInitializer write set_AppDomainInitializer;
    property AppDomainInitializerArguments: TArray<string> read get_AppDomainInitializerArguments write set_AppDomainInitializerArguments;
    property ActivationArguments: DNActivationArguments read get_ActivationArguments write set_ActivationArguments;
    property ApplicationTrust: DNApplicationTrust read get_ApplicationTrust write set_ApplicationTrust;
    property PrivateBinPath: string read get_PrivateBinPath write set_PrivateBinPath;
    property PrivateBinPathProbe: string read get_PrivateBinPathProbe write set_PrivateBinPathProbe;
    property ShadowCopyDirectories: string read get_ShadowCopyDirectories write set_ShadowCopyDirectories;
    property ShadowCopyFiles: string read get_ShadowCopyFiles write set_ShadowCopyFiles;
    property CachePath: string read get_CachePath write set_CachePath;
    property LicenseFile: string read get_LicenseFile write set_LicenseFile;
    property LoaderOptimization: DNLoaderOptimization read get_LoaderOptimization write set_LoaderOptimization;
    property SandboxInterop: Boolean read get_SandboxInterop write set_SandboxInterop;
  end;

  TDNAppDomainSetup = class(TDNGenericImport<DNAppDomainSetupClass, DNAppDomainSetup>) end;

  //-------------namespace: System----------------
  DNApplicationIdClass = interface(DNObjectClass)
  ['{81B92F71-01FD-5A83-B28B-1806891E1A30}']
  { constructors } 

    {class} function init(publicKeyToken: TArray<Byte>; name: string; version: DNVersion; processorArchitecture: string; culture: string): DNApplicationId;

  end;

  [DNTypeName('System.ApplicationId')]
  DNApplicationId = interface(DNObject)
  ['{AF3866AD-F70A-3CF8-984E-858C5A686D57}']
  { getters & setters } 

    function get_PublicKeyToken: TArray<Byte>;
    function get_Name: string;
    function get_Version: DNVersion;
    function get_ProcessorArchitecture: string;
    function get_Culture: string;

  { methods } 

    function Copy: DNApplicationId;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PublicKeyToken: TArray<Byte> read get_PublicKeyToken;
    property Name: string read get_Name;
    property Version: DNVersion read get_Version;
    property ProcessorArchitecture: string read get_ProcessorArchitecture;
    property Culture: string read get_Culture;
  end;

  TDNApplicationId = class(TDNGenericImport<DNApplicationIdClass, DNApplicationId>) end;

  //-------------namespace: System----------------
  DNApplicationIdentityClass = interface(DNObjectClass)
  ['{F259A0F3-0731-5831-BB70-57EB536802BF}']
  { constructors } 

    {class} function init(applicationIdentityFullName: string): DNApplicationIdentity;

  end;

  [DNTypeName('System.ApplicationIdentity')]
  DNApplicationIdentity = interface(DNISerializable)
  ['{25450296-27A4-39E8-8011-E027EF40CA46}']
  { getters & setters } 

    function get_FullName: string;
    function get_CodeBase: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property FullName: string read get_FullName;
    property CodeBase: string read get_CodeBase;
  end;

  TDNApplicationIdentity = class(TDNGenericImport<DNApplicationIdentityClass, DNApplicationIdentity>) end;

  //-------------namespace: System----------------
  DNArrayClass = interface(DNObjectClass)
  ['{BBC56739-073A-5A7A-905F-631ED6BD05B8}']
  { static methods } 

    {class} function CreateInstance(elementType: DNType; length: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32; length3: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int64>): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>; lowerBounds: TArray<Int32>): DNArray; overload;
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int32); overload;
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32); overload;
    {class} procedure ConstrainedCopy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32);
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int64); overload;
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int64; destinationArray: DNArray; destinationIndex: Int64; length: Int64); overload;
    {class} function BinarySearch(&array: DNArray; value: DNObject): Int32; overload;
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject): Int32; overload;
    {class} function BinarySearch(&array: DNArray; value: DNObject; comparer: DNIComparer): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    {class} procedure Reverse(&array: DNArray); overload;
    {class} procedure Sort(&array: DNArray); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray); overload;
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(&array: DNArray; comparer: DNIComparer); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; comparer: DNIComparer); overload;
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32): DNArray; overload;
    {class} procedure Clear(&array: DNArray; index: Int32; length: Int32);
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject; comparer: DNIComparer): Int32; overload;
    {class} procedure Reverse(&array: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;

  end;

  [DNTypeName('System.Array')]
  DNArray = interface(DNICloneable)
  ['{200FB91C-815D-39E0-9E07-0E1BDB2ED47B}']
  { getters & setters } 

    function get_Length: Int32;
    function get_LongLength: Int64;
    function get_Rank: Int32;
    function get_SyncRoot: DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    function GetValue(indices: TArray<Int32>): DNObject; overload;
    function GetValue(index: Int32): DNObject; overload;
    function GetValue(index1: Int32; index2: Int32): DNObject; overload;
    function GetValue(index1: Int32; index2: Int32; index3: Int32): DNObject; overload;
    function GetValue(index: Int64): DNObject; overload;
    function GetValue(index1: Int64; index2: Int64): DNObject; overload;
    function GetValue(index1: Int64; index2: Int64; index3: Int64): DNObject; overload;
    function GetValue(indices: TArray<Int64>): DNObject; overload;
    procedure SetValue(value: DNObject; index: Int32); overload;
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32); overload;
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32; index3: Int32); overload;
    procedure SetValue(value: DNObject; indices: TArray<Int32>); overload;
    procedure SetValue(value: DNObject; index: Int64); overload;
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64); overload;
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64; index3: Int64); overload;
    procedure SetValue(value: DNObject; indices: TArray<Int64>); overload;
    function GetLongLength(dimension: Int32): Int64;
    function Clone: DNObject;
    procedure CopyTo(&array: DNArray; index: Int32); overload;
    procedure CopyTo(&array: DNArray; index: Int64); overload;
    function GetEnumerator: DNIEnumerator;
    procedure Initialize;
    function GetLength(dimension: Int32): Int32;
    function GetUpperBound(dimension: Int32): Int32;
    function GetLowerBound(dimension: Int32): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
    property LongLength: Int64 read get_LongLength;
    property Rank: Int32 read get_Rank;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNArray = class(TDNGenericImport<DNArrayClass, DNArray>) end;

  //-------------namespace: System----------------
  DNAttributeClass = interface(DNObjectClass)
  ['{AA50E252-7327-50C1-8F4C-A72AA48720F5}']
  { static methods } 

    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType; inherit: Boolean): DNAttribute; overload;

  end;

  [DNTypeName('System.Attribute')]
  DNAttribute = interface(DN_Attribute)
  ['{1765714B-E628-34C3-B66F-7686FAF462DA}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttribute = class(TDNGenericImport<DNAttributeClass, DNAttribute>) end;

  //-------------namespace: System----------------
  DNAttributeUsageAttributeClass = interface(DNAttributeClass)
  ['{23A73A73-1985-54DA-AE7C-45F0730735CD}']
  { constructors } 

    {class} function init(validOn: DNAttributeTargets): DNAttributeUsageAttribute;

  end;

  [DNTypeName('System.AttributeUsageAttribute')]
  DNAttributeUsageAttribute = interface(DNAttribute)
  ['{53A62BB1-75B9-3B52-AE98-92AFD573CDB1}']
  { getters & setters } 

    function get_Inherited: Boolean;
    procedure set_Inherited(value: Boolean);
    function get_AllowMultiple: Boolean;
    procedure set_AllowMultiple(value: Boolean);
    function get_ValidOn: DNAttributeTargets;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property &Inherited: Boolean read get_Inherited write set_Inherited;
    property AllowMultiple: Boolean read get_AllowMultiple write set_AllowMultiple;
    property ValidOn: DNAttributeTargets read get_ValidOn;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttributeUsageAttribute = class(TDNGenericImport<DNAttributeUsageAttributeClass, DNAttributeUsageAttribute>) end;

  //-------------namespace: System----------------
  DNCLSCompliantAttributeClass = interface(DNAttributeClass)
  ['{C103F9B8-059F-5545-994C-F8CC2B5EC3D7}']
  { constructors } 

    {class} function init(isCompliant: Boolean): DNCLSCompliantAttribute;

  end;

  [DNTypeName('System.CLSCompliantAttribute')]
  DNCLSCompliantAttribute = interface(DNAttribute)
  ['{15DBEC24-0E2D-3DB2-AF66-932203215895}']
  { getters & setters } 

    function get_IsCompliant: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsCompliant: Boolean read get_IsCompliant;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCLSCompliantAttribute = class(TDNGenericImport<DNCLSCompliantAttributeClass, DNCLSCompliantAttribute>) end;

  //-------------namespace: System----------------
  DNContextStaticAttributeClass = interface(DNAttributeClass)
  ['{2793F06F-AB99-56D9-A62D-00E858BDDBEC}']
  { constructors } 

    {class} function init: DNContextStaticAttribute;

  end;

  [DNTypeName('System.ContextStaticAttribute')]
  DNContextStaticAttribute = interface(DNAttribute)
  ['{96705EE3-F7AB-3E9A-9FB2-AD1D536E901A}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContextStaticAttribute = class(TDNGenericImport<DNContextStaticAttributeClass, DNContextStaticAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNSuppressMessageAttributeClass = interface(DNAttributeClass)
  ['{FF033C6D-8403-5FF9-AF8E-3189DDB9DB45}']
  { constructors } 

    {class} function init(category: string; checkId: string): DNSuppressMessageAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.SuppressMessageAttribute')]
  DNSuppressMessageAttribute = interface(DNAttribute)
  ['{DA4523A7-75EA-3ABA-A44B-D46260BBEE99}']
  { getters & setters } 

    function get_Category: string;
    function get_CheckId: string;
    function get_Scope: string;
    procedure set_Scope(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_MessageId: string;
    procedure set_MessageId(value: string);
    function get_Justification: string;
    procedure set_Justification(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property CheckId: string read get_CheckId;
    property Scope: string read get_Scope write set_Scope;
    property Target: string read get_Target write set_Target;
    property MessageId: string read get_MessageId write set_MessageId;
    property Justification: string read get_Justification write set_Justification;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressMessageAttribute = class(TDNGenericImport<DNSuppressMessageAttributeClass, DNSuppressMessageAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNConditionalAttributeClass = interface(DNAttributeClass)
  ['{C7E8F49F-0F38-5497-A34D-3E1DDA7960AC}']
  { constructors } 

    {class} function init(conditionString: string): DNConditionalAttribute;

  end;

  [DNTypeName('System.Diagnostics.ConditionalAttribute')]
  DNConditionalAttribute = interface(DNAttribute)
  ['{75B3810E-F2D5-36E2-8D27-514EBCAD4511}']
  { getters & setters } 

    function get_ConditionString: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ConditionString: string read get_ConditionString;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNConditionalAttribute = class(TDNGenericImport<DNConditionalAttributeClass, DNConditionalAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractAbbreviatorAttributeClass = interface(DNAttributeClass)
  ['{FAED75EB-EED9-5013-B9BD-D626763FE7C6}']
  { constructors } 

    {class} function init: DNContractAbbreviatorAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractAbbreviatorAttribute')]
  DNContractAbbreviatorAttribute = interface(DNAttribute)
  ['{5C3A67DA-8E7E-3AC2-94BC-99E03B809166}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractAbbreviatorAttribute = class(TDNGenericImport<DNContractAbbreviatorAttributeClass, DNContractAbbreviatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractArgumentValidatorAttributeClass = interface(DNAttributeClass)
  ['{4EEA72AC-5CA9-53C5-A5D0-4FA521361665}']
  { constructors } 

    {class} function init: DNContractArgumentValidatorAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractArgumentValidatorAttribute')]
  DNContractArgumentValidatorAttribute = interface(DNAttribute)
  ['{5A513617-7943-37DC-AA9F-F0534112C824}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractArgumentValidatorAttribute = class(TDNGenericImport<DNContractArgumentValidatorAttributeClass, DNContractArgumentValidatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassAttributeClass = interface(DNAttributeClass)
  ['{FD42344F-7249-5336-AF13-C56CA51BF47B}']
  { constructors } 

    {class} function init(typeContainingContracts: DNType): DNContractClassAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractClassAttribute')]
  DNContractClassAttribute = interface(DNAttribute)
  ['{42C13B51-79B1-3830-9168-94ED4CFAD60A}']
  { getters & setters } 

    function get_TypeContainingContracts: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeContainingContracts: DNType read get_TypeContainingContracts;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassAttribute = class(TDNGenericImport<DNContractClassAttributeClass, DNContractClassAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassForAttributeClass = interface(DNAttributeClass)
  ['{A127B87B-9B09-5C1A-923A-F29CB3D4EF9F}']
  { constructors } 

    {class} function init(typeContractsAreFor: DNType): DNContractClassForAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractClassForAttribute')]
  DNContractClassForAttribute = interface(DNAttribute)
  ['{BA788035-35EF-3617-8CC0-6D2D32C6A2A1}']
  { getters & setters } 

    function get_TypeContractsAreFor: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeContractsAreFor: DNType read get_TypeContractsAreFor;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassForAttribute = class(TDNGenericImport<DNContractClassForAttributeClass, DNContractClassForAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractInvariantMethodAttributeClass = interface(DNAttributeClass)
  ['{7D5D9A27-80B9-5BE7-B9D9-FF47A5D4A8DB}']
  { constructors } 

    {class} function init: DNContractInvariantMethodAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractInvariantMethodAttribute')]
  DNContractInvariantMethodAttribute = interface(DNAttribute)
  ['{E8D1CDB7-B9F9-3F5E-B9FC-AD0B03755CCE}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractInvariantMethodAttribute = class(TDNGenericImport<DNContractInvariantMethodAttributeClass, DNContractInvariantMethodAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractOptionAttributeClass = interface(DNAttributeClass)
  ['{E58D48F0-C581-5190-A76B-B3EFC383BDF3}']
  { constructors } 

    {class} function init(category: string; setting: string; enabled: Boolean): DNContractOptionAttribute; overload;
    {class} function init(category: string; setting: string; value: string): DNContractOptionAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractOptionAttribute')]
  DNContractOptionAttribute = interface(DNAttribute)
  ['{4A37E017-7EF7-3A9B-8029-2120536B20C8}']
  { getters & setters } 

    function get_Category: string;
    function get_Setting: string;
    function get_Enabled: Boolean;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property Setting: string read get_Setting;
    property Enabled: Boolean read get_Enabled;
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractOptionAttribute = class(TDNGenericImport<DNContractOptionAttributeClass, DNContractOptionAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractPublicPropertyNameAttributeClass = interface(DNAttributeClass)
  ['{8E8FDCBB-0A6A-5828-834F-B3A742843D0F}']
  { constructors } 

    {class} function init(name: string): DNContractPublicPropertyNameAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute')]
  DNContractPublicPropertyNameAttribute = interface(DNAttribute)
  ['{8C345A58-6B61-392C-ACF0-58853DD6D3AF}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractPublicPropertyNameAttribute = class(TDNGenericImport<DNContractPublicPropertyNameAttributeClass, DNContractPublicPropertyNameAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{D6B827BB-A954-5499-BD4D-AC8A34F37261}']
  { constructors } 

    {class} function init: DNContractReferenceAssemblyAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute')]
  DNContractReferenceAssemblyAttribute = interface(DNAttribute)
  ['{D34B2E44-3B0B-3B35-8558-ABBA5DD13730}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractReferenceAssemblyAttribute = class(TDNGenericImport<DNContractReferenceAssemblyAttributeClass, DNContractReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractRuntimeIgnoredAttributeClass = interface(DNAttributeClass)
  ['{B46CE153-D0CD-5099-8F6B-2702EFE49305}']
  { constructors } 

    {class} function init: DNContractRuntimeIgnoredAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute')]
  DNContractRuntimeIgnoredAttribute = interface(DNAttribute)
  ['{39FF7EBC-8271-3B79-B5A8-87CDF0FB731B}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractRuntimeIgnoredAttribute = class(TDNGenericImport<DNContractRuntimeIgnoredAttributeClass, DNContractRuntimeIgnoredAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractVerificationAttributeClass = interface(DNAttributeClass)
  ['{FF13EFCB-A57C-5FB6-A47F-44A7FE0E6688}']
  { constructors } 

    {class} function init(value: Boolean): DNContractVerificationAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractVerificationAttribute')]
  DNContractVerificationAttribute = interface(DNAttribute)
  ['{C3D144B3-F242-3F2B-A638-50B3AB403C15}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractVerificationAttribute = class(TDNGenericImport<DNContractVerificationAttributeClass, DNContractVerificationAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNPureAttributeClass = interface(DNAttributeClass)
  ['{BC4C2BB8-95EE-5B06-9D82-7D9EB513CD2F}']
  { constructors } 

    {class} function init: DNPureAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.PureAttribute')]
  DNPureAttribute = interface(DNAttribute)
  ['{6AA2F68B-DDF0-3E6D-BFC5-08FCE5317C8F}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPureAttribute = class(TDNGenericImport<DNPureAttributeClass, DNPureAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggableAttributeClass = interface(DNAttributeClass)
  ['{ACA7B74E-1589-530F-ADA2-4D300BCCAC7C}']
  { constructors } 

    {class} function init(isJITTrackingEnabled: Boolean; isJITOptimizerDisabled: Boolean): DNDebuggableAttribute; overload;
    {class} function init(modes: DNDebuggableAttribute_DebuggingModes): DNDebuggableAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggableAttribute')]
  DNDebuggableAttribute = interface(DNAttribute)
  ['{DF1F67B4-74F7-30AF-922D-29F0B91ABC25}']
  { getters & setters } 

    function get_IsJITTrackingEnabled: Boolean;
    function get_IsJITOptimizerDisabled: Boolean;
    function get_DebuggingFlags: DNDebuggableAttribute_DebuggingModes;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsJITTrackingEnabled: Boolean read get_IsJITTrackingEnabled;
    property IsJITOptimizerDisabled: Boolean read get_IsJITOptimizerDisabled;
    property DebuggingFlags: DNDebuggableAttribute_DebuggingModes read get_DebuggingFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggableAttribute = class(TDNGenericImport<DNDebuggableAttributeClass, DNDebuggableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerBrowsableAttributeClass = interface(DNAttributeClass)
  ['{B2F0AE44-0288-53D2-B798-419F188826BF}']
  { constructors } 

    {class} function init(state: DNDebuggerBrowsableState): DNDebuggerBrowsableAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerBrowsableAttribute')]
  DNDebuggerBrowsableAttribute = interface(DNAttribute)
  ['{A709EBBE-BDB2-30F4-959B-37B7A68E4299}']
  { getters & setters } 

    function get_State: DNDebuggerBrowsableState;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property State: DNDebuggerBrowsableState read get_State;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerBrowsableAttribute = class(TDNGenericImport<DNDebuggerBrowsableAttributeClass, DNDebuggerBrowsableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerDisplayAttributeClass = interface(DNAttributeClass)
  ['{EED7A9FC-4957-5E76-B1EA-64D4FA0F4092}']
  { constructors } 

    {class} function init(value: string): DNDebuggerDisplayAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerDisplayAttribute')]
  DNDebuggerDisplayAttribute = interface(DNAttribute)
  ['{F640E47B-67D0-31A2-8621-02E2DD41B496}']
  { getters & setters } 

    function get_Value: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerDisplayAttribute = class(TDNGenericImport<DNDebuggerDisplayAttributeClass, DNDebuggerDisplayAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerHiddenAttributeClass = interface(DNAttributeClass)
  ['{1BCD002F-11B6-50F5-9264-217F7ABE014A}']
  { constructors } 

    {class} function init: DNDebuggerHiddenAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerHiddenAttribute')]
  DNDebuggerHiddenAttribute = interface(DNAttribute)
  ['{41970D73-92F6-36D9-874D-3BD0762A0D6F}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerHiddenAttribute = class(TDNGenericImport<DNDebuggerHiddenAttributeClass, DNDebuggerHiddenAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerNonUserCodeAttributeClass = interface(DNAttributeClass)
  ['{C83CBB06-C027-551D-870C-0714275C0081}']
  { constructors } 

    {class} function init: DNDebuggerNonUserCodeAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerNonUserCodeAttribute')]
  DNDebuggerNonUserCodeAttribute = interface(DNAttribute)
  ['{29625281-51CE-3F8A-AC4D-E360CACB92E2}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerNonUserCodeAttribute = class(TDNGenericImport<DNDebuggerNonUserCodeAttributeClass, DNDebuggerNonUserCodeAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepperBoundaryAttributeClass = interface(DNAttributeClass)
  ['{66EDC028-219F-5D1E-A5E1-8EF787C678D3}']
  { constructors } 

    {class} function init: DNDebuggerStepperBoundaryAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerStepperBoundaryAttribute')]
  DNDebuggerStepperBoundaryAttribute = interface(DNAttribute)
  ['{1B979846-AAEB-314B-8E63-D44EF1CB9EFC}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepperBoundaryAttribute = class(TDNGenericImport<DNDebuggerStepperBoundaryAttributeClass, DNDebuggerStepperBoundaryAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepThroughAttributeClass = interface(DNAttributeClass)
  ['{E3AAA436-B5D8-5C5A-8E54-CEC704E31044}']
  { constructors } 

    {class} function init: DNDebuggerStepThroughAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerStepThroughAttribute')]
  DNDebuggerStepThroughAttribute = interface(DNAttribute)
  ['{93F551D6-2F9E-301B-BE63-85AEF508CAE0}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepThroughAttribute = class(TDNGenericImport<DNDebuggerStepThroughAttributeClass, DNDebuggerStepThroughAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerTypeProxyAttributeClass = interface(DNAttributeClass)
  ['{41D06219-B720-53B4-905E-A49B31A11CCA}']
  { constructors } 

    {class} function init(&type: DNType): DNDebuggerTypeProxyAttribute; overload;
    {class} function init(typeName: string): DNDebuggerTypeProxyAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggerTypeProxyAttribute')]
  DNDebuggerTypeProxyAttribute = interface(DNAttribute)
  ['{8366EE18-BBE6-3061-B99F-BA87E26919D1}']
  { getters & setters } 

    function get_ProxyTypeName: string;
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ProxyTypeName: string read get_ProxyTypeName;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerTypeProxyAttribute = class(TDNGenericImport<DNDebuggerTypeProxyAttributeClass, DNDebuggerTypeProxyAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerVisualizerAttributeClass = interface(DNAttributeClass)
  ['{8973BB2E-697C-5528-AA3A-5F326D1C5C41}']
  { constructors } 

    {class} function init(visualizerTypeName: string): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizerTypeName: string; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizerTypeName: string; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggerVisualizerAttribute')]
  DNDebuggerVisualizerAttribute = interface(DNAttribute)
  ['{29813E13-8772-3B1F-878D-26C33B045D5A}']
  { getters & setters } 

    function get_VisualizerObjectSourceTypeName: string;
    function get_VisualizerTypeName: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property VisualizerObjectSourceTypeName: string read get_VisualizerObjectSourceTypeName;
    property VisualizerTypeName: string read get_VisualizerTypeName;
    property Description: string read get_Description write set_Description;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerVisualizerAttribute = class(TDNGenericImport<DNDebuggerVisualizerAttributeClass, DNDebuggerVisualizerAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventAttributeClass = interface(DNAttributeClass)
  ['{88763171-7336-575D-A4C1-7A49338C5CFF}']
  { constructors } 

    {class} function init(eventId: Int32): DNEventAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventAttribute')]
  DNEventAttribute = interface(DNAttribute)
  ['{66DA3C30-517E-3D4E-9D9C-5E91A8566D1D}']
  { getters & setters } 

    function get_EventId: Int32;
    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Task: DNEventTask;
    procedure set_Task(value: DNEventTask);
    function get_Channel: DNEventChannel;
    procedure set_Channel(value: DNEventChannel);
    function get_Version: Byte;
    procedure set_Version(value: Byte);
    function get_Message: string;
    procedure set_Message(value: string);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EventId: Int32 read get_EventId;
    property Level: DNEventLevel read get_Level write set_Level;
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    property Task: DNEventTask read get_Task write set_Task;
    property Channel: DNEventChannel read get_Channel write set_Channel;
    property Version: Byte read get_Version write set_Version;
    property Message: string read get_Message write set_Message;
    property Tags: DNEventTags read get_Tags write set_Tags;
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventAttribute = class(TDNGenericImport<DNEventAttributeClass, DNEventAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventDataAttributeClass = interface(DNAttributeClass)
  ['{94A08D3A-E205-5D31-8862-F7303CE7FC8E}']
  { constructors } 

    {class} function init: DNEventDataAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventDataAttribute')]
  DNEventDataAttribute = interface(DNAttribute)
  ['{E12D56E4-93F8-344F-BA12-EF1175132EE5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventDataAttribute = class(TDNGenericImport<DNEventDataAttributeClass, DNEventDataAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventFieldAttributeClass = interface(DNAttributeClass)
  ['{5FD424A6-556E-542F-9EB9-42C6047428B9}']
  { constructors } 

    {class} function init: DNEventFieldAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventFieldAttribute')]
  DNEventFieldAttribute = interface(DNAttribute)
  ['{168AE035-28A6-3962-91E7-E1F033475664}']
  { getters & setters } 

    function get_Tags: DNEventFieldTags;
    procedure set_Tags(value: DNEventFieldTags);
    function get_Format: DNEventFieldFormat;
    procedure set_Format(value: DNEventFieldFormat);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Tags: DNEventFieldTags read get_Tags write set_Tags;
    property Format: DNEventFieldFormat read get_Format write set_Format;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventFieldAttribute = class(TDNGenericImport<DNEventFieldAttributeClass, DNEventFieldAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventIgnoreAttributeClass = interface(DNAttributeClass)
  ['{C8BDD646-CF74-5808-BFD3-04D7653D9167}']
  { constructors } 

    {class} function init: DNEventIgnoreAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventIgnoreAttribute')]
  DNEventIgnoreAttribute = interface(DNAttribute)
  ['{51E9424C-C906-3824-B8D1-A1317E644BDC}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventIgnoreAttribute = class(TDNGenericImport<DNEventIgnoreAttributeClass, DNEventIgnoreAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceAttributeClass = interface(DNAttributeClass)
  ['{35BC562D-9DBB-5CF7-82B7-277546854BF3}']
  { constructors } 

    {class} function init: DNEventSourceAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceAttribute')]
  DNEventSourceAttribute = interface(DNAttribute)
  ['{63851642-7F96-3A01-90A0-0F7A8CFF3E8A}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Guid: string;
    procedure set_Guid(value: string);
    function get_LocalizationResources: string;
    procedure set_LocalizationResources(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Guid: string read get_Guid write set_Guid;
    property LocalizationResources: string read get_LocalizationResources write set_LocalizationResources;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventSourceAttribute = class(TDNGenericImport<DNEventSourceAttributeClass, DNEventSourceAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNNonEventAttributeClass = interface(DNAttributeClass)
  ['{A0A08E74-0CD1-5003-8193-6D086036FB3C}']
  { constructors } 

    {class} function init: DNNonEventAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.NonEventAttribute')]
  DNNonEventAttribute = interface(DNAttribute)
  ['{0B54DBE3-2E10-3885-8EB4-6F79DE3679B9}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonEventAttribute = class(TDNGenericImport<DNNonEventAttributeClass, DNNonEventAttribute>) end;

  //-------------namespace: System----------------
  DNFlagsAttributeClass = interface(DNAttributeClass)
  ['{8B7CFEEA-11D9-56DA-B45F-835A863E3863}']
  { constructors } 

    {class} function init: DNFlagsAttribute;

  end;

  [DNTypeName('System.FlagsAttribute')]
  DNFlagsAttribute = interface(DNAttribute)
  ['{66CE75D4-0334-3CA6-BCA8-CE9AF28A4396}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFlagsAttribute = class(TDNGenericImport<DNFlagsAttributeClass, DNFlagsAttribute>) end;

  //-------------namespace: System----------------
  DNLoaderOptimizationAttributeClass = interface(DNAttributeClass)
  ['{EA7798B0-04BB-58CC-947E-C3DB097C9229}']
  { constructors } 

    {class} function init(value: Byte): DNLoaderOptimizationAttribute; overload;
    {class} function init(value: DNLoaderOptimization): DNLoaderOptimizationAttribute; overload;

  end;

  [DNTypeName('System.LoaderOptimizationAttribute')]
  DNLoaderOptimizationAttribute = interface(DNAttribute)
  ['{B39742FD-1A55-3810-9EA5-F6E86EBEB472}']
  { getters & setters } 

    function get_Value: DNLoaderOptimization;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNLoaderOptimization read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNLoaderOptimizationAttribute = class(TDNGenericImport<DNLoaderOptimizationAttributeClass, DNLoaderOptimizationAttribute>) end;

  //-------------namespace: System----------------
  DNMTAThreadAttributeClass = interface(DNAttributeClass)
  ['{45E34053-1317-571A-B291-4D441B45FDDB}']
  { constructors } 

    {class} function init: DNMTAThreadAttribute;

  end;

  [DNTypeName('System.MTAThreadAttribute')]
  DNMTAThreadAttribute = interface(DNAttribute)
  ['{B406AC70-4D7E-3D24-B241-AEAEAC343BD9}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNMTAThreadAttribute = class(TDNGenericImport<DNMTAThreadAttributeClass, DNMTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNNonSerializedAttributeClass = interface(DNAttributeClass)
  ['{932449F0-0FC3-5429-89EA-AF74655CB154}']
  { constructors } 

    {class} function init: DNNonSerializedAttribute;

  end;

  [DNTypeName('System.NonSerializedAttribute')]
  DNNonSerializedAttribute = interface(DNAttribute)
  ['{CC77F5F3-222D-3586-88C3-410477A3B65D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonSerializedAttribute = class(TDNGenericImport<DNNonSerializedAttributeClass, DNNonSerializedAttribute>) end;

  //-------------namespace: System----------------
  DNObsoleteAttributeClass = interface(DNAttributeClass)
  ['{4EF11DF7-B02F-5054-925D-8DB5057EEE89}']
  { constructors } 

    {class} function init: DNObsoleteAttribute; overload;
    {class} function init(message: string): DNObsoleteAttribute; overload;
    {class} function init(message: string; error: Boolean): DNObsoleteAttribute; overload;

  end;

  [DNTypeName('System.ObsoleteAttribute')]
  DNObsoleteAttribute = interface(DNAttribute)
  ['{08295C62-7462-3633-B35E-7AE68ACA3948}']
  { getters & setters } 

    function get_Message: string;
    function get_IsError: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Message: string read get_Message;
    property IsError: Boolean read get_IsError;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObsoleteAttribute = class(TDNGenericImport<DNObsoleteAttributeClass, DNObsoleteAttribute>) end;

  //-------------namespace: System----------------
  DNParamArrayAttributeClass = interface(DNAttributeClass)
  ['{F699D4D0-A69F-5F9E-8F6E-244B30501F29}']
  { constructors } 

    {class} function init: DNParamArrayAttribute;

  end;

  [DNTypeName('System.ParamArrayAttribute')]
  DNParamArrayAttribute = interface(DNAttribute)
  ['{3495E5FA-2A90-3CA7-B3B5-58736C4441DD}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNParamArrayAttribute = class(TDNGenericImport<DNParamArrayAttributeClass, DNParamArrayAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyAlgorithmIdAttributeClass = interface(DNAttributeClass)
  ['{72ABA434-C070-5E80-9015-094CF92E3CB0}']
  { constructors } 

    {class} function init(algorithmId: DNAssemblyHashAlgorithm): DNAssemblyAlgorithmIdAttribute; overload;
    {class} function init(algorithmId: UInt32): DNAssemblyAlgorithmIdAttribute; overload;

  end;

  [DNTypeName('System.Reflection.AssemblyAlgorithmIdAttribute')]
  DNAssemblyAlgorithmIdAttribute = interface(DNAttribute)
  ['{0D052B0A-23D1-3BAC-85EE-4E764B814CEE}']
  { getters & setters } 

    function get_AlgorithmId: UInt32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AlgorithmId: UInt32 read get_AlgorithmId;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyAlgorithmIdAttribute = class(TDNGenericImport<DNAssemblyAlgorithmIdAttributeClass, DNAssemblyAlgorithmIdAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCompanyAttributeClass = interface(DNAttributeClass)
  ['{FDA892B8-948E-556E-9A43-609F8B968A8D}']
  { constructors } 

    {class} function init(company: string): DNAssemblyCompanyAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCompanyAttribute')]
  DNAssemblyCompanyAttribute = interface(DNAttribute)
  ['{62342FB2-16BF-30A9-88AD-6BC781EEC94F}']
  { getters & setters } 

    function get_Company: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Company: string read get_Company;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCompanyAttribute = class(TDNGenericImport<DNAssemblyCompanyAttributeClass, DNAssemblyCompanyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyConfigurationAttributeClass = interface(DNAttributeClass)
  ['{54C240D2-188C-5B48-806D-0DB324884B9F}']
  { constructors } 

    {class} function init(configuration: string): DNAssemblyConfigurationAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyConfigurationAttribute')]
  DNAssemblyConfigurationAttribute = interface(DNAttribute)
  ['{09DD9840-5E39-317A-AAB3-0A467998DE25}']
  { getters & setters } 

    function get_Configuration: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Configuration: string read get_Configuration;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyConfigurationAttribute = class(TDNGenericImport<DNAssemblyConfigurationAttributeClass, DNAssemblyConfigurationAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCopyrightAttributeClass = interface(DNAttributeClass)
  ['{5A25B9F8-69E3-509F-8B7F-24A35D6850BB}']
  { constructors } 

    {class} function init(copyright: string): DNAssemblyCopyrightAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCopyrightAttribute')]
  DNAssemblyCopyrightAttribute = interface(DNAttribute)
  ['{8687959F-D86D-3217-8D58-BE9A0427BB84}']
  { getters & setters } 

    function get_Copyright: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Copyright: string read get_Copyright;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCopyrightAttribute = class(TDNGenericImport<DNAssemblyCopyrightAttributeClass, DNAssemblyCopyrightAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCultureAttributeClass = interface(DNAttributeClass)
  ['{89B7E826-1B2B-5BFE-8144-40BCF9A0EF59}']
  { constructors } 

    {class} function init(culture: string): DNAssemblyCultureAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCultureAttribute')]
  DNAssemblyCultureAttribute = interface(DNAttribute)
  ['{4265AB21-A68F-38A9-98D8-5D62B8035EA0}']
  { getters & setters } 

    function get_Culture: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Culture: string read get_Culture;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCultureAttribute = class(TDNGenericImport<DNAssemblyCultureAttributeClass, DNAssemblyCultureAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDefaultAliasAttributeClass = interface(DNAttributeClass)
  ['{55FA9A88-4FD2-5F4D-91D9-1D0B05CC9B06}']
  { constructors } 

    {class} function init(defaultAlias: string): DNAssemblyDefaultAliasAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDefaultAliasAttribute')]
  DNAssemblyDefaultAliasAttribute = interface(DNAttribute)
  ['{8BEB1256-5D9B-3262-BF85-BEB6287E4EEA}']
  { getters & setters } 

    function get_DefaultAlias: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DefaultAlias: string read get_DefaultAlias;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDefaultAliasAttribute = class(TDNGenericImport<DNAssemblyDefaultAliasAttributeClass, DNAssemblyDefaultAliasAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDelaySignAttributeClass = interface(DNAttributeClass)
  ['{2FFA77AA-C3E9-565D-BABD-FB2CED1C3C5C}']
  { constructors } 

    {class} function init(delaySign: Boolean): DNAssemblyDelaySignAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDelaySignAttribute')]
  DNAssemblyDelaySignAttribute = interface(DNAttribute)
  ['{4804184F-4741-396B-AF5B-71134937F21A}']
  { getters & setters } 

    function get_DelaySign: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DelaySign: Boolean read get_DelaySign;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDelaySignAttribute = class(TDNGenericImport<DNAssemblyDelaySignAttributeClass, DNAssemblyDelaySignAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDescriptionAttributeClass = interface(DNAttributeClass)
  ['{D20B5BD7-4DD4-5528-AF53-10AC2A0D23D9}']
  { constructors } 

    {class} function init(description: string): DNAssemblyDescriptionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDescriptionAttribute')]
  DNAssemblyDescriptionAttribute = interface(DNAttribute)
  ['{432E5E9F-03BA-37B2-8EDF-7FAC14B03B4F}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDescriptionAttribute = class(TDNGenericImport<DNAssemblyDescriptionAttributeClass, DNAssemblyDescriptionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFileVersionAttributeClass = interface(DNAttributeClass)
  ['{97F69DAA-956A-5704-8A3F-69EA8834D947}']
  { constructors } 

    {class} function init(version: string): DNAssemblyFileVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyFileVersionAttribute')]
  DNAssemblyFileVersionAttribute = interface(DNAttribute)
  ['{14152CB5-DC51-3C42-8A43-09854DEA1B8F}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFileVersionAttribute = class(TDNGenericImport<DNAssemblyFileVersionAttributeClass, DNAssemblyFileVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFlagsAttributeClass = interface(DNAttributeClass)
  ['{E4AAE854-8416-5342-B34E-FEED258DDA6D}']
  { constructors } 

    {class} function init(flags: UInt32): DNAssemblyFlagsAttribute; overload;
    {class} function init(assemblyFlags: Int32): DNAssemblyFlagsAttribute; overload;
    {class} function init(assemblyFlags: DNAssemblyNameFlags): DNAssemblyFlagsAttribute; overload;

  end;

  [DNTypeName('System.Reflection.AssemblyFlagsAttribute')]
  DNAssemblyFlagsAttribute = interface(DNAttribute)
  ['{4554ED74-4243-3E7C-9B33-E9A89379C4F1}']
  { getters & setters } 

    function get_Flags: UInt32;
    function get_AssemblyFlags: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Flags: UInt32 read get_Flags;
    property AssemblyFlags: Int32 read get_AssemblyFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFlagsAttribute = class(TDNGenericImport<DNAssemblyFlagsAttributeClass, DNAssemblyFlagsAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyInformationalVersionAttributeClass = interface(DNAttributeClass)
  ['{E385F6D5-0409-52BC-8838-3F8403F4ECB7}']
  { constructors } 

    {class} function init(informationalVersion: string): DNAssemblyInformationalVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyInformationalVersionAttribute')]
  DNAssemblyInformationalVersionAttribute = interface(DNAttribute)
  ['{894593B9-99E5-3B61-A592-EE44B9396277}']
  { getters & setters } 

    function get_InformationalVersion: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property InformationalVersion: string read get_InformationalVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyInformationalVersionAttribute = class(TDNGenericImport<DNAssemblyInformationalVersionAttributeClass, DNAssemblyInformationalVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyFileAttributeClass = interface(DNAttributeClass)
  ['{46AA94E0-8316-507D-9F0F-782B6286C710}']
  { constructors } 

    {class} function init(keyFile: string): DNAssemblyKeyFileAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyKeyFileAttribute')]
  DNAssemblyKeyFileAttribute = interface(DNAttribute)
  ['{FF408450-1DB9-3203-84EC-B70A01F48A06}']
  { getters & setters } 

    function get_KeyFile: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyFile: string read get_KeyFile;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyFileAttribute = class(TDNGenericImport<DNAssemblyKeyFileAttributeClass, DNAssemblyKeyFileAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyNameAttributeClass = interface(DNAttributeClass)
  ['{DF2C2768-3BB8-50B5-BDFE-F8E43710A631}']
  { constructors } 

    {class} function init(keyName: string): DNAssemblyKeyNameAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyKeyNameAttribute')]
  DNAssemblyKeyNameAttribute = interface(DNAttribute)
  ['{3DACE301-6C51-3BF7-B975-E4A05F00FD4D}']
  { getters & setters } 

    function get_KeyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyName: string read get_KeyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyNameAttribute = class(TDNGenericImport<DNAssemblyKeyNameAttributeClass, DNAssemblyKeyNameAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyMetadataAttributeClass = interface(DNAttributeClass)
  ['{4AE112D5-49E1-551E-9C93-C414FE3FEECF}']
  { constructors } 

    {class} function init(key: string; value: string): DNAssemblyMetadataAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyMetadataAttribute')]
  DNAssemblyMetadataAttribute = interface(DNAttribute)
  ['{4DEDE958-C548-3088-84B2-999F3C0671F9}']
  { getters & setters } 

    function get_Key: string;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: string read get_Key;
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyMetadataAttribute = class(TDNGenericImport<DNAssemblyMetadataAttributeClass, DNAssemblyMetadataAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyProductAttributeClass = interface(DNAttributeClass)
  ['{F4D01633-D926-5AB2-B726-00368CFB06F3}']
  { constructors } 

    {class} function init(product: string): DNAssemblyProductAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyProductAttribute')]
  DNAssemblyProductAttribute = interface(DNAttribute)
  ['{CFE2BCF1-683C-39B5-83CE-4B186A521513}']
  { getters & setters } 

    function get_Product: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Product: string read get_Product;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyProductAttribute = class(TDNGenericImport<DNAssemblyProductAttributeClass, DNAssemblyProductAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblySignatureKeyAttributeClass = interface(DNAttributeClass)
  ['{3591E640-03F0-5512-A814-31C1E24D4E69}']
  { constructors } 

    {class} function init(publicKey: string; countersignature: string): DNAssemblySignatureKeyAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblySignatureKeyAttribute')]
  DNAssemblySignatureKeyAttribute = interface(DNAttribute)
  ['{4FDC3DFD-7BBE-3C3A-948D-56F7123056C0}']
  { getters & setters } 

    function get_PublicKey: string;
    function get_Countersignature: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PublicKey: string read get_PublicKey;
    property Countersignature: string read get_Countersignature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblySignatureKeyAttribute = class(TDNGenericImport<DNAssemblySignatureKeyAttributeClass, DNAssemblySignatureKeyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTitleAttributeClass = interface(DNAttributeClass)
  ['{388D59DF-E2AA-5075-BE28-D815E2651083}']
  { constructors } 

    {class} function init(title: string): DNAssemblyTitleAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyTitleAttribute')]
  DNAssemblyTitleAttribute = interface(DNAttribute)
  ['{51B4F67C-2FCB-391D-A381-D040100D6717}']
  { getters & setters } 

    function get_Title: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTitleAttribute = class(TDNGenericImport<DNAssemblyTitleAttributeClass, DNAssemblyTitleAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTrademarkAttributeClass = interface(DNAttributeClass)
  ['{046F7A31-0EEF-5DB7-8566-206BE75E4014}']
  { constructors } 

    {class} function init(trademark: string): DNAssemblyTrademarkAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyTrademarkAttribute')]
  DNAssemblyTrademarkAttribute = interface(DNAttribute)
  ['{E64C95DF-EADC-3D08-9C6F-80F29D92CB4E}']
  { getters & setters } 

    function get_Trademark: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Trademark: string read get_Trademark;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTrademarkAttribute = class(TDNGenericImport<DNAssemblyTrademarkAttributeClass, DNAssemblyTrademarkAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyVersionAttributeClass = interface(DNAttributeClass)
  ['{FC2FB36C-1738-5D61-922C-49E613AB1DB7}']
  { constructors } 

    {class} function init(version: string): DNAssemblyVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyVersionAttribute')]
  DNAssemblyVersionAttribute = interface(DNAttribute)
  ['{2D0FA06F-88FD-3643-8DBC-1F428A2B1A3B}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyVersionAttribute = class(TDNGenericImport<DNAssemblyVersionAttributeClass, DNAssemblyVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNDefaultMemberAttributeClass = interface(DNAttributeClass)
  ['{168FE62A-47DF-57D5-AC68-AF5F1B59C233}']
  { constructors } 

    {class} function init(memberName: string): DNDefaultMemberAttribute;

  end;

  [DNTypeName('System.Reflection.DefaultMemberAttribute')]
  DNDefaultMemberAttribute = interface(DNAttribute)
  ['{CF452B26-6040-3ACB-9C72-CE5BB86E5046}']
  { getters & setters } 

    function get_MemberName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultMemberAttribute = class(TDNGenericImport<DNDefaultMemberAttributeClass, DNDefaultMemberAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscateAssemblyAttributeClass = interface(DNAttributeClass)
  ['{A5C52229-B210-5F9B-BBC4-9002BA9F6F88}']
  { constructors } 

    {class} function init(assemblyIsPrivate: Boolean): DNObfuscateAssemblyAttribute;

  end;

  [DNTypeName('System.Reflection.ObfuscateAssemblyAttribute')]
  DNObfuscateAssemblyAttribute = interface(DNAttribute)
  ['{D495920D-00A0-3D6F-920C-672DF186CEC8}']
  { getters & setters } 

    function get_AssemblyIsPrivate: Boolean;
    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AssemblyIsPrivate: Boolean read get_AssemblyIsPrivate;
    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscateAssemblyAttribute = class(TDNGenericImport<DNObfuscateAssemblyAttributeClass, DNObfuscateAssemblyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscationAttributeClass = interface(DNAttributeClass)
  ['{4987A063-5267-5A1B-89EF-9C95485CAB8B}']
  { constructors } 

    {class} function init: DNObfuscationAttribute;

  end;

  [DNTypeName('System.Reflection.ObfuscationAttribute')]
  DNObfuscationAttribute = interface(DNAttribute)
  ['{93D11DE9-5F6C-354A-A7C5-16CCCA64A9B8}']
  { getters & setters } 

    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_Exclude: Boolean;
    procedure set_Exclude(value: Boolean);
    function get_ApplyToMembers: Boolean;
    procedure set_ApplyToMembers(value: Boolean);
    function get_Feature: string;
    procedure set_Feature(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    property Exclude: Boolean read get_Exclude write set_Exclude;
    property ApplyToMembers: Boolean read get_ApplyToMembers write set_ApplyToMembers;
    property Feature: string read get_Feature write set_Feature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscationAttribute = class(TDNGenericImport<DNObfuscationAttributeClass, DNObfuscationAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNNeutralResourcesLanguageAttributeClass = interface(DNAttributeClass)
  ['{AAC3B05D-AD96-5FA6-9A7B-0B7DF62AE471}']
  { constructors } 

    {class} function init(cultureName: string): DNNeutralResourcesLanguageAttribute; overload;
    {class} function init(cultureName: string; location: DNUltimateResourceFallbackLocation): DNNeutralResourcesLanguageAttribute; overload;

  end;

  [DNTypeName('System.Resources.NeutralResourcesLanguageAttribute')]
  DNNeutralResourcesLanguageAttribute = interface(DNAttribute)
  ['{87797538-6BAE-366A-A9BC-012C8F62EA44}']
  { getters & setters } 

    function get_CultureName: string;
    function get_Location: DNUltimateResourceFallbackLocation;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CultureName: string read get_CultureName;
    property Location: DNUltimateResourceFallbackLocation read get_Location;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNNeutralResourcesLanguageAttribute = class(TDNGenericImport<DNNeutralResourcesLanguageAttributeClass, DNNeutralResourcesLanguageAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNSatelliteContractVersionAttributeClass = interface(DNAttributeClass)
  ['{2899BDC2-FB7C-587F-A525-4D361BAE2814}']
  { constructors } 

    {class} function init(version: string): DNSatelliteContractVersionAttribute;

  end;

  [DNTypeName('System.Resources.SatelliteContractVersionAttribute')]
  DNSatelliteContractVersionAttribute = interface(DNAttribute)
  ['{F4AE34F8-6CE4-32DC-96BA-9C7A0A9C6D06}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSatelliteContractVersionAttribute = class(TDNGenericImport<DNSatelliteContractVersionAttributeClass, DNSatelliteContractVersionAttribute>) end;

  //-------------namespace: System.Runtime----------------
  DNAssemblyTargetedPatchBandAttributeClass = interface(DNAttributeClass)
  ['{C1B22906-6519-587D-8F0D-69BA29ADAF61}']
  { constructors } 

    {class} function init(targetedPatchBand: string): DNAssemblyTargetedPatchBandAttribute;

  end;

  [DNTypeName('System.Runtime.AssemblyTargetedPatchBandAttribute')]
  DNAssemblyTargetedPatchBandAttribute = interface(DNAttribute)
  ['{F5F0D00D-E42F-3B65-BD13-BE1F895AF4FB}']
  { getters & setters } 

    function get_TargetedPatchBand: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TargetedPatchBand: string read get_TargetedPatchBand;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTargetedPatchBandAttribute = class(TDNGenericImport<DNAssemblyTargetedPatchBandAttributeClass, DNAssemblyTargetedPatchBandAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAccessedThroughPropertyAttributeClass = interface(DNAttributeClass)
  ['{D67FEB00-68EB-52CD-9B86-602763113524}']
  { constructors } 

    {class} function init(propertyName: string): DNAccessedThroughPropertyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AccessedThroughPropertyAttribute')]
  DNAccessedThroughPropertyAttribute = interface(DNAttribute)
  ['{5EFB687D-2B50-3216-BD74-52D06C8D3CD1}']
  { getters & setters } 

    function get_PropertyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAccessedThroughPropertyAttribute = class(TDNGenericImport<DNAccessedThroughPropertyAttributeClass, DNAccessedThroughPropertyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerFilePathAttributeClass = interface(DNAttributeClass)
  ['{19D0A4EE-2995-5839-9934-0EBD45005FAE}']
  { constructors } 

    {class} function init: DNCallerFilePathAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerFilePathAttribute')]
  DNCallerFilePathAttribute = interface(DNAttribute)
  ['{5F241867-B0BB-3E68-9CCC-FA19588B5C05}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerFilePathAttribute = class(TDNGenericImport<DNCallerFilePathAttributeClass, DNCallerFilePathAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerLineNumberAttributeClass = interface(DNAttributeClass)
  ['{67810E3A-5EBD-540F-9230-FF053B94E001}']
  { constructors } 

    {class} function init: DNCallerLineNumberAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerLineNumberAttribute')]
  DNCallerLineNumberAttribute = interface(DNAttribute)
  ['{CA3D806C-300D-36D5-B7E8-545A58FCD40A}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerLineNumberAttribute = class(TDNGenericImport<DNCallerLineNumberAttributeClass, DNCallerLineNumberAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerMemberNameAttributeClass = interface(DNAttributeClass)
  ['{6819DE6F-F130-528A-91A9-8870492DFB0F}']
  { constructors } 

    {class} function init: DNCallerMemberNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerMemberNameAttribute')]
  DNCallerMemberNameAttribute = interface(DNAttribute)
  ['{082F8B4E-C46E-3869-A23B-3E8DC1566FA8}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerMemberNameAttribute = class(TDNGenericImport<DNCallerMemberNameAttributeClass, DNCallerMemberNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilationRelaxationsAttributeClass = interface(DNAttributeClass)
  ['{94F64744-4F41-554E-A7CC-EC2F21A6572F}']
  { constructors } 

    {class} function init(relaxations: Int32): DNCompilationRelaxationsAttribute; overload;
    {class} function init(relaxations: DNCompilationRelaxations): DNCompilationRelaxationsAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxationsAttribute')]
  DNCompilationRelaxationsAttribute = interface(DNAttribute)
  ['{76CEC05B-C55E-3ADF-92A2-0698F1CF2017}']
  { getters & setters } 

    function get_CompilationRelaxations: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CompilationRelaxations: Int32 read get_CompilationRelaxations;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilationRelaxationsAttribute = class(TDNGenericImport<DNCompilationRelaxationsAttributeClass, DNCompilationRelaxationsAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGeneratedAttributeClass = interface(DNAttributeClass)
  ['{8A0265B6-EF17-5666-A314-6FB46BB55E75}']
  { constructors } 

    {class} function init: DNCompilerGeneratedAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilerGeneratedAttribute')]
  DNCompilerGeneratedAttribute = interface(DNAttribute)
  ['{0929FA02-BA1E-35A8-859F-A8F6153344E0}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGeneratedAttribute = class(TDNGenericImport<DNCompilerGeneratedAttributeClass, DNCompilerGeneratedAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGlobalScopeAttributeClass = interface(DNAttributeClass)
  ['{094DAB5F-2607-5B6F-B4AB-59C0C42E9177}']
  { constructors } 

    {class} function init: DNCompilerGlobalScopeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilerGlobalScopeAttribute')]
  DNCompilerGlobalScopeAttribute = interface(DNAttribute)
  ['{4B601364-A04B-38BC-BD38-A18E981324CF}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGlobalScopeAttribute = class(TDNGenericImport<DNCompilerGlobalScopeAttributeClass, DNCompilerGlobalScopeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCustomConstantAttributeClass = interface(DNAttributeClass)
  ['{32F20802-B152-55A6-9268-F6B30D7FCD9B}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.CustomConstantAttribute')]
  DNCustomConstantAttribute = interface(DNAttribute)
  ['{6F7A3516-EFD9-31C3-BC9A-A89DF19F64E7}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCustomConstantAttribute = class(TDNGenericImport<DNCustomConstantAttributeClass, DNCustomConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDateTimeConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{29DDE945-71C3-53E0-B372-19996A182845}']
  { constructors } 

    {class} function init(ticks: Int64): DNDateTimeConstantAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DateTimeConstantAttribute')]
  DNDateTimeConstantAttribute = interface(DNCustomConstantAttribute)
  ['{3178FD5D-2A5B-30B9-9C5C-7593802F9C1A}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDateTimeConstantAttribute = class(TDNGenericImport<DNDateTimeConstantAttributeClass, DNDateTimeConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIDispatchConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{3C3022BD-5ACB-5709-A49A-77C8E130AD43}']
  { constructors } 

    {class} function init: DNIDispatchConstantAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IDispatchConstantAttribute')]
  DNIDispatchConstantAttribute = interface(DNCustomConstantAttribute)
  ['{E947A0B0-D47F-3AA3-9B77-4624E0F3ACA4}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIDispatchConstantAttribute = class(TDNGenericImport<DNIDispatchConstantAttributeClass, DNIDispatchConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIUnknownConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{03C1C546-A2B1-505B-8982-220F0DC8B4DC}']
  { constructors } 

    {class} function init: DNIUnknownConstantAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IUnknownConstantAttribute')]
  DNIUnknownConstantAttribute = interface(DNCustomConstantAttribute)
  ['{590E4A07-DAFC-3BE7-A178-DA349BBA980B}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIUnknownConstantAttribute = class(TDNGenericImport<DNIUnknownConstantAttributeClass, DNIUnknownConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDecimalConstantAttributeClass = interface(DNAttributeClass)
  ['{7BAF0737-9B63-527C-8700-6AFE4FD314E2}']
  { constructors } 

    {class} function init(scale: Byte; sign: Byte; hi: UInt32; mid: UInt32; low: UInt32): DNDecimalConstantAttribute; overload;
    {class} function init(scale: Byte; sign: Byte; hi: Int32; mid: Int32; low: Int32): DNDecimalConstantAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DecimalConstantAttribute')]
  DNDecimalConstantAttribute = interface(DNAttribute)
  ['{AC8DE863-B115-3179-810F-162B43ABD2B5}']
  { getters & setters } 

    function get_Value: DNDecimal;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNDecimal read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDecimalConstantAttribute = class(TDNGenericImport<DNDecimalConstantAttributeClass, DNDecimalConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDefaultDependencyAttributeClass = interface(DNAttributeClass)
  ['{F263D283-FA1F-551C-90FC-F827B93AD4CE}']
  { constructors } 

    {class} function init(loadHintArgument: DNLoadHint): DNDefaultDependencyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DefaultDependencyAttribute')]
  DNDefaultDependencyAttribute = interface(DNAttribute)
  ['{381A1B94-A891-316F-A5BB-F722F3F3F40B}']
  { getters & setters } 

    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDependencyAttribute = class(TDNGenericImport<DNDefaultDependencyAttributeClass, DNDefaultDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDependencyAttributeClass = interface(DNAttributeClass)
  ['{1A5EF0AF-E869-5E6F-A6D5-63BAF2C0FC2A}']
  { constructors } 

    {class} function init(dependentAssemblyArgument: string; loadHintArgument: DNLoadHint): DNDependencyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DependencyAttribute')]
  DNDependencyAttribute = interface(DNAttribute)
  ['{146B5901-DA93-3E8F-924D-FE817FCB247F}']
  { getters & setters } 

    function get_DependentAssembly: string;
    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DependentAssembly: string read get_DependentAssembly;
    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDependencyAttribute = class(TDNGenericImport<DNDependencyAttributeClass, DNDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDisablePrivateReflectionAttributeClass = interface(DNAttributeClass)
  ['{56655BE5-C777-5379-AD09-AAA2BF73C19E}']
  { constructors } 

    {class} function init: DNDisablePrivateReflectionAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DisablePrivateReflectionAttribute')]
  DNDisablePrivateReflectionAttribute = interface(DNAttribute)
  ['{9802E62F-47E5-3B9C-8006-B00753EC6862}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDisablePrivateReflectionAttribute = class(TDNGenericImport<DNDisablePrivateReflectionAttributeClass, DNDisablePrivateReflectionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDiscardableAttributeClass = interface(DNAttributeClass)
  ['{DBCAE85A-81E8-5792-846B-761175683B8E}']
  { constructors } 

    {class} function init: DNDiscardableAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DiscardableAttribute')]
  DNDiscardableAttribute = interface(DNAttribute)
  ['{837A6733-1675-3BC9-BBF8-13889F84DAF4}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDiscardableAttribute = class(TDNGenericImport<DNDiscardableAttributeClass, DNDiscardableAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNExtensionAttributeClass = interface(DNAttributeClass)
  ['{817933E8-8954-5C3E-A1B3-688F0F5A4327}']
  { constructors } 

    {class} function init: DNExtensionAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ExtensionAttribute')]
  DNExtensionAttribute = interface(DNAttribute)
  ['{C0BB3BBD-60B6-3FB0-9D6B-D4EFF6D0F291}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNExtensionAttribute = class(TDNGenericImport<DNExtensionAttributeClass, DNExtensionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedAddressValueTypeAttributeClass = interface(DNAttributeClass)
  ['{74778486-75E4-5C74-B84F-441A68ABFACC}']
  { constructors } 

    {class} function init: DNFixedAddressValueTypeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FixedAddressValueTypeAttribute')]
  DNFixedAddressValueTypeAttribute = interface(DNAttribute)
  ['{C6B5F214-0743-3868-B1EA-C4C23CE2AF52}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedAddressValueTypeAttribute = class(TDNGenericImport<DNFixedAddressValueTypeAttributeClass, DNFixedAddressValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedBufferAttributeClass = interface(DNAttributeClass)
  ['{83CD99B3-227B-5164-A821-105AC35E71F7}']
  { constructors } 

    {class} function init(elementType: DNType; length: Int32): DNFixedBufferAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FixedBufferAttribute')]
  DNFixedBufferAttribute = interface(DNAttribute)
  ['{5FAD2201-A48E-31EB-A06E-C976638A3CD0}']
  { getters & setters } 

    function get_ElementType: DNType;
    function get_Length: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ElementType: DNType read get_ElementType;
    property Length: Int32 read get_Length;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedBufferAttribute = class(TDNGenericImport<DNFixedBufferAttributeClass, DNFixedBufferAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNHasCopySemanticsAttributeClass = interface(DNAttributeClass)
  ['{65A4ED32-03BC-5632-BF1A-0F0E05095FEA}']
  { constructors } 

    {class} function init: DNHasCopySemanticsAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.HasCopySemanticsAttribute')]
  DNHasCopySemanticsAttribute = interface(DNAttribute)
  ['{73293BA6-A4CF-394F-A0B3-EE566FD52BD7}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNHasCopySemanticsAttribute = class(TDNGenericImport<DNHasCopySemanticsAttributeClass, DNHasCopySemanticsAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIndexerNameAttributeClass = interface(DNAttributeClass)
  ['{7E018C0D-616B-5365-9216-49652BB32C2E}']
  { constructors } 

    {class} function init(indexerName: string): DNIndexerNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IndexerNameAttribute')]
  DNIndexerNameAttribute = interface(DNAttribute)
  ['{9599C078-DC94-3EA2-8761-408295BD1155}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIndexerNameAttribute = class(TDNGenericImport<DNIndexerNameAttributeClass, DNIndexerNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNInternalsVisibleToAttributeClass = interface(DNAttributeClass)
  ['{93715A5B-58EB-5D20-9CEA-FB8F18334CBF}']
  { constructors } 

    {class} function init(assemblyName: string): DNInternalsVisibleToAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.InternalsVisibleToAttribute')]
  DNInternalsVisibleToAttribute = interface(DNAttribute)
  ['{E6A603DA-B5E3-3DE4-8D94-BD623CAE6B8D}']
  { getters & setters } 

    function get_AssemblyName: string;
    function get_AllInternalsVisible: Boolean;
    procedure set_AllInternalsVisible(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AssemblyName: string read get_AssemblyName;
    property AllInternalsVisible: Boolean read get_AllInternalsVisible write set_AllInternalsVisible;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInternalsVisibleToAttribute = class(TDNGenericImport<DNInternalsVisibleToAttributeClass, DNInternalsVisibleToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsByRefLikeAttributeClass = interface(DNAttributeClass)
  ['{C94260D0-B16A-542F-B4D7-9E88FA440458}']
  { constructors } 

    {class} function init: DNIsByRefLikeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IsByRefLikeAttribute')]
  DNIsByRefLikeAttribute = interface(DNAttribute)
  ['{7F83D16C-0D44-37B1-A50F-6E8708F03E30}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsByRefLikeAttribute = class(TDNGenericImport<DNIsByRefLikeAttributeClass, DNIsByRefLikeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsReadOnlyAttributeClass = interface(DNAttributeClass)
  ['{C51AD005-2C64-5F69-A3A2-13C725A859E9}']
  { constructors } 

    {class} function init: DNIsReadOnlyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IsReadOnlyAttribute')]
  DNIsReadOnlyAttribute = interface(DNAttribute)
  ['{4C448A83-7EC0-3E1D-914C-A7857C45B1F7}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsReadOnlyAttribute = class(TDNGenericImport<DNIsReadOnlyAttributeClass, DNIsReadOnlyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNMethodImplAttributeClass = interface(DNAttributeClass)
  ['{709C2F88-F871-57C4-95C8-183CD27FD494}']
  { constructors } 

    {class} function init(methodImplOptions: DNMethodImplOptions): DNMethodImplAttribute; overload;
    {class} function init(value: Int16): DNMethodImplAttribute; overload;
    {class} function init: DNMethodImplAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.MethodImplAttribute')]
  DNMethodImplAttribute = interface(DNAttribute)
  ['{48D0CFE7-3128-3D2C-A5B5-8C7B82B4AB4F}']
  { getters & setters } 

    function get_Value: DNMethodImplOptions;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNMethodImplOptions read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMethodImplAttribute = class(TDNGenericImport<DNMethodImplAttributeClass, DNMethodImplAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNNativeCppClassAttributeClass = interface(DNAttributeClass)
  ['{4BAAB347-D247-5D86-9906-F5539E7E68FF}']
  { constructors } 

    {class} function init: DNNativeCppClassAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.NativeCppClassAttribute')]
  DNNativeCppClassAttribute = interface(DNAttribute)
  ['{C437AB2E-865B-321D-BA15-0C8EC4CA119B}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNativeCppClassAttribute = class(TDNGenericImport<DNNativeCppClassAttributeClass, DNNativeCppClassAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{16049994-881F-5419-9FA8-AC851FBE351F}']
  { constructors } 

    {class} function init: DNReferenceAssemblyAttribute; overload;
    {class} function init(description: string): DNReferenceAssemblyAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ReferenceAssemblyAttribute')]
  DNReferenceAssemblyAttribute = interface(DNAttribute)
  ['{FF96A510-419B-3A11-B15A-C5A049007305}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReferenceAssemblyAttribute = class(TDNGenericImport<DNReferenceAssemblyAttributeClass, DNReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRequiredAttributeAttributeClass = interface(DNAttributeClass)
  ['{E420E9B5-B1C8-51B3-BBF9-623D294F7B73}']
  { constructors } 

    {class} function init(requiredContract: DNType): DNRequiredAttributeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RequiredAttributeAttribute')]
  DNRequiredAttributeAttribute = interface(DNAttribute)
  ['{D49C12A2-C401-3894-8005-716C2F692D38}']
  { getters & setters } 

    function get_RequiredContract: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property RequiredContract: DNType read get_RequiredContract;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRequiredAttributeAttribute = class(TDNGenericImport<DNRequiredAttributeAttributeClass, DNRequiredAttributeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeCompatibilityAttributeClass = interface(DNAttributeClass)
  ['{B5AADBD1-D156-583E-AD28-EFD3EAA926D7}']
  { constructors } 

    {class} function init: DNRuntimeCompatibilityAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeCompatibilityAttribute')]
  DNRuntimeCompatibilityAttribute = interface(DNAttribute)
  ['{52179AA0-9245-3CF7-8E1E-50ACE473076F}']
  { getters & setters } 

    function get_WrapNonExceptionThrows: Boolean;
    procedure set_WrapNonExceptionThrows(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WrapNonExceptionThrows: Boolean read get_WrapNonExceptionThrows write set_WrapNonExceptionThrows;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRuntimeCompatibilityAttribute = class(TDNGenericImport<DNRuntimeCompatibilityAttributeClass, DNRuntimeCompatibilityAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNScopelessEnumAttributeClass = interface(DNAttributeClass)
  ['{03086AAB-B327-5C3B-8A51-C2CC4AAF1978}']
  { constructors } 

    {class} function init: DNScopelessEnumAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ScopelessEnumAttribute')]
  DNScopelessEnumAttribute = interface(DNAttribute)
  ['{92267E67-8E14-3EEE-8F8F-6D64BCE03A13}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNScopelessEnumAttribute = class(TDNGenericImport<DNScopelessEnumAttributeClass, DNScopelessEnumAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSpecialNameAttributeClass = interface(DNAttributeClass)
  ['{50725624-CDF6-5BD9-8C69-BBB5CAED1C76}']
  { constructors } 

    {class} function init: DNSpecialNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SpecialNameAttribute')]
  DNSpecialNameAttribute = interface(DNAttribute)
  ['{2DA08C76-26F3-3A7B-A890-EF75AD519EFF}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSpecialNameAttribute = class(TDNGenericImport<DNSpecialNameAttributeClass, DNSpecialNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStateMachineAttributeClass = interface(DNAttributeClass)
  ['{C97BB2B8-D697-5D1F-9493-1CF1E5B36419}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StateMachineAttribute')]
  DNStateMachineAttribute = interface(DNAttribute)
  ['{256209B2-0FDF-3407-9155-89D47F23C663}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStateMachineAttribute = class(TDNGenericImport<DNStateMachineAttributeClass, DNStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{01DB7CED-312E-5BD4-B214-3E936DF5FB28}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNAsyncStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncStateMachineAttribute')]
  DNAsyncStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{296B54F2-4A20-3383-A0DF-0889BB6BF6D9}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAsyncStateMachineAttribute = class(TDNGenericImport<DNAsyncStateMachineAttributeClass, DNAsyncStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIteratorStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{4FB0DDEA-BADC-5078-9DF9-02085F2991AD}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNIteratorStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IteratorStateMachineAttribute')]
  DNIteratorStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{72C6F07F-3336-3642-BA2A-B575C80DE6EF}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIteratorStateMachineAttribute = class(TDNGenericImport<DNIteratorStateMachineAttributeClass, DNIteratorStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStringFreezingAttributeClass = interface(DNAttributeClass)
  ['{11F265B8-1C24-5217-8FD7-C07D2C7616BC}']
  { constructors } 

    {class} function init: DNStringFreezingAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StringFreezingAttribute')]
  DNStringFreezingAttribute = interface(DNAttribute)
  ['{D37A4151-81B2-36C8-96E5-E191E2661614}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNStringFreezingAttribute = class(TDNGenericImport<DNStringFreezingAttributeClass, DNStringFreezingAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSuppressIldasmAttributeClass = interface(DNAttributeClass)
  ['{B9621744-318C-5748-B180-D1586174205A}']
  { constructors } 

    {class} function init: DNSuppressIldasmAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SuppressIldasmAttribute')]
  DNSuppressIldasmAttribute = interface(DNAttribute)
  ['{1AB476DC-0980-352F-BF40-1185B394BAA1}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressIldasmAttribute = class(TDNGenericImport<DNSuppressIldasmAttributeClass, DNSuppressIldasmAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTupleElementNamesAttributeClass = interface(DNAttributeClass)
  ['{A8DF3629-E8A2-522A-8A7B-39E65C5ADE2B}']
  { constructors } 

    {class} function init(transformNames: TArray<string>): DNTupleElementNamesAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TupleElementNamesAttribute')]
  DNTupleElementNamesAttribute = interface(DNAttribute)
  ['{55FFDB9F-75D6-3B55-AF68-5D2E5BFFB48B}']
  { getters & setters } 

    function get_TransformNames: DNIList<string>;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TransformNames: DNIList<string> read get_TransformNames;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTupleElementNamesAttribute = class(TDNGenericImport<DNTupleElementNamesAttributeClass, DNTupleElementNamesAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedFromAttributeClass = interface(DNAttributeClass)
  ['{3A6B7CB2-EC03-5BA3-9E79-C5BC27FB5F94}']
  { constructors } 

    {class} function init(assemblyFullName: string): DNTypeForwardedFromAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedFromAttribute')]
  DNTypeForwardedFromAttribute = interface(DNAttribute)
  ['{EA95D642-A6DD-399C-9BEE-A7D5B35DF7EB}']
  { getters & setters } 

    function get_AssemblyFullName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AssemblyFullName: string read get_AssemblyFullName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedFromAttribute = class(TDNGenericImport<DNTypeForwardedFromAttributeClass, DNTypeForwardedFromAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedToAttributeClass = interface(DNAttributeClass)
  ['{D0ED9970-15E8-5A3C-AA0F-A555FE629388}']
  { constructors } 

    {class} function init(destination: DNType): DNTypeForwardedToAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedToAttribute')]
  DNTypeForwardedToAttribute = interface(DNAttribute)
  ['{8D6F53D6-8920-3775-A28D-A82E14BC5CFC}']
  { getters & setters } 

    function get_Destination: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Destination: DNType read get_Destination;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedToAttribute = class(TDNGenericImport<DNTypeForwardedToAttributeClass, DNTypeForwardedToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNUnsafeValueTypeAttributeClass = interface(DNAttributeClass)
  ['{822CC2D3-5CC6-5EB4-8ED2-FC19D973AB2A}']
  { constructors } 

    {class} function init: DNUnsafeValueTypeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.UnsafeValueTypeAttribute')]
  DNUnsafeValueTypeAttribute = interface(DNAttribute)
  ['{098F24A0-28FA-3A13-8FEE-844A721DA0B5}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnsafeValueTypeAttribute = class(TDNGenericImport<DNUnsafeValueTypeAttributeClass, DNUnsafeValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNPrePrepareMethodAttributeClass = interface(DNAttributeClass)
  ['{5EF4EC7F-6300-57DE-90AA-6D50F787192D}']
  { constructors } 

    {class} function init: DNPrePrepareMethodAttribute;

  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute')]
  DNPrePrepareMethodAttribute = interface(DNAttribute)
  ['{3BD6A87F-1E6C-3954-8AC7-ACDF00562C1A}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPrePrepareMethodAttribute = class(TDNGenericImport<DNPrePrepareMethodAttributeClass, DNPrePrepareMethodAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNReliabilityContractAttributeClass = interface(DNAttributeClass)
  ['{84DD5967-EB58-59F3-A907-4B3122DAF071}']
  { constructors } 

    {class} function init(consistencyGuarantee: DNConsistency; cer: DNCer): DNReliabilityContractAttribute;

  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.ReliabilityContractAttribute')]
  DNReliabilityContractAttribute = interface(DNAttribute)
  ['{A2651ABC-0640-3A77-B03B-211862A56F87}']
  { getters & setters } 

    function get_ConsistencyGuarantee: DNConsistency;
    function get_Cer: DNCer;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ConsistencyGuarantee: DNConsistency read get_ConsistencyGuarantee;
    property Cer: DNCer read get_Cer;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReliabilityContractAttribute = class(TDNGenericImport<DNReliabilityContractAttributeClass, DNReliabilityContractAttribute>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNHandleProcessCorruptedStateExceptionsAttributeClass = interface(DNAttributeClass)
  ['{C6893285-14FA-5480-B607-332E161930AD}']
  { constructors } 

    {class} function init: DNHandleProcessCorruptedStateExceptionsAttribute;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute')]
  DNHandleProcessCorruptedStateExceptionsAttribute = interface(DNAttribute)
  ['{A70C99E1-AF0B-39AA-AA9A-B4AA85D3F84D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNHandleProcessCorruptedStateExceptionsAttribute = class(TDNGenericImport<DNHandleProcessCorruptedStateExceptionsAttributeClass, DNHandleProcessCorruptedStateExceptionsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNAllowReversePInvokeCallsAttributeClass = interface(DNAttributeClass)
  ['{BCFD4ED3-3C97-502F-8931-1886D9BCEEEE}']
  { constructors } 

    {class} function init: DNAllowReversePInvokeCallsAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute')]
  DNAllowReversePInvokeCallsAttribute = interface(DNAttribute)
  ['{9B6D8AC7-E4EB-35E9-AD23-DFD536525B08}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowReversePInvokeCallsAttribute = class(TDNGenericImport<DNAllowReversePInvokeCallsAttributeClass, DNAllowReversePInvokeCallsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNAutomationProxyAttributeClass = interface(DNAttributeClass)
  ['{33C22184-8ED8-5BF0-8E25-DDA91A21B4F7}']
  { constructors } 

    {class} function init(val: Boolean): DNAutomationProxyAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.AutomationProxyAttribute')]
  DNAutomationProxyAttribute = interface(DNAttribute)
  ['{0E67C08B-D921-33D0-82FE-B6FD28BBAEFF}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAutomationProxyAttribute = class(TDNGenericImport<DNAutomationProxyAttributeClass, DNAutomationProxyAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBestFitMappingAttributeClass = interface(DNAttributeClass)
  ['{DCBF6E49-55BD-5F13-8FAA-1EBC1487E3AA}']
  { constructors } 

    {class} function init(BestFitMapping: Boolean): DNBestFitMappingAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.BestFitMappingAttribute')]
  DNBestFitMappingAttribute = interface(DNAttribute)
  ['{84FEE617-858B-364B-A662-8BF7ED5330CA}']
  { getters & setters } 

    function get_BestFitMapping: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BestFitMapping: Boolean read get_BestFitMapping;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNBestFitMappingAttribute = class(TDNGenericImport<DNBestFitMappingAttributeClass, DNBestFitMappingAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNClassInterfaceAttributeClass = interface(DNAttributeClass)
  ['{20D66739-019E-5154-86A9-C6E670F2BCDB}']
  { constructors } 

    {class} function init(classInterfaceType: DNClassInterfaceType): DNClassInterfaceAttribute; overload;
    {class} function init(classInterfaceType: Int16): DNClassInterfaceAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceAttribute')]
  DNClassInterfaceAttribute = interface(DNAttribute)
  ['{5819DB84-163F-3FA2-853B-43A0269626B1}']
  { getters & setters } 

    function get_Value: DNClassInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNClassInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNClassInterfaceAttribute = class(TDNGenericImport<DNClassInterfaceAttributeClass, DNClassInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCoClassAttributeClass = interface(DNAttributeClass)
  ['{E0EF2A42-A4A5-51A2-8455-57668A6F5758}']
  { constructors } 

    {class} function init(coClass: DNType): DNCoClassAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.CoClassAttribute')]
  DNCoClassAttribute = interface(DNAttribute)
  ['{03E4C7F5-974C-3253-9BE0-41470697BBAD}']
  { getters & setters } 

    function get_CoClass: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CoClass: DNType read get_CoClass;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCoClassAttribute = class(TDNGenericImport<DNCoClassAttributeClass, DNCoClassAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComAliasNameAttributeClass = interface(DNAttributeClass)
  ['{52F25DD1-BB43-587C-8E67-E069B1BC553C}']
  { constructors } 

    {class} function init(alias: string): DNComAliasNameAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComAliasNameAttribute')]
  DNComAliasNameAttribute = interface(DNAttribute)
  ['{E1AA0B69-CA47-3749-AEB1-133DCE4C705F}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComAliasNameAttribute = class(TDNGenericImport<DNComAliasNameAttributeClass, DNComAliasNameAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComCompatibleVersionAttributeClass = interface(DNAttributeClass)
  ['{D3A3C9C8-7106-5351-B671-FB9013670B76}']
  { constructors } 

    {class} function init(major: Int32; minor: Int32; build: Int32; revision: Int32): DNComCompatibleVersionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComCompatibleVersionAttribute')]
  DNComCompatibleVersionAttribute = interface(DNAttribute)
  ['{7F962EBF-2220-30F0-8B92-24A73B7CD268}']
  { getters & setters } 

    function get_MajorVersion: Int32;
    function get_MinorVersion: Int32;
    function get_BuildNumber: Int32;
    function get_RevisionNumber: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MajorVersion: Int32 read get_MajorVersion;
    property MinorVersion: Int32 read get_MinorVersion;
    property BuildNumber: Int32 read get_BuildNumber;
    property RevisionNumber: Int32 read get_RevisionNumber;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComCompatibleVersionAttribute = class(TDNGenericImport<DNComCompatibleVersionAttributeClass, DNComCompatibleVersionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComConversionLossAttributeClass = interface(DNAttributeClass)
  ['{66A36D7D-51BD-5F51-9520-C0195173A82F}']
  { constructors } 

    {class} function init: DNComConversionLossAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComConversionLossAttribute')]
  DNComConversionLossAttribute = interface(DNAttribute)
  ['{8A3FD229-B2A9-347F-93D2-87F3B7F92753}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComConversionLossAttribute = class(TDNGenericImport<DNComConversionLossAttributeClass, DNComConversionLossAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComDefaultInterfaceAttributeClass = interface(DNAttributeClass)
  ['{5D7C5071-D5FE-55C5-B386-439C470A3A15}']
  { constructors } 

    {class} function init(defaultInterface: DNType): DNComDefaultInterfaceAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComDefaultInterfaceAttribute')]
  DNComDefaultInterfaceAttribute = interface(DNAttribute)
  ['{43C2214A-95FC-362D-A792-7316C65B49AA}']
  { getters & setters } 

    function get_Value: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComDefaultInterfaceAttribute = class(TDNGenericImport<DNComDefaultInterfaceAttributeClass, DNComDefaultInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComEventInterfaceAttributeClass = interface(DNAttributeClass)
  ['{C81E8EF8-24E7-519B-B207-0BA6CE5E6F3F}']
  { constructors } 

    {class} function init(SourceInterface: DNType; EventProvider: DNType): DNComEventInterfaceAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComEventInterfaceAttribute')]
  DNComEventInterfaceAttribute = interface(DNAttribute)
  ['{830AC1F5-98EE-39A3-9212-FA5626CA855A}']
  { getters & setters } 

    function get_SourceInterface: DNType;
    function get_EventProvider: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SourceInterface: DNType read get_SourceInterface;
    property EventProvider: DNType read get_EventProvider;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComEventInterfaceAttribute = class(TDNGenericImport<DNComEventInterfaceAttributeClass, DNComEventInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComImportAttributeClass = interface(DNAttributeClass)
  ['{C22A0B04-C5A7-5FE9-8917-96B193C999C4}']
  { constructors } 

    {class} function init: DNComImportAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComImportAttribute')]
  DNComImportAttribute = interface(DNAttribute)
  ['{F1EBA909-6621-346D-9CE2-39F266C9D011}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComImportAttribute = class(TDNGenericImport<DNComImportAttributeClass, DNComImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComRegisterFunctionAttributeClass = interface(DNAttributeClass)
  ['{F00ED735-18FE-5956-9F51-B5EAB58CA38C}']
  { constructors } 

    {class} function init: DNComRegisterFunctionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComRegisterFunctionAttribute')]
  DNComRegisterFunctionAttribute = interface(DNAttribute)
  ['{630A3EF1-23C6-31FE-9D25-294E3B3E7486}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComRegisterFunctionAttribute = class(TDNGenericImport<DNComRegisterFunctionAttributeClass, DNComRegisterFunctionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComSourceInterfacesAttributeClass = interface(DNAttributeClass)
  ['{9193AE6E-6D8C-530D-92DE-EA23B1B504B3}']
  { constructors } 

    {class} function init(sourceInterfaces: string): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType; sourceInterface4: DNType): DNComSourceInterfacesAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComSourceInterfacesAttribute')]
  DNComSourceInterfacesAttribute = interface(DNAttribute)
  ['{AC0C43B1-6CA0-3E6C-B088-B11E96FA0CE3}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComSourceInterfacesAttribute = class(TDNGenericImport<DNComSourceInterfacesAttributeClass, DNComSourceInterfacesAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComUnregisterFunctionAttributeClass = interface(DNAttributeClass)
  ['{8D95B653-4E18-547B-9134-0016B418FEC7}']
  { constructors } 

    {class} function init: DNComUnregisterFunctionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComUnregisterFunctionAttribute')]
  DNComUnregisterFunctionAttribute = interface(DNAttribute)
  ['{8F45C7FF-1E6E-34C1-A7CC-260985392A05}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComUnregisterFunctionAttribute = class(TDNGenericImport<DNComUnregisterFunctionAttributeClass, DNComUnregisterFunctionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComVisibleAttributeClass = interface(DNAttributeClass)
  ['{75E0F677-B9A3-52A8-8A75-BAFB05B437D6}']
  { constructors } 

    {class} function init(visibility: Boolean): DNComVisibleAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComVisibleAttribute')]
  DNComVisibleAttribute = interface(DNAttribute)
  ['{1F4BCC99-E9D8-3AAB-99AF-4D1EC26E3376}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComVisibleAttribute = class(TDNGenericImport<DNComVisibleAttributeClass, DNComVisibleAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultCharSetAttributeClass = interface(DNAttributeClass)
  ['{8ABD0DF2-AB4C-51CC-9054-021A3989A7A6}']
  { constructors } 

    {class} function init(charSet: DNCharSet): DNDefaultCharSetAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultCharSetAttribute')]
  DNDefaultCharSetAttribute = interface(DNAttribute)
  ['{66708447-ECCE-3422-B3A3-C8161C1C693B}']
  { getters & setters } 

    function get_CharSet: DNCharSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CharSet: DNCharSet read get_CharSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultCharSetAttribute = class(TDNGenericImport<DNDefaultCharSetAttributeClass, DNDefaultCharSetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultDllImportSearchPathsAttributeClass = interface(DNAttributeClass)
  ['{7213F075-7745-5F4D-BBB2-E26A247E8E28}']
  { constructors } 

    {class} function init(paths: DNDllImportSearchPath): DNDefaultDllImportSearchPathsAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute')]
  DNDefaultDllImportSearchPathsAttribute = interface(DNAttribute)
  ['{15D71D4F-5F6D-3006-BECD-8786464CA678}']
  { getters & setters } 

    function get_Paths: DNDllImportSearchPath;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Paths: DNDllImportSearchPath read get_Paths;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDllImportSearchPathsAttribute = class(TDNGenericImport<DNDefaultDllImportSearchPathsAttributeClass, DNDefaultDllImportSearchPathsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispIdAttributeClass = interface(DNAttributeClass)
  ['{19B7BDDE-33EF-53AA-9488-476C098AC8B4}']
  { constructors } 

    {class} function init(&dispId: Int32): DNDispIdAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DispIdAttribute')]
  DNDispIdAttribute = interface(DNAttribute)
  ['{B36860B2-BAC3-3C25-81EE-1F62CB91FC76}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDispIdAttribute = class(TDNGenericImport<DNDispIdAttributeClass, DNDispIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDllImportAttributeClass = interface(DNAttributeClass)
  ['{58DDBB76-2E82-5D97-A7AE-12A242ECAB70}']
  { constructors } 

    {class} function init(dllName: string): DNDllImportAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DllImportAttribute')]
  DNDllImportAttribute = interface(DNAttribute)
  ['{3C52777E-F51C-300A-8122-479A19164325}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDllImportAttribute = class(TDNGenericImport<DNDllImportAttributeClass, DNDllImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNFieldOffsetAttributeClass = interface(DNAttributeClass)
  ['{080A340A-8B5B-5601-8D29-3BB15CE3A65F}']
  { constructors } 

    {class} function init(offset: Int32): DNFieldOffsetAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.FieldOffsetAttribute')]
  DNFieldOffsetAttribute = interface(DNAttribute)
  ['{3BA14C59-4C61-3D7C-8161-9962D7A89292}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFieldOffsetAttribute = class(TDNGenericImport<DNFieldOffsetAttributeClass, DNFieldOffsetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGuidAttributeClass = interface(DNAttributeClass)
  ['{64E8A2F6-D026-5A5F-8AD9-C323C47FFFCC}']
  { constructors } 

    {class} function init(guid: string): DNGuidAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.GuidAttribute')]
  DNGuidAttribute = interface(DNAttribute)
  ['{FDE6D643-768A-3C91-A169-2C8FB7C1CD1F}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNGuidAttribute = class(TDNGenericImport<DNGuidAttributeClass, DNGuidAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNIDispatchImplAttributeClass = interface(DNAttributeClass)
  ['{7C054AE3-88DC-5245-A698-CA9255666C6C}']
  { constructors } 

    {class} function init(implType: DNIDispatchImplType): DNIDispatchImplAttribute; overload;
    {class} function init(implType: Int16): DNIDispatchImplAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.IDispatchImplAttribute')]
  DNIDispatchImplAttribute = interface(DNAttribute)
  ['{3AB97590-3A62-36FB-903F-BB70B015F156}']
  { getters & setters } 

    function get_Value: DNIDispatchImplType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNIDispatchImplType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIDispatchImplAttribute = class(TDNGenericImport<DNIDispatchImplAttributeClass, DNIDispatchImplAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNImportedFromTypeLibAttributeClass = interface(DNAttributeClass)
  ['{910F5004-F3E3-5CF9-98B5-2044CA8DE200}']
  { constructors } 

    {class} function init(tlbFile: string): DNImportedFromTypeLibAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ImportedFromTypeLibAttribute')]
  DNImportedFromTypeLibAttribute = interface(DNAttribute)
  ['{8AFEAA55-757F-3DDB-A750-B2CAA6A0B80B}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNImportedFromTypeLibAttribute = class(TDNGenericImport<DNImportedFromTypeLibAttributeClass, DNImportedFromTypeLibAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInAttributeClass = interface(DNAttributeClass)
  ['{DA10604D-A124-50C3-B787-6458F41430A0}']
  { constructors } 

    {class} function init: DNInAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.InAttribute')]
  DNInAttribute = interface(DNAttribute)
  ['{96A058CD-FAF7-386C-85BF-E47F00C81795}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNInAttribute = class(TDNGenericImport<DNInAttributeClass, DNInAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInterfaceTypeAttributeClass = interface(DNAttributeClass)
  ['{8D18EF8B-28D2-5BB9-A044-583D7AEA821C}']
  { constructors } 

    {class} function init(interfaceType: DNComInterfaceType): DNInterfaceTypeAttribute; overload;
    {class} function init(interfaceType: Int16): DNInterfaceTypeAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InterfaceTypeAttribute')]
  DNInterfaceTypeAttribute = interface(DNAttribute)
  ['{C8A36B3C-BC72-31E7-8BA2-EF949A54BD0C}']
  { getters & setters } 

    function get_Value: DNComInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNComInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInterfaceTypeAttribute = class(TDNGenericImport<DNInterfaceTypeAttributeClass, DNInterfaceTypeAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNLCIDConversionAttributeClass = interface(DNAttributeClass)
  ['{FCD6092A-6740-5570-BF16-916258C31940}']
  { constructors } 

    {class} function init(lcid: Int32): DNLCIDConversionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.LCIDConversionAttribute')]
  DNLCIDConversionAttribute = interface(DNAttribute)
  ['{F912451B-8766-32CD-917F-3B9FEE4421A8}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNLCIDConversionAttribute = class(TDNGenericImport<DNLCIDConversionAttributeClass, DNLCIDConversionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNManagedToNativeComInteropStubAttributeClass = interface(DNAttributeClass)
  ['{61FB9E67-3FC1-58A8-9232-00F8DF30560F}']
  { constructors } 

    {class} function init(classType: DNType; methodName: string): DNManagedToNativeComInteropStubAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute')]
  DNManagedToNativeComInteropStubAttribute = interface(DNAttribute)
  ['{8E5226BE-8FFA-358D-93B0-B6B01CBC7A53}']
  { getters & setters } 

    function get_ClassType: DNType;
    function get_MethodName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ClassType: DNType read get_ClassType;
    property MethodName: string read get_MethodName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNManagedToNativeComInteropStubAttribute = class(TDNGenericImport<DNManagedToNativeComInteropStubAttributeClass, DNManagedToNativeComInteropStubAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalAsAttributeClass = interface(DNAttributeClass)
  ['{FBE3AAE5-7F75-5CB6-B751-334EC031B986}']
  { constructors } 

    {class} function init(unmanagedType: DNUnmanagedType): DNMarshalAsAttribute; overload;
    {class} function init(unmanagedType: Int16): DNMarshalAsAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.MarshalAsAttribute')]
  DNMarshalAsAttribute = interface(DNAttribute)
  ['{AAFFEF00-519D-3EE0-8763-D4B650611E0D}']
  { getters & setters } 

    function get_Value: DNUnmanagedType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNUnmanagedType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMarshalAsAttribute = class(TDNGenericImport<DNMarshalAsAttributeClass, DNMarshalAsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOptionalAttributeClass = interface(DNAttributeClass)
  ['{AC94D59B-A484-5EC7-94B4-2634BF0720C0}']
  { constructors } 

    {class} function init: DNOptionalAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.OptionalAttribute')]
  DNOptionalAttribute = interface(DNAttribute)
  ['{B81CB5ED-E654-399F-9698-C83C50665786}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalAttribute = class(TDNGenericImport<DNOptionalAttributeClass, DNOptionalAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOutAttributeClass = interface(DNAttributeClass)
  ['{DE7270F9-13F3-5487-AAF6-DD557AB9BBAE}']
  { constructors } 

    {class} function init: DNOutAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.OutAttribute')]
  DNOutAttribute = interface(DNAttribute)
  ['{FDB2DC94-B5A0-3702-AE84-BBFA752ACB36}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOutAttribute = class(TDNGenericImport<DNOutAttributeClass, DNOutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNPreserveSigAttributeClass = interface(DNAttributeClass)
  ['{2B690B20-59E6-53E3-8378-CE244FD0999D}']
  { constructors } 

    {class} function init: DNPreserveSigAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.PreserveSigAttribute')]
  DNPreserveSigAttribute = interface(DNAttribute)
  ['{204D5A28-46A0-3F04-BD7C-B5672631E57F}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPreserveSigAttribute = class(TDNGenericImport<DNPreserveSigAttributeClass, DNPreserveSigAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNPrimaryInteropAssemblyAttributeClass = interface(DNAttributeClass)
  ['{1FC2B462-A12E-5264-B9B3-1ED398D55EEA}']
  { constructors } 

    {class} function init(major: Int32; minor: Int32): DNPrimaryInteropAssemblyAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute')]
  DNPrimaryInteropAssemblyAttribute = interface(DNAttribute)
  ['{6DD18F5D-7A5C-3868-B1C2-7E19DA873386}']
  { getters & setters } 

    function get_MajorVersion: Int32;
    function get_MinorVersion: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MajorVersion: Int32 read get_MajorVersion;
    property MinorVersion: Int32 read get_MinorVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPrimaryInteropAssemblyAttribute = class(TDNGenericImport<DNPrimaryInteropAssemblyAttributeClass, DNPrimaryInteropAssemblyAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNProgIdAttributeClass = interface(DNAttributeClass)
  ['{1F641B67-CBC8-5362-8E4A-EBFC4C89108A}']
  { constructors } 

    {class} function init(progId: string): DNProgIdAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ProgIdAttribute')]
  DNProgIdAttribute = interface(DNAttribute)
  ['{47854AE8-F71C-3459-A943-1E91EDC951A7}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNProgIdAttribute = class(TDNGenericImport<DNProgIdAttributeClass, DNProgIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSetWin32ContextInIDispatchAttributeClass = interface(DNAttributeClass)
  ['{BC4DC6B7-FBCB-5B9F-9A6E-8E7EC2624880}']
  { constructors } 

    {class} function init: DNSetWin32ContextInIDispatchAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute')]
  DNSetWin32ContextInIDispatchAttribute = interface(DNAttribute)
  ['{9D309F77-4655-372E-84B0-B0FB4030F3B8}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSetWin32ContextInIDispatchAttribute = class(TDNGenericImport<DNSetWin32ContextInIDispatchAttributeClass, DNSetWin32ContextInIDispatchAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNStructLayoutAttributeClass = interface(DNAttributeClass)
  ['{AF52407A-D088-5F85-8E69-7BF5D2EA2104}']
  { constructors } 

    {class} function init(layoutKind: DNLayoutKind): DNStructLayoutAttribute; overload;
    {class} function init(layoutKind: Int16): DNStructLayoutAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.StructLayoutAttribute')]
  DNStructLayoutAttribute = interface(DNAttribute)
  ['{A0FFF774-26BD-3DE7-95CE-DBCEA6088F96}']
  { getters & setters } 

    function get_Value: DNLayoutKind;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNLayoutKind read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStructLayoutAttribute = class(TDNGenericImport<DNStructLayoutAttributeClass, DNStructLayoutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeIdentifierAttributeClass = interface(DNAttributeClass)
  ['{CE445C38-D956-50BE-B7A7-2CF90A7B1BC2}']
  { constructors } 

    {class} function init: DNTypeIdentifierAttribute; overload;
    {class} function init(scope: string; identifier: string): DNTypeIdentifierAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeIdentifierAttribute')]
  DNTypeIdentifierAttribute = interface(DNAttribute)
  ['{7DFA14F0-5F38-3AA6-B19C-C1553DF08036}']
  { getters & setters } 

    function get_Scope: string;
    function get_Identifier: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Scope: string read get_Scope;
    property Identifier: string read get_Identifier;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeIdentifierAttribute = class(TDNGenericImport<DNTypeIdentifierAttributeClass, DNTypeIdentifierAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibFuncAttributeClass = interface(DNAttributeClass)
  ['{9AD44E66-9CAA-549B-B19F-57DA958AB517}']
  { constructors } 

    {class} function init(flags: DNTypeLibFuncFlags): DNTypeLibFuncAttribute; overload;
    {class} function init(flags: Int16): DNTypeLibFuncAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeLibFuncAttribute')]
  DNTypeLibFuncAttribute = interface(DNAttribute)
  ['{05074A9C-0B30-3A78-AAEF-99356E49DF45}']
  { getters & setters } 

    function get_Value: DNTypeLibFuncFlags;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNTypeLibFuncFlags read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibFuncAttribute = class(TDNGenericImport<DNTypeLibFuncAttributeClass, DNTypeLibFuncAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibImportClassAttributeClass = interface(DNAttributeClass)
  ['{835E8DED-59D7-5C1D-9FA6-A6C10CBA12E4}']
  { constructors } 

    {class} function init(importClass: DNType): DNTypeLibImportClassAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeLibImportClassAttribute')]
  DNTypeLibImportClassAttribute = interface(DNAttribute)
  ['{A09B7B15-DFA5-3E98-9C26-865AD9079E42}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibImportClassAttribute = class(TDNGenericImport<DNTypeLibImportClassAttributeClass, DNTypeLibImportClassAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibTypeAttributeClass = interface(DNAttributeClass)
  ['{60FD9711-D766-516D-80E7-541FAF4C1A19}']
  { constructors } 

    {class} function init(flags: DNTypeLibTypeFlags): DNTypeLibTypeAttribute; overload;
    {class} function init(flags: Int16): DNTypeLibTypeAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeLibTypeAttribute')]
  DNTypeLibTypeAttribute = interface(DNAttribute)
  ['{2F53C69E-F1F0-3E98-AD3B-EEAA89A88906}']
  { getters & setters } 

    function get_Value: DNTypeLibTypeFlags;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNTypeLibTypeFlags read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibTypeAttribute = class(TDNGenericImport<DNTypeLibTypeAttributeClass, DNTypeLibTypeAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibVarAttributeClass = interface(DNAttributeClass)
  ['{C110D818-FA23-5241-A1EA-0E4582EAEB77}']
  { constructors } 

    {class} function init(flags: DNTypeLibVarFlags): DNTypeLibVarAttribute; overload;
    {class} function init(flags: Int16): DNTypeLibVarAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeLibVarAttribute')]
  DNTypeLibVarAttribute = interface(DNAttribute)
  ['{36BDD1DA-2B15-3428-B055-BDABF4667C3F}']
  { getters & setters } 

    function get_Value: DNTypeLibVarFlags;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNTypeLibVarFlags read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibVarAttribute = class(TDNGenericImport<DNTypeLibVarAttributeClass, DNTypeLibVarAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibVersionAttributeClass = interface(DNAttributeClass)
  ['{6A606C87-CE04-577C-9B97-7F827F390B34}']
  { constructors } 

    {class} function init(major: Int32; minor: Int32): DNTypeLibVersionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeLibVersionAttribute')]
  DNTypeLibVersionAttribute = interface(DNAttribute)
  ['{5F8DC45F-A2D8-3E34-8C86-586ED6A74984}']
  { getters & setters } 

    function get_MajorVersion: Int32;
    function get_MinorVersion: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MajorVersion: Int32 read get_MajorVersion;
    property MinorVersion: Int32 read get_MinorVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeLibVersionAttribute = class(TDNGenericImport<DNTypeLibVersionAttributeClass, DNTypeLibVersionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnmanagedFunctionPointerAttributeClass = interface(DNAttributeClass)
  ['{D4CC7587-0BF7-56A2-87FD-FB792FCBC143}']
  { constructors } 

    {class} function init(callingConvention: DNCallingConvention): DNUnmanagedFunctionPointerAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute')]
  DNUnmanagedFunctionPointerAttribute = interface(DNAttribute)
  ['{1A8E1B1F-EF9E-33E6-950E-4D9435F1335B}']
  { getters & setters } 

    function get_CallingConvention: DNCallingConvention;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CallingConvention: DNCallingConvention read get_CallingConvention;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnmanagedFunctionPointerAttribute = class(TDNGenericImport<DNUnmanagedFunctionPointerAttributeClass, DNUnmanagedFunctionPointerAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNDefaultInterfaceAttributeClass = interface(DNAttributeClass)
  ['{1437D583-827F-5CFA-A5B2-1D0A4A32D060}']
  { constructors } 

    {class} function init(defaultInterface: DNType): DNDefaultInterfaceAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute')]
  DNDefaultInterfaceAttribute = interface(DNAttribute)
  ['{A407CCA8-7700-31D2-8C0C-18E08B07FF7A}']
  { getters & setters } 

    function get_DefaultInterface: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DefaultInterface: DNType read get_DefaultInterface;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultInterfaceAttribute = class(TDNGenericImport<DNDefaultInterfaceAttributeClass, DNDefaultInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNInterfaceImplementedInVersionAttributeClass = interface(DNAttributeClass)
  ['{908B23C7-8D46-576E-83A1-1BAD861AE383}']
  { constructors } 

    {class} function init(interfaceType: DNType; majorVersion: Byte; minorVersion: Byte; buildVersion: Byte; revisionVersion: Byte): DNInterfaceImplementedInVersionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute')]
  DNInterfaceImplementedInVersionAttribute = interface(DNAttribute)
  ['{B162413C-A4D8-3F10-B513-C1D4B6171455}']
  { getters & setters } 

    function get_InterfaceType: DNType;
    function get_MajorVersion: Byte;
    function get_MinorVersion: Byte;
    function get_BuildVersion: Byte;
    function get_RevisionVersion: Byte;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property InterfaceType: DNType read get_InterfaceType;
    property MajorVersion: Byte read get_MajorVersion;
    property MinorVersion: Byte read get_MinorVersion;
    property BuildVersion: Byte read get_BuildVersion;
    property RevisionVersion: Byte read get_RevisionVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInterfaceImplementedInVersionAttribute = class(TDNGenericImport<DNInterfaceImplementedInVersionAttributeClass, DNInterfaceImplementedInVersionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNReadOnlyArrayAttributeClass = interface(DNAttributeClass)
  ['{7BC815D3-C6B2-5592-B862-49944D6EE20C}']
  { constructors } 

    {class} function init: DNReadOnlyArrayAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute')]
  DNReadOnlyArrayAttribute = interface(DNAttribute)
  ['{2956F82B-6CB1-3A6D-99CB-A119AC1F6EB3}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNReadOnlyArrayAttribute = class(TDNGenericImport<DNReadOnlyArrayAttributeClass, DNReadOnlyArrayAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNReturnValueNameAttributeClass = interface(DNAttributeClass)
  ['{B4C2F6D6-090E-5254-8BEF-AD64A4850D78}']
  { constructors } 

    {class} function init(name: string): DNReturnValueNameAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute')]
  DNReturnValueNameAttribute = interface(DNAttribute)
  ['{5C28C0BA-613F-336E-95F3-D681F0DD9EC2}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReturnValueNameAttribute = class(TDNGenericImport<DNReturnValueNameAttributeClass, DNReturnValueNameAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWriteOnlyArrayAttributeClass = interface(DNAttributeClass)
  ['{74B0BBCC-987F-5859-82C7-C30C4753965F}']
  { constructors } 

    {class} function init: DNWriteOnlyArrayAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute')]
  DNWriteOnlyArrayAttribute = interface(DNAttribute)
  ['{C6B8E6A6-C46E-31BC-8169-D4CF697DD25E}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNWriteOnlyArrayAttribute = class(TDNGenericImport<DNWriteOnlyArrayAttributeClass, DNWriteOnlyArrayAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNContextAttributeClass = interface(DNAttributeClass)
  ['{34B94015-FFEF-51A0-9795-A41DFCBBCB48}']
  { constructors } 

    {class} function init(name: string): DNContextAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Contexts.ContextAttribute')]
  DNContextAttribute = interface(DNAttribute)
  ['{1764148E-73C1-320A-83FC-337DE81A68B4}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function IsNewContextOK(newCtx: DNContext): Boolean;
    procedure Freeze(newContext: DNContext);
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function IsContextOK(ctx: DNContext; ctorMsg: DNIConstructionCallMessage): Boolean;
    procedure GetPropertiesForNewContext(ctorMsg: DNIConstructionCallMessage);
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContextAttribute = class(TDNGenericImport<DNContextAttributeClass, DNContextAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Activation----------------
  DNUrlAttributeClass = interface(DNContextAttributeClass)
  ['{EC063604-4F3F-5779-B441-BCE2E7307F9F}']
  { constructors } 

    {class} function init(callsiteURL: string): DNUrlAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Activation.UrlAttribute')]
  DNUrlAttribute = interface(DNContextAttribute)
  ['{79C14066-E37E-3643-A449-D166FA0E8EC2}']
  { getters & setters } 

    function get_UrlValue: string;
    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    procedure GetPropertiesForNewContext(ctorMsg: DNIConstructionCallMessage);
    function IsNewContextOK(newCtx: DNContext): Boolean;
    procedure Freeze(newContext: DNContext);
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property UrlValue: string read get_UrlValue;
    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNSynchronizationAttributeClass = interface(DNContextAttributeClass)
  ['{394AAD8E-621C-5BFA-8772-C17F01F47DED}']
  { constructors } 

    {class} function init: DNSynchronizationAttribute; overload;
    {class} function init(reEntrant: Boolean): DNSynchronizationAttribute; overload;
    {class} function init(flag: Int32): DNSynchronizationAttribute; overload;
    {class} function init(flag: Int32; reEntrant: Boolean): DNSynchronizationAttribute; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.Contexts.SynchronizationAttribute')]
  DNSynchronizationAttribute = interface(DNContextAttribute)
  ['{5520B6D3-6EC6-3CE7-958B-E69FAF6EFF99}']
  { getters & setters } 

    function get_Locked: Boolean;
    procedure set_Locked(value: Boolean);
    function get_IsReEntrant: Boolean;
    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    procedure GetPropertiesForNewContext(ctorMsg: DNIConstructionCallMessage);
    function GetServerContextSink(nextSink: DNIMessageSink): DNIMessageSink;
    function GetClientContextSink(nextSink: DNIMessageSink): DNIMessageSink;
    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    function IsNewContextOK(newCtx: DNContext): Boolean;
    procedure Freeze(newContext: DNContext);
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Locked: Boolean read get_Locked write set_Locked;
    property IsReEntrant: Boolean read get_IsReEntrant;
    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSynchronizationAttribute = class(TDNGenericImport<DNSynchronizationAttributeClass, DNSynchronizationAttribute>)
  public const
   NOT_SUPPORTED = 1;
   SUPPORTED = 2;
   REQUIRED = 4;
   REQUIRES_NEW = 8;
  end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNOneWayAttributeClass = interface(DNAttributeClass)
  ['{CEFBFBEB-6C52-53CA-931D-97CC5F8F8F31}']
  { constructors } 

    {class} function init: DNOneWayAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.OneWayAttribute')]
  DNOneWayAttribute = interface(DNAttribute)
  ['{C30ABD41-7B5A-3D10-A6EF-56862E2979B6}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOneWayAttribute = class(TDNGenericImport<DNOneWayAttributeClass, DNOneWayAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapAttributeClass = interface(DNAttributeClass)
  ['{BA815121-7180-5FFC-8EB8-C8A7C267DF18}']
  { constructors } 

    {class} function init: DNSoapAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.SoapAttribute')]
  DNSoapAttribute = interface(DNAttribute)
  ['{9B924EC5-BF13-3A98-8AC0-80877995D403}']
  { getters & setters } 

    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapAttribute = class(TDNGenericImport<DNSoapAttributeClass, DNSoapAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapFieldAttributeClass = interface(DNSoapAttributeClass)
  ['{6C5BF112-6546-5B05-9D65-4339A371752F}']
  { constructors } 

    {class} function init: DNSoapFieldAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.SoapFieldAttribute')]
  DNSoapFieldAttribute = interface(DNSoapAttribute)
  ['{5B76534C-3ACC-3D52-AA61-D788B134ABE2}']
  { getters & setters } 

    function get_XmlElementName: string;
    procedure set_XmlElementName(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function IsInteropXmlElement: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property XmlElementName: string read get_XmlElementName write set_XmlElementName;
    property Order: Int32 read get_Order write set_Order;
    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapFieldAttribute = class(TDNGenericImport<DNSoapFieldAttributeClass, DNSoapFieldAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapMethodAttributeClass = interface(DNSoapAttributeClass)
  ['{9013EAA2-3B06-58F1-A939-7B86423D138C}']
  { constructors } 

    {class} function init: DNSoapMethodAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.SoapMethodAttribute')]
  DNSoapMethodAttribute = interface(DNSoapAttribute)
  ['{01FF4E4B-8AD0-3171-8C82-5C2F48B87E3D}']
  { getters & setters } 

    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_ResponseXmlElementName: string;
    procedure set_ResponseXmlElementName(value: string);
    function get_ResponseXmlNamespace: string;
    procedure set_ResponseXmlNamespace(value: string);
    function get_ReturnXmlElementName: string;
    procedure set_ReturnXmlElementName(value: string);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SoapAction: string read get_SoapAction write set_SoapAction;
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    property ResponseXmlElementName: string read get_ResponseXmlElementName write set_ResponseXmlElementName;
    property ResponseXmlNamespace: string read get_ResponseXmlNamespace write set_ResponseXmlNamespace;
    property ReturnXmlElementName: string read get_ReturnXmlElementName write set_ReturnXmlElementName;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapMethodAttribute = class(TDNGenericImport<DNSoapMethodAttributeClass, DNSoapMethodAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapParameterAttributeClass = interface(DNSoapAttributeClass)
  ['{80D3F958-54C3-5EF5-B577-F110CAE4B7D8}']
  { constructors } 

    {class} function init: DNSoapParameterAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.SoapParameterAttribute')]
  DNSoapParameterAttribute = interface(DNSoapAttribute)
  ['{C76B435D-86C2-30FD-9329-E2603246095C}']
  { getters & setters } 

    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapParameterAttribute = class(TDNGenericImport<DNSoapParameterAttributeClass, DNSoapParameterAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata----------------
  DNSoapTypeAttributeClass = interface(DNSoapAttributeClass)
  ['{6BA5BBD0-76AD-57FE-BFE6-FA6507BDA123}']
  { constructors } 

    {class} function init: DNSoapTypeAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.SoapTypeAttribute')]
  DNSoapTypeAttribute = interface(DNSoapAttribute)
  ['{9C67F424-22DC-3D05-AB36-17EAF95881F2}']
  { getters & setters } 

    function get_SoapOptions: DNSoapOption;
    procedure set_SoapOptions(value: DNSoapOption);
    function get_XmlElementName: string;
    procedure set_XmlElementName(value: string);
    function get_XmlNamespace: string;
    procedure set_XmlNamespace(value: string);
    function get_XmlTypeName: string;
    procedure set_XmlTypeName(value: string);
    function get_XmlTypeNamespace: string;
    procedure set_XmlTypeNamespace(value: string);
    function get_XmlFieldOrder: DNXmlFieldOrderOption;
    procedure set_XmlFieldOrder(value: DNXmlFieldOrderOption);
    function get_UseAttribute: Boolean;
    procedure set_UseAttribute(value: Boolean);
    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SoapOptions: DNSoapOption read get_SoapOptions write set_SoapOptions;
    property XmlElementName: string read get_XmlElementName write set_XmlElementName;
    property XmlNamespace: string read get_XmlNamespace write set_XmlNamespace;
    property XmlTypeName: string read get_XmlTypeName write set_XmlTypeName;
    property XmlTypeNamespace: string read get_XmlTypeNamespace write set_XmlTypeNamespace;
    property XmlFieldOrder: DNXmlFieldOrderOption read get_XmlFieldOrder write set_XmlFieldOrder;
    property UseAttribute: Boolean read get_UseAttribute write set_UseAttribute;
    property Embedded: Boolean read get_Embedded write set_Embedded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSoapTypeAttribute = class(TDNGenericImport<DNSoapTypeAttributeClass, DNSoapTypeAttribute>) end;

  //-------------namespace: System.Runtime.Remoting.Proxies----------------
  DNProxyAttributeClass = interface(DNAttributeClass)
  ['{89E8E123-6BA7-57C5-B9F0-ADC7AA3FE892}']
  { constructors } 

    {class} function init: DNProxyAttribute;

  end;

  [DNTypeName('System.Runtime.Remoting.Proxies.ProxyAttribute')]
  DNProxyAttribute = interface(DNAttribute)
  ['{1163D0CA-2A02-37C1-BF3F-A9B9E9D49245}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function CreateInstance(serverType: DNType): DNMarshalByRefObject;
    function CreateProxy(objRef: DNObjRef; serverType: DNType; serverObject: DNObject; serverContext: DNContext): DNRealProxy;
    function IsContextOK(ctx: DNContext; msg: DNIConstructionCallMessage): Boolean;
    procedure GetPropertiesForNewContext(msg: DNIConstructionCallMessage);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNProxyAttribute = class(TDNGenericImport<DNProxyAttributeClass, DNProxyAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializedAttributeClass = interface(DNAttributeClass)
  ['{BACE5873-C264-58C9-9DF4-61379AB200AC}']
  { constructors } 

    {class} function init: DNOnDeserializedAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnDeserializedAttribute')]
  DNOnDeserializedAttribute = interface(DNAttribute)
  ['{18B1C7EE-68E3-35BB-9E40-469A223285F7}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializedAttribute = class(TDNGenericImport<DNOnDeserializedAttributeClass, DNOnDeserializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializingAttributeClass = interface(DNAttributeClass)
  ['{001634F2-1038-5890-96DD-9632F21D2070}']
  { constructors } 

    {class} function init: DNOnDeserializingAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnDeserializingAttribute')]
  DNOnDeserializingAttribute = interface(DNAttribute)
  ['{30AC0B94-3BDB-3199-8A5D-ECA0C5458381}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializingAttribute = class(TDNGenericImport<DNOnDeserializingAttributeClass, DNOnDeserializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializedAttributeClass = interface(DNAttributeClass)
  ['{A5381540-6CD3-545C-8D77-7C15A6E299CB}']
  { constructors } 

    {class} function init: DNOnSerializedAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnSerializedAttribute')]
  DNOnSerializedAttribute = interface(DNAttribute)
  ['{6F8527BF-5AAD-3236-B639-A05177332EFE}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializedAttribute = class(TDNGenericImport<DNOnSerializedAttributeClass, DNOnSerializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializingAttributeClass = interface(DNAttributeClass)
  ['{646FC3D9-6465-518C-BCAB-1E78B3A10BD0}']
  { constructors } 

    {class} function init: DNOnSerializingAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnSerializingAttribute')]
  DNOnSerializingAttribute = interface(DNAttribute)
  ['{9BF86F6E-B0E1-348B-9627-6970672EB3D3}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializingAttribute = class(TDNGenericImport<DNOnSerializingAttributeClass, DNOnSerializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOptionalFieldAttributeClass = interface(DNAttributeClass)
  ['{983BCEA1-6E6C-5CD3-9BAA-1167E5DA2841}']
  { constructors } 

    {class} function init: DNOptionalFieldAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OptionalFieldAttribute')]
  DNOptionalFieldAttribute = interface(DNAttribute)
  ['{1C97EF1D-74ED-3D21-84A4-8631D959634A}']
  { getters & setters } 

    function get_VersionAdded: Int32;
    procedure set_VersionAdded(value: Int32);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property VersionAdded: Int32 read get_VersionAdded write set_VersionAdded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalFieldAttribute = class(TDNGenericImport<DNOptionalFieldAttributeClass, DNOptionalFieldAttribute>) end;

  //-------------namespace: System.Runtime----------------
  DNTargetedPatchingOptOutAttributeClass = interface(DNAttributeClass)
  ['{500FBD66-3845-5205-AB88-C82E416BC1D9}']
  { constructors } 

    {class} function init(reason: string): DNTargetedPatchingOptOutAttribute;

  end;

  [DNTypeName('System.Runtime.TargetedPatchingOptOutAttribute')]
  DNTargetedPatchingOptOutAttribute = interface(DNAttribute)
  ['{DC4155B4-7129-360E-BB3C-6F7C82EFD76A}']
  { getters & setters } 

    function get_Reason: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Reason: string read get_Reason;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetedPatchingOptOutAttribute = class(TDNGenericImport<DNTargetedPatchingOptOutAttributeClass, DNTargetedPatchingOptOutAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNComponentGuaranteesAttributeClass = interface(DNAttributeClass)
  ['{E5FAC482-792C-59A9-A4AD-9680D3C28447}']
  { constructors } 

    {class} function init(guarantees: DNComponentGuaranteesOptions): DNComponentGuaranteesAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesAttribute')]
  DNComponentGuaranteesAttribute = interface(DNAttribute)
  ['{BBAC3B54-23ED-30E0-89EE-2989C21D7980}']
  { getters & setters } 

    function get_Guarantees: DNComponentGuaranteesOptions;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Guarantees: DNComponentGuaranteesOptions read get_Guarantees;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComponentGuaranteesAttribute = class(TDNGenericImport<DNComponentGuaranteesAttributeClass, DNComponentGuaranteesAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceConsumptionAttributeClass = interface(DNAttributeClass)
  ['{F8D408F5-39A7-5DCA-BD4D-4C7E5C56A516}']
  { constructors } 

    {class} function init(resourceScope: DNResourceScope): DNResourceConsumptionAttribute; overload;
    {class} function init(resourceScope: DNResourceScope; consumptionScope: DNResourceScope): DNResourceConsumptionAttribute; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceConsumptionAttribute')]
  DNResourceConsumptionAttribute = interface(DNAttribute)
  ['{B9E15D27-6CAE-36E9-AF36-D81A899F8012}']
  { getters & setters } 

    function get_ResourceScope: DNResourceScope;
    function get_ConsumptionScope: DNResourceScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ResourceScope: DNResourceScope read get_ResourceScope;
    property ConsumptionScope: DNResourceScope read get_ConsumptionScope;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNResourceConsumptionAttribute = class(TDNGenericImport<DNResourceConsumptionAttributeClass, DNResourceConsumptionAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceExposureAttributeClass = interface(DNAttributeClass)
  ['{160AB89E-C0F7-516B-AD11-20AED0B318A4}']
  { constructors } 

    {class} function init(exposureLevel: DNResourceScope): DNResourceExposureAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceExposureAttribute')]
  DNResourceExposureAttribute = interface(DNAttribute)
  ['{38837DE5-21E4-3447-8C83-06ED84086771}']
  { getters & setters } 

    function get_ResourceExposureLevel: DNResourceScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ResourceExposureLevel: DNResourceScope read get_ResourceExposureLevel;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNResourceExposureAttribute = class(TDNGenericImport<DNResourceExposureAttributeClass, DNResourceExposureAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNTargetFrameworkAttributeClass = interface(DNAttributeClass)
  ['{115A4AA1-EAF5-5C7F-98AC-F922605A5A40}']
  { constructors } 

    {class} function init(frameworkName: string): DNTargetFrameworkAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.TargetFrameworkAttribute')]
  DNTargetFrameworkAttribute = interface(DNAttribute)
  ['{01EF747D-D202-3A2A-A336-669DD4A97B2C}']
  { getters & setters } 

    function get_FrameworkName: string;
    function get_FrameworkDisplayName: string;
    procedure set_FrameworkDisplayName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FrameworkName: string read get_FrameworkName;
    property FrameworkDisplayName: string read get_FrameworkDisplayName write set_FrameworkDisplayName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetFrameworkAttribute = class(TDNGenericImport<DNTargetFrameworkAttributeClass, DNTargetFrameworkAttribute>) end;

  //-------------namespace: System.Security----------------
  DNAllowPartiallyTrustedCallersAttributeClass = interface(DNAttributeClass)
  ['{FA5D3CFC-8409-53D7-8D80-F9E43CE303AB}']
  { constructors } 

    {class} function init: DNAllowPartiallyTrustedCallersAttribute;

  end;

  [DNTypeName('System.Security.AllowPartiallyTrustedCallersAttribute')]
  DNAllowPartiallyTrustedCallersAttribute = interface(DNAttribute)
  ['{5610F042-FF1D-36D0-996C-68F7A207D1F0}']
  { getters & setters } 

    function get_PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel;
    procedure set_PartialTrustVisibilityLevel(value: DNPartialTrustVisibilityLevel);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel read get_PartialTrustVisibilityLevel write set_PartialTrustVisibilityLevel;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowPartiallyTrustedCallersAttribute = class(TDNGenericImport<DNAllowPartiallyTrustedCallersAttributeClass, DNAllowPartiallyTrustedCallersAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityAttributeClass = interface(DNAttributeClass)
  ['{0E7D3991-3FD4-5CD8-89B8-08923DDE32FB}']
  end;

  [DNTypeName('System.Security.Permissions.SecurityAttribute')]
  DNSecurityAttribute = interface(DNAttribute)
  ['{47DCD758-DF63-3226-A3A9-B0B88872A311}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityAttribute = class(TDNGenericImport<DNSecurityAttributeClass, DNSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNCodeAccessSecurityAttributeClass = interface(DNSecurityAttributeClass)
  ['{A4C2C0A7-3746-5404-BAC8-45B566B51D2F}']
  end;

  [DNTypeName('System.Security.Permissions.CodeAccessSecurityAttribute')]
  DNCodeAccessSecurityAttribute = interface(DNSecurityAttribute)
  ['{21858390-FE95-33A9-A103-F322C64D85AE}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCodeAccessSecurityAttribute = class(TDNGenericImport<DNCodeAccessSecurityAttributeClass, DNCodeAccessSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNEnvironmentPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{C4A54CAC-1365-56A4-A26B-825DAE8F6EA0}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNEnvironmentPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.EnvironmentPermissionAttribute')]
  DNEnvironmentPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{6161DF0C-CD78-33E1-B3E1-978B27025E40}']
  { getters & setters } 

    function get_Read: string;
    procedure set_Read(value: string);
    function get_Write: string;
    procedure set_Write(value: string);
    function get_All: string;
    procedure set_All(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Read: string read get_Read write set_Read;
    property Write: string read get_Write write set_Write;
    property All: string read get_All write set_All;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEnvironmentPermissionAttribute = class(TDNGenericImport<DNEnvironmentPermissionAttributeClass, DNEnvironmentPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileDialogPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{A1F9C24A-4069-5346-9498-94F410B541F5}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNFileDialogPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.FileDialogPermissionAttribute')]
  DNFileDialogPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{A141F926-E6B5-3903-8EFA-1014D4970F1C}']
  { getters & setters } 

    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Save: Boolean;
    procedure set_Save(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Open: Boolean read get_Open write set_Open;
    property Save: Boolean read get_Save write set_Save;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFileDialogPermissionAttribute = class(TDNGenericImport<DNFileDialogPermissionAttributeClass, DNFileDialogPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileIOPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{18888757-2121-5E09-8AFF-7FFC468B3F4C}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNFileIOPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.FileIOPermissionAttribute')]
  DNFileIOPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{DE440C06-7EC3-3E59-83C8-3829090198F7}']
  { getters & setters } 

    function get_Read: string;
    procedure set_Read(value: string);
    function get_Write: string;
    procedure set_Write(value: string);
    function get_Append: string;
    procedure set_Append(value: string);
    function get_PathDiscovery: string;
    procedure set_PathDiscovery(value: string);
    function get_ViewAccessControl: string;
    procedure set_ViewAccessControl(value: string);
    function get_ChangeAccessControl: string;
    procedure set_ChangeAccessControl(value: string);
    function get_All: string;
    procedure set_All(value: string);
    function get_ViewAndModify: string;
    procedure set_ViewAndModify(value: string);
    function get_AllFiles: DNFileIOPermissionAccess;
    procedure set_AllFiles(value: DNFileIOPermissionAccess);
    function get_AllLocalFiles: DNFileIOPermissionAccess;
    procedure set_AllLocalFiles(value: DNFileIOPermissionAccess);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Read: string read get_Read write set_Read;
    property Write: string read get_Write write set_Write;
    property Append: string read get_Append write set_Append;
    property PathDiscovery: string read get_PathDiscovery write set_PathDiscovery;
    property ViewAccessControl: string read get_ViewAccessControl write set_ViewAccessControl;
    property ChangeAccessControl: string read get_ChangeAccessControl write set_ChangeAccessControl;
    property All: string read get_All write set_All;
    property ViewAndModify: string read get_ViewAndModify write set_ViewAndModify;
    property AllFiles: DNFileIOPermissionAccess read get_AllFiles write set_AllFiles;
    property AllLocalFiles: DNFileIOPermissionAccess read get_AllLocalFiles write set_AllLocalFiles;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFileIOPermissionAttribute = class(TDNGenericImport<DNFileIOPermissionAttributeClass, DNFileIOPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNGacIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{4E76E0C8-7A61-5F05-B7DE-817154597019}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNGacIdentityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.GacIdentityPermissionAttribute')]
  DNGacIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{52F1A8F3-7C7C-3C08-848B-8AB0EA946959}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNGacIdentityPermissionAttribute = class(TDNGenericImport<DNGacIdentityPermissionAttributeClass, DNGacIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNHostProtectionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{80F0F125-AC10-57F6-8532-F022FCC86814}']
  { constructors } 

    {class} function init: DNHostProtectionAttribute; overload;
    {class} function init(action: DNSecurityAction): DNHostProtectionAttribute; overload;

  end;

  [DNTypeName('System.Security.Permissions.HostProtectionAttribute')]
  DNHostProtectionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{AD664904-FE8A-3217-BBF5-E6AB1D998F5F}']
  { getters & setters } 

    function get_Resources: DNHostProtectionResource;
    procedure set_Resources(value: DNHostProtectionResource);
    function get_Synchronization: Boolean;
    procedure set_Synchronization(value: Boolean);
    function get_SharedState: Boolean;
    procedure set_SharedState(value: Boolean);
    function get_ExternalProcessMgmt: Boolean;
    procedure set_ExternalProcessMgmt(value: Boolean);
    function get_SelfAffectingProcessMgmt: Boolean;
    procedure set_SelfAffectingProcessMgmt(value: Boolean);
    function get_ExternalThreading: Boolean;
    procedure set_ExternalThreading(value: Boolean);
    function get_SelfAffectingThreading: Boolean;
    procedure set_SelfAffectingThreading(value: Boolean);
    function get_SecurityInfrastructure: Boolean;
    procedure set_SecurityInfrastructure(value: Boolean);
    function get_UI: Boolean;
    procedure set_UI(value: Boolean);
    function get_MayLeakOnAbort: Boolean;
    procedure set_MayLeakOnAbort(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Resources: DNHostProtectionResource read get_Resources write set_Resources;
    property Synchronization: Boolean read get_Synchronization write set_Synchronization;
    property SharedState: Boolean read get_SharedState write set_SharedState;
    property ExternalProcessMgmt: Boolean read get_ExternalProcessMgmt write set_ExternalProcessMgmt;
    property SelfAffectingProcessMgmt: Boolean read get_SelfAffectingProcessMgmt write set_SelfAffectingProcessMgmt;
    property ExternalThreading: Boolean read get_ExternalThreading write set_ExternalThreading;
    property SelfAffectingThreading: Boolean read get_SelfAffectingThreading write set_SelfAffectingThreading;
    property SecurityInfrastructure: Boolean read get_SecurityInfrastructure write set_SecurityInfrastructure;
    property UI: Boolean read get_UI write set_UI;
    property MayLeakOnAbort: Boolean read get_MayLeakOnAbort write set_MayLeakOnAbort;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNHostProtectionAttribute = class(TDNGenericImport<DNHostProtectionAttributeClass, DNHostProtectionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStoragePermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{3CA47195-F2AC-5480-A6A6-4A8BCA817018}']
  end;

  [DNTypeName('System.Security.Permissions.IsolatedStoragePermissionAttribute')]
  DNIsolatedStoragePermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{A56859A3-98ED-39A9-BD33-5807F0D6291F}']
  { getters & setters } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsolatedStoragePermissionAttribute = class(TDNGenericImport<DNIsolatedStoragePermissionAttributeClass, DNIsolatedStoragePermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStorageFilePermissionAttributeClass = interface(DNIsolatedStoragePermissionAttributeClass)
  ['{94BA7DF2-0579-51B0-A81F-6455A132A4E1}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNIsolatedStorageFilePermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.IsolatedStorageFilePermissionAttribute')]
  DNIsolatedStorageFilePermissionAttribute = interface(DNIsolatedStoragePermissionAttribute)
  ['{F6610DF3-8D62-38BD-BF6B-2A4BA839EB3B}']
  { getters & setters } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsolatedStorageFilePermissionAttribute = class(TDNGenericImport<DNIsolatedStorageFilePermissionAttributeClass, DNIsolatedStorageFilePermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{FB2AC055-C4BC-5DFC-BFFD-2705A181D7E8}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNKeyContainerPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAttribute')]
  DNKeyContainerPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{F40FFBD5-4CA8-333E-8706-29F13FB8D4D6}']
  { getters & setters } 

    function get_KeyStore: string;
    procedure set_KeyStore(value: string);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_ProviderType: Int32;
    procedure set_ProviderType(value: Int32);
    function get_KeyContainerName: string;
    procedure set_KeyContainerName(value: string);
    function get_KeySpec: Int32;
    procedure set_KeySpec(value: Int32);
    function get_Flags: DNKeyContainerPermissionFlags;
    procedure set_Flags(value: DNKeyContainerPermissionFlags);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyStore: string read get_KeyStore write set_KeyStore;
    property ProviderName: string read get_ProviderName write set_ProviderName;
    property ProviderType: Int32 read get_ProviderType write set_ProviderType;
    property KeyContainerName: string read get_KeyContainerName write set_KeyContainerName;
    property KeySpec: Int32 read get_KeySpec write set_KeySpec;
    property Flags: DNKeyContainerPermissionFlags read get_Flags write set_Flags;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNKeyContainerPermissionAttribute = class(TDNGenericImport<DNKeyContainerPermissionAttributeClass, DNKeyContainerPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPermissionSetAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{92BCE49E-EC97-517B-B128-78AE3C10D276}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNPermissionSetAttribute;

  end;

  [DNTypeName('System.Security.Permissions.PermissionSetAttribute')]
  DNPermissionSetAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{24151BA6-6D79-3EC4-8C77-014FFBE735AE}']
  { getters & setters } 

    function get_File: string;
    procedure set_File(value: string);
    function get_UnicodeEncoded: Boolean;
    procedure set_UnicodeEncoded(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_XML: string;
    procedure set_XML(value: string);
    function get_Hex: string;
    procedure set_Hex(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function CreatePermissionSet: DNPermissionSet;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property &File: string read get_File write set_File;
    property UnicodeEncoded: Boolean read get_UnicodeEncoded write set_UnicodeEncoded;
    property Name: string read get_Name write set_Name;
    property XML: string read get_XML write set_XML;
    property Hex: string read get_Hex write set_Hex;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPermissionSetAttribute = class(TDNGenericImport<DNPermissionSetAttributeClass, DNPermissionSetAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPrincipalPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{7C137059-6D7B-5BB4-B997-53F0840FE9E6}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNPrincipalPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.PrincipalPermissionAttribute')]
  DNPrincipalPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{6D0AE73B-ED58-32E2-973C-765897783971}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_Authenticated: Boolean;
    procedure set_Authenticated(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Role: string read get_Role write set_Role;
    property Authenticated: Boolean read get_Authenticated write set_Authenticated;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPrincipalPermissionAttribute = class(TDNGenericImport<DNPrincipalPermissionAttributeClass, DNPrincipalPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPublisherIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{D7C47A1C-8B85-560B-9CBA-4E17CA5952E0}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNPublisherIdentityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.PublisherIdentityPermissionAttribute')]
  DNPublisherIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{2335C1DA-CD60-3208-AB5E-447F16A087E5}']
  { getters & setters } 

    function get_X509Certificate: string;
    procedure set_X509Certificate(value: string);
    function get_CertFile: string;
    procedure set_CertFile(value: string);
    function get_SignedFile: string;
    procedure set_SignedFile(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property X509Certificate: string read get_X509Certificate write set_X509Certificate;
    property CertFile: string read get_CertFile write set_CertFile;
    property SignedFile: string read get_SignedFile write set_SignedFile;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNPublisherIdentityPermissionAttribute = class(TDNGenericImport<DNPublisherIdentityPermissionAttributeClass, DNPublisherIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNReflectionPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{CE772EE7-1174-59AD-92DF-26BA7385F1D8}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNReflectionPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.ReflectionPermissionAttribute')]
  DNReflectionPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{64578750-937F-3B27-B631-C57E0BFFF97F}']
  { getters & setters } 

    function get_Flags: DNReflectionPermissionFlag;
    procedure set_Flags(value: DNReflectionPermissionFlag);
    function get_TypeInformation: Boolean;
    procedure set_TypeInformation(value: Boolean);
    function get_MemberAccess: Boolean;
    procedure set_MemberAccess(value: Boolean);
    function get_ReflectionEmit: Boolean;
    procedure set_ReflectionEmit(value: Boolean);
    function get_RestrictedMemberAccess: Boolean;
    procedure set_RestrictedMemberAccess(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNReflectionPermissionFlag read get_Flags write set_Flags;
    property TypeInformation: Boolean read get_TypeInformation write set_TypeInformation;
    property MemberAccess: Boolean read get_MemberAccess write set_MemberAccess;
    property ReflectionEmit: Boolean read get_ReflectionEmit write set_ReflectionEmit;
    property RestrictedMemberAccess: Boolean read get_RestrictedMemberAccess write set_RestrictedMemberAccess;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReflectionPermissionAttribute = class(TDNGenericImport<DNReflectionPermissionAttributeClass, DNReflectionPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNRegistryPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{E91E1DFB-6829-5F78-90A4-2B4A84B10A1F}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNRegistryPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.RegistryPermissionAttribute')]
  DNRegistryPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{F69CF20D-F85B-3436-9E0E-DD3CB3E8B2CD}']
  { getters & setters } 

    function get_Read: string;
    procedure set_Read(value: string);
    function get_Write: string;
    procedure set_Write(value: string);
    function get_Create: string;
    procedure set_Create(value: string);
    function get_ViewAccessControl: string;
    procedure set_ViewAccessControl(value: string);
    function get_ChangeAccessControl: string;
    procedure set_ChangeAccessControl(value: string);
    function get_ViewAndModify: string;
    procedure set_ViewAndModify(value: string);
    function get_All: string;
    procedure set_All(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Read: string read get_Read write set_Read;
    property Write: string read get_Write write set_Write;
    property Create: string read get_Create write set_Create;
    property ViewAccessControl: string read get_ViewAccessControl write set_ViewAccessControl;
    property ChangeAccessControl: string read get_ChangeAccessControl write set_ChangeAccessControl;
    property ViewAndModify: string read get_ViewAndModify write set_ViewAndModify;
    property All: string read get_All write set_All;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRegistryPermissionAttribute = class(TDNGenericImport<DNRegistryPermissionAttributeClass, DNRegistryPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{C501EDF2-0F21-5F68-B186-1D0E1372CF85}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNSecurityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.SecurityPermissionAttribute')]
  DNSecurityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{5E77314C-043D-3D8C-9C9D-D18F09FB3500}']
  { getters & setters } 

    function get_Flags: DNSecurityPermissionFlag;
    procedure set_Flags(value: DNSecurityPermissionFlag);
    function get_Assertion: Boolean;
    procedure set_Assertion(value: Boolean);
    function get_UnmanagedCode: Boolean;
    procedure set_UnmanagedCode(value: Boolean);
    function get_SkipVerification: Boolean;
    procedure set_SkipVerification(value: Boolean);
    function get_Execution: Boolean;
    procedure set_Execution(value: Boolean);
    function get_ControlThread: Boolean;
    procedure set_ControlThread(value: Boolean);
    function get_ControlEvidence: Boolean;
    procedure set_ControlEvidence(value: Boolean);
    function get_ControlPolicy: Boolean;
    procedure set_ControlPolicy(value: Boolean);
    function get_SerializationFormatter: Boolean;
    procedure set_SerializationFormatter(value: Boolean);
    function get_ControlDomainPolicy: Boolean;
    procedure set_ControlDomainPolicy(value: Boolean);
    function get_ControlPrincipal: Boolean;
    procedure set_ControlPrincipal(value: Boolean);
    function get_ControlAppDomain: Boolean;
    procedure set_ControlAppDomain(value: Boolean);
    function get_RemotingConfiguration: Boolean;
    procedure set_RemotingConfiguration(value: Boolean);
    function get_Infrastructure: Boolean;
    procedure set_Infrastructure(value: Boolean);
    function get_BindingRedirects: Boolean;
    procedure set_BindingRedirects(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNSecurityPermissionFlag read get_Flags write set_Flags;
    property Assertion: Boolean read get_Assertion write set_Assertion;
    property UnmanagedCode: Boolean read get_UnmanagedCode write set_UnmanagedCode;
    property SkipVerification: Boolean read get_SkipVerification write set_SkipVerification;
    property Execution: Boolean read get_Execution write set_Execution;
    property ControlThread: Boolean read get_ControlThread write set_ControlThread;
    property ControlEvidence: Boolean read get_ControlEvidence write set_ControlEvidence;
    property ControlPolicy: Boolean read get_ControlPolicy write set_ControlPolicy;
    property SerializationFormatter: Boolean read get_SerializationFormatter write set_SerializationFormatter;
    property ControlDomainPolicy: Boolean read get_ControlDomainPolicy write set_ControlDomainPolicy;
    property ControlPrincipal: Boolean read get_ControlPrincipal write set_ControlPrincipal;
    property ControlAppDomain: Boolean read get_ControlAppDomain write set_ControlAppDomain;
    property RemotingConfiguration: Boolean read get_RemotingConfiguration write set_RemotingConfiguration;
    property Infrastructure: Boolean read get_Infrastructure write set_Infrastructure;
    property BindingRedirects: Boolean read get_BindingRedirects write set_BindingRedirects;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityPermissionAttribute = class(TDNGenericImport<DNSecurityPermissionAttributeClass, DNSecurityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSiteIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{A87000AF-4485-530C-B2D9-2188DAEF6937}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNSiteIdentityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.SiteIdentityPermissionAttribute')]
  DNSiteIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{23F73179-6349-3183-A55C-BCFB1A2446E8}']
  { getters & setters } 

    function get_Site: string;
    procedure set_Site(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Site: string read get_Site write set_Site;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSiteIdentityPermissionAttribute = class(TDNGenericImport<DNSiteIdentityPermissionAttributeClass, DNSiteIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStrongNameIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{F2C21A63-48BD-5697-8BE4-17D1AD5CCAD5}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNStrongNameIdentityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.StrongNameIdentityPermissionAttribute')]
  DNStrongNameIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{EF2C9DE4-BCDA-3322-AE75-16CC3EC2665C}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_PublicKey: string;
    procedure set_PublicKey(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Version: string read get_Version write set_Version;
    property PublicKey: string read get_PublicKey write set_PublicKey;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStrongNameIdentityPermissionAttribute = class(TDNGenericImport<DNStrongNameIdentityPermissionAttributeClass, DNStrongNameIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUIPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{A4C2806F-BFB2-540E-A661-0F2D2450037B}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNUIPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.UIPermissionAttribute')]
  DNUIPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{5F4ED054-C453-3D2B-A0FE-64E89871D364}']
  { getters & setters } 

    function get_Window: DNUIPermissionWindow;
    procedure set_Window(value: DNUIPermissionWindow);
    function get_Clipboard: DNUIPermissionClipboard;
    procedure set_Clipboard(value: DNUIPermissionClipboard);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Window: DNUIPermissionWindow read get_Window write set_Window;
    property Clipboard: DNUIPermissionClipboard read get_Clipboard write set_Clipboard;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUIPermissionAttribute = class(TDNGenericImport<DNUIPermissionAttributeClass, DNUIPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUrlIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{D3CD6429-4B00-5504-9936-11B55499E2CA}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNUrlIdentityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.UrlIdentityPermissionAttribute')]
  DNUrlIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{6852BE7D-8C00-3F66-BEE3-463F74838491}']
  { getters & setters } 

    function get_Url: string;
    procedure set_Url(value: string);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Url: string read get_Url write set_Url;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUrlIdentityPermissionAttribute = class(TDNGenericImport<DNUrlIdentityPermissionAttributeClass, DNUrlIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNZoneIdentityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{32D0AB3A-138E-562B-852C-5B0C017E4B45}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNZoneIdentityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.ZoneIdentityPermissionAttribute')]
  DNZoneIdentityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{C386115F-2B99-356B-B4A1-2CF57CE52988}']
  { getters & setters } 

    function get_Zone: DNSecurityZone;
    procedure set_Zone(value: DNSecurityZone);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Zone: DNSecurityZone read get_Zone write set_Zone;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNZoneIdentityPermissionAttribute = class(TDNGenericImport<DNZoneIdentityPermissionAttributeClass, DNZoneIdentityPermissionAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityCriticalAttributeClass = interface(DNAttributeClass)
  ['{DE7414D5-D4EB-50BF-8696-176A444FF2A4}']
  { constructors } 

    {class} function init: DNSecurityCriticalAttribute; overload;
    {class} function init(scope: DNSecurityCriticalScope): DNSecurityCriticalAttribute; overload;

  end;

  [DNTypeName('System.Security.SecurityCriticalAttribute')]
  DNSecurityCriticalAttribute = interface(DNAttribute)
  ['{46D027B2-BD97-332A-9F9C-8B4575754105}']
  { getters & setters } 

    function get_Scope: DNSecurityCriticalScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Scope: DNSecurityCriticalScope read get_Scope;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityCriticalAttribute = class(TDNGenericImport<DNSecurityCriticalAttributeClass, DNSecurityCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityRulesAttributeClass = interface(DNAttributeClass)
  ['{4BF8A25B-1821-5294-BA2E-265267ADC6FD}']
  { constructors } 

    {class} function init(ruleSet: DNSecurityRuleSet): DNSecurityRulesAttribute;

  end;

  [DNTypeName('System.Security.SecurityRulesAttribute')]
  DNSecurityRulesAttribute = interface(DNAttribute)
  ['{A54BF404-CC69-397B-A6B5-894B7A8652D8}']
  { getters & setters } 

    function get_SkipVerificationInFullTrust: Boolean;
    procedure set_SkipVerificationInFullTrust(value: Boolean);
    function get_RuleSet: DNSecurityRuleSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SkipVerificationInFullTrust: Boolean read get_SkipVerificationInFullTrust write set_SkipVerificationInFullTrust;
    property RuleSet: DNSecurityRuleSet read get_RuleSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityRulesAttribute = class(TDNGenericImport<DNSecurityRulesAttributeClass, DNSecurityRulesAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecuritySafeCriticalAttributeClass = interface(DNAttributeClass)
  ['{3BFCFB2D-6179-5195-8807-44428703D3FA}']
  { constructors } 

    {class} function init: DNSecuritySafeCriticalAttribute;

  end;

  [DNTypeName('System.Security.SecuritySafeCriticalAttribute')]
  DNSecuritySafeCriticalAttribute = interface(DNAttribute)
  ['{0E1E2BCD-AF6D-303D-83AC-B74D476147B5}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecuritySafeCriticalAttribute = class(TDNGenericImport<DNSecuritySafeCriticalAttributeClass, DNSecuritySafeCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTransparentAttributeClass = interface(DNAttributeClass)
  ['{A060F8FC-8858-5FC8-B670-1699D8F3D8A4}']
  { constructors } 

    {class} function init: DNSecurityTransparentAttribute;

  end;

  [DNTypeName('System.Security.SecurityTransparentAttribute')]
  DNSecurityTransparentAttribute = interface(DNAttribute)
  ['{ED0D1F70-FF9C-31F7-BA7E-F9C1B7011D84}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTransparentAttribute = class(TDNGenericImport<DNSecurityTransparentAttributeClass, DNSecurityTransparentAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTreatAsSafeAttributeClass = interface(DNAttributeClass)
  ['{1409C202-4E0C-539E-AA8F-A5F95FE390A9}']
  { constructors } 

    {class} function init: DNSecurityTreatAsSafeAttribute;

  end;

  [DNTypeName('System.Security.SecurityTreatAsSafeAttribute')]
  DNSecurityTreatAsSafeAttribute = interface(DNAttribute)
  ['{646864F9-5DA0-300B-A4F1-17E7428159F2}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTreatAsSafeAttribute = class(TDNGenericImport<DNSecurityTreatAsSafeAttributeClass, DNSecurityTreatAsSafeAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSuppressUnmanagedCodeSecurityAttributeClass = interface(DNAttributeClass)
  ['{796CC37D-6420-53E5-8D4C-6C88501FCAD9}']
  { constructors } 

    {class} function init: DNSuppressUnmanagedCodeSecurityAttribute;

  end;

  [DNTypeName('System.Security.SuppressUnmanagedCodeSecurityAttribute')]
  DNSuppressUnmanagedCodeSecurityAttribute = interface(DNAttribute)
  ['{7AE01D6C-BEE7-38F6-9A86-329D8A917803}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressUnmanagedCodeSecurityAttribute = class(TDNGenericImport<DNSuppressUnmanagedCodeSecurityAttributeClass, DNSuppressUnmanagedCodeSecurityAttribute>) end;

  //-------------namespace: System.Security----------------
  DNUnverifiableCodeAttributeClass = interface(DNAttributeClass)
  ['{8C4FE47A-F2E9-5F38-9CE2-25D2A3BDD194}']
  { constructors } 

    {class} function init: DNUnverifiableCodeAttribute;

  end;

  [DNTypeName('System.Security.UnverifiableCodeAttribute')]
  DNUnverifiableCodeAttribute = interface(DNAttribute)
  ['{7E3393AB-2AB2-320B-8F6F-EAB6F5CF2CAF}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnverifiableCodeAttribute = class(TDNGenericImport<DNUnverifiableCodeAttributeClass, DNUnverifiableCodeAttribute>) end;

  //-------------namespace: System----------------
  DNSerializableAttributeClass = interface(DNAttributeClass)
  ['{6D640255-0CB6-56E7-91C6-A0A24EDBAC42}']
  { constructors } 

    {class} function init: DNSerializableAttribute;

  end;

  [DNTypeName('System.SerializableAttribute')]
  DNSerializableAttribute = interface(DNAttribute)
  ['{89BCC804-53A5-3EB2-A342-6282CC410260}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSerializableAttribute = class(TDNGenericImport<DNSerializableAttributeClass, DNSerializableAttribute>) end;

  //-------------namespace: System----------------
  DNSTAThreadAttributeClass = interface(DNAttributeClass)
  ['{D018AC45-7FCC-5F0F-AEEE-E15E63BB22BD}']
  { constructors } 

    {class} function init: DNSTAThreadAttribute;

  end;

  [DNTypeName('System.STAThreadAttribute')]
  DNSTAThreadAttribute = interface(DNAttribute)
  ['{50AAD4C2-61FA-3B1F-8157-5BA3B27AEE61}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSTAThreadAttribute = class(TDNGenericImport<DNSTAThreadAttributeClass, DNSTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNThreadStaticAttributeClass = interface(DNAttributeClass)
  ['{1601C93B-4868-5B8D-BC4D-8340289D31F3}']
  { constructors } 

    {class} function init: DNThreadStaticAttribute;

  end;

  [DNTypeName('System.ThreadStaticAttribute')]
  DNThreadStaticAttribute = interface(DNAttribute)
  ['{FFC9F9AE-E87A-3252-8E25-B22423A40065}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNThreadStaticAttribute = class(TDNGenericImport<DNThreadStaticAttributeClass, DNThreadStaticAttribute>) end;

  //-------------namespace: System----------------
  DNBitConverterClass = interface(DNObjectClass)
  ['{482EC7AC-82F3-579B-A0F9-056DB3931B59}']
  { static fields getter & setter } 

   function __fakeFieldGet_IsLittleEndian: Boolean;

  { static fields } 

    {class} property IsLittleEndian: Boolean read __fakeFieldGet_IsLittleEndian;

  { static methods } 

    {class} function GetBytes(value: Boolean): TArray<Byte>; overload;
    {class} function GetBytes(value: Char): TArray<Byte>; overload;
    {class} function GetBytes(value: Int16): TArray<Byte>; overload;
    {class} function GetBytes(value: Int32): TArray<Byte>; overload;
    {class} function GetBytes(value: Int64): TArray<Byte>; overload;
    {class} function GetBytes(value: UInt16): TArray<Byte>; overload;
    {class} function GetBytes(value: UInt32): TArray<Byte>; overload;
    {class} function GetBytes(value: UInt64): TArray<Byte>; overload;
    {class} function GetBytes(value: Single): TArray<Byte>; overload;
    {class} function GetBytes(value: Double): TArray<Byte>; overload;
    {class} function ToChar(value: TArray<Byte>; startIndex: Int32): Char;
    {class} function ToInt16(value: TArray<Byte>; startIndex: Int32): Int16;
    {class} function ToInt32(value: TArray<Byte>; startIndex: Int32): Int32;
    {class} function ToInt64(value: TArray<Byte>; startIndex: Int32): Int64;
    {class} function ToUInt16(value: TArray<Byte>; startIndex: Int32): UInt16;
    {class} function ToUInt32(value: TArray<Byte>; startIndex: Int32): UInt32;
    {class} function ToUInt64(value: TArray<Byte>; startIndex: Int32): UInt64;
    {class} function ToSingle(value: TArray<Byte>; startIndex: Int32): Single;
    {class} function ToDouble(value: TArray<Byte>; startIndex: Int32): Double;
    {class} function ToString(value: TArray<Byte>; startIndex: Int32; length: Int32): string; overload;
    {class} function ToString(value: TArray<Byte>): string; overload;
    {class} function ToString(value: TArray<Byte>; startIndex: Int32): string; overload;
    {class} function ToBoolean(value: TArray<Byte>; startIndex: Int32): Boolean;
    {class} function DoubleToInt64Bits(value: Double): Int64;
    {class} function Int64BitsToDouble(value: Int64): Double;

  end;

  [DNTypeName('System.BitConverter')]
  DNBitConverter = interface(DNObject)
  ['{450AD484-5D18-3A7A-8B24-A228680FD885}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNBitConverter = class(TDNGenericImport<DNBitConverterClass, DNBitConverter>) end;

  //-------------namespace: System----------------
  DNBufferClass = interface(DNObjectClass)
  ['{EB7086AB-2135-5F7C-92C6-AEDED3A209ED}']
  { static methods } 

    {class} procedure BlockCopy(src: DNArray; srcOffset: Int32; dst: DNArray; dstOffset: Int32; count: Int32);
    {class} function GetByte(&array: DNArray; index: Int32): Byte;
    {class} procedure SetByte(&array: DNArray; index: Int32; value: Byte);
    {class} function ByteLength(&array: DNArray): Int32;
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: Int64; sourceBytesToCopy: Int64); overload;
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: UInt64; sourceBytesToCopy: UInt64); overload;

  end;

  [DNTypeName('System.Buffer')]
  DNBuffer = interface(DNObject)
  ['{830FE109-4566-3AF2-9B57-5602724FCACE}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNBuffer = class(TDNGenericImport<DNBufferClass, DNBuffer>) end;

  //-------------namespace: System----------------
  DNCharEnumeratorClass = interface(DNObjectClass)
  ['{CC9D26F9-30C3-5E14-B31A-76E5ECF6FBCA}']
  end;

  [DNTypeName('System.CharEnumerator')]
  DNCharEnumerator = interface(DNIEnumerator)
  ['{277EABD6-F03A-3C52-8B42-B8E326D9C0CC}']
  { getters & setters } 

    function get_Current: Char;

  { methods } 

    function Clone: DNObject;
    function MoveNext: Boolean;
    procedure Dispose;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Current: Char read get_Current;
  end;

  TDNCharEnumerator = class(TDNGenericImport<DNCharEnumeratorClass, DNCharEnumerator>) end;

  //-------------namespace: System.Collections----------------
  DNArrayListClass = interface(DNObjectClass)
  ['{7CA775DB-3315-5FF1-8CB3-CE8A2A8116CC}']
  { constructors } 

    {class} function init: DNArrayList; overload;
    {class} function init(capacity: Int32): DNArrayList; overload;
    {class} function init(c: DNICollection): DNArrayList; overload;

  { static methods } 

    {class} function Adapter(list: DNIList): DNArrayList;
    {class} function FixedSize(list: DNIList): DNIList; overload;
    {class} function FixedSize(list: DNArrayList): DNArrayList; overload;
    {class} function ReadOnly(list: DNIList): DNIList; overload;
    {class} function ReadOnly(list: DNArrayList): DNArrayList; overload;
    {class} function &Repeat(value: DNObject; count: Int32): DNArrayList;
    {class} function Synchronized(list: DNIList): DNIList; overload;
    {class} function Synchronized(list: DNArrayList): DNArrayList; overload;

  end;

  [DNTypeName('System.Collections.ArrayList')]
  DNArrayList = interface(DNIList)
  ['{6896B49D-7AFB-34DC-934E-5ADD38EEEE39}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;
    function get_Item(index: Int32): DNObject;
    procedure set_Item(index: Int32; value: DNObject);

  { methods } 

    function Add(value: DNObject): Int32;
    procedure AddRange(c: DNICollection);
    function BinarySearch(index: Int32; count: Int32; value: DNObject; comparer: DNIComparer): Int32; overload;
    function BinarySearch(value: DNObject): Int32; overload;
    function BinarySearch(value: DNObject; comparer: DNIComparer): Int32; overload;
    procedure Clear;
    function Clone: DNObject;
    function &Contains(item: DNObject): Boolean;
    procedure CopyTo(&array: DNArray); overload;
    procedure CopyTo(&array: DNArray; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: DNArray; arrayIndex: Int32; count: Int32); overload;
    function GetEnumerator: DNIEnumerator; overload;
    function GetEnumerator(index: Int32; count: Int32): DNIEnumerator; overload;
    function IndexOf(value: DNObject): Int32; overload;
    function IndexOf(value: DNObject; startIndex: Int32): Int32; overload;
    function IndexOf(value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    procedure Insert(index: Int32; value: DNObject);
    procedure InsertRange(index: Int32; c: DNICollection);
    function LastIndexOf(value: DNObject): Int32; overload;
    function LastIndexOf(value: DNObject; startIndex: Int32): Int32; overload;
    procedure Remove(obj: DNObject);
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure SetRange(index: Int32; c: DNICollection);
    procedure Sort; overload;
    procedure Sort(comparer: DNIComparer); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DNIComparer); overload;
    function ToArray: TArray<DNObject>; overload;
    function ToArray(&type: DNType): DNArray; overload;
    procedure TrimToSize;
    function LastIndexOf(value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    function GetRange(index: Int32; count: Int32): DNArrayList;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
    property Item[index: Int32]: DNObject read get_Item write set_Item; default;
  end;

  TDNArrayList = class(TDNGenericImport<DNArrayListClass, DNArrayList>) end;

  //-------------namespace: System.Collections----------------
  DNBitArrayClass = interface(DNObjectClass)
  ['{FA2B9397-5FB1-5FC0-A2A4-633437551D36}']
  { constructors } 

    {class} function init(length: Int32): DNBitArray; overload;
    {class} function init(length: Int32; defaultValue: Boolean): DNBitArray; overload;
    {class} function init(bytes: TArray<Byte>): DNBitArray; overload;
    {class} function init(values: TArray<Boolean>): DNBitArray; overload;
    {class} function init(values: TArray<Int32>): DNBitArray; overload;
    {class} function init(bits: DNBitArray): DNBitArray; overload;

  end;

  [DNTypeName('System.Collections.BitArray')]
  DNBitArray = interface(DNICollection)
  ['{5D2FB755-C658-3F51-86F2-881F4A1A2A55}']
  { getters & setters } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    function Get(index: Int32): Boolean;
    procedure &Set(index: Int32; value: Boolean);
    procedure SetAll(value: Boolean);
    function &And(value: DNBitArray): DNBitArray;
    function &Or(value: DNBitArray): DNBitArray;
    function &Xor(value: DNBitArray): DNBitArray;
    function &Not: DNBitArray;
    procedure CopyTo(&array: DNArray; index: Int32);
    function Clone: DNObject;
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
    property Length: Int32 read get_Length write set_Length;
    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBitArray = class(TDNGenericImport<DNBitArrayClass, DNBitArray>) end;

  //-------------namespace: System.Collections----------------
  DNCaseInsensitiveComparerClass = interface(DNObjectClass)
  ['{DFD81C62-C753-5B63-81BF-F04FA91DD411}']
  { static getter & setter } 

    {class} function get_Default: DNCaseInsensitiveComparer;
    {class} function get_DefaultInvariant: DNCaseInsensitiveComparer;

  { constructors } 

    {class} function init: DNCaseInsensitiveComparer; overload;
    {class} function init(culture: DNCultureInfo): DNCaseInsensitiveComparer; overload;

  { static propertys } 

    {class} property &Default: DNCaseInsensitiveComparer read get_Default;
    {class} property DefaultInvariant: DNCaseInsensitiveComparer read get_DefaultInvariant;
  end;

  [DNTypeName('System.Collections.CaseInsensitiveComparer')]
  DNCaseInsensitiveComparer = interface(DNIComparer)
  ['{35E946E4-7CDA-3824-8B24-D799A96309AD}']
  { methods } 

    function Compare(a: DNObject; b: DNObject): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCaseInsensitiveComparer = class(TDNGenericImport<DNCaseInsensitiveComparerClass, DNCaseInsensitiveComparer>) end;

  //-------------namespace: System.Collections----------------
  DNCaseInsensitiveHashCodeProviderClass = interface(DNObjectClass)
  ['{91A0C66A-2B8A-5D92-8EDC-EB723FE51A60}']
  { static getter & setter } 

    {class} function get_Default: DNCaseInsensitiveHashCodeProvider;
    {class} function get_DefaultInvariant: DNCaseInsensitiveHashCodeProvider;

  { constructors } 

    {class} function init: DNCaseInsensitiveHashCodeProvider; overload;
    {class} function init(culture: DNCultureInfo): DNCaseInsensitiveHashCodeProvider; overload;

  { static propertys } 

    {class} property &Default: DNCaseInsensitiveHashCodeProvider read get_Default;
    {class} property DefaultInvariant: DNCaseInsensitiveHashCodeProvider read get_DefaultInvariant;
  end;

  [DNTypeName('System.Collections.CaseInsensitiveHashCodeProvider')]
  DNCaseInsensitiveHashCodeProvider = interface(DNIHashCodeProvider)
  ['{47D3C68D-7D85-3227-A9E7-88451D6BADFC}']
  { methods } 

    function GetHashCode(obj: DNObject): Int32; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCaseInsensitiveHashCodeProvider = class(TDNGenericImport<DNCaseInsensitiveHashCodeProviderClass, DNCaseInsensitiveHashCodeProvider>) end;

  //-------------namespace: System.Collections----------------
  DNCollectionBaseClass = interface(DNObjectClass)
  ['{29CB3CD1-D53F-5012-B366-D611AAF94CE0}']
  end;

  [DNTypeName('System.Collections.CollectionBase')]
  DNCollectionBase = interface(DNIList)
  ['{87259279-9F5D-3C0A-BB58-723A2A6E4DBA}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCollectionBase = class(TDNGenericImport<DNCollectionBaseClass, DNCollectionBase>) end;

  //-------------namespace: System.Collections----------------
  DNComparerClass = interface(DNObjectClass)
  ['{91BDFB28-8AE3-5B27-B343-A35501A33783}']
  { constructors } 

    {class} function init(culture: DNCultureInfo): DNComparer;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNComparer;
   function __fakeFieldGet_DefaultInvariant: DNComparer;

  { static fields } 

    {class} property &Default: DNComparer read __fakeFieldGet_Default;
    {class} property DefaultInvariant: DNComparer read __fakeFieldGet_DefaultInvariant;

  end;

  [DNTypeName('System.Collections.Comparer')]
  DNComparer = interface(DNIComparer)
  ['{8A63140F-7EB8-3F4E-BA59-19B8C747843F}']
  { methods } 

    function Compare(a: DNObject; b: DNObject): Int32;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNComparer = class(TDNGenericImport<DNComparerClass, DNComparer>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNConcurrentDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{9182A45A-64BC-53F6-A2C1-3B8924F95111}']
  { constructors } 

    {class} function init: DNConcurrentDictionary<TKey, TValue>; overload;
    {class} function init(concurrencyLevel: Int32; capacity: Int32): DNConcurrentDictionary<TKey, TValue>; overload;
    {class} function init(collection: DNIEnumerable<DNKeyValuePair<TKey, TValue>>): DNConcurrentDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DNIEqualityComparer<TKey>): DNConcurrentDictionary<TKey, TValue>; overload;
    {class} function init(collection: DNIEnumerable<DNKeyValuePair<TKey, TValue>>; comparer: DNIEqualityComparer<TKey>): DNConcurrentDictionary<TKey, TValue>; overload;
    {class} function init(concurrencyLevel: Int32; collection: DNIEnumerable<DNKeyValuePair<TKey, TValue>>; comparer: DNIEqualityComparer<TKey>): DNConcurrentDictionary<TKey, TValue>; overload;
    {class} function init(concurrencyLevel: Int32; capacity: Int32; comparer: DNIEqualityComparer<TKey>): DNConcurrentDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Concurrent.ConcurrentDictionary`2')]
  DNConcurrentDictionary<TKey, TValue> = interface(DNIDictionary<TKey, TValue>)
  ['{15C7D0D1-03E8-3FB8-9B0F-D3246B917091}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;
    function get_Keys: DNICollection<TKey>;
    function get_Values: DNICollection<TValue>;

  { methods } 

    function TryAdd(key: TKey; value: TValue): Boolean;
    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryRemove(key: TKey; out value: TValue): Boolean;
    function TryUpdate(key: TKey; newValue: TValue; comparisonValue: TValue): Boolean;
    function ToArray: TArray<DNKeyValuePair<TKey, TValue>>;
    function GetEnumerator: DNIEnumerator<DNKeyValuePair<TKey, TValue>>;
    function GetOrAdd(key: TKey; valueFactory: DNFunc<TKey, TValue>): TValue; overload;
    function GetOrAdd(key: TKey; value: TValue): TValue; overload;
    function AddOrUpdate(key: TKey; addValueFactory: DNFunc<TKey, TValue>; updateValueFactory: DNFunc<TKey, TValue, TValue>): TValue; overload;
    function AddOrUpdate(key: TKey; addValue: TValue; updateValueFactory: DNFunc<TKey, TValue, TValue>): TValue; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
    property Keys: DNICollection<TKey> read get_Keys;
    property Values: DNICollection<TValue> read get_Values;
  end;

  TDNConcurrentDictionary<TKey, TValue> = class(TDNGenericImport<DNConcurrentDictionaryClass<TKey, TValue>, DNConcurrentDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNConcurrentQueueClass<T> = interface(DNObjectClass)
  ['{A64BA473-A26F-5A49-8031-32744C9CEA24}']
  { constructors } 

    {class} function init: DNConcurrentQueue<T>; overload;
    {class} function init(collection: DNIEnumerable<T>): DNConcurrentQueue<T>; overload;

  end;

  [DNTypeName('System.Collections.Concurrent.ConcurrentQueue`1')]
  DNConcurrentQueue<T> = interface(DNIProducerConsumerCollection<T>)
  ['{1DA587AB-3819-37C8-BF9A-D07575DE5A5C}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<T>;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function GetEnumerator: DNIEnumerator<T>;
    procedure Enqueue(item: T);
    function TryDequeue(out result: T): Boolean;
    function TryPeek(out result: T): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
  end;

  TDNConcurrentQueue<T> = class(TDNGenericImport<DNConcurrentQueueClass<T>, DNConcurrentQueue<T>>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNConcurrentStackClass<T> = interface(DNObjectClass)
  ['{A3C2A8DA-E35E-5981-BDC3-0CA110358942}']
  { constructors } 

    {class} function init: DNConcurrentStack<T>; overload;
    {class} function init(collection: DNIEnumerable<T>): DNConcurrentStack<T>; overload;

  end;

  [DNTypeName('System.Collections.Concurrent.ConcurrentStack`1')]
  DNConcurrentStack<T> = interface(DNIProducerConsumerCollection<T>)
  ['{564FED15-E758-357C-B420-141EEE18AEDC}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    procedure Clear;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    procedure Push(item: T);
    procedure PushRange(items: TArray<T>); overload;
    procedure PushRange(items: TArray<T>; startIndex: Int32; count: Int32); overload;
    function TryPeek(out result: T): Boolean;
    function TryPop(out result: T): Boolean;
    function TryPopRange(items: TArray<T>): Int32; overload;
    function TryPopRange(items: TArray<T>; startIndex: Int32; count: Int32): Int32; overload;
    function ToArray: TArray<T>;
    function GetEnumerator: DNIEnumerator<T>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
  end;

  TDNConcurrentStack<T> = class(TDNGenericImport<DNConcurrentStackClass<T>, DNConcurrentStack<T>>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNPartitionerClass<TSource> = interface(DNObjectClass)
  ['{EE82D476-C120-506B-889C-62C0BC436297}']
  end;

  [DNTypeName('System.Collections.Concurrent.Partitioner`1')]
  DNPartitioner<TSource> = interface(DNObject)
  ['{8D52C354-9823-3CB9-ACEB-BBFE152349D6}']
  { getters & setters } 

    function get_SupportsDynamicPartitions: Boolean;

  { methods } 

    function GetPartitions(partitionCount: Int32): DNIList<DNIEnumerator<TSource>>;
    function GetDynamicPartitions: DNIEnumerable<TSource>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SupportsDynamicPartitions: Boolean read get_SupportsDynamicPartitions;
  end;

  TDNPartitioner<TSource> = class(TDNGenericImport<DNPartitionerClass<TSource>, DNPartitioner<TSource>>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNOrderablePartitionerClass<TSource> = interface(DNPartitionerClass<TSource>)
  ['{58E441FD-C2A3-5259-B221-3529D07FCA91}']
  end;

  [DNTypeName('System.Collections.Concurrent.OrderablePartitioner`1')]
  DNOrderablePartitioner<TSource> = interface(DNPartitioner<TSource>)
  ['{D156DFD3-4F3F-3561-A43B-DDFBBDE729A1}']
  { getters & setters } 

    function get_KeysOrderedInEachPartition: Boolean;
    function get_KeysOrderedAcrossPartitions: Boolean;
    function get_KeysNormalized: Boolean;
    function get_SupportsDynamicPartitions: Boolean;

  { methods } 

    function GetOrderablePartitions(partitionCount: Int32): DNIList<DNIEnumerator<DNKeyValuePair<Int64, TSource>>>;
    function GetOrderableDynamicPartitions: DNIEnumerable<DNKeyValuePair<Int64, TSource>>;
    function GetPartitions(partitionCount: Int32): DNIList<DNIEnumerator<TSource>>;
    function GetDynamicPartitions: DNIEnumerable<TSource>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeysOrderedInEachPartition: Boolean read get_KeysOrderedInEachPartition;
    property KeysOrderedAcrossPartitions: Boolean read get_KeysOrderedAcrossPartitions;
    property KeysNormalized: Boolean read get_KeysNormalized;
    property SupportsDynamicPartitions: Boolean read get_SupportsDynamicPartitions;
  end;

  TDNOrderablePartitioner<TSource> = class(TDNGenericImport<DNOrderablePartitionerClass<TSource>, DNOrderablePartitioner<TSource>>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNPartitionerClass = interface(DNObjectClass)
  ['{31873B6E-9D92-58D1-94CF-1E0DAB2ACA26}']
  { static methods } 

    {class} function Create(fromInclusive: Int64; toExclusive: Int64): DNOrderablePartitioner<DNTuple<Int64, Int64>>; overload;
    {class} function Create(fromInclusive: Int64; toExclusive: Int64; rangeSize: Int64): DNOrderablePartitioner<DNTuple<Int64, Int64>>; overload;
    {class} function Create(fromInclusive: Int32; toExclusive: Int32): DNOrderablePartitioner<DNTuple<Int32, Int32>>; overload;
    {class} function Create(fromInclusive: Int32; toExclusive: Int32; rangeSize: Int32): DNOrderablePartitioner<DNTuple<Int32, Int32>>; overload;

  end;

  [DNTypeName('System.Collections.Concurrent.Partitioner')]
  DNPartitioner = interface(DNObject)
  ['{44463135-332E-3920-AC85-4F64CDB39C2C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPartitioner = class(TDNGenericImport<DNPartitionerClass, DNPartitioner>) end;

  //-------------namespace: System.Collections----------------
  DNDictionaryBaseClass = interface(DNObjectClass)
  ['{1245E34F-05F2-5247-B672-46DE09853114}']
  end;

  [DNTypeName('System.Collections.DictionaryBase')]
  DNDictionaryBase = interface(DNIDictionary)
  ['{9840C5C3-21D3-3B8A-94C1-3FC542B0227E}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: DNArray; index: Int32);
    function GetEnumerator: DNIDictionaryEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDictionaryBase = class(TDNGenericImport<DNDictionaryBaseClass, DNDictionaryBase>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNComparerClass<T> = interface(DNObjectClass)
  ['{A4F075B5-9DC3-57CA-9716-796D54236EC4}']
  { static getter & setter } 

    {class} function get_Default: DNComparer<T>;

  { static methods } 

    {class} function Create(comparison: DNComparison<T>): DNComparer<T>;

  { static propertys } 

    {class} property &Default: DNComparer<T> read get_Default;
  end;

  [DNTypeName('System.Collections.Generic.Comparer`1')]
  DNComparer<T> = interface(DNIComparer)
  ['{2B6A5C69-3C7B-34D3-ACE4-C87BA2DEC340}']
  { methods } 

    function Compare(x: T; y: T): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNComparer<T> = class(TDNGenericImport<DNComparerClass<T>, DNComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{4AA52459-F9EC-5F3E-AD22-FD0DE80962D8}']
  { constructors } 

    {class} function init: DNDictionary<TKey, TValue>; overload;
    {class} function init(capacity: Int32): DNDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(capacity: Int32; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DNIDictionary<TKey, TValue>): DNDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DNIDictionary<TKey, TValue>; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2')]
  DNDictionary<TKey, TValue> = interface(DNIDictionary<TKey, TValue>)
  ['{8C49B482-0272-3C4E-98EF-819FF671062A}']
  { getters & setters } 

    function get_Comparer: DNIEqualityComparer<TKey>;
    function get_Count: Int32;
    function get_Keys: DNDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNDictionary_ValueCollection<TKey, TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function GetEnumerator: DNDictionary_Enumerator<TKey, TValue>;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function ContainsValue(value: TValue): Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Comparer: DNIEqualityComparer<TKey> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DNDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNDictionary_ValueCollection<TKey, TValue> read get_Values;
  end;

  TDNDictionary<TKey, TValue> = class(TDNGenericImport<DNDictionaryClass<TKey, TValue>, DNDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{2FCF3D5C-45C2-5FC5-A991-22CEDE99D088}']
  { constructors } 

    {class} function init(dictionary: DNDictionary<TKey, TValue>): DNDictionary_KeyCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+KeyCollection')]
  DNDictionary_KeyCollection<TKey, TValue> = interface(DNICollection<TKey>)
  ['{589C93D3-8CF0-31A3-A835-B59C4F2F531D}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDictionary_KeyCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TKey>; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNDictionary_KeyCollectionClass<TKey, TValue>, DNDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{5AC4654E-E70B-54EA-AA61-6C6925AE6E2B}']
  { constructors } 

    {class} function init(dictionary: DNDictionary<TKey, TValue>): DNDictionary_ValueCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+ValueCollection')]
  DNDictionary_ValueCollection<TKey, TValue> = interface(DNICollection<TValue>)
  ['{0A91B892-23B2-3C00-A4A4-4F672BC48A4E}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDictionary_ValueCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TValue>; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNDictionary_ValueCollectionClass<TKey, TValue>, DNDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNEqualityComparerClass<T> = interface(DNObjectClass)
  ['{91B72D6B-FDF7-5A52-B197-DACA0605C9F6}']
  { static getter & setter } 

    {class} function get_Default: DNEqualityComparer<T>;

  { static propertys } 

    {class} property &Default: DNEqualityComparer<T> read get_Default;
  end;

  [DNTypeName('System.Collections.Generic.EqualityComparer`1')]
  DNEqualityComparer<T> = interface(DNIEqualityComparer)
  ['{76C3CB61-7A59-3F57-9622-A0B28AF35A56}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEqualityComparer<T> = class(TDNGenericImport<DNEqualityComparerClass<T>, DNEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNListClass<T> = interface(DNObjectClass)
  ['{EDDB5754-5EA5-58C1-B94F-36F77FBA0019}']
  { constructors } 

    {class} function init: DNList<T>; overload;
    {class} function init(capacity: Int32): DNList<T>; overload;
    {class} function init(collection: DNIEnumerable<T>): DNList<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.List`1')]
  DNList<T> = interface(DNIList<T>)
  ['{5AF00C2E-048B-3AB3-8CCD-548134771D38}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure AddRange(collection: DNIEnumerable<T>);
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DNIComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    procedure ForEach(action: DNAction<T>);
    function GetEnumerator: DNList_Enumerator<T>;
    function IndexOf(item: T): Int32; overload;
    procedure Insert(index: Int32; item: T);
    procedure InsertRange(index: Int32; collection: DNIEnumerable<T>);
    function RemoveAll(match: DNPredicate<T>): Int32;
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparer: DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DNIComparer<T>); overload;
    procedure Sort(comparison: DNComparison<T>); overload;
    function ToArray: TArray<T>;
    procedure TrimExcess;
    function AsReadOnly: DNReadOnlyCollection<T>;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DNIComparer<T>): Int32; overload;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    function Exists(match: DNPredicate<T>): Boolean;
    function Find(match: DNPredicate<T>): T;
    function FindAll(match: DNPredicate<T>): DNList<T>;
    function FindIndex(match: DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DNPredicate<T>): Int32; overload;
    function FindLast(match: DNPredicate<T>): T;
    function FindLastIndex(match: DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DNPredicate<T>): Int32; overload;
    function GetRange(index: Int32; count: Int32): DNList<T>;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; index: Int32): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    procedure Reverse; overload;
    function TrueForAll(match: DNPredicate<T>): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNList<T> = class(TDNGenericImport<DNListClass<T>, DNList<T>>) end;

  //-------------namespace: System.Collections----------------
  DNHashtableClass = interface(DNObjectClass)
  ['{4E24FF92-E19C-57FD-8085-E77CB7D0B46E}']
  { constructors } 

    {class} function init: DNHashtable; overload;
    {class} function init(capacity: Int32): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary): DNHashtable; overload;
    {class} function init(d: DNIDictionary; loadFactor: Single): DNHashtable; overload;
    {class} function init(d: DNIDictionary; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary; loadFactor: Single; equalityComparer: DNIEqualityComparer): DNHashtable; overload;

  { static methods } 

    {class} function Synchronized(table: DNHashtable): DNHashtable;

  end;

  [DNTypeName('System.Collections.Hashtable')]
  DNHashtable = interface(DNIDictionary)
  ['{146855FA-309F-3D0E-BB3E-DF525F30A715}']
  { getters & setters } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_SyncRoot: DNObject;
    function get_Count: Int32;

  { methods } 

    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    function Clone: DNObject;
    function &Contains(key: DNObject): Boolean;
    function ContainsKey(key: DNObject): Boolean;
    function ContainsValue(value: DNObject): Boolean;
    procedure CopyTo(&array: DNArray; arrayIndex: Int32);
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure Remove(key: DNObject);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property SyncRoot: DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNHashtable = class(TDNGenericImport<DNHashtableClass, DNHashtable>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNCollectionClass<T> = interface(DNObjectClass)
  ['{E3640859-61E7-5EB7-BB09-04E07C80CF40}']
  { constructors } 

    {class} function init: DNCollection<T>; overload;
    {class} function init(list: DNIList<T>): DNCollection<T>; overload;

  end;

  [DNTypeName('System.Collections.ObjectModel.Collection`1')]
  DNCollection<T> = interface(DNIList<T>)
  ['{EDF5C25B-A686-3EAE-8241-89C5A360529F}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<T>; index: Int32);
    function GetEnumerator: DNIEnumerator<T>;
    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    function &Contains(item: T): Boolean;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNCollection<T> = class(TDNGenericImport<DNCollectionClass<T>, DNCollection<T>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNKeyedCollectionClass<TKey, TItem> = interface(DNCollectionClass<TItem>)
  ['{E86E18C6-DC67-5B0D-907E-DA2919C44B68}']
  end;

  [DNTypeName('System.Collections.ObjectModel.KeyedCollection`2')]
  DNKeyedCollection<TKey, TItem> = interface(DNCollection<TItem>)
  ['{725F8BAA-FE81-3B98-BDF5-914E2069C8BA}']
  { getters & setters } 

    function get_Comparer: DNIEqualityComparer<TKey>;
    function get_Item(key: TKey): TItem;
    function get_Count: Int32;

  { methods } 

    function &Contains(key: TKey): Boolean; overload;
    function Remove(key: TKey): Boolean;
    procedure CopyTo(&array: TArray<TItem>; index: Int32);
    function &Contains(item: TItem): Boolean; overload;
    function GetEnumerator: DNIEnumerator<TItem>;
    function IndexOf(item: TItem): Int32;
    procedure Insert(index: Int32; item: TItem);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Comparer: DNIEqualityComparer<TKey> read get_Comparer;
    property Item[key: TKey]: TItem read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNKeyedCollection<TKey, TItem> = class(TDNGenericImport<DNKeyedCollectionClass<TKey, TItem>, DNKeyedCollection<TKey, TItem>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyCollectionClass<T> = interface(DNObjectClass)
  ['{99C09441-265E-52FB-ABC6-6FBB49E19CF5}']
  { constructors } 

    {class} function init(list: DNIList<T>): DNReadOnlyCollection<T>;

  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyCollection`1')]
  DNReadOnlyCollection<T> = interface(DNIList<T>)
  ['{96392D08-9BFD-387D-8F8C-F061F4593B91}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNIEnumerator<T>;
    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function IndexOf(value: T): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollection<T> = class(TDNGenericImport<DNReadOnlyCollectionClass<T>, DNReadOnlyCollection<T>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{15CA3937-12BF-5580-9729-ACC1EC2A1D39}']
  { constructors } 

    {class} function init(dictionary: DNIDictionary<TKey, TValue>): DNReadOnlyDictionary<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyDictionary`2')]
  DNReadOnlyDictionary<TKey, TValue> = interface(DNIDictionary<TKey, TValue>)
  ['{51D0F493-D334-3E70-A376-33B6B1E4F0CD}']
  { getters & setters } 

    function get_Keys: DNReadOnlyDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNReadOnlyDictionary_ValueCollection<TKey, TValue>;
    function get_Count: Int32;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function GetEnumerator: DNIEnumerator<DNKeyValuePair<TKey, TValue>>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Keys: DNReadOnlyDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNReadOnlyDictionary_ValueCollection<TKey, TValue> read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyDictionary<TKey, TValue> = class(TDNGenericImport<DNReadOnlyDictionaryClass<TKey, TValue>, DNReadOnlyDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{3FB169CE-35AD-5399-93BC-4E89A40E0434}']
  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection')]
  DNReadOnlyDictionary_KeyCollection<TKey, TValue> = interface(DNICollection<TKey>)
  ['{B434B5D4-7EBF-37E4-8F40-38D5B2EFF7C3}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<TKey>; arrayIndex: Int32);
    function GetEnumerator: DNIEnumerator<TKey>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNReadOnlyDictionary_KeyCollectionClass<TKey, TValue>, DNReadOnlyDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{4B5BD930-B028-5AA0-B29B-BFDF1B2B4A3A}']
  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection')]
  DNReadOnlyDictionary_ValueCollection<TKey, TValue> = interface(DNICollection<TValue>)
  ['{C26CACF1-2EAB-3F51-8348-43E77C9EBA3D}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<TValue>; arrayIndex: Int32);
    function GetEnumerator: DNIEnumerator<TValue>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNReadOnlyDictionary_ValueCollectionClass<TKey, TValue>, DNReadOnlyDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections----------------
  DNQueueClass = interface(DNObjectClass)
  ['{6AAFAAD5-9F62-5228-8118-CF8D951FA7A6}']
  { constructors } 

    {class} function init: DNQueue; overload;
    {class} function init(capacity: Int32): DNQueue; overload;
    {class} function init(capacity: Int32; growFactor: Single): DNQueue; overload;
    {class} function init(col: DNICollection): DNQueue; overload;

  { static methods } 

    {class} function Synchronized(queue: DNQueue): DNQueue;

  end;

  [DNTypeName('System.Collections.Queue')]
  DNQueue = interface(DNICollection)
  ['{7F976B72-4B71-3858-BEE8-8E3A3189A651}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    function Clone: DNObject;
    procedure Clear;
    procedure CopyTo(&array: DNArray; index: Int32);
    procedure Enqueue(obj: DNObject);
    function GetEnumerator: DNIEnumerator;
    function Dequeue: DNObject;
    function Peek: DNObject;
    function &Contains(obj: DNObject): Boolean;
    function ToArray: TArray<DNObject>;
    procedure TrimToSize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNQueue = class(TDNGenericImport<DNQueueClass, DNQueue>) end;

  //-------------namespace: System.Collections----------------
  DNReadOnlyCollectionBaseClass = interface(DNObjectClass)
  ['{82DD4ED1-FB30-5672-8627-C8628F02A882}']
  end;

  [DNTypeName('System.Collections.ReadOnlyCollectionBase')]
  DNReadOnlyCollectionBase = interface(DNICollection)
  ['{B66406BD-746D-3D10-98A1-41D097CF42B7}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollectionBase = class(TDNGenericImport<DNReadOnlyCollectionBaseClass, DNReadOnlyCollectionBase>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAuthorizationRuleCollectionClass = interface(DNReadOnlyCollectionBaseClass)
  ['{B9187B50-E7CF-5E90-A65A-70C633D9D50A}']
  { constructors } 

    {class} function init: DNAuthorizationRuleCollection;

  end;

  [DNTypeName('System.Security.AccessControl.AuthorizationRuleCollection')]
  DNAuthorizationRuleCollection = interface(DNReadOnlyCollectionBase)
  ['{06363577-4FAB-38EA-A50C-6B8AF3BC81BE}']
  { getters & setters } 

    function get_Item(index: Int32): DNAuthorizationRule;
    function get_Count: Int32;

  { methods } 

    procedure AddRule(rule: DNAuthorizationRule);
    procedure CopyTo(rules: TArray<DNAuthorizationRule>; index: Int32);
    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNAuthorizationRule read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNAuthorizationRuleCollection = class(TDNGenericImport<DNAuthorizationRuleCollectionClass, DNAuthorizationRuleCollection>) end;

  //-------------namespace: System.Collections----------------
  DNSortedListClass = interface(DNObjectClass)
  ['{E22C3182-071B-5CC8-9858-A43910E839B5}']
  { constructors } 

    {class} function init: DNSortedList; overload;
    {class} function init(initialCapacity: Int32): DNSortedList; overload;
    {class} function init(comparer: DNIComparer): DNSortedList; overload;
    {class} function init(comparer: DNIComparer; capacity: Int32): DNSortedList; overload;
    {class} function init(d: DNIDictionary): DNSortedList; overload;
    {class} function init(d: DNIDictionary; comparer: DNIComparer): DNSortedList; overload;

  { static methods } 

    {class} function Synchronized(list: DNSortedList): DNSortedList;

  end;

  [DNTypeName('System.Collections.SortedList')]
  DNSortedList = interface(DNIDictionary)
  ['{026CC6D7-34B2-33D5-B551-CA31EB6CE345}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);

  { methods } 

    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    function Clone: DNObject;
    function &Contains(key: DNObject): Boolean;
    function ContainsKey(key: DNObject): Boolean;
    function ContainsValue(value: DNObject): Boolean;
    procedure CopyTo(&array: DNArray; arrayIndex: Int32);
    function GetByIndex(index: Int32): DNObject;
    function GetEnumerator: DNIDictionaryEnumerator;
    function GetKey(index: Int32): DNObject;
    function GetKeyList: DNIList;
    function GetValueList: DNIList;
    function IndexOfKey(key: DNObject): Int32;
    function IndexOfValue(value: DNObject): Int32;
    procedure RemoveAt(index: Int32);
    procedure Remove(key: DNObject);
    procedure SetByIndex(index: Int32; value: DNObject);
    procedure TrimToSize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
  end;

  TDNSortedList = class(TDNGenericImport<DNSortedListClass, DNSortedList>) end;

  //-------------namespace: System.Collections----------------
  DNStackClass = interface(DNObjectClass)
  ['{7C532C7B-FDD4-5247-A5A7-A4BE1DBBFD7E}']
  { constructors } 

    {class} function init: DNStack; overload;
    {class} function init(initialCapacity: Int32): DNStack; overload;
    {class} function init(col: DNICollection): DNStack; overload;

  { static methods } 

    {class} function Synchronized(stack: DNStack): DNStack;

  end;

  [DNTypeName('System.Collections.Stack')]
  DNStack = interface(DNICollection)
  ['{4599202D-460F-3FB7-8A1C-C2CC6ED6C7C8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    procedure Clear;
    function Clone: DNObject;
    function &Contains(obj: DNObject): Boolean;
    procedure CopyTo(&array: DNArray; index: Int32);
    function GetEnumerator: DNIEnumerator;
    function Peek: DNObject;
    function Pop: DNObject;
    procedure Push(obj: DNObject);
    function ToArray: TArray<DNObject>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNStack = class(TDNGenericImport<DNStackClass, DNStack>) end;

  //-------------namespace: System.Collections----------------
  DNStructuralComparisonsClass = interface(DNObjectClass)
  ['{2A01810E-624E-522A-89BC-E9EE9B2338F4}']
  { static getter & setter } 

    {class} function get_StructuralComparer: DNIComparer;
    {class} function get_StructuralEqualityComparer: DNIEqualityComparer;

  { static propertys } 

    {class} property StructuralComparer: DNIComparer read get_StructuralComparer;
    {class} property StructuralEqualityComparer: DNIEqualityComparer read get_StructuralEqualityComparer;
  end;

  [DNTypeName('System.Collections.StructuralComparisons')]
  DNStructuralComparisons = interface(DNObject)
  ['{C255CFED-7B22-3122-AF20-925C66CDCB5B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNStructuralComparisons = class(TDNGenericImport<DNStructuralComparisonsClass, DNStructuralComparisons>) end;

  //-------------namespace: System----------------
  DNConsoleClass = interface(DNObjectClass)
  ['{E169FA00-AA7D-5E4B-8D48-2E01CCAF734B}']
  { static getter & setter } 

    {class} function get_IsInputRedirected: Boolean;
    {class} function get_IsOutputRedirected: Boolean;
    {class} function get_IsErrorRedirected: Boolean;
    {class} function get_In: DNTextReader;
    {class} function get_Out: DNTextWriter;
    {class} function get_Error: DNTextWriter;
    {class} function get_InputEncoding: DNEncoding;
    {class} procedure set_InputEncoding(value: DNEncoding);
    {class} function get_OutputEncoding: DNEncoding;
    {class} procedure set_OutputEncoding(value: DNEncoding);
    {class} function get_BackgroundColor: DNConsoleColor;
    {class} procedure set_BackgroundColor(value: DNConsoleColor);
    {class} function get_ForegroundColor: DNConsoleColor;
    {class} procedure set_ForegroundColor(value: DNConsoleColor);
    {class} function get_BufferHeight: Int32;
    {class} procedure set_BufferHeight(value: Int32);
    {class} function get_BufferWidth: Int32;
    {class} procedure set_BufferWidth(value: Int32);
    {class} function get_WindowHeight: Int32;
    {class} procedure set_WindowHeight(value: Int32);
    {class} function get_WindowWidth: Int32;
    {class} procedure set_WindowWidth(value: Int32);
    {class} function get_LargestWindowWidth: Int32;
    {class} function get_LargestWindowHeight: Int32;
    {class} function get_WindowLeft: Int32;
    {class} procedure set_WindowLeft(value: Int32);
    {class} function get_WindowTop: Int32;
    {class} procedure set_WindowTop(value: Int32);
    {class} function get_CursorLeft: Int32;
    {class} procedure set_CursorLeft(value: Int32);
    {class} function get_CursorTop: Int32;
    {class} procedure set_CursorTop(value: Int32);
    {class} function get_CursorSize: Int32;
    {class} procedure set_CursorSize(value: Int32);
    {class} function get_CursorVisible: Boolean;
    {class} procedure set_CursorVisible(value: Boolean);
    {class} function get_Title: string;
    {class} procedure set_Title(value: string);
    {class} function get_KeyAvailable: Boolean;
    {class} function get_NumberLock: Boolean;
    {class} function get_CapsLock: Boolean;
    {class} function get_TreatControlCAsInput: Boolean;
    {class} procedure set_TreatControlCAsInput(value: Boolean);

  { static methods } 

    {class} procedure Beep; overload;
    {class} procedure Beep(frequency: Int32; duration: Int32); overload;
    {class} procedure Clear;
    {class} procedure ResetColor;
    {class} procedure MoveBufferArea(sourceLeft: Int32; sourceTop: Int32; sourceWidth: Int32; sourceHeight: Int32; targetLeft: Int32; targetTop: Int32); overload;
    {class} procedure MoveBufferArea(sourceLeft: Int32; sourceTop: Int32; sourceWidth: Int32; sourceHeight: Int32; targetLeft: Int32; targetTop: Int32; sourceChar: Char; sourceForeColor: DNConsoleColor; sourceBackColor: DNConsoleColor); overload;
    {class} procedure SetBufferSize(width: Int32; height: Int32);
    {class} procedure SetWindowSize(width: Int32; height: Int32);
    {class} procedure SetWindowPosition(left: Int32; top: Int32);
    {class} procedure SetCursorPosition(left: Int32; top: Int32);
    {class} function ReadKey: DNConsoleKeyInfo; overload;
    {class} function ReadKey(intercept: Boolean): DNConsoleKeyInfo; overload;
    {class} function OpenStandardError: DNStream; overload;
    {class} function OpenStandardError(bufferSize: Int32): DNStream; overload;
    {class} function OpenStandardInput: DNStream; overload;
    {class} function OpenStandardInput(bufferSize: Int32): DNStream; overload;
    {class} function OpenStandardOutput: DNStream; overload;
    {class} function OpenStandardOutput(bufferSize: Int32): DNStream; overload;
    {class} procedure SetIn(newIn: DNTextReader);
    {class} procedure SetOut(newOut: DNTextWriter);
    {class} procedure SetError(newError: DNTextWriter);
    {class} function Read: Int32;
    {class} function ReadLine: string;
    {class} procedure WriteLine; overload;
    {class} procedure WriteLine(value: Boolean); overload;
    {class} procedure WriteLine(value: Char); overload;
    {class} procedure WriteLine(buffer: TArray<Char>); overload;
    {class} procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    {class} procedure WriteLine(value: DNDecimal); overload;
    {class} procedure WriteLine(value: Double); overload;
    {class} procedure WriteLine(value: Single); overload;
    {class} procedure WriteLine(value: Int32); overload;
    {class} procedure WriteLine(value: UInt32); overload;
    {class} procedure WriteLine(value: Int64); overload;
    {class} procedure WriteLine(value: UInt64); overload;
    {class} procedure WriteLine(value: DNObject); overload;
    {class} procedure WriteLine(value: string); overload;
    {class} procedure WriteLine(format: string; arg0: DNObject); overload;
    {class} procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    {class} procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    {class} procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject; arg3: DNObject); overload;
    {class} procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    {class} procedure Write(format: string; arg0: DNObject); overload;
    {class} procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    {class} procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    {class} procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject; arg3: DNObject); overload;
    {class} procedure Write(format: string; arg: TArray<DNObject>); overload;
    {class} procedure Write(value: Boolean); overload;
    {class} procedure Write(value: Char); overload;
    {class} procedure Write(buffer: TArray<Char>); overload;
    {class} procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    {class} procedure Write(value: Double); overload;
    {class} procedure Write(value: DNDecimal); overload;
    {class} procedure Write(value: Single); overload;
    {class} procedure Write(value: Int32); overload;
    {class} procedure Write(value: UInt32); overload;
    {class} procedure Write(value: Int64); overload;
    {class} procedure Write(value: UInt64); overload;
    {class} procedure Write(value: DNObject); overload;
    {class} procedure Write(value: string); overload;

  { static propertys } 

    {class} property IsInputRedirected: Boolean read get_IsInputRedirected;
    {class} property IsOutputRedirected: Boolean read get_IsOutputRedirected;
    {class} property IsErrorRedirected: Boolean read get_IsErrorRedirected;
    {class} property &In: DNTextReader read get_In;
    {class} property &Out: DNTextWriter read get_Out;
    {class} property Error: DNTextWriter read get_Error;
    {class} property InputEncoding: DNEncoding read get_InputEncoding write set_InputEncoding;
    {class} property OutputEncoding: DNEncoding read get_OutputEncoding write set_OutputEncoding;
    {class} property BackgroundColor: DNConsoleColor read get_BackgroundColor write set_BackgroundColor;
    {class} property ForegroundColor: DNConsoleColor read get_ForegroundColor write set_ForegroundColor;
    {class} property BufferHeight: Int32 read get_BufferHeight write set_BufferHeight;
    {class} property BufferWidth: Int32 read get_BufferWidth write set_BufferWidth;
    {class} property WindowHeight: Int32 read get_WindowHeight write set_WindowHeight;
    {class} property WindowWidth: Int32 read get_WindowWidth write set_WindowWidth;
    {class} property LargestWindowWidth: Int32 read get_LargestWindowWidth;
    {class} property LargestWindowHeight: Int32 read get_LargestWindowHeight;
    {class} property WindowLeft: Int32 read get_WindowLeft write set_WindowLeft;
    {class} property WindowTop: Int32 read get_WindowTop write set_WindowTop;
    {class} property CursorLeft: Int32 read get_CursorLeft write set_CursorLeft;
    {class} property CursorTop: Int32 read get_CursorTop write set_CursorTop;
    {class} property CursorSize: Int32 read get_CursorSize write set_CursorSize;
    {class} property CursorVisible: Boolean read get_CursorVisible write set_CursorVisible;
    {class} property Title: string read get_Title write set_Title;
    {class} property KeyAvailable: Boolean read get_KeyAvailable;
    {class} property NumberLock: Boolean read get_NumberLock;
    {class} property CapsLock: Boolean read get_CapsLock;
    {class} property TreatControlCAsInput: Boolean read get_TreatControlCAsInput write set_TreatControlCAsInput;
  end;

  [DNTypeName('System.Console')]
  DNConsole = interface(DNObject)
  ['{1929386A-E10F-3B73-84A1-F50E745332F0}']
  { events } 

    {class} procedure add_CancelKeyPress(value: DNConsoleCancelEventHandler);
    {class} procedure remove_CancelKeyPress(value: DNConsoleCancelEventHandler);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNConsole = class(TDNGenericImport<DNConsoleClass, DNConsole>) end;

  //-------------namespace: System----------------
  DNConvertClass = interface(DNObjectClass)
  ['{45BA5748-F1CE-5DAE-83BB-C8B9A4BAC1D4}']
  { static fields getter & setter } 

   function __fakeFieldGet_DBNull: DNObject;

  { static fields } 

    {class} property DBNull: DNObject read __fakeFieldGet_DBNull;

  { static methods } 

    {class} function GetTypeCode(value: DNObject): DNTypeCode;
    {class} function IsDBNull(value: DNObject): Boolean;
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode; provider: DNIFormatProvider): DNObject; overload;
    {class} function ChangeType(value: DNObject; conversionType: DNType): DNObject; overload;
    {class} function ChangeType(value: DNObject; conversionType: DNType; provider: DNIFormatProvider): DNObject; overload;
    {class} function ToBoolean(value: DNObject): Boolean; overload;
    {class} function ToBoolean(value: DNObject; provider: DNIFormatProvider): Boolean; overload;
    {class} function ToBoolean(value: Boolean): Boolean; overload;
    {class} function ToBoolean(value: SByte): Boolean; overload;
    {class} function ToBoolean(value: Char): Boolean; overload;
    {class} function ToBoolean(value: Byte): Boolean; overload;
    {class} function ToBoolean(value: Int16): Boolean; overload;
    {class} function ToBoolean(value: UInt16): Boolean; overload;
    {class} function ToBoolean(value: Int32): Boolean; overload;
    {class} function ToBoolean(value: UInt32): Boolean; overload;
    {class} function ToBoolean(value: Int64): Boolean; overload;
    {class} function ToBoolean(value: UInt64): Boolean; overload;
    {class} function ToBoolean(value: string): Boolean; overload;
    {class} function ToBoolean(value: string; provider: DNIFormatProvider): Boolean; overload;
    {class} function ToBoolean(value: Single): Boolean; overload;
    {class} function ToBoolean(value: Double): Boolean; overload;
    {class} function ToBoolean(value: DNDecimal): Boolean; overload;
    {class} function ToBoolean(value: DNDateTime): Boolean; overload;
    {class} function ToChar(value: DNObject): Char; overload;
    {class} function ToChar(value: DNObject; provider: DNIFormatProvider): Char; overload;
    {class} function ToChar(value: Boolean): Char; overload;
    {class} function ToChar(value: Char): Char; overload;
    {class} function ToChar(value: SByte): Char; overload;
    {class} function ToChar(value: Byte): Char; overload;
    {class} function ToChar(value: Int16): Char; overload;
    {class} function ToChar(value: UInt16): Char; overload;
    {class} function ToChar(value: Int32): Char; overload;
    {class} function ToChar(value: UInt32): Char; overload;
    {class} function ToChar(value: Int64): Char; overload;
    {class} function ToChar(value: UInt64): Char; overload;
    {class} function ToChar(value: string): Char; overload;
    {class} function ToChar(value: string; provider: DNIFormatProvider): Char; overload;
    {class} function ToChar(value: Single): Char; overload;
    {class} function ToChar(value: Double): Char; overload;
    {class} function ToChar(value: DNDecimal): Char; overload;
    {class} function ToChar(value: DNDateTime): Char; overload;
    {class} function ToSByte(value: DNObject): SByte; overload;
    {class} function ToSByte(value: DNObject; provider: DNIFormatProvider): SByte; overload;
    {class} function ToSByte(value: Boolean): SByte; overload;
    {class} function ToSByte(value: SByte): SByte; overload;
    {class} function ToSByte(value: Char): SByte; overload;
    {class} function ToSByte(value: Byte): SByte; overload;
    {class} function ToSByte(value: Int16): SByte; overload;
    {class} function ToSByte(value: UInt16): SByte; overload;
    {class} function ToSByte(value: Int32): SByte; overload;
    {class} function ToSByte(value: UInt32): SByte; overload;
    {class} function ToSByte(value: Int64): SByte; overload;
    {class} function ToSByte(value: UInt64): SByte; overload;
    {class} function ToSByte(value: Single): SByte; overload;
    {class} function ToSByte(value: Double): SByte; overload;
    {class} function ToSByte(value: DNDecimal): SByte; overload;
    {class} function ToSByte(value: string): SByte; overload;
    {class} function ToSByte(value: string; provider: DNIFormatProvider): SByte; overload;
    {class} function ToSByte(value: DNDateTime): SByte; overload;
    {class} function ToByte(value: DNObject): Byte; overload;
    {class} function ToByte(value: DNObject; provider: DNIFormatProvider): Byte; overload;
    {class} function ToByte(value: Boolean): Byte; overload;
    {class} function ToByte(value: Byte): Byte; overload;
    {class} function ToByte(value: Char): Byte; overload;
    {class} function ToByte(value: SByte): Byte; overload;
    {class} function ToByte(value: Int16): Byte; overload;
    {class} function ToByte(value: UInt16): Byte; overload;
    {class} function ToByte(value: Int32): Byte; overload;
    {class} function ToByte(value: UInt32): Byte; overload;
    {class} function ToByte(value: Int64): Byte; overload;
    {class} function ToByte(value: UInt64): Byte; overload;
    {class} function ToByte(value: Single): Byte; overload;
    {class} function ToByte(value: Double): Byte; overload;
    {class} function ToByte(value: DNDecimal): Byte; overload;
    {class} function ToByte(value: string): Byte; overload;
    {class} function ToByte(value: string; provider: DNIFormatProvider): Byte; overload;
    {class} function ToByte(value: DNDateTime): Byte; overload;
    {class} function ToInt16(value: DNObject): Int16; overload;
    {class} function ToInt16(value: DNObject; provider: DNIFormatProvider): Int16; overload;
    {class} function ToInt16(value: Boolean): Int16; overload;
    {class} function ToInt16(value: Char): Int16; overload;
    {class} function ToInt16(value: SByte): Int16; overload;
    {class} function ToInt16(value: Byte): Int16; overload;
    {class} function ToInt16(value: UInt16): Int16; overload;
    {class} function ToInt16(value: Int32): Int16; overload;
    {class} function ToInt16(value: UInt32): Int16; overload;
    {class} function ToInt16(value: Int16): Int16; overload;
    {class} function ToInt16(value: Int64): Int16; overload;
    {class} function ToInt16(value: UInt64): Int16; overload;
    {class} function ToInt16(value: Single): Int16; overload;
    {class} function ToInt16(value: Double): Int16; overload;
    {class} function ToInt16(value: DNDecimal): Int16; overload;
    {class} function ToInt16(value: string): Int16; overload;
    {class} function ToInt16(value: string; provider: DNIFormatProvider): Int16; overload;
    {class} function ToInt16(value: DNDateTime): Int16; overload;
    {class} function ToUInt16(value: DNObject): UInt16; overload;
    {class} function ToUInt16(value: DNObject; provider: DNIFormatProvider): UInt16; overload;
    {class} function ToUInt16(value: Boolean): UInt16; overload;
    {class} function ToUInt16(value: Char): UInt16; overload;
    {class} function ToUInt16(value: SByte): UInt16; overload;
    {class} function ToUInt16(value: Byte): UInt16; overload;
    {class} function ToUInt16(value: Int16): UInt16; overload;
    {class} function ToUInt16(value: Int32): UInt16; overload;
    {class} function ToUInt16(value: UInt16): UInt16; overload;
    {class} function ToUInt16(value: UInt32): UInt16; overload;
    {class} function ToUInt16(value: Int64): UInt16; overload;
    {class} function ToUInt16(value: UInt64): UInt16; overload;
    {class} function ToUInt16(value: Single): UInt16; overload;
    {class} function ToUInt16(value: Double): UInt16; overload;
    {class} function ToUInt16(value: DNDecimal): UInt16; overload;
    {class} function ToUInt16(value: string): UInt16; overload;
    {class} function ToUInt16(value: string; provider: DNIFormatProvider): UInt16; overload;
    {class} function ToUInt16(value: DNDateTime): UInt16; overload;
    {class} function ToInt32(value: DNObject): Int32; overload;
    {class} function ToInt32(value: DNObject; provider: DNIFormatProvider): Int32; overload;
    {class} function ToInt32(value: Boolean): Int32; overload;
    {class} function ToInt32(value: Char): Int32; overload;
    {class} function ToInt32(value: SByte): Int32; overload;
    {class} function ToInt32(value: Byte): Int32; overload;
    {class} function ToInt32(value: Int16): Int32; overload;
    {class} function ToInt32(value: UInt16): Int32; overload;
    {class} function ToInt32(value: UInt32): Int32; overload;
    {class} function ToInt32(value: Int32): Int32; overload;
    {class} function ToInt32(value: Int64): Int32; overload;
    {class} function ToInt32(value: UInt64): Int32; overload;
    {class} function ToInt32(value: Single): Int32; overload;
    {class} function ToInt32(value: Double): Int32; overload;
    {class} function ToInt32(value: DNDecimal): Int32; overload;
    {class} function ToInt32(value: string): Int32; overload;
    {class} function ToInt32(value: string; provider: DNIFormatProvider): Int32; overload;
    {class} function ToInt32(value: DNDateTime): Int32; overload;
    {class} function ToUInt32(value: DNObject): UInt32; overload;
    {class} function ToUInt32(value: DNObject; provider: DNIFormatProvider): UInt32; overload;
    {class} function ToUInt32(value: Boolean): UInt32; overload;
    {class} function ToUInt32(value: Char): UInt32; overload;
    {class} function ToUInt32(value: SByte): UInt32; overload;
    {class} function ToUInt32(value: Byte): UInt32; overload;
    {class} function ToUInt32(value: Int16): UInt32; overload;
    {class} function ToUInt32(value: UInt16): UInt32; overload;
    {class} function ToUInt32(value: Int32): UInt32; overload;
    {class} function ToUInt32(value: UInt32): UInt32; overload;
    {class} function ToUInt32(value: Int64): UInt32; overload;
    {class} function ToUInt32(value: UInt64): UInt32; overload;
    {class} function ToUInt32(value: Single): UInt32; overload;
    {class} function ToUInt32(value: Double): UInt32; overload;
    {class} function ToUInt32(value: DNDecimal): UInt32; overload;
    {class} function ToUInt32(value: string): UInt32; overload;
    {class} function ToUInt32(value: string; provider: DNIFormatProvider): UInt32; overload;
    {class} function ToUInt32(value: DNDateTime): UInt32; overload;
    {class} function ToInt64(value: DNObject): Int64; overload;
    {class} function ToInt64(value: DNObject; provider: DNIFormatProvider): Int64; overload;
    {class} function ToInt64(value: Boolean): Int64; overload;
    {class} function ToInt64(value: Char): Int64; overload;
    {class} function ToInt64(value: SByte): Int64; overload;
    {class} function ToInt64(value: Byte): Int64; overload;
    {class} function ToInt64(value: Int16): Int64; overload;
    {class} function ToInt64(value: UInt16): Int64; overload;
    {class} function ToInt64(value: Int32): Int64; overload;
    {class} function ToInt64(value: UInt32): Int64; overload;
    {class} function ToInt64(value: UInt64): Int64; overload;
    {class} function ToInt64(value: Int64): Int64; overload;
    {class} function ToInt64(value: Single): Int64; overload;
    {class} function ToInt64(value: Double): Int64; overload;
    {class} function ToInt64(value: DNDecimal): Int64; overload;
    {class} function ToInt64(value: string): Int64; overload;
    {class} function ToInt64(value: string; provider: DNIFormatProvider): Int64; overload;
    {class} function ToInt64(value: DNDateTime): Int64; overload;
    {class} function ToUInt64(value: DNObject): UInt64; overload;
    {class} function ToUInt64(value: DNObject; provider: DNIFormatProvider): UInt64; overload;
    {class} function ToUInt64(value: Boolean): UInt64; overload;
    {class} function ToUInt64(value: Char): UInt64; overload;
    {class} function ToUInt64(value: SByte): UInt64; overload;
    {class} function ToUInt64(value: Byte): UInt64; overload;
    {class} function ToUInt64(value: Int16): UInt64; overload;
    {class} function ToUInt64(value: UInt16): UInt64; overload;
    {class} function ToUInt64(value: Int32): UInt64; overload;
    {class} function ToUInt64(value: UInt32): UInt64; overload;
    {class} function ToUInt64(value: Int64): UInt64; overload;
    {class} function ToUInt64(value: UInt64): UInt64; overload;
    {class} function ToUInt64(value: Single): UInt64; overload;
    {class} function ToUInt64(value: Double): UInt64; overload;
    {class} function ToUInt64(value: DNDecimal): UInt64; overload;
    {class} function ToUInt64(value: string): UInt64; overload;
    {class} function ToUInt64(value: string; provider: DNIFormatProvider): UInt64; overload;
    {class} function ToUInt64(value: DNDateTime): UInt64; overload;
    {class} function ToSingle(value: DNObject): Single; overload;
    {class} function ToSingle(value: DNObject; provider: DNIFormatProvider): Single; overload;
    {class} function ToSingle(value: SByte): Single; overload;
    {class} function ToSingle(value: Byte): Single; overload;
    {class} function ToSingle(value: Char): Single; overload;
    {class} function ToSingle(value: Int16): Single; overload;
    {class} function ToSingle(value: UInt16): Single; overload;
    {class} function ToSingle(value: Int32): Single; overload;
    {class} function ToSingle(value: UInt32): Single; overload;
    {class} function ToSingle(value: Int64): Single; overload;
    {class} function ToSingle(value: UInt64): Single; overload;
    {class} function ToSingle(value: Single): Single; overload;
    {class} function ToSingle(value: Double): Single; overload;
    {class} function ToSingle(value: DNDecimal): Single; overload;
    {class} function ToSingle(value: string): Single; overload;
    {class} function ToSingle(value: string; provider: DNIFormatProvider): Single; overload;
    {class} function ToSingle(value: Boolean): Single; overload;
    {class} function ToSingle(value: DNDateTime): Single; overload;
    {class} function ToDouble(value: DNObject): Double; overload;
    {class} function ToDouble(value: DNObject; provider: DNIFormatProvider): Double; overload;
    {class} function ToDouble(value: SByte): Double; overload;
    {class} function ToDouble(value: Byte): Double; overload;
    {class} function ToDouble(value: Int16): Double; overload;
    {class} function ToDouble(value: Char): Double; overload;
    {class} function ToDouble(value: UInt16): Double; overload;
    {class} function ToDouble(value: Int32): Double; overload;
    {class} function ToDouble(value: UInt32): Double; overload;
    {class} function ToDouble(value: Int64): Double; overload;
    {class} function ToDouble(value: UInt64): Double; overload;
    {class} function ToDouble(value: Single): Double; overload;
    {class} function ToDouble(value: Double): Double; overload;
    {class} function ToDouble(value: DNDecimal): Double; overload;
    {class} function ToDouble(value: string): Double; overload;
    {class} function ToDouble(value: string; provider: DNIFormatProvider): Double; overload;
    {class} function ToDouble(value: Boolean): Double; overload;
    {class} function ToDouble(value: DNDateTime): Double; overload;
    {class} function ToDecimal(value: DNObject): DNDecimal; overload;
    {class} function ToDecimal(value: DNObject; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function ToDecimal(value: SByte): DNDecimal; overload;
    {class} function ToDecimal(value: Byte): DNDecimal; overload;
    {class} function ToDecimal(value: Char): DNDecimal; overload;
    {class} function ToDecimal(value: Int16): DNDecimal; overload;
    {class} function ToDecimal(value: UInt16): DNDecimal; overload;
    {class} function ToDecimal(value: Int32): DNDecimal; overload;
    {class} function ToDecimal(value: UInt32): DNDecimal; overload;
    {class} function ToDecimal(value: Int64): DNDecimal; overload;
    {class} function ToDecimal(value: UInt64): DNDecimal; overload;
    {class} function ToDecimal(value: Single): DNDecimal; overload;
    {class} function ToDecimal(value: Double): DNDecimal; overload;
    {class} function ToDecimal(value: string): DNDecimal; overload;
    {class} function ToDecimal(value: string; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function ToDecimal(value: DNDecimal): DNDecimal; overload;
    {class} function ToDecimal(value: Boolean): DNDecimal; overload;
    {class} function ToDecimal(value: DNDateTime): DNDecimal; overload;
    {class} function ToDateTime(value: DNDateTime): DNDateTime; overload;
    {class} function ToDateTime(value: DNObject): DNDateTime; overload;
    {class} function ToDateTime(value: DNObject; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ToDateTime(value: string): DNDateTime; overload;
    {class} function ToDateTime(value: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ToDateTime(value: SByte): DNDateTime; overload;
    {class} function ToDateTime(value: Byte): DNDateTime; overload;
    {class} function ToDateTime(value: Int16): DNDateTime; overload;
    {class} function ToDateTime(value: UInt16): DNDateTime; overload;
    {class} function ToDateTime(value: Int32): DNDateTime; overload;
    {class} function ToDateTime(value: UInt32): DNDateTime; overload;
    {class} function ToDateTime(value: Int64): DNDateTime; overload;
    {class} function ToDateTime(value: UInt64): DNDateTime; overload;
    {class} function ToDateTime(value: Boolean): DNDateTime; overload;
    {class} function ToDateTime(value: Char): DNDateTime; overload;
    {class} function ToDateTime(value: Single): DNDateTime; overload;
    {class} function ToDateTime(value: Double): DNDateTime; overload;
    {class} function ToDateTime(value: DNDecimal): DNDateTime; overload;
    {class} function ToString(value: DNObject): string; overload;
    {class} function ToString(value: DNObject; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Char): string; overload;
    {class} function ToString(value: Char; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: SByte): string; overload;
    {class} function ToString(value: SByte; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Byte): string; overload;
    {class} function ToString(value: Byte; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int16): string; overload;
    {class} function ToString(value: Int16; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt16): string; overload;
    {class} function ToString(value: UInt16; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int32): string; overload;
    {class} function ToString(value: Int32; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt32): string; overload;
    {class} function ToString(value: UInt32; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int64): string; overload;
    {class} function ToString(value: Int64; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt64): string; overload;
    {class} function ToString(value: UInt64; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Single): string; overload;
    {class} function ToString(value: Single; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(value: Double; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: DNDecimal): string; overload;
    {class} function ToString(value: DNDecimal; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: DNDateTime): string; overload;
    {class} function ToString(value: DNDateTime; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: string): string; overload;
    {class} function ToString(value: string; provider: DNIFormatProvider): string; overload;
    {class} function ToByte(value: string; fromBase: Int32): Byte; overload;
    {class} function ToSByte(value: string; fromBase: Int32): SByte; overload;
    {class} function ToInt16(value: string; fromBase: Int32): Int16; overload;
    {class} function ToUInt16(value: string; fromBase: Int32): UInt16; overload;
    {class} function ToInt32(value: string; fromBase: Int32): Int32; overload;
    {class} function ToUInt32(value: string; fromBase: Int32): UInt32; overload;
    {class} function ToInt64(value: string; fromBase: Int32): Int64; overload;
    {class} function ToUInt64(value: string; fromBase: Int32): UInt64; overload;
    {class} function ToString(value: Byte; toBase: Int32): string; overload;
    {class} function ToString(value: Int16; toBase: Int32): string; overload;
    {class} function ToString(value: Int32; toBase: Int32): string; overload;
    {class} function ToString(value: Int64; toBase: Int32): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32): Int32; overload;
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32; options: DNBase64FormattingOptions): Int32; overload;
    {class} function FromBase64String(s: string): TArray<Byte>;
    {class} function FromBase64CharArray(inArray: TArray<Char>; offset: Int32; length: Int32): TArray<Byte>;
    {class} function ToString(value: Boolean): string; overload;
    {class} function ToString(value: Boolean; provider: DNIFormatProvider): string; overload;

  end;

  [DNTypeName('System.Convert')]
  DNConvert = interface(DNObject)
  ['{5CB28930-956D-3ED0-B569-AC70F15470F9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNConvert = class(TDNGenericImport<DNConvertClass, DNConvert>) end;

  //-------------namespace: System----------------
  DNDBNullClass = interface(DNObjectClass)
  ['{8C4F8BFA-C43A-510E-A070-2CD6528CE57F}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNDBNull;

  { static fields } 

    {class} property Value: DNDBNull read __fakeFieldGet_Value;

  end;

  [DNTypeName('System.DBNull')]
  DNDBNull = interface(DNISerializable)
  ['{8C1A4524-3CEB-3436-B449-CAC456ECAB09}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDBNull = class(TDNGenericImport<DNDBNullClass, DNDBNull>) end;

  //-------------namespace: System----------------
  DNDelegateClass = interface(DNObjectClass)
  ['{7091361B-DD95-5563-9D7B-9AE3E2BFF4E0}']
  { static methods } 

    {class} function Combine(a: DNDelegate; b: DNDelegate): DNDelegate; overload;
    {class} function Combine(delegates: TArray<DNDelegate>): DNDelegate; overload;
    {class} function Remove(source: DNDelegate; value: DNDelegate): DNDelegate;
    {class} function RemoveAll(source: DNDelegate; value: DNDelegate): DNDelegate;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo): DNDelegate; overload;

  end;

  [DNTypeName('System.Delegate')]
  DNDelegate = interface(DNICloneable)
  ['{03CE85F6-37CB-3588-B3DB-D5628BB1335B}']
  { getters & setters } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetInvocationList: TArray<DNDelegate>;
    function Clone: DNObject;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNDelegate = class(TDNGenericImport<DNDelegateClass, DNDelegate>) end;

  //-------------namespace: System----------------
  DNMulticastDelegateClass = interface(DNDelegateClass)
  ['{BAE17A8F-1DCC-505C-91C0-D5C0F64BE7AD}']
  end;

  [DNTypeName('System.MulticastDelegate')]
  DNMulticastDelegate = interface(DNDelegate)
  ['{198FFBDE-A6DB-3CC3-AB15-FBBB7250D624}']
  { getters & setters } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNMulticastDelegate = class(TDNGenericImport<DNMulticastDelegateClass, DNMulticastDelegate>) end;

  //-------------namespace: System.Deployment.Internal----------------
  DNInternalActivationContextHelperClass = interface(DNObjectClass)
  ['{714AE31A-C7D6-55FC-BAA7-9167FF3B61AE}']
  { static methods } 

    {class} function GetActivationContextData(appInfo: DNActivationContext): DNObject;
    {class} function GetApplicationComponentManifest(appInfo: DNActivationContext): DNObject;
    {class} function GetDeploymentComponentManifest(appInfo: DNActivationContext): DNObject;
    {class} procedure PrepareForExecution(appInfo: DNActivationContext);
    {class} function IsFirstRun(appInfo: DNActivationContext): Boolean;
    {class} function GetApplicationManifestBytes(appInfo: DNActivationContext): TArray<Byte>;
    {class} function GetDeploymentManifestBytes(appInfo: DNActivationContext): TArray<Byte>;

  end;

  [DNTypeName('System.Deployment.Internal.InternalActivationContextHelper')]
  DNInternalActivationContextHelper = interface(DNObject)
  ['{D1E7BF57-54F0-3BC3-B1F8-CAD4C98F1448}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalActivationContextHelper = class(TDNGenericImport<DNInternalActivationContextHelperClass, DNInternalActivationContextHelper>) end;

  //-------------namespace: System.Deployment.Internal----------------
  DNInternalApplicationIdentityHelperClass = interface(DNObjectClass)
  ['{35B2FB2C-806D-53AF-BC3C-0FAE41A9046C}']
  { static methods } 

    {class} function GetInternalAppId(id: DNApplicationIdentity): DNObject;

  end;

  [DNTypeName('System.Deployment.Internal.InternalApplicationIdentityHelper')]
  DNInternalApplicationIdentityHelper = interface(DNObject)
  ['{6B2A2D2F-BB61-367E-BF8C-25E80F5612B8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalApplicationIdentityHelper = class(TDNGenericImport<DNInternalApplicationIdentityHelperClass, DNInternalApplicationIdentityHelper>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClass = interface(DNObjectClass)
  ['{8F912F33-5208-585F-8D86-8DF0B751D847}']
  { static methods } 

    {class} procedure Assume(condition: Boolean); overload;
    {class} procedure Assume(condition: Boolean; userMessage: string); overload;
    {class} procedure Assert(condition: Boolean); overload;
    {class} procedure Assert(condition: Boolean; userMessage: string); overload;
    {class} function ForAll(fromInclusive: Int32; toExclusive: Int32; predicate: DNPredicate<Int32>): Boolean; overload;
    {class} function Exists(fromInclusive: Int32; toExclusive: Int32; predicate: DNPredicate<Int32>): Boolean; overload;
    {class} procedure EndContractBlock;
    {class} procedure &Requires(condition: Boolean); overload;
    {class} procedure &Requires(condition: Boolean; userMessage: string); overload;
    {class} procedure Ensures(condition: Boolean); overload;
    {class} procedure Ensures(condition: Boolean; userMessage: string); overload;
    {class} procedure Invariant(condition: Boolean); overload;
    {class} procedure Invariant(condition: Boolean; userMessage: string); overload;

  end;

  [DNTypeName('System.Diagnostics.Contracts.Contract')]
  DNContract = interface(DNObject)
  ['{10300CE0-8000-3472-B685-8A378A1829AF}']
  { events } 

    {class} procedure add_ContractFailed(value: DNEventHandler<DNContractFailedEventArgs>);
    {class} procedure remove_ContractFailed(value: DNEventHandler<DNContractFailedEventArgs>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNContract = class(TDNGenericImport<DNContractClass, DNContract>) end;

  //-------------namespace: System.Diagnostics.Contracts.Internal----------------
  DNInternal_ContractHelperClass = interface(DNObjectClass)
  ['{9938EDE7-1023-552C-B364-646FA1A39A69}']
  { static methods } 

    {class} procedure TriggerFailure(kind: DNContractFailureKind; displayMessage: string; userMessage: string; conditionText: string; innerException: DNException);
    {class} function RaiseContractFailedEvent(failureKind: DNContractFailureKind; userMessage: string; conditionText: string; innerException: DNException): string;

  end;

  [DNTypeName('System.Diagnostics.Contracts.Internal.ContractHelper')]
  DNInternal_ContractHelper = interface(DNObject)
  ['{767074F1-D2DF-3048-8A10-581678809A80}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternal_ContractHelper = class(TDNGenericImport<DNInternal_ContractHelperClass, DNInternal_ContractHelper>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerClass = interface(DNObjectClass)
  ['{0C80FBAA-2576-5518-87CE-A58A6ECFF697}']
  { static getter & setter } 

    {class} function get_IsAttached: Boolean;

  { constructors } 

    {class} function init: DNDebugger;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultCategory: string;

  { static fields } 

    {class} property DefaultCategory: string read __fakeFieldGet_DefaultCategory;

  { static methods } 

    {class} procedure NotifyOfCrossThreadDependency;
    {class} function IsLogging: Boolean;
    {class} procedure Break;
    {class} function Launch: Boolean;
    {class} procedure Log(level: Int32; category: string; message: string);

  { static propertys } 

    {class} property IsAttached: Boolean read get_IsAttached;
  end;

  [DNTypeName('System.Diagnostics.Debugger')]
  DNDebugger = interface(DNObject)
  ['{91F672A3-6B82-3E04-B2D7-BAC5D6676609}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDebugger = class(TDNGenericImport<DNDebuggerClass, DNDebugger>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStackFrameClass = interface(DNObjectClass)
  ['{C1D2FF3E-CED1-584F-A4A0-329794B8C2F8}']
  { constructors } 

    {class} function init: DNStackFrame; overload;
    {class} function init(fNeedFileInfo: Boolean): DNStackFrame; overload;
    {class} function init(skipFrames: Int32): DNStackFrame; overload;
    {class} function init(skipFrames: Int32; fNeedFileInfo: Boolean): DNStackFrame; overload;
    {class} function init(fileName: string; lineNumber: Int32): DNStackFrame; overload;
    {class} function init(fileName: string; lineNumber: Int32; colNumber: Int32): DNStackFrame; overload;

  end;

  [DNTypeName('System.Diagnostics.StackFrame')]
  DNStackFrame = interface(DNObject)
  ['{14910622-09D4-3B4A-8C1E-9991DBDCC553}']
  { methods } 

    function GetMethod: DNMethodBase;
    function GetNativeOffset: Int32;
    function GetILOffset: Int32;
    function GetFileName: string;
    function GetFileLineNumber: Int32;
    function GetFileColumnNumber: Int32;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNStackFrame = class(TDNGenericImport<DNStackFrameClass, DNStackFrame>)
  public const
   OFFSET_UNKNOWN = -1;
  end;

  //-------------namespace: System.Diagnostics----------------
  DNStackTraceClass = interface(DNObjectClass)
  ['{5D90B54E-3E58-5998-A7CB-03EB3C6900BC}']
  { constructors } 

    {class} function init: DNStackTrace; overload;
    {class} function init(fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(skipFrames: Int32): DNStackTrace; overload;
    {class} function init(skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(e: DNException): DNStackTrace; overload;
    {class} function init(e: DNException; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(e: DNException; skipFrames: Int32): DNStackTrace; overload;
    {class} function init(e: DNException; skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(frame: DNStackFrame): DNStackTrace; overload;
    {class} function init(targetThread: DNThread; needFileInfo: Boolean): DNStackTrace; overload;

  end;

  [DNTypeName('System.Diagnostics.StackTrace')]
  DNStackTrace = interface(DNObject)
  ['{405C2D81-315B-3CB0-8442-EF5A38D4C3B8}']
  { getters & setters } 

    function get_FrameCount: Int32;

  { methods } 

    function GetFrame(index: Int32): DNStackFrame;
    function GetFrames: TArray<DNStackFrame>;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property FrameCount: Int32 read get_FrameCount;
  end;

  TDNStackTrace = class(TDNGenericImport<DNStackTraceClass, DNStackTrace>)
  public const
   METHODS_TO_SKIP = 0;
  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymDocumentTypeClass = interface(DNObjectClass)
  ['{959AAA45-6EFD-503A-8A42-35814CB023D9}']
  { constructors } 

    {class} function init: DNSymDocumentType;

  { static fields getter & setter } 

   function __fakeFieldGet_Text: DNGuid;

  { static fields } 

    {class} property Text: DNGuid read __fakeFieldGet_Text;

  end;

  [DNTypeName('System.Diagnostics.SymbolStore.SymDocumentType')]
  DNSymDocumentType = interface(DNObject)
  ['{40AE2088-CE00-33AD-9320-5D201CB46FC9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSymDocumentType = class(TDNGenericImport<DNSymDocumentTypeClass, DNSymDocumentType>) end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymLanguageTypeClass = interface(DNObjectClass)
  ['{AD83CBA3-E125-579A-A0D8-2F2471998699}']
  { constructors } 

    {class} function init: DNSymLanguageType;

  { static fields getter & setter } 

   function __fakeFieldGet_C: DNGuid;
   function __fakeFieldGet_CPlusPlus: DNGuid;
   function __fakeFieldGet_CSharp: DNGuid;
   function __fakeFieldGet_Basic: DNGuid;
   function __fakeFieldGet_Java: DNGuid;
   function __fakeFieldGet_Cobol: DNGuid;
   function __fakeFieldGet_Pascal: DNGuid;
   function __fakeFieldGet_ILAssembly: DNGuid;
   function __fakeFieldGet_JScript: DNGuid;
   function __fakeFieldGet_SMC: DNGuid;
   function __fakeFieldGet_MCPlusPlus: DNGuid;

  { static fields } 

    {class} property C: DNGuid read __fakeFieldGet_C;
    {class} property CPlusPlus: DNGuid read __fakeFieldGet_CPlusPlus;
    {class} property CSharp: DNGuid read __fakeFieldGet_CSharp;
    {class} property Basic: DNGuid read __fakeFieldGet_Basic;
    {class} property Java: DNGuid read __fakeFieldGet_Java;
    {class} property Cobol: DNGuid read __fakeFieldGet_Cobol;
    {class} property &Pascal: DNGuid read __fakeFieldGet_Pascal;
    {class} property ILAssembly: DNGuid read __fakeFieldGet_ILAssembly;
    {class} property JScript: DNGuid read __fakeFieldGet_JScript;
    {class} property SMC: DNGuid read __fakeFieldGet_SMC;
    {class} property MCPlusPlus: DNGuid read __fakeFieldGet_MCPlusPlus;

  end;

  [DNTypeName('System.Diagnostics.SymbolStore.SymLanguageType')]
  DNSymLanguageType = interface(DNObject)
  ['{5A18D43E-115B-3B8B-8245-9A06B204B717}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSymLanguageType = class(TDNGenericImport<DNSymLanguageTypeClass, DNSymLanguageType>) end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymLanguageVendorClass = interface(DNObjectClass)
  ['{74B24D08-9471-543E-8519-F2075B8AFF07}']
  { constructors } 

    {class} function init: DNSymLanguageVendor;

  { static fields getter & setter } 

   function __fakeFieldGet_Microsoft: DNGuid;

  { static fields } 

    {class} property Microsoft: DNGuid read __fakeFieldGet_Microsoft;

  end;

  [DNTypeName('System.Diagnostics.SymbolStore.SymLanguageVendor')]
  DNSymLanguageVendor = interface(DNObject)
  ['{DFD888A7-A6B0-3B1B-985E-4CDAB0E4C17D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSymLanguageVendor = class(TDNGenericImport<DNSymLanguageVendorClass, DNSymLanguageVendor>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventListenerClass = interface(DNObjectClass)
  ['{0CA902BF-9B44-52A9-A133-65418B5C43C6}']
  { constructors } 

    {class} function init: DNEventListener;

  { static methods } 

    {class} function EventSourceIndex(eventSource: DNEventSource): Int32;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventListener')]
  DNEventListener = interface(DNIDisposable)
  ['{17F17032-DA5A-3EDC-8CB6-4895F2E25BB7}']
  { events } 

    procedure add_EventSourceCreated(value: DNEventHandler<DNEventSourceCreatedEventArgs>);
    procedure remove_EventSourceCreated(value: DNEventHandler<DNEventSourceCreatedEventArgs>);
    procedure add_EventWritten(value: DNEventHandler<DNEventWrittenEventArgs>);
    procedure remove_EventWritten(value: DNEventHandler<DNEventWrittenEventArgs>);

  { methods } 

    procedure Dispose;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel); overload;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords); overload;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords; arguments: DNIDictionary<string, string>); overload;
    procedure DisableEvents(eventSource: DNEventSource);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEventListener = class(TDNGenericImport<DNEventListenerClass, DNEventListener>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceClass = interface(DNObjectClass)
  ['{7B8E7A64-34DF-5E3E-BDA1-C71431BDA88F}']
  { static getter & setter } 

    {class} function get_CurrentThreadActivityId: DNGuid;

  { constructors } 

    {class} function init(eventSourceName: string): DNEventSource; overload;
    {class} function init(eventSourceName: string; config: DNEventSourceSettings): DNEventSource; overload;
    {class} function init(eventSourceName: string; config: DNEventSourceSettings; traits: TArray<string>): DNEventSource; overload;

  { static methods } 

    {class} function GetGuid(eventSourceType: DNType): DNGuid;
    {class} function GetName(eventSourceType: DNType): string;
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string): string; overload;
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string; flags: DNEventManifestOptions): string; overload;
    {class} function GetSources: DNIEnumerable<DNEventSource>;
    {class} procedure SendCommand(eventSource: DNEventSource; command: DNEventCommand; commandArguments: DNIDictionary<string, string>);
    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid); overload;
    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid; out oldActivityThatWillContinue: DNGuid); overload;

  { static propertys } 

    {class} property CurrentThreadActivityId: DNGuid read get_CurrentThreadActivityId;
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSource')]
  DNEventSource = interface(DNIDisposable)
  ['{318D6207-7490-3E8D-A16B-10DE0F4F77EA}']
  { getters & setters } 

    function get_Name: string;
    function get_Guid: DNGuid;
    function get_Settings: DNEventSourceSettings;
    function get_ConstructionException: DNException;

  { events } 

    procedure add_EventCommandExecuted(value: DNEventHandler<DNEventCommandEventArgs>);
    procedure remove_EventCommandExecuted(value: DNEventHandler<DNEventCommandEventArgs>);

  { methods } 

    function IsEnabled: Boolean; overload;
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords): Boolean; overload;
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords; channel: DNEventChannel): Boolean; overload;
    function GetTrait(key: string): string;
    procedure Dispose;
    procedure Write(eventName: string); overload;
    procedure Write(eventName: string; options: DNEventSourceOptions); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Guid: DNGuid read get_Guid;
    property Settings: DNEventSourceSettings read get_Settings;
    property ConstructionException: DNException read get_ConstructionException;
  end;

  TDNEventSource = class(TDNGenericImport<DNEventSourceClass, DNEventSource>) end;

  //-------------namespace: System----------------
  DNEnvironmentClass = interface(DNObjectClass)
  ['{C6417B5A-3327-5FEA-A9BF-7F5B2C1445FF}']
  { static getter & setter } 

    {class} function get_TickCount: Int32;
    {class} function get_ExitCode: Int32;
    {class} procedure set_ExitCode(value: Int32);
    {class} function get_CommandLine: string;
    {class} function get_CurrentDirectory: string;
    {class} procedure set_CurrentDirectory(value: string);
    {class} function get_SystemDirectory: string;
    {class} function get_MachineName: string;
    {class} function get_ProcessorCount: Int32;
    {class} function get_SystemPageSize: Int32;
    {class} function get_NewLine: string;
    {class} function get_Version: DNVersion;
    {class} function get_WorkingSet: Int64;
    {class} function get_OSVersion: DNOperatingSystem;
    {class} function get_StackTrace: string;
    {class} function get_Is64BitProcess: Boolean;
    {class} function get_Is64BitOperatingSystem: Boolean;
    {class} function get_HasShutdownStarted: Boolean;
    {class} function get_UserName: string;
    {class} function get_UserInteractive: Boolean;
    {class} function get_UserDomainName: string;
    {class} function get_CurrentManagedThreadId: Int32;

  { static methods } 

    {class} procedure &Exit(exitCode: Int32);
    {class} function GetEnvironmentVariable(variable: string): string; overload;
    {class} function GetEnvironmentVariables: DNIDictionary; overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string); overload;
    {class} function GetLogicalDrives: TArray<string>;
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder): string; overload;
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder; option: DNEnvironment_SpecialFolderOption): string; overload;
    {class} procedure FailFast(message: string); overload;
    {class} procedure FailFast(message: string; exception: DNException); overload;
    {class} function ExpandEnvironmentVariables(name: string): string;
    {class} function GetEnvironmentVariables(target: DNEnvironmentVariableTarget): DNIDictionary; overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string; target: DNEnvironmentVariableTarget); overload;
    {class} function GetCommandLineArgs: TArray<string>;
    {class} function GetEnvironmentVariable(variable: string; target: DNEnvironmentVariableTarget): string; overload;

  { static propertys } 

    {class} property TickCount: Int32 read get_TickCount;
    {class} property ExitCode: Int32 read get_ExitCode write set_ExitCode;
    {class} property CommandLine: string read get_CommandLine;
    {class} property CurrentDirectory: string read get_CurrentDirectory write set_CurrentDirectory;
    {class} property SystemDirectory: string read get_SystemDirectory;
    {class} property MachineName: string read get_MachineName;
    {class} property ProcessorCount: Int32 read get_ProcessorCount;
    {class} property SystemPageSize: Int32 read get_SystemPageSize;
    {class} property NewLine: string read get_NewLine;
    {class} property Version: DNVersion read get_Version;
    {class} property WorkingSet: Int64 read get_WorkingSet;
    {class} property OSVersion: DNOperatingSystem read get_OSVersion;
    {class} property StackTrace: string read get_StackTrace;
    {class} property Is64BitProcess: Boolean read get_Is64BitProcess;
    {class} property Is64BitOperatingSystem: Boolean read get_Is64BitOperatingSystem;
    {class} property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    {class} property UserName: string read get_UserName;
    {class} property UserInteractive: Boolean read get_UserInteractive;
    {class} property UserDomainName: string read get_UserDomainName;
    {class} property CurrentManagedThreadId: Int32 read get_CurrentManagedThreadId;
  end;

  [DNTypeName('System.Environment')]
  DNEnvironment = interface(DNObject)
  ['{DF81B4FF-7226-30FA-84DF-80795BA1A642}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEnvironment = class(TDNGenericImport<DNEnvironmentClass, DNEnvironment>) end;

  //-------------namespace: System----------------
  DNEventArgsClass = interface(DNObjectClass)
  ['{45CD53D9-E6AD-5563-B08E-4730DE39A75A}']
  { constructors } 

    {class} function init: DNEventArgs;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventArgs;

  { static fields } 

    {class} property Empty: DNEventArgs read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.EventArgs')]
  DNEventArgs = interface(DNObject)
  ['{3FB717AF-9D21-3016-871A-DF817ABDDD51}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEventArgs = class(TDNGenericImport<DNEventArgsClass, DNEventArgs>) end;

  //-------------namespace: System----------------
  DNAssemblyLoadEventArgsClass = interface(DNEventArgsClass)
  ['{BFAAE52E-AEE3-5183-B2DF-29FEB9027B21}']
  { constructors } 

    {class} function init(loadedAssembly: DNAssembly): DNAssemblyLoadEventArgs;

  end;

  [DNTypeName('System.AssemblyLoadEventArgs')]
  DNAssemblyLoadEventArgs = interface(DNEventArgs)
  ['{81548590-3849-32A8-AA6F-F2B3137CF4A3}']
  { getters & setters } 

    function get_LoadedAssembly: DNAssembly;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property LoadedAssembly: DNAssembly read get_LoadedAssembly;
  end;

  TDNAssemblyLoadEventArgs = class(TDNGenericImport<DNAssemblyLoadEventArgsClass, DNAssemblyLoadEventArgs>) end;

  //-------------namespace: System----------------
  DNConsoleCancelEventArgsClass = interface(DNEventArgsClass)
  ['{4E9FDBFF-1E85-5D7B-BD9F-83E593F1B20F}']
  end;

  [DNTypeName('System.ConsoleCancelEventArgs')]
  DNConsoleCancelEventArgs = interface(DNEventArgs)
  ['{E444D8F6-90C6-3C27-8248-A3F0970BC439}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_SpecialKey: DNConsoleSpecialKey;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Cancel: Boolean read get_Cancel write set_Cancel;
    property SpecialKey: DNConsoleSpecialKey read get_SpecialKey;
  end;

  TDNConsoleCancelEventArgs = class(TDNGenericImport<DNConsoleCancelEventArgsClass, DNConsoleCancelEventArgs>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractFailedEventArgsClass = interface(DNEventArgsClass)
  ['{9F122B2B-27D2-55B6-9844-30E92C85C7A5}']
  { constructors } 

    {class} function init(failureKind: DNContractFailureKind; message: string; condition: string; originalException: DNException): DNContractFailedEventArgs;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractFailedEventArgs')]
  DNContractFailedEventArgs = interface(DNEventArgs)
  ['{F997CD55-C3B7-3A92-8398-27E3F3BC9C70}']
  { getters & setters } 

    function get_Message: string;
    function get_Condition: string;
    function get_FailureKind: DNContractFailureKind;
    function get_OriginalException: DNException;
    function get_Handled: Boolean;
    function get_Unwind: Boolean;

  { methods } 

    procedure SetHandled;
    procedure SetUnwind;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Message: string read get_Message;
    property Condition: string read get_Condition;
    property FailureKind: DNContractFailureKind read get_FailureKind;
    property OriginalException: DNException read get_OriginalException;
    property Handled: Boolean read get_Handled;
    property Unwind: Boolean read get_Unwind;
  end;

  TDNContractFailedEventArgs = class(TDNGenericImport<DNContractFailedEventArgsClass, DNContractFailedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventCommandEventArgsClass = interface(DNEventArgsClass)
  ['{F820C74B-1CD1-50EE-B847-6516ED76BE03}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventCommandEventArgs')]
  DNEventCommandEventArgs = interface(DNEventArgs)
  ['{0E211CC0-E232-3BB5-97F5-9065EF4E199B}']
  { getters & setters } 

    function get_Command: DNEventCommand;
    function get_Arguments: DNIDictionary<string, string>;

  { methods } 

    function EnableEvent(eventId: Int32): Boolean;
    function DisableEvent(eventId: Int32): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Command: DNEventCommand read get_Command;
    property Arguments: DNIDictionary<string, string> read get_Arguments;
  end;

  TDNEventCommandEventArgs = class(TDNGenericImport<DNEventCommandEventArgsClass, DNEventCommandEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceCreatedEventArgsClass = interface(DNEventArgsClass)
  ['{48F35746-2A00-59E9-85F4-6510E04B0ADD}']
  { constructors } 

    {class} function init: DNEventSourceCreatedEventArgs;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceCreatedEventArgs')]
  DNEventSourceCreatedEventArgs = interface(DNEventArgs)
  ['{1B07040C-7ADE-32B0-B009-4132C14D7B34}']
  { getters & setters } 

    function get_EventSource: DNEventSource;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNEventSourceCreatedEventArgs = class(TDNGenericImport<DNEventSourceCreatedEventArgsClass, DNEventSourceCreatedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventWrittenEventArgsClass = interface(DNEventArgsClass)
  ['{7E2CB829-EF7D-5CF4-AC41-FDC7267EC17F}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventWrittenEventArgs')]
  DNEventWrittenEventArgs = interface(DNEventArgs)
  ['{F96AC8CE-5F35-35FC-9975-43DCBDF063A2}']
  { getters & setters } 

    function get_EventName: string;
    function get_EventId: Int32;
    function get_ActivityId: DNGuid;
    function get_RelatedActivityId: DNGuid;
    function get_Payload: DNReadOnlyCollection<DNObject>;
    function get_PayloadNames: DNReadOnlyCollection<string>;
    function get_EventSource: DNEventSource;
    function get_Keywords: DNEventKeywords;
    function get_Opcode: DNEventOpcode;
    function get_Task: DNEventTask;
    function get_Tags: DNEventTags;
    function get_Message: string;
    function get_Channel: DNEventChannel;
    function get_Version: Byte;
    function get_Level: DNEventLevel;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EventName: string read get_EventName;
    property EventId: Int32 read get_EventId;
    property ActivityId: DNGuid read get_ActivityId;
    property RelatedActivityId: DNGuid read get_RelatedActivityId;
    property Payload: DNReadOnlyCollection<DNObject> read get_Payload;
    property PayloadNames: DNReadOnlyCollection<string> read get_PayloadNames;
    property EventSource: DNEventSource read get_EventSource;
    property Keywords: DNEventKeywords read get_Keywords;
    property Opcode: DNEventOpcode read get_Opcode;
    property Task: DNEventTask read get_Task;
    property Tags: DNEventTags read get_Tags;
    property Message: string read get_Message;
    property Channel: DNEventChannel read get_Channel;
    property Version: Byte read get_Version;
    property Level: DNEventLevel read get_Level;
  end;

  TDNEventWrittenEventArgs = class(TDNGenericImport<DNEventWrittenEventArgsClass, DNEventWrittenEventArgs>) end;

  //-------------namespace: System----------------
  DNResolveEventArgsClass = interface(DNEventArgsClass)
  ['{4601B1A7-F296-59B2-8EC0-5E73925FA704}']
  { constructors } 

    {class} function init(name: string): DNResolveEventArgs; overload;
    {class} function init(name: string; requestingAssembly: DNAssembly): DNResolveEventArgs; overload;

  end;

  [DNTypeName('System.ResolveEventArgs')]
  DNResolveEventArgs = interface(DNEventArgs)
  ['{1C1D34A9-3F45-3B51-A9AF-0354975BF8CC}']
  { getters & setters } 

    function get_Name: string;
    function get_RequestingAssembly: DNAssembly;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property RequestingAssembly: DNAssembly read get_RequestingAssembly;
  end;

  TDNResolveEventArgs = class(TDNGenericImport<DNResolveEventArgsClass, DNResolveEventArgs>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNFirstChanceExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{D48D2645-86F1-5579-96BD-E4608571050C}']
  { constructors } 

    {class} function init(exception: DNException): DNFirstChanceExceptionEventArgs;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs')]
  DNFirstChanceExceptionEventArgs = interface(DNEventArgs)
  ['{14B3E9AC-A33D-32DA-B476-AE79B42417CC}']
  { getters & setters } 

    function get_Exception: DNException;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Exception: DNException read get_Exception;
  end;

  TDNFirstChanceExceptionEventArgs = class(TDNGenericImport<DNFirstChanceExceptionEventArgsClass, DNFirstChanceExceptionEventArgs>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNDesignerNamespaceResolveEventArgsClass = interface(DNEventArgsClass)
  ['{E8BB99E5-991C-5003-B342-4466DC295DD2}']
  { constructors } 

    {class} function init(namespaceName: string): DNDesignerNamespaceResolveEventArgs;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.DesignerNamespaceResolveEventArgs')]
  DNDesignerNamespaceResolveEventArgs = interface(DNEventArgs)
  ['{DD01A789-F423-3A77-9685-81858AF62D21}']
  { getters & setters } 

    function get_NamespaceName: string;
    function get_ResolvedAssemblyFiles: DNCollection<string>;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property NamespaceName: string read get_NamespaceName;
    property ResolvedAssemblyFiles: DNCollection<string> read get_ResolvedAssemblyFiles;
  end;

  TDNDesignerNamespaceResolveEventArgs = class(TDNGenericImport<DNDesignerNamespaceResolveEventArgsClass, DNDesignerNamespaceResolveEventArgs>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNNamespaceResolveEventArgsClass = interface(DNEventArgsClass)
  ['{0176E252-5027-545A-A447-4EB1D04012C6}']
  { constructors } 

    {class} function init(namespaceName: string; requestingAssembly: DNAssembly): DNNamespaceResolveEventArgs;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.NamespaceResolveEventArgs')]
  DNNamespaceResolveEventArgs = interface(DNEventArgs)
  ['{C22C5011-D04F-339E-B6BC-267696765024}']
  { getters & setters } 

    function get_NamespaceName: string;
    function get_RequestingAssembly: DNAssembly;
    function get_ResolvedAssemblies: DNCollection<DNAssembly>;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property NamespaceName: string read get_NamespaceName;
    property RequestingAssembly: DNAssembly read get_RequestingAssembly;
    property ResolvedAssemblies: DNCollection<DNAssembly> read get_ResolvedAssemblies;
  end;

  TDNNamespaceResolveEventArgs = class(TDNGenericImport<DNNamespaceResolveEventArgsClass, DNNamespaceResolveEventArgs>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSafeSerializationEventArgsClass = interface(DNEventArgsClass)
  ['{94AC75FB-8843-59E0-8F2C-2509CF2C8E33}']
  end;

  [DNTypeName('System.Runtime.Serialization.SafeSerializationEventArgs')]
  DNSafeSerializationEventArgs = interface(DNEventArgs)
  ['{DE9620B1-BFD5-3CE7-8F86-CF01F41357DB}']
  { getters & setters } 

    function get_StreamingContext: DNStreamingContext;

  { methods } 

    procedure AddSerializedState(serializedState: DNISafeSerializationData);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StreamingContext: DNStreamingContext read get_StreamingContext;
  end;

  TDNSafeSerializationEventArgs = class(TDNGenericImport<DNSafeSerializationEventArgsClass, DNSafeSerializationEventArgs>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNUnobservedTaskExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{6BAB2A71-863F-547F-B301-4A6C89CFC47C}']
  { constructors } 

    {class} function init(exception: DNAggregateException): DNUnobservedTaskExceptionEventArgs;

  end;

  [DNTypeName('System.Threading.Tasks.UnobservedTaskExceptionEventArgs')]
  DNUnobservedTaskExceptionEventArgs = interface(DNEventArgs)
  ['{E8D922E3-4CDB-3266-9DCC-FB4E17E166C6}']
  { getters & setters } 

    function get_Observed: Boolean;
    function get_Exception: DNAggregateException;

  { methods } 

    procedure SetObserved;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Observed: Boolean read get_Observed;
    property Exception: DNAggregateException read get_Exception;
  end;

  TDNUnobservedTaskExceptionEventArgs = class(TDNGenericImport<DNUnobservedTaskExceptionEventArgsClass, DNUnobservedTaskExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNUnhandledExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{CE36C50F-0330-557D-95D2-93BF81DE1919}']
  { constructors } 

    {class} function init(exception: DNObject; isTerminating: Boolean): DNUnhandledExceptionEventArgs;

  end;

  [DNTypeName('System.UnhandledExceptionEventArgs')]
  DNUnhandledExceptionEventArgs = interface(DNEventArgs)
  ['{B55DAE2E-C8E8-3C48-B404-D991979A9D9D}']
  { getters & setters } 

    function get_ExceptionObject: DNObject;
    function get_IsTerminating: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ExceptionObject: DNObject read get_ExceptionObject;
    property IsTerminating: Boolean read get_IsTerminating;
  end;

  TDNUnhandledExceptionEventArgs = class(TDNGenericImport<DNUnhandledExceptionEventArgsClass, DNUnhandledExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNExceptionClass = interface(DNObjectClass)
  ['{B4EB7B4E-D92B-56D3-94A9-3748230D13FD}']
  { constructors } 

    {class} function init: DNException; overload;
    {class} function init(message: string): DNException; overload;
    {class} function init(message: string; innerException: DNException): DNException; overload;

  end;

  [DNTypeName('System.Exception')]
  DNException = interface(DNISerializable)
  ['{A1C0A095-DF97-3441-BFC1-C9F194E494DB}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNException = class(TDNGenericImport<DNExceptionClass, DNException>) end;

  //-------------namespace: System----------------
  DNAggregateExceptionClass = interface(DNExceptionClass)
  ['{8BA145A9-ED32-5936-8102-4622C86E4BC5}']
  { constructors } 

    {class} function init: DNAggregateException; overload;
    {class} function init(message: string): DNAggregateException; overload;
    {class} function init(message: string; innerException: DNException): DNAggregateException; overload;
    {class} function init(innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    {class} function init(innerExceptions: TArray<DNException>): DNAggregateException; overload;
    {class} function init(message: string; innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    {class} function init(message: string; innerExceptions: TArray<DNException>): DNAggregateException; overload;

  end;

  [DNTypeName('System.AggregateException')]
  DNAggregateException = interface(DNException)
  ['{AA4EDB24-5ABA-3706-9832-AFC39E01F712}']
  { getters & setters } 

    function get_InnerExceptions: DNReadOnlyCollection<DNException>;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    procedure Handle(predicate: DNFunc<DNException, Boolean>);
    function Flatten: DNAggregateException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property InnerExceptions: DNReadOnlyCollection<DNException> read get_InnerExceptions;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAggregateException = class(TDNGenericImport<DNAggregateExceptionClass, DNAggregateException>) end;

  //-------------namespace: System----------------
  DNApplicationExceptionClass = interface(DNExceptionClass)
  ['{9C2472D6-391F-56B8-A354-DC56E4149933}']
  { constructors } 

    {class} function init: DNApplicationException; overload;
    {class} function init(message: string): DNApplicationException; overload;
    {class} function init(message: string; innerException: DNException): DNApplicationException; overload;

  end;

  [DNTypeName('System.ApplicationException')]
  DNApplicationException = interface(DNException)
  ['{682D63B8-1692-31BE-88CD-5CB1F79EDB7B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNApplicationException = class(TDNGenericImport<DNApplicationExceptionClass, DNApplicationException>) end;

  //-------------namespace: System.Reflection----------------
  DNInvalidFilterCriteriaExceptionClass = interface(DNApplicationExceptionClass)
  ['{5DF5E425-0649-51C2-B6A0-B7C6A234E29F}']
  { constructors } 

    {class} function init: DNInvalidFilterCriteriaException; overload;
    {class} function init(message: string): DNInvalidFilterCriteriaException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidFilterCriteriaException; overload;

  end;

  [DNTypeName('System.Reflection.InvalidFilterCriteriaException')]
  DNInvalidFilterCriteriaException = interface(DNApplicationException)
  ['{7B938A6F-77BF-351C-A712-69483C91115D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidFilterCriteriaException = class(TDNGenericImport<DNInvalidFilterCriteriaExceptionClass, DNInvalidFilterCriteriaException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetExceptionClass = interface(DNApplicationExceptionClass)
  ['{1AC8B34B-25E3-54BA-8F97-ED8850F17AFE}']
  { constructors } 

    {class} function init: DNTargetException; overload;
    {class} function init(message: string): DNTargetException; overload;
    {class} function init(message: string; inner: DNException): DNTargetException; overload;

  end;

  [DNTypeName('System.Reflection.TargetException')]
  DNTargetException = interface(DNApplicationException)
  ['{0D23F8B4-F2A6-3EFF-9D37-BDF79AC6B440}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetException = class(TDNGenericImport<DNTargetExceptionClass, DNTargetException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetInvocationExceptionClass = interface(DNApplicationExceptionClass)
  ['{881D4A29-05DC-5082-8C35-48FFCD3FA133}']
  { constructors } 

    {class} function init(inner: DNException): DNTargetInvocationException; overload;
    {class} function init(message: string; inner: DNException): DNTargetInvocationException; overload;

  end;

  [DNTypeName('System.Reflection.TargetInvocationException')]
  DNTargetInvocationException = interface(DNApplicationException)
  ['{03D016E3-CAE1-3068-880E-AF8D08D517F0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetInvocationException = class(TDNGenericImport<DNTargetInvocationExceptionClass, DNTargetInvocationException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetParameterCountExceptionClass = interface(DNApplicationExceptionClass)
  ['{504BA9D1-9016-541A-A36E-8938EA92B814}']
  { constructors } 

    {class} function init: DNTargetParameterCountException; overload;
    {class} function init(message: string): DNTargetParameterCountException; overload;
    {class} function init(message: string; inner: DNException): DNTargetParameterCountException; overload;

  end;

  [DNTypeName('System.Reflection.TargetParameterCountException')]
  DNTargetParameterCountException = interface(DNApplicationException)
  ['{DA317BE2-1A0D-37B3-83F2-A0F32787FC67}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetParameterCountException = class(TDNGenericImport<DNTargetParameterCountExceptionClass, DNTargetParameterCountException>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleCannotBeOpenedExceptionClass = interface(DNApplicationExceptionClass)
  ['{232CDD89-7361-5394-80EE-060C3C689820}']
  { constructors } 

    {class} function init: DNWaitHandleCannotBeOpenedException; overload;
    {class} function init(message: string): DNWaitHandleCannotBeOpenedException; overload;
    {class} function init(message: string; innerException: DNException): DNWaitHandleCannotBeOpenedException; overload;

  end;

  [DNTypeName('System.Threading.WaitHandleCannotBeOpenedException')]
  DNWaitHandleCannotBeOpenedException = interface(DNApplicationException)
  ['{D4AC0E05-5763-310F-BF35-8B2BB3B4E593}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNWaitHandleCannotBeOpenedException = class(TDNGenericImport<DNWaitHandleCannotBeOpenedExceptionClass, DNWaitHandleCannotBeOpenedException>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceExceptionClass = interface(DNExceptionClass)
  ['{284FDCF9-91E1-58BE-9099-B179D4BBA396}']
  { constructors } 

    {class} function init: DNEventSourceException; overload;
    {class} function init(message: string): DNEventSourceException; overload;
    {class} function init(message: string; innerException: DNException): DNEventSourceException; overload;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceException')]
  DNEventSourceException = interface(DNException)
  ['{B8DFBCB1-BBF7-3D85-BEFC-190A627583A7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventSourceException = class(TDNGenericImport<DNEventSourceExceptionClass, DNEventSourceException>) end;

  //-------------namespace: System----------------
  DNInvalidTimeZoneExceptionClass = interface(DNExceptionClass)
  ['{8A3DD9B7-7E51-54B2-8165-D75C1533EC19}']
  { constructors } 

    {class} function init(message: string): DNInvalidTimeZoneException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidTimeZoneException; overload;
    {class} function init: DNInvalidTimeZoneException; overload;

  end;

  [DNTypeName('System.InvalidTimeZoneException')]
  DNInvalidTimeZoneException = interface(DNException)
  ['{9A2065C0-960C-3EEE-A37E-980766375A62}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidTimeZoneException = class(TDNGenericImport<DNInvalidTimeZoneExceptionClass, DNInvalidTimeZoneException>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageExceptionClass = interface(DNExceptionClass)
  ['{6866AB8A-42B8-5A6D-8453-2DA3305B79C6}']
  { constructors } 

    {class} function init: DNIsolatedStorageException; overload;
    {class} function init(message: string): DNIsolatedStorageException; overload;
    {class} function init(message: string; inner: DNException): DNIsolatedStorageException; overload;

  end;

  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageException')]
  DNIsolatedStorageException = interface(DNException)
  ['{4479C009-4CC3-39A2-8F92-DFCDF034F748}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIsolatedStorageException = class(TDNGenericImport<DNIsolatedStorageExceptionClass, DNIsolatedStorageException>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeWrappedExceptionClass = interface(DNExceptionClass)
  ['{CF559BDF-4044-5E33-A7BD-E591797EA86B}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeWrappedException')]
  DNRuntimeWrappedException = interface(DNException)
  ['{094081A4-421F-34DD-A05B-F0A5160DC5B2}']
  { getters & setters } 

    function get_WrappedException: DNObject;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property WrappedException: DNObject read get_WrappedException;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRuntimeWrappedException = class(TDNGenericImport<DNRuntimeWrappedExceptionClass, DNRuntimeWrappedException>) end;

  //-------------namespace: System----------------
  DNSystemExceptionClass = interface(DNExceptionClass)
  ['{0D8379CC-8A89-56D1-BFCB-D708B127564A}']
  { constructors } 

    {class} function init: DNSystemException; overload;
    {class} function init(message: string): DNSystemException; overload;
    {class} function init(message: string; innerException: DNException): DNSystemException; overload;

  end;

  [DNTypeName('System.SystemException')]
  DNSystemException = interface(DNException)
  ['{4224AC84-9B11-3561-8923-C893CA77ACBE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSystemException = class(TDNGenericImport<DNSystemExceptionClass, DNSystemException>) end;

  //-------------namespace: System----------------
  DNAccessViolationExceptionClass = interface(DNSystemExceptionClass)
  ['{1AF0ABCB-BCB7-59FA-9A50-BF93F01BAC42}']
  { constructors } 

    {class} function init: DNAccessViolationException; overload;
    {class} function init(message: string): DNAccessViolationException; overload;
    {class} function init(message: string; innerException: DNException): DNAccessViolationException; overload;

  end;

  [DNTypeName('System.AccessViolationException')]
  DNAccessViolationException = interface(DNSystemException)
  ['{4C3EBFD5-FC72-33DC-BC37-9953EB25B8D7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAccessViolationException = class(TDNGenericImport<DNAccessViolationExceptionClass, DNAccessViolationException>) end;

  //-------------namespace: System----------------
  DNAppDomainUnloadedExceptionClass = interface(DNSystemExceptionClass)
  ['{5131CF91-7D8A-5816-9528-6333CC76B28E}']
  { constructors } 

    {class} function init: DNAppDomainUnloadedException; overload;
    {class} function init(message: string): DNAppDomainUnloadedException; overload;
    {class} function init(message: string; innerException: DNException): DNAppDomainUnloadedException; overload;

  end;

  [DNTypeName('System.AppDomainUnloadedException')]
  DNAppDomainUnloadedException = interface(DNSystemException)
  ['{61B3E12B-3586-3A58-A497-7ED7C4C794B9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAppDomainUnloadedException = class(TDNGenericImport<DNAppDomainUnloadedExceptionClass, DNAppDomainUnloadedException>) end;

  //-------------namespace: System----------------
  DNArgumentExceptionClass = interface(DNSystemExceptionClass)
  ['{B07B705A-3B31-53C2-8973-B3C42EBCE9E1}']
  { constructors } 

    {class} function init: DNArgumentException; overload;
    {class} function init(message: string): DNArgumentException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentException; overload;
    {class} function init(message: string; paramName: string; innerException: DNException): DNArgumentException; overload;
    {class} function init(message: string; paramName: string): DNArgumentException; overload;

  end;

  [DNTypeName('System.ArgumentException')]
  DNArgumentException = interface(DNSystemException)
  ['{3FDCEEC6-B14B-37E2-BB69-ABC7CA0DA22F}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentException = class(TDNGenericImport<DNArgumentExceptionClass, DNArgumentException>) end;

  //-------------namespace: System----------------
  DNArgumentNullExceptionClass = interface(DNArgumentExceptionClass)
  ['{18FD09BE-5900-510F-90FC-4CA1DFD24B7B}']
  { constructors } 

    {class} function init: DNArgumentNullException; overload;
    {class} function init(paramName: string): DNArgumentNullException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentNullException; overload;
    {class} function init(paramName: string; message: string): DNArgumentNullException; overload;

  end;

  [DNTypeName('System.ArgumentNullException')]
  DNArgumentNullException = interface(DNArgumentException)
  ['{3BD1F243-9BC4-305D-9B1C-0D10C80329FC}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentNullException = class(TDNGenericImport<DNArgumentNullExceptionClass, DNArgumentNullException>) end;

  //-------------namespace: System----------------
  DNArgumentOutOfRangeExceptionClass = interface(DNArgumentExceptionClass)
  ['{1AC467F0-62AF-5EBF-B868-BA047B036125}']
  { constructors } 

    {class} function init: DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string): DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string; message: string): DNArgumentOutOfRangeException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string; actualValue: DNObject; message: string): DNArgumentOutOfRangeException; overload;

  end;

  [DNTypeName('System.ArgumentOutOfRangeException')]
  DNArgumentOutOfRangeException = interface(DNArgumentException)
  ['{74BDD0B9-38D7-3FDA-A67E-D404EE684F24}']
  { getters & setters } 

    function get_Message: string;
    function get_ActualValue: DNObject;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property ActualValue: DNObject read get_ActualValue;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentOutOfRangeException = class(TDNGenericImport<DNArgumentOutOfRangeExceptionClass, DNArgumentOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNDuplicateWaitObjectExceptionClass = interface(DNArgumentExceptionClass)
  ['{CFAE4696-06D0-53BD-B2BD-59F4414928F3}']
  { constructors } 

    {class} function init: DNDuplicateWaitObjectException; overload;
    {class} function init(parameterName: string): DNDuplicateWaitObjectException; overload;
    {class} function init(parameterName: string; message: string): DNDuplicateWaitObjectException; overload;
    {class} function init(message: string; innerException: DNException): DNDuplicateWaitObjectException; overload;

  end;

  [DNTypeName('System.DuplicateWaitObjectException')]
  DNDuplicateWaitObjectException = interface(DNArgumentException)
  ['{CC20C6DF-A054-3F09-A5F5-A3B5A25F4CE6}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDuplicateWaitObjectException = class(TDNGenericImport<DNDuplicateWaitObjectExceptionClass, DNDuplicateWaitObjectException>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureNotFoundExceptionClass = interface(DNArgumentExceptionClass)
  ['{35D32ED0-37F5-59F3-9B27-B78679D8FB22}']
  { constructors } 

    {class} function init: DNCultureNotFoundException; overload;
    {class} function init(message: string): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; message: string): DNCultureNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; invalidCultureId: Int32; message: string): DNCultureNotFoundException; overload;
    {class} function init(message: string; invalidCultureId: Int32; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; invalidCultureName: string; message: string): DNCultureNotFoundException; overload;
    {class} function init(message: string; invalidCultureName: string; innerException: DNException): DNCultureNotFoundException; overload;

  end;

  [DNTypeName('System.Globalization.CultureNotFoundException')]
  DNCultureNotFoundException = interface(DNArgumentException)
  ['{5DF1CE00-4EBD-3F48-887A-C4BCCA7AD912}']
  { getters & setters } 

    function get_InvalidCultureId: DNNullable<Int32>;
    function get_InvalidCultureName: string;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property InvalidCultureId: DNNullable<Int32> read get_InvalidCultureId;
    property InvalidCultureName: string read get_InvalidCultureName;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCultureNotFoundException = class(TDNGenericImport<DNCultureNotFoundExceptionClass, DNCultureNotFoundException>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{6988CE20-7A1A-537F-8A05-2794C39EF412}']
  { constructors } 

    {class} function init: DNDecoderFallbackException; overload;
    {class} function init(message: string): DNDecoderFallbackException; overload;
    {class} function init(message: string; innerException: DNException): DNDecoderFallbackException; overload;
    {class} function init(message: string; bytesUnknown: TArray<Byte>; index: Int32): DNDecoderFallbackException; overload;

  end;

  [DNTypeName('System.Text.DecoderFallbackException')]
  DNDecoderFallbackException = interface(DNArgumentException)
  ['{84FC747A-1940-3D85-8819-EA53FC73DB1B}']
  { getters & setters } 

    function get_BytesUnknown: TArray<Byte>;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property BytesUnknown: TArray<Byte> read get_BytesUnknown;
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDecoderFallbackException = class(TDNGenericImport<DNDecoderFallbackExceptionClass, DNDecoderFallbackException>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{7D765205-A927-55E6-A69B-B22F37A0FBA9}']
  { constructors } 

    {class} function init: DNEncoderFallbackException; overload;
    {class} function init(message: string): DNEncoderFallbackException; overload;
    {class} function init(message: string; innerException: DNException): DNEncoderFallbackException; overload;

  end;

  [DNTypeName('System.Text.EncoderFallbackException')]
  DNEncoderFallbackException = interface(DNArgumentException)
  ['{8078DA75-F43F-341D-A00E-20D6D736415E}']
  { getters & setters } 

    function get_CharUnknown: Char;
    function get_CharUnknownHigh: Char;
    function get_CharUnknownLow: Char;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function IsUnknownSurrogate: Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CharUnknown: Char read get_CharUnknown;
    property CharUnknownHigh: Char read get_CharUnknownHigh;
    property CharUnknownLow: Char read get_CharUnknownLow;
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEncoderFallbackException = class(TDNGenericImport<DNEncoderFallbackExceptionClass, DNEncoderFallbackException>) end;

  //-------------namespace: System----------------
  DNArithmeticExceptionClass = interface(DNSystemExceptionClass)
  ['{F84C249B-A3CF-509F-A2FC-859632F0370C}']
  { constructors } 

    {class} function init: DNArithmeticException; overload;
    {class} function init(message: string): DNArithmeticException; overload;
    {class} function init(message: string; innerException: DNException): DNArithmeticException; overload;

  end;

  [DNTypeName('System.ArithmeticException')]
  DNArithmeticException = interface(DNSystemException)
  ['{647053C3-1879-34D7-AE57-67015C91FC70}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArithmeticException = class(TDNGenericImport<DNArithmeticExceptionClass, DNArithmeticException>) end;

  //-------------namespace: System----------------
  DNDivideByZeroExceptionClass = interface(DNArithmeticExceptionClass)
  ['{547770A5-CB27-5920-A5E4-269AE8E3EF85}']
  { constructors } 

    {class} function init: DNDivideByZeroException; overload;
    {class} function init(message: string): DNDivideByZeroException; overload;
    {class} function init(message: string; innerException: DNException): DNDivideByZeroException; overload;

  end;

  [DNTypeName('System.DivideByZeroException')]
  DNDivideByZeroException = interface(DNArithmeticException)
  ['{F6914A11-D95D-324F-BA0F-39A374625290}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDivideByZeroException = class(TDNGenericImport<DNDivideByZeroExceptionClass, DNDivideByZeroException>) end;

  //-------------namespace: System----------------
  DNNotFiniteNumberExceptionClass = interface(DNArithmeticExceptionClass)
  ['{29196B52-7657-583A-AC92-77D4A4813F34}']
  { constructors } 

    {class} function init: DNNotFiniteNumberException; overload;
    {class} function init(offendingNumber: Double): DNNotFiniteNumberException; overload;
    {class} function init(message: string): DNNotFiniteNumberException; overload;
    {class} function init(message: string; offendingNumber: Double): DNNotFiniteNumberException; overload;
    {class} function init(message: string; innerException: DNException): DNNotFiniteNumberException; overload;
    {class} function init(message: string; offendingNumber: Double; innerException: DNException): DNNotFiniteNumberException; overload;

  end;

  [DNTypeName('System.NotFiniteNumberException')]
  DNNotFiniteNumberException = interface(DNArithmeticException)
  ['{7E34AB89-0684-3B86-8A0F-E638EB4E6252}']
  { getters & setters } 

    function get_OffendingNumber: Double;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property OffendingNumber: Double read get_OffendingNumber;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotFiniteNumberException = class(TDNGenericImport<DNNotFiniteNumberExceptionClass, DNNotFiniteNumberException>) end;

  //-------------namespace: System----------------
  DNOverflowExceptionClass = interface(DNArithmeticExceptionClass)
  ['{23BE528F-ABB5-5D28-89D8-D1B708F3144A}']
  { constructors } 

    {class} function init: DNOverflowException; overload;
    {class} function init(message: string): DNOverflowException; overload;
    {class} function init(message: string; innerException: DNException): DNOverflowException; overload;

  end;

  [DNTypeName('System.OverflowException')]
  DNOverflowException = interface(DNArithmeticException)
  ['{4286FA72-A2FA-3245-8751-D4206070A191}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOverflowException = class(TDNGenericImport<DNOverflowExceptionClass, DNOverflowException>) end;

  //-------------namespace: System----------------
  DNArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{171C89B8-67F3-5525-878E-698C581CD87B}']
  { constructors } 

    {class} function init: DNArrayTypeMismatchException; overload;
    {class} function init(message: string): DNArrayTypeMismatchException; overload;
    {class} function init(message: string; innerException: DNException): DNArrayTypeMismatchException; overload;

  end;

  [DNTypeName('System.ArrayTypeMismatchException')]
  DNArrayTypeMismatchException = interface(DNSystemException)
  ['{676E1164-752C-3A74-8D3F-BCD32A2026D6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArrayTypeMismatchException = class(TDNGenericImport<DNArrayTypeMismatchExceptionClass, DNArrayTypeMismatchException>) end;

  //-------------namespace: System----------------
  DNBadImageFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{BCBCE3EA-CDBA-5E41-8F11-3F7DB4B024E4}']
  { constructors } 

    {class} function init: DNBadImageFormatException; overload;
    {class} function init(message: string): DNBadImageFormatException; overload;
    {class} function init(message: string; inner: DNException): DNBadImageFormatException; overload;
    {class} function init(message: string; fileName: string): DNBadImageFormatException; overload;
    {class} function init(message: string; fileName: string; inner: DNException): DNBadImageFormatException; overload;

  end;

  [DNTypeName('System.BadImageFormatException')]
  DNBadImageFormatException = interface(DNSystemException)
  ['{E9148312-A9BF-3A45-BBCA-350967FD78F5}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNBadImageFormatException = class(TDNGenericImport<DNBadImageFormatExceptionClass, DNBadImageFormatException>) end;

  //-------------namespace: System----------------
  DNCannotUnloadAppDomainExceptionClass = interface(DNSystemExceptionClass)
  ['{D80E15AF-31FF-5D94-B64C-1BB3DEA4EA10}']
  { constructors } 

    {class} function init: DNCannotUnloadAppDomainException; overload;
    {class} function init(message: string): DNCannotUnloadAppDomainException; overload;
    {class} function init(message: string; innerException: DNException): DNCannotUnloadAppDomainException; overload;

  end;

  [DNTypeName('System.CannotUnloadAppDomainException')]
  DNCannotUnloadAppDomainException = interface(DNSystemException)
  ['{29C69707-875F-3678-8F01-283094A2DFB1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCannotUnloadAppDomainException = class(TDNGenericImport<DNCannotUnloadAppDomainExceptionClass, DNCannotUnloadAppDomainException>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyNotFoundExceptionClass = interface(DNSystemExceptionClass)
  ['{68ECC6CA-6230-5266-BCD0-79A209D9C4F2}']
  { constructors } 

    {class} function init: DNKeyNotFoundException; overload;
    {class} function init(message: string): DNKeyNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNKeyNotFoundException; overload;

  end;

  [DNTypeName('System.Collections.Generic.KeyNotFoundException')]
  DNKeyNotFoundException = interface(DNSystemException)
  ['{0D52ABE3-3C93-3D94-A744-AC44850BACCD}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNKeyNotFoundException = class(TDNGenericImport<DNKeyNotFoundExceptionClass, DNKeyNotFoundException>) end;

  //-------------namespace: System----------------
  DNContextMarshalExceptionClass = interface(DNSystemExceptionClass)
  ['{C7DD41B6-65D6-5D1D-B3C0-7177D124CBBA}']
  { constructors } 

    {class} function init: DNContextMarshalException; overload;
    {class} function init(message: string): DNContextMarshalException; overload;
    {class} function init(message: string; inner: DNException): DNContextMarshalException; overload;

  end;

  [DNTypeName('System.ContextMarshalException')]
  DNContextMarshalException = interface(DNSystemException)
  ['{CBEAA915-4D2C-3F77-98E8-A258B0FD3CEF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNContextMarshalException = class(TDNGenericImport<DNContextMarshalExceptionClass, DNContextMarshalException>) end;

  //-------------namespace: System----------------
  DNDataMisalignedExceptionClass = interface(DNSystemExceptionClass)
  ['{102C74EA-EFF8-510E-8C63-9AA819DEE0C4}']
  { constructors } 

    {class} function init: DNDataMisalignedException; overload;
    {class} function init(message: string): DNDataMisalignedException; overload;
    {class} function init(message: string; innerException: DNException): DNDataMisalignedException; overload;

  end;

  [DNTypeName('System.DataMisalignedException')]
  DNDataMisalignedException = interface(DNSystemException)
  ['{AAD4BDD3-81AA-3ABC-B53B-D904D25BC01E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDataMisalignedException = class(TDNGenericImport<DNDataMisalignedExceptionClass, DNDataMisalignedException>) end;

  //-------------namespace: System----------------
  DNExecutionEngineExceptionClass = interface(DNSystemExceptionClass)
  ['{8D705F04-D386-5322-B7C4-71ABD5F65EC5}']
  { constructors } 

    {class} function init: DNExecutionEngineException; overload;
    {class} function init(message: string): DNExecutionEngineException; overload;
    {class} function init(message: string; innerException: DNException): DNExecutionEngineException; overload;

  end;

  [DNTypeName('System.ExecutionEngineException')]
  DNExecutionEngineException = interface(DNSystemException)
  ['{E786FB32-B659-3D96-94C4-E1A9FC037868}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNExecutionEngineException = class(TDNGenericImport<DNExecutionEngineExceptionClass, DNExecutionEngineException>) end;

  //-------------namespace: System----------------
  DNFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{8760B932-77EB-596C-9772-1D8D246400A4}']
  { constructors } 

    {class} function init: DNFormatException; overload;
    {class} function init(message: string): DNFormatException; overload;
    {class} function init(message: string; innerException: DNException): DNFormatException; overload;

  end;

  [DNTypeName('System.FormatException')]
  DNFormatException = interface(DNSystemException)
  ['{964AA3BD-4B12-3E23-9D7F-99342AFAE812}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFormatException = class(TDNGenericImport<DNFormatExceptionClass, DNFormatException>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeFormatExceptionClass = interface(DNFormatExceptionClass)
  ['{06CFEFD4-7617-5DA7-9A3B-8D7B02ED93A1}']
  { constructors } 

    {class} function init: DNCustomAttributeFormatException; overload;
    {class} function init(message: string): DNCustomAttributeFormatException; overload;
    {class} function init(message: string; inner: DNException): DNCustomAttributeFormatException; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeFormatException')]
  DNCustomAttributeFormatException = interface(DNFormatException)
  ['{D5CB383D-99F4-3C7E-A9C3-85B53661448F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCustomAttributeFormatException = class(TDNGenericImport<DNCustomAttributeFormatExceptionClass, DNCustomAttributeFormatException>) end;

  //-------------namespace: System----------------
  DNIndexOutOfRangeExceptionClass = interface(DNSystemExceptionClass)
  ['{BA16D53B-A6F7-5299-AE13-D41B8CBC5C10}']
  { constructors } 

    {class} function init: DNIndexOutOfRangeException; overload;
    {class} function init(message: string): DNIndexOutOfRangeException; overload;
    {class} function init(message: string; innerException: DNException): DNIndexOutOfRangeException; overload;

  end;

  [DNTypeName('System.IndexOutOfRangeException')]
  DNIndexOutOfRangeException = interface(DNSystemException)
  ['{5CA9971B-2DC3-3BC8-847A-5E6D15CBB16E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIndexOutOfRangeException = class(TDNGenericImport<DNIndexOutOfRangeExceptionClass, DNIndexOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNInsufficientExecutionStackExceptionClass = interface(DNSystemExceptionClass)
  ['{F7F53A3C-C80B-531F-92F9-D3CF948F847E}']
  { constructors } 

    {class} function init: DNInsufficientExecutionStackException; overload;
    {class} function init(message: string): DNInsufficientExecutionStackException; overload;
    {class} function init(message: string; innerException: DNException): DNInsufficientExecutionStackException; overload;

  end;

  [DNTypeName('System.InsufficientExecutionStackException')]
  DNInsufficientExecutionStackException = interface(DNSystemException)
  ['{6976E0CF-989A-3BE8-94A6-5F26E27B5F53}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInsufficientExecutionStackException = class(TDNGenericImport<DNInsufficientExecutionStackExceptionClass, DNInsufficientExecutionStackException>) end;

  //-------------namespace: System----------------
  DNInvalidCastExceptionClass = interface(DNSystemExceptionClass)
  ['{B47F8BF4-4B63-5356-9601-9C763DA80093}']
  { constructors } 

    {class} function init: DNInvalidCastException; overload;
    {class} function init(message: string): DNInvalidCastException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidCastException; overload;
    {class} function init(message: string; errorCode: Int32): DNInvalidCastException; overload;

  end;

  [DNTypeName('System.InvalidCastException')]
  DNInvalidCastException = interface(DNSystemException)
  ['{7F6BCBE5-EB30-370B-9F1B-92A6265AFEDD}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidCastException = class(TDNGenericImport<DNInvalidCastExceptionClass, DNInvalidCastException>) end;

  //-------------namespace: System----------------
  DNInvalidOperationExceptionClass = interface(DNSystemExceptionClass)
  ['{69E5DE98-A8A6-5462-A14C-25E72E495961}']
  { constructors } 

    {class} function init: DNInvalidOperationException; overload;
    {class} function init(message: string): DNInvalidOperationException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidOperationException; overload;

  end;

  [DNTypeName('System.InvalidOperationException')]
  DNInvalidOperationException = interface(DNSystemException)
  ['{9546306B-1B68-33AF-80DB-3A9206501515}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidOperationException = class(TDNGenericImport<DNInvalidOperationExceptionClass, DNInvalidOperationException>) end;

  //-------------namespace: System----------------
  DNObjectDisposedExceptionClass = interface(DNInvalidOperationExceptionClass)
  ['{4FDBDEB9-7F38-5675-8E8A-4C3E2F275BE3}']
  { constructors } 

    {class} function init(objectName: string): DNObjectDisposedException; overload;
    {class} function init(objectName: string; message: string): DNObjectDisposedException; overload;
    {class} function init(message: string; innerException: DNException): DNObjectDisposedException; overload;

  end;

  [DNTypeName('System.ObjectDisposedException')]
  DNObjectDisposedException = interface(DNInvalidOperationException)
  ['{F17BAAF6-D35C-3C6E-ACD3-D0D49A5022C4}']
  { getters & setters } 

    function get_Message: string;
    function get_ObjectName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property ObjectName: string read get_ObjectName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNObjectDisposedException = class(TDNGenericImport<DNObjectDisposedExceptionClass, DNObjectDisposedException>) end;

  //-------------namespace: System----------------
  DNInvalidProgramExceptionClass = interface(DNSystemExceptionClass)
  ['{14BD820E-39BC-5511-86B0-F35CA81574A0}']
  { constructors } 

    {class} function init: DNInvalidProgramException; overload;
    {class} function init(message: string): DNInvalidProgramException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidProgramException; overload;

  end;

  [DNTypeName('System.InvalidProgramException')]
  DNInvalidProgramException = interface(DNSystemException)
  ['{91591469-EFEF-3D63-90F9-88520F0AA1EF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidProgramException = class(TDNGenericImport<DNInvalidProgramExceptionClass, DNInvalidProgramException>) end;

  //-------------namespace: System.IO----------------
  DNIOExceptionClass = interface(DNSystemExceptionClass)
  ['{AC8DFAB8-3F53-574B-8BBF-E45574ABF32B}']
  { constructors } 

    {class} function init: DNIOException; overload;
    {class} function init(message: string): DNIOException; overload;
    {class} function init(message: string; hresult: Int32): DNIOException; overload;
    {class} function init(message: string; innerException: DNException): DNIOException; overload;

  end;

  [DNTypeName('System.IO.IOException')]
  DNIOException = interface(DNSystemException)
  ['{A164C0BF-67AE-3C7E-BC05-BFE24A8CDB62}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIOException = class(TDNGenericImport<DNIOExceptionClass, DNIOException>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{44EE944E-ACC0-511E-BF8B-38CDBA507ADE}']
  { constructors } 

    {class} function init: DNDirectoryNotFoundException; overload;
    {class} function init(message: string): DNDirectoryNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNDirectoryNotFoundException; overload;

  end;

  [DNTypeName('System.IO.DirectoryNotFoundException')]
  DNDirectoryNotFoundException = interface(DNIOException)
  ['{8833BC41-DC6B-34B9-A799-682D2554F02F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDirectoryNotFoundException = class(TDNGenericImport<DNDirectoryNotFoundExceptionClass, DNDirectoryNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNDriveNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{A9CE7B61-ABEA-5765-ADF3-E2492A753049}']
  { constructors } 

    {class} function init: DNDriveNotFoundException; overload;
    {class} function init(message: string): DNDriveNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNDriveNotFoundException; overload;

  end;

  [DNTypeName('System.IO.DriveNotFoundException')]
  DNDriveNotFoundException = interface(DNIOException)
  ['{A8F9F740-70C9-30A7-937C-59785A9BB5A4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDriveNotFoundException = class(TDNGenericImport<DNDriveNotFoundExceptionClass, DNDriveNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNEndOfStreamExceptionClass = interface(DNIOExceptionClass)
  ['{E05F0421-E2DB-5FAF-A7C1-3A7F52DD2BA8}']
  { constructors } 

    {class} function init: DNEndOfStreamException; overload;
    {class} function init(message: string): DNEndOfStreamException; overload;
    {class} function init(message: string; innerException: DNException): DNEndOfStreamException; overload;

  end;

  [DNTypeName('System.IO.EndOfStreamException')]
  DNEndOfStreamException = interface(DNIOException)
  ['{58D052BC-A3DF-3508-AC95-FF297BDC9F0C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEndOfStreamException = class(TDNGenericImport<DNEndOfStreamExceptionClass, DNEndOfStreamException>) end;

  //-------------namespace: System.IO----------------
  DNFileLoadExceptionClass = interface(DNIOExceptionClass)
  ['{FC198058-B076-590F-9B96-307198B67548}']
  { constructors } 

    {class} function init: DNFileLoadException; overload;
    {class} function init(message: string): DNFileLoadException; overload;
    {class} function init(message: string; inner: DNException): DNFileLoadException; overload;
    {class} function init(message: string; fileName: string): DNFileLoadException; overload;
    {class} function init(message: string; fileName: string; inner: DNException): DNFileLoadException; overload;

  end;

  [DNTypeName('System.IO.FileLoadException')]
  DNFileLoadException = interface(DNIOException)
  ['{AF8C5F8A-9999-3E92-BB41-C5F4955174CD}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileLoadException = class(TDNGenericImport<DNFileLoadExceptionClass, DNFileLoadException>) end;

  //-------------namespace: System.IO----------------
  DNFileNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{96B44A31-CC4E-5631-9D80-E64FACC4C209}']
  { constructors } 

    {class} function init: DNFileNotFoundException; overload;
    {class} function init(message: string): DNFileNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNFileNotFoundException; overload;
    {class} function init(message: string; fileName: string): DNFileNotFoundException; overload;
    {class} function init(message: string; fileName: string; innerException: DNException): DNFileNotFoundException; overload;

  end;

  [DNTypeName('System.IO.FileNotFoundException')]
  DNFileNotFoundException = interface(DNIOException)
  ['{48C6E96F-A2F3-33E7-BA7F-C8F74866760B}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileNotFoundException = class(TDNGenericImport<DNFileNotFoundExceptionClass, DNFileNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNPathTooLongExceptionClass = interface(DNIOExceptionClass)
  ['{1A1EC27F-B2E0-5361-9084-8CF5CF61464D}']
  { constructors } 

    {class} function init: DNPathTooLongException; overload;
    {class} function init(message: string): DNPathTooLongException; overload;
    {class} function init(message: string; innerException: DNException): DNPathTooLongException; overload;

  end;

  [DNTypeName('System.IO.PathTooLongException')]
  DNPathTooLongException = interface(DNIOException)
  ['{C016A313-9606-36D3-A823-33EBF5006189}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPathTooLongException = class(TDNGenericImport<DNPathTooLongExceptionClass, DNPathTooLongException>) end;

  //-------------namespace: System----------------
  DNMemberAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{9B09C991-1580-572E-A499-DA7C2F4856EB}']
  { constructors } 

    {class} function init: DNMemberAccessException; overload;
    {class} function init(message: string): DNMemberAccessException; overload;
    {class} function init(message: string; inner: DNException): DNMemberAccessException; overload;

  end;

  [DNTypeName('System.MemberAccessException')]
  DNMemberAccessException = interface(DNSystemException)
  ['{0FF66430-C796-3EE7-902B-166C402CA288}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMemberAccessException = class(TDNGenericImport<DNMemberAccessExceptionClass, DNMemberAccessException>) end;

  //-------------namespace: System----------------
  DNFieldAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{E646091B-8B8F-54F4-A242-B9FDE7DD42CF}']
  { constructors } 

    {class} function init: DNFieldAccessException; overload;
    {class} function init(message: string): DNFieldAccessException; overload;
    {class} function init(message: string; inner: DNException): DNFieldAccessException; overload;

  end;

  [DNTypeName('System.FieldAccessException')]
  DNFieldAccessException = interface(DNMemberAccessException)
  ['{BDA7BEE5-85F1-3B66-B610-DDF1D5898006}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFieldAccessException = class(TDNGenericImport<DNFieldAccessExceptionClass, DNFieldAccessException>) end;

  //-------------namespace: System----------------
  DNMethodAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{AC32CD93-2591-5DF1-8F0A-8C4FC42B9DE5}']
  { constructors } 

    {class} function init: DNMethodAccessException; overload;
    {class} function init(message: string): DNMethodAccessException; overload;
    {class} function init(message: string; inner: DNException): DNMethodAccessException; overload;

  end;

  [DNTypeName('System.MethodAccessException')]
  DNMethodAccessException = interface(DNMemberAccessException)
  ['{92E76A74-2622-3AA9-A3CA-1AE8BD7BC4A8}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMethodAccessException = class(TDNGenericImport<DNMethodAccessExceptionClass, DNMethodAccessException>) end;

  //-------------namespace: System----------------
  DNMissingMemberExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{818265C9-AA75-5804-912B-AB3866773BC8}']
  { constructors } 

    {class} function init: DNMissingMemberException; overload;
    {class} function init(message: string): DNMissingMemberException; overload;
    {class} function init(message: string; inner: DNException): DNMissingMemberException; overload;
    {class} function init(className: string; memberName: string): DNMissingMemberException; overload;

  end;

  [DNTypeName('System.MissingMemberException')]
  DNMissingMemberException = interface(DNMemberAccessException)
  ['{CDC70043-D56B-3799-B7BD-6113BBCA160A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingMemberException = class(TDNGenericImport<DNMissingMemberExceptionClass, DNMissingMemberException>) end;

  //-------------namespace: System----------------
  DNMissingFieldExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{D4CEAED3-2164-53B6-9671-BB921CC64627}']
  { constructors } 

    {class} function init: DNMissingFieldException; overload;
    {class} function init(message: string): DNMissingFieldException; overload;
    {class} function init(message: string; inner: DNException): DNMissingFieldException; overload;
    {class} function init(className: string; fieldName: string): DNMissingFieldException; overload;

  end;

  [DNTypeName('System.MissingFieldException')]
  DNMissingFieldException = interface(DNMissingMemberException)
  ['{8D36569B-14D6-3C3D-B55C-9D02A45BFC3D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingFieldException = class(TDNGenericImport<DNMissingFieldExceptionClass, DNMissingFieldException>) end;

  //-------------namespace: System----------------
  DNMissingMethodExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{4B94A699-FDBE-51CC-A7FA-EB2658960EF5}']
  { constructors } 

    {class} function init: DNMissingMethodException; overload;
    {class} function init(message: string): DNMissingMethodException; overload;
    {class} function init(message: string; inner: DNException): DNMissingMethodException; overload;
    {class} function init(className: string; methodName: string): DNMissingMethodException; overload;

  end;

  [DNTypeName('System.MissingMethodException')]
  DNMissingMethodException = interface(DNMissingMemberException)
  ['{58897D76-EF6C-327A-93F7-6CD66C424E11}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingMethodException = class(TDNGenericImport<DNMissingMethodExceptionClass, DNMissingMethodException>) end;

  //-------------namespace: System----------------
  DNMulticastNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{59A14F20-4A10-5BA7-A35A-E2D4F2FFD0AC}']
  { constructors } 

    {class} function init: DNMulticastNotSupportedException; overload;
    {class} function init(message: string): DNMulticastNotSupportedException; overload;
    {class} function init(message: string; inner: DNException): DNMulticastNotSupportedException; overload;

  end;

  [DNTypeName('System.MulticastNotSupportedException')]
  DNMulticastNotSupportedException = interface(DNSystemException)
  ['{9DA2F8B8-59F0-3852-B509-0663E3BF643B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMulticastNotSupportedException = class(TDNGenericImport<DNMulticastNotSupportedExceptionClass, DNMulticastNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNotImplementedExceptionClass = interface(DNSystemExceptionClass)
  ['{7E8D16CD-C1DA-576C-BEDF-C9E9753A2767}']
  { constructors } 

    {class} function init: DNNotImplementedException; overload;
    {class} function init(message: string): DNNotImplementedException; overload;
    {class} function init(message: string; inner: DNException): DNNotImplementedException; overload;

  end;

  [DNTypeName('System.NotImplementedException')]
  DNNotImplementedException = interface(DNSystemException)
  ['{F8BE2AD5-4E99-3E00-B10E-7C54D31C1C1D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotImplementedException = class(TDNGenericImport<DNNotImplementedExceptionClass, DNNotImplementedException>) end;

  //-------------namespace: System----------------
  DNNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{F2166C6D-3C08-55CE-BBD7-D2038B6DC345}']
  { constructors } 

    {class} function init: DNNotSupportedException; overload;
    {class} function init(message: string): DNNotSupportedException; overload;
    {class} function init(message: string; innerException: DNException): DNNotSupportedException; overload;

  end;

  [DNTypeName('System.NotSupportedException')]
  DNNotSupportedException = interface(DNSystemException)
  ['{DAFB2462-2A5B-3818-B17E-602984FE1BB0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotSupportedException = class(TDNGenericImport<DNNotSupportedExceptionClass, DNNotSupportedException>) end;

  //-------------namespace: System----------------
  DNPlatformNotSupportedExceptionClass = interface(DNNotSupportedExceptionClass)
  ['{5F5955BD-790D-56C5-BD83-932CAA2BC94B}']
  { constructors } 

    {class} function init: DNPlatformNotSupportedException; overload;
    {class} function init(message: string): DNPlatformNotSupportedException; overload;
    {class} function init(message: string; inner: DNException): DNPlatformNotSupportedException; overload;

  end;

  [DNTypeName('System.PlatformNotSupportedException')]
  DNPlatformNotSupportedException = interface(DNNotSupportedException)
  ['{A36738B5-FA8F-3316-A929-68099A32B43B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPlatformNotSupportedException = class(TDNGenericImport<DNPlatformNotSupportedExceptionClass, DNPlatformNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNullReferenceExceptionClass = interface(DNSystemExceptionClass)
  ['{088F2D6B-50A4-53A3-9513-97004C1AFE83}']
  { constructors } 

    {class} function init: DNNullReferenceException; overload;
    {class} function init(message: string): DNNullReferenceException; overload;
    {class} function init(message: string; innerException: DNException): DNNullReferenceException; overload;

  end;

  [DNTypeName('System.NullReferenceException')]
  DNNullReferenceException = interface(DNSystemException)
  ['{7F71DB2D-1EA0-3CAE-8087-26095F5215E6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNullReferenceException = class(TDNGenericImport<DNNullReferenceExceptionClass, DNNullReferenceException>) end;

  //-------------namespace: System----------------
  DNOperationCanceledExceptionClass = interface(DNSystemExceptionClass)
  ['{74540561-DE44-5E45-92BD-B5CD9485A31A}']
  { constructors } 

    {class} function init: DNOperationCanceledException; overload;
    {class} function init(message: string): DNOperationCanceledException; overload;
    {class} function init(message: string; innerException: DNException): DNOperationCanceledException; overload;
    {class} function init(token: DNCancellationToken): DNOperationCanceledException; overload;
    {class} function init(message: string; token: DNCancellationToken): DNOperationCanceledException; overload;
    {class} function init(message: string; innerException: DNException; token: DNCancellationToken): DNOperationCanceledException; overload;

  end;

  [DNTypeName('System.OperationCanceledException')]
  DNOperationCanceledException = interface(DNSystemException)
  ['{11581718-2434-32E3-B559-E86CE9923744}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOperationCanceledException = class(TDNGenericImport<DNOperationCanceledExceptionClass, DNOperationCanceledException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCanceledExceptionClass = interface(DNOperationCanceledExceptionClass)
  ['{A96088AE-7639-53F1-9D25-2D868993D553}']
  { constructors } 

    {class} function init: DNTaskCanceledException; overload;
    {class} function init(message: string): DNTaskCanceledException; overload;
    {class} function init(message: string; innerException: DNException): DNTaskCanceledException; overload;
    {class} function init(task: DNTask): DNTaskCanceledException; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskCanceledException')]
  DNTaskCanceledException = interface(DNOperationCanceledException)
  ['{476C5101-4461-3F41-B57A-47EC843B2912}']
  { getters & setters } 

    function get_Task: DNTask;
    function get_CancellationToken: DNCancellationToken;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask read get_Task;
    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaskCanceledException = class(TDNGenericImport<DNTaskCanceledExceptionClass, DNTaskCanceledException>) end;

  //-------------namespace: System----------------
  DNOutOfMemoryExceptionClass = interface(DNSystemExceptionClass)
  ['{2F63A0A1-C9CD-5275-B893-4244B29C8456}']
  { constructors } 

    {class} function init: DNOutOfMemoryException; overload;
    {class} function init(message: string): DNOutOfMemoryException; overload;
    {class} function init(message: string; innerException: DNException): DNOutOfMemoryException; overload;

  end;

  [DNTypeName('System.OutOfMemoryException')]
  DNOutOfMemoryException = interface(DNSystemException)
  ['{CCF306AE-33BD-3003-9CCE-DAF5BEFEF611}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOutOfMemoryException = class(TDNGenericImport<DNOutOfMemoryExceptionClass, DNOutOfMemoryException>) end;

  //-------------namespace: System----------------
  DNInsufficientMemoryExceptionClass = interface(DNOutOfMemoryExceptionClass)
  ['{BD8E4C7D-2906-5EF0-BB71-DB7FE0C46F44}']
  { constructors } 

    {class} function init: DNInsufficientMemoryException; overload;
    {class} function init(message: string): DNInsufficientMemoryException; overload;
    {class} function init(message: string; innerException: DNException): DNInsufficientMemoryException; overload;

  end;

  [DNTypeName('System.InsufficientMemoryException')]
  DNInsufficientMemoryException = interface(DNOutOfMemoryException)
  ['{90F14FF0-0FD2-3C06-BDB1-1934DB80859E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInsufficientMemoryException = class(TDNGenericImport<DNInsufficientMemoryExceptionClass, DNInsufficientMemoryException>) end;

  //-------------namespace: System----------------
  DNRankExceptionClass = interface(DNSystemExceptionClass)
  ['{A0BBFFCE-37F3-5937-9DBB-8AE989533057}']
  { constructors } 

    {class} function init: DNRankException; overload;
    {class} function init(message: string): DNRankException; overload;
    {class} function init(message: string; innerException: DNException): DNRankException; overload;

  end;

  [DNTypeName('System.RankException')]
  DNRankException = interface(DNSystemException)
  ['{C9F61CBD-287F-3D24-9FEB-2C3F347CF570}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRankException = class(TDNGenericImport<DNRankExceptionClass, DNRankException>) end;

  //-------------namespace: System.Reflection----------------
  DNAmbiguousMatchExceptionClass = interface(DNSystemExceptionClass)
  ['{EDCDA4A3-3F80-51BF-BBE9-7880E3382BA7}']
  { constructors } 

    {class} function init: DNAmbiguousMatchException; overload;
    {class} function init(message: string): DNAmbiguousMatchException; overload;
    {class} function init(message: string; inner: DNException): DNAmbiguousMatchException; overload;

  end;

  [DNTypeName('System.Reflection.AmbiguousMatchException')]
  DNAmbiguousMatchException = interface(DNSystemException)
  ['{2846AE5E-A9FA-36CF-B2D1-6E95596DBDE7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAmbiguousMatchException = class(TDNGenericImport<DNAmbiguousMatchExceptionClass, DNAmbiguousMatchException>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{58BDCD33-8DFF-5BFD-8895-3D53C4758F36}']
  { constructors } 

    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>): DNReflectionTypeLoadException; overload;
    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>; message: string): DNReflectionTypeLoadException; overload;

  end;

  [DNTypeName('System.Reflection.ReflectionTypeLoadException')]
  DNReflectionTypeLoadException = interface(DNSystemException)
  ['{843B19AD-A02B-3852-AC56-FDC798935630}']
  { getters & setters } 

    function get_Types: TArray<DNType>;
    function get_LoaderExceptions: TArray<DNException>;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Types: TArray<DNType> read get_Types;
    property LoaderExceptions: TArray<DNException> read get_LoaderExceptions;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNReflectionTypeLoadException = class(TDNGenericImport<DNReflectionTypeLoadExceptionClass, DNReflectionTypeLoadException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingManifestResourceExceptionClass = interface(DNSystemExceptionClass)
  ['{D86BEB85-0A87-5811-8490-87586853697D}']
  { constructors } 

    {class} function init: DNMissingManifestResourceException; overload;
    {class} function init(message: string): DNMissingManifestResourceException; overload;
    {class} function init(message: string; inner: DNException): DNMissingManifestResourceException; overload;

  end;

  [DNTypeName('System.Resources.MissingManifestResourceException')]
  DNMissingManifestResourceException = interface(DNSystemException)
  ['{726BBDF4-6C6D-30F4-B3A0-F14D6AEC08C7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingManifestResourceException = class(TDNGenericImport<DNMissingManifestResourceExceptionClass, DNMissingManifestResourceException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingSatelliteAssemblyExceptionClass = interface(DNSystemExceptionClass)
  ['{6767A5C0-3F21-56A2-9FA5-D5BAD2E0DAB2}']
  { constructors } 

    {class} function init: DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string): DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string; cultureName: string): DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string; inner: DNException): DNMissingSatelliteAssemblyException; overload;

  end;

  [DNTypeName('System.Resources.MissingSatelliteAssemblyException')]
  DNMissingSatelliteAssemblyException = interface(DNSystemException)
  ['{D41969A6-C394-34B9-BD24-DD408F39F261}']
  { getters & setters } 

    function get_CultureName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CultureName: string read get_CultureName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingSatelliteAssemblyException = class(TDNGenericImport<DNMissingSatelliteAssemblyExceptionClass, DNMissingSatelliteAssemblyException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNExternalExceptionClass = interface(DNSystemExceptionClass)
  ['{E7F4BBEB-23B0-5838-A0AB-1129B80D37EC}']
  { constructors } 

    {class} function init: DNExternalException; overload;
    {class} function init(message: string): DNExternalException; overload;
    {class} function init(message: string; inner: DNException): DNExternalException; overload;
    {class} function init(message: string; errorCode: Int32): DNExternalException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ExternalException')]
  DNExternalException = interface(DNSystemException)
  ['{AFC681CF-E82F-361A-8280-CF4E1F844C3E}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNExternalException = class(TDNGenericImport<DNExternalExceptionClass, DNExternalException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCOMExceptionClass = interface(DNExternalExceptionClass)
  ['{10ED815D-B0D9-58D2-99DC-E4BA9F23BB55}']
  { constructors } 

    {class} function init: DNCOMException; overload;
    {class} function init(message: string): DNCOMException; overload;
    {class} function init(message: string; inner: DNException): DNCOMException; overload;
    {class} function init(message: string; errorCode: Int32): DNCOMException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.COMException')]
  DNCOMException = interface(DNExternalException)
  ['{07F94112-A42E-328B-B508-702EF62BCC29}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCOMException = class(TDNGenericImport<DNCOMExceptionClass, DNCOMException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSEHExceptionClass = interface(DNExternalExceptionClass)
  ['{43736938-CD35-5CDF-A9D9-57060653C660}']
  { constructors } 

    {class} function init: DNSEHException; overload;
    {class} function init(message: string): DNSEHException; overload;
    {class} function init(message: string; inner: DNException): DNSEHException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SEHException')]
  DNSEHException = interface(DNExternalException)
  ['{CA805B13-468C-3A22-BF9A-818E97EFA6B7}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function CanResume: Boolean;
    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSEHException = class(TDNGenericImport<DNSEHExceptionClass, DNSEHException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidComObjectExceptionClass = interface(DNSystemExceptionClass)
  ['{194434B2-F775-549F-9795-61101C3A1560}']
  { constructors } 

    {class} function init: DNInvalidComObjectException; overload;
    {class} function init(message: string): DNInvalidComObjectException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidComObjectException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InvalidComObjectException')]
  DNInvalidComObjectException = interface(DNSystemException)
  ['{A7248EC6-A8A5-3D07-890E-6107F8C247E5}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidComObjectException = class(TDNGenericImport<DNInvalidComObjectExceptionClass, DNInvalidComObjectException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidOleVariantTypeExceptionClass = interface(DNSystemExceptionClass)
  ['{D02086E5-2F63-5E94-A453-600B053A873E}']
  { constructors } 

    {class} function init: DNInvalidOleVariantTypeException; overload;
    {class} function init(message: string): DNInvalidOleVariantTypeException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidOleVariantTypeException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InvalidOleVariantTypeException')]
  DNInvalidOleVariantTypeException = interface(DNSystemException)
  ['{9A944885-EDAF-3A81-A2FF-6A9D5D1ABFC7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidOleVariantTypeException = class(TDNGenericImport<DNInvalidOleVariantTypeExceptionClass, DNInvalidOleVariantTypeException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalDirectiveExceptionClass = interface(DNSystemExceptionClass)
  ['{F0FA735A-5BFC-5023-B7C7-128644803EA2}']
  { constructors } 

    {class} function init: DNMarshalDirectiveException; overload;
    {class} function init(message: string): DNMarshalDirectiveException; overload;
    {class} function init(message: string; inner: DNException): DNMarshalDirectiveException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.MarshalDirectiveException')]
  DNMarshalDirectiveException = interface(DNSystemException)
  ['{742AD1FB-B2F0-3681-B4AA-E736A3BCE4E1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMarshalDirectiveException = class(TDNGenericImport<DNMarshalDirectiveExceptionClass, DNMarshalDirectiveException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayRankMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{B40A6B4F-74E7-5E2C-9FC1-0F4481E8A816}']
  { constructors } 

    {class} function init: DNSafeArrayRankMismatchException; overload;
    {class} function init(message: string): DNSafeArrayRankMismatchException; overload;
    {class} function init(message: string; inner: DNException): DNSafeArrayRankMismatchException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SafeArrayRankMismatchException')]
  DNSafeArrayRankMismatchException = interface(DNSystemException)
  ['{4BE89AC3-603D-36B2-AB9B-9C38866F56D5}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSafeArrayRankMismatchException = class(TDNGenericImport<DNSafeArrayRankMismatchExceptionClass, DNSafeArrayRankMismatchException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{C5BFEB8B-A83F-58DF-9A55-ADFFBECF0533}']
  { constructors } 

    {class} function init: DNSafeArrayTypeMismatchException; overload;
    {class} function init(message: string): DNSafeArrayTypeMismatchException; overload;
    {class} function init(message: string; inner: DNException): DNSafeArrayTypeMismatchException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SafeArrayTypeMismatchException')]
  DNSafeArrayTypeMismatchException = interface(DNSystemException)
  ['{2D5EC63C-1B3E-3EE4-9052-EB0D0303549C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSafeArrayTypeMismatchException = class(TDNGenericImport<DNSafeArrayTypeMismatchExceptionClass, DNSafeArrayTypeMismatchException>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingExceptionClass = interface(DNSystemExceptionClass)
  ['{D8E9F7AC-319B-50DE-B991-32BF674CA660}']
  { constructors } 

    {class} function init: DNRemotingException; overload;
    {class} function init(message: string): DNRemotingException; overload;
    {class} function init(message: string; InnerException: DNException): DNRemotingException; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.RemotingException')]
  DNRemotingException = interface(DNSystemException)
  ['{24540EBC-316E-35D2-80DB-8A535CAF6A35}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRemotingException = class(TDNGenericImport<DNRemotingExceptionClass, DNRemotingException>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingTimeoutExceptionClass = interface(DNRemotingExceptionClass)
  ['{6A412DAE-5906-5088-BE3D-34138177EF3E}']
  { constructors } 

    {class} function init: DNRemotingTimeoutException; overload;
    {class} function init(message: string): DNRemotingTimeoutException; overload;
    {class} function init(message: string; InnerException: DNException): DNRemotingTimeoutException; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.RemotingTimeoutException')]
  DNRemotingTimeoutException = interface(DNRemotingException)
  ['{3CDED51A-86B4-39F0-A12A-5D1FDCED6546}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRemotingTimeoutException = class(TDNGenericImport<DNRemotingTimeoutExceptionClass, DNRemotingTimeoutException>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNServerExceptionClass = interface(DNSystemExceptionClass)
  ['{E71E2F86-DF3B-5046-8BD3-C164299596DA}']
  { constructors } 

    {class} function init: DNServerException; overload;
    {class} function init(message: string): DNServerException; overload;
    {class} function init(message: string; InnerException: DNException): DNServerException; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.ServerException')]
  DNServerException = interface(DNSystemException)
  ['{DB13821E-9835-3958-8539-1E021399AB6C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNServerException = class(TDNGenericImport<DNServerExceptionClass, DNServerException>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationExceptionClass = interface(DNSystemExceptionClass)
  ['{31BC7B0F-B7D4-5143-9179-45D38E699163}']
  { constructors } 

    {class} function init: DNSerializationException; overload;
    {class} function init(message: string): DNSerializationException; overload;
    {class} function init(message: string; innerException: DNException): DNSerializationException; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.SerializationException')]
  DNSerializationException = interface(DNSystemException)
  ['{57154C7C-EDB2-3BFD-A8BA-924C60913EBF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSerializationException = class(TDNGenericImport<DNSerializationExceptionClass, DNSerializationException>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicExceptionClass = interface(DNSystemExceptionClass)
  ['{A7D96A98-0158-51AB-9B72-04ECE10D1C77}']
  { constructors } 

    {class} function init: DNCryptographicException; overload;
    {class} function init(message: string): DNCryptographicException; overload;
    {class} function init(format: string; insert: string): DNCryptographicException; overload;
    {class} function init(message: string; inner: DNException): DNCryptographicException; overload;
    {class} function init(hr: Int32): DNCryptographicException; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CryptographicException')]
  DNCryptographicException = interface(DNSystemException)
  ['{7F8C7DC5-D8B4-3758-981F-02AF6B42461A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCryptographicException = class(TDNGenericImport<DNCryptographicExceptionClass, DNCryptographicException>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicUnexpectedOperationExceptionClass = interface(DNCryptographicExceptionClass)
  ['{63DE9E5B-25DA-5401-B962-DBF2F7740EE7}']
  { constructors } 

    {class} function init: DNCryptographicUnexpectedOperationException; overload;
    {class} function init(message: string): DNCryptographicUnexpectedOperationException; overload;
    {class} function init(format: string; insert: string): DNCryptographicUnexpectedOperationException; overload;
    {class} function init(message: string; inner: DNException): DNCryptographicUnexpectedOperationException; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CryptographicUnexpectedOperationException')]
  DNCryptographicUnexpectedOperationException = interface(DNCryptographicException)
  ['{C41FA05C-8A7A-3157-8166-4104BB4925BA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCryptographicUnexpectedOperationException = class(TDNGenericImport<DNCryptographicUnexpectedOperationExceptionClass, DNCryptographicUnexpectedOperationException>) end;

  //-------------namespace: System.Security----------------
  DNHostProtectionExceptionClass = interface(DNSystemExceptionClass)
  ['{58379B84-1B02-5463-BE89-B824DC9F19E4}']
  { constructors } 

    {class} function init: DNHostProtectionException; overload;
    {class} function init(message: string): DNHostProtectionException; overload;
    {class} function init(message: string; e: DNException): DNHostProtectionException; overload;
    {class} function init(message: string; protectedResources: DNHostProtectionResource; demandedResources: DNHostProtectionResource): DNHostProtectionException; overload;

  end;

  [DNTypeName('System.Security.HostProtectionException')]
  DNHostProtectionException = interface(DNSystemException)
  ['{ECC82A10-B731-3A01-8A17-AC0DDD7666CF}']
  { getters & setters } 

    function get_ProtectedResources: DNHostProtectionResource;
    function get_DemandedResources: DNHostProtectionResource;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ProtectedResources: DNHostProtectionResource read get_ProtectedResources;
    property DemandedResources: DNHostProtectionResource read get_DemandedResources;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHostProtectionException = class(TDNGenericImport<DNHostProtectionExceptionClass, DNHostProtectionException>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPolicyExceptionClass = interface(DNSystemExceptionClass)
  ['{0DC62854-8E27-5412-96EC-46F8F715A317}']
  { constructors } 

    {class} function init: DNPolicyException; overload;
    {class} function init(message: string): DNPolicyException; overload;
    {class} function init(message: string; exception: DNException): DNPolicyException; overload;

  end;

  [DNTypeName('System.Security.Policy.PolicyException')]
  DNPolicyException = interface(DNSystemException)
  ['{89D26277-8408-3FC8-BD44-CF5F0E614C82}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPolicyException = class(TDNGenericImport<DNPolicyExceptionClass, DNPolicyException>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityNotMappedExceptionClass = interface(DNSystemExceptionClass)
  ['{FD288ABE-06C1-52EA-9783-2AB7F56E65B5}']
  { constructors } 

    {class} function init: DNIdentityNotMappedException; overload;
    {class} function init(message: string): DNIdentityNotMappedException; overload;
    {class} function init(message: string; inner: DNException): DNIdentityNotMappedException; overload;

  end;

  [DNTypeName('System.Security.Principal.IdentityNotMappedException')]
  DNIdentityNotMappedException = interface(DNSystemException)
  ['{8E974B5A-A286-37DA-94F8-5872C500EB0E}']
  { getters & setters } 

    function get_UnmappedIdentities: DNIdentityReferenceCollection;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(serializationInfo: DNSerializationInfo; streamingContext: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property UnmappedIdentities: DNIdentityReferenceCollection read get_UnmappedIdentities;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIdentityNotMappedException = class(TDNGenericImport<DNIdentityNotMappedExceptionClass, DNIdentityNotMappedException>) end;

  //-------------namespace: System.Security----------------
  DNSecurityExceptionClass = interface(DNSystemExceptionClass)
  ['{EE9E4A65-A36A-5884-9123-098181235F50}']
  { constructors } 

    {class} function init: DNSecurityException; overload;
    {class} function init(message: string): DNSecurityException; overload;
    {class} function init(message: string; &type: DNType): DNSecurityException; overload;
    {class} function init(message: string; &type: DNType; state: string): DNSecurityException; overload;
    {class} function init(message: string; inner: DNException): DNSecurityException; overload;
    {class} function init(message: string; assemblyName: DNAssemblyName; grant: DNPermissionSet; refused: DNPermissionSet; method: DNMethodInfo; action: DNSecurityAction; demanded: DNObject; permThatFailed: DNIPermission; evidence: DNEvidence): DNSecurityException; overload;
    {class} function init(message: string; deny: DNObject; permitOnly: DNObject; method: DNMethodInfo; demanded: DNObject; permThatFailed: DNIPermission): DNSecurityException; overload;

  end;

  [DNTypeName('System.Security.SecurityException')]
  DNSecurityException = interface(DNSystemException)
  ['{EEF05C76-5C98-3685-A69C-6E1A26A7F846}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_PermissionType: DNType;
    procedure set_PermissionType(value: DNType);
    function get_FirstPermissionThatFailed: DNIPermission;
    procedure set_FirstPermissionThatFailed(value: DNIPermission);
    function get_PermissionState: string;
    procedure set_PermissionState(value: string);
    function get_Demanded: DNObject;
    procedure set_Demanded(value: DNObject);
    function get_GrantedSet: string;
    procedure set_GrantedSet(value: string);
    function get_RefusedSet: string;
    procedure set_RefusedSet(value: string);
    function get_DenySetInstance: DNObject;
    procedure set_DenySetInstance(value: DNObject);
    function get_PermitOnlySetInstance: DNObject;
    procedure set_PermitOnlySetInstance(value: DNObject);
    function get_FailedAssemblyInfo: DNAssemblyName;
    procedure set_FailedAssemblyInfo(value: DNAssemblyName);
    function get_Method: DNMethodInfo;
    procedure set_Method(value: DNMethodInfo);
    function get_Zone: DNSecurityZone;
    procedure set_Zone(value: DNSecurityZone);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property PermissionType: DNType read get_PermissionType write set_PermissionType;
    property FirstPermissionThatFailed: DNIPermission read get_FirstPermissionThatFailed write set_FirstPermissionThatFailed;
    property PermissionState: string read get_PermissionState write set_PermissionState;
    property Demanded: DNObject read get_Demanded write set_Demanded;
    property GrantedSet: string read get_GrantedSet write set_GrantedSet;
    property RefusedSet: string read get_RefusedSet write set_RefusedSet;
    property DenySetInstance: DNObject read get_DenySetInstance write set_DenySetInstance;
    property PermitOnlySetInstance: DNObject read get_PermitOnlySetInstance write set_PermitOnlySetInstance;
    property FailedAssemblyInfo: DNAssemblyName read get_FailedAssemblyInfo write set_FailedAssemblyInfo;
    property Method: DNMethodInfo read get_Method write set_Method;
    property Zone: DNSecurityZone read get_Zone write set_Zone;
    property Url: string read get_Url write set_Url;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSecurityException = class(TDNGenericImport<DNSecurityExceptionClass, DNSecurityException>) end;

  //-------------namespace: System.Security----------------
  DNVerificationExceptionClass = interface(DNSystemExceptionClass)
  ['{E9810D5F-3DEA-518A-AF66-95809DB2FE81}']
  { constructors } 

    {class} function init: DNVerificationException; overload;
    {class} function init(message: string): DNVerificationException; overload;
    {class} function init(message: string; innerException: DNException): DNVerificationException; overload;

  end;

  [DNTypeName('System.Security.VerificationException')]
  DNVerificationException = interface(DNSystemException)
  ['{EBAA029C-01C0-32B6-AAE6-FE21ADFC3E5D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNVerificationException = class(TDNGenericImport<DNVerificationExceptionClass, DNVerificationException>) end;

  //-------------namespace: System.Security----------------
  DNXmlSyntaxExceptionClass = interface(DNSystemExceptionClass)
  ['{40BFD3DB-FC29-5468-9C20-48CB4E4EF356}']
  { constructors } 

    {class} function init: DNXmlSyntaxException; overload;
    {class} function init(message: string): DNXmlSyntaxException; overload;
    {class} function init(message: string; inner: DNException): DNXmlSyntaxException; overload;
    {class} function init(lineNumber: Int32): DNXmlSyntaxException; overload;
    {class} function init(lineNumber: Int32; message: string): DNXmlSyntaxException; overload;

  end;

  [DNTypeName('System.Security.XmlSyntaxException')]
  DNXmlSyntaxException = interface(DNSystemException)
  ['{E38DA416-8050-3786-8201-46F187C15213}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSyntaxException = class(TDNGenericImport<DNXmlSyntaxExceptionClass, DNXmlSyntaxException>) end;

  //-------------namespace: System----------------
  DNStackOverflowExceptionClass = interface(DNSystemExceptionClass)
  ['{3925AC4A-15B6-51EB-8A36-F686E847BA34}']
  { constructors } 

    {class} function init: DNStackOverflowException; overload;
    {class} function init(message: string): DNStackOverflowException; overload;
    {class} function init(message: string; innerException: DNException): DNStackOverflowException; overload;

  end;

  [DNTypeName('System.StackOverflowException')]
  DNStackOverflowException = interface(DNSystemException)
  ['{9C125A6F-EAE2-3FC1-97A1-C0DCEAB0B5DF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNStackOverflowException = class(TDNGenericImport<DNStackOverflowExceptionClass, DNStackOverflowException>) end;

  //-------------namespace: System.Threading----------------
  DNAbandonedMutexExceptionClass = interface(DNSystemExceptionClass)
  ['{D212585B-00E6-5FE9-972D-5677EA759395}']
  { constructors } 

    {class} function init: DNAbandonedMutexException; overload;
    {class} function init(message: string): DNAbandonedMutexException; overload;
    {class} function init(message: string; inner: DNException): DNAbandonedMutexException; overload;
    {class} function init(location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    {class} function init(message: string; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    {class} function init(message: string; inner: DNException; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;

  end;

  [DNTypeName('System.Threading.AbandonedMutexException')]
  DNAbandonedMutexException = interface(DNSystemException)
  ['{4ECD758F-49DC-313F-BEA0-70811C6DC556}']
  { getters & setters } 

    function get_Mutex: DNMutex;
    function get_MutexIndex: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Mutex: DNMutex read get_Mutex;
    property MutexIndex: Int32 read get_MutexIndex;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAbandonedMutexException = class(TDNGenericImport<DNAbandonedMutexExceptionClass, DNAbandonedMutexException>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreFullExceptionClass = interface(DNSystemExceptionClass)
  ['{4508C02F-DBD4-5406-B012-0E7D9F16B739}']
  { constructors } 

    {class} function init: DNSemaphoreFullException; overload;
    {class} function init(message: string): DNSemaphoreFullException; overload;
    {class} function init(message: string; innerException: DNException): DNSemaphoreFullException; overload;

  end;

  [DNTypeName('System.Threading.SemaphoreFullException')]
  DNSemaphoreFullException = interface(DNSystemException)
  ['{BD2D27C7-9D3E-3803-8CE2-DE6647543B01}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSemaphoreFullException = class(TDNGenericImport<DNSemaphoreFullExceptionClass, DNSemaphoreFullException>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationLockExceptionClass = interface(DNSystemExceptionClass)
  ['{F1023D32-EC40-5504-91A5-23EA3F918C4D}']
  { constructors } 

    {class} function init: DNSynchronizationLockException; overload;
    {class} function init(message: string): DNSynchronizationLockException; overload;
    {class} function init(message: string; innerException: DNException): DNSynchronizationLockException; overload;

  end;

  [DNTypeName('System.Threading.SynchronizationLockException')]
  DNSynchronizationLockException = interface(DNSystemException)
  ['{48A75519-CB7A-3D18-B91E-BE62EE842A3E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSynchronizationLockException = class(TDNGenericImport<DNSynchronizationLockExceptionClass, DNSynchronizationLockException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadAbortExceptionClass = interface(DNSystemExceptionClass)
  ['{B8CD4289-6EF8-54F0-925B-BAAF3228359E}']
  end;

  [DNTypeName('System.Threading.ThreadAbortException')]
  DNThreadAbortException = interface(DNSystemException)
  ['{EA1CF67D-7904-36A3-BD5B-DD028985861C}']
  { getters & setters } 

    function get_ExceptionState: DNObject;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ExceptionState: DNObject read get_ExceptionState;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadAbortException = class(TDNGenericImport<DNThreadAbortExceptionClass, DNThreadAbortException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadInterruptedExceptionClass = interface(DNSystemExceptionClass)
  ['{9FE19173-0E26-55A1-A2C3-AC938A26FF03}']
  { constructors } 

    {class} function init: DNThreadInterruptedException; overload;
    {class} function init(message: string): DNThreadInterruptedException; overload;
    {class} function init(message: string; innerException: DNException): DNThreadInterruptedException; overload;

  end;

  [DNTypeName('System.Threading.ThreadInterruptedException')]
  DNThreadInterruptedException = interface(DNSystemException)
  ['{27E986E1-BAEC-3D48-82E4-14169CA8CECF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadInterruptedException = class(TDNGenericImport<DNThreadInterruptedExceptionClass, DNThreadInterruptedException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStartExceptionClass = interface(DNSystemExceptionClass)
  ['{6AFC33A3-6C39-54B6-9E00-7FCA711A685B}']
  end;

  [DNTypeName('System.Threading.ThreadStartException')]
  DNThreadStartException = interface(DNSystemException)
  ['{FB09B094-51E4-317B-B19F-AA81EDE4A0F0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadStartException = class(TDNGenericImport<DNThreadStartExceptionClass, DNThreadStartException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStateExceptionClass = interface(DNSystemExceptionClass)
  ['{C6606041-BA11-5BC9-963B-12E5A561487F}']
  { constructors } 

    {class} function init: DNThreadStateException; overload;
    {class} function init(message: string): DNThreadStateException; overload;
    {class} function init(message: string; innerException: DNException): DNThreadStateException; overload;

  end;

  [DNTypeName('System.Threading.ThreadStateException')]
  DNThreadStateException = interface(DNSystemException)
  ['{3E5509F0-1FB9-304D-8174-75D6C9AFE5DA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadStateException = class(TDNGenericImport<DNThreadStateExceptionClass, DNThreadStateException>) end;

  //-------------namespace: System----------------
  DNTimeoutExceptionClass = interface(DNSystemExceptionClass)
  ['{48ED6D44-6272-5187-9BBE-1FB1ECEE1414}']
  { constructors } 

    {class} function init: DNTimeoutException; overload;
    {class} function init(message: string): DNTimeoutException; overload;
    {class} function init(message: string; innerException: DNException): DNTimeoutException; overload;

  end;

  [DNTypeName('System.TimeoutException')]
  DNTimeoutException = interface(DNSystemException)
  ['{EAA78D4A-20A3-3FDE-AB72-D3D55E3AEFE6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTimeoutException = class(TDNGenericImport<DNTimeoutExceptionClass, DNTimeoutException>) end;

  //-------------namespace: System----------------
  DNTypeInitializationExceptionClass = interface(DNSystemExceptionClass)
  ['{58F1C620-2491-559C-B356-318F505185F7}']
  { constructors } 

    {class} function init(fullTypeName: string; innerException: DNException): DNTypeInitializationException;

  end;

  [DNTypeName('System.TypeInitializationException')]
  DNTypeInitializationException = interface(DNSystemException)
  ['{811FB5F2-9BFE-3557-83DE-1279F0B3EB55}']
  { getters & setters } 

    function get_TypeName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property TypeName: string read get_TypeName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeInitializationException = class(TDNGenericImport<DNTypeInitializationExceptionClass, DNTypeInitializationException>) end;

  //-------------namespace: System----------------
  DNTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{E6A219FF-F240-5845-AA54-96413EAB2939}']
  { constructors } 

    {class} function init: DNTypeLoadException; overload;
    {class} function init(message: string): DNTypeLoadException; overload;
    {class} function init(message: string; inner: DNException): DNTypeLoadException; overload;

  end;

  [DNTypeName('System.TypeLoadException')]
  DNTypeLoadException = interface(DNSystemException)
  ['{112BC2E7-9EF9-3648-AF9E-45C0D4B89929}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeLoadException = class(TDNGenericImport<DNTypeLoadExceptionClass, DNTypeLoadException>) end;

  //-------------namespace: System----------------
  DNDllNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{E82AD541-5CC4-5E84-923B-26B21D47988B}']
  { constructors } 

    {class} function init: DNDllNotFoundException; overload;
    {class} function init(message: string): DNDllNotFoundException; overload;
    {class} function init(message: string; inner: DNException): DNDllNotFoundException; overload;

  end;

  [DNTypeName('System.DllNotFoundException')]
  DNDllNotFoundException = interface(DNTypeLoadException)
  ['{46E97093-B2EC-3787-A9A5-470D1A27417C}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDllNotFoundException = class(TDNGenericImport<DNDllNotFoundExceptionClass, DNDllNotFoundException>) end;

  //-------------namespace: System----------------
  DNEntryPointNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{719FA744-ABBA-5657-B0A7-EB008A697BD2}']
  { constructors } 

    {class} function init: DNEntryPointNotFoundException; overload;
    {class} function init(message: string): DNEntryPointNotFoundException; overload;
    {class} function init(message: string; inner: DNException): DNEntryPointNotFoundException; overload;

  end;

  [DNTypeName('System.EntryPointNotFoundException')]
  DNEntryPointNotFoundException = interface(DNTypeLoadException)
  ['{AD326409-BF80-3E0C-BA6F-EE2C33B675A5}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEntryPointNotFoundException = class(TDNGenericImport<DNEntryPointNotFoundExceptionClass, DNEntryPointNotFoundException>) end;

  //-------------namespace: System----------------
  DNTypeAccessExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{4750D37F-BF67-5BFF-A0AA-A5D0E72DF0DD}']
  { constructors } 

    {class} function init: DNTypeAccessException; overload;
    {class} function init(message: string): DNTypeAccessException; overload;
    {class} function init(message: string; inner: DNException): DNTypeAccessException; overload;

  end;

  [DNTypeName('System.TypeAccessException')]
  DNTypeAccessException = interface(DNTypeLoadException)
  ['{BB1919CC-B729-3C1B-858F-FC4F60A204D2}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeAccessException = class(TDNGenericImport<DNTypeAccessExceptionClass, DNTypeAccessException>) end;

  //-------------namespace: System----------------
  DNTypeUnloadedExceptionClass = interface(DNSystemExceptionClass)
  ['{34783133-FB79-5B03-9E1A-9474A4B9C519}']
  { constructors } 

    {class} function init: DNTypeUnloadedException; overload;
    {class} function init(message: string): DNTypeUnloadedException; overload;
    {class} function init(message: string; innerException: DNException): DNTypeUnloadedException; overload;

  end;

  [DNTypeName('System.TypeUnloadedException')]
  DNTypeUnloadedException = interface(DNSystemException)
  ['{D6D2034D-5F67-30D7-9CC5-452F2C46694F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeUnloadedException = class(TDNGenericImport<DNTypeUnloadedExceptionClass, DNTypeUnloadedException>) end;

  //-------------namespace: System----------------
  DNUnauthorizedAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{50F4394F-7B46-554F-80F1-F81F7FF71EA1}']
  { constructors } 

    {class} function init: DNUnauthorizedAccessException; overload;
    {class} function init(message: string): DNUnauthorizedAccessException; overload;
    {class} function init(message: string; inner: DNException): DNUnauthorizedAccessException; overload;

  end;

  [DNTypeName('System.UnauthorizedAccessException')]
  DNUnauthorizedAccessException = interface(DNSystemException)
  ['{75215200-A2FE-30F6-A34B-8F1A1830358E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUnauthorizedAccessException = class(TDNGenericImport<DNUnauthorizedAccessExceptionClass, DNUnauthorizedAccessException>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNPrivilegeNotHeldExceptionClass = interface(DNUnauthorizedAccessExceptionClass)
  ['{175DCFFB-4100-556A-A823-6E105C850C46}']
  { constructors } 

    {class} function init: DNPrivilegeNotHeldException; overload;
    {class} function init(privilege: string): DNPrivilegeNotHeldException; overload;
    {class} function init(privilege: string; inner: DNException): DNPrivilegeNotHeldException; overload;

  end;

  [DNTypeName('System.Security.AccessControl.PrivilegeNotHeldException')]
  DNPrivilegeNotHeldException = interface(DNUnauthorizedAccessException)
  ['{B35EA47E-FA71-34FD-B7E2-EBC050A4FB5A}']
  { getters & setters } 

    function get_PrivilegeName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property PrivilegeName: string read get_PrivilegeName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrivilegeNotHeldException = class(TDNGenericImport<DNPrivilegeNotHeldExceptionClass, DNPrivilegeNotHeldException>) end;

  //-------------namespace: System.Threading----------------
  DNLockRecursionExceptionClass = interface(DNExceptionClass)
  ['{B5864EC7-518B-5D0E-A24C-8E3E1A316A82}']
  { constructors } 

    {class} function init: DNLockRecursionException; overload;
    {class} function init(message: string): DNLockRecursionException; overload;
    {class} function init(message: string; innerException: DNException): DNLockRecursionException; overload;

  end;

  [DNTypeName('System.Threading.LockRecursionException')]
  DNLockRecursionException = interface(DNException)
  ['{31F76568-0C8D-3653-9897-03EF1590D4B0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNLockRecursionException = class(TDNGenericImport<DNLockRecursionExceptionClass, DNLockRecursionException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerExceptionClass = interface(DNExceptionClass)
  ['{67E072A9-3E80-5502-8E43-06EA502825F6}']
  { constructors } 

    {class} function init: DNTaskSchedulerException; overload;
    {class} function init(message: string): DNTaskSchedulerException; overload;
    {class} function init(innerException: DNException): DNTaskSchedulerException; overload;
    {class} function init(message: string; innerException: DNException): DNTaskSchedulerException; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskSchedulerException')]
  DNTaskSchedulerException = interface(DNException)
  ['{8173E27C-D446-3923-9852-E270F41F5F67}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaskSchedulerException = class(TDNGenericImport<DNTaskSchedulerExceptionClass, DNTaskSchedulerException>) end;

  //-------------namespace: System----------------
  DNTimeZoneNotFoundExceptionClass = interface(DNExceptionClass)
  ['{C1358D5B-A4C8-56BD-B1F5-9460D35F2521}']
  { constructors } 

    {class} function init(message: string): DNTimeZoneNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNTimeZoneNotFoundException; overload;
    {class} function init: DNTimeZoneNotFoundException; overload;

  end;

  [DNTypeName('System.TimeZoneNotFoundException')]
  DNTimeZoneNotFoundException = interface(DNException)
  ['{AAAFA086-E0CE-34FC-B534-7A000F18B2B7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTimeZoneNotFoundException = class(TDNGenericImport<DNTimeZoneNotFoundExceptionClass, DNTimeZoneNotFoundException>) end;

  //-------------namespace: System----------------
  DNFormattableStringClass = interface(DNObjectClass)
  ['{1E464CE8-4442-5DC4-9591-96DAC3C29FD1}']
  { static methods } 

    {class} function Invariant(formattable: DNFormattableString): string;

  end;

  [DNTypeName('System.FormattableString')]
  DNFormattableString = interface(DNIFormattable)
  ['{9ECB37AB-3E0F-38F3-A068-8029F843560E}']
  { getters & setters } 

    function get_Format: string;
    function get_ArgumentCount: Int32;

  { methods } 

    function ToString: string; overload;
    function GetArguments: TArray<DNObject>;
    function GetArgument(index: Int32): DNObject;
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Format: string read get_Format;
    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  TDNFormattableString = class(TDNGenericImport<DNFormattableStringClass, DNFormattableString>) end;

  //-------------namespace: System----------------
  DNGCClass = interface(DNObjectClass)
  ['{0EEC180E-D962-51C8-982E-51A3A59CEFC5}']
  { static getter & setter } 

    {class} function get_MaxGeneration: Int32;

  { static methods } 

    {class} procedure AddMemoryPressure(bytesAllocated: Int64);
    {class} procedure RemoveMemoryPressure(bytesAllocated: Int64);
    {class} procedure Collect(generation: Int32); overload;
    {class} procedure Collect; overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode); overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean); overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean; compacting: Boolean); overload;
    {class} function CollectionCount(generation: Int32): Int32;
    {class} procedure KeepAlive(obj: DNObject);
    {class} function GetGeneration(wo: DNWeakReference): Int32; overload;
    {class} procedure WaitForPendingFinalizers;
    {class} procedure SuppressFinalize(obj: DNObject);
    {class} procedure ReRegisterForFinalize(obj: DNObject);
    {class} function GetTotalMemory(forceFullCollection: Boolean): Int64;
    {class} function GetAllocatedBytesForCurrentThread: Int64;
    {class} procedure RegisterForFullGCNotification(maxGenerationThreshold: Int32; largeObjectHeapThreshold: Int32);
    {class} procedure CancelFullGCNotification;
    {class} function WaitForFullGCApproach: DNGCNotificationStatus; overload;
    {class} function WaitForFullGCApproach(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    {class} function WaitForFullGCComplete: DNGCNotificationStatus; overload;
    {class} function WaitForFullGCComplete(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    {class} procedure EndNoGCRegion;
    {class} function GetGeneration(obj: DNObject): Int32; overload;

  { static propertys } 

    {class} property MaxGeneration: Int32 read get_MaxGeneration;
  end;

  [DNTypeName('System.GC')]
  DNGC = interface(DNObject)
  ['{F87CDD00-CBF2-365C-BC2D-78CECD0CBF49}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGC = class(TDNGenericImport<DNGCClass, DNGC>) end;

  //-------------namespace: System.Globalization----------------
  DNCalendarClass = interface(DNObjectClass)
  ['{DB3BF168-8DD7-561C-8A9C-E307E7BBD23B}']
  { static methods } 

    {class} function ReadOnly(calendar: DNCalendar): DNCalendar;

  end;

  [DNTypeName('System.Globalization.Calendar')]
  DNCalendar = interface(DNICloneable)
  ['{8A93390F-4331-317F-B450-1E0E4914E335}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);

  { methods } 

    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
  end;

  TDNCalendar = class(TDNGenericImport<DNCalendarClass, DNCalendar>)
  public const
   CurrentEra = 0;
  end;

  //-------------namespace: System.Globalization----------------
  DNEastAsianLunisolarCalendarClass = interface(DNCalendarClass)
  ['{3331C1EB-0D29-50BA-AAF0-E9AB14BE4594}']
  end;

  [DNTypeName('System.Globalization.EastAsianLunisolarCalendar')]
  DNEastAsianLunisolarCalendar = interface(DNCalendar)
  ['{47FF8F5E-F989-39FF-A985-898BF36109BD}']
  { getters & setters } 

    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;

  { methods } 

    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetEra(time: DNDateTime): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Eras: TArray<Int32> read get_Eras;
  end;

  TDNEastAsianLunisolarCalendar = class(TDNGenericImport<DNEastAsianLunisolarCalendarClass, DNEastAsianLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNChineseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{7CA6CB7C-9928-5774-B8A8-81569C4D314A}']
  { constructors } 

    {class} function init: DNChineseLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.ChineseLunisolarCalendar')]
  DNChineseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{9EFD4CF2-0BAA-350B-9D73-0974077B2F7B}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNChineseLunisolarCalendar = class(TDNGenericImport<DNChineseLunisolarCalendarClass, DNChineseLunisolarCalendar>)
  public const
   ChineseEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{90CF3586-C363-58C1-838A-8BC0150F3E4B}']
  { constructors } 

    {class} function init: DNJapaneseLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.JapaneseLunisolarCalendar')]
  DNJapaneseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{2C731933-62A6-31A0-AFE1-1034F46361D2}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseLunisolarCalendar = class(TDNGenericImport<DNJapaneseLunisolarCalendarClass, DNJapaneseLunisolarCalendar>)
  public const
   JapaneseEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNKoreanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{5DDA5CC1-0C10-5DBE-B934-9B8C17672471}']
  { constructors } 

    {class} function init: DNKoreanLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.KoreanLunisolarCalendar')]
  DNKoreanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{12426E70-50E2-3129-B617-E252B36ECE89}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanLunisolarCalendar = class(TDNGenericImport<DNKoreanLunisolarCalendarClass, DNKoreanLunisolarCalendar>)
  public const
   GregorianEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{D10A3A5C-EC88-5101-990D-9EFCB0D29F66}']
  { constructors } 

    {class} function init: DNTaiwanLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.TaiwanLunisolarCalendar')]
  DNTaiwanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{2B4B0612-E1F4-376F-A9B9-86BA3F72A670}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanLunisolarCalendar = class(TDNGenericImport<DNTaiwanLunisolarCalendarClass, DNTaiwanLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNGregorianCalendarClass = interface(DNCalendarClass)
  ['{DA6844CE-9D36-55BE-925B-722F6258099B}']
  { constructors } 

    {class} function init: DNGregorianCalendar; overload;
    {class} function init(&type: DNGregorianCalendarTypes): DNGregorianCalendar; overload;

  end;

  [DNTypeName('System.Globalization.GregorianCalendar')]
  DNGregorianCalendar = interface(DNCalendar)
  ['{68F8AEA9-1968-35B9-8A0E-6FDC637A4F8E}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_CalendarType: DNGregorianCalendarTypes;
    procedure set_CalendarType(value: DNGregorianCalendarTypes);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property CalendarType: DNGregorianCalendarTypes read get_CalendarType write set_CalendarType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNGregorianCalendar = class(TDNGenericImport<DNGregorianCalendarClass, DNGregorianCalendar>)
  public const
   ADEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNHebrewCalendarClass = interface(DNCalendarClass)
  ['{009AEC80-CEA3-56D1-9263-3651C5FE582F}']
  { constructors } 

    {class} function init: DNHebrewCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_HebrewEra: Int32;

  { static fields } 

    {class} property HebrewEra: Int32 read __fakeFieldGet_HebrewEra;

  end;

  [DNTypeName('System.Globalization.HebrewCalendar')]
  DNHebrewCalendar = interface(DNCalendar)
  ['{2206D773-CA1C-3258-9456-CEB7706C3710}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHebrewCalendar = class(TDNGenericImport<DNHebrewCalendarClass, DNHebrewCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNHijriCalendarClass = interface(DNCalendarClass)
  ['{10A63BFD-4532-5D3E-B20F-44B093781F78}']
  { constructors } 

    {class} function init: DNHijriCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_HijriEra: Int32;

  { static fields } 

    {class} property HijriEra: Int32 read __fakeFieldGet_HijriEra;

  end;

  [DNTypeName('System.Globalization.HijriCalendar')]
  DNHijriCalendar = interface(DNCalendar)
  ['{EE832CE3-06CA-33EF-8F01-61C7C218BD7E}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_HijriAdjustment: Int32;
    procedure set_HijriAdjustment(value: Int32);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property HijriAdjustment: Int32 read get_HijriAdjustment write set_HijriAdjustment;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHijriCalendar = class(TDNGenericImport<DNHijriCalendarClass, DNHijriCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseCalendarClass = interface(DNCalendarClass)
  ['{DE8D0BFD-3F41-5129-B72A-6DD1FEC8384A}']
  { constructors } 

    {class} function init: DNJapaneseCalendar;

  end;

  [DNTypeName('System.Globalization.JapaneseCalendar')]
  DNJapaneseCalendar = interface(DNCalendar)
  ['{374050DD-6190-3257-8812-8230BF095147}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseCalendar = class(TDNGenericImport<DNJapaneseCalendarClass, DNJapaneseCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJulianCalendarClass = interface(DNCalendarClass)
  ['{195543FC-8693-5D44-B834-49E6ACCCF95F}']
  { constructors } 

    {class} function init: DNJulianCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_JulianEra: Int32;

  { static fields } 

    {class} property JulianEra: Int32 read __fakeFieldGet_JulianEra;

  end;

  [DNTypeName('System.Globalization.JulianCalendar')]
  DNJulianCalendar = interface(DNCalendar)
  ['{5C3E6CE8-B218-3762-883C-91BC987CDC2D}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJulianCalendar = class(TDNGenericImport<DNJulianCalendarClass, DNJulianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNKoreanCalendarClass = interface(DNCalendarClass)
  ['{31013C66-A034-57FE-B3BD-0BE524112D14}']
  { constructors } 

    {class} function init: DNKoreanCalendar;

  end;

  [DNTypeName('System.Globalization.KoreanCalendar')]
  DNKoreanCalendar = interface(DNCalendar)
  ['{1A06A4DC-E239-3717-89E1-D0683F3A5320}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanCalendar = class(TDNGenericImport<DNKoreanCalendarClass, DNKoreanCalendar>)
  public const
   KoreanEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNPersianCalendarClass = interface(DNCalendarClass)
  ['{97514E48-A38C-5F10-9838-1CC48E73C7E1}']
  { constructors } 

    {class} function init: DNPersianCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_PersianEra: Int32;

  { static fields } 

    {class} property PersianEra: Int32 read __fakeFieldGet_PersianEra;

  end;

  [DNTypeName('System.Globalization.PersianCalendar')]
  DNPersianCalendar = interface(DNCalendar)
  ['{507FD334-04AF-31A7-8026-4C544B703A9D}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNPersianCalendar = class(TDNGenericImport<DNPersianCalendarClass, DNPersianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanCalendarClass = interface(DNCalendarClass)
  ['{BDA16249-B24A-5C2D-A28D-CB60412B285C}']
  { constructors } 

    {class} function init: DNTaiwanCalendar;

  end;

  [DNTypeName('System.Globalization.TaiwanCalendar')]
  DNTaiwanCalendar = interface(DNCalendar)
  ['{769B8B68-64F7-3B61-B744-160A9FCC3216}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanCalendar = class(TDNGenericImport<DNTaiwanCalendarClass, DNTaiwanCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNThaiBuddhistCalendarClass = interface(DNCalendarClass)
  ['{D2263F6A-4D00-539C-BF95-2AA697E83470}']
  { constructors } 

    {class} function init: DNThaiBuddhistCalendar;

  end;

  [DNTypeName('System.Globalization.ThaiBuddhistCalendar')]
  DNThaiBuddhistCalendar = interface(DNCalendar)
  ['{EC3DAC94-DF80-3017-B381-B13DCED6C4D8}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNThaiBuddhistCalendar = class(TDNGenericImport<DNThaiBuddhistCalendarClass, DNThaiBuddhistCalendar>)
  public const
   ThaiBuddhistEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNUmAlQuraCalendarClass = interface(DNCalendarClass)
  ['{F89B0FC2-834B-53CA-A2E2-15081A0AA8A6}']
  { constructors } 

    {class} function init: DNUmAlQuraCalendar;

  end;

  [DNTypeName('System.Globalization.UmAlQuraCalendar')]
  DNUmAlQuraCalendar = interface(DNCalendar)
  ['{68B67DA9-7212-396E-9528-33F70547660E}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNUmAlQuraCalendar = class(TDNGenericImport<DNUmAlQuraCalendarClass, DNUmAlQuraCalendar>)
  public const
   UmAlQuraEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNCharUnicodeInfoClass = interface(DNObjectClass)
  ['{7A802C62-28B9-5D50-956B-7A777AECC3BE}']
  { static methods } 

    {class} function GetNumericValue(ch: Char): Double; overload;
    {class} function GetNumericValue(s: string; index: Int32): Double; overload;
    {class} function GetDecimalDigitValue(ch: Char): Int32; overload;
    {class} function GetDecimalDigitValue(s: string; index: Int32): Int32; overload;
    {class} function GetDigitValue(ch: Char): Int32; overload;
    {class} function GetDigitValue(s: string; index: Int32): Int32; overload;
    {class} function GetUnicodeCategory(ch: Char): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(s: string; index: Int32): DNUnicodeCategory; overload;

  end;

  [DNTypeName('System.Globalization.CharUnicodeInfo')]
  DNCharUnicodeInfo = interface(DNObject)
  ['{56321278-32BA-3A80-8E75-15114E9D16EF}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCharUnicodeInfo = class(TDNGenericImport<DNCharUnicodeInfoClass, DNCharUnicodeInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCompareInfoClass = interface(DNObjectClass)
  ['{587F374E-F15C-5AC0-A500-D0A1F36BECDA}']
  { static methods } 

    {class} function GetCompareInfo(culture: Int32; assembly: DNAssembly): DNCompareInfo; overload;
    {class} function GetCompareInfo(culture: Int32): DNCompareInfo; overload;
    {class} function GetCompareInfo(name: string): DNCompareInfo; overload;
    {class} function IsSortable(ch: Char): Boolean; overload;
    {class} function IsSortable(text: string): Boolean; overload;
    {class} function GetCompareInfo(name: string; assembly: DNAssembly): DNCompareInfo; overload;

  end;

  [DNTypeName('System.Globalization.CompareInfo')]
  DNCompareInfo = interface(DNIDeserializationCallback)
  ['{6747FF61-F8DA-3689-BB01-47F2266AE261}']
  { getters & setters } 

    function get_Name: string;
    function get_LCID: Int32;
    function get_Version: DNSortVersion;

  { methods } 

    function Compare(string1: string; string2: string; options: DNCompareOptions): Int32; overload;
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32; options: DNCompareOptions): Int32; overload;
    function IsPrefix(source: string; prefix: string; options: DNCompareOptions): Boolean; overload;
    function IsSuffix(source: string; suffix: string; options: DNCompareOptions): Boolean; overload;
    function Compare(string1: string; string2: string): Int32; overload;
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32): Int32; overload;
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32; options: DNCompareOptions): Int32; overload;
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32): Int32; overload;
    function IsPrefix(source: string; prefix: string): Boolean; overload;
    function IsSuffix(source: string; suffix: string): Boolean; overload;
    function IndexOf(source: string; value: Char): Int32; overload;
    function IndexOf(source: string; value: string): Int32; overload;
    function IndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char): Int32; overload;
    function LastIndexOf(source: string; value: string): Int32; overload;
    function LastIndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function GetSortKey(source: string; options: DNCompareOptions): DNSortKey; overload;
    function GetSortKey(source: string): DNSortKey; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32; overload;
    function GetHashCode(source: string; options: DNCompareOptions): Int32; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property LCID: Int32 read get_LCID;
    property Version: DNSortVersion read get_Version;
  end;

  TDNCompareInfo = class(TDNGenericImport<DNCompareInfoClass, DNCompareInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureInfoClass = interface(DNObjectClass)
  ['{EFE51704-6D35-570C-9870-36AA35762440}']
  { static getter & setter } 

    {class} function get_CurrentCulture: DNCultureInfo;
    {class} procedure set_CurrentCulture(value: DNCultureInfo);
    {class} function get_CurrentUICulture: DNCultureInfo;
    {class} procedure set_CurrentUICulture(value: DNCultureInfo);
    {class} function get_InstalledUICulture: DNCultureInfo;
    {class} function get_DefaultThreadCurrentCulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentCulture(value: DNCultureInfo);
    {class} function get_DefaultThreadCurrentUICulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentUICulture(value: DNCultureInfo);
    {class} function get_InvariantCulture: DNCultureInfo;

  { constructors } 

    {class} function init(name: string): DNCultureInfo; overload;
    {class} function init(name: string; useUserOverride: Boolean): DNCultureInfo; overload;
    {class} function init(culture: Int32): DNCultureInfo; overload;
    {class} function init(culture: Int32; useUserOverride: Boolean): DNCultureInfo; overload;

  { static methods } 

    {class} function CreateSpecificCulture(name: string): DNCultureInfo;
    {class} function GetCultures(types: DNCultureTypes): TArray<DNCultureInfo>;
    {class} function ReadOnly(ci: DNCultureInfo): DNCultureInfo;
    {class} function GetCultureInfo(culture: Int32): DNCultureInfo; overload;
    {class} function GetCultureInfo(name: string): DNCultureInfo; overload;
    {class} function GetCultureInfo(name: string; altName: string): DNCultureInfo; overload;
    {class} function GetCultureInfoByIetfLanguageTag(name: string): DNCultureInfo;

  { static propertys } 

    {class} property CurrentCulture: DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    {class} property CurrentUICulture: DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
    {class} property InstalledUICulture: DNCultureInfo read get_InstalledUICulture;
    {class} property DefaultThreadCurrentCulture: DNCultureInfo read get_DefaultThreadCurrentCulture write set_DefaultThreadCurrentCulture;
    {class} property DefaultThreadCurrentUICulture: DNCultureInfo read get_DefaultThreadCurrentUICulture write set_DefaultThreadCurrentUICulture;
    {class} property InvariantCulture: DNCultureInfo read get_InvariantCulture;
  end;

  [DNTypeName('System.Globalization.CultureInfo')]
  DNCultureInfo = interface(DNICloneable)
  ['{348A8C6D-464A-3F21-856B-061370D54599}']
  { getters & setters } 

    function get_Parent: DNCultureInfo;
    function get_LCID: Int32;
    function get_KeyboardLayoutId: Int32;
    function get_Name: string;
    function get_IetfLanguageTag: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_EnglishName: string;
    function get_TwoLetterISOLanguageName: string;
    function get_ThreeLetterISOLanguageName: string;
    function get_ThreeLetterWindowsLanguageName: string;
    function get_CompareInfo: DNCompareInfo;
    function get_TextInfo: DNTextInfo;
    function get_IsNeutralCulture: Boolean;
    function get_CultureTypes: DNCultureTypes;
    function get_NumberFormat: DNNumberFormatInfo;
    procedure set_NumberFormat(value: DNNumberFormatInfo);
    function get_DateTimeFormat: DNDateTimeFormatInfo;
    procedure set_DateTimeFormat(value: DNDateTimeFormatInfo);
    function get_Calendar: DNCalendar;
    function get_OptionalCalendars: TArray<DNCalendar>;
    function get_UseUserOverride: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetFormat(formatType: DNType): DNObject;
    procedure ClearCachedData;
    function GetConsoleFallbackUICulture: DNCultureInfo;
    function Clone: DNObject;
    function GetType: DNType;

  { propertys } 

    property Parent: DNCultureInfo read get_Parent;
    property LCID: Int32 read get_LCID;
    property KeyboardLayoutId: Int32 read get_KeyboardLayoutId;
    property Name: string read get_Name;
    property IetfLanguageTag: string read get_IetfLanguageTag;
    property DisplayName: string read get_DisplayName;
    property NativeName: string read get_NativeName;
    property EnglishName: string read get_EnglishName;
    property TwoLetterISOLanguageName: string read get_TwoLetterISOLanguageName;
    property ThreeLetterISOLanguageName: string read get_ThreeLetterISOLanguageName;
    property ThreeLetterWindowsLanguageName: string read get_ThreeLetterWindowsLanguageName;
    property CompareInfo: DNCompareInfo read get_CompareInfo;
    property TextInfo: DNTextInfo read get_TextInfo;
    property IsNeutralCulture: Boolean read get_IsNeutralCulture;
    property CultureTypes: DNCultureTypes read get_CultureTypes;
    property NumberFormat: DNNumberFormatInfo read get_NumberFormat write set_NumberFormat;
    property DateTimeFormat: DNDateTimeFormatInfo read get_DateTimeFormat write set_DateTimeFormat;
    property Calendar: DNCalendar read get_Calendar;
    property OptionalCalendars: TArray<DNCalendar> read get_OptionalCalendars;
    property UseUserOverride: Boolean read get_UseUserOverride;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNCultureInfo = class(TDNGenericImport<DNCultureInfoClass, DNCultureInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDateTimeFormatInfoClass = interface(DNObjectClass)
  ['{A5DE77F9-CC5B-5F46-9AC0-3176693C196D}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNDateTimeFormatInfo;
    {class} function get_CurrentInfo: DNDateTimeFormatInfo;

  { constructors } 

    {class} function init: DNDateTimeFormatInfo;

  { static methods } 

    {class} function GetInstance(provider: DNIFormatProvider): DNDateTimeFormatInfo;
    {class} function ReadOnly(dtfi: DNDateTimeFormatInfo): DNDateTimeFormatInfo;

  { static propertys } 

    {class} property InvariantInfo: DNDateTimeFormatInfo read get_InvariantInfo;
    {class} property CurrentInfo: DNDateTimeFormatInfo read get_CurrentInfo;
  end;

  [DNTypeName('System.Globalization.DateTimeFormatInfo')]
  DNDateTimeFormatInfo = interface(DNICloneable)
  ['{70A738D1-1BC5-3175-BD42-603E2B82C08B}']
  { getters & setters } 

    function get_AMDesignator: string;
    procedure set_AMDesignator(value: string);
    function get_Calendar: DNCalendar;
    procedure set_Calendar(value: DNCalendar);
    function get_DateSeparator: string;
    procedure set_DateSeparator(value: string);
    function get_FirstDayOfWeek: DNDayOfWeek;
    procedure set_FirstDayOfWeek(value: DNDayOfWeek);
    function get_CalendarWeekRule: DNCalendarWeekRule;
    procedure set_CalendarWeekRule(value: DNCalendarWeekRule);
    function get_FullDateTimePattern: string;
    procedure set_FullDateTimePattern(value: string);
    function get_LongDatePattern: string;
    procedure set_LongDatePattern(value: string);
    function get_LongTimePattern: string;
    procedure set_LongTimePattern(value: string);
    function get_MonthDayPattern: string;
    procedure set_MonthDayPattern(value: string);
    function get_PMDesignator: string;
    procedure set_PMDesignator(value: string);
    function get_RFC1123Pattern: string;
    function get_ShortDatePattern: string;
    procedure set_ShortDatePattern(value: string);
    function get_ShortTimePattern: string;
    procedure set_ShortTimePattern(value: string);
    function get_SortableDateTimePattern: string;
    function get_TimeSeparator: string;
    procedure set_TimeSeparator(value: string);
    function get_UniversalSortableDateTimePattern: string;
    function get_YearMonthPattern: string;
    procedure set_YearMonthPattern(value: string);
    function get_AbbreviatedDayNames: TArray<string>;
    procedure set_AbbreviatedDayNames(value: TArray<string>);
    function get_ShortestDayNames: TArray<string>;
    procedure set_ShortestDayNames(value: TArray<string>);
    function get_DayNames: TArray<string>;
    procedure set_DayNames(value: TArray<string>);
    function get_AbbreviatedMonthNames: TArray<string>;
    procedure set_AbbreviatedMonthNames(value: TArray<string>);
    function get_MonthNames: TArray<string>;
    procedure set_MonthNames(value: TArray<string>);
    function get_IsReadOnly: Boolean;
    function get_NativeCalendarName: string;
    function get_AbbreviatedMonthGenitiveNames: TArray<string>;
    procedure set_AbbreviatedMonthGenitiveNames(value: TArray<string>);
    function get_MonthGenitiveNames: TArray<string>;
    procedure set_MonthGenitiveNames(value: TArray<string>);

  { methods } 

    function GetAllDateTimePatterns(format: Char): TArray<string>; overload;
    function GetFormat(formatType: DNType): DNObject;
    function Clone: DNObject;
    function GetEra(eraName: string): Int32;
    function GetEraName(era: Int32): string;
    function GetAbbreviatedEraName(era: Int32): string;
    function GetAbbreviatedDayName(dayofweek: DNDayOfWeek): string;
    function GetShortestDayName(dayOfWeek: DNDayOfWeek): string;
    function GetAllDateTimePatterns: TArray<string>; overload;
    function GetDayName(dayofweek: DNDayOfWeek): string;
    function GetAbbreviatedMonthName(month: Int32): string;
    function GetMonthName(month: Int32): string;
    procedure SetAllDateTimePatterns(patterns: TArray<string>; format: Char);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AMDesignator: string read get_AMDesignator write set_AMDesignator;
    property Calendar: DNCalendar read get_Calendar write set_Calendar;
    property DateSeparator: string read get_DateSeparator write set_DateSeparator;
    property FirstDayOfWeek: DNDayOfWeek read get_FirstDayOfWeek write set_FirstDayOfWeek;
    property CalendarWeekRule: DNCalendarWeekRule read get_CalendarWeekRule write set_CalendarWeekRule;
    property FullDateTimePattern: string read get_FullDateTimePattern write set_FullDateTimePattern;
    property LongDatePattern: string read get_LongDatePattern write set_LongDatePattern;
    property LongTimePattern: string read get_LongTimePattern write set_LongTimePattern;
    property MonthDayPattern: string read get_MonthDayPattern write set_MonthDayPattern;
    property PMDesignator: string read get_PMDesignator write set_PMDesignator;
    property RFC1123Pattern: string read get_RFC1123Pattern;
    property ShortDatePattern: string read get_ShortDatePattern write set_ShortDatePattern;
    property ShortTimePattern: string read get_ShortTimePattern write set_ShortTimePattern;
    property SortableDateTimePattern: string read get_SortableDateTimePattern;
    property TimeSeparator: string read get_TimeSeparator write set_TimeSeparator;
    property UniversalSortableDateTimePattern: string read get_UniversalSortableDateTimePattern;
    property YearMonthPattern: string read get_YearMonthPattern write set_YearMonthPattern;
    property AbbreviatedDayNames: TArray<string> read get_AbbreviatedDayNames write set_AbbreviatedDayNames;
    property ShortestDayNames: TArray<string> read get_ShortestDayNames write set_ShortestDayNames;
    property DayNames: TArray<string> read get_DayNames write set_DayNames;
    property AbbreviatedMonthNames: TArray<string> read get_AbbreviatedMonthNames write set_AbbreviatedMonthNames;
    property MonthNames: TArray<string> read get_MonthNames write set_MonthNames;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property NativeCalendarName: string read get_NativeCalendarName;
    property AbbreviatedMonthGenitiveNames: TArray<string> read get_AbbreviatedMonthGenitiveNames write set_AbbreviatedMonthGenitiveNames;
    property MonthGenitiveNames: TArray<string> read get_MonthGenitiveNames write set_MonthGenitiveNames;
  end;

  TDNDateTimeFormatInfo = class(TDNGenericImport<DNDateTimeFormatInfoClass, DNDateTimeFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDaylightTimeClass = interface(DNObjectClass)
  ['{263BD66D-7B2B-5198-91C7-B184CDF2CD99}']
  { constructors } 

    {class} function init(start: DNDateTime; &end: DNDateTime; delta: DNTimeSpan): DNDaylightTime;

  end;

  [DNTypeName('System.Globalization.DaylightTime')]
  DNDaylightTime = interface(DNObject)
  ['{5050FE97-72A6-3BC6-92F2-9DD0413041E3}']
  { getters & setters } 

    function get_Start: DNDateTime;
    function get_End: DNDateTime;
    function get_Delta: DNTimeSpan;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Start: DNDateTime read get_Start;
    property &End: DNDateTime read get_End;
    property Delta: DNTimeSpan read get_Delta;
  end;

  TDNDaylightTime = class(TDNGenericImport<DNDaylightTimeClass, DNDaylightTime>) end;

  //-------------namespace: System.Globalization----------------
  DNGlobalizationExtensionsClass = interface(DNObjectClass)
  ['{C0D66C02-665E-521F-908E-858B49931A6C}']
  { static methods } 

    {class} function GetStringComparer(compareInfo: DNCompareInfo; options: DNCompareOptions): DNStringComparer;

  end;

  [DNTypeName('System.Globalization.GlobalizationExtensions')]
  DNGlobalizationExtensions = interface(DNObject)
  ['{DAA5C118-9A71-3F66-99FE-F9D65350559E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGlobalizationExtensions = class(TDNGenericImport<DNGlobalizationExtensionsClass, DNGlobalizationExtensions>) end;

  //-------------namespace: System.Globalization----------------
  DNIdnMappingClass = interface(DNObjectClass)
  ['{AFB48576-EB8D-53AE-ACD9-82E699378DB5}']
  { constructors } 

    {class} function init: DNIdnMapping;

  end;

  [DNTypeName('System.Globalization.IdnMapping')]
  DNIdnMapping = interface(DNObject)
  ['{0BA2A2AC-A4D5-38CB-AD03-A0D5B6EC4646}']
  { getters & setters } 

    function get_AllowUnassigned: Boolean;
    procedure set_AllowUnassigned(value: Boolean);
    function get_UseStd3AsciiRules: Boolean;
    procedure set_UseStd3AsciiRules(value: Boolean);

  { methods } 

    function GetAscii(unicode: string): string; overload;
    function GetAscii(unicode: string; index: Int32): string; overload;
    function GetUnicode(ascii: string): string; overload;
    function GetUnicode(ascii: string; index: Int32): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetAscii(unicode: string; index: Int32; count: Int32): string; overload;
    function GetUnicode(ascii: string; index: Int32; count: Int32): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AllowUnassigned: Boolean read get_AllowUnassigned write set_AllowUnassigned;
    property UseStd3AsciiRules: Boolean read get_UseStd3AsciiRules write set_UseStd3AsciiRules;
  end;

  TDNIdnMapping = class(TDNGenericImport<DNIdnMappingClass, DNIdnMapping>) end;

  //-------------namespace: System.Globalization----------------
  DNNumberFormatInfoClass = interface(DNObjectClass)
  ['{3F9AEEBC-1C35-5460-AA32-8077963728E8}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNNumberFormatInfo;
    {class} function get_CurrentInfo: DNNumberFormatInfo;

  { constructors } 

    {class} function init: DNNumberFormatInfo;

  { static methods } 

    {class} function GetInstance(formatProvider: DNIFormatProvider): DNNumberFormatInfo;
    {class} function ReadOnly(nfi: DNNumberFormatInfo): DNNumberFormatInfo;

  { static propertys } 

    {class} property InvariantInfo: DNNumberFormatInfo read get_InvariantInfo;
    {class} property CurrentInfo: DNNumberFormatInfo read get_CurrentInfo;
  end;

  [DNTypeName('System.Globalization.NumberFormatInfo')]
  DNNumberFormatInfo = interface(DNICloneable)
  ['{146A47AB-A2CF-3587-BB25-2B286D7566B4}']
  { getters & setters } 

    function get_CurrencyDecimalDigits: Int32;
    procedure set_CurrencyDecimalDigits(value: Int32);
    function get_CurrencyDecimalSeparator: string;
    procedure set_CurrencyDecimalSeparator(value: string);
    function get_IsReadOnly: Boolean;
    function get_CurrencyGroupSizes: TArray<Int32>;
    procedure set_CurrencyGroupSizes(value: TArray<Int32>);
    function get_NumberGroupSizes: TArray<Int32>;
    procedure set_NumberGroupSizes(value: TArray<Int32>);
    function get_PercentGroupSizes: TArray<Int32>;
    procedure set_PercentGroupSizes(value: TArray<Int32>);
    function get_CurrencyGroupSeparator: string;
    procedure set_CurrencyGroupSeparator(value: string);
    function get_CurrencySymbol: string;
    procedure set_CurrencySymbol(value: string);
    function get_NaNSymbol: string;
    procedure set_NaNSymbol(value: string);
    function get_CurrencyNegativePattern: Int32;
    procedure set_CurrencyNegativePattern(value: Int32);
    function get_NumberNegativePattern: Int32;
    procedure set_NumberNegativePattern(value: Int32);
    function get_PercentPositivePattern: Int32;
    procedure set_PercentPositivePattern(value: Int32);
    function get_PercentNegativePattern: Int32;
    procedure set_PercentNegativePattern(value: Int32);
    function get_NegativeInfinitySymbol: string;
    procedure set_NegativeInfinitySymbol(value: string);
    function get_NegativeSign: string;
    procedure set_NegativeSign(value: string);
    function get_NumberDecimalDigits: Int32;
    procedure set_NumberDecimalDigits(value: Int32);
    function get_NumberDecimalSeparator: string;
    procedure set_NumberDecimalSeparator(value: string);
    function get_NumberGroupSeparator: string;
    procedure set_NumberGroupSeparator(value: string);
    function get_CurrencyPositivePattern: Int32;
    procedure set_CurrencyPositivePattern(value: Int32);
    function get_PositiveInfinitySymbol: string;
    procedure set_PositiveInfinitySymbol(value: string);
    function get_PositiveSign: string;
    procedure set_PositiveSign(value: string);
    function get_PercentDecimalDigits: Int32;
    procedure set_PercentDecimalDigits(value: Int32);
    function get_PercentDecimalSeparator: string;
    procedure set_PercentDecimalSeparator(value: string);
    function get_PercentGroupSeparator: string;
    procedure set_PercentGroupSeparator(value: string);
    function get_PercentSymbol: string;
    procedure set_PercentSymbol(value: string);
    function get_PerMilleSymbol: string;
    procedure set_PerMilleSymbol(value: string);
    function get_NativeDigits: TArray<string>;
    procedure set_NativeDigits(value: TArray<string>);
    function get_DigitSubstitution: DNDigitShapes;
    procedure set_DigitSubstitution(value: DNDigitShapes);

  { methods } 

    function Clone: DNObject;
    function GetFormat(formatType: DNType): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CurrencyDecimalDigits: Int32 read get_CurrencyDecimalDigits write set_CurrencyDecimalDigits;
    property CurrencyDecimalSeparator: string read get_CurrencyDecimalSeparator write set_CurrencyDecimalSeparator;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CurrencyGroupSizes: TArray<Int32> read get_CurrencyGroupSizes write set_CurrencyGroupSizes;
    property NumberGroupSizes: TArray<Int32> read get_NumberGroupSizes write set_NumberGroupSizes;
    property PercentGroupSizes: TArray<Int32> read get_PercentGroupSizes write set_PercentGroupSizes;
    property CurrencyGroupSeparator: string read get_CurrencyGroupSeparator write set_CurrencyGroupSeparator;
    property CurrencySymbol: string read get_CurrencySymbol write set_CurrencySymbol;
    property NaNSymbol: string read get_NaNSymbol write set_NaNSymbol;
    property CurrencyNegativePattern: Int32 read get_CurrencyNegativePattern write set_CurrencyNegativePattern;
    property NumberNegativePattern: Int32 read get_NumberNegativePattern write set_NumberNegativePattern;
    property PercentPositivePattern: Int32 read get_PercentPositivePattern write set_PercentPositivePattern;
    property PercentNegativePattern: Int32 read get_PercentNegativePattern write set_PercentNegativePattern;
    property NegativeInfinitySymbol: string read get_NegativeInfinitySymbol write set_NegativeInfinitySymbol;
    property NegativeSign: string read get_NegativeSign write set_NegativeSign;
    property NumberDecimalDigits: Int32 read get_NumberDecimalDigits write set_NumberDecimalDigits;
    property NumberDecimalSeparator: string read get_NumberDecimalSeparator write set_NumberDecimalSeparator;
    property NumberGroupSeparator: string read get_NumberGroupSeparator write set_NumberGroupSeparator;
    property CurrencyPositivePattern: Int32 read get_CurrencyPositivePattern write set_CurrencyPositivePattern;
    property PositiveInfinitySymbol: string read get_PositiveInfinitySymbol write set_PositiveInfinitySymbol;
    property PositiveSign: string read get_PositiveSign write set_PositiveSign;
    property PercentDecimalDigits: Int32 read get_PercentDecimalDigits write set_PercentDecimalDigits;
    property PercentDecimalSeparator: string read get_PercentDecimalSeparator write set_PercentDecimalSeparator;
    property PercentGroupSeparator: string read get_PercentGroupSeparator write set_PercentGroupSeparator;
    property PercentSymbol: string read get_PercentSymbol write set_PercentSymbol;
    property PerMilleSymbol: string read get_PerMilleSymbol write set_PerMilleSymbol;
    property NativeDigits: TArray<string> read get_NativeDigits write set_NativeDigits;
    property DigitSubstitution: DNDigitShapes read get_DigitSubstitution write set_DigitSubstitution;
  end;

  TDNNumberFormatInfo = class(TDNGenericImport<DNNumberFormatInfoClass, DNNumberFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNRegionInfoClass = interface(DNObjectClass)
  ['{602B3A7E-CABB-505C-9FF7-769FBCE1C6B9}']
  { static getter & setter } 

    {class} function get_CurrentRegion: DNRegionInfo;

  { constructors } 

    {class} function init(name: string): DNRegionInfo; overload;
    {class} function init(culture: Int32): DNRegionInfo; overload;

  { static propertys } 

    {class} property CurrentRegion: DNRegionInfo read get_CurrentRegion;
  end;

  [DNTypeName('System.Globalization.RegionInfo')]
  DNRegionInfo = interface(DNObject)
  ['{0C630393-7583-333C-AB5D-CB10B910F69B}']
  { getters & setters } 

    function get_Name: string;
    function get_EnglishName: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_TwoLetterISORegionName: string;
    function get_ThreeLetterISORegionName: string;
    function get_ThreeLetterWindowsRegionName: string;
    function get_IsMetric: Boolean;
    function get_GeoId: Int32;
    function get_CurrencyEnglishName: string;
    function get_CurrencyNativeName: string;
    function get_CurrencySymbol: string;
    function get_ISOCurrencySymbol: string;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property EnglishName: string read get_EnglishName;
    property DisplayName: string read get_DisplayName;
    property NativeName: string read get_NativeName;
    property TwoLetterISORegionName: string read get_TwoLetterISORegionName;
    property ThreeLetterISORegionName: string read get_ThreeLetterISORegionName;
    property ThreeLetterWindowsRegionName: string read get_ThreeLetterWindowsRegionName;
    property IsMetric: Boolean read get_IsMetric;
    property GeoId: Int32 read get_GeoId;
    property CurrencyEnglishName: string read get_CurrencyEnglishName;
    property CurrencyNativeName: string read get_CurrencyNativeName;
    property CurrencySymbol: string read get_CurrencySymbol;
    property ISOCurrencySymbol: string read get_ISOCurrencySymbol;
  end;

  TDNRegionInfo = class(TDNGenericImport<DNRegionInfoClass, DNRegionInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNSortKeyClass = interface(DNObjectClass)
  ['{06B51F68-5343-5E10-854F-EDB0324B9F9C}']
  { static methods } 

    {class} function Compare(sortkey1: DNSortKey; sortkey2: DNSortKey): Int32;

  end;

  [DNTypeName('System.Globalization.SortKey')]
  DNSortKey = interface(DNObject)
  ['{F34B5293-82D0-32A5-9165-AE789FD3CF15}']
  { getters & setters } 

    function get_OriginalString: string;
    function get_KeyData: TArray<Byte>;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property OriginalString: string read get_OriginalString;
    property KeyData: TArray<Byte> read get_KeyData;
  end;

  TDNSortKey = class(TDNGenericImport<DNSortKeyClass, DNSortKey>) end;

  //-------------namespace: System.Globalization----------------
  DNSortVersionClass = interface(DNObjectClass)
  ['{B9CCDEF5-34CB-5686-A47A-E14E4DA02812}']
  { constructors } 

    {class} function init(fullVersion: Int32; sortId: DNGuid): DNSortVersion;

  end;

  [DNTypeName('System.Globalization.SortVersion')]
  DNSortVersion = interface(DNObject)
  ['{86BD6280-2A64-3A68-A3D2-5D05A4981029}']
  { getters & setters } 

    function get_FullVersion: Int32;
    function get_SortId: DNGuid;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNSortVersion): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FullVersion: Int32 read get_FullVersion;
    property SortId: DNGuid read get_SortId;
  end;

  TDNSortVersion = class(TDNGenericImport<DNSortVersionClass, DNSortVersion>) end;

  //-------------namespace: System.Globalization----------------
  DNStringInfoClass = interface(DNObjectClass)
  ['{904BE661-3E7A-5F38-BA36-E575B4652929}']
  { constructors } 

    {class} function init: DNStringInfo; overload;
    {class} function init(value: string): DNStringInfo; overload;

  { static methods } 

    {class} function GetNextTextElement(str: string): string; overload;
    {class} function GetNextTextElement(str: string; index: Int32): string; overload;
    {class} function GetTextElementEnumerator(str: string): DNTextElementEnumerator; overload;
    {class} function GetTextElementEnumerator(str: string; index: Int32): DNTextElementEnumerator; overload;
    {class} function ParseCombiningCharacters(str: string): TArray<Int32>;

  end;

  [DNTypeName('System.Globalization.StringInfo')]
  DNStringInfo = interface(DNObject)
  ['{31C967B5-2F8A-3957-9C6D-34A0731DB36C}']
  { getters & setters } 

    function get_String: string;
    procedure set_String(value: string);
    function get_LengthInTextElements: Int32;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function SubstringByTextElements(startingTextElement: Int32): string; overload;
    function SubstringByTextElements(startingTextElement: Int32; lengthInTextElements: Int32): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property &String: string read get_String write set_String;
    property LengthInTextElements: Int32 read get_LengthInTextElements;
  end;

  TDNStringInfo = class(TDNGenericImport<DNStringInfoClass, DNStringInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNTextElementEnumeratorClass = interface(DNObjectClass)
  ['{ADD5D050-88A2-5CDD-97C9-553C15339568}']
  end;

  [DNTypeName('System.Globalization.TextElementEnumerator')]
  DNTextElementEnumerator = interface(DNIEnumerator)
  ['{4C96DA7C-8858-3C24-A973-CB50F2860A91}']
  { getters & setters } 

    function get_Current: DNObject;
    function get_ElementIndex: Int32;

  { methods } 

    function MoveNext: Boolean;
    function GetTextElement: string;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Current: DNObject read get_Current;
    property ElementIndex: Int32 read get_ElementIndex;
  end;

  TDNTextElementEnumerator = class(TDNGenericImport<DNTextElementEnumeratorClass, DNTextElementEnumerator>) end;

  //-------------namespace: System.Globalization----------------
  DNTextInfoClass = interface(DNObjectClass)
  ['{570690BE-C479-5B80-B30E-27067336171A}']
  { static methods } 

    {class} function ReadOnly(textInfo: DNTextInfo): DNTextInfo;

  end;

  [DNTypeName('System.Globalization.TextInfo')]
  DNTextInfo = interface(DNICloneable)
  ['{BCA1528C-6369-37AD-8CC1-DB24A92CC6B1}']
  { getters & setters } 

    function get_ANSICodePage: Int32;
    function get_OEMCodePage: Int32;
    function get_MacCodePage: Int32;
    function get_EBCDICCodePage: Int32;
    function get_LCID: Int32;
    function get_CultureName: string;
    function get_IsReadOnly: Boolean;
    function get_ListSeparator: string;
    procedure set_ListSeparator(value: string);
    function get_IsRightToLeft: Boolean;

  { methods } 

    function Clone: DNObject;
    function ToLower(c: Char): Char; overload;
    function ToLower(str: string): string; overload;
    function ToUpper(c: Char): Char; overload;
    function ToUpper(str: string): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToTitleCase(str: string): string;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property ANSICodePage: Int32 read get_ANSICodePage;
    property OEMCodePage: Int32 read get_OEMCodePage;
    property MacCodePage: Int32 read get_MacCodePage;
    property EBCDICCodePage: Int32 read get_EBCDICCodePage;
    property LCID: Int32 read get_LCID;
    property CultureName: string read get_CultureName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property ListSeparator: string read get_ListSeparator write set_ListSeparator;
    property IsRightToLeft: Boolean read get_IsRightToLeft;
  end;

  TDNTextInfo = class(TDNGenericImport<DNTextInfoClass, DNTextInfo>) end;

  //-------------namespace: System.IO----------------
  DNBinaryReaderClass = interface(DNObjectClass)
  ['{4CC149B3-51A3-5CBE-B8BF-279D8682F25E}']
  { constructors } 

    {class} function init(input: DNStream): DNBinaryReader; overload;
    {class} function init(input: DNStream; encoding: DNEncoding): DNBinaryReader; overload;
    {class} function init(input: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryReader; overload;

  end;

  [DNTypeName('System.IO.BinaryReader')]
  DNBinaryReader = interface(DNIDisposable)
  ['{2484AFDA-7B47-3CD7-97B5-951F5C6AB5B6}']
  { getters & setters } 

    function get_BaseStream: DNStream;

  { methods } 

    procedure Close;
    procedure Dispose;
    function PeekChar: Int32;
    function Read: Int32; overload;
    function ReadBoolean: Boolean;
    function ReadByte: Byte;
    function ReadSByte: SByte;
    function ReadChar: Char;
    function ReadInt16: Int16;
    function ReadUInt16: UInt16;
    function ReadInt32: Int32;
    function ReadUInt32: UInt32;
    function ReadInt64: Int64;
    function ReadUInt64: UInt64;
    function ReadSingle: Single;
    function ReadDouble: Double;
    function ReadDecimal: DNDecimal;
    function ReadString: string;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadChars(count: Int32): TArray<Char>;
    function Read(buffer: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function ReadBytes(count: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryReader = class(TDNGenericImport<DNBinaryReaderClass, DNBinaryReader>) end;

  //-------------namespace: System.IO----------------
  DNBinaryWriterClass = interface(DNObjectClass)
  ['{C8DFE481-22F5-5B57-AE75-B00A65DB4FA3}']
  { constructors } 

    {class} function init(output: DNStream): DNBinaryWriter; overload;
    {class} function init(output: DNStream; encoding: DNEncoding): DNBinaryWriter; overload;
    {class} function init(output: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNBinaryWriter;

  { static fields } 

    {class} property Null: DNBinaryWriter read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.BinaryWriter')]
  DNBinaryWriter = interface(DNIDisposable)
  ['{D92CCD03-5C88-3339-8011-46E8B01A2BA8}']
  { getters & setters } 

    function get_BaseStream: DNStream;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure Flush;
    function Seek(offset: Int32; origin: DNSeekOrigin): Int64;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Byte); overload;
    procedure Write(value: SByte); overload;
    procedure Write(buffer: TArray<Byte>); overload;
    procedure Write(buffer: TArray<Byte>; index: Int32; count: Int32); overload;
    procedure Write(ch: Char); overload;
    procedure Write(chars: TArray<Char>); overload;
    procedure Write(chars: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: Int16); overload;
    procedure Write(value: UInt16); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: string); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryWriter = class(TDNGenericImport<DNBinaryWriterClass, DNBinaryWriter>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryClass = interface(DNObjectClass)
  ['{4908E8DE-F8BD-54EB-AFB4-9C0794F374FC}']
  { static methods } 

    {class} function GetParent(path: string): DNDirectoryInfo;
    {class} function CreateDirectory(path: string): DNDirectoryInfo; overload;
    {class} function CreateDirectory(path: string; directorySecurity: DNDirectorySecurity): DNDirectoryInfo; overload;
    {class} function Exists(path: string): Boolean;
    {class} procedure SetCreationTime(path: string; creationTime: DNDateTime);
    {class} procedure SetCreationTimeUtc(path: string; creationTimeUtc: DNDateTime);
    {class} function GetCreationTime(path: string): DNDateTime;
    {class} function GetCreationTimeUtc(path: string): DNDateTime;
    {class} procedure SetLastWriteTime(path: string; lastWriteTime: DNDateTime);
    {class} procedure SetLastWriteTimeUtc(path: string; lastWriteTimeUtc: DNDateTime);
    {class} function GetLastWriteTime(path: string): DNDateTime;
    {class} function GetLastWriteTimeUtc(path: string): DNDateTime;
    {class} procedure SetLastAccessTime(path: string; lastAccessTime: DNDateTime);
    {class} procedure SetLastAccessTimeUtc(path: string; lastAccessTimeUtc: DNDateTime);
    {class} function GetLastAccessTime(path: string): DNDateTime;
    {class} function GetLastAccessTimeUtc(path: string): DNDateTime;
    {class} function GetAccessControl(path: string): DNDirectorySecurity; overload;
    {class} function GetAccessControl(path: string; includeSections: DNAccessControlSections): DNDirectorySecurity; overload;
    {class} procedure SetAccessControl(path: string; directorySecurity: DNDirectorySecurity);
    {class} function GetFiles(path: string; searchPattern: string): TArray<string>; overload;
    {class} function GetFiles(path: string; searchPattern: string; searchOption: DNSearchOption): TArray<string>; overload;
    {class} function GetDirectories(path: string; searchPattern: string): TArray<string>; overload;
    {class} function GetDirectories(path: string; searchPattern: string; searchOption: DNSearchOption): TArray<string>; overload;
    {class} function GetFileSystemEntries(path: string; searchPattern: string): TArray<string>; overload;
    {class} function GetFileSystemEntries(path: string; searchPattern: string; searchOption: DNSearchOption): TArray<string>; overload;
    {class} function EnumerateDirectories(path: string; searchPattern: string): DNIEnumerable<string>; overload;
    {class} function EnumerateDirectories(path: string; searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<string>; overload;
    {class} function EnumerateFiles(path: string; searchPattern: string): DNIEnumerable<string>; overload;
    {class} function EnumerateFiles(path: string; searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<string>; overload;
    {class} function EnumerateFileSystemEntries(path: string; searchPattern: string): DNIEnumerable<string>; overload;
    {class} function EnumerateFileSystemEntries(path: string; searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<string>; overload;
    {class} function GetLogicalDrives: TArray<string>;
    {class} function GetDirectoryRoot(path: string): string;
    {class} function GetCurrentDirectory: string;
    {class} procedure SetCurrentDirectory(path: string);
    {class} procedure Move(sourceDirName: string; destDirName: string);
    {class} procedure Delete(path: string); overload;
    {class} procedure Delete(path: string; recursive: Boolean); overload;
    {class} function GetFiles(path: string): TArray<string>; overload;
    {class} function GetFileSystemEntries(path: string): TArray<string>; overload;
    {class} function EnumerateDirectories(path: string): DNIEnumerable<string>; overload;
    {class} function EnumerateFiles(path: string): DNIEnumerable<string>; overload;
    {class} function EnumerateFileSystemEntries(path: string): DNIEnumerable<string>; overload;
    {class} function GetDirectories(path: string): TArray<string>; overload;

  end;

  [DNTypeName('System.IO.Directory')]
  DNDirectory = interface(DNObject)
  ['{0EBD869E-64BF-3682-80BB-690A70114BE0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDirectory = class(TDNGenericImport<DNDirectoryClass, DNDirectory>) end;

  //-------------namespace: System.IO----------------
  DNDriveInfoClass = interface(DNObjectClass)
  ['{4990E56F-9216-57AD-8A89-F6F3CECC3304}']
  { constructors } 

    {class} function init(driveName: string): DNDriveInfo;

  { static methods } 

    {class} function GetDrives: TArray<DNDriveInfo>;

  end;

  [DNTypeName('System.IO.DriveInfo')]
  DNDriveInfo = interface(DNISerializable)
  ['{B7C87928-B1AD-35CE-AA58-3DC3AAB7AC67}']
  { getters & setters } 

    function get_Name: string;
    function get_DriveType: DNDriveType;
    function get_DriveFormat: string;
    function get_IsReady: Boolean;
    function get_AvailableFreeSpace: Int64;
    function get_TotalFreeSpace: Int64;
    function get_TotalSize: Int64;
    function get_RootDirectory: DNDirectoryInfo;
    function get_VolumeLabel: string;
    procedure set_VolumeLabel(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property DriveType: DNDriveType read get_DriveType;
    property DriveFormat: string read get_DriveFormat;
    property IsReady: Boolean read get_IsReady;
    property AvailableFreeSpace: Int64 read get_AvailableFreeSpace;
    property TotalFreeSpace: Int64 read get_TotalFreeSpace;
    property TotalSize: Int64 read get_TotalSize;
    property RootDirectory: DNDirectoryInfo read get_RootDirectory;
    property VolumeLabel: string read get_VolumeLabel write set_VolumeLabel;
  end;

  TDNDriveInfo = class(TDNGenericImport<DNDriveInfoClass, DNDriveInfo>) end;

  //-------------namespace: System.IO----------------
  DNFileClass = interface(DNObjectClass)
  ['{782D3DC2-0FF5-5B7D-8BDD-F980278B0995}']
  { static methods } 

    {class} function OpenText(path: string): DNStreamReader;
    {class} function CreateText(path: string): DNStreamWriter;
    {class} function AppendText(path: string): DNStreamWriter;
    {class} procedure Copy(sourceFileName: string; destFileName: string); overload;
    {class} procedure Copy(sourceFileName: string; destFileName: string; overwrite: Boolean); overload;
    {class} function Create(path: string): DNFileStream; overload;
    {class} function Create(path: string; bufferSize: Int32): DNFileStream; overload;
    {class} function Create(path: string; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;
    {class} function Create(path: string; bufferSize: Int32; options: DNFileOptions; fileSecurity: DNFileSecurity): DNFileStream; overload;
    {class} procedure Delete(path: string);
    {class} function Exists(path: string): Boolean;
    {class} function Open(path: string; mode: DNFileMode): DNFileStream; overload;
    {class} function Open(path: string; mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    {class} function Open(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    {class} procedure SetCreationTime(path: string; creationTime: DNDateTime);
    {class} procedure SetCreationTimeUtc(path: string; creationTimeUtc: DNDateTime);
    {class} function GetCreationTime(path: string): DNDateTime;
    {class} function GetCreationTimeUtc(path: string): DNDateTime;
    {class} procedure SetLastAccessTime(path: string; lastAccessTime: DNDateTime);
    {class} procedure SetLastAccessTimeUtc(path: string; lastAccessTimeUtc: DNDateTime);
    {class} function GetLastAccessTime(path: string): DNDateTime;
    {class} function GetLastAccessTimeUtc(path: string): DNDateTime;
    {class} procedure SetLastWriteTime(path: string; lastWriteTime: DNDateTime);
    {class} procedure SetLastWriteTimeUtc(path: string; lastWriteTimeUtc: DNDateTime);
    {class} function GetLastWriteTime(path: string): DNDateTime;
    {class} function GetLastWriteTimeUtc(path: string): DNDateTime;
    {class} function GetAttributes(path: string): DNFileAttributes;
    {class} procedure SetAttributes(path: string; fileAttributes: DNFileAttributes);
    {class} function GetAccessControl(path: string): DNFileSecurity; overload;
    {class} function GetAccessControl(path: string; includeSections: DNAccessControlSections): DNFileSecurity; overload;
    {class} procedure SetAccessControl(path: string; fileSecurity: DNFileSecurity);
    {class} function OpenRead(path: string): DNFileStream;
    {class} function OpenWrite(path: string): DNFileStream;
    {class} function ReadAllText(path: string): string; overload;
    {class} function ReadAllText(path: string; encoding: DNEncoding): string; overload;
    {class} procedure WriteAllText(path: string; contents: string); overload;
    {class} procedure WriteAllText(path: string; contents: string; encoding: DNEncoding); overload;
    {class} function ReadAllBytes(path: string): TArray<Byte>;
    {class} procedure WriteAllBytes(path: string; bytes: TArray<Byte>);
    {class} function ReadAllLines(path: string): TArray<string>; overload;
    {class} function ReadAllLines(path: string; encoding: DNEncoding): TArray<string>; overload;
    {class} function ReadLines(path: string): DNIEnumerable<string>; overload;
    {class} function ReadLines(path: string; encoding: DNEncoding): DNIEnumerable<string>; overload;
    {class} procedure WriteAllLines(path: string; contents: TArray<string>); overload;
    {class} procedure WriteAllLines(path: string; contents: TArray<string>; encoding: DNEncoding); overload;
    {class} procedure WriteAllLines(path: string; contents: DNIEnumerable<string>); overload;
    {class} procedure WriteAllLines(path: string; contents: DNIEnumerable<string>; encoding: DNEncoding); overload;
    {class} procedure AppendAllText(path: string; contents: string); overload;
    {class} procedure AppendAllText(path: string; contents: string; encoding: DNEncoding); overload;
    {class} procedure AppendAllLines(path: string; contents: DNIEnumerable<string>); overload;
    {class} procedure AppendAllLines(path: string; contents: DNIEnumerable<string>; encoding: DNEncoding); overload;
    {class} procedure Move(sourceFileName: string; destFileName: string);
    {class} procedure Replace(sourceFileName: string; destinationFileName: string; destinationBackupFileName: string); overload;
    {class} procedure Replace(sourceFileName: string; destinationFileName: string; destinationBackupFileName: string; ignoreMetadataErrors: Boolean); overload;
    {class} procedure Decrypt(path: string);
    {class} procedure Encrypt(path: string);

  end;

  [DNTypeName('System.IO.File')]
  DNFile = interface(DNObject)
  ['{2A96793E-4CF3-3976-A893-B66886D89A03}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNFile = class(TDNGenericImport<DNFileClass, DNFile>) end;

  //-------------namespace: System.IO----------------
  DNPathClass = interface(DNObjectClass)
  ['{5C9F78F6-7637-5B49-A87E-1212BBAD0002}']
  { static fields getter & setter } 

   function __fakeFieldGet_DirectorySeparatorChar: Char;
   function __fakeFieldGet_AltDirectorySeparatorChar: Char;
   function __fakeFieldGet_VolumeSeparatorChar: Char;
   function __fakeFieldGet_InvalidPathChars: TArray<Char>;
   function __fakeFieldGet_PathSeparator: Char;

  { static fields } 

    {class} property DirectorySeparatorChar: Char read __fakeFieldGet_DirectorySeparatorChar;
    {class} property AltDirectorySeparatorChar: Char read __fakeFieldGet_AltDirectorySeparatorChar;
    {class} property VolumeSeparatorChar: Char read __fakeFieldGet_VolumeSeparatorChar;
    {class} property InvalidPathChars: TArray<Char> read __fakeFieldGet_InvalidPathChars;
    {class} property PathSeparator: Char read __fakeFieldGet_PathSeparator;

  { static methods } 

    {class} function GetDirectoryName(path: string): string;
    {class} function GetInvalidPathChars: TArray<Char>;
    {class} function GetInvalidFileNameChars: TArray<Char>;
    {class} function GetExtension(path: string): string;
    {class} function GetFullPath(path: string): string;
    {class} function GetFileName(path: string): string;
    {class} function GetFileNameWithoutExtension(path: string): string;
    {class} function GetPathRoot(path: string): string;
    {class} function GetTempPath: string;
    {class} function GetRandomFileName: string;
    {class} function GetTempFileName: string;
    {class} function HasExtension(path: string): Boolean;
    {class} function IsPathRooted(path: string): Boolean;
    {class} function Combine(paths: TArray<string>): string; overload;
    {class} function Combine(path1: string; path2: string; path3: string): string; overload;
    {class} function Combine(path1: string; path2: string; path3: string; path4: string): string; overload;
    {class} function ChangeExtension(path: string; extension: string): string;
    {class} function Combine(path1: string; path2: string): string; overload;

  end;

  [DNTypeName('System.IO.Path')]
  DNPath = interface(DNObject)
  ['{B7AE0CAE-979E-3EBF-B33F-8F121DAFD78E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPath = class(TDNGenericImport<DNPathClass, DNPath>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryAccessorClass = interface(DNObjectClass)
  ['{8711AABE-CFE0-5CC2-9F97-77AF20EE2805}']
  { constructors } 

    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64): DNUnmanagedMemoryAccessor; overload;
    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryAccessor; overload;

  end;

  [DNTypeName('System.IO.UnmanagedMemoryAccessor')]
  DNUnmanagedMemoryAccessor = interface(DNIDisposable)
  ['{4C94CD7B-C020-34C8-A104-9C86AE0B3335}']
  { getters & setters } 

    function get_Capacity: Int64;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;

  { methods } 

    procedure Dispose;
    function ReadBoolean(position: Int64): Boolean;
    function ReadByte(position: Int64): Byte;
    function ReadDecimal(position: Int64): DNDecimal;
    procedure Write(position: Int64; value: Boolean); overload;
    procedure Write(position: Int64; value: Byte); overload;
    procedure Write(position: Int64; value: DNDecimal); overload;
    function ReadChar(position: Int64): Char;
    function ReadInt16(position: Int64): Int16;
    function ReadInt32(position: Int64): Int32;
    function ReadInt64(position: Int64): Int64;
    function ReadSingle(position: Int64): Single;
    function ReadDouble(position: Int64): Double;
    function ReadSByte(position: Int64): SByte;
    function ReadUInt16(position: Int64): UInt16;
    function ReadUInt32(position: Int64): UInt32;
    function ReadUInt64(position: Int64): UInt64;
    procedure Write(position: Int64; value: Char); overload;
    procedure Write(position: Int64; value: Int16); overload;
    procedure Write(position: Int64; value: Int32); overload;
    procedure Write(position: Int64; value: Int64); overload;
    procedure Write(position: Int64; value: Single); overload;
    procedure Write(position: Int64; value: Double); overload;
    procedure Write(position: Int64; value: SByte); overload;
    procedure Write(position: Int64; value: UInt16); overload;
    procedure Write(position: Int64; value: UInt32); overload;
    procedure Write(position: Int64; value: UInt64); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int64 read get_Capacity;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
  end;

  TDNUnmanagedMemoryAccessor = class(TDNGenericImport<DNUnmanagedMemoryAccessorClass, DNUnmanagedMemoryAccessor>) end;

  //-------------namespace: System----------------
  DNLazyClass<T> = interface(DNObjectClass)
  ['{124C39F1-EB76-57FF-8CA7-14E7B30F93B6}']
  { constructors } 

    {class} function init: DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>): DNLazy<T>; overload;
    {class} function init(isThreadSafe: Boolean): DNLazy<T>; overload;
    {class} function init(mode: DNLazyThreadSafetyMode): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; isThreadSafe: Boolean): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; mode: DNLazyThreadSafetyMode): DNLazy<T>; overload;

  end;

  [DNTypeName('System.Lazy`1')]
  DNLazy<T> = interface(DNObject)
  ['{29E1E773-5435-37D4-A62B-A6B49370EECE}']
  { getters & setters } 

    function get_IsValueCreated: Boolean;
    function get_Value: T;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsValueCreated: Boolean read get_IsValueCreated;
    property Value: T read get_Value;
  end;

  TDNLazy<T> = class(TDNGenericImport<DNLazyClass<T>, DNLazy<T>>) end;

  //-------------namespace: System----------------
  DNLocalDataStoreSlotClass = interface(DNObjectClass)
  ['{2AD000FA-F55E-5143-9A27-1C88C42E3B22}']
  end;

  [DNTypeName('System.LocalDataStoreSlot')]
  DNLocalDataStoreSlot = interface(DNObject)
  ['{E95E800A-CBA4-3613-821D-6D6EF3BCBF6B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNLocalDataStoreSlot = class(TDNGenericImport<DNLocalDataStoreSlotClass, DNLocalDataStoreSlot>) end;

  //-------------namespace: System----------------
  DNMarshalByRefObjectClass = interface(DNObjectClass)
  ['{8BB29647-6408-582E-8317-45E90DEDFCB3}']
  end;

  [DNTypeName('System.MarshalByRefObject')]
  DNMarshalByRefObject = interface(DNObject)
  ['{14B542C6-1C5A-3869-B8F8-FEEFD7B29D09}']
  { methods } 

    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMarshalByRefObject = class(TDNGenericImport<DNMarshalByRefObjectClass, DNMarshalByRefObject>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNRegistryKeyClass = interface(DNMarshalByRefObjectClass)
  ['{25C9A224-0C1B-5E94-9E4E-CCDDFE2268A6}']
  { static methods } 

    {class} function OpenBaseKey(hKey: DNRegistryHive; view: DNRegistryView): DNRegistryKey;
    {class} function OpenRemoteBaseKey(hKey: DNRegistryHive; machineName: string): DNRegistryKey; overload;
    {class} function OpenRemoteBaseKey(hKey: DNRegistryHive; machineName: string; view: DNRegistryView): DNRegistryKey; overload;
    {class} function FromHandle(handle: DNSafeRegistryHandle): DNRegistryKey; overload;
    {class} function FromHandle(handle: DNSafeRegistryHandle; view: DNRegistryView): DNRegistryKey; overload;

  end;

  [DNTypeName('Microsoft.Win32.RegistryKey')]
  DNRegistryKey = interface(DNMarshalByRefObject)
  ['{2C8FA9BD-CBE4-3223-B592-41B5A22FB820}']
  { getters & setters } 

    function get_SubKeyCount: Int32;
    function get_View: DNRegistryView;
    function get_Handle: DNSafeRegistryHandle;
    function get_ValueCount: Int32;
    function get_Name: string;

  { methods } 

    procedure Dispose;
    function ToString: string;
    procedure Close;
    procedure Flush;
    function CreateSubKey(subkey: string): DNRegistryKey; overload;
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck): DNRegistryKey; overload;
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck; options: DNRegistryOptions): DNRegistryKey; overload;
    function CreateSubKey(subkey: string; writable: Boolean): DNRegistryKey; overload;
    function CreateSubKey(subkey: string; writable: Boolean; options: DNRegistryOptions): DNRegistryKey; overload;
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck; registrySecurity: DNRegistrySecurity): DNRegistryKey; overload;
    function CreateSubKey(subkey: string; permissionCheck: DNRegistryKeyPermissionCheck; registryOptions: DNRegistryOptions; registrySecurity: DNRegistrySecurity): DNRegistryKey; overload;
    procedure DeleteSubKey(subkey: string); overload;
    procedure DeleteSubKey(subkey: string; throwOnMissingSubKey: Boolean); overload;
    procedure DeleteSubKeyTree(subkey: string); overload;
    procedure DeleteSubKeyTree(subkey: string; throwOnMissingSubKey: Boolean); overload;
    procedure DeleteValue(name: string); overload;
    procedure DeleteValue(name: string; throwOnMissingValue: Boolean); overload;
    function OpenSubKey(name: string; writable: Boolean): DNRegistryKey; overload;
    function OpenSubKey(name: string; permissionCheck: DNRegistryKeyPermissionCheck): DNRegistryKey; overload;
    function OpenSubKey(name: string; rights: DNRegistryRights): DNRegistryKey; overload;
    function OpenSubKey(name: string; permissionCheck: DNRegistryKeyPermissionCheck; rights: DNRegistryRights): DNRegistryKey; overload;
    function OpenSubKey(name: string): DNRegistryKey; overload;
    function GetSubKeyNames: TArray<string>;
    function GetValueNames: TArray<string>;
    function GetValue(name: string): DNObject; overload;
    function GetValue(name: string; defaultValue: DNObject): DNObject; overload;
    function GetValue(name: string; defaultValue: DNObject; options: DNRegistryValueOptions): DNObject; overload;
    function GetValueKind(name: string): DNRegistryValueKind;
    procedure SetValue(name: string; value: DNObject); overload;
    procedure SetValue(name: string; value: DNObject; valueKind: DNRegistryValueKind); overload;
    function GetAccessControl: DNRegistrySecurity; overload;
    function GetAccessControl(includeSections: DNAccessControlSections): DNRegistrySecurity; overload;
    procedure SetAccessControl(registrySecurity: DNRegistrySecurity);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property SubKeyCount: Int32 read get_SubKeyCount;
    property View: DNRegistryView read get_View;
    property Handle: DNSafeRegistryHandle read get_Handle;
    property ValueCount: Int32 read get_ValueCount;
    property Name: string read get_Name;
  end;

  TDNRegistryKey = class(TDNGenericImport<DNRegistryKeyClass, DNRegistryKey>) end;

  //-------------namespace: System----------------
  DNAppDomainClass = interface(DNMarshalByRefObjectClass)
  ['{2E5E720A-5641-5C5A-B416-3A59D0754876}']
  { static getter & setter } 

    {class} function get_CurrentDomain: DNAppDomain;
    {class} function get_MonitoringIsEnabled: Boolean;
    {class} procedure set_MonitoringIsEnabled(value: Boolean);
    {class} function get_MonitoringSurvivedProcessMemorySize: Int64;

  { static methods } 

    {class} procedure Unload(domain: DNAppDomain);
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence): DNAppDomain; overload;
    {class} function CreateDomain(friendlyName: string): DNAppDomain; overload;
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; info: DNAppDomainSetup): DNAppDomain; overload;
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; info: DNAppDomainSetup; grantSet: DNPermissionSet; fullTrustAssemblies: TArray<DNStrongName>): DNAppDomain; overload;
    {class} function GetCurrentThreadId: Int32;
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; appBasePath: string; appRelativeSearchPath: string; shadowCopyFiles: Boolean): DNAppDomain; overload;
    {class} function CreateDomain(friendlyName: string; securityInfo: DNEvidence; appBasePath: string; appRelativeSearchPath: string; shadowCopyFiles: Boolean; adInit: DNAppDomainInitializer; adInitArgs: TArray<string>): DNAppDomain; overload;

  { static propertys } 

    {class} property CurrentDomain: DNAppDomain read get_CurrentDomain;
    {class} property MonitoringIsEnabled: Boolean read get_MonitoringIsEnabled write set_MonitoringIsEnabled;
    {class} property MonitoringSurvivedProcessMemorySize: Int64 read get_MonitoringSurvivedProcessMemorySize;
  end;

  [DNTypeName('System.AppDomain')]
  DNAppDomain = interface(DNMarshalByRefObject)
  ['{5FE0A145-A82B-3D96-94E3-FD214C9D6EB9}']
  { getters & setters } 

    function get_DomainManager: DNAppDomainManager;
    function get_Evidence: DNEvidence;
    function get_FriendlyName: string;
    function get_BaseDirectory: string;
    function get_RelativeSearchPath: string;
    function get_ShadowCopyFiles: Boolean;
    function get_ActivationContext: DNActivationContext;
    function get_ApplicationIdentity: DNApplicationIdentity;
    function get_ApplicationTrust: DNApplicationTrust;
    function get_DynamicDirectory: string;
    function get_SetupInformation: DNAppDomainSetup;
    function get_PermissionSet: DNPermissionSet;
    function get_IsFullyTrusted: Boolean;
    function get_IsHomogenous: Boolean;
    function get_Id: Int32;
    function get_MonitoringTotalProcessorTime: DNTimeSpan;
    function get_MonitoringTotalAllocatedMemorySize: Int64;
    function get_MonitoringSurvivedMemorySize: Int64;

  { events } 

    procedure add_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    procedure remove_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    procedure add_TypeResolve(value: DNResolveEventHandler);
    procedure remove_TypeResolve(value: DNResolveEventHandler);
    procedure add_ResourceResolve(value: DNResolveEventHandler);
    procedure remove_ResourceResolve(value: DNResolveEventHandler);
    procedure add_AssemblyResolve(value: DNResolveEventHandler);
    procedure remove_AssemblyResolve(value: DNResolveEventHandler);
    procedure add_ReflectionOnlyAssemblyResolve(value: DNResolveEventHandler);
    procedure remove_ReflectionOnlyAssemblyResolve(value: DNResolveEventHandler);
    procedure add_ProcessExit(value: DNEventHandler);
    procedure remove_ProcessExit(value: DNEventHandler);
    procedure add_DomainUnload(value: DNEventHandler);
    procedure remove_DomainUnload(value: DNEventHandler);
    procedure add_UnhandledException(value: DNUnhandledExceptionEventHandler);
    procedure remove_UnhandledException(value: DNUnhandledExceptionEventHandler);
    procedure add_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);
    procedure remove_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);

  { methods } 

    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet; isSynchronized: Boolean): DNAssemblyBuilder; overload;
    function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObjectHandle; overload;
    function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    function Load(assemblyString: string): DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityEvidence: DNEvidence): DNAssembly; overload;
    function Load(assemblyRef: DNAssemblyName; assemblySecurity: DNEvidence): DNAssembly; overload;
    function Load(assemblyString: string; assemblySecurity: DNEvidence): DNAssembly; overload;
    function ExecuteAssembly(assemblyFile: string): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    function GetAssemblies: TArray<DNAssembly>;
    procedure AppendPrivatePath(path: string);
    procedure ClearPrivatePath;
    procedure ClearShadowCopyPath;
    procedure SetCachePath(path: string);
    procedure SetData(name: string; data: DNObject); overload;
    function GetData(name: string): DNObject;
    procedure SetAppDomainPolicy(domainPolicy: DNPolicyLevel);
    procedure SetThreadPrincipal(principal: DNIPrincipal);
    procedure SetPrincipalPolicy(policy: DNPrincipalPolicy);
    function InitializeLifetimeService: DNObject;
    procedure DoCallBack(callBackDelegate: DNCrossAppDomainDelegate);
    procedure SetShadowCopyPath(path: string);
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>; securityContextSource: DNSecurityContextSource): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; evidence: DNEvidence; requiredPermissions: DNPermissionSet; optionalPermissions: DNPermissionSet; refusedPermissions: DNPermissionSet; isSynchronized: Boolean; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;
    function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; dir: string; isSynchronized: Boolean; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;
    function ApplyPolicy(assemblyName: string): string;
    function CreateComInstanceFrom(assemblyName: string; typeName: string): DNObjectHandle; overload;
    function CreateComInstanceFrom(assemblyFile: string; typeName: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNObjectHandle; overload;
    function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; assemblySecurity: DNEvidence; args: TArray<string>; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string; assemblySecurity: DNEvidence): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string; args: TArray<string>): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: DNAssemblyName; assemblySecurity: DNEvidence; args: TArray<string>): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: DNAssemblyName; args: TArray<string>): Int32; overload;
    function ToString: string;
    function ReflectionOnlyGetAssemblies: TArray<DNAssembly>;
    function IsFinalizingForUnload: Boolean;
    procedure SetData(name: string; data: DNObject; permission: DNIPermission); overload;
    function IsCompatibilitySwitchSet(value: string): DNNullable<Boolean>;
    procedure SetShadowCopyFiles;
    procedure SetDynamicBase(path: string);
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string): DNObject; overload;
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObject; overload;
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObject; overload;
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function CreateInstanceFromAndUnwrap(assemblyName: string; typeName: string): DNObject; overload;
    function CreateInstanceFromAndUnwrap(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObject; overload;
    function CreateInstanceFromAndUnwrap(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>; securityAttributes: DNEvidence): DNObject; overload;
    function CreateInstanceFromAndUnwrap(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function IsDefaultAppDomain: Boolean;
    function GetLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property DomainManager: DNAppDomainManager read get_DomainManager;
    property Evidence: DNEvidence read get_Evidence;
    property FriendlyName: string read get_FriendlyName;
    property BaseDirectory: string read get_BaseDirectory;
    property RelativeSearchPath: string read get_RelativeSearchPath;
    property ShadowCopyFiles: Boolean read get_ShadowCopyFiles;
    property ActivationContext: DNActivationContext read get_ActivationContext;
    property ApplicationIdentity: DNApplicationIdentity read get_ApplicationIdentity;
    property ApplicationTrust: DNApplicationTrust read get_ApplicationTrust;
    property DynamicDirectory: string read get_DynamicDirectory;
    property SetupInformation: DNAppDomainSetup read get_SetupInformation;
    property PermissionSet: DNPermissionSet read get_PermissionSet;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property IsHomogenous: Boolean read get_IsHomogenous;
    property Id: Int32 read get_Id;
    property MonitoringTotalProcessorTime: DNTimeSpan read get_MonitoringTotalProcessorTime;
    property MonitoringTotalAllocatedMemorySize: Int64 read get_MonitoringTotalAllocatedMemorySize;
    property MonitoringSurvivedMemorySize: Int64 read get_MonitoringSurvivedMemorySize;
  end;

  TDNAppDomain = class(TDNGenericImport<DNAppDomainClass, DNAppDomain>) end;

  //-------------namespace: System----------------
  DNAppDomainManagerClass = interface(DNMarshalByRefObjectClass)
  ['{57D0AFCE-F8C7-5142-92C5-D9593F73BCEC}']
  { constructors } 

    {class} function init: DNAppDomainManager;

  end;

  [DNTypeName('System.AppDomainManager')]
  DNAppDomainManager = interface(DNMarshalByRefObject)
  ['{C03880A5-0B5E-39AD-954A-CE0DCBD5EF7D}']
  { getters & setters } 

    function get_InitializationFlags: DNAppDomainManagerInitializationOptions;
    procedure set_InitializationFlags(value: DNAppDomainManagerInitializationOptions);
    function get_ApplicationActivator: DNApplicationActivator;
    function get_HostSecurityManager: DNHostSecurityManager;
    function get_HostExecutionContextManager: DNHostExecutionContextManager;
    function get_EntryAssembly: DNAssembly;

  { methods } 

    function CreateDomain(friendlyName: string; securityInfo: DNEvidence; appDomainInfo: DNAppDomainSetup): DNAppDomain;
    procedure InitializeNewDomain(appDomainInfo: DNAppDomainSetup);
    function CheckSecuritySettings(state: DNSecurityState): Boolean;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property InitializationFlags: DNAppDomainManagerInitializationOptions read get_InitializationFlags write set_InitializationFlags;
    property ApplicationActivator: DNApplicationActivator read get_ApplicationActivator;
    property HostSecurityManager: DNHostSecurityManager read get_HostSecurityManager;
    property HostExecutionContextManager: DNHostExecutionContextManager read get_HostExecutionContextManager;
    property EntryAssembly: DNAssembly read get_EntryAssembly;
  end;

  TDNAppDomainManager = class(TDNGenericImport<DNAppDomainManagerClass, DNAppDomainManager>) end;

  //-------------namespace: System----------------
  DNContextBoundObjectClass = interface(DNMarshalByRefObjectClass)
  ['{0485371B-3B45-5405-9DF4-B9A66F02FE39}']
  end;

  [DNTypeName('System.ContextBoundObject')]
  DNContextBoundObject = interface(DNMarshalByRefObject)
  ['{7916CBEF-050E-3E39-B83A-5AB9558E72F1}']
  { methods } 

    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNContextBoundObject = class(TDNGenericImport<DNContextBoundObjectClass, DNContextBoundObject>) end;

  //-------------namespace: System.IO----------------
  DNFileSystemInfoClass = interface(DNMarshalByRefObjectClass)
  ['{3B83D619-8769-5C04-9FED-11651B953E75}']
  end;

  [DNTypeName('System.IO.FileSystemInfo')]
  DNFileSystemInfo = interface(DNMarshalByRefObject)
  ['{1F0E8DB5-8F52-3360-8A47-9D3DC3A5ACAF}']
  { getters & setters } 

    function get_FullName: string;
    function get_Extension: string;
    function get_Name: string;
    function get_Exists: Boolean;
    function get_CreationTime: DNDateTime;
    procedure set_CreationTime(value: DNDateTime);
    function get_CreationTimeUtc: DNDateTime;
    procedure set_CreationTimeUtc(value: DNDateTime);
    function get_LastAccessTime: DNDateTime;
    procedure set_LastAccessTime(value: DNDateTime);
    function get_LastAccessTimeUtc: DNDateTime;
    procedure set_LastAccessTimeUtc(value: DNDateTime);
    function get_LastWriteTime: DNDateTime;
    procedure set_LastWriteTime(value: DNDateTime);
    function get_LastWriteTimeUtc: DNDateTime;
    procedure set_LastWriteTimeUtc(value: DNDateTime);
    function get_Attributes: DNFileAttributes;
    procedure set_Attributes(value: DNFileAttributes);

  { methods } 

    procedure Delete;
    procedure Refresh;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FullName: string read get_FullName;
    property Extension: string read get_Extension;
    property Name: string read get_Name;
    property Exists: Boolean read get_Exists;
    property CreationTime: DNDateTime read get_CreationTime write set_CreationTime;
    property CreationTimeUtc: DNDateTime read get_CreationTimeUtc write set_CreationTimeUtc;
    property LastAccessTime: DNDateTime read get_LastAccessTime write set_LastAccessTime;
    property LastAccessTimeUtc: DNDateTime read get_LastAccessTimeUtc write set_LastAccessTimeUtc;
    property LastWriteTime: DNDateTime read get_LastWriteTime write set_LastWriteTime;
    property LastWriteTimeUtc: DNDateTime read get_LastWriteTimeUtc write set_LastWriteTimeUtc;
    property Attributes: DNFileAttributes read get_Attributes write set_Attributes;
  end;

  TDNFileSystemInfo = class(TDNGenericImport<DNFileSystemInfoClass, DNFileSystemInfo>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryInfoClass = interface(DNFileSystemInfoClass)
  ['{789543D6-EA19-5A3A-A075-767C4CE1AF36}']
  { constructors } 

    {class} function init(path: string): DNDirectoryInfo;

  end;

  [DNTypeName('System.IO.DirectoryInfo')]
  DNDirectoryInfo = interface(DNFileSystemInfo)
  ['{40A8B2FA-E055-3F59-8BA6-54C4E35649B5}']
  { getters & setters } 

    function get_Name: string;
    function get_FullName: string;
    function get_Parent: DNDirectoryInfo;
    function get_Exists: Boolean;
    function get_Root: DNDirectoryInfo;
    function get_Extension: string;
    function get_CreationTime: DNDateTime;
    procedure set_CreationTime(value: DNDateTime);
    function get_CreationTimeUtc: DNDateTime;
    procedure set_CreationTimeUtc(value: DNDateTime);
    function get_LastAccessTime: DNDateTime;
    procedure set_LastAccessTime(value: DNDateTime);
    function get_LastAccessTimeUtc: DNDateTime;
    procedure set_LastAccessTimeUtc(value: DNDateTime);
    function get_LastWriteTime: DNDateTime;
    procedure set_LastWriteTime(value: DNDateTime);
    function get_LastWriteTimeUtc: DNDateTime;
    procedure set_LastWriteTimeUtc(value: DNDateTime);
    function get_Attributes: DNFileAttributes;
    procedure set_Attributes(value: DNFileAttributes);

  { methods } 

    procedure Delete; overload;
    function ToString: string;
    function CreateSubdirectory(path: string): DNDirectoryInfo; overload;
    function CreateSubdirectory(path: string; directorySecurity: DNDirectorySecurity): DNDirectoryInfo; overload;
    procedure Create; overload;
    procedure Create(directorySecurity: DNDirectorySecurity); overload;
    function GetAccessControl: DNDirectorySecurity; overload;
    function GetAccessControl(includeSections: DNAccessControlSections): DNDirectorySecurity; overload;
    procedure SetAccessControl(directorySecurity: DNDirectorySecurity);
    function GetFiles(searchPattern: string): TArray<DNFileInfo>; overload;
    function GetFiles(searchPattern: string; searchOption: DNSearchOption): TArray<DNFileInfo>; overload;
    function GetFiles: TArray<DNFileInfo>; overload;
    function GetDirectories: TArray<DNDirectoryInfo>; overload;
    function GetFileSystemInfos(searchPattern: string): TArray<DNFileSystemInfo>; overload;
    function GetFileSystemInfos(searchPattern: string; searchOption: DNSearchOption): TArray<DNFileSystemInfo>; overload;
    function GetFileSystemInfos: TArray<DNFileSystemInfo>; overload;
    function GetDirectories(searchPattern: string): TArray<DNDirectoryInfo>; overload;
    function GetDirectories(searchPattern: string; searchOption: DNSearchOption): TArray<DNDirectoryInfo>; overload;
    function EnumerateDirectories: DNIEnumerable<DNDirectoryInfo>; overload;
    function EnumerateDirectories(searchPattern: string): DNIEnumerable<DNDirectoryInfo>; overload;
    function EnumerateDirectories(searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<DNDirectoryInfo>; overload;
    function EnumerateFiles: DNIEnumerable<DNFileInfo>; overload;
    function EnumerateFiles(searchPattern: string): DNIEnumerable<DNFileInfo>; overload;
    function EnumerateFiles(searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<DNFileInfo>; overload;
    function EnumerateFileSystemInfos: DNIEnumerable<DNFileSystemInfo>; overload;
    function EnumerateFileSystemInfos(searchPattern: string): DNIEnumerable<DNFileSystemInfo>; overload;
    function EnumerateFileSystemInfos(searchPattern: string; searchOption: DNSearchOption): DNIEnumerable<DNFileSystemInfo>; overload;
    procedure MoveTo(destDirName: string);
    procedure Delete(recursive: Boolean); overload;
    procedure Refresh;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property FullName: string read get_FullName;
    property Parent: DNDirectoryInfo read get_Parent;
    property Exists: Boolean read get_Exists;
    property Root: DNDirectoryInfo read get_Root;
    property Extension: string read get_Extension;
    property CreationTime: DNDateTime read get_CreationTime write set_CreationTime;
    property CreationTimeUtc: DNDateTime read get_CreationTimeUtc write set_CreationTimeUtc;
    property LastAccessTime: DNDateTime read get_LastAccessTime write set_LastAccessTime;
    property LastAccessTimeUtc: DNDateTime read get_LastAccessTimeUtc write set_LastAccessTimeUtc;
    property LastWriteTime: DNDateTime read get_LastWriteTime write set_LastWriteTime;
    property LastWriteTimeUtc: DNDateTime read get_LastWriteTimeUtc write set_LastWriteTimeUtc;
    property Attributes: DNFileAttributes read get_Attributes write set_Attributes;
  end;

  TDNDirectoryInfo = class(TDNGenericImport<DNDirectoryInfoClass, DNDirectoryInfo>) end;

  //-------------namespace: System.IO----------------
  DNFileInfoClass = interface(DNFileSystemInfoClass)
  ['{4429BE16-0094-58A0-A46E-F4E34C9070C2}']
  { constructors } 

    {class} function init(fileName: string): DNFileInfo;

  end;

  [DNTypeName('System.IO.FileInfo')]
  DNFileInfo = interface(DNFileSystemInfo)
  ['{D6DFFEAD-0B46-3DED-83DE-1943413B94D5}']
  { getters & setters } 

    function get_Name: string;
    function get_Length: Int64;
    function get_DirectoryName: string;
    function get_Directory: DNDirectoryInfo;
    function get_IsReadOnly: Boolean;
    procedure set_IsReadOnly(value: Boolean);
    function get_Exists: Boolean;
    function get_FullName: string;
    function get_Extension: string;
    function get_CreationTime: DNDateTime;
    procedure set_CreationTime(value: DNDateTime);
    function get_CreationTimeUtc: DNDateTime;
    procedure set_CreationTimeUtc(value: DNDateTime);
    function get_LastAccessTime: DNDateTime;
    procedure set_LastAccessTime(value: DNDateTime);
    function get_LastAccessTimeUtc: DNDateTime;
    procedure set_LastAccessTimeUtc(value: DNDateTime);
    function get_LastWriteTime: DNDateTime;
    procedure set_LastWriteTime(value: DNDateTime);
    function get_LastWriteTimeUtc: DNDateTime;
    procedure set_LastWriteTimeUtc(value: DNDateTime);
    function get_Attributes: DNFileAttributes;
    procedure set_Attributes(value: DNFileAttributes);

  { methods } 

    procedure Delete;
    function ToString: string;
    function GetAccessControl: DNFileSecurity; overload;
    function GetAccessControl(includeSections: DNAccessControlSections): DNFileSecurity; overload;
    procedure SetAccessControl(fileSecurity: DNFileSecurity);
    function OpenText: DNStreamReader;
    function CreateText: DNStreamWriter;
    function AppendText: DNStreamWriter;
    function CopyTo(destFileName: string): DNFileInfo; overload;
    function CopyTo(destFileName: string; overwrite: Boolean): DNFileInfo; overload;
    function Create: DNFileStream;
    procedure Decrypt;
    procedure Encrypt;
    function Open(mode: DNFileMode): DNFileStream; overload;
    function Open(mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    function Open(mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    function OpenRead: DNFileStream;
    function OpenWrite: DNFileStream;
    procedure MoveTo(destFileName: string);
    function Replace(destinationFileName: string; destinationBackupFileName: string): DNFileInfo; overload;
    function Replace(destinationFileName: string; destinationBackupFileName: string; ignoreMetadataErrors: Boolean): DNFileInfo; overload;
    procedure Refresh;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Length: Int64 read get_Length;
    property DirectoryName: string read get_DirectoryName;
    property Directory: DNDirectoryInfo read get_Directory;
    property IsReadOnly: Boolean read get_IsReadOnly write set_IsReadOnly;
    property Exists: Boolean read get_Exists;
    property FullName: string read get_FullName;
    property Extension: string read get_Extension;
    property CreationTime: DNDateTime read get_CreationTime write set_CreationTime;
    property CreationTimeUtc: DNDateTime read get_CreationTimeUtc write set_CreationTimeUtc;
    property LastAccessTime: DNDateTime read get_LastAccessTime write set_LastAccessTime;
    property LastAccessTimeUtc: DNDateTime read get_LastAccessTimeUtc write set_LastAccessTimeUtc;
    property LastWriteTime: DNDateTime read get_LastWriteTime write set_LastWriteTime;
    property LastWriteTimeUtc: DNDateTime read get_LastWriteTimeUtc write set_LastWriteTimeUtc;
    property Attributes: DNFileAttributes read get_Attributes write set_Attributes;
  end;

  TDNFileInfo = class(TDNGenericImport<DNFileInfoClass, DNFileInfo>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageClass = interface(DNMarshalByRefObjectClass)
  ['{06E36B81-E4CC-5BA4-A7BD-8B0C2BFE4914}']
  end;

  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorage')]
  DNIsolatedStorage = interface(DNMarshalByRefObject)
  ['{70541B17-BF7E-399B-8D33-2AFA4F5AF395}']
  { getters & setters } 

    function get_MaximumSize: UInt64;
    function get_CurrentSize: UInt64;
    function get_UsedSize: Int64;
    function get_Quota: Int64;
    function get_AvailableFreeSpace: Int64;
    function get_DomainIdentity: DNObject;
    function get_ApplicationIdentity: DNObject;
    function get_AssemblyIdentity: DNObject;
    function get_Scope: DNIsolatedStorageScope;

  { methods } 

    function IncreaseQuotaTo(newQuotaSize: Int64): Boolean;
    procedure Remove;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaximumSize: UInt64 read get_MaximumSize;
    property CurrentSize: UInt64 read get_CurrentSize;
    property UsedSize: Int64 read get_UsedSize;
    property Quota: Int64 read get_Quota;
    property AvailableFreeSpace: Int64 read get_AvailableFreeSpace;
    property DomainIdentity: DNObject read get_DomainIdentity;
    property ApplicationIdentity: DNObject read get_ApplicationIdentity;
    property AssemblyIdentity: DNObject read get_AssemblyIdentity;
    property Scope: DNIsolatedStorageScope read get_Scope;
  end;

  TDNIsolatedStorage = class(TDNGenericImport<DNIsolatedStorageClass, DNIsolatedStorage>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageFileClass = interface(DNIsolatedStorageClass)
  ['{69B6D247-91D9-51FB-B637-EFF7CF90C6E0}']
  { static getter & setter } 

    {class} function get_IsEnabled: Boolean;

  { static methods } 

    {class} function GetUserStoreForDomain: DNIsolatedStorageFile;
    {class} function GetUserStoreForAssembly: DNIsolatedStorageFile;
    {class} function GetUserStoreForApplication: DNIsolatedStorageFile;
    {class} function GetUserStoreForSite: DNIsolatedStorageFile;
    {class} function GetMachineStoreForDomain: DNIsolatedStorageFile;
    {class} function GetMachineStoreForAssembly: DNIsolatedStorageFile;
    {class} function GetMachineStoreForApplication: DNIsolatedStorageFile;
    {class} function GetStore(scope: DNIsolatedStorageScope; domainEvidenceType: DNType; assemblyEvidenceType: DNType): DNIsolatedStorageFile; overload;
    {class} function GetStore(scope: DNIsolatedStorageScope; domainIdentity: DNObject; assemblyIdentity: DNObject): DNIsolatedStorageFile; overload;
    {class} function GetStore(scope: DNIsolatedStorageScope; domainEvidence: DNEvidence; domainEvidenceType: DNType; assemblyEvidence: DNEvidence; assemblyEvidenceType: DNType): DNIsolatedStorageFile; overload;
    {class} function GetStore(scope: DNIsolatedStorageScope; applicationEvidenceType: DNType): DNIsolatedStorageFile; overload;
    {class} function GetStore(scope: DNIsolatedStorageScope; applicationIdentity: DNObject): DNIsolatedStorageFile; overload;
    {class} procedure Remove(scope: DNIsolatedStorageScope); overload;
    {class} function GetEnumerator(scope: DNIsolatedStorageScope): DNIEnumerator;

  { static propertys } 

    {class} property IsEnabled: Boolean read get_IsEnabled;
  end;

  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageFile')]
  DNIsolatedStorageFile = interface(DNIsolatedStorage)
  ['{5E45C68A-E894-3B38-AEEE-634540BD0D57}']
  { getters & setters } 

    function get_UsedSize: Int64;
    function get_CurrentSize: UInt64;
    function get_AvailableFreeSpace: Int64;
    function get_Quota: Int64;
    function get_MaximumSize: UInt64;
    function get_DomainIdentity: DNObject;
    function get_ApplicationIdentity: DNObject;
    function get_AssemblyIdentity: DNObject;
    function get_Scope: DNIsolatedStorageScope;

  { methods } 

    function IncreaseQuotaTo(newQuotaSize: Int64): Boolean;
    procedure Remove; overload;
    procedure Dispose;
    procedure DeleteFile(&file: string);
    function FileExists(path: string): Boolean;
    function DirectoryExists(path: string): Boolean;
    procedure CreateDirectory(dir: string);
    function GetCreationTime(path: string): DNDateTimeOffset;
    function GetLastAccessTime(path: string): DNDateTimeOffset;
    function GetLastWriteTime(path: string): DNDateTimeOffset;
    procedure CopyFile(sourceFileName: string; destinationFileName: string); overload;
    procedure CopyFile(sourceFileName: string; destinationFileName: string; overwrite: Boolean); overload;
    procedure MoveFile(sourceFileName: string; destinationFileName: string);
    procedure MoveDirectory(sourceDirectoryName: string; destinationDirectoryName: string);
    procedure DeleteDirectory(dir: string);
    function GetFileNames: TArray<string>; overload;
    function GetFileNames(searchPattern: string): TArray<string>; overload;
    function GetDirectoryNames: TArray<string>; overload;
    function GetDirectoryNames(searchPattern: string): TArray<string>; overload;
    function OpenFile(path: string; mode: DNFileMode): DNIsolatedStorageFileStream; overload;
    function OpenFile(path: string; mode: DNFileMode; access: DNFileAccess): DNIsolatedStorageFileStream; overload;
    function OpenFile(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNIsolatedStorageFileStream; overload;
    function CreateFile(path: string): DNIsolatedStorageFileStream;
    procedure Close;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property UsedSize: Int64 read get_UsedSize;
    property CurrentSize: UInt64 read get_CurrentSize;
    property AvailableFreeSpace: Int64 read get_AvailableFreeSpace;
    property Quota: Int64 read get_Quota;
    property MaximumSize: UInt64 read get_MaximumSize;
    property DomainIdentity: DNObject read get_DomainIdentity;
    property ApplicationIdentity: DNObject read get_ApplicationIdentity;
    property AssemblyIdentity: DNObject read get_AssemblyIdentity;
    property Scope: DNIsolatedStorageScope read get_Scope;
  end;

  TDNIsolatedStorageFile = class(TDNGenericImport<DNIsolatedStorageFileClass, DNIsolatedStorageFile>) end;

  //-------------namespace: System.IO----------------
  DNStreamClass = interface(DNMarshalByRefObjectClass)
  ['{0101CA57-71DD-5401-9604-1BE3BE4C7B0F}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStream;

  { static fields } 

    {class} property Null: DNStream read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(stream: DNStream): DNStream;

  end;

  [DNTypeName('System.IO.Stream')]
  DNStream = interface(DNMarshalByRefObject)
  ['{E331083B-C22D-3046-8EC7-D222D6BE031F}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    procedure Flush;
    function FlushAsync: DNTask; overload;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function Read([in][out]buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanTimeout: Boolean read get_CanTimeout;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNStream = class(TDNGenericImport<DNStreamClass, DNStream>) end;

  //-------------namespace: System.IO----------------
  DNBufferedStreamClass = interface(DNStreamClass)
  ['{9CF75BF5-04E2-5402-A5C7-BEF4BD4D7D6E}']
  { constructors } 

    {class} function init(stream: DNStream): DNBufferedStream; overload;
    {class} function init(stream: DNStream; bufferSize: Int32): DNBufferedStream; overload;

  end;

  [DNTypeName('System.IO.BufferedStream')]
  DNBufferedStream = interface(DNStream)
  ['{1500ABC0-1DD4-37DD-985F-82430314C798}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function Read([in][out]&array: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadByte: Int32;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32);
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure WriteByte(value: Byte);
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNBufferedStream = class(TDNGenericImport<DNBufferedStreamClass, DNBufferedStream>) end;

  //-------------namespace: System.IO----------------
  DNFileStreamClass = interface(DNStreamClass)
  ['{CDAA674F-2961-507E-854C-BED656655974}']
  { constructors } 

    {class} function init(path: string; mode: DNFileMode): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; useAsync: Boolean): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; rights: DNFileSystemRights; share: DNFileShare; bufferSize: Int32; options: DNFileOptions; fileSecurity: DNFileSecurity): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; rights: DNFileSystemRights; share: DNFileShare; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;

  end;

  [DNTypeName('System.IO.FileStream')]
  DNFileStream = interface(DNStream)
  ['{7F25E491-33BE-31E2-A334-CB506D4EE471}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_IsAsync: Boolean;
    function get_Length: Int64;
    function get_Name: string;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_Handle: IntPtr;
    function get_SafeFileHandle: DNSafeFileHandle;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush; overload;
    procedure Flush(flushToDisk: Boolean); overload;
    procedure SetLength(value: Int64);
    function Read([in][out]&array: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32);
    function BeginRead(&array: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadByte: Int32;
    function BeginWrite(&array: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    procedure WriteByte(value: Byte);
    function GetAccessControl: DNFileSecurity;
    procedure SetAccessControl(fileSecurity: DNFileSecurity);
    procedure Lock(position: Int64; length: Int64);
    procedure Unlock(position: Int64; length: Int64);
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property IsAsync: Boolean read get_IsAsync;
    property Length: Int64 read get_Length;
    property Name: string read get_Name;
    property Position: Int64 read get_Position write set_Position;
    property Handle: IntPtr read get_Handle;
    property SafeFileHandle: DNSafeFileHandle read get_SafeFileHandle;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNFileStream = class(TDNGenericImport<DNFileStreamClass, DNFileStream>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageFileStreamClass = interface(DNFileStreamClass)
  ['{B27E9E05-C566-53E0-8129-DD874AE7C0A9}']
  { constructors } 

    {class} function init(path: string; mode: DNFileMode): DNIsolatedStorageFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess): DNIsolatedStorageFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNIsolatedStorageFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32): DNIsolatedStorageFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; isf: DNIsolatedStorageFile): DNIsolatedStorageFileStream; overload;

  end;

  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageFileStream')]
  DNIsolatedStorageFileStream = interface(DNFileStream)
  ['{E5CFDFFC-AEB5-3489-B12C-640F7B031B57}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_IsAsync: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_Handle: IntPtr;
    function get_SafeFileHandle: DNSafeFileHandle;
    function get_Name: string;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush; overload;
    procedure Flush(flushToDisk: Boolean); overload;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function ReadByte: Int32;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    procedure SetLength(value: Int64);
    procedure Lock(position: Int64; length: Int64);
    procedure Unlock(position: Int64; length: Int64);
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    procedure WriteByte(value: Byte);
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; numBytes: Int32; userCallback: DNAsyncCallback; stateObject: DNObject): DNIAsyncResult;
    function GetAccessControl: DNFileSecurity;
    procedure SetAccessControl(fileSecurity: DNFileSecurity);
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property IsAsync: Boolean read get_IsAsync;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property Handle: IntPtr read get_Handle;
    property SafeFileHandle: DNSafeFileHandle read get_SafeFileHandle;
    property Name: string read get_Name;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNIsolatedStorageFileStream = class(TDNGenericImport<DNIsolatedStorageFileStreamClass, DNIsolatedStorageFileStream>) end;

  //-------------namespace: System.IO----------------
  DNMemoryStreamClass = interface(DNStreamClass)
  ['{EBCFC347-736A-55EA-B318-94D2BC817AA1}']
  { constructors } 

    {class} function init: DNMemoryStream; overload;
    {class} function init(capacity: Int32): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; writable: Boolean): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean; publiclyVisible: Boolean): DNMemoryStream; overload;

  end;

  [DNTypeName('System.IO.MemoryStream')]
  DNMemoryStream = interface(DNStream)
  ['{F5E692D9-8A87-349D-9657-F96E5799D2F4}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function GetBuffer: TArray<Byte>;
    function TryGetBuffer(out buffer: DNArraySegment<Byte>): Boolean;
    function Read([in][out]buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadByte: Int32;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function ToArray: TArray<Byte>;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure WriteByte(value: Byte);
    procedure WriteTo(stream: DNStream);
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNMemoryStream = class(TDNGenericImport<DNMemoryStreamClass, DNMemoryStream>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryStreamClass = interface(DNStreamClass)
  ['{F1FAB887-B75D-5EF5-A285-CD5A9078299F}']
  { constructors } 

    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64): DNUnmanagedMemoryStream; overload;
    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;
    {class} function init(pointer: PByte; length: Int64): DNUnmanagedMemoryStream; overload;
    {class} function init(pointer: PByte; length: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;

  end;

  [DNTypeName('System.IO.UnmanagedMemoryStream')]
  DNUnmanagedMemoryStream = interface(DNStream)
  ['{A9747127-52A6-3987-A492-7AD23522D2B4}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Capacity: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_PositionPointer: PByte;
    procedure set_PositionPointer(value: PByte);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function Read([in][out]buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function ReadByte: Int32;
    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Capacity: Int64 read get_Capacity;
    property Position: Int64 read get_Position write set_Position;
    property PositionPointer: PByte read get_PositionPointer write set_PositionPointer;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNUnmanagedMemoryStream = class(TDNGenericImport<DNUnmanagedMemoryStreamClass, DNUnmanagedMemoryStream>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptoStreamClass = interface(DNStreamClass)
  ['{A8A4A641-6B8D-5788-B3C4-C0244E1A81F2}']
  { constructors } 

    {class} function init(stream: DNStream; transform: DNICryptoTransform; mode: DNCryptoStreamMode): DNCryptoStream; overload;
    {class} function init(stream: DNStream; transform: DNICryptoTransform; mode: DNCryptoStreamMode; leaveOpen: Boolean): DNCryptoStream; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CryptoStream')]
  DNCryptoStream = interface(DNStream)
  ['{B5C4E3CA-476A-3961-BCA5-A6C0AD73E7B1}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_HasFlushedFinalBlock: Boolean;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure FlushFinalBlock;
    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function Read([in][out]buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Clear;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property HasFlushedFinalBlock: Boolean read get_HasFlushedFinalBlock;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNCryptoStream = class(TDNGenericImport<DNCryptoStreamClass, DNCryptoStream>) end;

  //-------------namespace: System.IO----------------
  DNTextReaderClass = interface(DNMarshalByRefObjectClass)
  ['{6E79EF4B-D782-579E-95AB-0A56748F2910}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNTextReader;

  { static fields } 

    {class} property Null: DNTextReader read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(reader: DNTextReader): DNTextReader;

  end;

  [DNTypeName('System.IO.TextReader')]
  DNTextReader = interface(DNMarshalByRefObject)
  ['{7457D481-248A-3C89-B7E0-FCEB8FD827E5}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read([in][out]buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadToEnd: string;
    function ReadBlock([in][out]buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTextReader = class(TDNGenericImport<DNTextReaderClass, DNTextReader>) end;

  //-------------namespace: System.IO----------------
  DNStreamReaderClass = interface(DNTextReaderClass)
  ['{677F0452-97CE-5C39-B1B6-DED16004C866}']
  { constructors } 

    {class} function init(stream: DNStream): DNStreamReader; overload;
    {class} function init(stream: DNStream; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32; leaveOpen: Boolean): DNStreamReader; overload;
    {class} function init(path: string): DNStreamReader; overload;
    {class} function init(path: string; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStreamReader;

  { static fields } 

    {class} property Null: DNStreamReader read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.StreamReader')]
  DNStreamReader = interface(DNTextReader)
  ['{405FB68B-360D-382C-8A64-1DA3C853D161}']
  { getters & setters } 

    function get_CurrentEncoding: DNEncoding;
    function get_BaseStream: DNStream;
    function get_EndOfStream: Boolean;

  { methods } 

    procedure Close;
    function Peek: Int32;
    function Read: Int32; overload;
    function ReadToEnd: string;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    procedure DiscardBufferedData;
    function Read([in][out]buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadBlock([in][out]buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CurrentEncoding: DNEncoding read get_CurrentEncoding;
    property BaseStream: DNStream read get_BaseStream;
    property EndOfStream: Boolean read get_EndOfStream;
  end;

  TDNStreamReader = class(TDNGenericImport<DNStreamReaderClass, DNStreamReader>) end;

  //-------------namespace: System.IO----------------
  DNStringReaderClass = interface(DNTextReaderClass)
  ['{B9C0758D-3499-5CCE-86FE-03BD85D6D452}']
  { constructors } 

    {class} function init(s: string): DNStringReader;

  end;

  [DNTypeName('System.IO.StringReader')]
  DNStringReader = interface(DNTextReader)
  ['{0247D5AF-D61D-341C-8615-0FF28865B7CB}']
  { methods } 

    procedure Close;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read([in][out]buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadToEnd: string;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>;
    procedure Dispose;
    function ReadBlock([in][out]buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNStringReader = class(TDNGenericImport<DNStringReaderClass, DNStringReader>) end;

  //-------------namespace: System.IO----------------
  DNTextWriterClass = interface(DNMarshalByRefObjectClass)
  ['{D6601DC8-5EE4-5057-B280-59E95EF5FA5B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNTextWriter;

  { static fields } 

    {class} property Null: DNTextWriter read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(writer: DNTextWriter): DNTextWriter;

  end;

  [DNTypeName('System.IO.TextWriter')]
  DNTextWriter = interface(DNMarshalByRefObject)
  ['{08416C5B-A003-327C-9F0F-93942467E6E0}']
  { getters & setters } 

    function get_FormatProvider: DNIFormatProvider;
    function get_Encoding: DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure Flush;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: string); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function FlushAsync: DNTask;
    procedure Write(value: Boolean); overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property Encoding: DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNTextWriter = class(TDNGenericImport<DNTextWriterClass, DNTextWriter>) end;

  //-------------namespace: System.IO----------------
  DNStreamWriterClass = interface(DNTextWriterClass)
  ['{8369B9F4-3685-58C9-9E50-4C3B8024D35E}']
  { constructors } 

    {class} function init(stream: DNStream): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32; leaveOpen: Boolean): DNStreamWriter; overload;
    {class} function init(path: string): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean; encoding: DNEncoding): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStreamWriter;

  { static fields } 

    {class} property Null: DNStreamWriter read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.StreamWriter')]
  DNStreamWriter = interface(DNTextWriter)
  ['{EF1AB726-0B87-3E09-AEF4-3A87C5DCDDA0}']
  { getters & setters } 

    function get_AutoFlush: Boolean;
    procedure set_AutoFlush(value: Boolean);
    function get_BaseStream: DNStream;
    function get_Encoding: DNEncoding;
    function get_FormatProvider: DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Flush;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Close;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(value: string); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function FlushAsync: DNTask;
    procedure Dispose;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    procedure Write(value: Boolean); overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    property BaseStream: DNStream read get_BaseStream;
    property Encoding: DNEncoding read get_Encoding;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStreamWriter = class(TDNGenericImport<DNStreamWriterClass, DNStreamWriter>) end;

  //-------------namespace: System.IO----------------
  DNStringWriterClass = interface(DNTextWriterClass)
  ['{1B44E88D-DD9D-58BC-81E1-AA165C978392}']
  { constructors } 

    {class} function init: DNStringWriter; overload;
    {class} function init(formatProvider: DNIFormatProvider): DNStringWriter; overload;
    {class} function init(sb: DNStringBuilder): DNStringWriter; overload;
    {class} function init(sb: DNStringBuilder; formatProvider: DNIFormatProvider): DNStringWriter; overload;

  end;

  [DNTypeName('System.IO.StringWriter')]
  DNStringWriter = interface(DNTextWriter)
  ['{27F31D55-D6C6-3676-9D42-C40F3A918636}']
  { getters & setters } 

    function get_Encoding: DNEncoding;
    function get_FormatProvider: DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    function GetStringBuilder: DNStringBuilder;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: string); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function FlushAsync: DNTask;
    function ToString: string;
    procedure Dispose;
    procedure Flush;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteLineAsync: DNTask; overload;
    procedure Write(value: Boolean); overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Encoding: DNEncoding read get_Encoding;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStringWriter = class(TDNGenericImport<DNStringWriterClass, DNStringWriter>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameProxyClass = interface(DNMarshalByRefObjectClass)
  ['{BE3297C9-0EEA-5AC4-92E8-21F62DF012AE}']
  { constructors } 

    {class} function init: DNAssemblyNameProxy;

  end;

  [DNTypeName('System.Reflection.AssemblyNameProxy')]
  DNAssemblyNameProxy = interface(DNMarshalByRefObject)
  ['{3F4A4283-6A08-3E90-A976-2C2D3BE4EB0B}']
  { methods } 

    function GetAssemblyName(assemblyFile: string): DNAssemblyName;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAssemblyNameProxy = class(TDNGenericImport<DNAssemblyNameProxyClass, DNAssemblyNameProxy>) end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  DNClientSponsorClass = interface(DNMarshalByRefObjectClass)
  ['{10DE34D3-9D27-5049-8493-D8753C2F9704}']
  { constructors } 

    {class} function init: DNClientSponsor; overload;
    {class} function init(renewalTime: DNTimeSpan): DNClientSponsor; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.Lifetime.ClientSponsor')]
  DNClientSponsor = interface(DNMarshalByRefObject)
  ['{FD8C8FCE-4F85-36B2-B8E8-F5A183654539}']
  { getters & setters } 

    function get_RenewalTime: DNTimeSpan;
    procedure set_RenewalTime(value: DNTimeSpan);

  { methods } 

    function Renewal(lease: DNILease): DNTimeSpan;
    function InitializeLifetimeService: DNObject;
    function &Register(obj: DNMarshalByRefObject): Boolean;
    procedure Unregister(obj: DNMarshalByRefObject);
    procedure Close;
    function GetLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property RenewalTime: DNTimeSpan read get_RenewalTime write set_RenewalTime;
  end;

  TDNClientSponsor = class(TDNGenericImport<DNClientSponsorClass, DNClientSponsor>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNObjectHandleClass = interface(DNMarshalByRefObjectClass)
  ['{BA41537E-1686-5624-9D32-6F47ACFC3E22}']
  { constructors } 

    {class} function init(o: DNObject): DNObjectHandle;

  end;

  [DNTypeName('System.Runtime.Remoting.ObjectHandle')]
  DNObjectHandle = interface(DNMarshalByRefObject)
  ['{ABEB0459-03B9-35AF-96E1-66BB7BC923F7}']
  { methods } 

    function Unwrap: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectHandle = class(TDNGenericImport<DNObjectHandleClass, DNObjectHandle>) end;

  //-------------namespace: System.Threading----------------
  DNRegisteredWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{6500E490-D6E0-5444-9D98-EFA75EDF7D38}']
  end;

  [DNTypeName('System.Threading.RegisteredWaitHandle')]
  DNRegisteredWaitHandle = interface(DNMarshalByRefObject)
  ['{50F8AE2B-69F0-37EF-954B-D2618E3E8267}']
  { methods } 

    function Unregister(waitObject: DNWaitHandle): Boolean;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRegisteredWaitHandle = class(TDNGenericImport<DNRegisteredWaitHandleClass, DNRegisteredWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimerClass = interface(DNMarshalByRefObjectClass)
  ['{00F537C0-090A-5E4E-AF27-C9224971738C}']
  { constructors } 

    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int32; period: Int32): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: DNTimeSpan; period: DNTimeSpan): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: UInt32; period: UInt32): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int64; period: Int64): DNTimer; overload;
    {class} function init(callback: DNTimerCallback): DNTimer; overload;

  end;

  [DNTypeName('System.Threading.Timer')]
  DNTimer = interface(DNMarshalByRefObject)
  ['{490CA7A8-D03F-3459-8208-D428EA010DA0}']
  { methods } 

    procedure Dispose; overload;
    function Change(dueTime: Int32; period: Int32): Boolean; overload;
    function Change(dueTime: DNTimeSpan; period: DNTimeSpan): Boolean; overload;
    function Change(dueTime: UInt32; period: UInt32): Boolean; overload;
    function Change(dueTime: Int64; period: Int64): Boolean; overload;
    function Dispose(notifyObject: DNWaitHandle): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTimer = class(TDNGenericImport<DNTimerClass, DNTimer>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{3B37A2FA-692C-5EC7-AC8D-C99AE001068C}']
  { static methods } 

    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Boolean; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Int32; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle): Boolean; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Threading.WaitHandle')]
  DNWaitHandle = interface(DNMarshalByRefObject)
  ['{4D0E564A-78C8-31E0-BA03-73AF7BDFF5A9}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNWaitHandle = class(TDNGenericImport<DNWaitHandleClass, DNWaitHandle>)
  public const
   WaitTimeout = 258;
  end;

  //-------------namespace: System.Threading----------------
  DNEventWaitHandleClass = interface(DNWaitHandleClass)
  ['{AF096E4D-905C-5474-9560-6C6358898CBD}']
  { constructors } 

    {class} function init(initialState: Boolean; mode: DNEventResetMode): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string; out createdNew: Boolean): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string; out createdNew: Boolean; eventSecurity: DNEventWaitHandleSecurity): DNEventWaitHandle; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNEventWaitHandle; overload;
    {class} function OpenExisting(name: string; rights: DNEventWaitHandleRights): DNEventWaitHandle; overload;
    {class} function TryOpenExisting(name: string; out result: DNEventWaitHandle): Boolean; overload;
    {class} function TryOpenExisting(name: string; rights: DNEventWaitHandleRights; out result: DNEventWaitHandle): Boolean; overload;

  end;

  [DNTypeName('System.Threading.EventWaitHandle')]
  DNEventWaitHandle = interface(DNWaitHandle)
  ['{80226212-1832-310F-862C-A511E3534E62}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function GetAccessControl: DNEventWaitHandleSecurity;
    procedure SetAccessControl(eventSecurity: DNEventWaitHandleSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNEventWaitHandle = class(TDNGenericImport<DNEventWaitHandleClass, DNEventWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNAutoResetEventClass = interface(DNEventWaitHandleClass)
  ['{B6ECD0AF-7318-5D34-864B-3D09803D593D}']
  { constructors } 

    {class} function init(initialState: Boolean): DNAutoResetEvent;

  end;

  [DNTypeName('System.Threading.AutoResetEvent')]
  DNAutoResetEvent = interface(DNEventWaitHandle)
  ['{E35AF4DD-EB37-39FC-9071-4CE39B1A54BE}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function GetAccessControl: DNEventWaitHandleSecurity;
    procedure SetAccessControl(eventSecurity: DNEventWaitHandleSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNAutoResetEvent = class(TDNGenericImport<DNAutoResetEventClass, DNAutoResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventClass = interface(DNEventWaitHandleClass)
  ['{E63E9EFE-111A-521A-8A02-046D98AFD7C4}']
  { constructors } 

    {class} function init(initialState: Boolean): DNManualResetEvent;

  end;

  [DNTypeName('System.Threading.ManualResetEvent')]
  DNManualResetEvent = interface(DNEventWaitHandle)
  ['{17A355C3-C65E-3F26-8A80-236890EBC997}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function GetAccessControl: DNEventWaitHandleSecurity;
    procedure SetAccessControl(eventSecurity: DNEventWaitHandleSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNManualResetEvent = class(TDNGenericImport<DNManualResetEventClass, DNManualResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNMutexClass = interface(DNWaitHandleClass)
  ['{030BF013-8706-5531-A350-758A26E85CE3}']
  { constructors } 

    {class} function init(initiallyOwned: Boolean; name: string; out createdNew: Boolean): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean; name: string; out createdNew: Boolean; mutexSecurity: DNMutexSecurity): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean; name: string): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean): DNMutex; overload;
    {class} function init: DNMutex; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNMutex; overload;
    {class} function OpenExisting(name: string; rights: DNMutexRights): DNMutex; overload;
    {class} function TryOpenExisting(name: string; out result: DNMutex): Boolean; overload;
    {class} function TryOpenExisting(name: string; rights: DNMutexRights; out result: DNMutex): Boolean; overload;

  end;

  [DNTypeName('System.Threading.Mutex')]
  DNMutex = interface(DNWaitHandle)
  ['{D74D613D-F27F-311B-A9A3-27EBC63A1A5D}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    procedure ReleaseMutex;
    function GetAccessControl: DNMutexSecurity;
    procedure SetAccessControl(mutexSecurity: DNMutexSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNMutex = class(TDNGenericImport<DNMutexClass, DNMutex>) end;

  //-------------namespace: System----------------
  DNMathClass = interface(DNObjectClass)
  ['{AED40389-5A27-53BC-B452-648FC74EF992}']
  { static methods } 

    {class} function Ceiling(d: DNDecimal): DNDecimal; overload;
    {class} function Floor(d: DNDecimal): DNDecimal; overload;
    {class} function Round(value: Double; digits: Int32): Double; overload;
    {class} function Round(value: Double; mode: DNMidpointRounding): Double; overload;
    {class} function Round(value: Double; digits: Int32; mode: DNMidpointRounding): Double; overload;
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;
    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Truncate(d: DNDecimal): DNDecimal; overload;
    {class} function Truncate(d: Double): Double; overload;
    {class} function IEEERemainder(x: Double; y: Double): Double;
    {class} function Abs(value: SByte): SByte; overload;
    {class} function Abs(value: Int16): Int16; overload;
    {class} function Abs(value: Int32): Int32; overload;
    {class} function Abs(value: Int64): Int64; overload;
    {class} function Abs(value: DNDecimal): DNDecimal; overload;
    {class} function Max(val1: SByte; val2: SByte): SByte; overload;
    {class} function Max(val1: Byte; val2: Byte): Byte; overload;
    {class} function Max(val1: Int16; val2: Int16): Int16; overload;
    {class} function Max(val1: UInt16; val2: UInt16): UInt16; overload;
    {class} function Max(val1: Int32; val2: Int32): Int32; overload;
    {class} function Max(val1: UInt32; val2: UInt32): UInt32; overload;
    {class} function Max(val1: Int64; val2: Int64): Int64; overload;
    {class} function Max(val1: UInt64; val2: UInt64): UInt64; overload;
    {class} function Max(val1: Single; val2: Single): Single; overload;
    {class} function Max(val1: Double; val2: Double): Double; overload;
    {class} function Max(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    {class} function Min(val1: SByte; val2: SByte): SByte; overload;
    {class} function Min(val1: Byte; val2: Byte): Byte; overload;
    {class} function Min(val1: Int16; val2: Int16): Int16; overload;
    {class} function Min(val1: UInt16; val2: UInt16): UInt16; overload;
    {class} function Min(val1: Int32; val2: Int32): Int32; overload;
    {class} function Min(val1: UInt32; val2: UInt32): UInt32; overload;
    {class} function Min(val1: Int64; val2: Int64): Int64; overload;
    {class} function Min(val1: UInt64; val2: UInt64): UInt64; overload;
    {class} function Min(val1: Single; val2: Single): Single; overload;
    {class} function Min(val1: Double; val2: Double): Double; overload;
    {class} function Min(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    {class} function Log(a: Double; newBase: Double): Double; overload;
    {class} function Sign(value: SByte): Int32; overload;
    {class} function Sign(value: Int16): Int32; overload;
    {class} function Sign(value: Int32): Int32; overload;
    {class} function Sign(value: Int64): Int32; overload;
    {class} function Sign(value: Single): Int32; overload;
    {class} function Sign(value: Double): Int32; overload;
    {class} function Sign(value: DNDecimal): Int32; overload;
    {class} function BigMul(a: Int32; b: Int32): Int64;
    {class} function DivRem(a: Int32; b: Int32; out result: Int32): Int32; overload;
    {class} function DivRem(a: Int64; b: Int64; out result: Int64): Int64; overload;
    {class} function Acos(d: Double): Double;
    {class} function Asin(d: Double): Double;
    {class} function Atan(d: Double): Double;
    {class} function Atan2(y: Double; x: Double): Double;
    {class} function Cosh(value: Double): Double;
    {class} function Sinh(value: Double): Double;
    {class} function Tanh(value: Double): Double;
    {class} function Sqrt(d: Double): Double;
    {class} function Log10(d: Double): Double;
    {class} function Abs(value: Single): Single; overload;
    {class} function Abs(value: Double): Double; overload;
    {class} function Ceiling(a: Double): Double; overload;
    {class} function Cos(d: Double): Double;
    {class} function Floor(d: Double): Double; overload;
    {class} function Sin(a: Double): Double;
    {class} function Tan(a: Double): Double;
    {class} function Round(a: Double): Double; overload;
    {class} function Log(d: Double): Double; overload;
    {class} function Exp(d: Double): Double;
    {class} function Pow(x: Double; y: Double): Double;

  end;

  [DNTypeName('System.Math')]
  DNMath = interface(DNObject)
  ['{40CE262D-D951-3EB6-9B05-48A1EB4D0EBC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMath = class(TDNGenericImport<DNMathClass, DNMath>)
  public const
   PI = 3.14159265358979;
   E = 2.71828182845905;
  end;

  //-------------namespace: System----------------
  DNNullableClass = interface(DNObjectClass)
  ['{993ACFD5-3939-5179-AFF4-8C0C51F8BBCA}']
  { static methods } 

    {class} function GetUnderlyingType(nullableType: DNType): DNType;

  end;

  [DNTypeName('System.Nullable')]
  DNNullable = interface(DNObject)
  ['{F358AC62-4569-3705-BE32-B07E799B4223}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNNullable = class(TDNGenericImport<DNNullableClass, DNNullable>) end;

  //-------------namespace: System----------------
  DNOperatingSystemClass = interface(DNObjectClass)
  ['{C8706D32-26AB-5805-80B5-31D9EAFED627}']
  { constructors } 

    {class} function init(platform: DNPlatformID; version: DNVersion): DNOperatingSystem;

  end;

  [DNTypeName('System.OperatingSystem')]
  DNOperatingSystem = interface(DNICloneable)
  ['{D7CA3B25-A57B-354C-8758-9FE3A905C1AC}']
  { getters & setters } 

    function get_Platform: DNPlatformID;
    function get_ServicePack: string;
    function get_Version: DNVersion;
    function get_VersionString: string;

  { methods } 

    function Clone: DNObject;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Platform: DNPlatformID read get_Platform;
    property ServicePack: string read get_ServicePack;
    property Version: DNVersion read get_Version;
    property VersionString: string read get_VersionString;
  end;

  TDNOperatingSystem = class(TDNGenericImport<DNOperatingSystemClass, DNOperatingSystem>) end;

  //-------------namespace: System----------------
  DNProgressClass<T> = interface(DNObjectClass)
  ['{68AF7F40-332C-59E9-90F8-E82003107B5A}']
  { constructors } 

    {class} function init: DNProgress<T>; overload;
    {class} function init(handler: DNAction<T>): DNProgress<T>; overload;

  end;

  [DNTypeName('System.Progress`1')]
  DNProgress<T> = interface(DNIProgress<T>)
  ['{0DBC9BC4-9081-3BD1-8559-3C60AA1A69CF}']
  { events } 

    procedure add_ProgressChanged(value: DNEventHandler<T>);
    procedure remove_ProgressChanged(value: DNEventHandler<T>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNProgress<T> = class(TDNGenericImport<DNProgressClass<T>, DNProgress<T>>) end;

  //-------------namespace: System----------------
  DNRandomClass = interface(DNObjectClass)
  ['{A228FC0C-E770-5053-9CEC-19F54F470185}']
  { constructors } 

    {class} function init: DNRandom; overload;
    {class} function init(Seed: Int32): DNRandom; overload;

  end;

  [DNTypeName('System.Random')]
  DNRandom = interface(DNObject)
  ['{4E77EC8F-51D8-386C-85FE-7DC931B7A8E7}']
  { methods } 

    function Next: Int32; overload;
    function Next(minValue: Int32; maxValue: Int32): Int32; overload;
    function Next(maxValue: Int32): Int32; overload;
    function NextDouble: Double;
    procedure NextBytes(buffer: TArray<Byte>);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRandom = class(TDNGenericImport<DNRandomClass, DNRandom>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyClass = interface(DNObjectClass)
  ['{08EB5967-E9FF-5BA6-BA78-8CF90BD97848}']
  { static methods } 

    {class} function GetAssembly(&type: DNType): DNAssembly;
    {class} function LoadFrom(assemblyFile: string): DNAssembly; overload;
    {class} function ReflectionOnlyLoadFrom(assemblyFile: string): DNAssembly;
    {class} function LoadFrom(assemblyFile: string; securityEvidence: DNEvidence): DNAssembly; overload;
    {class} function LoadFrom(assemblyFile: string; securityEvidence: DNEvidence; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNAssembly; overload;
    {class} function LoadFrom(assemblyFile: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNAssembly; overload;
    {class} function UnsafeLoadFrom(assemblyFile: string): DNAssembly;
    {class} function Load(assemblyString: string): DNAssembly; overload;
    {class} function ReflectionOnlyLoad(assemblyString: string): DNAssembly; overload;
    {class} function Load(assemblyString: string; assemblySecurity: DNEvidence): DNAssembly; overload;
    {class} function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    {class} function Load(assemblyRef: DNAssemblyName; assemblySecurity: DNEvidence): DNAssembly; overload;
    {class} function LoadWithPartialName(partialName: string): DNAssembly; overload;
    {class} function LoadWithPartialName(partialName: string; securityEvidence: DNEvidence): DNAssembly; overload;
    {class} function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    {class} function ReflectionOnlyLoad(rawAssembly: TArray<Byte>): DNAssembly; overload;
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityContextSource: DNSecurityContextSource): DNAssembly; overload;
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>; securityEvidence: DNEvidence): DNAssembly; overload;
    {class} function LoadFile(path: string): DNAssembly; overload;
    {class} function LoadFile(path: string; securityEvidence: DNEvidence): DNAssembly; overload;
    {class} function GetExecutingAssembly: DNAssembly;
    {class} function GetCallingAssembly: DNAssembly;
    {class} function GetEntryAssembly: DNAssembly;
    {class} function CreateQualifiedName(assemblyName: string; typeName: string): string;

  end;

  [DNTypeName('System.Reflection.Assembly')]
  DNAssembly = interface(DN_Assembly)
  ['{28E89A9F-E67D-3028-AA1B-E5EBCDE6F3C8}']
  { getters & setters } 

    function get_CodeBase: string;
    function get_EscapedCodeBase: string;
    function get_FullName: string;
    function get_EntryPoint: DNMethodInfo;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_Evidence: DNEvidence;
    function get_PermissionSet: DNPermissionSet;
    function get_IsFullyTrusted: Boolean;
    function get_SecurityRuleSet: DNSecurityRuleSet;
    function get_ManifestModule: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_ReflectionOnly: Boolean;
    function get_Modules: DNIEnumerable<DNModule>;
    function get_Location: string;
    function get_ImageRuntimeVersion: string;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_IsDynamic: Boolean;

  { events } 

    procedure add_ModuleResolve(value: DNModuleResolveEventHandler);
    procedure remove_ModuleResolve(value: DNModuleResolveEventHandler);

  { methods } 

    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetName: DNAssemblyName; overload;
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function GetExportedTypes: TArray<DNType>;
    function GetTypes: TArray<DNType>;
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    function GetManifestResourceStream(name: string): DNStream; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetModules: TArray<DNModule>; overload;
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetModule(name: string): DNModule;
    function GetFile(name: string): DNFileStream;
    function GetFiles: TArray<DNFileStream>; overload;
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    function GetManifestResourceNames: TArray<string>;
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    property CodeBase: string read get_CodeBase;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property FullName: string read get_FullName;
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    property Evidence: DNEvidence read get_Evidence;
    property PermissionSet: DNPermissionSet read get_PermissionSet;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
    property ManifestModule: DNModule read get_ManifestModule;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    property Modules: DNIEnumerable<DNModule> read get_Modules;
    property Location: string read get_Location;
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    property HostContext: Int64 read get_HostContext;
    property IsDynamic: Boolean read get_IsDynamic;
  end;

  TDNAssembly = class(TDNGenericImport<DNAssemblyClass, DNAssembly>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNAssemblyBuilderClass = interface(DNAssemblyClass)
  ['{5E1C3283-668E-5C24-B68C-1896B8A55D5A}']
  { static methods } 

    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;

  end;

  [DNTypeName('System.Reflection.Emit.AssemblyBuilder')]
  DNAssemblyBuilder = interface(DNAssembly)
  ['{0814BE2A-48E5-3D61-90F3-EF3D05DF9D5E}']
  { getters & setters } 

    function get_Location: string;
    function get_ImageRuntimeVersion: string;
    function get_CodeBase: string;
    function get_EntryPoint: DNMethodInfo;
    function get_FullName: string;
    function get_Evidence: DNEvidence;
    function get_PermissionSet: DNPermissionSet;
    function get_SecurityRuleSet: DNSecurityRuleSet;
    function get_ManifestModule: DNModule;
    function get_ReflectionOnly: Boolean;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_IsDynamic: Boolean;
    function get_EscapedCodeBase: string;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_IsFullyTrusted: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_Modules: DNIEnumerable<DNModule>;

  { events } 

    procedure add_ModuleResolve(value: DNModuleResolveEventHandler);
    procedure remove_ModuleResolve(value: DNModuleResolveEventHandler);

  { methods } 

    function DefineDynamicModule(name: string): DNModuleBuilder; overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function DefineDynamicModule(name: string; emitSymbolInfo: Boolean): DNModuleBuilder; overload;
    function DefineDynamicModule(name: string; fileName: string): DNModuleBuilder; overload;
    function DefineDynamicModule(name: string; fileName: string; emitSymbolInfo: Boolean): DNModuleBuilder; overload;
    function DefineResource(name: string; description: string; fileName: string): DNIResourceWriter; overload;
    function DefineResource(name: string; description: string; fileName: string; attribute: DNResourceAttributes): DNIResourceWriter; overload;
    procedure AddResourceFile(name: string; fileName: string); overload;
    procedure AddResourceFile(name: string; fileName: string; attribute: DNResourceAttributes); overload;
    function Equals(obj: DNObject): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetManifestResourceNames: TArray<string>;
    function GetFile(name: string): DNFileStream;
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    function GetManifestResourceStream(name: string): DNStream; overload;
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    function GetExportedTypes: TArray<DNType>;
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function GetModule(name: string): DNModule;
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    procedure DefineVersionInfoResource(product: string; productVersion: string; company: string; copyright: string; trademark: string); overload;
    procedure DefineVersionInfoResource; overload;
    procedure DefineUnmanagedResource(resource: TArray<Byte>); overload;
    procedure DefineUnmanagedResource(resourceFileName: string); overload;
    function GetDynamicModule(name: string): DNModuleBuilder;
    procedure SetEntryPoint(entryMethod: DNMethodInfo); overload;
    procedure SetEntryPoint(entryMethod: DNMethodInfo; fileKind: DNPEFileKinds); overload;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure Save(assemblyFileName: string); overload;
    procedure Save(assemblyFileName: string; portableExecutableKind: DNPortableExecutableKinds; imageFileMachine: DNImageFileMachine); overload;
    function GetHashCode: Int32;
    function GetName: DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function GetTypes: TArray<DNType>;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetModules: TArray<DNModule>; overload;
    function GetFiles: TArray<DNFileStream>; overload;
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    property Location: string read get_Location;
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    property CodeBase: string read get_CodeBase;
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    property FullName: string read get_FullName;
    property Evidence: DNEvidence read get_Evidence;
    property PermissionSet: DNPermissionSet read get_PermissionSet;
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
    property ManifestModule: DNModule read get_ManifestModule;
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    property HostContext: Int64 read get_HostContext;
    property IsDynamic: Boolean read get_IsDynamic;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property Modules: DNIEnumerable<DNModule> read get_Modules;
  end;

  TDNAssemblyBuilder = class(TDNGenericImport<DNAssemblyBuilderClass, DNAssemblyBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameClass = interface(DNObjectClass)
  ['{717CA142-437A-5818-AC63-832F649735AB}']
  { constructors } 

    {class} function init: DNAssemblyName; overload;
    {class} function init(assemblyName: string): DNAssemblyName; overload;

  { static methods } 

    {class} function GetAssemblyName(assemblyFile: string): DNAssemblyName;
    {class} function ReferenceMatchesDefinition(reference: DNAssemblyName; definition: DNAssemblyName): Boolean;

  end;

  [DNTypeName('System.Reflection.AssemblyName')]
  DNAssemblyName = interface(DN_AssemblyName)
  ['{F12FDE6A-9394-3C32-8E4D-F3D470947284}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);
    function get_CultureInfo: DNCultureInfo;
    procedure set_CultureInfo(value: DNCultureInfo);
    function get_CultureName: string;
    procedure set_CultureName(value: string);
    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_EscapedCodeBase: string;
    function get_ProcessorArchitecture: DNProcessorArchitecture;
    procedure set_ProcessorArchitecture(value: DNProcessorArchitecture);
    function get_ContentType: DNAssemblyContentType;
    procedure set_ContentType(value: DNAssemblyContentType);
    function get_Flags: DNAssemblyNameFlags;
    procedure set_Flags(value: DNAssemblyNameFlags);
    function get_HashAlgorithm: DNAssemblyHashAlgorithm;
    procedure set_HashAlgorithm(value: DNAssemblyHashAlgorithm);
    function get_VersionCompatibility: DNAssemblyVersionCompatibility;
    procedure set_VersionCompatibility(value: DNAssemblyVersionCompatibility);
    function get_KeyPair: DNStrongNameKeyPair;
    procedure set_KeyPair(value: DNStrongNameKeyPair);
    function get_FullName: string;

  { methods } 

    function Clone: DNObject;
    function GetPublicKey: TArray<Byte>;
    procedure SetPublicKey(publicKey: TArray<Byte>);
    function GetPublicKeyToken: TArray<Byte>;
    procedure SetPublicKeyToken(publicKeyToken: TArray<Byte>);
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Version: DNVersion read get_Version write set_Version;
    property CultureInfo: DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property CultureName: string read get_CultureName write set_CultureName;
    property CodeBase: string read get_CodeBase write set_CodeBase;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property ProcessorArchitecture: DNProcessorArchitecture read get_ProcessorArchitecture write set_ProcessorArchitecture;
    property ContentType: DNAssemblyContentType read get_ContentType write set_ContentType;
    property Flags: DNAssemblyNameFlags read get_Flags write set_Flags;
    property HashAlgorithm: DNAssemblyHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    property VersionCompatibility: DNAssemblyVersionCompatibility read get_VersionCompatibility write set_VersionCompatibility;
    property KeyPair: DNStrongNameKeyPair read get_KeyPair write set_KeyPair;
    property FullName: string read get_FullName;
  end;

  TDNAssemblyName = class(TDNGenericImport<DNAssemblyNameClass, DNAssemblyName>) end;

  //-------------namespace: System.Reflection----------------
  DNBinderClass = interface(DNObjectClass)
  ['{0AF1F3E8-6CA7-529D-B98C-07B9267D127D}']
  end;

  [DNTypeName('System.Reflection.Binder')]
  DNBinder = interface(DNObject)
  ['{74A6B90C-8710-32DA-BBF7-9D4445E071E9}']
  { methods } 

    function BindToMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; out args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; names: TArray<string>; out state: DNObject): DNMethodBase;
    function BindToField(bindingAttr: DNBindingFlags; match: TArray<DNFieldInfo>; value: DNObject; culture: DNCultureInfo): DNFieldInfo;
    function SelectMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodBase;
    function SelectProperty(bindingAttr: DNBindingFlags; match: TArray<DNPropertyInfo>; returnType: DNType; indexes: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo;
    function ChangeType(value: DNObject; &type: DNType; culture: DNCultureInfo): DNObject;
    procedure ReorderArgumentArray(out args: TArray<DNObject>; state: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNBinder = class(TDNGenericImport<DNBinderClass, DNBinder>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeDataClass = interface(DNObjectClass)
  ['{742757FC-66A8-59AD-BE00-0C319D964497}']
  { static methods } 

    {class} function GetCustomAttributes(target: DNMemberInfo): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNModule): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNAssembly): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNParameterInfo): DNIList<DNCustomAttributeData>; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeData')]
  DNCustomAttributeData = interface(DNObject)
  ['{C2655AE8-0193-35D4-855E-F64909065C1E}']
  { getters & setters } 

    function get_AttributeType: DNType;
    function get_Constructor: DNConstructorInfo;
    function get_ConstructorArguments: DNIList<DNCustomAttributeTypedArgument>;
    function get_NamedArguments: DNIList<DNCustomAttributeNamedArgument>;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property AttributeType: DNType read get_AttributeType;
    property &Constructor: DNConstructorInfo read get_Constructor;
    property ConstructorArguments: DNIList<DNCustomAttributeTypedArgument> read get_ConstructorArguments;
    property NamedArguments: DNIList<DNCustomAttributeNamedArgument> read get_NamedArguments;
  end;

  TDNCustomAttributeData = class(TDNGenericImport<DNCustomAttributeDataClass, DNCustomAttributeData>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeExtensionsClass = interface(DNObjectClass)
  ['{7D600CB6-06FE-56F9-964C-401F8B0ECB5D}']
  { static methods } 

    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNAssembly): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeExtensions')]
  DNCustomAttributeExtensions = interface(DNObject)
  ['{FD5B3D3D-D6FF-364C-A510-1A90CBFF67AD}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCustomAttributeExtensions = class(TDNGenericImport<DNCustomAttributeExtensionsClass, DNCustomAttributeExtensions>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNCustomAttributeBuilderClass = interface(DNObjectClass)
  ['{5020BD9C-670B-5F9A-90D8-84BAC3E770CD}']
  { constructors } 

    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;

  end;

  [DNTypeName('System.Reflection.Emit.CustomAttributeBuilder')]
  DNCustomAttributeBuilder = interface(DN_CustomAttributeBuilder)
  ['{71BC3E08-0082-320A-8BA5-EFA8D2B9798A}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCustomAttributeBuilder = class(TDNGenericImport<DNCustomAttributeBuilderClass, DNCustomAttributeBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNDynamicILInfoClass = interface(DNObjectClass)
  ['{04F6679E-84F2-555B-8619-BEF694562AC0}']
  end;

  [DNTypeName('System.Reflection.Emit.DynamicILInfo')]
  DNDynamicILInfo = interface(DNObject)
  ['{A6D0F5A1-9218-30D4-8AD7-18CA98AC8026}']
  { getters & setters } 

    function get_DynamicMethod: DNDynamicMethod;

  { methods } 

    procedure SetCode(code: TArray<Byte>; maxStackSize: Int32); overload;
    procedure SetCode(code: PByte; codeSize: Int32; maxStackSize: Int32); overload;
    procedure SetExceptions(exceptions: TArray<Byte>); overload;
    procedure SetExceptions(exceptions: PByte; exceptionsSize: Int32); overload;
    procedure SetLocalSignature(localSignature: TArray<Byte>); overload;
    procedure SetLocalSignature(localSignature: PByte; signatureSize: Int32); overload;
    function GetTokenFor(method: DNRuntimeMethodHandle): Int32; overload;
    function GetTokenFor(method: DNDynamicMethod): Int32; overload;
    function GetTokenFor(method: DNRuntimeMethodHandle; contextType: DNRuntimeTypeHandle): Int32; overload;
    function GetTokenFor(field: DNRuntimeFieldHandle): Int32; overload;
    function GetTokenFor(field: DNRuntimeFieldHandle; contextType: DNRuntimeTypeHandle): Int32; overload;
    function GetTokenFor(&type: DNRuntimeTypeHandle): Int32; overload;
    function GetTokenFor(literal: string): Int32; overload;
    function GetTokenFor(signature: TArray<Byte>): Int32; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DynamicMethod: DNDynamicMethod read get_DynamicMethod;
  end;

  TDNDynamicILInfo = class(TDNGenericImport<DNDynamicILInfoClass, DNDynamicILInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventBuilderClass = interface(DNObjectClass)
  ['{9FF75ADD-219A-5E50-8E48-A71070B057BB}']
  end;

  [DNTypeName('System.Reflection.Emit.EventBuilder')]
  DNEventBuilder = interface(DN_EventBuilder)
  ['{DC18B7EC-91E4-3999-910A-188D7AFA0A68}']
  { methods } 

    function GetEventToken: DNEventToken;
    procedure SetAddOnMethod(mdBuilder: DNMethodBuilder);
    procedure SetRemoveOnMethod(mdBuilder: DNMethodBuilder);
    procedure SetRaiseMethod(mdBuilder: DNMethodBuilder);
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEventBuilder = class(TDNGenericImport<DNEventBuilderClass, DNEventBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNILGeneratorClass = interface(DNObjectClass)
  ['{41F53350-238E-51A1-9955-283CEC356296}']
  end;

  [DNTypeName('System.Reflection.Emit.ILGenerator')]
  DNILGenerator = interface(DN_ILGenerator)
  ['{5A3DCD44-5855-3D89-A0EC-CE50A3B144A9}']
  { getters & setters } 

    function get_ILOffset: Int32;

  { methods } 

    procedure Emit(opcode: DNOpCode); overload;
    procedure Emit(opcode: DNOpCode; arg: Byte); overload;
    procedure Emit(opcode: DNOpCode; arg: SByte); overload;
    procedure Emit(opcode: DNOpCode; arg: Int16); overload;
    procedure Emit(opcode: DNOpCode; arg: Int32); overload;
    procedure Emit(opcode: DNOpCode; meth: DNMethodInfo); overload;
    procedure EmitCalli(opcode: DNOpCode; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; optionalParameterTypes: TArray<DNType>); overload;
    procedure EmitCalli(opcode: DNOpCode; unmanagedCallConv: DNCallingConvention; returnType: DNType; parameterTypes: TArray<DNType>); overload;
    procedure EmitCall(opcode: DNOpCode; methodInfo: DNMethodInfo; optionalParameterTypes: TArray<DNType>);
    procedure Emit(opcode: DNOpCode; signature: DNSignatureHelper); overload;
    procedure Emit(opcode: DNOpCode; con: DNConstructorInfo); overload;
    procedure Emit(opcode: DNOpCode; cls: DNType); overload;
    procedure Emit(opcode: DNOpCode; arg: Int64); overload;
    procedure Emit(opcode: DNOpCode; arg: Single); overload;
    procedure Emit(opcode: DNOpCode; arg: Double); overload;
    procedure Emit(opcode: DNOpCode; &label: DNLabel); overload;
    procedure Emit(opcode: DNOpCode; labels: TArray<DNLabel>); overload;
    procedure Emit(opcode: DNOpCode; field: DNFieldInfo); overload;
    procedure Emit(opcode: DNOpCode; str: string); overload;
    procedure Emit(opcode: DNOpCode; local: DNLocalBuilder); overload;
    function BeginExceptionBlock: DNLabel;
    procedure EndExceptionBlock;
    procedure BeginExceptFilterBlock;
    procedure BeginCatchBlock(exceptionType: DNType);
    procedure BeginFaultBlock;
    procedure BeginFinallyBlock;
    function DefineLabel: DNLabel;
    procedure MarkLabel(loc: DNLabel);
    procedure ThrowException(excType: DNType);
    function DeclareLocal(localType: DNType): DNLocalBuilder; overload;
    function DeclareLocal(localType: DNType; pinned: Boolean): DNLocalBuilder; overload;
    procedure UsingNamespace(usingNamespace: string);
    procedure MarkSequencePoint(document: DNISymbolDocumentWriter; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32);
    procedure BeginScope;
    procedure EndScope;
    procedure EmitWriteLine(value: string); overload;
    procedure EmitWriteLine(localBuilder: DNLocalBuilder); overload;
    procedure EmitWriteLine(fld: DNFieldInfo); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ILOffset: Int32 read get_ILOffset;
  end;

  TDNILGenerator = class(TDNGenericImport<DNILGeneratorClass, DNILGenerator>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodRentalClass = interface(DNObjectClass)
  ['{9BC9FF2D-945B-57A2-BBAF-885B5FE70BFA}']
  { static methods } 

    {class} procedure SwapMethodBody(cls: DNType; methodtoken: Int32; rgIL: IntPtr; methodSize: Int32; flags: Int32);

  end;

  [DNTypeName('System.Reflection.Emit.MethodRental')]
  DNMethodRental = interface(DN_MethodRental)
  ['{726D83B0-9A52-36B0-919C-60E625F03211}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMethodRental = class(TDNGenericImport<DNMethodRentalClass, DNMethodRental>)
  public const
   JitOnDemand = 0;
   JitImmediate = 1;
  end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodesClass = interface(DNObjectClass)
  ['{1FA0F8D0-A6D1-5A51-B03A-3687C8634B09}']
  { static fields getter & setter } 

   function __fakeFieldGet_Nop: DNOpCode;
   function __fakeFieldGet_Break: DNOpCode;
   function __fakeFieldGet_Ldarg_0: DNOpCode;
   function __fakeFieldGet_Ldarg_1: DNOpCode;
   function __fakeFieldGet_Ldarg_2: DNOpCode;
   function __fakeFieldGet_Ldarg_3: DNOpCode;
   function __fakeFieldGet_Ldloc_0: DNOpCode;
   function __fakeFieldGet_Ldloc_1: DNOpCode;
   function __fakeFieldGet_Ldloc_2: DNOpCode;
   function __fakeFieldGet_Ldloc_3: DNOpCode;
   function __fakeFieldGet_Stloc_0: DNOpCode;
   function __fakeFieldGet_Stloc_1: DNOpCode;
   function __fakeFieldGet_Stloc_2: DNOpCode;
   function __fakeFieldGet_Stloc_3: DNOpCode;
   function __fakeFieldGet_Ldarg_S: DNOpCode;
   function __fakeFieldGet_Ldarga_S: DNOpCode;
   function __fakeFieldGet_Starg_S: DNOpCode;
   function __fakeFieldGet_Ldloc_S: DNOpCode;
   function __fakeFieldGet_Ldloca_S: DNOpCode;
   function __fakeFieldGet_Stloc_S: DNOpCode;
   function __fakeFieldGet_Ldnull: DNOpCode;
   function __fakeFieldGet_Ldc_I4_M1: DNOpCode;
   function __fakeFieldGet_Ldc_I4_0: DNOpCode;
   function __fakeFieldGet_Ldc_I4_1: DNOpCode;
   function __fakeFieldGet_Ldc_I4_2: DNOpCode;
   function __fakeFieldGet_Ldc_I4_3: DNOpCode;
   function __fakeFieldGet_Ldc_I4_4: DNOpCode;
   function __fakeFieldGet_Ldc_I4_5: DNOpCode;
   function __fakeFieldGet_Ldc_I4_6: DNOpCode;
   function __fakeFieldGet_Ldc_I4_7: DNOpCode;
   function __fakeFieldGet_Ldc_I4_8: DNOpCode;
   function __fakeFieldGet_Ldc_I4_S: DNOpCode;
   function __fakeFieldGet_Ldc_I4: DNOpCode;
   function __fakeFieldGet_Ldc_I8: DNOpCode;
   function __fakeFieldGet_Ldc_R4: DNOpCode;
   function __fakeFieldGet_Ldc_R8: DNOpCode;
   function __fakeFieldGet_Dup: DNOpCode;
   function __fakeFieldGet_Pop: DNOpCode;
   function __fakeFieldGet_Jmp: DNOpCode;
   function __fakeFieldGet_Call: DNOpCode;
   function __fakeFieldGet_Calli: DNOpCode;
   function __fakeFieldGet_Ret: DNOpCode;
   function __fakeFieldGet_Br_S: DNOpCode;
   function __fakeFieldGet_Brfalse_S: DNOpCode;
   function __fakeFieldGet_Brtrue_S: DNOpCode;
   function __fakeFieldGet_Beq_S: DNOpCode;
   function __fakeFieldGet_Bge_S: DNOpCode;
   function __fakeFieldGet_Bgt_S: DNOpCode;
   function __fakeFieldGet_Ble_S: DNOpCode;
   function __fakeFieldGet_Blt_S: DNOpCode;
   function __fakeFieldGet_Bne_Un_S: DNOpCode;
   function __fakeFieldGet_Bge_Un_S: DNOpCode;
   function __fakeFieldGet_Bgt_Un_S: DNOpCode;
   function __fakeFieldGet_Ble_Un_S: DNOpCode;
   function __fakeFieldGet_Blt_Un_S: DNOpCode;
   function __fakeFieldGet_Br: DNOpCode;
   function __fakeFieldGet_Brfalse: DNOpCode;
   function __fakeFieldGet_Brtrue: DNOpCode;
   function __fakeFieldGet_Beq: DNOpCode;
   function __fakeFieldGet_Bge: DNOpCode;
   function __fakeFieldGet_Bgt: DNOpCode;
   function __fakeFieldGet_Ble: DNOpCode;
   function __fakeFieldGet_Blt: DNOpCode;
   function __fakeFieldGet_Bne_Un: DNOpCode;
   function __fakeFieldGet_Bge_Un: DNOpCode;
   function __fakeFieldGet_Bgt_Un: DNOpCode;
   function __fakeFieldGet_Ble_Un: DNOpCode;
   function __fakeFieldGet_Blt_Un: DNOpCode;
   function __fakeFieldGet_Switch: DNOpCode;
   function __fakeFieldGet_Ldind_I1: DNOpCode;
   function __fakeFieldGet_Ldind_U1: DNOpCode;
   function __fakeFieldGet_Ldind_I2: DNOpCode;
   function __fakeFieldGet_Ldind_U2: DNOpCode;
   function __fakeFieldGet_Ldind_I4: DNOpCode;
   function __fakeFieldGet_Ldind_U4: DNOpCode;
   function __fakeFieldGet_Ldind_I8: DNOpCode;
   function __fakeFieldGet_Ldind_I: DNOpCode;
   function __fakeFieldGet_Ldind_R4: DNOpCode;
   function __fakeFieldGet_Ldind_R8: DNOpCode;
   function __fakeFieldGet_Ldind_Ref: DNOpCode;
   function __fakeFieldGet_Stind_Ref: DNOpCode;
   function __fakeFieldGet_Stind_I1: DNOpCode;
   function __fakeFieldGet_Stind_I2: DNOpCode;
   function __fakeFieldGet_Stind_I4: DNOpCode;
   function __fakeFieldGet_Stind_I8: DNOpCode;
   function __fakeFieldGet_Stind_R4: DNOpCode;
   function __fakeFieldGet_Stind_R8: DNOpCode;
   function __fakeFieldGet_Add: DNOpCode;
   function __fakeFieldGet_Sub: DNOpCode;
   function __fakeFieldGet_Mul: DNOpCode;
   function __fakeFieldGet_Div: DNOpCode;
   function __fakeFieldGet_Div_Un: DNOpCode;
   function __fakeFieldGet_Rem: DNOpCode;
   function __fakeFieldGet_Rem_Un: DNOpCode;
   function __fakeFieldGet_And: DNOpCode;
   function __fakeFieldGet_Or: DNOpCode;
   function __fakeFieldGet_Xor: DNOpCode;
   function __fakeFieldGet_Shl: DNOpCode;
   function __fakeFieldGet_Shr: DNOpCode;
   function __fakeFieldGet_Shr_Un: DNOpCode;
   function __fakeFieldGet_Neg: DNOpCode;
   function __fakeFieldGet_Not: DNOpCode;
   function __fakeFieldGet_Conv_I1: DNOpCode;
   function __fakeFieldGet_Conv_I2: DNOpCode;
   function __fakeFieldGet_Conv_I4: DNOpCode;
   function __fakeFieldGet_Conv_I8: DNOpCode;
   function __fakeFieldGet_Conv_R4: DNOpCode;
   function __fakeFieldGet_Conv_R8: DNOpCode;
   function __fakeFieldGet_Conv_U4: DNOpCode;
   function __fakeFieldGet_Conv_U8: DNOpCode;
   function __fakeFieldGet_Callvirt: DNOpCode;
   function __fakeFieldGet_Cpobj: DNOpCode;
   function __fakeFieldGet_Ldobj: DNOpCode;
   function __fakeFieldGet_Ldstr: DNOpCode;
   function __fakeFieldGet_Newobj: DNOpCode;
   function __fakeFieldGet_Castclass: DNOpCode;
   function __fakeFieldGet_Isinst: DNOpCode;
   function __fakeFieldGet_Conv_R_Un: DNOpCode;
   function __fakeFieldGet_Unbox: DNOpCode;
   function __fakeFieldGet_Throw: DNOpCode;
   function __fakeFieldGet_Ldfld: DNOpCode;
   function __fakeFieldGet_Ldflda: DNOpCode;
   function __fakeFieldGet_Stfld: DNOpCode;
   function __fakeFieldGet_Ldsfld: DNOpCode;
   function __fakeFieldGet_Ldsflda: DNOpCode;
   function __fakeFieldGet_Stsfld: DNOpCode;
   function __fakeFieldGet_Stobj: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I1_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I2_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I4_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I8_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U1_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U2_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U4_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U8_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U_Un: DNOpCode;
   function __fakeFieldGet_Box: DNOpCode;
   function __fakeFieldGet_Newarr: DNOpCode;
   function __fakeFieldGet_Ldlen: DNOpCode;
   function __fakeFieldGet_Ldelema: DNOpCode;
   function __fakeFieldGet_Ldelem_I1: DNOpCode;
   function __fakeFieldGet_Ldelem_U1: DNOpCode;
   function __fakeFieldGet_Ldelem_I2: DNOpCode;
   function __fakeFieldGet_Ldelem_U2: DNOpCode;
   function __fakeFieldGet_Ldelem_I4: DNOpCode;
   function __fakeFieldGet_Ldelem_U4: DNOpCode;
   function __fakeFieldGet_Ldelem_I8: DNOpCode;
   function __fakeFieldGet_Ldelem_I: DNOpCode;
   function __fakeFieldGet_Ldelem_R4: DNOpCode;
   function __fakeFieldGet_Ldelem_R8: DNOpCode;
   function __fakeFieldGet_Ldelem_Ref: DNOpCode;
   function __fakeFieldGet_Stelem_I: DNOpCode;
   function __fakeFieldGet_Stelem_I1: DNOpCode;
   function __fakeFieldGet_Stelem_I2: DNOpCode;
   function __fakeFieldGet_Stelem_I4: DNOpCode;
   function __fakeFieldGet_Stelem_I8: DNOpCode;
   function __fakeFieldGet_Stelem_R4: DNOpCode;
   function __fakeFieldGet_Stelem_R8: DNOpCode;
   function __fakeFieldGet_Stelem_Ref: DNOpCode;
   function __fakeFieldGet_Ldelem: DNOpCode;
   function __fakeFieldGet_Stelem: DNOpCode;
   function __fakeFieldGet_Unbox_Any: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I1: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U1: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I2: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U2: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I4: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U4: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I8: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U8: DNOpCode;
   function __fakeFieldGet_Refanyval: DNOpCode;
   function __fakeFieldGet_Ckfinite: DNOpCode;
   function __fakeFieldGet_Mkrefany: DNOpCode;
   function __fakeFieldGet_Ldtoken: DNOpCode;
   function __fakeFieldGet_Conv_U2: DNOpCode;
   function __fakeFieldGet_Conv_U1: DNOpCode;
   function __fakeFieldGet_Conv_I: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U: DNOpCode;
   function __fakeFieldGet_Add_Ovf: DNOpCode;
   function __fakeFieldGet_Add_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Mul_Ovf: DNOpCode;
   function __fakeFieldGet_Mul_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Sub_Ovf: DNOpCode;
   function __fakeFieldGet_Sub_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Endfinally: DNOpCode;
   function __fakeFieldGet_Leave: DNOpCode;
   function __fakeFieldGet_Leave_S: DNOpCode;
   function __fakeFieldGet_Stind_I: DNOpCode;
   function __fakeFieldGet_Conv_U: DNOpCode;
   function __fakeFieldGet_Prefix7: DNOpCode;
   function __fakeFieldGet_Prefix6: DNOpCode;
   function __fakeFieldGet_Prefix5: DNOpCode;
   function __fakeFieldGet_Prefix4: DNOpCode;
   function __fakeFieldGet_Prefix3: DNOpCode;
   function __fakeFieldGet_Prefix2: DNOpCode;
   function __fakeFieldGet_Prefix1: DNOpCode;
   function __fakeFieldGet_Prefixref: DNOpCode;
   function __fakeFieldGet_Arglist: DNOpCode;
   function __fakeFieldGet_Ceq: DNOpCode;
   function __fakeFieldGet_Cgt: DNOpCode;
   function __fakeFieldGet_Cgt_Un: DNOpCode;
   function __fakeFieldGet_Clt: DNOpCode;
   function __fakeFieldGet_Clt_Un: DNOpCode;
   function __fakeFieldGet_Ldftn: DNOpCode;
   function __fakeFieldGet_Ldvirtftn: DNOpCode;
   function __fakeFieldGet_Ldarg: DNOpCode;
   function __fakeFieldGet_Ldarga: DNOpCode;
   function __fakeFieldGet_Starg: DNOpCode;
   function __fakeFieldGet_Ldloc: DNOpCode;
   function __fakeFieldGet_Ldloca: DNOpCode;
   function __fakeFieldGet_Stloc: DNOpCode;
   function __fakeFieldGet_Localloc: DNOpCode;
   function __fakeFieldGet_Endfilter: DNOpCode;
   function __fakeFieldGet_Unaligned: DNOpCode;
   function __fakeFieldGet_Volatile: DNOpCode;
   function __fakeFieldGet_Tailcall: DNOpCode;
   function __fakeFieldGet_Initobj: DNOpCode;
   function __fakeFieldGet_Constrained: DNOpCode;
   function __fakeFieldGet_Cpblk: DNOpCode;
   function __fakeFieldGet_Initblk: DNOpCode;
   function __fakeFieldGet_Rethrow: DNOpCode;
   function __fakeFieldGet_Sizeof: DNOpCode;
   function __fakeFieldGet_Refanytype: DNOpCode;
   function __fakeFieldGet_Readonly: DNOpCode;

  { static fields } 

    {class} property Nop: DNOpCode read __fakeFieldGet_Nop;
    {class} property Break: DNOpCode read __fakeFieldGet_Break;
    {class} property Ldarg_0: DNOpCode read __fakeFieldGet_Ldarg_0;
    {class} property Ldarg_1: DNOpCode read __fakeFieldGet_Ldarg_1;
    {class} property Ldarg_2: DNOpCode read __fakeFieldGet_Ldarg_2;
    {class} property Ldarg_3: DNOpCode read __fakeFieldGet_Ldarg_3;
    {class} property Ldloc_0: DNOpCode read __fakeFieldGet_Ldloc_0;
    {class} property Ldloc_1: DNOpCode read __fakeFieldGet_Ldloc_1;
    {class} property Ldloc_2: DNOpCode read __fakeFieldGet_Ldloc_2;
    {class} property Ldloc_3: DNOpCode read __fakeFieldGet_Ldloc_3;
    {class} property Stloc_0: DNOpCode read __fakeFieldGet_Stloc_0;
    {class} property Stloc_1: DNOpCode read __fakeFieldGet_Stloc_1;
    {class} property Stloc_2: DNOpCode read __fakeFieldGet_Stloc_2;
    {class} property Stloc_3: DNOpCode read __fakeFieldGet_Stloc_3;
    {class} property Ldarg_S: DNOpCode read __fakeFieldGet_Ldarg_S;
    {class} property Ldarga_S: DNOpCode read __fakeFieldGet_Ldarga_S;
    {class} property Starg_S: DNOpCode read __fakeFieldGet_Starg_S;
    {class} property Ldloc_S: DNOpCode read __fakeFieldGet_Ldloc_S;
    {class} property Ldloca_S: DNOpCode read __fakeFieldGet_Ldloca_S;
    {class} property Stloc_S: DNOpCode read __fakeFieldGet_Stloc_S;
    {class} property Ldnull: DNOpCode read __fakeFieldGet_Ldnull;
    {class} property Ldc_I4_M1: DNOpCode read __fakeFieldGet_Ldc_I4_M1;
    {class} property Ldc_I4_0: DNOpCode read __fakeFieldGet_Ldc_I4_0;
    {class} property Ldc_I4_1: DNOpCode read __fakeFieldGet_Ldc_I4_1;
    {class} property Ldc_I4_2: DNOpCode read __fakeFieldGet_Ldc_I4_2;
    {class} property Ldc_I4_3: DNOpCode read __fakeFieldGet_Ldc_I4_3;
    {class} property Ldc_I4_4: DNOpCode read __fakeFieldGet_Ldc_I4_4;
    {class} property Ldc_I4_5: DNOpCode read __fakeFieldGet_Ldc_I4_5;
    {class} property Ldc_I4_6: DNOpCode read __fakeFieldGet_Ldc_I4_6;
    {class} property Ldc_I4_7: DNOpCode read __fakeFieldGet_Ldc_I4_7;
    {class} property Ldc_I4_8: DNOpCode read __fakeFieldGet_Ldc_I4_8;
    {class} property Ldc_I4_S: DNOpCode read __fakeFieldGet_Ldc_I4_S;
    {class} property Ldc_I4: DNOpCode read __fakeFieldGet_Ldc_I4;
    {class} property Ldc_I8: DNOpCode read __fakeFieldGet_Ldc_I8;
    {class} property Ldc_R4: DNOpCode read __fakeFieldGet_Ldc_R4;
    {class} property Ldc_R8: DNOpCode read __fakeFieldGet_Ldc_R8;
    {class} property Dup: DNOpCode read __fakeFieldGet_Dup;
    {class} property Pop: DNOpCode read __fakeFieldGet_Pop;
    {class} property Jmp: DNOpCode read __fakeFieldGet_Jmp;
    {class} property Call: DNOpCode read __fakeFieldGet_Call;
    {class} property Calli: DNOpCode read __fakeFieldGet_Calli;
    {class} property Ret: DNOpCode read __fakeFieldGet_Ret;
    {class} property Br_S: DNOpCode read __fakeFieldGet_Br_S;
    {class} property Brfalse_S: DNOpCode read __fakeFieldGet_Brfalse_S;
    {class} property Brtrue_S: DNOpCode read __fakeFieldGet_Brtrue_S;
    {class} property Beq_S: DNOpCode read __fakeFieldGet_Beq_S;
    {class} property Bge_S: DNOpCode read __fakeFieldGet_Bge_S;
    {class} property Bgt_S: DNOpCode read __fakeFieldGet_Bgt_S;
    {class} property Ble_S: DNOpCode read __fakeFieldGet_Ble_S;
    {class} property Blt_S: DNOpCode read __fakeFieldGet_Blt_S;
    {class} property Bne_Un_S: DNOpCode read __fakeFieldGet_Bne_Un_S;
    {class} property Bge_Un_S: DNOpCode read __fakeFieldGet_Bge_Un_S;
    {class} property Bgt_Un_S: DNOpCode read __fakeFieldGet_Bgt_Un_S;
    {class} property Ble_Un_S: DNOpCode read __fakeFieldGet_Ble_Un_S;
    {class} property Blt_Un_S: DNOpCode read __fakeFieldGet_Blt_Un_S;
    {class} property Br: DNOpCode read __fakeFieldGet_Br;
    {class} property Brfalse: DNOpCode read __fakeFieldGet_Brfalse;
    {class} property Brtrue: DNOpCode read __fakeFieldGet_Brtrue;
    {class} property Beq: DNOpCode read __fakeFieldGet_Beq;
    {class} property Bge: DNOpCode read __fakeFieldGet_Bge;
    {class} property Bgt: DNOpCode read __fakeFieldGet_Bgt;
    {class} property Ble: DNOpCode read __fakeFieldGet_Ble;
    {class} property Blt: DNOpCode read __fakeFieldGet_Blt;
    {class} property Bne_Un: DNOpCode read __fakeFieldGet_Bne_Un;
    {class} property Bge_Un: DNOpCode read __fakeFieldGet_Bge_Un;
    {class} property Bgt_Un: DNOpCode read __fakeFieldGet_Bgt_Un;
    {class} property Ble_Un: DNOpCode read __fakeFieldGet_Ble_Un;
    {class} property Blt_Un: DNOpCode read __fakeFieldGet_Blt_Un;
    {class} property Switch: DNOpCode read __fakeFieldGet_Switch;
    {class} property Ldind_I1: DNOpCode read __fakeFieldGet_Ldind_I1;
    {class} property Ldind_U1: DNOpCode read __fakeFieldGet_Ldind_U1;
    {class} property Ldind_I2: DNOpCode read __fakeFieldGet_Ldind_I2;
    {class} property Ldind_U2: DNOpCode read __fakeFieldGet_Ldind_U2;
    {class} property Ldind_I4: DNOpCode read __fakeFieldGet_Ldind_I4;
    {class} property Ldind_U4: DNOpCode read __fakeFieldGet_Ldind_U4;
    {class} property Ldind_I8: DNOpCode read __fakeFieldGet_Ldind_I8;
    {class} property Ldind_I: DNOpCode read __fakeFieldGet_Ldind_I;
    {class} property Ldind_R4: DNOpCode read __fakeFieldGet_Ldind_R4;
    {class} property Ldind_R8: DNOpCode read __fakeFieldGet_Ldind_R8;
    {class} property Ldind_Ref: DNOpCode read __fakeFieldGet_Ldind_Ref;
    {class} property Stind_Ref: DNOpCode read __fakeFieldGet_Stind_Ref;
    {class} property Stind_I1: DNOpCode read __fakeFieldGet_Stind_I1;
    {class} property Stind_I2: DNOpCode read __fakeFieldGet_Stind_I2;
    {class} property Stind_I4: DNOpCode read __fakeFieldGet_Stind_I4;
    {class} property Stind_I8: DNOpCode read __fakeFieldGet_Stind_I8;
    {class} property Stind_R4: DNOpCode read __fakeFieldGet_Stind_R4;
    {class} property Stind_R8: DNOpCode read __fakeFieldGet_Stind_R8;
    {class} property Add: DNOpCode read __fakeFieldGet_Add;
    {class} property Sub: DNOpCode read __fakeFieldGet_Sub;
    {class} property Mul: DNOpCode read __fakeFieldGet_Mul;
    {class} property &Div: DNOpCode read __fakeFieldGet_Div;
    {class} property Div_Un: DNOpCode read __fakeFieldGet_Div_Un;
    {class} property Rem: DNOpCode read __fakeFieldGet_Rem;
    {class} property Rem_Un: DNOpCode read __fakeFieldGet_Rem_Un;
    {class} property &And: DNOpCode read __fakeFieldGet_And;
    {class} property &Or: DNOpCode read __fakeFieldGet_Or;
    {class} property &Xor: DNOpCode read __fakeFieldGet_Xor;
    {class} property &Shl: DNOpCode read __fakeFieldGet_Shl;
    {class} property &Shr: DNOpCode read __fakeFieldGet_Shr;
    {class} property Shr_Un: DNOpCode read __fakeFieldGet_Shr_Un;
    {class} property Neg: DNOpCode read __fakeFieldGet_Neg;
    {class} property &Not: DNOpCode read __fakeFieldGet_Not;
    {class} property Conv_I1: DNOpCode read __fakeFieldGet_Conv_I1;
    {class} property Conv_I2: DNOpCode read __fakeFieldGet_Conv_I2;
    {class} property Conv_I4: DNOpCode read __fakeFieldGet_Conv_I4;
    {class} property Conv_I8: DNOpCode read __fakeFieldGet_Conv_I8;
    {class} property Conv_R4: DNOpCode read __fakeFieldGet_Conv_R4;
    {class} property Conv_R8: DNOpCode read __fakeFieldGet_Conv_R8;
    {class} property Conv_U4: DNOpCode read __fakeFieldGet_Conv_U4;
    {class} property Conv_U8: DNOpCode read __fakeFieldGet_Conv_U8;
    {class} property Callvirt: DNOpCode read __fakeFieldGet_Callvirt;
    {class} property Cpobj: DNOpCode read __fakeFieldGet_Cpobj;
    {class} property Ldobj: DNOpCode read __fakeFieldGet_Ldobj;
    {class} property Ldstr: DNOpCode read __fakeFieldGet_Ldstr;
    {class} property Newobj: DNOpCode read __fakeFieldGet_Newobj;
    {class} property Castclass: DNOpCode read __fakeFieldGet_Castclass;
    {class} property Isinst: DNOpCode read __fakeFieldGet_Isinst;
    {class} property Conv_R_Un: DNOpCode read __fakeFieldGet_Conv_R_Un;
    {class} property Unbox: DNOpCode read __fakeFieldGet_Unbox;
    {class} property Throw: DNOpCode read __fakeFieldGet_Throw;
    {class} property Ldfld: DNOpCode read __fakeFieldGet_Ldfld;
    {class} property Ldflda: DNOpCode read __fakeFieldGet_Ldflda;
    {class} property Stfld: DNOpCode read __fakeFieldGet_Stfld;
    {class} property Ldsfld: DNOpCode read __fakeFieldGet_Ldsfld;
    {class} property Ldsflda: DNOpCode read __fakeFieldGet_Ldsflda;
    {class} property Stsfld: DNOpCode read __fakeFieldGet_Stsfld;
    {class} property Stobj: DNOpCode read __fakeFieldGet_Stobj;
    {class} property Conv_Ovf_I1_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I1_Un;
    {class} property Conv_Ovf_I2_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I2_Un;
    {class} property Conv_Ovf_I4_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I4_Un;
    {class} property Conv_Ovf_I8_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I8_Un;
    {class} property Conv_Ovf_U1_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U1_Un;
    {class} property Conv_Ovf_U2_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U2_Un;
    {class} property Conv_Ovf_U4_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U4_Un;
    {class} property Conv_Ovf_U8_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U8_Un;
    {class} property Conv_Ovf_I_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I_Un;
    {class} property Conv_Ovf_U_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U_Un;
    {class} property Box: DNOpCode read __fakeFieldGet_Box;
    {class} property Newarr: DNOpCode read __fakeFieldGet_Newarr;
    {class} property Ldlen: DNOpCode read __fakeFieldGet_Ldlen;
    {class} property Ldelema: DNOpCode read __fakeFieldGet_Ldelema;
    {class} property Ldelem_I1: DNOpCode read __fakeFieldGet_Ldelem_I1;
    {class} property Ldelem_U1: DNOpCode read __fakeFieldGet_Ldelem_U1;
    {class} property Ldelem_I2: DNOpCode read __fakeFieldGet_Ldelem_I2;
    {class} property Ldelem_U2: DNOpCode read __fakeFieldGet_Ldelem_U2;
    {class} property Ldelem_I4: DNOpCode read __fakeFieldGet_Ldelem_I4;
    {class} property Ldelem_U4: DNOpCode read __fakeFieldGet_Ldelem_U4;
    {class} property Ldelem_I8: DNOpCode read __fakeFieldGet_Ldelem_I8;
    {class} property Ldelem_I: DNOpCode read __fakeFieldGet_Ldelem_I;
    {class} property Ldelem_R4: DNOpCode read __fakeFieldGet_Ldelem_R4;
    {class} property Ldelem_R8: DNOpCode read __fakeFieldGet_Ldelem_R8;
    {class} property Ldelem_Ref: DNOpCode read __fakeFieldGet_Ldelem_Ref;
    {class} property Stelem_I: DNOpCode read __fakeFieldGet_Stelem_I;
    {class} property Stelem_I1: DNOpCode read __fakeFieldGet_Stelem_I1;
    {class} property Stelem_I2: DNOpCode read __fakeFieldGet_Stelem_I2;
    {class} property Stelem_I4: DNOpCode read __fakeFieldGet_Stelem_I4;
    {class} property Stelem_I8: DNOpCode read __fakeFieldGet_Stelem_I8;
    {class} property Stelem_R4: DNOpCode read __fakeFieldGet_Stelem_R4;
    {class} property Stelem_R8: DNOpCode read __fakeFieldGet_Stelem_R8;
    {class} property Stelem_Ref: DNOpCode read __fakeFieldGet_Stelem_Ref;
    {class} property Ldelem: DNOpCode read __fakeFieldGet_Ldelem;
    {class} property Stelem: DNOpCode read __fakeFieldGet_Stelem;
    {class} property Unbox_Any: DNOpCode read __fakeFieldGet_Unbox_Any;
    {class} property Conv_Ovf_I1: DNOpCode read __fakeFieldGet_Conv_Ovf_I1;
    {class} property Conv_Ovf_U1: DNOpCode read __fakeFieldGet_Conv_Ovf_U1;
    {class} property Conv_Ovf_I2: DNOpCode read __fakeFieldGet_Conv_Ovf_I2;
    {class} property Conv_Ovf_U2: DNOpCode read __fakeFieldGet_Conv_Ovf_U2;
    {class} property Conv_Ovf_I4: DNOpCode read __fakeFieldGet_Conv_Ovf_I4;
    {class} property Conv_Ovf_U4: DNOpCode read __fakeFieldGet_Conv_Ovf_U4;
    {class} property Conv_Ovf_I8: DNOpCode read __fakeFieldGet_Conv_Ovf_I8;
    {class} property Conv_Ovf_U8: DNOpCode read __fakeFieldGet_Conv_Ovf_U8;
    {class} property Refanyval: DNOpCode read __fakeFieldGet_Refanyval;
    {class} property Ckfinite: DNOpCode read __fakeFieldGet_Ckfinite;
    {class} property Mkrefany: DNOpCode read __fakeFieldGet_Mkrefany;
    {class} property Ldtoken: DNOpCode read __fakeFieldGet_Ldtoken;
    {class} property Conv_U2: DNOpCode read __fakeFieldGet_Conv_U2;
    {class} property Conv_U1: DNOpCode read __fakeFieldGet_Conv_U1;
    {class} property Conv_I: DNOpCode read __fakeFieldGet_Conv_I;
    {class} property Conv_Ovf_I: DNOpCode read __fakeFieldGet_Conv_Ovf_I;
    {class} property Conv_Ovf_U: DNOpCode read __fakeFieldGet_Conv_Ovf_U;
    {class} property Add_Ovf: DNOpCode read __fakeFieldGet_Add_Ovf;
    {class} property Add_Ovf_Un: DNOpCode read __fakeFieldGet_Add_Ovf_Un;
    {class} property Mul_Ovf: DNOpCode read __fakeFieldGet_Mul_Ovf;
    {class} property Mul_Ovf_Un: DNOpCode read __fakeFieldGet_Mul_Ovf_Un;
    {class} property Sub_Ovf: DNOpCode read __fakeFieldGet_Sub_Ovf;
    {class} property Sub_Ovf_Un: DNOpCode read __fakeFieldGet_Sub_Ovf_Un;
    {class} property Endfinally: DNOpCode read __fakeFieldGet_Endfinally;
    {class} property Leave: DNOpCode read __fakeFieldGet_Leave;
    {class} property Leave_S: DNOpCode read __fakeFieldGet_Leave_S;
    {class} property Stind_I: DNOpCode read __fakeFieldGet_Stind_I;
    {class} property Conv_U: DNOpCode read __fakeFieldGet_Conv_U;
    {class} property Prefix7: DNOpCode read __fakeFieldGet_Prefix7;
    {class} property Prefix6: DNOpCode read __fakeFieldGet_Prefix6;
    {class} property Prefix5: DNOpCode read __fakeFieldGet_Prefix5;
    {class} property Prefix4: DNOpCode read __fakeFieldGet_Prefix4;
    {class} property Prefix3: DNOpCode read __fakeFieldGet_Prefix3;
    {class} property Prefix2: DNOpCode read __fakeFieldGet_Prefix2;
    {class} property Prefix1: DNOpCode read __fakeFieldGet_Prefix1;
    {class} property Prefixref: DNOpCode read __fakeFieldGet_Prefixref;
    {class} property Arglist: DNOpCode read __fakeFieldGet_Arglist;
    {class} property Ceq: DNOpCode read __fakeFieldGet_Ceq;
    {class} property Cgt: DNOpCode read __fakeFieldGet_Cgt;
    {class} property Cgt_Un: DNOpCode read __fakeFieldGet_Cgt_Un;
    {class} property Clt: DNOpCode read __fakeFieldGet_Clt;
    {class} property Clt_Un: DNOpCode read __fakeFieldGet_Clt_Un;
    {class} property Ldftn: DNOpCode read __fakeFieldGet_Ldftn;
    {class} property Ldvirtftn: DNOpCode read __fakeFieldGet_Ldvirtftn;
    {class} property Ldarg: DNOpCode read __fakeFieldGet_Ldarg;
    {class} property Ldarga: DNOpCode read __fakeFieldGet_Ldarga;
    {class} property Starg: DNOpCode read __fakeFieldGet_Starg;
    {class} property Ldloc: DNOpCode read __fakeFieldGet_Ldloc;
    {class} property Ldloca: DNOpCode read __fakeFieldGet_Ldloca;
    {class} property Stloc: DNOpCode read __fakeFieldGet_Stloc;
    {class} property Localloc: DNOpCode read __fakeFieldGet_Localloc;
    {class} property Endfilter: DNOpCode read __fakeFieldGet_Endfilter;
    {class} property Unaligned: DNOpCode read __fakeFieldGet_Unaligned;
    {class} property Volatile: DNOpCode read __fakeFieldGet_Volatile;
    {class} property Tailcall: DNOpCode read __fakeFieldGet_Tailcall;
    {class} property Initobj: DNOpCode read __fakeFieldGet_Initobj;
    {class} property Constrained: DNOpCode read __fakeFieldGet_Constrained;
    {class} property Cpblk: DNOpCode read __fakeFieldGet_Cpblk;
    {class} property Initblk: DNOpCode read __fakeFieldGet_Initblk;
    {class} property Rethrow: DNOpCode read __fakeFieldGet_Rethrow;
    {class} property Sizeof: DNOpCode read __fakeFieldGet_Sizeof;
    {class} property Refanytype: DNOpCode read __fakeFieldGet_Refanytype;
    {class} property Readonly: DNOpCode read __fakeFieldGet_Readonly;

  { static methods } 

    {class} function TakesSingleByteArgument(inst: DNOpCode): Boolean;

  end;

  [DNTypeName('System.Reflection.Emit.OpCodes')]
  DNOpCodes = interface(DNObject)
  ['{2A59A0E6-11B2-3025-92DE-E036A6DDBC00}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNOpCodes = class(TDNGenericImport<DNOpCodesClass, DNOpCodes>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterBuilderClass = interface(DNObjectClass)
  ['{38E927D8-51D0-53C9-860D-601C99C5C8A2}']
  end;

  [DNTypeName('System.Reflection.Emit.ParameterBuilder')]
  DNParameterBuilder = interface(DN_ParameterBuilder)
  ['{027AD5C3-D619-3506-B8E6-CA67A33B9C8F}']
  { getters & setters } 

    function get_Name: string;
    function get_Position: Int32;
    function get_Attributes: Int32;
    function get_IsIn: Boolean;
    function get_IsOut: Boolean;
    function get_IsOptional: Boolean;

  { methods } 

    procedure SetMarshal(unmanagedMarshal: DNUnmanagedMarshal);
    procedure SetConstant(defaultValue: DNObject);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetToken: DNParameterToken;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Position: Int32 read get_Position;
    property Attributes: Int32 read get_Attributes;
    property IsIn: Boolean read get_IsIn;
    property IsOut: Boolean read get_IsOut;
    property IsOptional: Boolean read get_IsOptional;
  end;

  TDNParameterBuilder = class(TDNGenericImport<DNParameterBuilderClass, DNParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureHelperClass = interface(DNObjectClass)
  ['{DB8814F8-03CC-5D88-A3AF-7BE86E2FDE5D}']
  { static methods } 

    {class} function GetMethodSigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(&mod: DNModule; unmanagedCallConv: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetLocalVarSigHelper: DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(unmanagedCallingConvention: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetLocalVarSigHelper(&mod: DNModule): DNSignatureHelper; overload;
    {class} function GetFieldSigHelper(&mod: DNModule): DNSignatureHelper;
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;
    {class} function GetPropertySigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;

  end;

  [DNTypeName('System.Reflection.Emit.SignatureHelper')]
  DNSignatureHelper = interface(DN_SignatureHelper)
  ['{798B57A2-064A-3098-9A80-E12DA70E0085}']
  { methods } 

    procedure AddArgument(clsArgument: DNType); overload;
    procedure AddArgument(argument: DNType; pinned: Boolean); overload;
    procedure AddArguments(arguments: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>);
    procedure AddArgument(argument: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>); overload;
    procedure AddSentinel;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetSignature: TArray<Byte>;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSignatureHelper = class(TDNGenericImport<DNSignatureHelperClass, DNSignatureHelper>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNUnmanagedMarshalClass = interface(DNObjectClass)
  ['{9BEE5F13-F8DD-525F-A2A2-10896EA3BE48}']
  { static methods } 

    {class} function DefineUnmanagedMarshal(unmanagedType: DNUnmanagedType): DNUnmanagedMarshal;
    {class} function DefineByValTStr(elemCount: Int32): DNUnmanagedMarshal;
    {class} function DefineSafeArray(elemType: DNUnmanagedType): DNUnmanagedMarshal;
    {class} function DefineByValArray(elemCount: Int32): DNUnmanagedMarshal;
    {class} function DefineLPArray(elemType: DNUnmanagedType): DNUnmanagedMarshal;

  end;

  [DNTypeName('System.Reflection.Emit.UnmanagedMarshal')]
  DNUnmanagedMarshal = interface(DNObject)
  ['{E3C3A258-E508-3704-B9EB-264601956FE5}']
  { getters & setters } 

    function get_GetUnmanagedType: DNUnmanagedType;
    function get_IIDGuid: DNGuid;
    function get_ElementCount: Int32;
    function get_BaseType: DNUnmanagedType;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property GetUnmanagedType: DNUnmanagedType read get_GetUnmanagedType;
    property IIDGuid: DNGuid read get_IIDGuid;
    property ElementCount: Int32 read get_ElementCount;
    property BaseType: DNUnmanagedType read get_BaseType;
  end;

  TDNUnmanagedMarshal = class(TDNGenericImport<DNUnmanagedMarshalClass, DNUnmanagedMarshal>) end;

  //-------------namespace: System.Reflection----------------
  DNExceptionHandlingClauseClass = interface(DNObjectClass)
  ['{4A6EDCE0-E2B0-54E1-98A4-DDDE0FD964DF}']
  end;

  [DNTypeName('System.Reflection.ExceptionHandlingClause')]
  DNExceptionHandlingClause = interface(DNObject)
  ['{17CA8E14-F624-3879-94CA-6B9556A97D1F}']
  { getters & setters } 

    function get_Flags: DNExceptionHandlingClauseOptions;
    function get_TryOffset: Int32;
    function get_TryLength: Int32;
    function get_HandlerOffset: Int32;
    function get_HandlerLength: Int32;
    function get_FilterOffset: Int32;
    function get_CatchType: DNType;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Flags: DNExceptionHandlingClauseOptions read get_Flags;
    property TryOffset: Int32 read get_TryOffset;
    property TryLength: Int32 read get_TryLength;
    property HandlerOffset: Int32 read get_HandlerOffset;
    property HandlerLength: Int32 read get_HandlerLength;
    property FilterOffset: Int32 read get_FilterOffset;
    property CatchType: DNType read get_CatchType;
  end;

  TDNExceptionHandlingClause = class(TDNGenericImport<DNExceptionHandlingClauseClass, DNExceptionHandlingClause>) end;

  //-------------namespace: System.Reflection----------------
  DNIntrospectionExtensionsClass = interface(DNObjectClass)
  ['{FEDF0671-A517-5E1A-BDF8-00DBC15FE844}']
  { static methods } 

    {class} function GetTypeInfo(&type: DNType): DNTypeInfo;

  end;

  [DNTypeName('System.Reflection.IntrospectionExtensions')]
  DNIntrospectionExtensions = interface(DNObject)
  ['{E12C7C7C-CF5F-3F2D-8F6D-36EC74ACA3F0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIntrospectionExtensions = class(TDNGenericImport<DNIntrospectionExtensionsClass, DNIntrospectionExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNLocalVariableInfoClass = interface(DNObjectClass)
  ['{A28D5438-6167-558E-805C-0AB9D9CB087F}']
  end;

  [DNTypeName('System.Reflection.LocalVariableInfo')]
  DNLocalVariableInfo = interface(DNObject)
  ['{14C0B634-A0E7-3E5D-BE59-B2BF1A571FFC}']
  { getters & setters } 

    function get_LocalType: DNType;
    function get_IsPinned: Boolean;
    function get_LocalIndex: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property LocalType: DNType read get_LocalType;
    property IsPinned: Boolean read get_IsPinned;
    property LocalIndex: Int32 read get_LocalIndex;
  end;

  TDNLocalVariableInfo = class(TDNGenericImport<DNLocalVariableInfoClass, DNLocalVariableInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLocalBuilderClass = interface(DNLocalVariableInfoClass)
  ['{4D689CEE-F085-52AA-8CE1-54D880C73C8D}']
  end;

  [DNTypeName('System.Reflection.Emit.LocalBuilder')]
  DNLocalBuilder = interface(DNLocalVariableInfo)
  ['{A6BCAA25-D357-3F79-A716-AD1434E4D832}']
  { getters & setters } 

    function get_IsPinned: Boolean;
    function get_LocalType: DNType;
    function get_LocalIndex: Int32;

  { methods } 

    procedure SetLocalSymInfo(name: string); overload;
    procedure SetLocalSymInfo(name: string; startOffset: Int32; endOffset: Int32); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsPinned: Boolean read get_IsPinned;
    property LocalType: DNType read get_LocalType;
    property LocalIndex: Int32 read get_LocalIndex;
  end;

  TDNLocalBuilder = class(TDNGenericImport<DNLocalBuilderClass, DNLocalBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNManifestResourceInfoClass = interface(DNObjectClass)
  ['{5ECB1E53-5E9F-50E4-AA12-3369981DE691}']
  { constructors } 

    {class} function init(containingAssembly: DNAssembly; containingFileName: string; resourceLocation: DNResourceLocation): DNManifestResourceInfo;

  end;

  [DNTypeName('System.Reflection.ManifestResourceInfo')]
  DNManifestResourceInfo = interface(DNObject)
  ['{F695C021-DCF5-397B-A300-EDAA51DA5A5B}']
  { getters & setters } 

    function get_ReferencedAssembly: DNAssembly;
    function get_FileName: string;
    function get_ResourceLocation: DNResourceLocation;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ReferencedAssembly: DNAssembly read get_ReferencedAssembly;
    property FileName: string read get_FileName;
    property ResourceLocation: DNResourceLocation read get_ResourceLocation;
  end;

  TDNManifestResourceInfo = class(TDNGenericImport<DNManifestResourceInfoClass, DNManifestResourceInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNMemberInfoClass = interface(DNObjectClass)
  ['{B43DB44C-A9EF-5EE7-83B4-53E10AA8B295}']
  end;

  [DNTypeName('System.Reflection.MemberInfo')]
  DNMemberInfo = interface(DNICustomAttributeProvider)
  ['{5AE028B5-9A3A-32A9-899C-1DEEFB85CC50}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNMemberInfo = class(TDNGenericImport<DNMemberInfoClass, DNMemberInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNEventInfoClass = interface(DNMemberInfoClass)
  ['{ED928372-A955-5505-9C22-6DFDB3BFD778}']
  end;

  [DNTypeName('System.Reflection.EventInfo')]
  DNEventInfo = interface(DNMemberInfo)
  ['{15762CA5-BC5C-3B86-A450-ACF32FC98AA5}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNEventAttributes;
    function get_AddMethod: DNMethodInfo;
    function get_RemoveMethod: DNMethodInfo;
    function get_RaiseMethod: DNMethodInfo;
    function get_EventHandlerType: DNType;
    function get_IsSpecialName: Boolean;
    function get_IsMulticast: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetOtherMethods(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetOtherMethods: TArray<DNMethodInfo>; overload;
    function GetAddMethod: DNMethodInfo; overload;
    function GetRemoveMethod: DNMethodInfo; overload;
    function GetRaiseMethod: DNMethodInfo; overload;
    procedure AddEventHandler(target: DNObject; handler: DNDelegate);
    procedure RemoveEventHandler(target: DNObject; handler: DNDelegate);
    function GetAddMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRemoveMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRaiseMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Attributes: DNEventAttributes read get_Attributes;
    property AddMethod: DNMethodInfo read get_AddMethod;
    property RemoveMethod: DNMethodInfo read get_RemoveMethod;
    property RaiseMethod: DNMethodInfo read get_RaiseMethod;
    property EventHandlerType: DNType read get_EventHandlerType;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsMulticast: Boolean read get_IsMulticast;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNEventInfo = class(TDNGenericImport<DNEventInfoClass, DNEventInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNFieldInfoClass = interface(DNMemberInfoClass)
  ['{24A1F07C-E39E-5518-BA5B-625625C9143E}']
  { static methods } 

    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle): DNFieldInfo; overload;
    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle; declaringType: DNRuntimeTypeHandle): DNFieldInfo; overload;

  end;

  [DNTypeName('System.Reflection.FieldInfo')]
  DNFieldInfo = interface(DNMemberInfo)
  ['{98BA57DC-4CF2-3ED1-B4A2-890C21BBBF4B}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_FieldType: DNType;
    function get_Attributes: DNFieldAttributes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetOptionalCustomModifiers: TArray<DNType>;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    function GetValueDirect(obj: DNTypedReference): DNObject;
    function GetRawConstantValue: DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    function GetValue(obj: DNObject): DNObject;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    property FieldType: DNType read get_FieldType;
    property Attributes: DNFieldAttributes read get_Attributes;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNFieldInfo = class(TDNGenericImport<DNFieldInfoClass, DNFieldInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldBuilderClass = interface(DNFieldInfoClass)
  ['{F758DADA-5A4F-5DBF-83F4-F54AB61A528F}']
  end;

  [DNTypeName('System.Reflection.Emit.FieldBuilder')]
  DNFieldBuilder = interface(DNFieldInfo)
  ['{36D63E48-1646-345F-A3D4-B34E4C42C3C5}']
  { getters & setters } 

    function get_Module: DNModule;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_FieldType: DNType;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Attributes: DNFieldAttributes;
    function get_MemberType: DNMemberTypes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetValue(obj: DNObject): DNObject;
    procedure SetValue(obj: DNObject; val: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetToken: DNFieldToken;
    procedure SetOffset(iOffset: Int32);
    procedure SetMarshal(unmanagedMarshal: DNUnmanagedMarshal);
    procedure SetConstant(defaultValue: DNObject);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetOptionalCustomModifiers: TArray<DNType>;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    function GetValueDirect(obj: DNTypedReference): DNObject;
    function GetRawConstantValue: DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Module: DNModule read get_Module;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property FieldType: DNType read get_FieldType;
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    property Attributes: DNFieldAttributes read get_Attributes;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNFieldBuilder = class(TDNGenericImport<DNFieldBuilderClass, DNFieldBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBaseClass = interface(DNMemberInfoClass)
  ['{9311BBA1-A460-5E3A-BAC9-C032159CF100}']
  { static methods } 

    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle): DNMethodBase; overload;
    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle; declaringType: DNRuntimeTypeHandle): DNMethodBase; overload;
    {class} function GetCurrentMethod: DNMethodBase;

  end;

  [DNTypeName('System.Reflection.MethodBase')]
  DNMethodBase = interface(DNMemberInfo)
  ['{CA308C9F-3B97-3152-ACFA-8AB23C17DF73}']
  { getters & setters } 

    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNMethodBase = class(TDNGenericImport<DNMethodBaseClass, DNMethodBase>) end;

  //-------------namespace: System.Reflection----------------
  DNConstructorInfoClass = interface(DNMethodBaseClass)
  ['{14273BEF-0B00-5593-8685-77C7D0280FFC}']
  { static fields getter & setter } 

   function __fakeFieldGet_ConstructorName: string;
   function __fakeFieldGet_TypeConstructorName: string;

  { static fields } 

    {class} property ConstructorName: string read __fakeFieldGet_ConstructorName;
    {class} property TypeConstructorName: string read __fakeFieldGet_TypeConstructorName;

  end;

  [DNTypeName('System.Reflection.ConstructorInfo')]
  DNConstructorInfo = interface(DNMethodBase)
  ['{0A541F87-EBD7-36A0-9A7D-9BBF86188766}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNConstructorInfo = class(TDNGenericImport<DNConstructorInfoClass, DNConstructorInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNConstructorBuilderClass = interface(DNConstructorInfoClass)
  ['{5394D424-A3A5-5487-BB34-E2FF78463AE0}']
  end;

  [DNTypeName('System.Reflection.Emit.ConstructorBuilder')]
  DNConstructorBuilder = interface(DNConstructorInfo)
  ['{93C24CDB-4014-3EFD-B564-E836BA48C765}']
  { getters & setters } 

    function get_Module: DNModule;
    function get_ReflectedType: DNType;
    function get_DeclaringType: DNType;
    function get_Name: string;
    function get_Attributes: DNMethodAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_CallingConvention: DNCallingConventions;
    function get_ReturnType: DNType;
    function get_Signature: string;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function ToString: string;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetToken: DNMethodToken;
    function DefineParameter(iSequence: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    procedure SetSymCustomAttribute(name: string; data: TArray<Byte>);
    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    procedure SetMethodBody(il: TArray<Byte>; maxStack: Int32; localSignature: TArray<Byte>; exceptionHandlers: DNIEnumerable<DNExceptionHandler>; tokenFixups: DNIEnumerable<Int32>);
    procedure AddDeclarativeSecurity(action: DNSecurityAction; pset: DNPermissionSet);
    function GetModule: DNModule;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Module: DNModule read get_Module;
    property ReflectedType: DNType read get_ReflectedType;
    property DeclaringType: DNType read get_DeclaringType;
    property Name: string read get_Name;
    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property ReturnType: DNType read get_ReturnType;
    property Signature: string read get_Signature;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNConstructorBuilder = class(TDNGenericImport<DNConstructorBuilderClass, DNConstructorBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodInfoClass = interface(DNMethodBaseClass)
  ['{796A2F29-C709-575C-8C31-B2EBEFD7C99A}']
  end;

  [DNTypeName('System.Reflection.MethodInfo')]
  DNMethodInfo = interface(DNMethodBase)
  ['{0E22CC27-CA1E-3138-9640-BE831F721659}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericMethodDefinition: DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function GetBaseDefinition: DNMethodInfo;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property ReturnType: DNType read get_ReturnType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNMethodInfo = class(TDNGenericImport<DNMethodInfoClass, DNMethodInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNDynamicMethodClass = interface(DNMethodInfoClass)
  ['{AD03B3E5-EA6A-524C-B633-2B03BA7534A5}']
  { constructors } 

    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; restrictedSkipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;

  end;

  [DNTypeName('System.Reflection.Emit.DynamicMethod')]
  DNDynamicMethod = interface(DNMethodInfo)
  ['{5B9F3FA2-DABB-3887-93F6-663D83A93858}']
  { getters & setters } 

    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function ToString: string;
    function GetBaseDefinition: DNMethodInfo;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function DefineParameter(position: Int32; attributes: DNParameterAttributes; parameterName: string): DNParameterBuilder;
    function GetDynamicILInfo: DNDynamicILInfo;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericMethodDefinition: DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property ReturnType: DNType read get_ReturnType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNDynamicMethod = class(TDNGenericImport<DNDynamicMethodClass, DNDynamicMethod>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodBuilderClass = interface(DNMethodInfoClass)
  ['{3B99FD1B-7342-5BE1-B477-54A645005D04}']
  end;

  [DNTypeName('System.Reflection.Emit.MethodBuilder')]
  DNMethodBuilder = interface(DNMethodInfo)
  ['{53DF4FB3-A164-37D3-8310-F0D15730AB32}']
  { getters & setters } 

    function get_Name: string;
    function get_Module: DNModule;
    function get_DeclaringType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_ReflectedType: DNType;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_Signature: string;
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function DefineParameter(position: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    function GetILGenerator: DNILGenerator; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetBaseDefinition: DNMethodInfo;
    function GetParameters: TArray<DNParameterInfo>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetGenericMethodDefinition: DNMethodInfo;
    function GetGenericArguments: TArray<DNType>;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    function GetToken: DNMethodToken;
    procedure SetParameters(parameterTypes: TArray<DNType>);
    procedure SetReturnType(returnType: DNType);
    procedure SetSignature(returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>);
    procedure SetMarshal(unmanagedMarshal: DNUnmanagedMarshal);
    procedure SetSymCustomAttribute(name: string; data: TArray<Byte>);
    procedure AddDeclarativeSecurity(action: DNSecurityAction; pset: DNPermissionSet);
    procedure SetMethodBody(il: TArray<Byte>; maxStack: Int32; localSignature: TArray<Byte>; exceptionHandlers: DNIEnumerable<DNExceptionHandler>; tokenFixups: DNIEnumerable<Int32>);
    procedure CreateMethodBody(il: TArray<Byte>; count: Int32);
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    function GetILGenerator(size: Int32): DNILGenerator; overload;
    function GetModule: DNModule;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function ToString: string;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function GetMethodBody: DNMethodBody;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property DeclaringType: DNType read get_DeclaringType;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReflectedType: DNType read get_ReflectedType;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property ReturnType: DNType read get_ReturnType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property Signature: string read get_Signature;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodBuilder = class(TDNGenericImport<DNMethodBuilderClass, DNMethodBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNPropertyInfoClass = interface(DNMemberInfoClass)
  ['{0E38EE72-4D5E-5947-A5C8-16D1A94E78F9}']
  end;

  [DNTypeName('System.Reflection.PropertyInfo')]
  DNPropertyInfo = interface(DNMemberInfo)
  ['{BFDF1F57-230D-394A-B773-D9EC58CBEF9A}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_IsSpecialName: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetConstantValue: DNObject;
    function GetRawConstantValue: DNObject;
    function GetValue(obj: DNObject): DNObject; overload;
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetIndexParameters: TArray<DNParameterInfo>;
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property PropertyType: DNType read get_PropertyType;
    property Attributes: DNPropertyAttributes read get_Attributes;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property GetMethod: DNMethodInfo read get_GetMethod;
    property SetMethod: DNMethodInfo read get_SetMethod;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
  end;

  TDNPropertyInfo = class(TDNGenericImport<DNPropertyInfoClass, DNPropertyInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyBuilderClass = interface(DNPropertyInfoClass)
  ['{75CE4627-AE5F-5130-8C4C-98FE24F47D66}']
  end;

  [DNTypeName('System.Reflection.Emit.PropertyBuilder')]
  DNPropertyBuilder = interface(DNPropertyInfo)
  ['{22D4C021-1B3C-3EE3-93B6-4C9D810CE077}']
  { getters & setters } 

    function get_PropertyToken: DNPropertyToken;
    function get_Module: DNModule;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MemberType: DNMemberTypes;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_IsSpecialName: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    procedure SetConstant(defaultValue: DNObject);
    procedure SetGetMethod(mdBuilder: DNMethodBuilder);
    procedure SetSetMethod(mdBuilder: DNMethodBuilder);
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetIndexParameters: TArray<DNParameterInfo>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetConstantValue: DNObject;
    function GetRawConstantValue: DNObject;
    function GetValue(obj: DNObject): DNObject; overload;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PropertyToken: DNPropertyToken read get_PropertyToken;
    property Module: DNModule read get_Module;
    property PropertyType: DNType read get_PropertyType;
    property Attributes: DNPropertyAttributes read get_Attributes;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property MemberType: DNMemberTypes read get_MemberType;
    property GetMethod: DNMethodInfo read get_GetMethod;
    property SetMethod: DNMethodInfo read get_SetMethod;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNPropertyBuilder = class(TDNGenericImport<DNPropertyBuilderClass, DNPropertyBuilder>) end;

  //-------------namespace: System----------------
  DNTypeClass = interface(DNMemberInfoClass)
  ['{D97FE736-16FB-5154-B096-D0E822C097A7}']
  { static getter & setter } 

    {class} function get_DefaultBinder: DNBinder;

  { static fields getter & setter } 

   function __fakeFieldGet_FilterAttribute: DNMemberFilter;
   function __fakeFieldGet_FilterName: DNMemberFilter;
   function __fakeFieldGet_FilterNameIgnoreCase: DNMemberFilter;
   function __fakeFieldGet_Missing: DNObject;
   function __fakeFieldGet_Delimiter: Char;
   function __fakeFieldGet_EmptyTypes: TArray<DNType>;

  { static fields } 

    {class} property FilterAttribute: DNMemberFilter read __fakeFieldGet_FilterAttribute;
    {class} property FilterName: DNMemberFilter read __fakeFieldGet_FilterName;
    {class} property FilterNameIgnoreCase: DNMemberFilter read __fakeFieldGet_FilterNameIgnoreCase;
    {class} property Missing: DNObject read __fakeFieldGet_Missing;
    {class} property Delimiter: Char read __fakeFieldGet_Delimiter;
    {class} property EmptyTypes: TArray<DNType> read __fakeFieldGet_EmptyTypes;

  { static methods } 

    {class} function GetType(typeName: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    {class} function GetType(typeName: string; throwOnError: Boolean): DNType; overload;
    {class} function GetType(typeName: string): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>; throwOnError: Boolean): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    {class} function ReflectionOnlyGetType(typeName: string; throwIfNotFound: Boolean; ignoreCase: Boolean): DNType;
    {class} function GetTypeFromProgID(progID: string): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; server: string): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; server: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeCode(&type: DNType): DNTypeCode;
    {class} function GetTypeHandle(o: DNObject): DNRuntimeTypeHandle;
    {class} function GetTypeArray(args: TArray<DNObject>): TArray<DNType>;
    {class} function GetTypeFromHandle(handle: DNRuntimeTypeHandle): DNType;

  { static propertys } 

    {class} property DefaultBinder: DNBinder read get_DefaultBinder;
  end;

  [DNTypeName('System.Type')]
  DNType = interface(DNMemberInfo)
  ['{6C9863DC-7207-327F-A048-C3BB63474BFC}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType; overload;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property GUID: DNGuid read get_GUID;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNType = class(TDNGenericImport<DNTypeClass, DNType>) end;

  //-------------namespace: System.Reflection----------------
  DNTypeInfoClass = interface(DNTypeClass)
  ['{12C35AF5-5B80-5C16-8065-734838694B34}']
  end;

  [DNTypeName('System.Reflection.TypeInfo')]
  DNTypeInfo = interface(DNType)
  ['{0DF960BC-125D-3DCB-B55A-E19D773BE4F2}']
  { getters & setters } 

    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function AsType: DNType;
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetType: DNType;

  { propertys } 

    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property GUID: DNGuid read get_GUID;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeInfo = class(TDNGenericImport<DNTypeInfoClass, DNTypeInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEnumBuilderClass = interface(DNTypeInfoClass)
  ['{ACC6A446-1B32-5BC6-B5AF-5332F7BAEA3C}']
  end;

  [DNTypeName('System.Reflection.Emit.EnumBuilder')]
  DNEnumBuilder = interface(DNTypeInfo)
  ['{70F855DA-4948-38AB-A727-431C386AB9F5}']
  { getters & setters } 

    function get_TypeToken: DNTypeToken;
    function get_UnderlyingField: DNFieldBuilder;
    function get_Name: string;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_AssemblyQualifiedName: string;
    function get_Namespace: string;
    function get_BaseType: DNType;
    function get_IsConstructedGenericType: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_DeclaringMethod: DNMethodBase;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function DefineLiteral(literalName: string; literalValue: DNObject): DNFieldBuilder;
    function CreateTypeInfo: DNTypeInfo;
    function CreateType: DNType;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetElementType: DNType;
    function GetEnumUnderlyingType: DNType;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property TypeToken: DNTypeToken read get_TypeToken;
    property UnderlyingField: DNFieldBuilder read get_UnderlyingField;
    property Name: string read get_Name;
    property GUID: DNGuid read get_GUID;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property Namespace: string read get_Namespace;
    property BaseType: DNType read get_BaseType;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNEnumBuilder = class(TDNGenericImport<DNEnumBuilderClass, DNEnumBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNGenericTypeParameterBuilderClass = interface(DNTypeInfoClass)
  ['{0B552231-F868-5CD7-ADE2-084D6DDEF19B}']
  end;

  [DNTypeName('System.Reflection.Emit.GenericTypeParameterBuilder')]
  DNGenericTypeParameterBuilder = interface(DNTypeInfo)
  ['{A2289B64-5DE0-38BA-9266-B55E3598C901}']
  { getters & setters } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_DeclaringMethod: DNMethodBase;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsSubclassOf(c: DNType): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    procedure SetBaseTypeConstraint(baseTypeConstraint: DNType);
    procedure SetInterfaceConstraints(interfaceConstraints: TArray<DNType>);
    procedure SetGenericParameterAttributes(genericParameterAttributes: DNGenericParameterAttributes);
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNType): Boolean; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property GUID: DNGuid read get_GUID;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNGenericTypeParameterBuilder = class(TDNGenericImport<DNGenericTypeParameterBuilderClass, DNGenericTypeParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeBuilderClass = interface(DNTypeInfoClass)
  ['{E791B00B-6BF6-560B-B99B-902EEC97BB74}']
  { static methods } 

    {class} function GetMethod(&type: DNType; method: DNMethodInfo): DNMethodInfo; overload;
    {class} function GetConstructor(&type: DNType; &constructor: DNConstructorInfo): DNConstructorInfo; overload;
    {class} function GetField(&type: DNType; field: DNFieldInfo): DNFieldInfo; overload;

  end;

  [DNTypeName('System.Reflection.Emit.TypeBuilder')]
  DNTypeBuilder = interface(DNTypeInfo)
  ['{0F445332-E34C-3F8C-90ED-AB7F0724ADAB}']
  { getters & setters } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_DeclaringMethod: DNMethodBase;
    function get_Size: Int32;
    function get_PackingSize: DNPackingSize;
    function get_TypeToken: DNTypeToken;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    function DefineDefaultConstructor(attributes: DNMethodAttributes): DNConstructorBuilder;
    function DefineField(fieldName: string; &type: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    function CreateType: DNType;
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function IsCreated: Boolean;
    function ToString: string;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function GetElementType: DNType;
    function IsSubclassOf(c: DNType): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    procedure DefineMethodOverride(methodInfoBody: DNMethodInfo; methodInfoDeclaration: DNMethodInfo);
    function DefineMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineTypeInitializer: DNConstructorBuilder;
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>): DNConstructorBuilder; overload;
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>): DNConstructorBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefineNestedType(name: string): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; typeSize: Int32): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize; typeSize: Int32): DNTypeBuilder; overload;
    function DefineField(fieldName: string; &type: DNType; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    function DefineEvent(name: string; attributes: DNEventAttributes; eventtype: DNType): DNEventBuilder;
    function CreateTypeInfo: DNTypeInfo;
    procedure SetParent(parent: DNType);
    procedure AddInterfaceImplementation(interfaceType: DNType);
    procedure AddDeclarativeSecurity(action: DNSecurityAction; pset: DNPermissionSet);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property GUID: DNGuid read get_GUID;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property Size: Int32 read get_Size;
    property PackingSize: DNPackingSize read get_PackingSize;
    property TypeToken: DNTypeToken read get_TypeToken;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeBuilder = class(TDNGenericImport<DNTypeBuilderClass, DNTypeBuilder>)
  public const
   UnspecifiedTypeSize = 0;
  end;

  //-------------namespace: System.Reflection----------------
  DNTypeDelegatorClass = interface(DNTypeInfoClass)
  ['{CD186FB8-6CE3-5B05-B205-0A2557204224}']
  { constructors } 

    {class} function init(delegatingType: DNType): DNTypeDelegator;

  end;

  [DNTypeName('System.Reflection.TypeDelegator')]
  DNTypeDelegator = interface(DNTypeInfo)
  ['{19E2E2F7-B53C-366B-8840-ABA2F8CB98B5}']
  { getters & setters } 

    function get_GUID: DNGuid;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_Name: string;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsConstructedGenericType: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_MemberType: DNMemberTypes;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsNested: Boolean;
    function get_Attributes: DNTypeAttributes;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsVisible: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsClass: Boolean;
    function get_IsInterface: Boolean;
    function get_IsValueType: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSealed: Boolean;
    function get_IsEnum: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsImport: Boolean;
    function get_IsSerializable: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsArray: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsCOMObject: Boolean;
    function get_HasElementType: Boolean;
    function get_IsContextful: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function GetArrayRank: Int32;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetInterface(name: string): DNType; overload;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function GetEnumNames: TArray<string>;
    function GetEnumValues: DNArray;
    function GetEnumUnderlyingType: DNType;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function IsSubclassOf(c: DNType): Boolean;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsEquivalentTo(other: DNType): Boolean;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(o: DNType): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property GUID: DNGuid read get_GUID;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property Name: string read get_Name;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property MemberType: DNMemberTypes read get_MemberType;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsNested: Boolean read get_IsNested;
    property Attributes: DNTypeAttributes read get_Attributes;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsVisible: Boolean read get_IsVisible;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsClass: Boolean read get_IsClass;
    property IsInterface: Boolean read get_IsInterface;
    property IsValueType: Boolean read get_IsValueType;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSealed: Boolean read get_IsSealed;
    property IsEnum: Boolean read get_IsEnum;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsImport: Boolean read get_IsImport;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsArray: Boolean read get_IsArray;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property HasElementType: Boolean read get_HasElementType;
    property IsContextful: Boolean read get_IsContextful;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNTypeDelegator = class(TDNGenericImport<DNTypeDelegatorClass, DNTypeDelegator>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBodyClass = interface(DNObjectClass)
  ['{B9BAFAF0-2C3D-5B57-9B76-4BF180A2A03C}']
  end;

  [DNTypeName('System.Reflection.MethodBody')]
  DNMethodBody = interface(DNObject)
  ['{8E2EA778-34A7-32A0-8CC2-0BAA5AA2066A}']
  { getters & setters } 

    function get_LocalSignatureMetadataToken: Int32;
    function get_LocalVariables: DNIList<DNLocalVariableInfo>;
    function get_MaxStackSize: Int32;
    function get_InitLocals: Boolean;
    function get_ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause>;

  { methods } 

    function GetILAsByteArray: TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property LocalSignatureMetadataToken: Int32 read get_LocalSignatureMetadataToken;
    property LocalVariables: DNIList<DNLocalVariableInfo> read get_LocalVariables;
    property MaxStackSize: Int32 read get_MaxStackSize;
    property InitLocals: Boolean read get_InitLocals;
    property ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause> read get_ExceptionHandlingClauses;
  end;

  TDNMethodBody = class(TDNGenericImport<DNMethodBodyClass, DNMethodBody>) end;

  //-------------namespace: System.Reflection----------------
  DNMissingClass = interface(DNObjectClass)
  ['{487011B4-3B35-5FA9-B671-E5938511249A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNMissing;

  { static fields } 

    {class} property Value: DNMissing read __fakeFieldGet_Value;

  end;

  [DNTypeName('System.Reflection.Missing')]
  DNMissing = interface(DNISerializable)
  ['{D5FAAC26-DB25-34E7-ADBD-AD5ED51F9433}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMissing = class(TDNGenericImport<DNMissingClass, DNMissing>) end;

  //-------------namespace: System.Reflection----------------
  DNModuleClass = interface(DNObjectClass)
  ['{7441601F-BF00-534C-BBF5-548C7DC5B576}']
  { static fields getter & setter } 

   function __fakeFieldGet_FilterTypeName: DNTypeFilter;
   function __fakeFieldGet_FilterTypeNameIgnoreCase: DNTypeFilter;

  { static fields } 

    {class} property FilterTypeName: DNTypeFilter read __fakeFieldGet_FilterTypeName;
    {class} property FilterTypeNameIgnoreCase: DNTypeFilter read __fakeFieldGet_FilterTypeNameIgnoreCase;

  end;

  [DNTypeName('System.Reflection.Module')]
  DNModule = interface(DN_Module)
  ['{128191C5-B188-3054-81B7-E4F588EACF0E}']
  { getters & setters } 

    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MDStreamVersion: Int32;
    function get_FullyQualifiedName: string;
    function get_ModuleVersionId: DNGuid;
    function get_MetadataToken: Int32;
    function get_ScopeName: string;
    function get_Name: string;
    function get_Assembly: DNAssembly;
    function get_ModuleHandle: DNModuleHandle;

  { methods } 

    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    function ResolveType(metadataToken: Int32): DNType; overload;
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    function ResolveString(metadataToken: Int32): string;
    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    function GetType(className: string): DNType; overload;
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetTypes: TArray<DNType>;
    function IsResource: Boolean;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetSignerCertificate: DNX509Certificate;
    function GetType: DNType; overload;

  { propertys } 

    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    property FullyQualifiedName: string read get_FullyQualifiedName;
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    property MetadataToken: Int32 read get_MetadataToken;
    property ScopeName: string read get_ScopeName;
    property Name: string read get_Name;
    property Assembly: DNAssembly read get_Assembly;
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
  end;

  TDNModule = class(TDNGenericImport<DNModuleClass, DNModule>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNModuleBuilderClass = interface(DNModuleClass)
  ['{934EF606-E390-5442-91B4-F0C8A5B0EDD9}']
  end;

  [DNTypeName('System.Reflection.Emit.ModuleBuilder')]
  DNModuleBuilder = interface(DNModule)
  ['{FB2ED445-2862-3A63-9F5A-BBF6C2195DCE}']
  { getters & setters } 

    function get_FullyQualifiedName: string;
    function get_MDStreamVersion: Int32;
    function get_ModuleVersionId: DNGuid;
    function get_MetadataToken: Int32;
    function get_ScopeName: string;
    function get_Name: string;
    function get_Assembly: DNAssembly;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_ModuleHandle: DNModuleHandle;

  { methods } 

    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    function Equals(obj: DNObject): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetTypes: TArray<DNType>;
    function GetType(className: string): DNType; overload;
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    function ResolveString(metadataToken: Int32): string;
    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    function IsResource: Boolean;
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetSignerCertificate: DNX509Certificate;
    function DefineType(name: string): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; typesize: Int32): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packingSize: DNPackingSize; typesize: Int32): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packsize: DNPackingSize): DNTypeBuilder; overload;
    function DefineEnum(name: string; visibility: DNTypeAttributes; underlyingType: DNType): DNEnumBuilder;
    function DefineResource(name: string; description: string): DNIResourceWriter; overload;
    function DefineResource(name: string; description: string; attribute: DNResourceAttributes): DNIResourceWriter; overload;
    procedure DefineManifestResource(name: string; stream: DNStream; attribute: DNResourceAttributes);
    procedure DefineUnmanagedResource(resource: TArray<Byte>); overload;
    procedure DefineUnmanagedResource(resourceFileName: string); overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    procedure CreateGlobalFunctions;
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    function GetTypeToken(&type: DNType): DNTypeToken; overload;
    function GetTypeToken(name: string): DNTypeToken; overload;
    function GetMethodToken(method: DNMethodInfo): DNMethodToken; overload;
    function GetConstructorToken(&constructor: DNConstructorInfo; optionalParameterTypes: DNIEnumerable<DNType>): DNMethodToken; overload;
    function GetMethodToken(method: DNMethodInfo; optionalParameterTypes: DNIEnumerable<DNType>): DNMethodToken; overload;
    function GetArrayMethodToken(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodToken;
    function GetArrayMethod(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodInfo;
    function GetConstructorToken(con: DNConstructorInfo): DNMethodToken; overload;
    function GetFieldToken(field: DNFieldInfo): DNFieldToken;
    function GetStringConstant(str: string): DNStringToken;
    function GetSignatureToken(sigHelper: DNSignatureHelper): DNSignatureToken; overload;
    function GetSignatureToken(sigBytes: TArray<Byte>; sigLength: Int32): DNSignatureToken; overload;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetSymWriter: DNISymbolWriter;
    function DefineDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocumentWriter;
    procedure SetUserEntryPoint(entryPoint: DNMethodInfo);
    procedure SetSymCustomAttribute(name: string; data: TArray<Byte>);
    function IsTransient: Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    function ResolveType(metadataToken: Int32): DNType; overload;
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetType: DNType; overload;

  { propertys } 

    property FullyQualifiedName: string read get_FullyQualifiedName;
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    property MetadataToken: Int32 read get_MetadataToken;
    property ScopeName: string read get_ScopeName;
    property Name: string read get_Name;
    property Assembly: DNAssembly read get_Assembly;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
  end;

  TDNModuleBuilder = class(TDNGenericImport<DNModuleBuilderClass, DNModuleBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterInfoClass = interface(DNObjectClass)
  ['{5AD339CF-8F53-5F5F-B101-B8703C60D47F}']
  end;

  [DNTypeName('System.Reflection.ParameterInfo')]
  DNParameterInfo = interface(DN_ParameterInfo)
  ['{E5CE8078-0CA7-3578-80DB-F20FCA8786A6}']
  { getters & setters } 

    function get_ParameterType: DNType;
    function get_Name: string;
    function get_HasDefaultValue: Boolean;
    function get_DefaultValue: DNObject;
    function get_RawDefaultValue: DNObject;
    function get_Position: Int32;
    function get_Attributes: DNParameterAttributes;
    function get_Member: DNMemberInfo;
    function get_IsIn: Boolean;
    function get_IsOut: Boolean;
    function get_IsLcid: Boolean;
    function get_IsRetval: Boolean;
    function get_IsOptional: Boolean;
    function get_MetadataToken: Int32;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetRealObject(context: DNStreamingContext): DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ParameterType: DNType read get_ParameterType;
    property Name: string read get_Name;
    property HasDefaultValue: Boolean read get_HasDefaultValue;
    property DefaultValue: DNObject read get_DefaultValue;
    property RawDefaultValue: DNObject read get_RawDefaultValue;
    property Position: Int32 read get_Position;
    property Attributes: DNParameterAttributes read get_Attributes;
    property Member: DNMemberInfo read get_Member;
    property IsIn: Boolean read get_IsIn;
    property IsOut: Boolean read get_IsOut;
    property IsLcid: Boolean read get_IsLcid;
    property IsRetval: Boolean read get_IsRetval;
    property IsOptional: Boolean read get_IsOptional;
    property MetadataToken: Int32 read get_MetadataToken;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNParameterInfo = class(TDNGenericImport<DNParameterInfoClass, DNParameterInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNPointerClass = interface(DNObjectClass)
  ['{D1D0573A-B0EC-59DC-9A44-273784640796}']
  { static methods } 

    {class} function Box(var ptr: DNVoid; &type: DNType): DNObject;
    {class} function Unbox(ptr: DNObject): DNVoid;

  end;

  [DNTypeName('System.Reflection.Pointer')]
  DNPointer = interface(DNISerializable)
  ['{0517463E-1139-3970-BFA9-DCC997B23E7C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPointer = class(TDNGenericImport<DNPointerClass, DNPointer>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionContextClass = interface(DNObjectClass)
  ['{818DDD18-D358-5FC0-8200-52469E525703}']
  end;

  [DNTypeName('System.Reflection.ReflectionContext')]
  DNReflectionContext = interface(DNObject)
  ['{8B4D8BB5-A975-3D20-B38A-423EEB5B5E86}']
  { methods } 

    function GetTypeForObject(value: DNObject): DNTypeInfo;
    function MapAssembly(assembly: DNAssembly): DNAssembly;
    function MapType(&type: DNTypeInfo): DNTypeInfo;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNReflectionContext = class(TDNGenericImport<DNReflectionContextClass, DNReflectionContext>) end;

  //-------------namespace: System.Reflection----------------
  DNRuntimeReflectionExtensionsClass = interface(DNObjectClass)
  ['{1BA445AB-77E1-5D98-8891-031A99C6BAA6}']
  { static methods } 

    {class} function GetRuntimeProperties(&type: DNType): DNIEnumerable<DNPropertyInfo>;
    {class} function GetRuntimeEvents(&type: DNType): DNIEnumerable<DNEventInfo>;
    {class} function GetRuntimeMethods(&type: DNType): DNIEnumerable<DNMethodInfo>;
    {class} function GetRuntimeFields(&type: DNType): DNIEnumerable<DNFieldInfo>;
    {class} function GetRuntimeProperty(&type: DNType; name: string): DNPropertyInfo;
    {class} function GetRuntimeEvent(&type: DNType; name: string): DNEventInfo;
    {class} function GetRuntimeMethod(&type: DNType; name: string; parameters: TArray<DNType>): DNMethodInfo;
    {class} function GetRuntimeField(&type: DNType; name: string): DNFieldInfo;
    {class} function GetRuntimeBaseDefinition(method: DNMethodInfo): DNMethodInfo;
    {class} function GetRuntimeInterfaceMap(typeInfo: DNTypeInfo; interfaceType: DNType): DNInterfaceMapping;
    {class} function GetMethodInfo(del: DNDelegate): DNMethodInfo;

  end;

  [DNTypeName('System.Reflection.RuntimeReflectionExtensions')]
  DNRuntimeReflectionExtensions = interface(DNObject)
  ['{84914023-77E2-3037-B340-B5FCC7E07B4A}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeReflectionExtensions = class(TDNGenericImport<DNRuntimeReflectionExtensionsClass, DNRuntimeReflectionExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNStrongNameKeyPairClass = interface(DNObjectClass)
  ['{F1C0DFAD-7FDB-5970-89D9-09A6382432F2}']
  { constructors } 

    {class} function init(keyPairFile: DNFileStream): DNStrongNameKeyPair; overload;
    {class} function init(keyPairArray: TArray<Byte>): DNStrongNameKeyPair; overload;
    {class} function init(keyPairContainer: string): DNStrongNameKeyPair; overload;

  end;

  [DNTypeName('System.Reflection.StrongNameKeyPair')]
  DNStrongNameKeyPair = interface(DNIDeserializationCallback)
  ['{D633F013-0563-312A-B9D6-D067A7D59231}']
  { getters & setters } 

    function get_PublicKey: TArray<Byte>;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PublicKey: TArray<Byte> read get_PublicKey;
  end;

  TDNStrongNameKeyPair = class(TDNGenericImport<DNStrongNameKeyPairClass, DNStrongNameKeyPair>) end;

  //-------------namespace: System.Resources----------------
  DNResourceManagerClass = interface(DNObjectClass)
  ['{EAB357EC-C43C-5D12-A558-BA815B9B39B7}']
  { constructors } 

    {class} function init(baseName: string; assembly: DNAssembly): DNResourceManager; overload;
    {class} function init(baseName: string; assembly: DNAssembly; usingResourceSet: DNType): DNResourceManager; overload;
    {class} function init(resourceSource: DNType): DNResourceManager; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MagicNumber: Int32;
   function __fakeFieldGet_HeaderVersionNumber: Int32;

  { static fields } 

    {class} property MagicNumber: Int32 read __fakeFieldGet_MagicNumber;
    {class} property HeaderVersionNumber: Int32 read __fakeFieldGet_HeaderVersionNumber;

  { static methods } 

    {class} function CreateFileBasedResourceManager(baseName: string; resourceDir: string; usingResourceSet: DNType): DNResourceManager;

  end;

  [DNTypeName('System.Resources.ResourceManager')]
  DNResourceManager = interface(DNObject)
  ['{9AFB3B93-E6DA-35D6-B9FE-44815E2BFD45}']
  { getters & setters } 

    function get_BaseName: string;
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_ResourceSetType: DNType;

  { methods } 

    procedure ReleaseAllResources;
    function GetResourceSet(culture: DNCultureInfo; createIfNotExists: Boolean; tryParents: Boolean): DNResourceSet;
    function GetString(name: string): string; overload;
    function GetString(name: string; culture: DNCultureInfo): string; overload;
    function GetObject(name: string): DNObject; overload;
    function GetObject(name: string; culture: DNCultureInfo): DNObject; overload;
    function GetStream(name: string): DNUnmanagedMemoryStream; overload;
    function GetStream(name: string; culture: DNCultureInfo): DNUnmanagedMemoryStream; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BaseName: string read get_BaseName;
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    property ResourceSetType: DNType read get_ResourceSetType;
  end;

  TDNResourceManager = class(TDNGenericImport<DNResourceManagerClass, DNResourceManager>) end;

  //-------------namespace: System.Resources----------------
  DNResourceReaderClass = interface(DNObjectClass)
  ['{3AC8C4DA-AF7B-555B-B9F6-EB4085C5A594}']
  { constructors } 

    {class} function init(fileName: string): DNResourceReader; overload;
    {class} function init(stream: DNStream): DNResourceReader; overload;

  end;

  [DNTypeName('System.Resources.ResourceReader')]
  DNResourceReader = interface(DNIResourceReader)
  ['{DD78B5ED-AA52-3B2B-A1B4-6CE3CE3155EA}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure GetResourceData(resourceName: string; out resourceType: string; out resourceData: TArray<Byte>);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNResourceReader = class(TDNGenericImport<DNResourceReaderClass, DNResourceReader>) end;

  //-------------namespace: System.Resources----------------
  DNResourceSetClass = interface(DNObjectClass)
  ['{5B7B0C1F-3DDE-531B-8C2A-7AF70A825441}']
  { constructors } 

    {class} function init(fileName: string): DNResourceSet; overload;
    {class} function init(stream: DNStream): DNResourceSet; overload;
    {class} function init(reader: DNIResourceReader): DNResourceSet; overload;

  end;

  [DNTypeName('System.Resources.ResourceSet')]
  DNResourceSet = interface(DNIDisposable)
  ['{A907F7CD-8C99-31EA-AC00-80FA4D94780A}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function GetDefaultReader: DNType;
    function GetDefaultWriter: DNType;
    function GetEnumerator: DNIDictionaryEnumerator;
    function GetString(name: string): string; overload;
    function GetString(name: string; ignoreCase: Boolean): string; overload;
    function GetObject(name: string): DNObject; overload;
    function GetObject(name: string; ignoreCase: Boolean): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNResourceSet = class(TDNGenericImport<DNResourceSetClass, DNResourceSet>) end;

  //-------------namespace: System.Resources----------------
  DNResourceWriterClass = interface(DNObjectClass)
  ['{732B87C3-168C-58FA-8EEE-86A912B5A0EE}']
  { constructors } 

    {class} function init(fileName: string): DNResourceWriter; overload;
    {class} function init(stream: DNStream): DNResourceWriter; overload;

  end;

  [DNTypeName('System.Resources.ResourceWriter')]
  DNResourceWriter = interface(DNIResourceWriter)
  ['{9187A0D6-508C-36CC-A79F-F90B89A0E154}']
  { getters & setters } 

    function get_TypeNameConverter: DNFunc<DNType, string>;
    procedure set_TypeNameConverter(value: DNFunc<DNType, string>);

  { methods } 

    procedure AddResource(name: string; value: string); overload;
    procedure AddResource(name: string; value: DNObject); overload;
    procedure AddResource(name: string; value: DNStream); overload;
    procedure AddResource(name: string; value: DNStream; closeAfterWrite: Boolean); overload;
    procedure AddResource(name: string; value: TArray<Byte>); overload;
    procedure AddResourceData(name: string; typeName: string; serializedData: TArray<Byte>);
    procedure Close;
    procedure Dispose;
    procedure Generate;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeNameConverter: DNFunc<DNType, string> read get_TypeNameConverter write set_TypeNameConverter;
  end;

  TDNResourceWriter = class(TDNGenericImport<DNResourceWriterClass, DNResourceWriter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvCdeclClass = interface(DNObjectClass)
  ['{67DEAE44-650B-579B-BAF6-77F4E4663187}']
  { constructors } 

    {class} function init: DNCallConvCdecl;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvCdecl')]
  DNCallConvCdecl = interface(DNObject)
  ['{A3A1F076-1FA7-3A26-886D-8841CB45382F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvCdecl = class(TDNGenericImport<DNCallConvCdeclClass, DNCallConvCdecl>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvFastcallClass = interface(DNObjectClass)
  ['{D9BA72ED-B93C-58B2-A3EE-7A371DD66D81}']
  { constructors } 

    {class} function init: DNCallConvFastcall;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvFastcall')]
  DNCallConvFastcall = interface(DNObject)
  ['{ED0BC45C-2438-31A9-BBB6-E2A3B5916419}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvFastcall = class(TDNGenericImport<DNCallConvFastcallClass, DNCallConvFastcall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvStdcallClass = interface(DNObjectClass)
  ['{6C3EEC0E-8CEB-5B4A-B38E-16A52E00E222}']
  { constructors } 

    {class} function init: DNCallConvStdcall;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvStdcall')]
  DNCallConvStdcall = interface(DNObject)
  ['{BCB67D4D-2096-36BE-974C-A003FC95041B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvStdcall = class(TDNGenericImport<DNCallConvStdcallClass, DNCallConvStdcall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvThiscallClass = interface(DNObjectClass)
  ['{20EF1327-6919-53FC-9A0E-3D4DD3421B5A}']
  { constructors } 

    {class} function init: DNCallConvThiscall;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvThiscall')]
  DNCallConvThiscall = interface(DNObject)
  ['{46080CA7-7CB8-3A55-A72E-8E50ECA4D4FC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallConvThiscall = class(TDNGenericImport<DNCallConvThiscallClass, DNCallConvThiscall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerMarshalOverrideClass = interface(DNObjectClass)
  ['{E07AF8DE-D6B2-5AE4-8BFE-398F39541597}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilerMarshalOverride')]
  DNCompilerMarshalOverride = interface(DNObject)
  ['{FDB63468-3168-3DB1-8D76-09EE5C0275EE}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompilerMarshalOverride = class(TDNGenericImport<DNCompilerMarshalOverrideClass, DNCompilerMarshalOverride>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConditionalWeakTableClass<TKey, TValue> = interface(DNObjectClass)
  ['{FB68BA85-02F1-50CC-B1B7-07176867B273}']
  { constructors } 

    {class} function init: DNConditionalWeakTable<TKey, TValue>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ConditionalWeakTable`2')]
  DNConditionalWeakTable<TKey, TValue> = interface(DNObject)
  ['{FF0033F3-D9D6-3CB0-A651-0299C904139A}']
  { methods } 

    function TryGetValue(key: TKey; out value: TValue): Boolean;
    procedure Add(key: TKey; value: TValue);
    function Remove(key: TKey): Boolean;
    function GetValue(key: TKey; createValueCallback: DNConditionalWeakTable_CreateValueCallback<TKey, TValue>): TValue;
    function GetOrCreateValue(key: TKey): TValue;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNConditionalWeakTable<TKey, TValue> = class(TDNGenericImport<DNConditionalWeakTableClass<TKey, TValue>, DNConditionalWeakTable<TKey, TValue>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ContractHelperClass = interface(DNObjectClass)
  ['{0F0D3D44-132B-5741-9A6C-FE3A161BF118}']
  { static methods } 

    {class} procedure TriggerFailure(kind: DNContractFailureKind; displayMessage: string; userMessage: string; conditionText: string; innerException: DNException);
    {class} function RaiseContractFailedEvent(failureKind: DNContractFailureKind; userMessage: string; conditionText: string; innerException: DNException): string;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ContractHelper')]
  DNCompilerServices_ContractHelper = interface(DNObject)
  ['{AB4B2A18-5A58-3D1E-8C3A-3D98955542C8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompilerServices_ContractHelper = class(TDNGenericImport<DNCompilerServices_ContractHelperClass, DNCompilerServices_ContractHelper>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFormattableStringFactoryClass = interface(DNObjectClass)
  ['{4B6173A8-44B4-5CFB-A175-26A96BB112FC}']
  { static methods } 

    {class} function Create(format: string; arguments: TArray<DNObject>): DNFormattableString;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FormattableStringFactory')]
  DNFormattableStringFactory = interface(DNObject)
  ['{F15BAEAD-A3D6-3BB6-9BAA-BBA9C23DDBF3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNFormattableStringFactory = class(TDNGenericImport<DNFormattableStringFactoryClass, DNFormattableStringFactory>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsBoxedClass = interface(DNObjectClass)
  ['{159609C7-AD73-5523-BF97-405BE475F718}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsBoxed')]
  DNIsBoxed = interface(DNObject)
  ['{5083DEEF-2A3B-3916-96C8-6A72F0F45ADC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsBoxed = class(TDNGenericImport<DNIsBoxedClass, DNIsBoxed>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsByValueClass = interface(DNObjectClass)
  ['{004D6474-9918-5F42-8572-4009D701D46C}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsByValue')]
  DNIsByValue = interface(DNObject)
  ['{CDBCEA94-8491-30B5-8081-F19AC619C52B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsByValue = class(TDNGenericImport<DNIsByValueClass, DNIsByValue>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsConstClass = interface(DNObjectClass)
  ['{1CB79E18-B24D-581F-A01F-5AA8CF2580B7}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsConst')]
  DNIsConst = interface(DNObject)
  ['{11CF8D80-A585-3B59-97BD-D160D8701FAB}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsConst = class(TDNGenericImport<DNIsConstClass, DNIsConst>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsCopyConstructedClass = interface(DNObjectClass)
  ['{CFC1EA99-92F1-5C11-95E2-CCE3B4D74746}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsCopyConstructed')]
  DNIsCopyConstructed = interface(DNObject)
  ['{2D6B9536-E9CA-317C-B62F-8E5876351E10}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsCopyConstructed = class(TDNGenericImport<DNIsCopyConstructedClass, DNIsCopyConstructed>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsExplicitlyDereferencedClass = interface(DNObjectClass)
  ['{4E8A7A11-BA5E-54E2-8A8D-6AFCFBC25CB9}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsExplicitlyDereferenced')]
  DNIsExplicitlyDereferenced = interface(DNObject)
  ['{9945C834-97F3-3C22-991D-72BCAC302382}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsExplicitlyDereferenced = class(TDNGenericImport<DNIsExplicitlyDereferencedClass, DNIsExplicitlyDereferenced>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsImplicitlyDereferencedClass = interface(DNObjectClass)
  ['{97206CE2-328D-5BBB-8CD1-A86BCFCB1477}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsImplicitlyDereferenced')]
  DNIsImplicitlyDereferenced = interface(DNObject)
  ['{202228BF-B267-3FCC-94C3-E4F75D2EED5C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsImplicitlyDereferenced = class(TDNGenericImport<DNIsImplicitlyDereferencedClass, DNIsImplicitlyDereferenced>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsJitIntrinsicClass = interface(DNObjectClass)
  ['{5F2142E8-6489-5CEC-AC14-90894977BE6E}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsJitIntrinsic')]
  DNIsJitIntrinsic = interface(DNObject)
  ['{F57FAC33-B169-33AA-9886-D3327D9E5271}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsJitIntrinsic = class(TDNGenericImport<DNIsJitIntrinsicClass, DNIsJitIntrinsic>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsLongClass = interface(DNObjectClass)
  ['{826E1503-AD45-5A0B-9C3E-B808BFABBABB}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsLong')]
  DNIsLong = interface(DNObject)
  ['{9F8983FA-6811-329D-9EC4-C56D98F3478E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsLong = class(TDNGenericImport<DNIsLongClass, DNIsLong>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsPinnedClass = interface(DNObjectClass)
  ['{03E5A512-ED3D-5EBC-8B50-E80E2855373C}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsPinned')]
  DNIsPinned = interface(DNObject)
  ['{75483265-40F1-3E71-8B51-6FCCCC06D211}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsPinned = class(TDNGenericImport<DNIsPinnedClass, DNIsPinned>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsSignUnspecifiedByteClass = interface(DNObjectClass)
  ['{16C0A31C-2FA1-547E-9A53-723CC33617A2}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsSignUnspecifiedByte')]
  DNIsSignUnspecifiedByte = interface(DNObject)
  ['{0D3FC740-1E2A-37DF-9DC4-79FC5F9B1A4E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsSignUnspecifiedByte = class(TDNGenericImport<DNIsSignUnspecifiedByteClass, DNIsSignUnspecifiedByte>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsUdtReturnClass = interface(DNObjectClass)
  ['{DC8FBBB2-547A-550A-9E94-3C6C60839626}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsUdtReturn')]
  DNIsUdtReturn = interface(DNObject)
  ['{A81780E5-D5AA-3C30-AFA9-773C150E7F91}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsUdtReturn = class(TDNGenericImport<DNIsUdtReturnClass, DNIsUdtReturn>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsVolatileClass = interface(DNObjectClass)
  ['{E47CD96E-B97E-500D-9140-C1C2306278FE}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsVolatile')]
  DNIsVolatile = interface(DNObject)
  ['{86527C04-536A-33C6-8C84-3D5A5B458DB3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNIsVolatile = class(TDNGenericImport<DNIsVolatileClass, DNIsVolatile>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeFeatureClass = interface(DNObjectClass)
  ['{A8790694-107B-5FAC-A56D-FAA9A1D38E8D}']
  { static methods } 

    {class} function IsSupported(feature: string): Boolean;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeFeature')]
  DNRuntimeFeature = interface(DNObject)
  ['{9EE6AFB0-F9CC-3AF2-AD5A-B92ADC66D715}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeFeature = class(TDNGenericImport<DNRuntimeFeatureClass, DNRuntimeFeature>)
  public const
   PortablePdb = 'PortablePdb';
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeHelpersClass = interface(DNObjectClass)
  ['{280F85B7-313C-55E9-A622-DEA674E7DC6D}']
  { static getter & setter } 

    {class} function get_OffsetToStringData: Int32;

  { static methods } 

    {class} procedure RunClassConstructor(&type: DNRuntimeTypeHandle);
    {class} procedure RunModuleConstructor(module: DNModuleHandle);
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle); overload;
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle; instantiation: TArray<DNRuntimeTypeHandle>); overload;
    {class} procedure PrepareConstrainedRegions;
    {class} procedure PrepareConstrainedRegionsNoOP;
    {class} procedure InitializeArray(&array: DNArray; fldHandle: DNRuntimeFieldHandle);
    {class} function GetObjectValue(obj: DNObject): DNObject;
    {class} procedure PrepareDelegate(d: DNDelegate);
    {class} procedure PrepareContractedDelegate(d: DNDelegate);
    {class} function GetHashCode(o: DNObject): Int32; overload;
    {class} function Equals(o1: DNObject; o2: DNObject): Boolean; overload;
    {class} procedure EnsureSufficientExecutionStack;
    {class} procedure ProbeForSufficientStack;
    {class} procedure ExecuteCodeWithGuaranteedCleanup(code: DNRuntimeHelpers_TryCode; backoutCode: DNRuntimeHelpers_CleanupCode; userData: DNObject);

  { static propertys } 

    {class} property OffsetToStringData: Int32 read get_OffsetToStringData;
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers')]
  DNRuntimeHelpers = interface(DNObject)
  ['{8D360300-B535-3B0F-8C16-BFE8BB46D369}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeHelpers = class(TDNGenericImport<DNRuntimeHelpersClass, DNRuntimeHelpers>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNCriticalFinalizerObjectClass = interface(DNObjectClass)
  ['{70B7E598-A4D9-5286-A616-0EFBA1574A9B}']
  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.CriticalFinalizerObject')]
  DNCriticalFinalizerObject = interface(DNObject)
  ['{314BDA5A-9292-3FC0-830D-7A4B0261FC88}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCriticalFinalizerObject = class(TDNGenericImport<DNCriticalFinalizerObjectClass, DNCriticalFinalizerObject>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCriticalHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{A26D50ED-29D4-5802-8664-34C3EB497D19}']
  end;

  [DNTypeName('System.Runtime.InteropServices.CriticalHandle')]
  DNCriticalHandle = interface(DNCriticalFinalizerObject)
  ['{62172ED7-7BAD-3D27-A747-5692DB248556}']
  { getters & setters } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    procedure Dispose;
    procedure Close;
    procedure SetHandleAsInvalid;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsClosed: Boolean read get_IsClosed;
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNCriticalHandle = class(TDNGenericImport<DNCriticalHandleClass, DNCriticalHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{53DCF245-FD6B-5D85-A883-DC6E4405C1C7}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid')]
  DNCriticalHandleMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{78C1501D-529B-3F0F-A8A1-15E3033FC85F}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Dispose;
    procedure Close;
    procedure SetHandleAsInvalid;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleMinusOneIsInvalidClass, DNCriticalHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleZeroOrMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{7EECD0D2-7A8A-56E6-AEF6-41D48BA7398D}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid')]
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{EAA6AB61-77E0-3CBD-9BE2-1E10FE9E0E33}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Dispose;
    procedure Close;
    procedure SetHandleAsInvalid;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleZeroOrMinusOneIsInvalidClass, DNCriticalHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{0E71F070-0239-53E6-A579-FEDC78636B11}']
  end;

  [DNTypeName('System.Runtime.InteropServices.SafeHandle')]
  DNSafeHandle = interface(DNCriticalFinalizerObject)
  ['{E8F130DA-92C9-3B55-9202-F5DEB7549328}']
  { getters & setters } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsClosed: Boolean read get_IsClosed;
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNSafeHandle = class(TDNGenericImport<DNSafeHandleClass, DNSafeHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeAccessTokenHandleClass = interface(DNSafeHandleClass)
  ['{D34D6AE6-337B-5DFC-8927-618F01A8A1E1}']
  { static getter & setter } 

    {class} function get_InvalidHandle: DNSafeAccessTokenHandle;

  { constructors } 

    {class} function init(handle: IntPtr): DNSafeAccessTokenHandle;

  { static propertys } 

    {class} property InvalidHandle: DNSafeAccessTokenHandle read get_InvalidHandle;
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeAccessTokenHandle')]
  DNSafeAccessTokenHandle = interface(DNSafeHandle)
  ['{C517A72D-817A-3D78-B94B-6B5C755C4CFC}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeAccessTokenHandle = class(TDNGenericImport<DNSafeAccessTokenHandleClass, DNSafeAccessTokenHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{80DB7A50-F36E-58B9-B629-3CB3C2102927}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid')]
  DNSafeHandleMinusOneIsInvalid = interface(DNSafeHandle)
  ['{E001B83E-3EA9-3EB9-89BC-F0175596A0B9}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleMinusOneIsInvalidClass, DNSafeHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleZeroOrMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{39F153AC-0435-5BF6-8F73-84FB52781E6A}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid')]
  DNSafeHandleZeroOrMinusOneIsInvalid = interface(DNSafeHandle)
  ['{583D8A31-1A10-30B7-83E9-6BDD6E584980}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleZeroOrMinusOneIsInvalidClass, DNSafeHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeFileHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{B1AA86E9-E95C-58FD-B0B5-EB0F81B01A57}']
  { constructors } 

    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafeFileHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeFileHandle')]
  DNSafeFileHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{4E327CFC-CA61-3F0B-9709-4211D1C97521}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeFileHandle = class(TDNGenericImport<DNSafeFileHandleClass, DNSafeFileHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeRegistryHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{CCFCA854-F7C2-549E-9B96-D4D9C60CB527}']
  { constructors } 

    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafeRegistryHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeRegistryHandle')]
  DNSafeRegistryHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{B7296638-C367-364E-9D81-D4BFD781628D}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeRegistryHandle = class(TDNGenericImport<DNSafeRegistryHandleClass, DNSafeRegistryHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeWaitHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{B660FE34-E26E-5871-847A-A39075A77FF8}']
  { constructors } 

    {class} function init(existingHandle: IntPtr; ownsHandle: Boolean): DNSafeWaitHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeWaitHandle')]
  DNSafeWaitHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{30C38B0C-1179-38B1-9C29-F8339C2D5B0D}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeWaitHandle = class(TDNGenericImport<DNSafeWaitHandleClass, DNSafeWaitHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeBufferClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{6BCB08BE-9ACA-5E12-8D3F-4D6F6B5363C9}']
  end;

  [DNTypeName('System.Runtime.InteropServices.SafeBuffer')]
  DNSafeBuffer = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{35D435B2-DC3E-3588-B9DA-37EDBBD779D9}']
  { getters & setters } 

    function get_ByteLength: UInt64;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure AcquirePointer(out pointer: PByte);
    procedure Initialize(numBytes: UInt64); overload;
    procedure Initialize(numElements: UInt32; sizeOfEachElement: UInt32); overload;
    procedure ReleasePointer;
    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ByteLength: UInt64 read get_ByteLength;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeBuffer = class(TDNGenericImport<DNSafeBufferClass, DNSafeBuffer>) end;

  //-------------namespace: System.Runtime----------------
  DNMemoryFailPointClass = interface(DNCriticalFinalizerObjectClass)
  ['{46974A59-753F-59FE-8343-FBF5F4A708FE}']
  { constructors } 

    {class} function init(sizeInMegabytes: Int32): DNMemoryFailPoint;

  end;

  [DNTypeName('System.Runtime.MemoryFailPoint')]
  DNMemoryFailPoint = interface(DNCriticalFinalizerObject)
  ['{D0D4EBA3-C496-33DA-A09E-AB4ED104486B}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMemoryFailPoint = class(TDNGenericImport<DNMemoryFailPointClass, DNMemoryFailPoint>) end;

  //-------------namespace: System.Threading----------------
  DNReaderWriterLockClass = interface(DNCriticalFinalizerObjectClass)
  ['{2E1E4849-2F3C-5A5D-B636-D649C2851A0F}']
  { constructors } 

    {class} function init: DNReaderWriterLock;

  end;

  [DNTypeName('System.Threading.ReaderWriterLock')]
  DNReaderWriterLock = interface(DNCriticalFinalizerObject)
  ['{9173D971-B142-38A5-8488-D10A9DCF71B0}']
  { getters & setters } 

    function get_IsReaderLockHeld: Boolean;
    function get_IsWriterLockHeld: Boolean;
    function get_WriterSeqNum: Int32;

  { methods } 

    procedure AcquireReaderLock(millisecondsTimeout: Int32); overload;
    procedure AcquireReaderLock(timeout: DNTimeSpan); overload;
    procedure AcquireWriterLock(millisecondsTimeout: Int32); overload;
    procedure AcquireWriterLock(timeout: DNTimeSpan); overload;
    procedure ReleaseReaderLock;
    procedure ReleaseWriterLock;
    function UpgradeToWriterLock(millisecondsTimeout: Int32): DNLockCookie; overload;
    function UpgradeToWriterLock(timeout: DNTimeSpan): DNLockCookie; overload;
    procedure DowngradeFromWriterLock(out lockCookie: DNLockCookie);
    function ReleaseLock: DNLockCookie;
    procedure RestoreLock(out lockCookie: DNLockCookie);
    function AnyWritersSince(seqNum: Int32): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsReaderLockHeld: Boolean read get_IsReaderLockHeld;
    property IsWriterLockHeld: Boolean read get_IsWriterLockHeld;
    property WriterSeqNum: Int32 read get_WriterSeqNum;
  end;

  TDNReaderWriterLock = class(TDNGenericImport<DNReaderWriterLockClass, DNReaderWriterLock>) end;

  //-------------namespace: System.Threading----------------
  DNThreadClass = interface(DNCriticalFinalizerObjectClass)
  ['{F8ECEAD9-CC81-524D-B321-3A8C1EFC609C}']
  { static getter & setter } 

    {class} function get_CurrentThread: DNThread;
    {class} function get_CurrentContext: DNContext;
    {class} function get_CurrentPrincipal: DNIPrincipal;
    {class} procedure set_CurrentPrincipal(value: DNIPrincipal);

  { constructors } 

    {class} function init(start: DNThreadStart): DNThread; overload;
    {class} function init(start: DNThreadStart; maxStackSize: Int32): DNThread; overload;
    {class} function init(start: DNParameterizedThreadStart): DNThread; overload;
    {class} function init(start: DNParameterizedThreadStart; maxStackSize: Int32): DNThread; overload;

  { static methods } 

    {class} procedure ResetAbort;
    {class} procedure Sleep(millisecondsTimeout: Int32); overload;
    {class} procedure Sleep(timeout: DNTimeSpan); overload;
    {class} procedure SpinWait(iterations: Int32);
    {class} function Yield: Boolean;
    {class} function AllocateDataSlot: DNLocalDataStoreSlot;
    {class} function AllocateNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} function GetNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} procedure FreeNamedDataSlot(name: string);
    {class} function GetData(slot: DNLocalDataStoreSlot): DNObject;
    {class} procedure SetData(slot: DNLocalDataStoreSlot; data: DNObject);
    {class} function GetDomain: DNAppDomain;
    {class} function GetDomainID: Int32;
    {class} function VolatileRead(out address: Byte): Byte; overload;
    {class} function VolatileRead(out address: Int16): Int16; overload;
    {class} function VolatileRead(out address: Int32): Int32; overload;
    {class} function VolatileRead(out address: Int64): Int64; overload;
    {class} function VolatileRead(out address: SByte): SByte; overload;
    {class} function VolatileRead(out address: UInt16): UInt16; overload;
    {class} function VolatileRead(out address: UInt32): UInt32; overload;
    {class} function VolatileRead(out address: IntPtr): IntPtr; overload;
    {class} function VolatileRead(out address: UIntPtr): UIntPtr; overload;
    {class} function VolatileRead(out address: UInt64): UInt64; overload;
    {class} function VolatileRead(out address: Single): Single; overload;
    {class} function VolatileRead(out address: Double): Double; overload;
    {class} function VolatileRead(out address: DNObject): DNObject; overload;
    {class} procedure VolatileWrite(out address: Byte; value: Byte); overload;
    {class} procedure VolatileWrite(out address: Int16; value: Int16); overload;
    {class} procedure VolatileWrite(out address: Int32; value: Int32); overload;
    {class} procedure VolatileWrite(out address: Int64; value: Int64); overload;
    {class} procedure VolatileWrite(out address: SByte; value: SByte); overload;
    {class} procedure VolatileWrite(out address: UInt16; value: UInt16); overload;
    {class} procedure VolatileWrite(out address: UInt32; value: UInt32); overload;
    {class} procedure VolatileWrite(out address: IntPtr; value: IntPtr); overload;
    {class} procedure VolatileWrite(out address: UIntPtr; value: UIntPtr); overload;
    {class} procedure VolatileWrite(out address: UInt64; value: UInt64); overload;
    {class} procedure VolatileWrite(out address: Single; value: Single); overload;
    {class} procedure VolatileWrite(out address: Double; value: Double); overload;
    {class} procedure VolatileWrite(out address: DNObject; value: DNObject); overload;
    {class} procedure MemoryBarrier;
    {class} procedure BeginCriticalRegion;
    {class} procedure EndCriticalRegion;
    {class} procedure BeginThreadAffinity;
    {class} procedure EndThreadAffinity;

  { static propertys } 

    {class} property CurrentThread: DNThread read get_CurrentThread;
    {class} property CurrentContext: DNContext read get_CurrentContext;
    {class} property CurrentPrincipal: DNIPrincipal read get_CurrentPrincipal write set_CurrentPrincipal;
  end;

  [DNTypeName('System.Threading.Thread')]
  DNThread = interface(DNCriticalFinalizerObject)
  ['{A5889AAD-36A6-3B3E-89F9-118CE3A77D7C}']
  { getters & setters } 

    function get_ManagedThreadId: Int32;
    function get_ExecutionContext: DNExecutionContext;
    function get_Priority: DNThreadPriority;
    procedure set_Priority(value: DNThreadPriority);
    function get_IsAlive: Boolean;
    function get_IsThreadPoolThread: Boolean;
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);
    function get_ThreadState: DNThreadState;
    function get_ApartmentState: DNApartmentState;
    procedure set_ApartmentState(value: DNApartmentState);
    function get_CurrentUICulture: DNCultureInfo;
    procedure set_CurrentUICulture(value: DNCultureInfo);
    function get_CurrentCulture: DNCultureInfo;
    procedure set_CurrentCulture(value: DNCultureInfo);
    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    function GetHashCode: Int32;
    procedure Start; overload;
    procedure Start(parameter: DNObject); overload;
    procedure SetCompressedStack(stack: DNCompressedStack);
    function GetCompressedStack: DNCompressedStack;
    procedure &Abort(stateInfo: DNObject); overload;
    procedure &Abort; overload;
    procedure Suspend;
    procedure Resume;
    procedure Interrupt;
    procedure Join; overload;
    function Join(millisecondsTimeout: Int32): Boolean; overload;
    function Join(timeout: DNTimeSpan): Boolean; overload;
    function GetApartmentState: DNApartmentState;
    function TrySetApartmentState(state: DNApartmentState): Boolean;
    procedure SetApartmentState(state: DNApartmentState);
    procedure DisableComObjectEagerCleanup;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ManagedThreadId: Int32 read get_ManagedThreadId;
    property ExecutionContext: DNExecutionContext read get_ExecutionContext;
    property Priority: DNThreadPriority read get_Priority write set_Priority;
    property IsAlive: Boolean read get_IsAlive;
    property IsThreadPoolThread: Boolean read get_IsThreadPoolThread;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
    property ThreadState: DNThreadState read get_ThreadState;
    property ApartmentState: DNApartmentState read get_ApartmentState write set_ApartmentState;
    property CurrentUICulture: DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
    property CurrentCulture: DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    property Name: string read get_Name write set_Name;
  end;

  TDNThread = class(TDNGenericImport<DNThreadClass, DNThread>) end;

  //-------------namespace: System.Runtime.DesignerServices----------------
  DNWindowsRuntimeDesignerContextClass = interface(DNObjectClass)
  ['{603B3082-0C5C-5921-A9D1-FFC07CD5ACA1}']
  { constructors } 

    {class} function init(paths: DNIEnumerable<string>; name: string): DNWindowsRuntimeDesignerContext;

  { static methods } 

    {class} procedure InitializeSharedContext(paths: DNIEnumerable<string>);
    {class} procedure SetIterationContext(context: DNWindowsRuntimeDesignerContext);

  end;

  [DNTypeName('System.Runtime.DesignerServices.WindowsRuntimeDesignerContext')]
  DNWindowsRuntimeDesignerContext = interface(DNObject)
  ['{DB28027F-1254-3C59-9802-58582354195D}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function GetAssembly(assemblyName: string): DNAssembly;
    function GetType(typeName: string): DNType; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType; overload;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
  end;

  TDNWindowsRuntimeDesignerContext = class(TDNGenericImport<DNWindowsRuntimeDesignerContextClass, DNWindowsRuntimeDesignerContext>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNExceptionDispatchInfoClass = interface(DNObjectClass)
  ['{7BFD1A7E-0645-56F4-A66D-F1DE2C2C4524}']
  { static methods } 

    {class} function Capture(source: DNException): DNExceptionDispatchInfo;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.ExceptionDispatchInfo')]
  DNExceptionDispatchInfo = interface(DNObject)
  ['{8FBEDF7E-6A74-3EE1-BEEE-F345048CC1B6}']
  { getters & setters } 

    function get_SourceException: DNException;

  { methods } 

    procedure Throw;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SourceException: DNException read get_SourceException;
  end;

  TDNExceptionDispatchInfo = class(TDNGenericImport<DNExceptionDispatchInfoClass, DNExceptionDispatchInfo>) end;

  //-------------namespace: System.Runtime----------------
  DNGCSettingsClass = interface(DNObjectClass)
  ['{3A4C6F44-4D82-500C-9F6C-43667A424968}']
  { static getter & setter } 

    {class} function get_LatencyMode: DNGCLatencyMode;
    {class} procedure set_LatencyMode(value: DNGCLatencyMode);
    {class} function get_LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode;
    {class} procedure set_LargeObjectHeapCompactionMode(value: DNGCLargeObjectHeapCompactionMode);
    {class} function get_IsServerGC: Boolean;

  { static propertys } 

    {class} property LatencyMode: DNGCLatencyMode read get_LatencyMode write set_LatencyMode;
    {class} property LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode read get_LargeObjectHeapCompactionMode write set_LargeObjectHeapCompactionMode;
    {class} property IsServerGC: Boolean read get_IsServerGC;
  end;

  [DNTypeName('System.Runtime.GCSettings')]
  DNGCSettings = interface(DNObject)
  ['{26364C56-899E-3A81-9883-9D4DAED04582}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGCSettings = class(TDNGenericImport<DNGCSettingsClass, DNGCSettings>) end;

  //-------------namespace: System.Runtime.Hosting----------------
  DNApplicationActivatorClass = interface(DNObjectClass)
  ['{CB30AF56-42D7-5FA7-9834-88809F3365D3}']
  { constructors } 

    {class} function init: DNApplicationActivator;

  end;

  [DNTypeName('System.Runtime.Hosting.ApplicationActivator')]
  DNApplicationActivator = interface(DNObject)
  ['{1D09B407-A97F-378A-ACCB-82CA0082F9F3}']
  { methods } 

    function CreateInstance(activationContext: DNActivationContext): DNObjectHandle; overload;
    function CreateInstance(activationContext: DNActivationContext; activationCustomData: TArray<string>): DNObjectHandle; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNApplicationActivator = class(TDNGenericImport<DNApplicationActivatorClass, DNApplicationActivator>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBStrWrapperClass = interface(DNObjectClass)
  ['{F27F07CD-98D5-5B02-A8CB-B1DBF6BB473A}']
  { constructors } 

    {class} function init(value: string): DNBStrWrapper; overload;
    {class} function init(value: DNObject): DNBStrWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.BStrWrapper')]
  DNBStrWrapper = interface(DNObject)
  ['{E5DE21F2-12D7-3604-8251-1C5DBC64CA66}']
  { getters & setters } 

    function get_WrappedObject: string;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WrappedObject: string read get_WrappedObject;
  end;

  TDNBStrWrapper = class(TDNGenericImport<DNBStrWrapperClass, DNBStrWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComEventsHelperClass = interface(DNObjectClass)
  ['{46E870E5-45E0-50FC-B5B1-1C79118DA5F0}']
  { static methods } 

    {class} procedure Combine(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate);
    {class} function Remove(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate): DNDelegate;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComEventsHelper')]
  DNComEventsHelper = interface(DNObject)
  ['{DAE18F9E-4E95-303E-A3CB-B2D69FB9825D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNComEventsHelper = class(TDNGenericImport<DNComEventsHelperClass, DNComEventsHelper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCurrencyWrapperClass = interface(DNObjectClass)
  ['{CD8F5117-854C-5A36-8DB3-FEDBD403D9CC}']
  { constructors } 

    {class} function init(obj: DNDecimal): DNCurrencyWrapper; overload;
    {class} function init(obj: DNObject): DNCurrencyWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.CurrencyWrapper')]
  DNCurrencyWrapper = interface(DNObject)
  ['{D540A482-8FB8-3720-B52E-08C7A2C1B9DF}']
  { getters & setters } 

    function get_WrappedObject: DNDecimal;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WrappedObject: DNDecimal read get_WrappedObject;
  end;

  TDNCurrencyWrapper = class(TDNGenericImport<DNCurrencyWrapperClass, DNCurrencyWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispatchWrapperClass = interface(DNObjectClass)
  ['{4BFB3335-3D1A-53B6-914A-8631C47C6E39}']
  { constructors } 

    {class} function init(obj: DNObject): DNDispatchWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.DispatchWrapper')]
  DNDispatchWrapper = interface(DNObject)
  ['{DA7109D3-BCD8-3D4C-B172-DFC2E585562A}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNDispatchWrapper = class(TDNGenericImport<DNDispatchWrapperClass, DNDispatchWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNErrorWrapperClass = interface(DNObjectClass)
  ['{30B36020-28BE-5DE1-BFE5-4097F3D7AB41}']
  { constructors } 

    {class} function init(errorCode: Int32): DNErrorWrapper; overload;
    {class} function init(errorCode: DNObject): DNErrorWrapper; overload;
    {class} function init(e: DNException): DNErrorWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ErrorWrapper')]
  DNErrorWrapper = interface(DNObject)
  ['{D7900EBD-FF28-3AE6-B517-7E32714F578B}']
  { getters & setters } 

    function get_ErrorCode: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
  end;

  TDNErrorWrapper = class(TDNGenericImport<DNErrorWrapperClass, DNErrorWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNExtensibleClassFactoryClass = interface(DNObjectClass)
  ['{2633FAA2-44F0-570E-88E4-E600D325654B}']
  { static methods } 

    {class} procedure RegisterObjectCreationCallback(callback: DNObjectCreationDelegate);

  end;

  [DNTypeName('System.Runtime.InteropServices.ExtensibleClassFactory')]
  DNExtensibleClassFactory = interface(DNObject)
  ['{58734403-8382-3110-B729-14C7855982F9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNExtensibleClassFactory = class(TDNGenericImport<DNExtensibleClassFactoryClass, DNExtensibleClassFactory>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalClass = interface(DNObjectClass)
  ['{E6B64443-E463-55E0-8482-64B020506D49}']
  { static fields getter & setter } 

   function __fakeFieldGet_SystemDefaultCharSize: Int32;
   function __fakeFieldGet_SystemMaxDBCSCharSize: Int32;

  { static fields } 

    {class} property SystemDefaultCharSize: Int32 read __fakeFieldGet_SystemDefaultCharSize;
    {class} property SystemMaxDBCSCharSize: Int32 read __fakeFieldGet_SystemMaxDBCSCharSize;

  { static methods } 

    {class} function PtrToStringAnsi(ptr: IntPtr): string; overload;
    {class} function PtrToStringAnsi(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringUni(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringAuto(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringUni(ptr: IntPtr): string; overload;
    {class} function PtrToStringAuto(ptr: IntPtr): string; overload;
    {class} function SizeOf(structure: DNObject): Int32; overload;
    {class} function SizeOf(t: DNType): Int32; overload;
    {class} function OffsetOf(t: DNType; fieldName: string): IntPtr; overload;
    {class} procedure Copy(source: TArray<Int32>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Char>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Int16>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Int64>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Single>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Double>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Byte>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<IntPtr>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int32>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Char>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int16>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int64>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Single>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Double>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Byte>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<IntPtr>; startIndex: Int32; length: Int32); overload;
    {class} function ReadByte(ptr: IntPtr; ofs: Int32): Byte; overload;
    {class} function ReadByte(ptr: IntPtr): Byte; overload;
    {class} function ReadInt16(ptr: IntPtr; ofs: Int32): Int16; overload;
    {class} function ReadInt16(ptr: IntPtr): Int16; overload;
    {class} function ReadInt32(ptr: IntPtr; ofs: Int32): Int32; overload;
    {class} function ReadInt32(ptr: IntPtr): Int32; overload;
    {class} function ReadIntPtr([in]ptr: DNObject; ofs: Int32): IntPtr; overload;
    {class} function ReadIntPtr(ptr: IntPtr; ofs: Int32): IntPtr; overload;
    {class} function ReadIntPtr(ptr: IntPtr): IntPtr; overload;
    {class} function ReadInt64(ptr: IntPtr; ofs: Int32): Int64; overload;
    {class} function ReadInt64(ptr: IntPtr): Int64; overload;
    {class} procedure WriteByte(ptr: IntPtr; ofs: Int32; val: Byte); overload;
    {class} procedure WriteByte(ptr: IntPtr; val: Byte); overload;
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Int16); overload;
    {class} procedure WriteInt16(ptr: IntPtr; val: Int16); overload;
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Char); overload;
    {class} procedure WriteInt16([in][out]ptr: DNObject; ofs: Int32; val: Char); overload;
    {class} procedure WriteInt16(ptr: IntPtr; val: Char); overload;
    {class} procedure WriteInt32(ptr: IntPtr; ofs: Int32; val: Int32); overload;
    {class} procedure WriteInt32(ptr: IntPtr; val: Int32); overload;
    {class} procedure WriteIntPtr(ptr: IntPtr; ofs: Int32; val: IntPtr); overload;
    {class} procedure WriteIntPtr([in][out]ptr: DNObject; ofs: Int32; val: IntPtr); overload;
    {class} procedure WriteIntPtr(ptr: IntPtr; val: IntPtr); overload;
    {class} procedure WriteInt64(ptr: IntPtr; ofs: Int32; val: Int64); overload;
    {class} procedure WriteInt64(ptr: IntPtr; val: Int64); overload;
    {class} function GetHRForLastWin32Error: Int32;
    {class} procedure Prelink(m: DNMethodInfo);
    {class} procedure PrelinkAll(c: DNType);
    {class} function NumParamBytes(m: DNMethodInfo): Int32;
    {class} procedure PtrToStructure(ptr: IntPtr; structure: DNObject); overload;
    {class} function PtrToStructure(ptr: IntPtr; structureType: DNType): DNObject; overload;
    {class} function GetHINSTANCE(m: DNModule): IntPtr;
    {class} procedure ThrowExceptionForHR(errorCode: Int32); overload;
    {class} procedure ThrowExceptionForHR(errorCode: Int32; errorInfo: IntPtr); overload;
    {class} function GetExceptionForHR(errorCode: Int32): DNException; overload;
    {class} function GetExceptionForHR(errorCode: Int32; errorInfo: IntPtr): DNException; overload;
    {class} function GetThreadFromFiberCookie(cookie: Int32): DNThread;
    {class} function AllocHGlobal(cb: IntPtr): IntPtr; overload;
    {class} function AllocHGlobal(cb: Int32): IntPtr; overload;
    {class} procedure FreeHGlobal(hglobal: IntPtr);
    {class} function ReAllocHGlobal(pv: IntPtr; cb: IntPtr): IntPtr;
    {class} function StringToHGlobalAnsi(s: string): IntPtr;
    {class} function StringToHGlobalUni(s: string): IntPtr;
    {class} function StringToHGlobalAuto(s: string): IntPtr;
    {class} function GetTypeLibName(pTLB: DNUCOMITypeLib): string; overload;
    {class} function GetTypeLibName(typelib: DNITypeLib): string; overload;
    {class} function GetTypeLibGuid(pTLB: DNUCOMITypeLib): DNGuid; overload;
    {class} function GetTypeLibGuid(typelib: DNITypeLib): DNGuid; overload;
    {class} function GetTypeLibLcid(pTLB: DNUCOMITypeLib): Int32; overload;
    {class} function GetTypeLibGuidForAssembly(&asm: DNAssembly): DNGuid;
    {class} procedure GetTypeLibVersionForAssembly(inputAssembly: DNAssembly; out majorVersion: Int32; out minorVersion: Int32);
    {class} function GetTypeInfoName(pTI: DNUCOMITypeInfo): string; overload;
    {class} function GetTypeInfoName(typeInfo: DNITypeInfo): string; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType;
    {class} function GetIUnknownForObject(o: DNObject): IntPtr;
    {class} function GetIUnknownForObjectInContext(o: DNObject): IntPtr;
    {class} function GetIDispatchForObject(o: DNObject): IntPtr;
    {class} function GetIDispatchForObjectInContext(o: DNObject): IntPtr;
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType): IntPtr; overload;
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType; mode: DNCustomQueryInterfaceMode): IntPtr; overload;
    {class} function GetComInterfaceForObjectInContext(o: DNObject; t: DNType): IntPtr;
    {class} function AllocCoTaskMem(cb: Int32): IntPtr;
    {class} function StringToCoTaskMemUni(s: string): IntPtr;
    {class} function StringToCoTaskMemAuto(s: string): IntPtr;
    {class} function StringToCoTaskMemAnsi(s: string): IntPtr;
    {class} procedure FreeCoTaskMem(ptr: IntPtr);
    {class} function ReAllocCoTaskMem(pv: IntPtr; cb: Int32): IntPtr;
    {class} function ReleaseComObject(o: DNObject): Int32;
    {class} function FinalReleaseComObject(o: DNObject): Int32;
    {class} function GetComObjectData(obj: DNObject; key: DNObject): DNObject;
    {class} function SetComObjectData(obj: DNObject; key: DNObject; data: DNObject): Boolean;
    {class} function CreateWrapperOfType(o: DNObject; t: DNType): DNObject; overload;
    {class} procedure ReleaseThreadCache;
    {class} procedure FreeBSTR(ptr: IntPtr);
    {class} function StringToBSTR(s: string): IntPtr;
    {class} function PtrToStringBSTR(ptr: IntPtr): string;
    {class} function GetComSlotForMethodInfo(m: DNMemberInfo): Int32;
    {class} function GenerateGuidForType(&type: DNType): DNGuid;
    {class} function GenerateProgIdForType(&type: DNType): string;
    {class} function BindToMoniker(monikerName: string): DNObject;
    {class} function GetActiveObject(progID: string): DNObject;
    {class} function GetDelegateForFunctionPointer(ptr: IntPtr; t: DNType): DNDelegate; overload;
    {class} function GetFunctionPointerForDelegate(d: DNDelegate): IntPtr; overload;
    {class} function SecureStringToBSTR(s: DNSecureString): IntPtr;
    {class} function SecureStringToCoTaskMemAnsi(s: DNSecureString): IntPtr;
    {class} function SecureStringToCoTaskMemUnicode(s: DNSecureString): IntPtr;
    {class} procedure ZeroFreeBSTR(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemAnsi(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemUnicode(s: IntPtr);
    {class} function SecureStringToGlobalAllocAnsi(s: DNSecureString): IntPtr;
    {class} function SecureStringToGlobalAllocUnicode(s: DNSecureString): IntPtr;
    {class} procedure ZeroFreeGlobalAllocAnsi(s: IntPtr);
    {class} procedure ZeroFreeGlobalAllocUnicode(s: IntPtr);
    {class} function ReadByte([in]ptr: DNObject; ofs: Int32): Byte; overload;
    {class} function ReadInt16([in]ptr: DNObject; ofs: Int32): Int16; overload;
    {class} function ReadInt32([in]ptr: DNObject; ofs: Int32): Int32; overload;
    {class} function ReadInt64([in]ptr: DNObject; ofs: Int32): Int64; overload;
    {class} procedure WriteByte([in][out]ptr: DNObject; ofs: Int32; val: Byte); overload;
    {class} procedure WriteInt16([in][out]ptr: DNObject; ofs: Int32; val: Int16); overload;
    {class} procedure WriteInt32([in][out]ptr: DNObject; ofs: Int32; val: Int32); overload;
    {class} procedure WriteInt64([in][out]ptr: DNObject; ofs: Int32; val: Int64); overload;
    {class} function GetExceptionPointers: IntPtr;
    {class} function GetExceptionCode: Int32;
    {class} function GetHRForException(e: DNException): Int32;
    {class} function GetUnmanagedThunkForManagedMethodPtr(pfnMethodToWrap: IntPtr; pbSignature: IntPtr; cbSignature: Int32): IntPtr;
    {class} function GetManagedThunkForUnmanagedMethodPtr(pfnMethodToWrap: IntPtr; pbSignature: IntPtr; cbSignature: Int32): IntPtr;
    {class} function GetTypeLibLcid(typelib: DNITypeLib): Int32; overload;
    {class} function GetTypeForITypeInfo(piTypeInfo: IntPtr): DNType;
    {class} function GetITypeInfoForType(t: DNType): IntPtr;
    {class} function GetUniqueObjectForIUnknown(unknown: IntPtr): DNObject;
    {class} function GetTypedObjectForIUnknown(pUnk: IntPtr; t: DNType): DNObject;
    {class} function CreateAggregatedObject(pOuter: IntPtr; o: DNObject): IntPtr; overload;
    {class} procedure CleanupUnusedObjectsInCurrentContext;
    {class} function AreComObjectsAvailableForCleanup: Boolean;
    {class} function IsTypeVisibleFromCom(t: DNType): Boolean;
    {class} function AddRef(pUnk: IntPtr): Int32;
    {class} procedure GetNativeVariantForObject(obj: DNObject; pDstNativeVariant: IntPtr); overload;
    {class} function GetObjectForNativeVariant(pSrcNativeVariant: IntPtr): DNObject;
    {class} function GetObjectsForNativeVariants(aSrcNativeVariant: IntPtr; cVars: Int32): TArray<DNObject>;
    {class} function GetStartComSlot(t: DNType): Int32;
    {class} function GetEndComSlot(t: DNType): Int32;
    {class} function GetMethodInfoForComSlot(t: DNType; slot: Int32; out memberType: DNComMemberType): DNMemberInfo;
    {class} procedure ChangeWrapperHandleStrength(otp: DNObject; fIsWeak: Boolean);
    {class} function UnsafeAddrOfPinnedArrayElement(arr: DNArray; index: Int32): IntPtr; overload;
    {class} function GetLastWin32Error: Int32;
    {class} procedure StructureToPtr(structure: DNObject; ptr: IntPtr; fDeleteOld: Boolean); overload;
    {class} procedure DestroyStructure(ptr: IntPtr; structuretype: DNType); overload;
    {class} function GetObjectForIUnknown(pUnk: IntPtr): DNObject;
    {class} function IsComObject(o: DNObject): Boolean;
    {class} function QueryInterface(pUnk: IntPtr; out iid: DNGuid; out ppv: IntPtr): Int32;
    {class} function Release(pUnk: IntPtr): Int32;

  end;

  [DNTypeName('System.Runtime.InteropServices.Marshal')]
  DNMarshal = interface(DNObject)
  ['{F6B3BABB-CE60-38B7-9822-6C65F003A73C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMarshal = class(TDNGenericImport<DNMarshalClass, DNMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNRegistrationServicesClass = interface(DNObjectClass)
  ['{9D104DA2-E4BD-5557-B423-00A2042916F7}']
  { constructors } 

    {class} function init: DNRegistrationServices;

  end;

  [DNTypeName('System.Runtime.InteropServices.RegistrationServices')]
  DNRegistrationServices = interface(DNIRegistrationServices)
  ['{475E398F-8AFA-43A7-A3BE-F4EF8D6787C9}']
  { methods } 

    function RegisterAssembly(assembly: DNAssembly; flags: DNAssemblyRegistrationFlags): Boolean;
    function UnregisterAssembly(assembly: DNAssembly): Boolean;
    function GetRegistrableTypesInAssembly(assembly: DNAssembly): TArray<DNType>;
    function GetProgIdForType(&type: DNType): string;
    procedure RegisterTypeForComClients(&type: DNType; out g: DNGuid); overload;
    function GetManagedCategoryGuid: DNGuid;
    function TypeRequiresRegistration(&type: DNType): Boolean;
    function TypeRepresentsComType(&type: DNType): Boolean;
    function RegisterTypeForComClients(&type: DNType; classContext: DNRegistrationClassContext; flags: DNRegistrationConnectionType): Int32; overload;
    procedure UnregisterTypeForComClients(cookie: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRegistrationServices = class(TDNGenericImport<DNRegistrationServicesClass, DNRegistrationServices>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNRuntimeEnvironmentClass = interface(DNObjectClass)
  ['{BFEFE55A-6210-571C-9307-DA52A7A75EEF}']
  { static getter & setter } 

    {class} function get_SystemConfigurationFile: string;

  { constructors } 

    {class} function init: DNRuntimeEnvironment;

  { static methods } 

    {class} function GetSystemVersion: string;
    {class} function GetRuntimeDirectory: string;
    {class} function FromGlobalAccessCache(a: DNAssembly): Boolean;
    {class} function GetRuntimeInterfaceAsIntPtr(clsid: DNGuid; riid: DNGuid): IntPtr;
    {class} function GetRuntimeInterfaceAsObject(clsid: DNGuid; riid: DNGuid): DNObject;

  { static propertys } 

    {class} property SystemConfigurationFile: string read get_SystemConfigurationFile;
  end;

  [DNTypeName('System.Runtime.InteropServices.RuntimeEnvironment')]
  DNRuntimeEnvironment = interface(DNObject)
  ['{78D22140-40CF-303E-BE96-B3AC0407A34D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeEnvironment = class(TDNGenericImport<DNRuntimeEnvironmentClass, DNRuntimeEnvironment>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNRuntimeInformationClass = interface(DNObjectClass)
  ['{CED0F9C6-8124-5878-ACEC-4B9B5627C4F1}']
  { static getter & setter } 

    {class} function get_FrameworkDescription: string;
    {class} function get_OSDescription: string;
    {class} function get_OSArchitecture: DNArchitecture;
    {class} function get_ProcessArchitecture: DNArchitecture;

  { static methods } 

    {class} function IsOSPlatform(osPlatform: DNOSPlatform): Boolean;

  { static propertys } 

    {class} property FrameworkDescription: string read get_FrameworkDescription;
    {class} property OSDescription: string read get_OSDescription;
    {class} property OSArchitecture: DNArchitecture read get_OSArchitecture;
    {class} property ProcessArchitecture: DNArchitecture read get_ProcessArchitecture;
  end;

  [DNTypeName('System.Runtime.InteropServices.RuntimeInformation')]
  DNRuntimeInformation = interface(DNObject)
  ['{6C251E52-D18D-385D-A475-F3A45FE0BD92}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRuntimeInformation = class(TDNGenericImport<DNRuntimeInformationClass, DNRuntimeInformation>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeLibConverterClass = interface(DNObjectClass)
  ['{9F839C11-9F58-5394-A125-B53CBAFB74B7}']
  { constructors } 

    {class} function init: DNTypeLibConverter;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeLibConverter')]
  DNTypeLibConverter = interface(DNITypeLibConverter)
  ['{F1C3BF79-C3E4-11D3-88E7-00902754C43A}']
  { methods } 

    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: Int32; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; unsafeInterfaces: Boolean): DNAssemblyBuilder; overload;
    function ConvertAssemblyToTypeLib(assembly: DNAssembly; strTypeLibName: string; flags: DNTypeLibExporterFlags; notifySink: DNITypeLibExporterNotifySink): DNObject;
    function ConvertTypeLibToAssembly(typeLib: DNObject; asmFileName: string; flags: DNTypeLibImporterFlags; notifySink: DNITypeLibImporterNotifySink; publicKey: TArray<Byte>; keyPair: DNStrongNameKeyPair; asmNamespace: string; asmVersion: DNVersion): DNAssemblyBuilder; overload;
    function GetPrimaryInteropAssembly(g: DNGuid; major: Int32; minor: Int32; lcid: Int32; out asmName: string; out asmCodeBase: string): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTypeLibConverter = class(TDNGenericImport<DNTypeLibConverterClass, DNTypeLibConverter>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnknownWrapperClass = interface(DNObjectClass)
  ['{801261F6-F255-5F72-A09A-378F5524C1B2}']
  { constructors } 

    {class} function init(obj: DNObject): DNUnknownWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.UnknownWrapper')]
  DNUnknownWrapper = interface(DNObject)
  ['{887D4D94-31D1-37F3-9938-643ED2A46155}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNUnknownWrapper = class(TDNGenericImport<DNUnknownWrapperClass, DNUnknownWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNVariantWrapperClass = interface(DNObjectClass)
  ['{1B678E36-A2BB-5510-AD65-8DB61F2946B2}']
  { constructors } 

    {class} function init(obj: DNObject): DNVariantWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.VariantWrapper')]
  DNVariantWrapper = interface(DNObject)
  ['{6B38F062-216A-34D5-B383-BAF846E678A6}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNVariantWrapper = class(TDNGenericImport<DNVariantWrapperClass, DNVariantWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNEventRegistrationTokenTableClass<T> = interface(DNObjectClass)
  ['{C43C0DBE-2E32-5B05-9B72-8BD8F1D9F6DE}']
  { constructors } 

    {class} function init: DNEventRegistrationTokenTable<T>;

  { static methods } 

    {class} function GetOrCreateEventRegistrationTokenTable(out refEventTable: DNEventRegistrationTokenTable<T>): DNEventRegistrationTokenTable<T>;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1')]
  DNEventRegistrationTokenTable<T> = interface(DNObject)
  ['{985219F7-E1E6-3244-BF18-C96EB7992535}']
  { getters & setters } 

    function get_InvocationList: T;
    procedure set_InvocationList(value: T);

  { methods } 

    function AddEventHandler(handler: T): DNEventRegistrationToken;
    procedure RemoveEventHandler(token: DNEventRegistrationToken); overload;
    procedure RemoveEventHandler(handler: T); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property InvocationList: T read get_InvocationList write set_InvocationList;
  end;

  TDNEventRegistrationTokenTable<T> = class(TDNGenericImport<DNEventRegistrationTokenTableClass<T>, DNEventRegistrationTokenTable<T>>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWindowsRuntimeMarshalClass = interface(DNObjectClass)
  ['{7EAFEC36-83D9-5871-80AA-4573FE6ABE4B}']
  { static methods } 

    {class} procedure RemoveAllEventHandlers(removeMethod: DNAction<DNEventRegistrationToken>);
    {class} function GetActivationFactory(&type: DNType): DNIActivationFactory;
    {class} function StringToHString(s: string): IntPtr;
    {class} function PtrToStringHString(ptr: IntPtr): string;
    {class} procedure FreeHString(ptr: IntPtr);

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal')]
  DNWindowsRuntimeMarshal = interface(DNObject)
  ['{28CD5A59-703C-302E-B718-79CDE0EC25C5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWindowsRuntimeMarshal = class(TDNGenericImport<DNWindowsRuntimeMarshalClass, DNWindowsRuntimeMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWindowsRuntimeMetadataClass = interface(DNObjectClass)
  ['{C14C9C54-6E74-5BB1-B8FD-5299CD46EA3A}']
  { static methods } 

    {class} function ResolveNamespace(namespaceName: string; packageGraphFilePaths: DNIEnumerable<string>): DNIEnumerable<string>; overload;
    {class} function ResolveNamespace(namespaceName: string; windowsSdkFilePath: string; packageGraphFilePaths: DNIEnumerable<string>): DNIEnumerable<string>; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMetadata')]
  DNWindowsRuntimeMetadata = interface(DNObject)
  ['{B859A81F-6285-3102-9EEF-0BB18B7D6502}']
  { events } 

    {class} procedure add_ReflectionOnlyNamespaceResolve(value: DNEventHandler<DNNamespaceResolveEventArgs>);
    {class} procedure remove_ReflectionOnlyNamespaceResolve(value: DNEventHandler<DNNamespaceResolveEventArgs>);
    {class} procedure add_DesignerNamespaceResolve(value: DNEventHandler<DNDesignerNamespaceResolveEventArgs>);
    {class} procedure remove_DesignerNamespaceResolve(value: DNEventHandler<DNDesignerNamespaceResolveEventArgs>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWindowsRuntimeMetadata = class(TDNGenericImport<DNWindowsRuntimeMetadataClass, DNWindowsRuntimeMetadata>) end;

  //-------------namespace: System.Runtime----------------
  DNProfileOptimizationClass = interface(DNObjectClass)
  ['{FD77BDE8-79BD-513B-9451-88BDBF764A60}']
  { static methods } 

    {class} procedure SetProfileRoot(directoryPath: string);
    {class} procedure StartProfile(profile: string);

  end;

  [DNTypeName('System.Runtime.ProfileOptimization')]
  DNProfileOptimization = interface(DNObject)
  ['{B086FC3D-26D3-39BC-AB6D-04EF5C7468AD}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNProfileOptimization = class(TDNGenericImport<DNProfileOptimizationClass, DNProfileOptimization>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNBaseChannelObjectWithPropertiesClass = interface(DNObjectClass)
  ['{5E7B44A5-26F0-59A9-89FD-84A6E325B8FC}']
  end;

  [DNTypeName('System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties')]
  DNBaseChannelObjectWithProperties = interface(DNIDictionary)
  ['{F369A73E-78D8-3BCC-AE36-522D116E19F9}']
  { getters & setters } 

    function get_Properties: DNIDictionary;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    procedure Remove(key: DNObject);
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure CopyTo(&array: DNArray; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Properties: DNIDictionary read get_Properties;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBaseChannelObjectWithProperties = class(TDNGenericImport<DNBaseChannelObjectWithPropertiesClass, DNBaseChannelObjectWithProperties>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNBaseChannelSinkWithPropertiesClass = interface(DNBaseChannelObjectWithPropertiesClass)
  ['{8842EA55-1ECD-5CE4-8A6F-03F153DEE105}']
  end;

  [DNTypeName('System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties')]
  DNBaseChannelSinkWithProperties = interface(DNBaseChannelObjectWithProperties)
  ['{0E9EB6E5-D899-3132-90C5-7376970C4FB5}']
  { getters & setters } 

    function get_Properties: DNIDictionary;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    procedure Remove(key: DNObject);
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure CopyTo(&array: DNArray; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Properties: DNIDictionary read get_Properties;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBaseChannelSinkWithProperties = class(TDNGenericImport<DNBaseChannelSinkWithPropertiesClass, DNBaseChannelSinkWithProperties>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNBaseChannelWithPropertiesClass = interface(DNBaseChannelObjectWithPropertiesClass)
  ['{FC383BF7-5140-5B40-94C6-92044E2FA49B}']
  end;

  [DNTypeName('System.Runtime.Remoting.Channels.BaseChannelWithProperties')]
  DNBaseChannelWithProperties = interface(DNBaseChannelObjectWithProperties)
  ['{22282340-9E30-3591-BD1E-6571930E8582}']
  { getters & setters } 

    function get_Properties: DNIDictionary;
    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    procedure Remove(key: DNObject);
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure CopyTo(&array: DNArray; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Properties: DNIDictionary read get_Properties;
    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNBaseChannelWithProperties = class(TDNGenericImport<DNBaseChannelWithPropertiesClass, DNBaseChannelWithProperties>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNChannelDataStoreClass = interface(DNObjectClass)
  ['{0112D451-99DB-5B58-9B30-2895A8379D1F}']
  { constructors } 

    {class} function init(channelURIs: TArray<string>): DNChannelDataStore;

  end;

  [DNTypeName('System.Runtime.Remoting.Channels.ChannelDataStore')]
  DNChannelDataStore = interface(DNIChannelDataStore)
  ['{F3E38CEA-40E4-33C1-9DF7-BD103BE2D68B}']
  { getters & setters } 

    function get_ChannelUris: TArray<string>;
    procedure set_ChannelUris(value: TArray<string>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ChannelUris: TArray<string> read get_ChannelUris write set_ChannelUris;
  end;

  TDNChannelDataStore = class(TDNGenericImport<DNChannelDataStoreClass, DNChannelDataStore>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNChannelServicesClass = interface(DNObjectClass)
  ['{416177AD-4A0D-5D6D-98C0-41353C81FBB7}']
  { static getter & setter } 

    {class} function get_RegisteredChannels: TArray<DNIChannel>;

  { static methods } 

    {class} procedure RegisterChannel(chnl: DNIChannel; ensureSecurity: Boolean); overload;
    {class} procedure RegisterChannel(chnl: DNIChannel); overload;
    {class} function GetChannel(name: string): DNIChannel;
    {class} function GetUrlsForObject(obj: DNMarshalByRefObject): TArray<string>;
    {class} function GetChannelSinkProperties(obj: DNObject): DNIDictionary;
    {class} function DispatchMessage(sinkStack: DNIServerChannelSinkStack; msg: DNIMessage; out replyMsg: DNIMessage): DNServerProcessing;
    {class} function SyncDispatchMessage(msg: DNIMessage): DNIMessage;
    {class} function AsyncDispatchMessage(msg: DNIMessage; replySink: DNIMessageSink): DNIMessageCtrl;
    {class} function CreateServerChannelSinkChain(provider: DNIServerChannelSinkProvider; channel: DNIChannelReceiver): DNIServerChannelSink;
    {class} procedure UnregisterChannel(chnl: DNIChannel);

  { static propertys } 

    {class} property RegisteredChannels: TArray<DNIChannel> read get_RegisteredChannels;
  end;

  [DNTypeName('System.Runtime.Remoting.Channels.ChannelServices')]
  DNChannelServices = interface(DNObject)
  ['{D625BA4C-7C4C-3B86-99EA-780204EDE5CD}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNChannelServices = class(TDNGenericImport<DNChannelServicesClass, DNChannelServices>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNClientChannelSinkStackClass = interface(DNObjectClass)
  ['{B0B507AF-E836-547A-8E7A-5B28569A6BB6}']
  { constructors } 

    {class} function init: DNClientChannelSinkStack; overload;
    {class} function init(replySink: DNIMessageSink): DNClientChannelSinkStack; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.Channels.ClientChannelSinkStack')]
  DNClientChannelSinkStack = interface(DNIClientChannelSinkStack)
  ['{DD5856E5-8151-3334-B8E9-07CB152B20A4}']
  { methods } 

    procedure Push(sink: DNIClientChannelSink; state: DNObject);
    function Pop(sink: DNIClientChannelSink): DNObject;
    procedure AsyncProcessResponse(headers: DNITransportHeaders; stream: DNStream);
    procedure DispatchReplyMessage(msg: DNIMessage);
    procedure DispatchException(e: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNClientChannelSinkStack = class(TDNGenericImport<DNClientChannelSinkStackClass, DNClientChannelSinkStack>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNServerChannelSinkStackClass = interface(DNObjectClass)
  ['{E85438B4-9115-56DC-A4FA-E4DF0B7E115C}']
  { constructors } 

    {class} function init: DNServerChannelSinkStack;

  end;

  [DNTypeName('System.Runtime.Remoting.Channels.ServerChannelSinkStack')]
  DNServerChannelSinkStack = interface(DNIServerChannelSinkStack)
  ['{5C35F099-165E-3225-A3A5-564150EA17F5}']
  { methods } 

    procedure Push(sink: DNIServerChannelSink; state: DNObject);
    function Pop(sink: DNIServerChannelSink): DNObject;
    procedure Store(sink: DNIServerChannelSink; state: DNObject);
    procedure StoreAndDispatch(sink: DNIServerChannelSink; state: DNObject);
    procedure AsyncProcessResponse(msg: DNIMessage; headers: DNITransportHeaders; stream: DNStream);
    function GetResponseStream(msg: DNIMessage; headers: DNITransportHeaders): DNStream;
    procedure ServerCallback(ar: DNIAsyncResult);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNServerChannelSinkStack = class(TDNGenericImport<DNServerChannelSinkStackClass, DNServerChannelSinkStack>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNSinkProviderDataClass = interface(DNObjectClass)
  ['{C10AA7FA-A381-5E3D-B1A3-3D2FB20065EB}']
  { constructors } 

    {class} function init(name: string): DNSinkProviderData;

  end;

  [DNTypeName('System.Runtime.Remoting.Channels.SinkProviderData')]
  DNSinkProviderData = interface(DNObject)
  ['{B8BE8D68-5FE6-38C5-838E-67CE2FCA9D70}']
  { getters & setters } 

    function get_Name: string;
    function get_Properties: DNIDictionary;
    function get_Children: DNIList;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Properties: DNIDictionary read get_Properties;
    property Children: DNIList read get_Children;
  end;

  TDNSinkProviderData = class(TDNGenericImport<DNSinkProviderDataClass, DNSinkProviderData>) end;

  //-------------namespace: System.Runtime.Remoting.Channels----------------
  DNTransportHeadersClass = interface(DNObjectClass)
  ['{444951AD-16F3-55CC-A8CD-0CECA705DBA8}']
  { constructors } 

    {class} function init: DNTransportHeaders;

  end;

  [DNTypeName('System.Runtime.Remoting.Channels.TransportHeaders')]
  DNTransportHeaders = interface(DNITransportHeaders)
  ['{48728B3F-F7D9-36C1-B3E7-8BF2E63CE1B3}']
  { methods } 

    function GetEnumerator: DNIEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTransportHeaders = class(TDNGenericImport<DNTransportHeadersClass, DNTransportHeaders>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNContextClass = interface(DNObjectClass)
  ['{BC58A097-547D-505E-A834-B2EC6FC187DC}']
  { static getter & setter } 

    {class} function get_DefaultContext: DNContext;

  { constructors } 

    {class} function init: DNContext;

  { static methods } 

    {class} function AllocateDataSlot: DNLocalDataStoreSlot;
    {class} function AllocateNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} function GetNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} procedure FreeNamedDataSlot(name: string);
    {class} procedure SetData(slot: DNLocalDataStoreSlot; data: DNObject);
    {class} function GetData(slot: DNLocalDataStoreSlot): DNObject;
    {class} function RegisterDynamicProperty(prop: DNIDynamicProperty; obj: DNContextBoundObject; ctx: DNContext): Boolean;
    {class} function UnregisterDynamicProperty(name: string; obj: DNContextBoundObject; ctx: DNContext): Boolean;

  { static propertys } 

    {class} property DefaultContext: DNContext read get_DefaultContext;
  end;

  [DNTypeName('System.Runtime.Remoting.Contexts.Context')]
  DNContext = interface(DNObject)
  ['{A36E4EAF-EA3F-30A6-906D-374BBF7903B1}']
  { getters & setters } 

    function get_ContextID: Int32;
    function get_ContextProperties: TArray<DNIContextProperty>;

  { methods } 

    procedure SetProperty(prop: DNIContextProperty);
    function GetProperty(name: string): DNIContextProperty;
    procedure Freeze;
    procedure DoCallBack(deleg: DNCrossContextDelegate);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ContextID: Int32 read get_ContextID;
    property ContextProperties: TArray<DNIContextProperty> read get_ContextProperties;
  end;

  TDNContext = class(TDNGenericImport<DNContextClass, DNContext>) end;

  //-------------namespace: System.Runtime.Remoting.Contexts----------------
  DNContextPropertyClass = interface(DNObjectClass)
  ['{4E862498-6164-51D7-BE0C-0666765E558F}']
  end;

  [DNTypeName('System.Runtime.Remoting.Contexts.ContextProperty')]
  DNContextProperty = interface(DNObject)
  ['{6134805F-E8FF-3FD8-931E-4D847BCA7551}']
  { getters & setters } 

    function get_Name: string;
    function get_Property: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property &Property: DNObject read get_Property;
  end;

  TDNContextProperty = class(TDNGenericImport<DNContextPropertyClass, DNContextProperty>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNInternalRemotingServicesClass = interface(DNObjectClass)
  ['{11CBFCDF-86DC-5ADF-AFEB-D4598D929C5F}']
  { constructors } 

    {class} function init: DNInternalRemotingServices;

  { static methods } 

    {class} procedure RemotingTrace(messages: TArray<DNObject>);
    {class} procedure RemotingAssert(condition: Boolean; message: string);
    {class} procedure SetServerIdentity(m: DNMethodCall; srvID: DNObject);
    {class} function GetCachedSoapAttribute(reflectionObject: DNObject): DNSoapAttribute;
    {class} procedure DebugOutChnl(s: string);

  end;

  [DNTypeName('System.Runtime.Remoting.InternalRemotingServices')]
  DNInternalRemotingServices = interface(DNObject)
  ['{53A3C917-BB24-3908-B58B-09ECDA99265F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalRemotingServices = class(TDNGenericImport<DNInternalRemotingServicesClass, DNInternalRemotingServices>) end;

  //-------------namespace: System.Runtime.Remoting.Lifetime----------------
  DNLifetimeServicesClass = interface(DNObjectClass)
  ['{FC0B1A55-B1A9-53B4-AFE0-B961906E9858}']
  { static getter & setter } 

    {class} function get_LeaseTime: DNTimeSpan;
    {class} procedure set_LeaseTime(value: DNTimeSpan);
    {class} function get_RenewOnCallTime: DNTimeSpan;
    {class} procedure set_RenewOnCallTime(value: DNTimeSpan);
    {class} function get_SponsorshipTimeout: DNTimeSpan;
    {class} procedure set_SponsorshipTimeout(value: DNTimeSpan);
    {class} function get_LeaseManagerPollTime: DNTimeSpan;
    {class} procedure set_LeaseManagerPollTime(value: DNTimeSpan);

  { constructors } 

    {class} function init: DNLifetimeServices;

  { static propertys } 

    {class} property LeaseTime: DNTimeSpan read get_LeaseTime write set_LeaseTime;
    {class} property RenewOnCallTime: DNTimeSpan read get_RenewOnCallTime write set_RenewOnCallTime;
    {class} property SponsorshipTimeout: DNTimeSpan read get_SponsorshipTimeout write set_SponsorshipTimeout;
    {class} property LeaseManagerPollTime: DNTimeSpan read get_LeaseManagerPollTime write set_LeaseManagerPollTime;
  end;

  [DNTypeName('System.Runtime.Remoting.Lifetime.LifetimeServices')]
  DNLifetimeServices = interface(DNObject)
  ['{8FD730C1-DD1B-3694-84A1-8CE7159E266B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNLifetimeServices = class(TDNGenericImport<DNLifetimeServicesClass, DNLifetimeServices>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNAsyncResultClass = interface(DNObjectClass)
  ['{F2E81CC4-C859-5EC9-AE5A-060FCF661DF6}']
  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.AsyncResult')]
  DNAsyncResult = interface(DNIAsyncResult)
  ['{614E973A-B737-38F5-9DDF-5825AC923135}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_AsyncDelegate: DNObject;
    function get_AsyncState: DNObject;
    function get_CompletedSynchronously: Boolean;
    function get_EndInvokeCalled: Boolean;
    procedure set_EndInvokeCalled(value: Boolean);
    function get_AsyncWaitHandle: DNWaitHandle;
    function get_NextSink: DNIMessageSink;

  { methods } 

    procedure SetMessageCtrl(mc: DNIMessageCtrl);
    function AsyncProcessMessage(msg: DNIMessage; replySink: DNIMessageSink): DNIMessageCtrl;
    function GetReplyMessage: DNIMessage;
    function SyncProcessMessage(msg: DNIMessage): DNIMessage;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property AsyncDelegate: DNObject read get_AsyncDelegate;
    property AsyncState: DNObject read get_AsyncState;
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
    property EndInvokeCalled: Boolean read get_EndInvokeCalled write set_EndInvokeCalled;
    property AsyncWaitHandle: DNWaitHandle read get_AsyncWaitHandle;
    property NextSink: DNIMessageSink read get_NextSink;
  end;

  TDNAsyncResult = class(TDNGenericImport<DNAsyncResultClass, DNAsyncResult>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNCallContextClass = interface(DNObjectClass)
  ['{F5AC76D2-AC7A-5183-B4C5-F1FE561EBC7B}']
  { static getter & setter } 

    {class} function get_HostContext: DNObject;
    {class} procedure set_HostContext(value: DNObject);

  { static methods } 

    {class} procedure FreeNamedDataSlot(name: string);
    {class} function LogicalGetData(name: string): DNObject;
    {class} function GetData(name: string): DNObject;
    {class} procedure SetData(name: string; data: DNObject);
    {class} procedure LogicalSetData(name: string; data: DNObject);
    {class} function GetHeaders: TArray<DNHeader>;
    {class} procedure SetHeaders(headers: TArray<DNHeader>);

  { static propertys } 

    {class} property HostContext: DNObject read get_HostContext write set_HostContext;
  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.CallContext')]
  DNCallContext = interface(DNObject)
  ['{9D0DF3B9-107C-3392-88C8-FE629CA21DAB}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCallContext = class(TDNGenericImport<DNCallContextClass, DNCallContext>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNHeaderClass = interface(DNObjectClass)
  ['{508773FF-192D-5B3E-B1D2-62E5B2BB47A5}']
  { constructors } 

    {class} function init(_Name: string; _Value: DNObject): DNHeader; overload;
    {class} function init(_Name: string; _Value: DNObject; _MustUnderstand: Boolean): DNHeader; overload;
    {class} function init(_Name: string; _Value: DNObject; _MustUnderstand: Boolean; _HeaderNamespace: string): DNHeader; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.Header')]
  DNHeader = interface(DNObject)
  ['{14309FAB-EACD-3C64-877E-07EB01B89C91}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNHeader = class(TDNGenericImport<DNHeaderClass, DNHeader>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNInternalMessageWrapperClass = interface(DNObjectClass)
  ['{67B9D129-1E15-593B-BFC4-6AFBE2A7A8A9}']
  { constructors } 

    {class} function init(msg: DNIMessage): DNInternalMessageWrapper;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.InternalMessageWrapper')]
  DNInternalMessageWrapper = interface(DNObject)
  ['{30C4CD02-66A2-3ABE-BC6C-638E6730E534}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalMessageWrapper = class(TDNGenericImport<DNInternalMessageWrapperClass, DNInternalMessageWrapper>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodCallMessageWrapperClass = interface(DNInternalMessageWrapperClass)
  ['{4F0DD61C-237B-5AFA-9A14-CDFB6E595F70}']
  { constructors } 

    {class} function init(msg: DNIMethodCallMessage): DNMethodCallMessageWrapper;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.MethodCallMessageWrapper')]
  DNMethodCallMessageWrapper = interface(DNInternalMessageWrapper)
  ['{40133645-FFAF-3A9C-B408-997E049D5C11}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_LogicalCallContext: DNLogicalCallContext;
    function get_MethodBase: DNMethodBase;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    procedure set_Args(value: TArray<DNObject>);
    function get_HasVarArgs: Boolean;
    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;
    function get_Properties: DNIDictionary;

  { methods } 

    function GetArgName(index: Int32): string;
    function GetArg(argNum: Int32): DNObject;
    function GetInArg(argNum: Int32): DNObject;
    function GetInArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Uri: string read get_Uri write set_Uri;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
    property MethodBase: DNMethodBase read get_MethodBase;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args write set_Args;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property InArgCount: Int32 read get_InArgCount;
    property InArgs: TArray<DNObject> read get_InArgs;
    property Properties: DNIDictionary read get_Properties;
  end;

  TDNMethodCallMessageWrapper = class(TDNGenericImport<DNMethodCallMessageWrapperClass, DNMethodCallMessageWrapper>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodReturnMessageWrapperClass = interface(DNInternalMessageWrapperClass)
  ['{4260DC3D-CE8F-508F-B90C-AACCA231B41B}']
  { constructors } 

    {class} function init(msg: DNIMethodReturnMessage): DNMethodReturnMessageWrapper;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper')]
  DNMethodReturnMessageWrapper = interface(DNInternalMessageWrapper)
  ['{2EC528FB-B987-3B3B-A444-9F94C3A257C1}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_LogicalCallContext: DNLogicalCallContext;
    function get_MethodBase: DNMethodBase;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    procedure set_Args(value: TArray<DNObject>);
    function get_HasVarArgs: Boolean;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    procedure set_Exception(value: DNException);
    function get_ReturnValue: DNObject;
    procedure set_ReturnValue(value: DNObject);
    function get_Properties: DNIDictionary;

  { methods } 

    function GetArgName(index: Int32): string;
    function GetArg(argNum: Int32): DNObject;
    function GetOutArg(argNum: Int32): DNObject;
    function GetOutArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Uri: string read get_Uri write set_Uri;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
    property MethodBase: DNMethodBase read get_MethodBase;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args write set_Args;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property OutArgCount: Int32 read get_OutArgCount;
    property OutArgs: TArray<DNObject> read get_OutArgs;
    property Exception: DNException read get_Exception write set_Exception;
    property ReturnValue: DNObject read get_ReturnValue write set_ReturnValue;
    property Properties: DNIDictionary read get_Properties;
  end;

  TDNMethodReturnMessageWrapper = class(TDNGenericImport<DNMethodReturnMessageWrapperClass, DNMethodReturnMessageWrapper>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNLogicalCallContextClass = interface(DNObjectClass)
  ['{2382373A-98B1-50F9-A5EF-F88FB00E542E}']
  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.LogicalCallContext')]
  DNLogicalCallContext = interface(DNISerializable)
  ['{5DB435A0-0DB3-3F4A-BF49-191A69D451BB}']
  { getters & setters } 

    function get_HasInfo: Boolean;

  { methods } 

    procedure FreeNamedDataSlot(name: string);
    function GetData(name: string): DNObject;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Clone: DNObject;
    procedure SetData(name: string; data: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HasInfo: Boolean read get_HasInfo;
  end;

  TDNLogicalCallContext = class(TDNGenericImport<DNLogicalCallContextClass, DNLogicalCallContext>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodCallClass = interface(DNObjectClass)
  ['{E8D9027D-0FDE-5B29-931D-4F619973CE85}']
  { constructors } 

    {class} function init(h1: TArray<DNHeader>): DNMethodCall; overload;
    {class} function init(msg: DNIMessage): DNMethodCall; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.MethodCall')]
  DNMethodCall = interface(DNIMethodCallMessage)
  ['{4F592B1F-4A0C-3FC0-9914-3677F64FC5A8}']
  { getters & setters } 

    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_HasVarArgs: Boolean;
    function get_Properties: DNIDictionary;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    procedure ResolveMethod;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure Init;
    function GetArg(argNum: Int32): DNObject;
    function GetArgName(index: Int32): string;
    function GetInArg(argNum: Int32): DNObject;
    function GetInArgName(index: Int32): string;
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property InArgCount: Int32 read get_InArgCount;
    property InArgs: TArray<DNObject> read get_InArgs;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property MethodBase: DNMethodBase read get_MethodBase;
    property Uri: string read get_Uri write set_Uri;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property Properties: DNIDictionary read get_Properties;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNMethodCall = class(TDNGenericImport<DNMethodCallClass, DNMethodCall>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNConstructionCallClass = interface(DNMethodCallClass)
  ['{4807675A-3CAF-5C07-A3C9-D8F955996DD0}']
  { constructors } 

    {class} function init(headers: TArray<DNHeader>): DNConstructionCall; overload;
    {class} function init(m: DNIMessage): DNConstructionCall; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.ConstructionCall')]
  DNConstructionCall = interface(DNMethodCall)
  ['{54DAC96D-ECAF-38DB-A27B-3DDB102130C4}']
  { getters & setters } 

    function get_CallSiteActivationAttributes: TArray<DNObject>;
    function get_ActivationType: DNType;
    function get_ActivationTypeName: string;
    function get_ContextProperties: DNIList;
    function get_Properties: DNIDictionary;
    function get_Activator: DNIActivator;
    procedure set_Activator(value: DNIActivator);
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_InArgCount: Int32;
    function get_InArgs: TArray<DNObject>;
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_HasVarArgs: Boolean;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    procedure ResolveMethod;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure Init;
    function GetArg(argNum: Int32): DNObject;
    function GetArgName(index: Int32): string;
    function GetInArg(argNum: Int32): DNObject;
    function GetInArgName(index: Int32): string;
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CallSiteActivationAttributes: TArray<DNObject> read get_CallSiteActivationAttributes;
    property ActivationType: DNType read get_ActivationType;
    property ActivationTypeName: string read get_ActivationTypeName;
    property ContextProperties: DNIList read get_ContextProperties;
    property Properties: DNIDictionary read get_Properties;
    property Activator: DNIActivator read get_Activator write set_Activator;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property InArgCount: Int32 read get_InArgCount;
    property InArgs: TArray<DNObject> read get_InArgs;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property MethodBase: DNMethodBase read get_MethodBase;
    property Uri: string read get_Uri write set_Uri;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNConstructionCall = class(TDNGenericImport<DNConstructionCallClass, DNConstructionCall>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNMethodResponseClass = interface(DNObjectClass)
  ['{5A4683C2-1120-591D-8591-FA51CB8522FA}']
  { constructors } 

    {class} function init(h1: TArray<DNHeader>; mcm: DNIMethodCallMessage): DNMethodResponse;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.MethodResponse')]
  DNMethodResponse = interface(DNIMethodReturnMessage)
  ['{7E7BF3C0-B07B-3209-A424-7BC35D76EA7D}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_HasVarArgs: Boolean;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;
    function get_Properties: DNIDictionary;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetArg(argNum: Int32): DNObject;
    function GetOutArg(argNum: Int32): DNObject;
    function GetOutArgName(index: Int32): string;
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    function GetArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Uri: string read get_Uri write set_Uri;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property MethodBase: DNMethodBase read get_MethodBase;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property OutArgCount: Int32 read get_OutArgCount;
    property OutArgs: TArray<DNObject> read get_OutArgs;
    property Exception: DNException read get_Exception;
    property ReturnValue: DNObject read get_ReturnValue;
    property Properties: DNIDictionary read get_Properties;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNMethodResponse = class(TDNGenericImport<DNMethodResponseClass, DNMethodResponse>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNConstructionResponseClass = interface(DNMethodResponseClass)
  ['{313C3C75-EA81-57FC-A41A-79E8E723BF22}']
  { constructors } 

    {class} function init(h: TArray<DNHeader>; mcm: DNIMethodCallMessage): DNConstructionResponse;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.ConstructionResponse')]
  DNConstructionResponse = interface(DNMethodResponse)
  ['{25E8547A-6B49-3F00-B963-D45FDCEF4F11}']
  { getters & setters } 

    function get_Properties: DNIDictionary;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_HasVarArgs: Boolean;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    procedure RootSetObjectData(info: DNSerializationInfo; ctx: DNStreamingContext);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetArg(argNum: Int32): DNObject;
    function GetOutArg(argNum: Int32): DNObject;
    function GetOutArgName(index: Int32): string;
    function HeaderHandler(h: TArray<DNHeader>): DNObject;
    function GetArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Properties: DNIDictionary read get_Properties;
    property Uri: string read get_Uri write set_Uri;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property MethodBase: DNMethodBase read get_MethodBase;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property OutArgCount: Int32 read get_OutArgCount;
    property OutArgs: TArray<DNObject> read get_OutArgs;
    property Exception: DNException read get_Exception;
    property ReturnValue: DNObject read get_ReturnValue;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNConstructionResponse = class(TDNGenericImport<DNConstructionResponseClass, DNConstructionResponse>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNRemotingSurrogateSelectorClass = interface(DNObjectClass)
  ['{F8656BAE-2EC2-5DE0-86C4-85832F324556}']
  { constructors } 

    {class} function init: DNRemotingSurrogateSelector;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.RemotingSurrogateSelector')]
  DNRemotingSurrogateSelector = interface(DNISurrogateSelector)
  ['{24EEC005-3938-3C71-821D-7F68FD850B2D}']
  { getters & setters } 

    function get_Filter: DNMessageSurrogateFilter;
    procedure set_Filter(value: DNMessageSurrogateFilter);

  { methods } 

    procedure SetRootObject(obj: DNObject);
    function GetRootObject: DNObject;
    procedure ChainSelector(selector: DNISurrogateSelector);
    function GetSurrogate(&type: DNType; context: DNStreamingContext; out ssout: DNISurrogateSelector): DNISerializationSurrogate;
    function GetNextSelector: DNISurrogateSelector;
    procedure UseSoapFormat;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Filter: DNMessageSurrogateFilter read get_Filter write set_Filter;
  end;

  TDNRemotingSurrogateSelector = class(TDNGenericImport<DNRemotingSurrogateSelectorClass, DNRemotingSurrogateSelector>) end;

  //-------------namespace: System.Runtime.Remoting.Messaging----------------
  DNReturnMessageClass = interface(DNObjectClass)
  ['{E39DAA5A-451D-5345-ABE2-BF9E9F6794D8}']
  { constructors } 

    {class} function init(ret: DNObject; outArgs: TArray<DNObject>; outArgsCount: Int32; callCtx: DNLogicalCallContext; mcm: DNIMethodCallMessage): DNReturnMessage; overload;
    {class} function init(e: DNException; mcm: DNIMethodCallMessage): DNReturnMessage; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.Messaging.ReturnMessage')]
  DNReturnMessage = interface(DNIMethodReturnMessage)
  ['{7B3BBD13-C870-3105-B123-FFCA166CDC04}']
  { getters & setters } 

    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_MethodName: string;
    function get_TypeName: string;
    function get_MethodSignature: DNObject;
    function get_MethodBase: DNMethodBase;
    function get_HasVarArgs: Boolean;
    function get_ArgCount: Int32;
    function get_Args: TArray<DNObject>;
    function get_OutArgCount: Int32;
    function get_OutArgs: TArray<DNObject>;
    function get_Exception: DNException;
    function get_ReturnValue: DNObject;
    function get_Properties: DNIDictionary;
    function get_LogicalCallContext: DNLogicalCallContext;

  { methods } 

    function GetArg(argNum: Int32): DNObject;
    function GetOutArg(argNum: Int32): DNObject;
    function GetOutArgName(index: Int32): string;
    function GetArgName(index: Int32): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Uri: string read get_Uri write set_Uri;
    property MethodName: string read get_MethodName;
    property TypeName: string read get_TypeName;
    property MethodSignature: DNObject read get_MethodSignature;
    property MethodBase: DNMethodBase read get_MethodBase;
    property HasVarArgs: Boolean read get_HasVarArgs;
    property ArgCount: Int32 read get_ArgCount;
    property Args: TArray<DNObject> read get_Args;
    property OutArgCount: Int32 read get_OutArgCount;
    property OutArgs: TArray<DNObject> read get_OutArgs;
    property Exception: DNException read get_Exception;
    property ReturnValue: DNObject read get_ReturnValue;
    property Properties: DNIDictionary read get_Properties;
    property LogicalCallContext: DNLogicalCallContext read get_LogicalCallContext;
  end;

  TDNReturnMessage = class(TDNGenericImport<DNReturnMessageClass, DNReturnMessage>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapAnyUriClass = interface(DNObjectClass)
  ['{A977C4AE-341B-5056-A470-FDFE4A476F7A}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapAnyUri; overload;
    {class} function init(value: string): DNSoapAnyUri; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapAnyUri;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri')]
  DNSoapAnyUri = interface(DNISoapXsd)
  ['{CDFA7117-B2A4-3A3F-B393-BC19D44F9749}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapAnyUri = class(TDNGenericImport<DNSoapAnyUriClass, DNSoapAnyUri>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapBase64BinaryClass = interface(DNObjectClass)
  ['{6EADBC79-88FD-5C8A-9632-EBB13F196D1E}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapBase64Binary; overload;
    {class} function init(value: TArray<Byte>): DNSoapBase64Binary; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapBase64Binary;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary')]
  DNSoapBase64Binary = interface(DNISoapXsd)
  ['{F59D514C-F200-319F-BF3F-9E4E23B2848C}']
  { getters & setters } 

    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNSoapBase64Binary = class(TDNGenericImport<DNSoapBase64BinaryClass, DNSoapBase64Binary>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDateClass = interface(DNObjectClass)
  ['{E40E59B0-EDDA-5BC4-B082-8D6AF3256D66}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapDate; overload;
    {class} function init(value: DNDateTime): DNSoapDate; overload;
    {class} function init(value: DNDateTime; sign: Int32): DNSoapDate; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapDate;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate')]
  DNSoapDate = interface(DNISoapXsd)
  ['{2DECBCB7-BAC0-316D-9131-43035C5CB480}']
  { getters & setters } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);
    function get_Sign: Int32;
    procedure set_Sign(value: Int32);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDateTime read get_Value write set_Value;
    property Sign: Int32 read get_Sign write set_Sign;
  end;

  TDNSoapDate = class(TDNGenericImport<DNSoapDateClass, DNSoapDate>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDateTimeClass = interface(DNObjectClass)
  ['{292A7C69-A9B3-5882-A8AB-B8256A5280D1}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapDateTime;

  { static methods } 

    {class} function ToString(value: DNDateTime): string; overload;
    {class} function Parse(value: string): DNDateTime;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime')]
  DNSoapDateTime = interface(DNObject)
  ['{48AD62E8-BD40-37F4-8FD7-F7A17478A8E6}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNSoapDateTime = class(TDNGenericImport<DNSoapDateTimeClass, DNSoapDateTime>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDayClass = interface(DNObjectClass)
  ['{BB196E88-7AF6-5570-9C98-6D933596FB37}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapDay; overload;
    {class} function init(value: DNDateTime): DNSoapDay; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapDay;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay')]
  DNSoapDay = interface(DNISoapXsd)
  ['{C9F0A842-3CE1-338F-A1D4-6D7BB397BDAA}']
  { getters & setters } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapDay = class(TDNGenericImport<DNSoapDayClass, DNSoapDay>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapDurationClass = interface(DNObjectClass)
  ['{A486344E-CDB7-5DC8-A21F-E4217F907360}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapDuration;

  { static methods } 

    {class} function ToString(timeSpan: DNTimeSpan): string; overload;
    {class} function Parse(value: string): DNTimeSpan;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration')]
  DNSoapDuration = interface(DNObject)
  ['{DE47D9CF-0107-3D66-93E9-A8ACB06B4583}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNSoapDuration = class(TDNGenericImport<DNSoapDurationClass, DNSoapDuration>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapEntitiesClass = interface(DNObjectClass)
  ['{639662C1-7EBF-576E-B8BD-6CECF251E326}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapEntities; overload;
    {class} function init(value: string): DNSoapEntities; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapEntities;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities')]
  DNSoapEntities = interface(DNISoapXsd)
  ['{9A3A64F4-8BA5-3DCF-880C-8D3EE06C5538}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapEntities = class(TDNGenericImport<DNSoapEntitiesClass, DNSoapEntities>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapEntityClass = interface(DNObjectClass)
  ['{E9A354A9-55EA-5906-9B70-A60AFA4D013B}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapEntity; overload;
    {class} function init(value: string): DNSoapEntity; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapEntity;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity')]
  DNSoapEntity = interface(DNISoapXsd)
  ['{F00CA7A7-4B8D-3F2F-A5F2-CE4A4478B39C}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapEntity = class(TDNGenericImport<DNSoapEntityClass, DNSoapEntity>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapHexBinaryClass = interface(DNObjectClass)
  ['{27630A15-7E0C-539C-97AE-38E19091E53D}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapHexBinary; overload;
    {class} function init(value: TArray<Byte>): DNSoapHexBinary; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapHexBinary;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary')]
  DNSoapHexBinary = interface(DNISoapXsd)
  ['{8C1425C9-A7D3-35CD-8248-928CA52AD49B}']
  { getters & setters } 

    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNSoapHexBinary = class(TDNGenericImport<DNSoapHexBinaryClass, DNSoapHexBinary>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIdClass = interface(DNObjectClass)
  ['{EF961151-C916-523D-B31C-88D0E2DAA6FB}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapId; overload;
    {class} function init(value: string): DNSoapId; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapId;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId')]
  DNSoapId = interface(DNISoapXsd)
  ['{FA0B54D5-F221-3648-A20C-F67A96F4A207}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapId = class(TDNGenericImport<DNSoapIdClass, DNSoapId>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIdrefClass = interface(DNObjectClass)
  ['{C41093E6-E595-5868-9D1E-25D3329FD9F3}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapIdref; overload;
    {class} function init(value: string): DNSoapIdref; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapIdref;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref')]
  DNSoapIdref = interface(DNISoapXsd)
  ['{433CA926-9887-3541-89CC-5D74D0259144}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapIdref = class(TDNGenericImport<DNSoapIdrefClass, DNSoapIdref>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIdrefsClass = interface(DNObjectClass)
  ['{373B8B8A-A06B-5A13-96BC-0BE80D9CCF03}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapIdrefs; overload;
    {class} function init(value: string): DNSoapIdrefs; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapIdrefs;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs')]
  DNSoapIdrefs = interface(DNISoapXsd)
  ['{2763BE6B-F8CF-39D9-A2E8-9E9815C0815E}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapIdrefs = class(TDNGenericImport<DNSoapIdrefsClass, DNSoapIdrefs>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapIntegerClass = interface(DNObjectClass)
  ['{54045B51-148D-5AEE-BDF4-F3C1F4573713}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapInteger; overload;
    {class} function init(value: DNDecimal): DNSoapInteger; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapInteger;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger')]
  DNSoapInteger = interface(DNISoapXsd)
  ['{09A60795-31C0-3A79-9250-8D93C74FE540}']
  { getters & setters } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapInteger = class(TDNGenericImport<DNSoapIntegerClass, DNSoapInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapLanguageClass = interface(DNObjectClass)
  ['{B3841A43-3A76-52DC-9F04-AC4F2AFBCA13}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapLanguage; overload;
    {class} function init(value: string): DNSoapLanguage; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapLanguage;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage')]
  DNSoapLanguage = interface(DNISoapXsd)
  ['{84F70B6C-D59E-394A-B879-FFCC30DDCAA2}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapLanguage = class(TDNGenericImport<DNSoapLanguageClass, DNSoapLanguage>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapMonthClass = interface(DNObjectClass)
  ['{28BFE17B-33AF-5ED8-96D5-A70E15FD6C97}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapMonth; overload;
    {class} function init(value: DNDateTime): DNSoapMonth; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapMonth;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth')]
  DNSoapMonth = interface(DNISoapXsd)
  ['{CAEC7D4F-0B02-3579-943F-821738EE78CC}']
  { getters & setters } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapMonth = class(TDNGenericImport<DNSoapMonthClass, DNSoapMonth>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapMonthDayClass = interface(DNObjectClass)
  ['{752B64AB-6F66-5E6B-8180-282B8E2763BB}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapMonthDay; overload;
    {class} function init(value: DNDateTime): DNSoapMonthDay; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapMonthDay;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay')]
  DNSoapMonthDay = interface(DNISoapXsd)
  ['{463AE13F-C7E5-357E-A41C-DF8762FFF85C}']
  { getters & setters } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapMonthDay = class(TDNGenericImport<DNSoapMonthDayClass, DNSoapMonthDay>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNameClass = interface(DNObjectClass)
  ['{89F1F1C3-4459-5874-A0B8-AFA7E8BED95E}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapName; overload;
    {class} function init(value: string): DNSoapName; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapName;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName')]
  DNSoapName = interface(DNISoapXsd)
  ['{4E515531-7A71-3CDD-8078-0A01C85C8F9D}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapName = class(TDNGenericImport<DNSoapNameClass, DNSoapName>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNcNameClass = interface(DNObjectClass)
  ['{14EC9F58-1240-502D-81BB-99B108324DD5}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNcName; overload;
    {class} function init(value: string): DNSoapNcName; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNcName;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName')]
  DNSoapNcName = interface(DNISoapXsd)
  ['{D13B741D-051F-322F-93AA-1367A3C8AAFB}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNcName = class(TDNGenericImport<DNSoapNcNameClass, DNSoapNcName>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNegativeIntegerClass = interface(DNObjectClass)
  ['{C73B4A9F-5DD6-545B-B951-E73A374EBFDB}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNegativeInteger; overload;
    {class} function init(value: DNDecimal): DNSoapNegativeInteger; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNegativeInteger;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger')]
  DNSoapNegativeInteger = interface(DNISoapXsd)
  ['{C41D0B30-A518-3093-A18F-364AF9E71EB7}']
  { getters & setters } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapNegativeInteger = class(TDNGenericImport<DNSoapNegativeIntegerClass, DNSoapNegativeInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNmtokenClass = interface(DNObjectClass)
  ['{9DF1D98C-7058-5727-AA9F-2C6471F97031}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNmtoken; overload;
    {class} function init(value: string): DNSoapNmtoken; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNmtoken;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken')]
  DNSoapNmtoken = interface(DNISoapXsd)
  ['{C498F2D9-A77C-3D4B-A1A5-12CC7B99115D}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNmtoken = class(TDNGenericImport<DNSoapNmtokenClass, DNSoapNmtoken>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNmtokensClass = interface(DNObjectClass)
  ['{DA35E86D-5AED-538A-B52E-FA87A50D6012}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNmtokens; overload;
    {class} function init(value: string): DNSoapNmtokens; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNmtokens;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens')]
  DNSoapNmtokens = interface(DNISoapXsd)
  ['{14BE6B21-C682-3A3A-8B24-FEE75B4FF8C5}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNmtokens = class(TDNGenericImport<DNSoapNmtokensClass, DNSoapNmtokens>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNonNegativeIntegerClass = interface(DNObjectClass)
  ['{0A5FEC03-23E0-57B1-89B4-5788E2224E24}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNonNegativeInteger; overload;
    {class} function init(value: DNDecimal): DNSoapNonNegativeInteger; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNonNegativeInteger;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger')]
  DNSoapNonNegativeInteger = interface(DNISoapXsd)
  ['{6850404F-D7FB-32BD-8328-C94F66E8C1C7}']
  { getters & setters } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapNonNegativeInteger = class(TDNGenericImport<DNSoapNonNegativeIntegerClass, DNSoapNonNegativeInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNonPositiveIntegerClass = interface(DNObjectClass)
  ['{E59821E7-537B-57EF-8C81-0D1FE7769D4C}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNonPositiveInteger; overload;
    {class} function init(value: DNDecimal): DNSoapNonPositiveInteger; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNonPositiveInteger;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger')]
  DNSoapNonPositiveInteger = interface(DNISoapXsd)
  ['{2BB6C5E0-C2B9-3608-8868-21CFD6DDB91E}']
  { getters & setters } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapNonPositiveInteger = class(TDNGenericImport<DNSoapNonPositiveIntegerClass, DNSoapNonPositiveInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNormalizedStringClass = interface(DNObjectClass)
  ['{0E279E17-3002-53F5-9805-4C1C14D1D6D5}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNormalizedString; overload;
    {class} function init(value: string): DNSoapNormalizedString; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNormalizedString;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString')]
  DNSoapNormalizedString = interface(DNISoapXsd)
  ['{0E71F9BD-C109-3352-BD60-14F96D56B6F3}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNormalizedString = class(TDNGenericImport<DNSoapNormalizedStringClass, DNSoapNormalizedString>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapNotationClass = interface(DNObjectClass)
  ['{9048FBF0-BCDC-5D4E-A4C8-CBDABBF96ABD}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapNotation; overload;
    {class} function init(value: string): DNSoapNotation; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapNotation;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation')]
  DNSoapNotation = interface(DNISoapXsd)
  ['{B54E38F8-17FF-3D0A-9FF3-5E662DE2055F}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapNotation = class(TDNGenericImport<DNSoapNotationClass, DNSoapNotation>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapPositiveIntegerClass = interface(DNObjectClass)
  ['{AD8A682A-5E77-59FA-98DB-77F3F3DFACF5}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapPositiveInteger; overload;
    {class} function init(value: DNDecimal): DNSoapPositiveInteger; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapPositiveInteger;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger')]
  DNSoapPositiveInteger = interface(DNISoapXsd)
  ['{7B769B29-35F0-3BDC-AAE9-E99937F6CDEC}']
  { getters & setters } 

    function get_Value: DNDecimal;
    procedure set_Value(value: DNDecimal);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDecimal read get_Value write set_Value;
  end;

  TDNSoapPositiveInteger = class(TDNGenericImport<DNSoapPositiveIntegerClass, DNSoapPositiveInteger>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapQNameClass = interface(DNObjectClass)
  ['{0AE3D113-A884-5EE6-89FE-AD47D52768C4}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapQName; overload;
    {class} function init(value: string): DNSoapQName; overload;
    {class} function init(key: string; name: string): DNSoapQName; overload;
    {class} function init(key: string; name: string; namespaceValue: string): DNSoapQName; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapQName;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName')]
  DNSoapQName = interface(DNISoapXsd)
  ['{D8A4F3EB-E7EC-3620-831A-B052A67C9944}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Key: string;
    procedure set_Key(value: string);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property Key: string read get_Key write set_Key;
  end;

  TDNSoapQName = class(TDNGenericImport<DNSoapQNameClass, DNSoapQName>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapTimeClass = interface(DNObjectClass)
  ['{D172EB2F-9197-541F-ADCC-6ABBD16246AA}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapTime; overload;
    {class} function init(value: DNDateTime): DNSoapTime; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapTime;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime')]
  DNSoapTime = interface(DNISoapXsd)
  ['{D049DC2B-82C3-3350-A1CC-BF69FEE3825E}']
  { getters & setters } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDateTime read get_Value write set_Value;
  end;

  TDNSoapTime = class(TDNGenericImport<DNSoapTimeClass, DNSoapTime>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapTokenClass = interface(DNObjectClass)
  ['{1686BBFA-4688-5969-A41F-072CEA21514F}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapToken; overload;
    {class} function init(value: string): DNSoapToken; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapToken;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken')]
  DNSoapToken = interface(DNISoapXsd)
  ['{777F668E-3272-39CD-A8B5-860935A35181}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function ToString: string;
    function GetXsdType: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value write set_Value;
  end;

  TDNSoapToken = class(TDNGenericImport<DNSoapTokenClass, DNSoapToken>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapYearClass = interface(DNObjectClass)
  ['{9355F195-7338-5F0D-AA4C-030D823FC5FF}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapYear; overload;
    {class} function init(value: DNDateTime): DNSoapYear; overload;
    {class} function init(value: DNDateTime; sign: Int32): DNSoapYear; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapYear;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear')]
  DNSoapYear = interface(DNISoapXsd)
  ['{75999EBA-0679-3D43-BDC4-02E4D637F1B1}']
  { getters & setters } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);
    function get_Sign: Int32;
    procedure set_Sign(value: Int32);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDateTime read get_Value write set_Value;
    property Sign: Int32 read get_Sign write set_Sign;
  end;

  TDNSoapYear = class(TDNGenericImport<DNSoapYearClass, DNSoapYear>) end;

  //-------------namespace: System.Runtime.Remoting.Metadata.W3cXsd2001----------------
  DNSoapYearMonthClass = interface(DNObjectClass)
  ['{C3B5BEFF-33EC-5EC7-B2DC-5460B707D558}']
  { static getter & setter } 

    {class} function get_XsdType: string;

  { constructors } 

    {class} function init: DNSoapYearMonth; overload;
    {class} function init(value: DNDateTime): DNSoapYearMonth; overload;
    {class} function init(value: DNDateTime; sign: Int32): DNSoapYearMonth; overload;

  { static methods } 

    {class} function Parse(value: string): DNSoapYearMonth;

  { static propertys } 

    {class} property XsdType: string read get_XsdType;
  end;

  [DNTypeName('System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth')]
  DNSoapYearMonth = interface(DNISoapXsd)
  ['{A7136BDF-B141-3913-9D1C-9BC5AFF21470}']
  { getters & setters } 

    function get_Value: DNDateTime;
    procedure set_Value(value: DNDateTime);
    function get_Sign: Int32;
    procedure set_Sign(value: Int32);

  { methods } 

    function GetXsdType: string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNDateTime read get_Value write set_Value;
    property Sign: Int32 read get_Sign write set_Sign;
  end;

  TDNSoapYearMonth = class(TDNGenericImport<DNSoapYearMonthClass, DNSoapYearMonth>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNObjRefClass = interface(DNObjectClass)
  ['{171A72E8-C857-5490-8159-1F6B50DDD26D}']
  { constructors } 

    {class} function init(o: DNMarshalByRefObject; requestedType: DNType): DNObjRef; overload;
    {class} function init: DNObjRef; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.ObjRef')]
  DNObjRef = interface(DNIObjectReference)
  ['{21F5A790-53EA-3D73-86C3-A5BA6CF65FE9}']
  { getters & setters } 

    function get_URI: string;
    procedure set_URI(value: string);
    function get_TypeInfo: DNIRemotingTypeInfo;
    procedure set_TypeInfo(value: DNIRemotingTypeInfo);
    function get_EnvoyInfo: DNIEnvoyInfo;
    procedure set_EnvoyInfo(value: DNIEnvoyInfo);
    function get_ChannelInfo: DNIChannelInfo;
    procedure set_ChannelInfo(value: DNIChannelInfo);

  { methods } 

    function GetRealObject(context: DNStreamingContext): DNObject;
    function IsFromThisProcess: Boolean;
    function IsFromThisAppDomain: Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property URI: string read get_URI write set_URI;
    property TypeInfo: DNIRemotingTypeInfo read get_TypeInfo write set_TypeInfo;
    property EnvoyInfo: DNIEnvoyInfo read get_EnvoyInfo write set_EnvoyInfo;
    property ChannelInfo: DNIChannelInfo read get_ChannelInfo write set_ChannelInfo;
  end;

  TDNObjRef = class(TDNGenericImport<DNObjRefClass, DNObjRef>) end;

  //-------------namespace: System.Runtime.Remoting.Proxies----------------
  DNRealProxyClass = interface(DNObjectClass)
  ['{C67B9C9D-7925-520F-B145-FF311CA289AF}']
  { static methods } 

    {class} procedure SetStubData(rp: DNRealProxy; stubData: DNObject);
    {class} function GetStubData(rp: DNRealProxy): DNObject;

  end;

  [DNTypeName('System.Runtime.Remoting.Proxies.RealProxy')]
  DNRealProxy = interface(DNObject)
  ['{531D00A5-2CFF-30D7-8245-97E18CD4D037}']
  { methods } 

    function GetCOMIUnknown(fIsMarshalled: Boolean): IntPtr;
    function InitializeServerObject(ctorMsg: DNIConstructionCallMessage): DNIConstructionReturnMessage;
    function CreateObjRef(requestedType: DNType): DNObjRef;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure SetCOMIUnknown(i: IntPtr);
    function SupportsInterface(out iid: DNGuid): IntPtr;
    function GetTransparentProxy: DNObject;
    function GetProxiedType: DNType;
    function Invoke(msg: DNIMessage): DNIMessage;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRealProxy = class(TDNGenericImport<DNRealProxyClass, DNRealProxy>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingConfigurationClass = interface(DNObjectClass)
  ['{D58B3B35-3AD1-5B1B-8E91-DF4478C2D345}']
  { static getter & setter } 

    {class} function get_ApplicationName: string;
    {class} procedure set_ApplicationName(value: string);
    {class} function get_ApplicationId: string;
    {class} function get_ProcessId: string;
    {class} function get_CustomErrorsMode: DNCustomErrorsModes;
    {class} procedure set_CustomErrorsMode(value: DNCustomErrorsModes);

  { static methods } 

    {class} procedure Configure(filename: string); overload;
    {class} procedure Configure(filename: string; ensureSecurity: Boolean); overload;
    {class} function CustomErrorsEnabled(isLocalRequest: Boolean): Boolean;
    {class} procedure RegisterActivatedServiceType(&type: DNType); overload;
    {class} procedure RegisterActivatedServiceType(entry: DNActivatedServiceTypeEntry); overload;
    {class} procedure RegisterWellKnownServiceType(&type: DNType; objectUri: string; mode: DNWellKnownObjectMode); overload;
    {class} procedure RegisterWellKnownServiceType(entry: DNWellKnownServiceTypeEntry); overload;
    {class} procedure RegisterActivatedClientType(&type: DNType; appUrl: string); overload;
    {class} procedure RegisterActivatedClientType(entry: DNActivatedClientTypeEntry); overload;
    {class} procedure RegisterWellKnownClientType(&type: DNType; objectUrl: string); overload;
    {class} procedure RegisterWellKnownClientType(entry: DNWellKnownClientTypeEntry); overload;
    {class} function GetRegisteredActivatedServiceTypes: TArray<DNActivatedServiceTypeEntry>;
    {class} function GetRegisteredWellKnownServiceTypes: TArray<DNWellKnownServiceTypeEntry>;
    {class} function GetRegisteredActivatedClientTypes: TArray<DNActivatedClientTypeEntry>;
    {class} function GetRegisteredWellKnownClientTypes: TArray<DNWellKnownClientTypeEntry>;
    {class} function IsRemotelyActivatedClientType(svrType: DNType): DNActivatedClientTypeEntry; overload;
    {class} function IsRemotelyActivatedClientType(typeName: string; assemblyName: string): DNActivatedClientTypeEntry; overload;
    {class} function IsWellKnownClientType(svrType: DNType): DNWellKnownClientTypeEntry; overload;
    {class} function IsWellKnownClientType(typeName: string; assemblyName: string): DNWellKnownClientTypeEntry; overload;
    {class} function IsActivationAllowed(svrType: DNType): Boolean;

  { static propertys } 

    {class} property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    {class} property ApplicationId: string read get_ApplicationId;
    {class} property ProcessId: string read get_ProcessId;
    {class} property CustomErrorsMode: DNCustomErrorsModes read get_CustomErrorsMode write set_CustomErrorsMode;
  end;

  [DNTypeName('System.Runtime.Remoting.RemotingConfiguration')]
  DNRemotingConfiguration = interface(DNObject)
  ['{3DB6F309-9DAB-36EC-8036-D901172C994C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRemotingConfiguration = class(TDNGenericImport<DNRemotingConfigurationClass, DNRemotingConfiguration>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNRemotingServicesClass = interface(DNObjectClass)
  ['{8B692437-0FDA-5636-9008-E44B08618396}']
  { static methods } 

    {class} function IsTransparentProxy(proxy: DNObject): Boolean;
    {class} function GetRealProxy(proxy: DNObject): DNRealProxy;
    {class} function IsObjectOutOfContext(tp: DNObject): Boolean;
    {class} function IsObjectOutOfAppDomain(tp: DNObject): Boolean;
    {class} function GetSessionIdForMethodMessage(msg: DNIMethodMessage): string;
    {class} function GetObjectUri(obj: DNMarshalByRefObject): string;
    {class} procedure SetObjectUriForMarshal(obj: DNMarshalByRefObject; uri: string);
    {class} function Marshal(Obj: DNMarshalByRefObject): DNObjRef; overload;
    {class} function Marshal(Obj: DNMarshalByRefObject; URI: string): DNObjRef; overload;
    {class} function Marshal(Obj: DNMarshalByRefObject; ObjURI: string; RequestedType: DNType): DNObjRef; overload;
    {class} procedure GetObjectData(obj: DNObject; info: DNSerializationInfo; context: DNStreamingContext);
    {class} function Unmarshal(objectRef: DNObjRef): DNObject; overload;
    {class} function Unmarshal(objectRef: DNObjRef; fRefine: Boolean): DNObject; overload;
    {class} function Connect(classToProxy: DNType; url: string): DNObject; overload;
    {class} function Connect(classToProxy: DNType; url: string; data: DNObject): DNObject; overload;
    {class} function Disconnect(obj: DNMarshalByRefObject): Boolean;
    {class} function GetEnvoyChainForProxy(obj: DNMarshalByRefObject): DNIMessageSink;
    {class} function GetObjRefForProxy(obj: DNMarshalByRefObject): DNObjRef;
    {class} function GetMethodBaseFromMethodMessage(msg: DNIMethodMessage): DNMethodBase;
    {class} function IsMethodOverloaded(msg: DNIMethodMessage): Boolean;
    {class} function IsOneWay(method: DNMethodBase): Boolean;
    {class} function GetServerTypeForUri(URI: string): DNType;
    {class} function ExecuteMessage(target: DNMarshalByRefObject; reqMsg: DNIMethodCallMessage): DNIMethodReturnMessage;
    {class} procedure LogRemotingStage(stage: Int32);
    {class} function GetLifetimeService(obj: DNMarshalByRefObject): DNObject;

  end;

  [DNTypeName('System.Runtime.Remoting.RemotingServices')]
  DNRemotingServices = interface(DNObject)
  ['{8DF4C38A-8492-3C47-8332-D9D04FAF3C59}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRemotingServices = class(TDNGenericImport<DNRemotingServicesClass, DNRemotingServices>) end;

  //-------------namespace: System.Runtime.Remoting.Services----------------
  DNEnterpriseServicesHelperClass = interface(DNObjectClass)
  ['{340BC825-3A84-5705-AB22-70864BE15A3C}']
  { constructors } 

    {class} function init: DNEnterpriseServicesHelper;

  { static methods } 

    {class} function WrapIUnknownWithComObject(punk: IntPtr): DNObject;
    {class} function CreateConstructionReturnMessage(ctorMsg: DNIConstructionCallMessage; retObj: DNMarshalByRefObject): DNIConstructionReturnMessage;
    {class} procedure SwitchWrappers(oldcp: DNRealProxy; newcp: DNRealProxy);

  end;

  [DNTypeName('System.Runtime.Remoting.Services.EnterpriseServicesHelper')]
  DNEnterpriseServicesHelper = interface(DNObject)
  ['{BC5062B6-79E8-3F19-A87E-F9DAF826960C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEnterpriseServicesHelper = class(TDNGenericImport<DNEnterpriseServicesHelperClass, DNEnterpriseServicesHelper>) end;

  //-------------namespace: System.Runtime.Remoting.Services----------------
  DNTrackingServicesClass = interface(DNObjectClass)
  ['{A915C00F-D348-51F0-BF55-96F8080542BF}']
  { static getter & setter } 

    {class} function get_RegisteredHandlers: TArray<DNITrackingHandler>;

  { constructors } 

    {class} function init: DNTrackingServices;

  { static methods } 

    {class} procedure RegisterTrackingHandler(handler: DNITrackingHandler);
    {class} procedure UnregisterTrackingHandler(handler: DNITrackingHandler);

  { static propertys } 

    {class} property RegisteredHandlers: TArray<DNITrackingHandler> read get_RegisteredHandlers;
  end;

  [DNTypeName('System.Runtime.Remoting.Services.TrackingServices')]
  DNTrackingServices = interface(DNObject)
  ['{E822F35C-DDC2-3FB2-9768-A2AEBCED7C40}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTrackingServices = class(TDNGenericImport<DNTrackingServicesClass, DNTrackingServices>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNSoapServicesClass = interface(DNObjectClass)
  ['{A15C14AD-589B-52B1-832D-5A7748F159A8}']
  { static getter & setter } 

    {class} function get_XmlNsForClrType: string;
    {class} function get_XmlNsForClrTypeWithAssembly: string;
    {class} function get_XmlNsForClrTypeWithNs: string;
    {class} function get_XmlNsForClrTypeWithNsAndAssembly: string;

  { static methods } 

    {class} procedure PreLoad(assembly: DNAssembly); overload;
    {class} procedure GetInteropFieldTypeAndNameFromXmlElement(containingType: DNType; xmlElement: string; xmlNamespace: string; out &type: DNType; out name: string);
    {class} procedure GetInteropFieldTypeAndNameFromXmlAttribute(containingType: DNType; xmlAttribute: string; xmlNamespace: string; out &type: DNType; out name: string);
    {class} function GetXmlElementForInteropType(&type: DNType; out xmlElement: string; out xmlNamespace: string): Boolean;
    {class} function GetXmlTypeForInteropType(&type: DNType; out xmlType: string; out xmlTypeNamespace: string): Boolean;
    {class} function GetXmlNamespaceForMethodCall(mb: DNMethodBase): string;
    {class} function GetXmlNamespaceForMethodResponse(mb: DNMethodBase): string;
    {class} procedure RegisterSoapActionForMethodBase(mb: DNMethodBase); overload;
    {class} procedure RegisterSoapActionForMethodBase(mb: DNMethodBase; soapAction: string); overload;
    {class} function GetSoapActionFromMethodBase(mb: DNMethodBase): string;
    {class} function IsClrTypeNamespace(namespaceString: string): Boolean;
    {class} function CodeXmlNamespaceForClrTypeNamespace(typeNamespace: string; assemblyName: string): string;
    {class} procedure RegisterInteropXmlElement(xmlElement: string; xmlNamespace: string; &type: DNType);
    {class} procedure RegisterInteropXmlType(xmlType: string; xmlTypeNamespace: string; &type: DNType);
    {class} procedure PreLoad(&type: DNType); overload;
    {class} function GetInteropTypeFromXmlElement(xmlElement: string; xmlNamespace: string): DNType;
    {class} function GetInteropTypeFromXmlType(xmlType: string; xmlTypeNamespace: string): DNType;
    {class} function IsSoapActionValidForMethodBase(soapAction: string; mb: DNMethodBase): Boolean;
    {class} function GetTypeAndMethodNameFromSoapAction(soapAction: string; out typeName: string; out methodName: string): Boolean;
    {class} function DecodeXmlNamespaceForClrTypeNamespace(inNamespace: string; out typeNamespace: string; out assemblyName: string): Boolean;

  { static propertys } 

    {class} property XmlNsForClrType: string read get_XmlNsForClrType;
    {class} property XmlNsForClrTypeWithAssembly: string read get_XmlNsForClrTypeWithAssembly;
    {class} property XmlNsForClrTypeWithNs: string read get_XmlNsForClrTypeWithNs;
    {class} property XmlNsForClrTypeWithNsAndAssembly: string read get_XmlNsForClrTypeWithNsAndAssembly;
  end;

  [DNTypeName('System.Runtime.Remoting.SoapServices')]
  DNSoapServices = interface(DNObject)
  ['{DA5681DA-7C21-3A2D-AFAC-69E3A4D11F4D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSoapServices = class(TDNGenericImport<DNSoapServicesClass, DNSoapServices>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNTypeEntryClass = interface(DNObjectClass)
  ['{4F33F040-400D-58E0-954E-46CF17E123C8}']
  end;

  [DNTypeName('System.Runtime.Remoting.TypeEntry')]
  DNTypeEntry = interface(DNObject)
  ['{4E52D7D6-9FDF-3B59-B318-778E0F40F37C}']
  { getters & setters } 

    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNTypeEntry = class(TDNGenericImport<DNTypeEntryClass, DNTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNActivatedClientTypeEntryClass = interface(DNTypeEntryClass)
  ['{84AFF63C-5CA5-5739-80E9-03BE427C9C61}']
  { constructors } 

    {class} function init(typeName: string; assemblyName: string; appUrl: string): DNActivatedClientTypeEntry; overload;
    {class} function init(&type: DNType; appUrl: string): DNActivatedClientTypeEntry; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.ActivatedClientTypeEntry')]
  DNActivatedClientTypeEntry = interface(DNTypeEntry)
  ['{3ED0F148-E447-3EFE-8488-3C834082CC96}']
  { getters & setters } 

    function get_ApplicationUrl: string;
    function get_ObjectType: DNType;
    function get_ContextAttributes: TArray<DNIContextAttribute>;
    procedure set_ContextAttributes(value: TArray<DNIContextAttribute>);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ApplicationUrl: string read get_ApplicationUrl;
    property ObjectType: DNType read get_ObjectType;
    property ContextAttributes: TArray<DNIContextAttribute> read get_ContextAttributes write set_ContextAttributes;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNActivatedClientTypeEntry = class(TDNGenericImport<DNActivatedClientTypeEntryClass, DNActivatedClientTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNActivatedServiceTypeEntryClass = interface(DNTypeEntryClass)
  ['{181D48FE-E583-53CF-9730-5405C7ED20A6}']
  { constructors } 

    {class} function init(typeName: string; assemblyName: string): DNActivatedServiceTypeEntry; overload;
    {class} function init(&type: DNType): DNActivatedServiceTypeEntry; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.ActivatedServiceTypeEntry')]
  DNActivatedServiceTypeEntry = interface(DNTypeEntry)
  ['{6CD360CD-D53D-3775-87EF-00D72E6645F5}']
  { getters & setters } 

    function get_ObjectType: DNType;
    function get_ContextAttributes: TArray<DNIContextAttribute>;
    procedure set_ContextAttributes(value: TArray<DNIContextAttribute>);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ObjectType: DNType read get_ObjectType;
    property ContextAttributes: TArray<DNIContextAttribute> read get_ContextAttributes write set_ContextAttributes;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNActivatedServiceTypeEntry = class(TDNGenericImport<DNActivatedServiceTypeEntryClass, DNActivatedServiceTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNWellKnownClientTypeEntryClass = interface(DNTypeEntryClass)
  ['{1B1CE2B8-027F-57C1-864C-E59F08CB7986}']
  { constructors } 

    {class} function init(typeName: string; assemblyName: string; objectUrl: string): DNWellKnownClientTypeEntry; overload;
    {class} function init(&type: DNType; objectUrl: string): DNWellKnownClientTypeEntry; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.WellKnownClientTypeEntry')]
  DNWellKnownClientTypeEntry = interface(DNTypeEntry)
  ['{6B3B6647-B39D-3ED4-992F-DF6C49ACE82E}']
  { getters & setters } 

    function get_ObjectUrl: string;
    function get_ObjectType: DNType;
    function get_ApplicationUrl: string;
    procedure set_ApplicationUrl(value: string);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ObjectUrl: string read get_ObjectUrl;
    property ObjectType: DNType read get_ObjectType;
    property ApplicationUrl: string read get_ApplicationUrl write set_ApplicationUrl;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNWellKnownClientTypeEntry = class(TDNGenericImport<DNWellKnownClientTypeEntryClass, DNWellKnownClientTypeEntry>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNWellKnownServiceTypeEntryClass = interface(DNTypeEntryClass)
  ['{8D442020-FD59-5FE4-A8EF-98C9753F418F}']
  { constructors } 

    {class} function init(typeName: string; assemblyName: string; objectUri: string; mode: DNWellKnownObjectMode): DNWellKnownServiceTypeEntry; overload;
    {class} function init(&type: DNType; objectUri: string; mode: DNWellKnownObjectMode): DNWellKnownServiceTypeEntry; overload;

  end;

  [DNTypeName('System.Runtime.Remoting.WellKnownServiceTypeEntry')]
  DNWellKnownServiceTypeEntry = interface(DNTypeEntry)
  ['{2CE0DA26-18EF-3CF4-ABAC-BE90965F5F90}']
  { getters & setters } 

    function get_ObjectUri: string;
    function get_Mode: DNWellKnownObjectMode;
    function get_ObjectType: DNType;
    function get_ContextAttributes: TArray<DNIContextAttribute>;
    procedure set_ContextAttributes(value: TArray<DNIContextAttribute>);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ObjectUri: string read get_ObjectUri;
    property Mode: DNWellKnownObjectMode read get_Mode;
    property ObjectType: DNType read get_ObjectType;
    property ContextAttributes: TArray<DNIContextAttribute> read get_ContextAttributes write set_ContextAttributes;
    property TypeName: string read get_TypeName write set_TypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  TDNWellKnownServiceTypeEntry = class(TDNGenericImport<DNWellKnownServiceTypeEntryClass, DNWellKnownServiceTypeEntry>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNFormatterClass = interface(DNObjectClass)
  ['{14A373F2-DBAD-5357-9CBA-D5251F460BB0}']
  end;

  [DNTypeName('System.Runtime.Serialization.Formatter')]
  DNFormatter = interface(DNIFormatter)
  ['{E6854C08-0666-3939-BDF1-E1555A2C49FA}']
  { getters & setters } 

    function get_SurrogateSelector: DNISurrogateSelector;
    procedure set_SurrogateSelector(value: DNISurrogateSelector);
    function get_Binder: DNSerializationBinder;
    procedure set_Binder(value: DNSerializationBinder);
    function get_Context: DNStreamingContext;
    procedure set_Context(value: DNStreamingContext);

  { methods } 

    function Deserialize(serializationStream: DNStream): DNObject;
    procedure Serialize(serializationStream: DNStream; graph: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SurrogateSelector: DNISurrogateSelector read get_SurrogateSelector write set_SurrogateSelector;
    property Binder: DNSerializationBinder read get_Binder write set_Binder;
    property Context: DNStreamingContext read get_Context write set_Context;
  end;

  TDNFormatter = class(TDNGenericImport<DNFormatterClass, DNFormatter>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNFormatterConverterClass = interface(DNObjectClass)
  ['{11AFDF12-F8F6-5663-8BD6-C190CE783851}']
  { constructors } 

    {class} function init: DNFormatterConverter;

  end;

  [DNTypeName('System.Runtime.Serialization.FormatterConverter')]
  DNFormatterConverter = interface(DNIFormatterConverter)
  ['{D23D2F41-1D69-3E03-A275-32AE381223AC}']
  { methods } 

    function Convert(value: DNObject; &type: DNType): DNObject; overload;
    function Convert(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    function ToBoolean(value: DNObject): Boolean;
    function ToChar(value: DNObject): Char;
    function ToSByte(value: DNObject): SByte;
    function ToByte(value: DNObject): Byte;
    function ToInt16(value: DNObject): Int16;
    function ToUInt16(value: DNObject): UInt16;
    function ToInt32(value: DNObject): Int32;
    function ToUInt32(value: DNObject): UInt32;
    function ToInt64(value: DNObject): Int64;
    function ToUInt64(value: DNObject): UInt64;
    function ToSingle(value: DNObject): Single;
    function ToDouble(value: DNObject): Double;
    function ToDecimal(value: DNObject): DNDecimal;
    function ToDateTime(value: DNObject): DNDateTime;
    function ToString(value: DNObject): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string; overload;

  end;

  TDNFormatterConverter = class(TDNGenericImport<DNFormatterConverterClass, DNFormatterConverter>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters.Binary----------------
  DNBinaryFormatterClass = interface(DNObjectClass)
  ['{B127DDF9-5B74-522A-A985-3F31268B3C27}']
  { constructors } 

    {class} function init: DNBinaryFormatter; overload;
    {class} function init(selector: DNISurrogateSelector; context: DNStreamingContext): DNBinaryFormatter; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter')]
  DNBinaryFormatter = interface(DNIRemotingFormatter)
  ['{50369004-DB9A-3A75-BE7A-1D0EF017B9D3}']
  { getters & setters } 

    function get_TypeFormat: DNFormatterTypeStyle;
    procedure set_TypeFormat(value: DNFormatterTypeStyle);
    function get_AssemblyFormat: DNFormatterAssemblyStyle;
    procedure set_AssemblyFormat(value: DNFormatterAssemblyStyle);
    function get_FilterLevel: DNTypeFilterLevel;
    procedure set_FilterLevel(value: DNTypeFilterLevel);
    function get_SurrogateSelector: DNISurrogateSelector;
    procedure set_SurrogateSelector(value: DNISurrogateSelector);
    function get_Binder: DNSerializationBinder;
    procedure set_Binder(value: DNSerializationBinder);
    function get_Context: DNStreamingContext;
    procedure set_Context(value: DNStreamingContext);

  { methods } 

    procedure Serialize(serializationStream: DNStream; graph: DNObject); overload;
    function Deserialize(serializationStream: DNStream): DNObject; overload;
    function Deserialize(serializationStream: DNStream; handler: DNHeaderHandler): DNObject; overload;
    function DeserializeMethodResponse(serializationStream: DNStream; handler: DNHeaderHandler; methodCallMessage: DNIMethodCallMessage): DNObject;
    function UnsafeDeserialize(serializationStream: DNStream; handler: DNHeaderHandler): DNObject;
    function UnsafeDeserializeMethodResponse(serializationStream: DNStream; handler: DNHeaderHandler; methodCallMessage: DNIMethodCallMessage): DNObject;
    procedure Serialize(serializationStream: DNStream; graph: DNObject; headers: TArray<DNHeader>); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeFormat: DNFormatterTypeStyle read get_TypeFormat write set_TypeFormat;
    property AssemblyFormat: DNFormatterAssemblyStyle read get_AssemblyFormat write set_AssemblyFormat;
    property FilterLevel: DNTypeFilterLevel read get_FilterLevel write set_FilterLevel;
    property SurrogateSelector: DNISurrogateSelector read get_SurrogateSelector write set_SurrogateSelector;
    property Binder: DNSerializationBinder read get_Binder write set_Binder;
    property Context: DNStreamingContext read get_Context write set_Context;
  end;

  TDNBinaryFormatter = class(TDNGenericImport<DNBinaryFormatterClass, DNBinaryFormatter>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNInternalRMClass = interface(DNObjectClass)
  ['{C509F71D-141F-58E8-9217-0C862AFC9997}']
  { constructors } 

    {class} function init: DNInternalRM;

  { static methods } 

    {class} procedure InfoSoap(messages: TArray<DNObject>);
    {class} function SoapCheckEnabled: Boolean;

  end;

  [DNTypeName('System.Runtime.Serialization.Formatters.InternalRM')]
  DNInternalRM = interface(DNObject)
  ['{CF8F7FCF-94FE-3516-90E9-C103156DD2D5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalRM = class(TDNGenericImport<DNInternalRMClass, DNInternalRM>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNInternalSTClass = interface(DNObjectClass)
  ['{9A02E883-2F1E-53DE-8563-0988780C07A7}']
  { static methods } 

    {class} procedure InfoSoap(messages: TArray<DNObject>);
    {class} procedure SoapAssert(condition: Boolean; message: string);
    {class} procedure SerializationSetValue(fi: DNFieldInfo; target: DNObject; value: DNObject);
    {class} function LoadAssemblyFromString(assemblyString: string): DNAssembly;
    {class} function SoapCheckEnabled: Boolean;
    {class} procedure Soap(messages: TArray<DNObject>);

  end;

  [DNTypeName('System.Runtime.Serialization.Formatters.InternalST')]
  DNInternalST = interface(DNObject)
  ['{CBBAF6EC-251A-3480-8A3D-4D56BC7320D0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInternalST = class(TDNGenericImport<DNInternalSTClass, DNInternalST>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNServerFaultClass = interface(DNObjectClass)
  ['{74A928B1-05C5-502E-9C4F-19C783553E0B}']
  { constructors } 

    {class} function init(exceptionType: string; message: string; stackTrace: string): DNServerFault;

  end;

  [DNTypeName('System.Runtime.Serialization.Formatters.ServerFault')]
  DNServerFault = interface(DNObject)
  ['{817ACCB7-35D8-3C18-BAF2-0A5CE2157B74}']
  { getters & setters } 

    function get_ExceptionType: string;
    procedure set_ExceptionType(value: string);
    function get_ExceptionMessage: string;
    procedure set_ExceptionMessage(value: string);
    function get_StackTrace: string;
    procedure set_StackTrace(value: string);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ExceptionType: string read get_ExceptionType write set_ExceptionType;
    property ExceptionMessage: string read get_ExceptionMessage write set_ExceptionMessage;
    property StackTrace: string read get_StackTrace write set_StackTrace;
  end;

  TDNServerFault = class(TDNGenericImport<DNServerFaultClass, DNServerFault>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNSoapFaultClass = interface(DNObjectClass)
  ['{6F8BF5E0-B319-55B7-94D1-2581769690B3}']
  { constructors } 

    {class} function init: DNSoapFault; overload;
    {class} function init(faultCode: string; faultString: string; faultActor: string; serverFault: DNServerFault): DNSoapFault; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.Formatters.SoapFault')]
  DNSoapFault = interface(DNISerializable)
  ['{A8D058C4-D923-3859-9490-D3888FC90439}']
  { getters & setters } 

    function get_FaultCode: string;
    procedure set_FaultCode(value: string);
    function get_FaultString: string;
    procedure set_FaultString(value: string);
    function get_FaultActor: string;
    procedure set_FaultActor(value: string);
    function get_Detail: DNObject;
    procedure set_Detail(value: DNObject);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FaultCode: string read get_FaultCode write set_FaultCode;
    property FaultString: string read get_FaultString write set_FaultString;
    property FaultActor: string read get_FaultActor write set_FaultActor;
    property Detail: DNObject read get_Detail write set_Detail;
  end;

  TDNSoapFault = class(TDNGenericImport<DNSoapFaultClass, DNSoapFault>) end;

  //-------------namespace: System.Runtime.Serialization.Formatters----------------
  DNSoapMessageClass = interface(DNObjectClass)
  ['{D4451F7C-7787-5FEB-9712-2EF349146EBA}']
  { constructors } 

    {class} function init: DNSoapMessage;

  end;

  [DNTypeName('System.Runtime.Serialization.Formatters.SoapMessage')]
  DNSoapMessage = interface(DNISoapMessage)
  ['{E772BBE6-CB52-3C19-876A-D1BFA2305F4E}']
  { getters & setters } 

    function get_ParamNames: TArray<string>;
    procedure set_ParamNames(value: TArray<string>);
    function get_ParamValues: TArray<DNObject>;
    procedure set_ParamValues(value: TArray<DNObject>);
    function get_ParamTypes: TArray<DNType>;
    procedure set_ParamTypes(value: TArray<DNType>);
    function get_MethodName: string;
    procedure set_MethodName(value: string);
    function get_XmlNameSpace: string;
    procedure set_XmlNameSpace(value: string);
    function get_Headers: TArray<DNHeader>;
    procedure set_Headers(value: TArray<DNHeader>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ParamNames: TArray<string> read get_ParamNames write set_ParamNames;
    property ParamValues: TArray<DNObject> read get_ParamValues write set_ParamValues;
    property ParamTypes: TArray<DNType> read get_ParamTypes write set_ParamTypes;
    property MethodName: string read get_MethodName write set_MethodName;
    property XmlNameSpace: string read get_XmlNameSpace write set_XmlNameSpace;
    property Headers: TArray<DNHeader> read get_Headers write set_Headers;
  end;

  TDNSoapMessage = class(TDNGenericImport<DNSoapMessageClass, DNSoapMessage>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNFormatterServicesClass = interface(DNObjectClass)
  ['{80DC798C-99AA-5C44-B323-3FC44EB814A0}']
  { static methods } 

    {class} function GetUninitializedObject(&type: DNType): DNObject;
    {class} function GetSerializableMembers(&type: DNType; context: DNStreamingContext): TArray<DNMemberInfo>; overload;
    {class} function GetSerializableMembers(&type: DNType): TArray<DNMemberInfo>; overload;
    {class} procedure CheckTypeSecurity(t: DNType; securityLevel: DNTypeFilterLevel);
    {class} function GetSafeUninitializedObject(&type: DNType): DNObject;
    {class} function PopulateObjectMembers(obj: DNObject; members: TArray<DNMemberInfo>; data: TArray<DNObject>): DNObject;
    {class} function GetObjectData(obj: DNObject; members: TArray<DNMemberInfo>): TArray<DNObject>;
    {class} function GetSurrogateForCyclicalReference(innerSurrogate: DNISerializationSurrogate): DNISerializationSurrogate;
    {class} function GetTypeFromAssembly(assem: DNAssembly; name: string): DNType;

  end;

  [DNTypeName('System.Runtime.Serialization.FormatterServices')]
  DNFormatterServices = interface(DNObject)
  ['{688C32EA-1E9C-3A4B-90E0-A4D2A1D73F3F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNFormatterServices = class(TDNGenericImport<DNFormatterServicesClass, DNFormatterServices>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNObjectIDGeneratorClass = interface(DNObjectClass)
  ['{30352923-B7C1-556B-966A-130524BCA9E5}']
  { constructors } 

    {class} function init: DNObjectIDGenerator;

  end;

  [DNTypeName('System.Runtime.Serialization.ObjectIDGenerator')]
  DNObjectIDGenerator = interface(DNObject)
  ['{4F272C37-F0A8-350C-867B-2C03B2B16B80}']
  { methods } 

    function GetId(obj: DNObject; out firstTime: Boolean): Int64;
    function HasId(obj: DNObject; out firstTime: Boolean): Int64;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectIDGenerator = class(TDNGenericImport<DNObjectIDGeneratorClass, DNObjectIDGenerator>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNObjectManagerClass = interface(DNObjectClass)
  ['{49156234-C7F7-5683-8743-CB15F9E9C8D8}']
  { constructors } 

    {class} function init(selector: DNISurrogateSelector; context: DNStreamingContext): DNObjectManager;

  end;

  [DNTypeName('System.Runtime.Serialization.ObjectManager')]
  DNObjectManager = interface(DNObject)
  ['{C3A27C9A-5F79-3B7A-963D-39B1E5202B55}']
  { methods } 

    procedure RecordFixup(objectToBeFixed: Int64; member: DNMemberInfo; objectRequired: Int64);
    procedure RecordDelayedFixup(objectToBeFixed: Int64; memberName: string; objectRequired: Int64);
    procedure RecordArrayElementFixup(arrayToBeFixed: Int64; indices: TArray<Int32>; objectRequired: Int64); overload;
    function GetObject(objectID: Int64): DNObject;
    procedure RegisterObject(obj: DNObject; objectID: Int64); overload;
    procedure RegisterObject(obj: DNObject; objectID: Int64; info: DNSerializationInfo); overload;
    procedure RegisterObject(obj: DNObject; objectID: Int64; info: DNSerializationInfo; idOfContainingObj: Int64; member: DNMemberInfo); overload;
    procedure RegisterObject(obj: DNObject; objectID: Int64; info: DNSerializationInfo; idOfContainingObj: Int64; member: DNMemberInfo; arrayIndex: TArray<Int32>); overload;
    procedure DoFixups;
    procedure RecordArrayElementFixup(arrayToBeFixed: Int64; index: Int32; objectRequired: Int64); overload;
    procedure RaiseDeserializationEvent;
    procedure RaiseOnDeserializingEvent(obj: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectManager = class(TDNGenericImport<DNObjectManagerClass, DNObjectManager>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationBinderClass = interface(DNObjectClass)
  ['{CA48EC69-1F5E-5E4A-9A6F-279DCD8D594F}']
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationBinder')]
  DNSerializationBinder = interface(DNObject)
  ['{25D97DB7-BDC3-3205-B86B-956B852ECE76}']
  { methods } 

    procedure BindToName(serializedType: DNType; out assemblyName: string; out typeName: string);
    function BindToType(assemblyName: string; typeName: string): DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSerializationBinder = class(TDNGenericImport<DNSerializationBinderClass, DNSerializationBinder>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoClass = interface(DNObjectClass)
  ['{6D0A7427-90BC-5668-9ED7-5A9CEF393EB7}']
  { constructors } 

    {class} function init(&type: DNType; converter: DNIFormatterConverter): DNSerializationInfo; overload;
    {class} function init(&type: DNType; converter: DNIFormatterConverter; requireSameTokenInPartialTrust: Boolean): DNSerializationInfo; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.SerializationInfo')]
  DNSerializationInfo = interface(DNObject)
  ['{D69398C1-7541-33E7-B544-A803F380FFB6}']
  { getters & setters } 

    function get_FullTypeName: string;
    procedure set_FullTypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_MemberCount: Int32;
    function get_ObjectType: DNType;
    function get_IsFullTypeNameSetExplicit: Boolean;
    function get_IsAssemblyNameSetExplicit: Boolean;

  { methods } 

    procedure SetType(&type: DNType);
    function GetEnumerator: DNSerializationInfoEnumerator;
    procedure AddValue(name: string; value: DNObject; &type: DNType); overload;
    procedure AddValue(name: string; value: DNObject); overload;
    procedure AddValue(name: string; value: Boolean); overload;
    procedure AddValue(name: string; value: Char); overload;
    procedure AddValue(name: string; value: SByte); overload;
    procedure AddValue(name: string; value: Byte); overload;
    procedure AddValue(name: string; value: Int16); overload;
    procedure AddValue(name: string; value: UInt16); overload;
    procedure AddValue(name: string; value: Int32); overload;
    procedure AddValue(name: string; value: UInt32); overload;
    procedure AddValue(name: string; value: Int64); overload;
    procedure AddValue(name: string; value: UInt64); overload;
    procedure AddValue(name: string; value: Single); overload;
    procedure AddValue(name: string; value: Double); overload;
    procedure AddValue(name: string; value: DNDecimal); overload;
    procedure AddValue(name: string; value: DNDateTime); overload;
    function GetValue(name: string; &type: DNType): DNObject;
    function GetBoolean(name: string): Boolean;
    function GetChar(name: string): Char;
    function GetSByte(name: string): SByte;
    function GetByte(name: string): Byte;
    function GetInt16(name: string): Int16;
    function GetUInt16(name: string): UInt16;
    function GetInt32(name: string): Int32;
    function GetUInt32(name: string): UInt32;
    function GetInt64(name: string): Int64;
    function GetUInt64(name: string): UInt64;
    function GetSingle(name: string): Single;
    function GetDouble(name: string): Double;
    function GetDecimal(name: string): DNDecimal;
    function GetDateTime(name: string): DNDateTime;
    function GetString(name: string): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FullTypeName: string read get_FullTypeName write set_FullTypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property MemberCount: Int32 read get_MemberCount;
    property ObjectType: DNType read get_ObjectType;
    property IsFullTypeNameSetExplicit: Boolean read get_IsFullTypeNameSetExplicit;
    property IsAssemblyNameSetExplicit: Boolean read get_IsAssemblyNameSetExplicit;
  end;

  TDNSerializationInfo = class(TDNGenericImport<DNSerializationInfoClass, DNSerializationInfo>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoEnumeratorClass = interface(DNObjectClass)
  ['{E59FCE29-C320-53A7-8535-AFB0330F8F6C}']
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationInfoEnumerator')]
  DNSerializationInfoEnumerator = interface(DNIEnumerator)
  ['{341BA870-B7FE-3CBC-9A72-B7894C6EC171}']
  { getters & setters } 

    function get_Current: DNSerializationEntry;
    function get_Name: string;
    function get_Value: DNObject;
    function get_ObjectType: DNType;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Current: DNSerializationEntry read get_Current;
    property Name: string read get_Name;
    property Value: DNObject read get_Value;
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationInfoEnumerator = class(TDNGenericImport<DNSerializationInfoEnumeratorClass, DNSerializationInfoEnumerator>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationObjectManagerClass = interface(DNObjectClass)
  ['{92C31CDF-A363-5757-B69E-E1496B566251}']
  { constructors } 

    {class} function init(context: DNStreamingContext): DNSerializationObjectManager;

  end;

  [DNTypeName('System.Runtime.Serialization.SerializationObjectManager')]
  DNSerializationObjectManager = interface(DNObject)
  ['{09E3FE70-EBE0-308B-9F4A-9E4D4F06AE0A}']
  { methods } 

    procedure RegisterObject(obj: DNObject);
    procedure RaiseOnSerializedEvent;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSerializationObjectManager = class(TDNGenericImport<DNSerializationObjectManagerClass, DNSerializationObjectManager>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSurrogateSelectorClass = interface(DNObjectClass)
  ['{87DE4F3B-C999-51C7-8D00-BD1430932725}']
  { constructors } 

    {class} function init: DNSurrogateSelector;

  end;

  [DNTypeName('System.Runtime.Serialization.SurrogateSelector')]
  DNSurrogateSelector = interface(DNISurrogateSelector)
  ['{88C8A919-EB24-3CCA-84F7-2EA82BB3F3ED}']
  { methods } 

    procedure AddSurrogate(&type: DNType; context: DNStreamingContext; surrogate: DNISerializationSurrogate);
    procedure ChainSelector(selector: DNISurrogateSelector);
    function GetNextSelector: DNISurrogateSelector;
    function GetSurrogate(&type: DNType; context: DNStreamingContext; out selector: DNISurrogateSelector): DNISerializationSurrogate;
    procedure RemoveSurrogate(&type: DNType; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSurrogateSelector = class(TDNGenericImport<DNSurrogateSelectorClass, DNSurrogateSelector>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNCompatibilitySwitchClass = interface(DNObjectClass)
  ['{6009938C-F9E1-5635-9116-7F52F10552C7}']
  { static methods } 

    {class} function IsEnabled(compatibilitySwitchName: string): Boolean;
    {class} function GetValue(compatibilitySwitchName: string): string;

  end;

  [DNTypeName('System.Runtime.Versioning.CompatibilitySwitch')]
  DNCompatibilitySwitch = interface(DNObject)
  ['{ED081889-F6CB-3FB2-A84E-FD6E7878ED49}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompatibilitySwitch = class(TDNGenericImport<DNCompatibilitySwitchClass, DNCompatibilitySwitch>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNVersioningHelperClass = interface(DNObjectClass)
  ['{067339BB-3C11-580A-9C46-85706332919D}']
  { static methods } 

    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope; &type: DNType): string; overload;
    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope): string; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.VersioningHelper')]
  DNVersioningHelper = interface(DNObject)
  ['{22B4BE4B-1D84-3925-BECF-86B6B71675BA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNVersioningHelper = class(TDNGenericImport<DNVersioningHelperClass, DNVersioningHelper>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAceEnumeratorClass = interface(DNObjectClass)
  ['{87394E61-313C-56EE-8E26-BD8BCBC574D9}']
  end;

  [DNTypeName('System.Security.AccessControl.AceEnumerator')]
  DNAceEnumerator = interface(DNIEnumerator)
  ['{C7824897-476B-31FD-A25D-1EA1EC9F0EEB}']
  { getters & setters } 

    function get_Current: DNGenericAce;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Current: DNGenericAce read get_Current;
  end;

  TDNAceEnumerator = class(TDNGenericImport<DNAceEnumeratorClass, DNAceEnumerator>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAuthorizationRuleClass = interface(DNObjectClass)
  ['{DB499750-4216-54B1-8488-9270B947CF46}']
  end;

  [DNTypeName('System.Security.AccessControl.AuthorizationRule')]
  DNAuthorizationRule = interface(DNObject)
  ['{B08E48AE-0571-3483-AC2D-A6281F749BFA}']
  { getters & setters } 

    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAuthorizationRule = class(TDNGenericImport<DNAuthorizationRuleClass, DNAuthorizationRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAccessRuleClass = interface(DNAuthorizationRuleClass)
  ['{CFF756A8-87C8-5704-BD35-47336422BC6F}']
  end;

  [DNTypeName('System.Security.AccessControl.AccessRule')]
  DNAccessRule = interface(DNAuthorizationRule)
  ['{82188F09-9D7F-3980-A8D0-EB2A1B4912D3}']
  { getters & setters } 

    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAccessRule = class(TDNGenericImport<DNAccessRuleClass, DNAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAccessRuleClass<T> = interface(DNAccessRuleClass)
  ['{9ED99525-97AF-5B38-8346-F8F6AE093B23}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; rights: T; &type: DNAccessControlType): DNAccessRule<T>; overload;
    {class} function init(identity: string; rights: T; &type: DNAccessControlType): DNAccessRule<T>; overload;
    {class} function init(identity: DNIdentityReference; rights: T; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule<T>; overload;
    {class} function init(identity: string; rights: T; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule<T>; overload;

  end;

  [DNTypeName('System.Security.AccessControl.AccessRule`1')]
  DNAccessRule<T> = interface(DNAccessRule)
  ['{7D74B781-38AA-3541-B39B-3A5CBC3FFD6F}']
  { getters & setters } 

    function get_Rights: T;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Rights: T read get_Rights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAccessRule<T> = class(TDNGenericImport<DNAccessRuleClass<T>, DNAccessRule<T>>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCryptoKeyAccessRuleClass = interface(DNAccessRuleClass)
  ['{2127AF1B-EE88-5E4E-93C5-1F1364F45C1A}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; cryptoKeyRights: DNCryptoKeyRights; &type: DNAccessControlType): DNCryptoKeyAccessRule; overload;
    {class} function init(identity: string; cryptoKeyRights: DNCryptoKeyRights; &type: DNAccessControlType): DNCryptoKeyAccessRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.CryptoKeyAccessRule')]
  DNCryptoKeyAccessRule = interface(DNAccessRule)
  ['{8E05C0A9-41EB-38A3-AFD1-2306676133F8}']
  { getters & setters } 

    function get_CryptoKeyRights: DNCryptoKeyRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CryptoKeyRights: DNCryptoKeyRights read get_CryptoKeyRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNCryptoKeyAccessRule = class(TDNGenericImport<DNCryptoKeyAccessRuleClass, DNCryptoKeyAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNEventWaitHandleAccessRuleClass = interface(DNAccessRuleClass)
  ['{51404DFE-9EBB-54A0-B2CB-2F8806989046}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; eventRights: DNEventWaitHandleRights; &type: DNAccessControlType): DNEventWaitHandleAccessRule; overload;
    {class} function init(identity: string; eventRights: DNEventWaitHandleRights; &type: DNAccessControlType): DNEventWaitHandleAccessRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.EventWaitHandleAccessRule')]
  DNEventWaitHandleAccessRule = interface(DNAccessRule)
  ['{3E9C2438-8E3D-30AC-8A2B-2439DFEF2E69}']
  { getters & setters } 

    function get_EventWaitHandleRights: DNEventWaitHandleRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EventWaitHandleRights: DNEventWaitHandleRights read get_EventWaitHandleRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNEventWaitHandleAccessRule = class(TDNGenericImport<DNEventWaitHandleAccessRuleClass, DNEventWaitHandleAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSystemAccessRuleClass = interface(DNAccessRuleClass)
  ['{3E698BFC-A999-585D-B1A0-78CE680BF23F}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; &type: DNAccessControlType): DNFileSystemAccessRule; overload;
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; &type: DNAccessControlType): DNFileSystemAccessRule; overload;
    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNFileSystemAccessRule; overload;
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNFileSystemAccessRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.FileSystemAccessRule')]
  DNFileSystemAccessRule = interface(DNAccessRule)
  ['{05C01EC9-1ADB-36EC-B9DC-1D2DDEE2ED3D}']
  { getters & setters } 

    function get_FileSystemRights: DNFileSystemRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FileSystemRights: DNFileSystemRights read get_FileSystemRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNFileSystemAccessRule = class(TDNGenericImport<DNFileSystemAccessRuleClass, DNFileSystemAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNMutexAccessRuleClass = interface(DNAccessRuleClass)
  ['{03A3221B-DAC6-54A5-982D-9243EB06A9B5}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; eventRights: DNMutexRights; &type: DNAccessControlType): DNMutexAccessRule; overload;
    {class} function init(identity: string; eventRights: DNMutexRights; &type: DNAccessControlType): DNMutexAccessRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.MutexAccessRule')]
  DNMutexAccessRule = interface(DNAccessRule)
  ['{C1B9D602-726D-3CF8-9F6B-65B4F65A011E}']
  { getters & setters } 

    function get_MutexRights: DNMutexRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MutexRights: DNMutexRights read get_MutexRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNMutexAccessRule = class(TDNGenericImport<DNMutexAccessRuleClass, DNMutexAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectAccessRuleClass = interface(DNAccessRuleClass)
  ['{CBF25A1D-5C2C-5D85-907C-8E00E1D308F9}']
  end;

  [DNTypeName('System.Security.AccessControl.ObjectAccessRule')]
  DNObjectAccessRule = interface(DNAccessRule)
  ['{4AF6C85B-E5D3-3B13-B2BB-13D293F5B12A}']
  { getters & setters } 

    function get_ObjectType: DNGuid;
    function get_InheritedObjectType: DNGuid;
    function get_ObjectFlags: DNObjectAceFlags;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ObjectType: DNGuid read get_ObjectType;
    property InheritedObjectType: DNGuid read get_InheritedObjectType;
    property ObjectFlags: DNObjectAceFlags read get_ObjectFlags;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNObjectAccessRule = class(TDNGenericImport<DNObjectAccessRuleClass, DNObjectAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRegistryAccessRuleClass = interface(DNAccessRuleClass)
  ['{FB7F63E6-D5CF-55F9-B14F-522BA61511FE}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; registryRights: DNRegistryRights; &type: DNAccessControlType): DNRegistryAccessRule; overload;
    {class} function init(identity: string; registryRights: DNRegistryRights; &type: DNAccessControlType): DNRegistryAccessRule; overload;
    {class} function init(identity: DNIdentityReference; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNRegistryAccessRule; overload;
    {class} function init(identity: string; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNRegistryAccessRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.RegistryAccessRule')]
  DNRegistryAccessRule = interface(DNAccessRule)
  ['{FCF00A0E-C9F1-3CA8-9B54-D83180DFC91A}']
  { getters & setters } 

    function get_RegistryRights: DNRegistryRights;
    function get_AccessControlType: DNAccessControlType;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property RegistryRights: DNRegistryRights read get_RegistryRights;
    property AccessControlType: DNAccessControlType read get_AccessControlType;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNRegistryAccessRule = class(TDNGenericImport<DNRegistryAccessRuleClass, DNRegistryAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAuditRuleClass = interface(DNAuthorizationRuleClass)
  ['{442D199D-E1D2-5F66-9E80-BD480D97E410}']
  end;

  [DNTypeName('System.Security.AccessControl.AuditRule')]
  DNAuditRule = interface(DNAuthorizationRule)
  ['{E19BEA92-F3C2-3AD4-ACF2-BDAFDA403355}']
  { getters & setters } 

    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAuditRule = class(TDNGenericImport<DNAuditRuleClass, DNAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNAuditRuleClass<T> = interface(DNAuditRuleClass)
  ['{85035FD2-B695-5B06-B422-437230B6CF0B}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; rights: T; flags: DNAuditFlags): DNAuditRule<T>; overload;
    {class} function init(identity: DNIdentityReference; rights: T; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule<T>; overload;
    {class} function init(identity: string; rights: T; flags: DNAuditFlags): DNAuditRule<T>; overload;
    {class} function init(identity: string; rights: T; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule<T>; overload;

  end;

  [DNTypeName('System.Security.AccessControl.AuditRule`1')]
  DNAuditRule<T> = interface(DNAuditRule)
  ['{2F7C4810-CD1D-3497-976B-8EC655B386BA}']
  { getters & setters } 

    function get_Rights: T;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Rights: T read get_Rights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNAuditRule<T> = class(TDNGenericImport<DNAuditRuleClass<T>, DNAuditRule<T>>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCryptoKeyAuditRuleClass = interface(DNAuditRuleClass)
  ['{4FEEA6D0-E1E7-5C0C-8E57-25D9823D0689}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; cryptoKeyRights: DNCryptoKeyRights; flags: DNAuditFlags): DNCryptoKeyAuditRule; overload;
    {class} function init(identity: string; cryptoKeyRights: DNCryptoKeyRights; flags: DNAuditFlags): DNCryptoKeyAuditRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.CryptoKeyAuditRule')]
  DNCryptoKeyAuditRule = interface(DNAuditRule)
  ['{03B8E6B3-3E27-3C83-B7AC-3F1A4FCF9CE1}']
  { getters & setters } 

    function get_CryptoKeyRights: DNCryptoKeyRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CryptoKeyRights: DNCryptoKeyRights read get_CryptoKeyRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNCryptoKeyAuditRule = class(TDNGenericImport<DNCryptoKeyAuditRuleClass, DNCryptoKeyAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNEventWaitHandleAuditRuleClass = interface(DNAuditRuleClass)
  ['{772C8843-6975-5B74-8D65-1665AB4D4B82}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; eventRights: DNEventWaitHandleRights; flags: DNAuditFlags): DNEventWaitHandleAuditRule;

  end;

  [DNTypeName('System.Security.AccessControl.EventWaitHandleAuditRule')]
  DNEventWaitHandleAuditRule = interface(DNAuditRule)
  ['{92F70A2B-BAC4-3A5B-95C5-3E172399FBFD}']
  { getters & setters } 

    function get_EventWaitHandleRights: DNEventWaitHandleRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EventWaitHandleRights: DNEventWaitHandleRights read get_EventWaitHandleRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNEventWaitHandleAuditRule = class(TDNGenericImport<DNEventWaitHandleAuditRuleClass, DNEventWaitHandleAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSystemAuditRuleClass = interface(DNAuditRuleClass)
  ['{196375D0-3111-5693-8425-8F93B47C2282}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; flags: DNAuditFlags): DNFileSystemAuditRule; overload;
    {class} function init(identity: DNIdentityReference; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNFileSystemAuditRule; overload;
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; flags: DNAuditFlags): DNFileSystemAuditRule; overload;
    {class} function init(identity: string; fileSystemRights: DNFileSystemRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNFileSystemAuditRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.FileSystemAuditRule')]
  DNFileSystemAuditRule = interface(DNAuditRule)
  ['{6818FCDF-9617-3ECE-9982-C472E5721181}']
  { getters & setters } 

    function get_FileSystemRights: DNFileSystemRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FileSystemRights: DNFileSystemRights read get_FileSystemRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNFileSystemAuditRule = class(TDNGenericImport<DNFileSystemAuditRuleClass, DNFileSystemAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNMutexAuditRuleClass = interface(DNAuditRuleClass)
  ['{C2535945-C7F8-5AE2-A483-088F63E14C1B}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; eventRights: DNMutexRights; flags: DNAuditFlags): DNMutexAuditRule;

  end;

  [DNTypeName('System.Security.AccessControl.MutexAuditRule')]
  DNMutexAuditRule = interface(DNAuditRule)
  ['{3A402EF4-99F3-3E7A-8A7F-9B38A6175875}']
  { getters & setters } 

    function get_MutexRights: DNMutexRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MutexRights: DNMutexRights read get_MutexRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNMutexAuditRule = class(TDNGenericImport<DNMutexAuditRuleClass, DNMutexAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectAuditRuleClass = interface(DNAuditRuleClass)
  ['{2DB4BBFC-B0C5-5069-B42B-E2BB1614FE08}']
  end;

  [DNTypeName('System.Security.AccessControl.ObjectAuditRule')]
  DNObjectAuditRule = interface(DNAuditRule)
  ['{377E2684-1A29-3C23-A128-F6F493A469CD}']
  { getters & setters } 

    function get_ObjectType: DNGuid;
    function get_InheritedObjectType: DNGuid;
    function get_ObjectFlags: DNObjectAceFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ObjectType: DNGuid read get_ObjectType;
    property InheritedObjectType: DNGuid read get_InheritedObjectType;
    property ObjectFlags: DNObjectAceFlags read get_ObjectFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNObjectAuditRule = class(TDNGenericImport<DNObjectAuditRuleClass, DNObjectAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRegistryAuditRuleClass = interface(DNAuditRuleClass)
  ['{53EF857F-C44E-5AFA-A8FD-49F0B1CEE78E}']
  { constructors } 

    {class} function init(identity: DNIdentityReference; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNRegistryAuditRule; overload;
    {class} function init(identity: string; registryRights: DNRegistryRights; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNRegistryAuditRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.RegistryAuditRule')]
  DNRegistryAuditRule = interface(DNAuditRule)
  ['{E04E4218-92C1-3D1B-8042-C09103F5A1F8}']
  { getters & setters } 

    function get_RegistryRights: DNRegistryRights;
    function get_AuditFlags: DNAuditFlags;
    function get_IdentityReference: DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property RegistryRights: DNRegistryRights read get_RegistryRights;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property IdentityReference: DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
  end;

  TDNRegistryAuditRule = class(TDNGenericImport<DNRegistryAuditRuleClass, DNRegistryAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNGenericAceClass = interface(DNObjectClass)
  ['{F93B6CF8-DEC8-5253-B462-BC95EF258025}']
  { static methods } 

    {class} function CreateFromBinaryForm(binaryForm: TArray<Byte>; offset: Int32): DNGenericAce;

  end;

  [DNTypeName('System.Security.AccessControl.GenericAce')]
  DNGenericAce = interface(DNObject)
  ['{4B9BD9C5-85AB-3B67-9512-E708C6DE798B}']
  { getters & setters } 

    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_BinaryLength: Int32;

  { methods } 

    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNGenericAce = class(TDNGenericImport<DNGenericAceClass, DNGenericAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCustomAceClass = interface(DNGenericAceClass)
  ['{951A1E06-6778-5A39-B5DA-CBB4E5B437D6}']
  { constructors } 

    {class} function init(&type: DNAceType; flags: DNAceFlags; opaque: TArray<Byte>): DNCustomAce;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxOpaqueLength: Int32;

  { static fields } 

    {class} property MaxOpaqueLength: Int32 read __fakeFieldGet_MaxOpaqueLength;

  end;

  [DNTypeName('System.Security.AccessControl.CustomAce')]
  DNCustomAce = interface(DNGenericAce)
  ['{10592DE1-A121-340B-AC31-C5C1EDC4FCF5}']
  { getters & setters } 

    function get_OpaqueLength: Int32;
    function get_BinaryLength: Int32;
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    function GetOpaque: TArray<Byte>;
    procedure SetOpaque(opaque: TArray<Byte>);
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property OpaqueLength: Int32 read get_OpaqueLength;
    property BinaryLength: Int32 read get_BinaryLength;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNCustomAce = class(TDNGenericImport<DNCustomAceClass, DNCustomAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNKnownAceClass = interface(DNGenericAceClass)
  ['{BB3AAAE9-3AAB-5293-9C55-6F8BA687B9DE}']
  end;

  [DNTypeName('System.Security.AccessControl.KnownAce')]
  DNKnownAce = interface(DNGenericAce)
  ['{3E5B42D3-CB7D-3071-9D02-7AD9D5B1EE70}']
  { getters & setters } 

    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_BinaryLength: Int32;

  { methods } 

    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNKnownAce = class(TDNGenericImport<DNKnownAceClass, DNKnownAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCompoundAceClass = interface(DNKnownAceClass)
  ['{BBA13BB7-A871-5A5F-A609-7DD93290FC4D}']
  { constructors } 

    {class} function init(flags: DNAceFlags; accessMask: Int32; compoundAceType: DNCompoundAceType; sid: DNSecurityIdentifier): DNCompoundAce;

  end;

  [DNTypeName('System.Security.AccessControl.CompoundAce')]
  DNCompoundAce = interface(DNKnownAce)
  ['{421CB600-F3F6-32E4-B21D-EF741FB3EFDB}']
  { getters & setters } 

    function get_CompoundAceType: DNCompoundAceType;
    procedure set_CompoundAceType(value: DNCompoundAceType);
    function get_BinaryLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CompoundAceType: DNCompoundAceType read get_CompoundAceType write set_CompoundAceType;
    property BinaryLength: Int32 read get_BinaryLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNCompoundAce = class(TDNGenericImport<DNCompoundAceClass, DNCompoundAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNQualifiedAceClass = interface(DNKnownAceClass)
  ['{387E089C-D932-55FE-A95A-86D7EB31D0A3}']
  end;

  [DNTypeName('System.Security.AccessControl.QualifiedAce')]
  DNQualifiedAce = interface(DNKnownAce)
  ['{BA4BBFE9-CA85-3AED-8D38-CE71B983EC73}']
  { getters & setters } 

    function get_AceQualifier: DNAceQualifier;
    function get_IsCallback: Boolean;
    function get_OpaqueLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;
    function get_BinaryLength: Int32;

  { methods } 

    function GetOpaque: TArray<Byte>;
    procedure SetOpaque(opaque: TArray<Byte>);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AceQualifier: DNAceQualifier read get_AceQualifier;
    property IsCallback: Boolean read get_IsCallback;
    property OpaqueLength: Int32 read get_OpaqueLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNQualifiedAce = class(TDNGenericImport<DNQualifiedAceClass, DNQualifiedAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonAceClass = interface(DNQualifiedAceClass)
  ['{E591472F-3CC9-5E71-8976-226914598CFC}']
  { constructors } 

    {class} function init(flags: DNAceFlags; qualifier: DNAceQualifier; accessMask: Int32; sid: DNSecurityIdentifier; isCallback: Boolean; opaque: TArray<Byte>): DNCommonAce;

  { static methods } 

    {class} function MaxOpaqueLength(isCallback: Boolean): Int32;

  end;

  [DNTypeName('System.Security.AccessControl.CommonAce')]
  DNCommonAce = interface(DNQualifiedAce)
  ['{156D0064-6580-3E25-86C9-AAA55315115E}']
  { getters & setters } 

    function get_BinaryLength: Int32;
    function get_AceQualifier: DNAceQualifier;
    function get_IsCallback: Boolean;
    function get_OpaqueLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetOpaque: TArray<Byte>;
    procedure SetOpaque(opaque: TArray<Byte>);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BinaryLength: Int32 read get_BinaryLength;
    property AceQualifier: DNAceQualifier read get_AceQualifier;
    property IsCallback: Boolean read get_IsCallback;
    property OpaqueLength: Int32 read get_OpaqueLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNCommonAce = class(TDNGenericImport<DNCommonAceClass, DNCommonAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectAceClass = interface(DNQualifiedAceClass)
  ['{C546DCFE-C402-5569-9EFB-54295A1F9A97}']
  { constructors } 

    {class} function init(aceFlags: DNAceFlags; qualifier: DNAceQualifier; accessMask: Int32; sid: DNSecurityIdentifier; flags: DNObjectAceFlags; &type: DNGuid; inheritedType: DNGuid; isCallback: Boolean; opaque: TArray<Byte>): DNObjectAce;

  { static methods } 

    {class} function MaxOpaqueLength(isCallback: Boolean): Int32;

  end;

  [DNTypeName('System.Security.AccessControl.ObjectAce')]
  DNObjectAce = interface(DNQualifiedAce)
  ['{C38DC0AC-44DE-3502-BDE4-B77A98A16E66}']
  { getters & setters } 

    function get_ObjectAceFlags: DNObjectAceFlags;
    procedure set_ObjectAceFlags(value: DNObjectAceFlags);
    function get_ObjectAceType: DNGuid;
    procedure set_ObjectAceType(value: DNGuid);
    function get_InheritedObjectAceType: DNGuid;
    procedure set_InheritedObjectAceType(value: DNGuid);
    function get_BinaryLength: Int32;
    function get_AceQualifier: DNAceQualifier;
    function get_IsCallback: Boolean;
    function get_OpaqueLength: Int32;
    function get_AccessMask: Int32;
    procedure set_AccessMask(value: Int32);
    function get_SecurityIdentifier: DNSecurityIdentifier;
    procedure set_SecurityIdentifier(value: DNSecurityIdentifier);
    function get_AceType: DNAceType;
    function get_AceFlags: DNAceFlags;
    procedure set_AceFlags(value: DNAceFlags);
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DNInheritanceFlags;
    function get_PropagationFlags: DNPropagationFlags;
    function get_AuditFlags: DNAuditFlags;

  { methods } 

    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetOpaque: TArray<Byte>;
    procedure SetOpaque(opaque: TArray<Byte>);
    function Copy: DNGenericAce;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ObjectAceFlags: DNObjectAceFlags read get_ObjectAceFlags write set_ObjectAceFlags;
    property ObjectAceType: DNGuid read get_ObjectAceType write set_ObjectAceType;
    property InheritedObjectAceType: DNGuid read get_InheritedObjectAceType write set_InheritedObjectAceType;
    property BinaryLength: Int32 read get_BinaryLength;
    property AceQualifier: DNAceQualifier read get_AceQualifier;
    property IsCallback: Boolean read get_IsCallback;
    property OpaqueLength: Int32 read get_OpaqueLength;
    property AccessMask: Int32 read get_AccessMask write set_AccessMask;
    property SecurityIdentifier: DNSecurityIdentifier read get_SecurityIdentifier write set_SecurityIdentifier;
    property AceType: DNAceType read get_AceType;
    property AceFlags: DNAceFlags read get_AceFlags write set_AceFlags;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DNPropagationFlags read get_PropagationFlags;
    property AuditFlags: DNAuditFlags read get_AuditFlags;
  end;

  TDNObjectAce = class(TDNGenericImport<DNObjectAceClass, DNObjectAce>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNGenericAclClass = interface(DNObjectClass)
  ['{623DCDD6-71B1-5BD8-99D7-39CE25601051}']
  { static fields getter & setter } 

   function __fakeFieldGet_AclRevision: Byte;
   function __fakeFieldGet_AclRevisionDS: Byte;
   function __fakeFieldGet_MaxBinaryLength: Int32;

  { static fields } 

    {class} property AclRevision: Byte read __fakeFieldGet_AclRevision;
    {class} property AclRevisionDS: Byte read __fakeFieldGet_AclRevisionDS;
    {class} property MaxBinaryLength: Int32 read __fakeFieldGet_MaxBinaryLength;

  end;

  [DNTypeName('System.Security.AccessControl.GenericAcl')]
  DNGenericAcl = interface(DNICollection)
  ['{54050215-A62D-305B-9240-2870C61EDDF2}']
  { getters & setters } 

    function get_Revision: Byte;
    function get_BinaryLength: Int32;
    function get_Item(index: Int32): DNGenericAce;
    procedure set_Item(index: Int32; value: DNGenericAce);
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Revision: Byte read get_Revision;
    property BinaryLength: Int32 read get_BinaryLength;
    property Item[index: Int32]: DNGenericAce read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNGenericAcl = class(TDNGenericImport<DNGenericAclClass, DNGenericAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonAclClass = interface(DNGenericAclClass)
  ['{880A66CD-D127-5329-8B9B-B0E4643653C5}']
  end;

  [DNTypeName('System.Security.AccessControl.CommonAcl')]
  DNCommonAcl = interface(DNGenericAcl)
  ['{9929DF6C-F2D8-311D-B96A-96E559CCD561}']
  { getters & setters } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_IsCanonical: Boolean;
    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    procedure RemoveInheritedAces;
    procedure Purge(sid: DNSecurityIdentifier);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Revision: Byte read get_Revision;
    property Count: Int32 read get_Count;
    property BinaryLength: Int32 read get_BinaryLength;
    property IsCanonical: Boolean read get_IsCanonical;
    property IsContainer: Boolean read get_IsContainer;
    property IsDS: Boolean read get_IsDS;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNCommonAcl = class(TDNGenericImport<DNCommonAclClass, DNCommonAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNDiscretionaryAclClass = interface(DNCommonAclClass)
  ['{73167F4B-3E1A-507B-B44A-7331207C6439}']
  { constructors } 

    {class} function init(isContainer: Boolean; isDS: Boolean; capacity: Int32): DNDiscretionaryAcl; overload;
    {class} function init(isContainer: Boolean; isDS: Boolean; revision: Byte; capacity: Int32): DNDiscretionaryAcl; overload;
    {class} function init(isContainer: Boolean; isDS: Boolean; rawAcl: DNRawAcl): DNDiscretionaryAcl; overload;

  end;

  [DNTypeName('System.Security.AccessControl.DiscretionaryAcl')]
  DNDiscretionaryAcl = interface(DNCommonAcl)
  ['{73B64929-C030-33AB-B58F-3DD78A15022B}']
  { getters & setters } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_IsCanonical: Boolean;
    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    procedure AddAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    procedure SetAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    function RemoveAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags): Boolean; overload;
    procedure RemoveAccessSpecific(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    procedure AddAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule); overload;
    procedure AddAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    procedure SetAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule); overload;
    procedure SetAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    function RemoveAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule): Boolean; overload;
    function RemoveAccess(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid): Boolean; overload;
    procedure RemoveAccessSpecific(accessType: DNAccessControlType; sid: DNSecurityIdentifier; rule: DNObjectAccessRule); overload;
    procedure RemoveAccessSpecific(accessType: DNAccessControlType; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    procedure RemoveInheritedAces;
    procedure Purge(sid: DNSecurityIdentifier);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Revision: Byte read get_Revision;
    property Count: Int32 read get_Count;
    property BinaryLength: Int32 read get_BinaryLength;
    property IsCanonical: Boolean read get_IsCanonical;
    property IsContainer: Boolean read get_IsContainer;
    property IsDS: Boolean read get_IsDS;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNDiscretionaryAcl = class(TDNGenericImport<DNDiscretionaryAclClass, DNDiscretionaryAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNSystemAclClass = interface(DNCommonAclClass)
  ['{D93F2F82-A6F2-5AD5-86EE-A5998885F988}']
  { constructors } 

    {class} function init(isContainer: Boolean; isDS: Boolean; capacity: Int32): DNSystemAcl; overload;
    {class} function init(isContainer: Boolean; isDS: Boolean; revision: Byte; capacity: Int32): DNSystemAcl; overload;
    {class} function init(isContainer: Boolean; isDS: Boolean; rawAcl: DNRawAcl): DNSystemAcl; overload;

  end;

  [DNTypeName('System.Security.AccessControl.SystemAcl')]
  DNSystemAcl = interface(DNCommonAcl)
  ['{4BBBB01D-4D69-3587-8BDF-EEBE1D91991C}']
  { getters & setters } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_IsCanonical: Boolean;
    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    procedure AddAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    procedure SetAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    function RemoveAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags): Boolean; overload;
    procedure RemoveAuditSpecific(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags); overload;
    procedure AddAudit(sid: DNSecurityIdentifier; rule: DNObjectAuditRule); overload;
    procedure AddAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    procedure SetAudit(sid: DNSecurityIdentifier; rule: DNObjectAuditRule); overload;
    procedure SetAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    function RemoveAudit(sid: DNSecurityIdentifier; rule: DNObjectAuditRule): Boolean; overload;
    function RemoveAudit(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid): Boolean; overload;
    procedure RemoveAuditSpecific(sid: DNSecurityIdentifier; rule: DNObjectAuditRule); overload;
    procedure RemoveAuditSpecific(auditFlags: DNAuditFlags; sid: DNSecurityIdentifier; accessMask: Int32; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; objectFlags: DNObjectAceFlags; objectType: DNGuid; inheritedObjectType: DNGuid); overload;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    procedure RemoveInheritedAces;
    procedure Purge(sid: DNSecurityIdentifier);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Revision: Byte read get_Revision;
    property Count: Int32 read get_Count;
    property BinaryLength: Int32 read get_BinaryLength;
    property IsCanonical: Boolean read get_IsCanonical;
    property IsContainer: Boolean read get_IsContainer;
    property IsDS: Boolean read get_IsDS;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNSystemAcl = class(TDNGenericImport<DNSystemAclClass, DNSystemAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRawAclClass = interface(DNGenericAclClass)
  ['{C8027FD0-C5BE-595C-8888-D12EAE588DA3}']
  { constructors } 

    {class} function init(revision: Byte; capacity: Int32): DNRawAcl; overload;
    {class} function init(binaryForm: TArray<Byte>; offset: Int32): DNRawAcl; overload;

  end;

  [DNTypeName('System.Security.AccessControl.RawAcl')]
  DNRawAcl = interface(DNGenericAcl)
  ['{8ACF0D5E-B5B9-3374-B448-CCE69CA901E2}']
  { getters & setters } 

    function get_Revision: Byte;
    function get_Count: Int32;
    function get_BinaryLength: Int32;
    function get_Item(index: Int32): DNGenericAce;
    procedure set_Item(index: Int32; value: DNGenericAce);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    procedure InsertAce(index: Int32; ace: DNGenericAce);
    procedure RemoveAce(index: Int32);
    procedure CopyTo(&array: TArray<DNGenericAce>; index: Int32);
    function GetEnumerator: DNAceEnumerator;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Revision: Byte read get_Revision;
    property Count: Int32 read get_Count;
    property BinaryLength: Int32 read get_BinaryLength;
    property Item[index: Int32]: DNGenericAce read get_Item write set_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNRawAcl = class(TDNGenericImport<DNRawAclClass, DNRawAcl>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNGenericSecurityDescriptorClass = interface(DNObjectClass)
  ['{DB14E0B8-D172-58BC-B76F-C7892D167AED}']
  { static getter & setter } 

    {class} function get_Revision: Byte;

  { static methods } 

    {class} function IsSddlConversionSupported: Boolean;

  { static propertys } 

    {class} property Revision: Byte read get_Revision;
  end;

  [DNTypeName('System.Security.AccessControl.GenericSecurityDescriptor')]
  DNGenericSecurityDescriptor = interface(DNObject)
  ['{D3937FA4-013D-3019-A9D0-2C2323EE4E31}']
  { getters & setters } 

    function get_ControlFlags: DNControlFlags;
    function get_Owner: DNSecurityIdentifier;
    procedure set_Owner(value: DNSecurityIdentifier);
    function get_Group: DNSecurityIdentifier;
    procedure set_Group(value: DNSecurityIdentifier);
    function get_BinaryLength: Int32;

  { methods } 

    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetSddlForm(includeSections: DNAccessControlSections): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ControlFlags: DNControlFlags read get_ControlFlags;
    property Owner: DNSecurityIdentifier read get_Owner write set_Owner;
    property Group: DNSecurityIdentifier read get_Group write set_Group;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNGenericSecurityDescriptor = class(TDNGenericImport<DNGenericSecurityDescriptorClass, DNGenericSecurityDescriptor>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonSecurityDescriptorClass = interface(DNGenericSecurityDescriptorClass)
  ['{BD8CFC4F-27CB-5E46-BE46-90981367760E}']
  { constructors } 

    {class} function init(isContainer: Boolean; isDS: Boolean; flags: DNControlFlags; owner: DNSecurityIdentifier; group: DNSecurityIdentifier; systemAcl: DNSystemAcl; discretionaryAcl: DNDiscretionaryAcl): DNCommonSecurityDescriptor; overload;
    {class} function init(isContainer: Boolean; isDS: Boolean; rawSecurityDescriptor: DNRawSecurityDescriptor): DNCommonSecurityDescriptor; overload;
    {class} function init(isContainer: Boolean; isDS: Boolean; sddlForm: string): DNCommonSecurityDescriptor; overload;
    {class} function init(isContainer: Boolean; isDS: Boolean; binaryForm: TArray<Byte>; offset: Int32): DNCommonSecurityDescriptor; overload;

  end;

  [DNTypeName('System.Security.AccessControl.CommonSecurityDescriptor')]
  DNCommonSecurityDescriptor = interface(DNGenericSecurityDescriptor)
  ['{78600CD4-D091-37C5-A005-E840A508ABDB}']
  { getters & setters } 

    function get_IsContainer: Boolean;
    function get_IsDS: Boolean;
    function get_ControlFlags: DNControlFlags;
    function get_Owner: DNSecurityIdentifier;
    procedure set_Owner(value: DNSecurityIdentifier);
    function get_Group: DNSecurityIdentifier;
    procedure set_Group(value: DNSecurityIdentifier);
    function get_SystemAcl: DNSystemAcl;
    procedure set_SystemAcl(value: DNSystemAcl);
    function get_DiscretionaryAcl: DNDiscretionaryAcl;
    procedure set_DiscretionaryAcl(value: DNDiscretionaryAcl);
    function get_IsSystemAclCanonical: Boolean;
    function get_IsDiscretionaryAclCanonical: Boolean;
    function get_BinaryLength: Int32;

  { methods } 

    procedure SetSystemAclProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetDiscretionaryAclProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure PurgeAccessControl(sid: DNSecurityIdentifier);
    procedure PurgeAudit(sid: DNSecurityIdentifier);
    procedure AddDiscretionaryAcl(revision: Byte; trusted: Int32);
    procedure AddSystemAcl(revision: Byte; trusted: Int32);
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetSddlForm(includeSections: DNAccessControlSections): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsContainer: Boolean read get_IsContainer;
    property IsDS: Boolean read get_IsDS;
    property ControlFlags: DNControlFlags read get_ControlFlags;
    property Owner: DNSecurityIdentifier read get_Owner write set_Owner;
    property Group: DNSecurityIdentifier read get_Group write set_Group;
    property SystemAcl: DNSystemAcl read get_SystemAcl write set_SystemAcl;
    property DiscretionaryAcl: DNDiscretionaryAcl read get_DiscretionaryAcl write set_DiscretionaryAcl;
    property IsSystemAclCanonical: Boolean read get_IsSystemAclCanonical;
    property IsDiscretionaryAclCanonical: Boolean read get_IsDiscretionaryAclCanonical;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNCommonSecurityDescriptor = class(TDNGenericImport<DNCommonSecurityDescriptorClass, DNCommonSecurityDescriptor>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRawSecurityDescriptorClass = interface(DNGenericSecurityDescriptorClass)
  ['{6BA7953D-617A-53C4-A731-E0D088F0B06B}']
  { constructors } 

    {class} function init(flags: DNControlFlags; owner: DNSecurityIdentifier; group: DNSecurityIdentifier; systemAcl: DNRawAcl; discretionaryAcl: DNRawAcl): DNRawSecurityDescriptor; overload;
    {class} function init(sddlForm: string): DNRawSecurityDescriptor; overload;
    {class} function init(binaryForm: TArray<Byte>; offset: Int32): DNRawSecurityDescriptor; overload;

  end;

  [DNTypeName('System.Security.AccessControl.RawSecurityDescriptor')]
  DNRawSecurityDescriptor = interface(DNGenericSecurityDescriptor)
  ['{C6D87293-53B6-3A48-AC5D-86502229B89A}']
  { getters & setters } 

    function get_ControlFlags: DNControlFlags;
    function get_Owner: DNSecurityIdentifier;
    procedure set_Owner(value: DNSecurityIdentifier);
    function get_Group: DNSecurityIdentifier;
    procedure set_Group(value: DNSecurityIdentifier);
    function get_SystemAcl: DNRawAcl;
    procedure set_SystemAcl(value: DNRawAcl);
    function get_DiscretionaryAcl: DNRawAcl;
    procedure set_DiscretionaryAcl(value: DNRawAcl);
    function get_ResourceManagerControl: Byte;
    procedure set_ResourceManagerControl(value: Byte);
    function get_BinaryLength: Int32;

  { methods } 

    procedure SetFlags(flags: DNControlFlags);
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function GetSddlForm(includeSections: DNAccessControlSections): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ControlFlags: DNControlFlags read get_ControlFlags;
    property Owner: DNSecurityIdentifier read get_Owner write set_Owner;
    property Group: DNSecurityIdentifier read get_Group write set_Group;
    property SystemAcl: DNRawAcl read get_SystemAcl write set_SystemAcl;
    property DiscretionaryAcl: DNRawAcl read get_DiscretionaryAcl write set_DiscretionaryAcl;
    property ResourceManagerControl: Byte read get_ResourceManagerControl write set_ResourceManagerControl;
    property BinaryLength: Int32 read get_BinaryLength;
  end;

  TDNRawSecurityDescriptor = class(TDNGenericImport<DNRawSecurityDescriptorClass, DNRawSecurityDescriptor>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectSecurityClass = interface(DNObjectClass)
  ['{5B4C3FC8-AE2D-5210-BBE8-3888E35FD24D}']
  { static methods } 

    {class} function IsSddlConversionSupported: Boolean;

  end;

  [DNTypeName('System.Security.AccessControl.ObjectSecurity')]
  DNObjectSecurity = interface(DNObject)
  ['{86AB64A5-C64B-3D80-832D-02E0E8703D4C}']
  { getters & setters } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNObjectSecurity = class(TDNGenericImport<DNObjectSecurityClass, DNObjectSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCommonObjectSecurityClass = interface(DNObjectSecurityClass)
  ['{7AF5A750-FBA8-599E-8A71-E3A5D3C678D4}']
  end;

  [DNTypeName('System.Security.AccessControl.CommonObjectSecurity')]
  DNCommonObjectSecurity = interface(DNObjectSecurity)
  ['{094790A0-69AF-36AD-B914-2FEE49AD2B8B}']
  { getters & setters } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNCommonObjectSecurity = class(TDNGenericImport<DNCommonObjectSecurityClass, DNCommonObjectSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNNativeObjectSecurityClass = interface(DNCommonObjectSecurityClass)
  ['{BD99CA42-8A63-51EC-A80B-6B64D3CAF0F8}']
  end;

  [DNTypeName('System.Security.AccessControl.NativeObjectSecurity')]
  DNNativeObjectSecurity = interface(DNCommonObjectSecurity)
  ['{A4F31F56-3EEF-3A46-8C86-53DA29DF55E0}']
  { getters & setters } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNNativeObjectSecurity = class(TDNGenericImport<DNNativeObjectSecurityClass, DNNativeObjectSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNCryptoKeySecurityClass = interface(DNNativeObjectSecurityClass)
  ['{023CDC23-4210-5F9F-B1D4-3183178E0655}']
  { constructors } 

    {class} function init: DNCryptoKeySecurity; overload;
    {class} function init(securityDescriptor: DNCommonSecurityDescriptor): DNCryptoKeySecurity; overload;

  end;

  [DNTypeName('System.Security.AccessControl.CryptoKeySecurity')]
  DNCryptoKeySecurity = interface(DNNativeObjectSecurity)
  ['{644CFA5D-3000-3F8A-99E6-FE10197B6C79}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNCryptoKeyAccessRule);
    procedure SetAccessRule(rule: DNCryptoKeyAccessRule);
    procedure ResetAccessRule(rule: DNCryptoKeyAccessRule);
    function RemoveAccessRule(rule: DNCryptoKeyAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNCryptoKeyAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNCryptoKeyAccessRule);
    procedure AddAuditRule(rule: DNCryptoKeyAuditRule);
    procedure SetAuditRule(rule: DNCryptoKeyAuditRule);
    function RemoveAuditRule(rule: DNCryptoKeyAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNCryptoKeyAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNCryptoKeyAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNCryptoKeySecurity = class(TDNGenericImport<DNCryptoKeySecurityClass, DNCryptoKeySecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNEventWaitHandleSecurityClass = interface(DNNativeObjectSecurityClass)
  ['{BD1912CD-1298-5727-A4B6-0FE3B9D6C881}']
  { constructors } 

    {class} function init: DNEventWaitHandleSecurity;

  end;

  [DNTypeName('System.Security.AccessControl.EventWaitHandleSecurity')]
  DNEventWaitHandleSecurity = interface(DNNativeObjectSecurity)
  ['{40399A3A-7066-3F43-9216-7E1E3AF80032}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNEventWaitHandleAccessRule);
    procedure SetAccessRule(rule: DNEventWaitHandleAccessRule);
    procedure ResetAccessRule(rule: DNEventWaitHandleAccessRule);
    function RemoveAccessRule(rule: DNEventWaitHandleAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNEventWaitHandleAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNEventWaitHandleAccessRule);
    procedure AddAuditRule(rule: DNEventWaitHandleAuditRule);
    procedure SetAuditRule(rule: DNEventWaitHandleAuditRule);
    function RemoveAuditRule(rule: DNEventWaitHandleAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNEventWaitHandleAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNEventWaitHandleAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNEventWaitHandleSecurity = class(TDNGenericImport<DNEventWaitHandleSecurityClass, DNEventWaitHandleSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSystemSecurityClass = interface(DNNativeObjectSecurityClass)
  ['{65622040-28E6-5234-A333-802D0FF93A6A}']
  end;

  [DNTypeName('System.Security.AccessControl.FileSystemSecurity')]
  DNFileSystemSecurity = interface(DNNativeObjectSecurity)
  ['{2498CD98-E5FD-37E9-A087-7F21AC7EB306}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNFileSystemAccessRule);
    procedure SetAccessRule(rule: DNFileSystemAccessRule);
    procedure ResetAccessRule(rule: DNFileSystemAccessRule);
    function RemoveAccessRule(rule: DNFileSystemAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNFileSystemAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNFileSystemAccessRule);
    procedure AddAuditRule(rule: DNFileSystemAuditRule);
    procedure SetAuditRule(rule: DNFileSystemAuditRule);
    function RemoveAuditRule(rule: DNFileSystemAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNFileSystemAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNFileSystemAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNFileSystemSecurity = class(TDNGenericImport<DNFileSystemSecurityClass, DNFileSystemSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNDirectorySecurityClass = interface(DNFileSystemSecurityClass)
  ['{05F97541-DC6B-53BA-877D-5E1BE09358BB}']
  { constructors } 

    {class} function init: DNDirectorySecurity; overload;
    {class} function init(name: string; includeSections: DNAccessControlSections): DNDirectorySecurity; overload;

  end;

  [DNTypeName('System.Security.AccessControl.DirectorySecurity')]
  DNDirectorySecurity = interface(DNFileSystemSecurity)
  ['{9ADA9878-87D9-3BF7-BE70-86A1046C2038}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNFileSystemAccessRule);
    procedure SetAccessRule(rule: DNFileSystemAccessRule);
    procedure ResetAccessRule(rule: DNFileSystemAccessRule);
    function RemoveAccessRule(rule: DNFileSystemAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNFileSystemAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNFileSystemAccessRule);
    procedure AddAuditRule(rule: DNFileSystemAuditRule);
    procedure SetAuditRule(rule: DNFileSystemAuditRule);
    function RemoveAuditRule(rule: DNFileSystemAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNFileSystemAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNFileSystemAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNDirectorySecurity = class(TDNGenericImport<DNDirectorySecurityClass, DNDirectorySecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNFileSecurityClass = interface(DNFileSystemSecurityClass)
  ['{F811F8E0-15A8-586D-8CBE-8F4D258057F7}']
  { constructors } 

    {class} function init: DNFileSecurity; overload;
    {class} function init(fileName: string; includeSections: DNAccessControlSections): DNFileSecurity; overload;

  end;

  [DNTypeName('System.Security.AccessControl.FileSecurity')]
  DNFileSecurity = interface(DNFileSystemSecurity)
  ['{DFFFF83D-FC29-3C1E-B8B9-4A6E5D2B9086}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNFileSystemAccessRule);
    procedure SetAccessRule(rule: DNFileSystemAccessRule);
    procedure ResetAccessRule(rule: DNFileSystemAccessRule);
    function RemoveAccessRule(rule: DNFileSystemAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNFileSystemAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNFileSystemAccessRule);
    procedure AddAuditRule(rule: DNFileSystemAuditRule);
    procedure SetAuditRule(rule: DNFileSystemAuditRule);
    function RemoveAuditRule(rule: DNFileSystemAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNFileSystemAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNFileSystemAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNFileSecurity = class(TDNGenericImport<DNFileSecurityClass, DNFileSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNMutexSecurityClass = interface(DNNativeObjectSecurityClass)
  ['{BD99C6CD-7BBD-5D2A-B5BB-66E2F97A30F3}']
  { constructors } 

    {class} function init: DNMutexSecurity; overload;
    {class} function init(name: string; includeSections: DNAccessControlSections): DNMutexSecurity; overload;

  end;

  [DNTypeName('System.Security.AccessControl.MutexSecurity')]
  DNMutexSecurity = interface(DNNativeObjectSecurity)
  ['{8D9FBB7E-1245-3FB9-81DD-969686FE2DA3}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    procedure AddAccessRule(rule: DNMutexAccessRule);
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure SetAccessRule(rule: DNMutexAccessRule);
    procedure ResetAccessRule(rule: DNMutexAccessRule);
    function RemoveAccessRule(rule: DNMutexAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNMutexAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNMutexAccessRule);
    procedure AddAuditRule(rule: DNMutexAuditRule);
    procedure SetAuditRule(rule: DNMutexAuditRule);
    function RemoveAuditRule(rule: DNMutexAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNMutexAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNMutexAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNMutexSecurity = class(TDNGenericImport<DNMutexSecurityClass, DNMutexSecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNObjectSecurityClass<T> = interface(DNNativeObjectSecurityClass)
  ['{0FF5B137-1282-5EB4-8AAE-3982428F13EB}']
  end;

  [DNTypeName('System.Security.AccessControl.ObjectSecurity`1')]
  DNObjectSecurity<T> = interface(DNNativeObjectSecurity)
  ['{C5D29FDE-1275-37B9-B7EF-3625D1A677A4}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNAccessRule<T>);
    procedure SetAccessRule(rule: DNAccessRule<T>);
    procedure ResetAccessRule(rule: DNAccessRule<T>);
    function RemoveAccessRule(rule: DNAccessRule<T>): Boolean;
    procedure RemoveAccessRuleAll(rule: DNAccessRule<T>);
    procedure RemoveAccessRuleSpecific(rule: DNAccessRule<T>);
    procedure AddAuditRule(rule: DNAuditRule<T>);
    procedure SetAuditRule(rule: DNAuditRule<T>);
    function RemoveAuditRule(rule: DNAuditRule<T>): Boolean;
    procedure RemoveAuditRuleAll(rule: DNAuditRule<T>);
    procedure RemoveAuditRuleSpecific(rule: DNAuditRule<T>);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNObjectSecurity<T> = class(TDNGenericImport<DNObjectSecurityClass<T>, DNObjectSecurity<T>>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNRegistrySecurityClass = interface(DNNativeObjectSecurityClass)
  ['{38A92A5F-2E4D-5721-BFE3-C76943D9DE72}']
  { constructors } 

    {class} function init: DNRegistrySecurity;

  end;

  [DNTypeName('System.Security.AccessControl.RegistrySecurity')]
  DNRegistrySecurity = interface(DNNativeObjectSecurity)
  ['{E7EA361F-99F1-35C6-83D2-0D3D17CE772A}']
  { getters & setters } 

    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule;
    procedure AddAccessRule(rule: DNRegistryAccessRule);
    procedure SetAccessRule(rule: DNRegistryAccessRule);
    procedure ResetAccessRule(rule: DNRegistryAccessRule);
    function RemoveAccessRule(rule: DNRegistryAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNRegistryAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNRegistryAccessRule);
    procedure AddAuditRule(rule: DNRegistryAuditRule);
    procedure SetAuditRule(rule: DNRegistryAuditRule);
    function RemoveAuditRule(rule: DNRegistryAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNRegistryAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNRegistryAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNRegistrySecurity = class(TDNGenericImport<DNRegistrySecurityClass, DNRegistrySecurity>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNDirectoryObjectSecurityClass = interface(DNObjectSecurityClass)
  ['{81242ED6-6E96-566A-96E5-02E4AF275796}']
  end;

  [DNTypeName('System.Security.AccessControl.DirectoryObjectSecurity')]
  DNDirectoryObjectSecurity = interface(DNObjectSecurity)
  ['{EBB62DC9-204E-32E8-B6E2-025AE4D7DA5D}']
  { getters & setters } 

    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;
    function get_AccessRightType: DNType;
    function get_AccessRuleType: DNType;
    function get_AuditRuleType: DNType;

  { methods } 

    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType; objectType: DNGuid; inheritedObjectType: DNGuid): DNAccessRule; overload;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags; objectType: DNGuid; inheritedObjectType: DNGuid): DNAuditRule; overload;
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DNType): DNAuthorizationRuleCollection;
    function GetOwner(targetType: DNType): DNIdentityReference;
    procedure SetOwner(identity: DNIdentityReference);
    function GetGroup(targetType: DNType): DNIdentityReference;
    procedure SetGroup(identity: DNIdentityReference);
    procedure PurgeAccessRules(identity: DNIdentityReference);
    procedure PurgeAuditRules(identity: DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DNAccessControlModification; rule: DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DNAccessControlModification; rule: DNAuditRule; out modified: Boolean): Boolean;
    function AccessRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; &type: DNAccessControlType): DNAccessRule; overload;
    function AuditRuleFactory(identityReference: DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DNInheritanceFlags; propagationFlags: DNPropagationFlags; flags: DNAuditFlags): DNAuditRule; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
    property AccessRightType: DNType read get_AccessRightType;
    property AccessRuleType: DNType read get_AccessRuleType;
    property AuditRuleType: DNType read get_AuditRuleType;
  end;

  TDNDirectoryObjectSecurity = class(TDNGenericImport<DNDirectoryObjectSecurityClass, DNDirectoryObjectSecurity>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimClass = interface(DNObjectClass)
  ['{1C286339-E98B-57A1-B709-F0DE9BA53583}']
  { constructors } 

    {class} function init(reader: DNBinaryReader): DNClaim; overload;
    {class} function init(reader: DNBinaryReader; subject: DNClaimsIdentity): DNClaim; overload;
    {class} function init(&type: string; value: string): DNClaim; overload;
    {class} function init(&type: string; value: string; valueType: string): DNClaim; overload;
    {class} function init(&type: string; value: string; valueType: string; issuer: string): DNClaim; overload;
    {class} function init(&type: string; value: string; valueType: string; issuer: string; originalIssuer: string): DNClaim; overload;
    {class} function init(&type: string; value: string; valueType: string; issuer: string; originalIssuer: string; subject: DNClaimsIdentity): DNClaim; overload;

  end;

  [DNTypeName('System.Security.Claims.Claim')]
  DNClaim = interface(DNObject)
  ['{39A7D87A-AD1E-3A11-BE8F-DE504626DD67}']
  { getters & setters } 

    function get_Issuer: string;
    function get_OriginalIssuer: string;
    function get_Properties: DNIDictionary<string, string>;
    function get_Subject: DNClaimsIdentity;
    function get_Type: string;
    function get_Value: string;
    function get_ValueType: string;

  { methods } 

    function Clone: DNClaim; overload;
    function Clone(identity: DNClaimsIdentity): DNClaim; overload;
    procedure WriteTo(writer: DNBinaryWriter);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Issuer: string read get_Issuer;
    property OriginalIssuer: string read get_OriginalIssuer;
    property Properties: DNIDictionary<string, string> read get_Properties;
    property Subject: DNClaimsIdentity read get_Subject;
    property &Type: string read get_Type;
    property Value: string read get_Value;
    property ValueType: string read get_ValueType;
  end;

  TDNClaim = class(TDNGenericImport<DNClaimClass, DNClaim>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimsIdentityClass = interface(DNObjectClass)
  ['{C17FFF08-6881-5AC8-BBD9-2B839684649C}']
  { constructors } 

    {class} function init: DNClaimsIdentity; overload;
    {class} function init(identity: DNIIdentity): DNClaimsIdentity; overload;
    {class} function init(claims: DNIEnumerable<DNClaim>): DNClaimsIdentity; overload;
    {class} function init(authenticationType: string): DNClaimsIdentity; overload;
    {class} function init(claims: DNIEnumerable<DNClaim>; authenticationType: string): DNClaimsIdentity; overload;
    {class} function init(identity: DNIIdentity; claims: DNIEnumerable<DNClaim>): DNClaimsIdentity; overload;
    {class} function init(authenticationType: string; nameType: string; roleType: string): DNClaimsIdentity; overload;
    {class} function init(claims: DNIEnumerable<DNClaim>; authenticationType: string; nameType: string; roleType: string): DNClaimsIdentity; overload;
    {class} function init(identity: DNIIdentity; claims: DNIEnumerable<DNClaim>; authenticationType: string; nameType: string; roleType: string): DNClaimsIdentity; overload;
    {class} function init(reader: DNBinaryReader): DNClaimsIdentity; overload;

  end;

  [DNTypeName('System.Security.Claims.ClaimsIdentity')]
  DNClaimsIdentity = interface(DNIIdentity)
  ['{21C7F1A2-37FB-3BFF-9819-F586A7702F36}']
  { getters & setters } 

    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;
    function get_Actor: DNClaimsIdentity;
    procedure set_Actor(value: DNClaimsIdentity);
    function get_BootstrapContext: DNObject;
    procedure set_BootstrapContext(value: DNObject);
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Label: string;
    procedure set_Label(value: string);
    function get_Name: string;
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    procedure AddClaim(claim: DNClaim);
    function Clone: DNClaimsIdentity;
    procedure AddClaims(claims: DNIEnumerable<DNClaim>);
    function TryRemoveClaim(claim: DNClaim): Boolean;
    procedure RemoveClaim(claim: DNClaim);
    function FindAll(match: DNPredicate<DNClaim>): DNIEnumerable<DNClaim>; overload;
    function FindAll(&type: string): DNIEnumerable<DNClaim>; overload;
    function HasClaim(match: DNPredicate<DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    function FindFirst(match: DNPredicate<DNClaim>): DNClaim; overload;
    function FindFirst(&type: string): DNClaim; overload;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AuthenticationType: string read get_AuthenticationType;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property Actor: DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DNObject read get_BootstrapContext write set_BootstrapContext;
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property &Label: string read get_Label write set_Label;
    property Name: string read get_Name;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNClaimsIdentity = class(TDNGenericImport<DNClaimsIdentityClass, DNClaimsIdentity>)
  public const
   DefaultIssuer = 'LOCAL AUTHORITY';
   DefaultNameClaimType = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name';
   DefaultRoleClaimType = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role';
  end;

  //-------------namespace: System.Security.Principal----------------
  DNGenericIdentityClass = interface(DNClaimsIdentityClass)
  ['{6267CC34-9AFF-5E2C-BBAD-B00B5999FC1C}']
  { constructors } 

    {class} function init(name: string): DNGenericIdentity; overload;
    {class} function init(name: string; &type: string): DNGenericIdentity; overload;

  end;

  [DNTypeName('System.Security.Principal.GenericIdentity')]
  DNGenericIdentity = interface(DNClaimsIdentity)
  ['{4C534A8E-3C46-3745-BDAE-5119C40F98E7}']
  { getters & setters } 

    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;
    function get_Actor: DNClaimsIdentity;
    procedure set_Actor(value: DNClaimsIdentity);
    function get_BootstrapContext: DNObject;
    procedure set_BootstrapContext(value: DNObject);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    function Clone: DNClaimsIdentity;
    procedure AddClaim(claim: DNClaim);
    procedure AddClaims(claims: DNIEnumerable<DNClaim>);
    function TryRemoveClaim(claim: DNClaim): Boolean;
    procedure RemoveClaim(claim: DNClaim);
    function FindAll(match: DNPredicate<DNClaim>): DNIEnumerable<DNClaim>; overload;
    function FindAll(&type: string): DNIEnumerable<DNClaim>; overload;
    function HasClaim(match: DNPredicate<DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    function FindFirst(match: DNPredicate<DNClaim>): DNClaim; overload;
    function FindFirst(&type: string): DNClaim; overload;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Name: string read get_Name;
    property AuthenticationType: string read get_AuthenticationType;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property Actor: DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DNObject read get_BootstrapContext write set_BootstrapContext;
    property &Label: string read get_Label write set_Label;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNGenericIdentity = class(TDNGenericImport<DNGenericIdentityClass, DNGenericIdentity>) end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsIdentityClass = interface(DNClaimsIdentityClass)
  ['{DA3168A0-AAAF-568D-B466-E2FE34E1AD0B}']
  { constructors } 

    {class} function init(userToken: IntPtr): DNWindowsIdentity; overload;
    {class} function init(userToken: IntPtr; &type: string): DNWindowsIdentity; overload;
    {class} function init(userToken: IntPtr; &type: string; acctType: DNWindowsAccountType): DNWindowsIdentity; overload;
    {class} function init(userToken: IntPtr; &type: string; acctType: DNWindowsAccountType; isAuthenticated: Boolean): DNWindowsIdentity; overload;
    {class} function init(sUserPrincipalName: string): DNWindowsIdentity; overload;
    {class} function init(sUserPrincipalName: string; &type: string): DNWindowsIdentity; overload;
    {class} function init(info: DNSerializationInfo; context: DNStreamingContext): DNWindowsIdentity; overload;

  { static methods } 

    {class} function GetCurrent: DNWindowsIdentity; overload;
    {class} function GetCurrent(ifImpersonating: Boolean): DNWindowsIdentity; overload;
    {class} function GetCurrent(desiredAccess: DNTokenAccessLevels): DNWindowsIdentity; overload;
    {class} function GetAnonymous: DNWindowsIdentity;
    {class} procedure RunImpersonated(safeAccessTokenHandle: DNSafeAccessTokenHandle; action: DNAction); overload;
    {class} function Impersonate(userToken: IntPtr): DNWindowsImpersonationContext; overload;

  end;

  [DNTypeName('System.Security.Principal.WindowsIdentity')]
  DNWindowsIdentity = interface(DNClaimsIdentity)
  ['{70C7CEC2-5BB2-3770-A26E-FC180C81F4FE}']
  { getters & setters } 

    function get_AuthenticationType: string;
    function get_ImpersonationLevel: DNTokenImpersonationLevel;
    function get_IsAuthenticated: Boolean;
    function get_IsGuest: Boolean;
    function get_IsSystem: Boolean;
    function get_IsAnonymous: Boolean;
    function get_Name: string;
    function get_Owner: DNSecurityIdentifier;
    function get_User: DNSecurityIdentifier;
    function get_Groups: DNIdentityReferenceCollection;
    function get_Token: IntPtr;
    function get_AccessToken: DNSafeAccessTokenHandle;
    function get_UserClaims: DNIEnumerable<DNClaim>;
    function get_DeviceClaims: DNIEnumerable<DNClaim>;
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Actor: DNClaimsIdentity;
    procedure set_Actor(value: DNClaimsIdentity);
    function get_BootstrapContext: DNObject;
    procedure set_BootstrapContext(value: DNObject);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    function Impersonate: DNWindowsImpersonationContext; overload;
    procedure Dispose;
    function Clone: DNClaimsIdentity;
    procedure AddClaim(claim: DNClaim);
    procedure AddClaims(claims: DNIEnumerable<DNClaim>);
    function TryRemoveClaim(claim: DNClaim): Boolean;
    procedure RemoveClaim(claim: DNClaim);
    function FindAll(match: DNPredicate<DNClaim>): DNIEnumerable<DNClaim>; overload;
    function FindAll(&type: string): DNIEnumerable<DNClaim>; overload;
    function HasClaim(match: DNPredicate<DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    function FindFirst(match: DNPredicate<DNClaim>): DNClaim; overload;
    function FindFirst(&type: string): DNClaim; overload;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AuthenticationType: string read get_AuthenticationType;
    property ImpersonationLevel: DNTokenImpersonationLevel read get_ImpersonationLevel;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsGuest: Boolean read get_IsGuest;
    property IsSystem: Boolean read get_IsSystem;
    property IsAnonymous: Boolean read get_IsAnonymous;
    property Name: string read get_Name;
    property Owner: DNSecurityIdentifier read get_Owner;
    property User: DNSecurityIdentifier read get_User;
    property Groups: DNIdentityReferenceCollection read get_Groups;
    property Token: IntPtr read get_Token;
    property AccessToken: DNSafeAccessTokenHandle read get_AccessToken;
    property UserClaims: DNIEnumerable<DNClaim> read get_UserClaims;
    property DeviceClaims: DNIEnumerable<DNClaim> read get_DeviceClaims;
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Actor: DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DNObject read get_BootstrapContext write set_BootstrapContext;
    property &Label: string read get_Label write set_Label;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNWindowsIdentity = class(TDNGenericImport<DNWindowsIdentityClass, DNWindowsIdentity>)
  public const
   DefaultIssuer = 'AD AUTHORITY';
  end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimsPrincipalClass = interface(DNObjectClass)
  ['{AC311C18-168B-543E-9BFC-75670F08AB85}']
  { static getter & setter } 

    {class} function get_PrimaryIdentitySelector: DNFunc<DNIEnumerable<DNClaimsIdentity>, DNClaimsIdentity>;
    {class} procedure set_PrimaryIdentitySelector(value: DNFunc<DNIEnumerable<DNClaimsIdentity>, DNClaimsIdentity>);
    {class} function get_ClaimsPrincipalSelector: DNFunc<DNClaimsPrincipal>;
    {class} procedure set_ClaimsPrincipalSelector(value: DNFunc<DNClaimsPrincipal>);
    {class} function get_Current: DNClaimsPrincipal;

  { constructors } 

    {class} function init: DNClaimsPrincipal; overload;
    {class} function init(identities: DNIEnumerable<DNClaimsIdentity>): DNClaimsPrincipal; overload;
    {class} function init(identity: DNIIdentity): DNClaimsPrincipal; overload;
    {class} function init(principal: DNIPrincipal): DNClaimsPrincipal; overload;
    {class} function init(reader: DNBinaryReader): DNClaimsPrincipal; overload;

  { static propertys } 

    {class} property PrimaryIdentitySelector: DNFunc<DNIEnumerable<DNClaimsIdentity>, DNClaimsIdentity> read get_PrimaryIdentitySelector write set_PrimaryIdentitySelector;
    {class} property ClaimsPrincipalSelector: DNFunc<DNClaimsPrincipal> read get_ClaimsPrincipalSelector write set_ClaimsPrincipalSelector;
    {class} property Current: DNClaimsPrincipal read get_Current;
  end;

  [DNTypeName('System.Security.Claims.ClaimsPrincipal')]
  DNClaimsPrincipal = interface(DNIPrincipal)
  ['{62B5EEE1-B5CD-30F1-854F-FBB7F2D8690B}']
  { getters & setters } 

    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Identities: DNIEnumerable<DNClaimsIdentity>;
    function get_Identity: DNIIdentity;

  { methods } 

    procedure AddIdentity(identity: DNClaimsIdentity);
    function Clone: DNClaimsPrincipal;
    procedure AddIdentities(identities: DNIEnumerable<DNClaimsIdentity>);
    function FindAll(match: DNPredicate<DNClaim>): DNIEnumerable<DNClaim>; overload;
    function FindAll(&type: string): DNIEnumerable<DNClaim>; overload;
    function FindFirst(match: DNPredicate<DNClaim>): DNClaim; overload;
    function FindFirst(&type: string): DNClaim; overload;
    function HasClaim(match: DNPredicate<DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    function IsInRole(role: string): Boolean;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Identities: DNIEnumerable<DNClaimsIdentity> read get_Identities;
    property Identity: DNIIdentity read get_Identity;
  end;

  TDNClaimsPrincipal = class(TDNGenericImport<DNClaimsPrincipalClass, DNClaimsPrincipal>) end;

  //-------------namespace: System.Security.Principal----------------
  DNGenericPrincipalClass = interface(DNClaimsPrincipalClass)
  ['{9845A8DC-8EB6-50AB-8387-E27802FEE1A7}']
  { constructors } 

    {class} function init(identity: DNIIdentity; roles: TArray<string>): DNGenericPrincipal;

  end;

  [DNTypeName('System.Security.Principal.GenericPrincipal')]
  DNGenericPrincipal = interface(DNClaimsPrincipal)
  ['{2EACB710-FE48-3C13-8145-E810792C58A2}']
  { getters & setters } 

    function get_Identity: DNIIdentity;
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Identities: DNIEnumerable<DNClaimsIdentity>;

  { methods } 

    function IsInRole(role: string): Boolean;
    procedure AddIdentity(identity: DNClaimsIdentity);
    function Clone: DNClaimsPrincipal;
    procedure AddIdentities(identities: DNIEnumerable<DNClaimsIdentity>);
    function FindAll(match: DNPredicate<DNClaim>): DNIEnumerable<DNClaim>; overload;
    function FindAll(&type: string): DNIEnumerable<DNClaim>; overload;
    function FindFirst(match: DNPredicate<DNClaim>): DNClaim; overload;
    function FindFirst(&type: string): DNClaim; overload;
    function HasClaim(match: DNPredicate<DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Identity: DNIIdentity read get_Identity;
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Identities: DNIEnumerable<DNClaimsIdentity> read get_Identities;
  end;

  TDNGenericPrincipal = class(TDNGenericImport<DNGenericPrincipalClass, DNGenericPrincipal>) end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsPrincipalClass = interface(DNClaimsPrincipalClass)
  ['{0ED33E71-B77E-5141-86E1-C76454EE6FB0}']
  { constructors } 

    {class} function init(ntIdentity: DNWindowsIdentity): DNWindowsPrincipal;

  end;

  [DNTypeName('System.Security.Principal.WindowsPrincipal')]
  DNWindowsPrincipal = interface(DNClaimsPrincipal)
  ['{138887DB-C015-3254-B05A-D15616BF9AEE}']
  { getters & setters } 

    function get_Identity: DNIIdentity;
    function get_UserClaims: DNIEnumerable<DNClaim>;
    function get_DeviceClaims: DNIEnumerable<DNClaim>;
    function get_Claims: DNIEnumerable<DNClaim>;
    function get_Identities: DNIEnumerable<DNClaimsIdentity>;

  { methods } 

    function IsInRole(role: string): Boolean; overload;
    function IsInRole(role: DNWindowsBuiltInRole): Boolean; overload;
    function IsInRole(rid: Int32): Boolean; overload;
    function IsInRole(sid: DNSecurityIdentifier): Boolean; overload;
    procedure AddIdentity(identity: DNClaimsIdentity);
    function Clone: DNClaimsPrincipal;
    procedure AddIdentities(identities: DNIEnumerable<DNClaimsIdentity>);
    function FindAll(match: DNPredicate<DNClaim>): DNIEnumerable<DNClaim>; overload;
    function FindAll(&type: string): DNIEnumerable<DNClaim>; overload;
    function FindFirst(match: DNPredicate<DNClaim>): DNClaim; overload;
    function FindFirst(&type: string): DNClaim; overload;
    function HasClaim(match: DNPredicate<DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    procedure WriteTo(writer: DNBinaryWriter);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Identity: DNIIdentity read get_Identity;
    property UserClaims: DNIEnumerable<DNClaim> read get_UserClaims;
    property DeviceClaims: DNIEnumerable<DNClaim> read get_DeviceClaims;
    property Claims: DNIEnumerable<DNClaim> read get_Claims;
    property Identities: DNIEnumerable<DNClaimsIdentity> read get_Identities;
  end;

  TDNWindowsPrincipal = class(TDNGenericImport<DNWindowsPrincipalClass, DNWindowsPrincipal>) end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimTypesClass = interface(DNObjectClass)
  ['{5042B3E5-6C5D-5EDF-AD8E-FED8D5776F3F}']
  end;

  [DNTypeName('System.Security.Claims.ClaimTypes')]
  DNClaimTypes = interface(DNObject)
  ['{DE856C82-1E58-3863-B00E-FACDEBA633A9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNClaimTypes = class(TDNGenericImport<DNClaimTypesClass, DNClaimTypes>)
  public const
   AuthenticationInstant = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationinstant';
   AuthenticationMethod = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationmethod';
   CookiePath = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/cookiepath';
   DenyOnlyPrimarySid = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarysid';
   DenyOnlyPrimaryGroupSid = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarygroupsid';
   DenyOnlyWindowsDeviceGroup = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlywindowsdevicegroup';
   Dsa = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/dsa';
   Expiration = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/expiration';
   Expired = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/expired';
   GroupSid = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid';
   IsPersistent = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/ispersistent';
   PrimaryGroupSid = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/primarygroupsid';
   PrimarySid = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/primarysid';
   Role = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role';
   SerialNumber = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber';
   UserData = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata';
   Version = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/version';
   WindowsAccountName = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname';
   WindowsDeviceClaim = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdeviceclaim';
   WindowsDeviceGroup = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdevicegroup';
   WindowsUserClaim = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsuserclaim';
   WindowsFqbnVersion = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsfqbnversion';
   WindowsSubAuthority = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/windowssubauthority';
   Anonymous = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/anonymous';
   Authentication = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication';
   AuthorizationDecision = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authorizationdecision';
   Country = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country';
   DateOfBirth = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth';
   Dns = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dns';
   DenyOnlySid = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/denyonlysid';
   Email = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress';
   Gender = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender';
   GivenName = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname';
   Hash = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/hash';
   HomePhone = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/homephone';
   Locality = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality';
   MobilePhone = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone';
   Name = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name';
   NameIdentifier = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier';
   OtherPhone = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/otherphone';
   PostalCode = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode';
   Rsa = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa';
   Sid = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid';
   Spn = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/spn';
   StateOrProvince = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/stateorprovince';
   StreetAddress = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress';
   Surname = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname';
   System = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system';
   Thumbprint = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/thumbprint';
   Upn = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn';
   Uri = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri';
   Webpage = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/webpage';
   X500DistinguishedName = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/x500distinguishedname';
   Actor = 'http://schemas.xmlsoap.org/ws/2009/09/identity/claims/actor';
  end;

  //-------------namespace: System.Security.Claims----------------
  DNClaimValueTypesClass = interface(DNObjectClass)
  ['{AD7600B8-72F6-5F66-BE27-628A38CB00DE}']
  end;

  [DNTypeName('System.Security.Claims.ClaimValueTypes')]
  DNClaimValueTypes = interface(DNObject)
  ['{F678CBD9-8744-3FDD-8D92-D3F335C31FD3}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNClaimValueTypes = class(TDNGenericImport<DNClaimValueTypesClass, DNClaimValueTypes>)
  public const
   Base64Binary = 'http://www.w3.org/2001/XMLSchema#base64Binary';
   Base64Octet = 'http://www.w3.org/2001/XMLSchema#base64Octet';
   Boolean = 'http://www.w3.org/2001/XMLSchema#boolean';
   Date = 'http://www.w3.org/2001/XMLSchema#date';
   DateTime = 'http://www.w3.org/2001/XMLSchema#dateTime';
   Double = 'http://www.w3.org/2001/XMLSchema#double';
   Fqbn = 'http://www.w3.org/2001/XMLSchema#fqbn';
   HexBinary = 'http://www.w3.org/2001/XMLSchema#hexBinary';
   Integer = 'http://www.w3.org/2001/XMLSchema#integer';
   Integer32 = 'http://www.w3.org/2001/XMLSchema#integer32';
   Integer64 = 'http://www.w3.org/2001/XMLSchema#integer64';
   Sid = 'http://www.w3.org/2001/XMLSchema#sid';
   String_ = 'http://www.w3.org/2001/XMLSchema#string';
   Time = 'http://www.w3.org/2001/XMLSchema#time';
   UInteger32 = 'http://www.w3.org/2001/XMLSchema#uinteger32';
   UInteger64 = 'http://www.w3.org/2001/XMLSchema#uinteger64';
   DnsName = 'http://schemas.xmlsoap.org/claims/dns';
   Email = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress';
   Rsa = 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa';
   UpnName = 'http://schemas.xmlsoap.org/claims/UPN';
   DsaKeyValue = 'http://www.w3.org/2000/09/xmldsig#DSAKeyValue';
   KeyInfo = 'http://www.w3.org/2000/09/xmldsig#KeyInfo';
   RsaKeyValue = 'http://www.w3.org/2000/09/xmldsig#RSAKeyValue';
   DaytimeDuration = 'http://www.w3.org/TR/2002/WD-xquery-operators-20020816#dayTimeDuration';
   YearMonthDuration = 'http://www.w3.org/TR/2002/WD-xquery-operators-20020816#yearMonthDuration';
   Rfc822Name = 'urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name';
   X500Name = 'urn:oasis:names:tc:xacml:1.0:data-type:x500Name';
  end;

  //-------------namespace: System.Security----------------
  DNCodeAccessPermissionClass = interface(DNObjectClass)
  ['{421D6C61-E021-5A69-BF9E-6F5C205AE2C9}']
  { static methods } 

    {class} procedure RevertAssert;
    {class} procedure RevertDeny;
    {class} procedure RevertPermitOnly;
    {class} procedure RevertAll;

  end;

  [DNTypeName('System.Security.CodeAccessPermission')]
  DNCodeAccessPermission = interface(DNIPermission)
  ['{AF6550FA-7C4B-3477-86DD-235F8286EAAC}']
  { methods } 

    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function Union(other: DNIPermission): DNIPermission;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml: DNSecurityElement;
    procedure FromXml(elem: DNSecurityElement);
    function Copy: DNIPermission;
    function Intersect(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function GetType: DNType;

  end;

  TDNCodeAccessPermission = class(TDNGenericImport<DNCodeAccessPermissionClass, DNCodeAccessPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNEnvironmentPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{91F7E32F-D27B-59F0-A585-8D572411B91E}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNEnvironmentPermission; overload;
    {class} function init(flag: DNEnvironmentPermissionAccess; pathList: string): DNEnvironmentPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.EnvironmentPermission')]
  DNEnvironmentPermission = interface(DNCodeAccessPermission)
  ['{801F6E40-B384-3D27-B75F-DE2DF38F1192}']
  { methods } 

    procedure SetPathList(flag: DNEnvironmentPermissionAccess; pathList: string);
    procedure AddPathList(flag: DNEnvironmentPermissionAccess; pathList: string);
    function GetPathList(flag: DNEnvironmentPermissionAccess): string;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(other: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    function ToXml: DNSecurityElement;
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNEnvironmentPermission = class(TDNGenericImport<DNEnvironmentPermissionClass, DNEnvironmentPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileDialogPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{759EA7A9-0B6D-580A-AD31-54EFE9AA50A1}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNFileDialogPermission; overload;
    {class} function init(access: DNFileDialogPermissionAccess): DNFileDialogPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.FileDialogPermission')]
  DNFileDialogPermission = interface(DNCodeAccessPermission)
  ['{9E1239B4-493A-3D2D-8F91-6636EC9ECA21}']
  { getters & setters } 

    function get_Access: DNFileDialogPermissionAccess;
    procedure set_Access(value: DNFileDialogPermissionAccess);

  { methods } 

    procedure FromXml(esd: DNSecurityElement);
    function Copy: DNIPermission;
    function Intersect(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function IsUnrestricted: Boolean;
    function Union(target: DNIPermission): DNIPermission;
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Access: DNFileDialogPermissionAccess read get_Access write set_Access;
  end;

  TDNFileDialogPermission = class(TDNGenericImport<DNFileDialogPermissionClass, DNFileDialogPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNFileIOPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{D8467461-7BFF-5E98-BE24-A91E5543E19F}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNFileIOPermission; overload;
    {class} function init(access: DNFileIOPermissionAccess; path: string): DNFileIOPermission; overload;
    {class} function init(access: DNFileIOPermissionAccess; pathList: TArray<string>): DNFileIOPermission; overload;
    {class} function init(access: DNFileIOPermissionAccess; control: DNAccessControlActions; path: string): DNFileIOPermission; overload;
    {class} function init(access: DNFileIOPermissionAccess; control: DNAccessControlActions; pathList: TArray<string>): DNFileIOPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.FileIOPermission')]
  DNFileIOPermission = interface(DNCodeAccessPermission)
  ['{DC50CD5A-0CAD-3B47-BF0D-79E85F3C2FC7}']
  { getters & setters } 

    function get_AllLocalFiles: DNFileIOPermissionAccess;
    procedure set_AllLocalFiles(value: DNFileIOPermissionAccess);
    function get_AllFiles: DNFileIOPermissionAccess;
    procedure set_AllFiles(value: DNFileIOPermissionAccess);

  { methods } 

    procedure SetPathList(access: DNFileIOPermissionAccess; path: string); overload;
    procedure SetPathList(access: DNFileIOPermissionAccess; pathList: TArray<string>); overload;
    procedure AddPathList(access: DNFileIOPermissionAccess; path: string); overload;
    procedure AddPathList(access: DNFileIOPermissionAccess; pathList: TArray<string>); overload;
    function GetPathList(access: DNFileIOPermissionAccess): TArray<string>;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(other: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml: DNSecurityElement;
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property AllLocalFiles: DNFileIOPermissionAccess read get_AllLocalFiles write set_AllLocalFiles;
    property AllFiles: DNFileIOPermissionAccess read get_AllFiles write set_AllFiles;
  end;

  TDNFileIOPermission = class(TDNGenericImport<DNFileIOPermissionClass, DNFileIOPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNGacIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{1567890B-E075-5948-930E-9C1538849F7C}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNGacIdentityPermission; overload;
    {class} function init: DNGacIdentityPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.GacIdentityPermission')]
  DNGacIdentityPermission = interface(DNCodeAccessPermission)
  ['{29A6CF6F-D663-31A7-9210-1347871681FC}']
  { methods } 

    function Copy: DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    procedure FromXml(securityElement: DNSecurityElement);
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNGacIdentityPermission = class(TDNGenericImport<DNGacIdentityPermissionClass, DNGacIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStoragePermissionClass = interface(DNCodeAccessPermissionClass)
  ['{89D0F439-21AC-5B21-9EFB-CD532F8C8193}']
  end;

  [DNTypeName('System.Security.Permissions.IsolatedStoragePermission')]
  DNIsolatedStoragePermission = interface(DNCodeAccessPermission)
  ['{F458ABF2-2B5E-3158-B0E4-228E8CDCF759}']
  { getters & setters } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);

  { methods } 

    procedure FromXml(esd: DNSecurityElement);
    function IsUnrestricted: Boolean;
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function Union(other: DNIPermission): DNIPermission;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Copy: DNIPermission;
    function Intersect(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function GetType: DNType;

  { propertys } 

    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
  end;

  TDNIsolatedStoragePermission = class(TDNGenericImport<DNIsolatedStoragePermissionClass, DNIsolatedStoragePermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNIsolatedStorageFilePermissionClass = interface(DNIsolatedStoragePermissionClass)
  ['{F262DCD1-180A-59A6-9E2E-8D04482A6364}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNIsolatedStorageFilePermission;

  end;

  [DNTypeName('System.Security.Permissions.IsolatedStorageFilePermission')]
  DNIsolatedStorageFilePermission = interface(DNIsolatedStoragePermission)
  ['{AE588447-D98E-3E39-96F7-073433DB8D35}']
  { getters & setters } 

    function get_UserQuota: Int64;
    procedure set_UserQuota(value: Int64);
    function get_UsageAllowed: DNIsolatedStorageContainment;
    procedure set_UsageAllowed(value: DNIsolatedStorageContainment);

  { methods } 

    function ToXml: DNSecurityElement;
    function Union(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    procedure FromXml(esd: DNSecurityElement);
    function IsUnrestricted: Boolean;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property UserQuota: Int64 read get_UserQuota write set_UserQuota;
    property UsageAllowed: DNIsolatedStorageContainment read get_UsageAllowed write set_UsageAllowed;
  end;

  TDNIsolatedStorageFilePermission = class(TDNGenericImport<DNIsolatedStorageFilePermissionClass, DNIsolatedStorageFilePermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{2DAEC10B-A3FF-5969-B9FC-4AE3177DBF03}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNKeyContainerPermission; overload;
    {class} function init(flags: DNKeyContainerPermissionFlags): DNKeyContainerPermission; overload;
    {class} function init(flags: DNKeyContainerPermissionFlags; accessList: TArray<DNKeyContainerPermissionAccessEntry>): DNKeyContainerPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.KeyContainerPermission')]
  DNKeyContainerPermission = interface(DNCodeAccessPermission)
  ['{2D91F34B-85EC-33E5-A32E-752D8219404D}']
  { getters & setters } 

    function get_Flags: DNKeyContainerPermissionFlags;
    function get_AccessEntries: DNKeyContainerPermissionAccessEntryCollection;

  { methods } 

    procedure FromXml(securityElement: DNSecurityElement);
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Flags: DNKeyContainerPermissionFlags read get_Flags;
    property AccessEntries: DNKeyContainerPermissionAccessEntryCollection read get_AccessEntries;
  end;

  TDNKeyContainerPermission = class(TDNGenericImport<DNKeyContainerPermissionClass, DNKeyContainerPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPublisherIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{E3355437-7A41-5C73-B677-A38B57DF7EE1}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNPublisherIdentityPermission; overload;
    {class} function init(certificate: DNX509Certificate): DNPublisherIdentityPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.PublisherIdentityPermission')]
  DNPublisherIdentityPermission = interface(DNCodeAccessPermission)
  ['{73CF786B-CD2C-37E4-9835-824E4A019F11}']
  { getters & setters } 

    function get_Certificate: DNX509Certificate;
    procedure set_Certificate(value: DNX509Certificate);

  { methods } 

    function Copy: DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    procedure FromXml(esd: DNSecurityElement);
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Certificate: DNX509Certificate read get_Certificate write set_Certificate;
  end;

  TDNPublisherIdentityPermission = class(TDNGenericImport<DNPublisherIdentityPermissionClass, DNPublisherIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNReflectionPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{9571C572-4D79-58B6-9C51-CAD371447F40}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNReflectionPermission; overload;
    {class} function init(flag: DNReflectionPermissionFlag): DNReflectionPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.ReflectionPermission')]
  DNReflectionPermission = interface(DNCodeAccessPermission)
  ['{E71CDC85-7FE7-3F51-BCDB-02459770DB87}']
  { getters & setters } 

    function get_Flags: DNReflectionPermissionFlag;
    procedure set_Flags(value: DNReflectionPermissionFlag);

  { methods } 

    function IsUnrestricted: Boolean;
    function Union(other: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    function ToXml: DNSecurityElement;
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Flags: DNReflectionPermissionFlag read get_Flags write set_Flags;
  end;

  TDNReflectionPermission = class(TDNGenericImport<DNReflectionPermissionClass, DNReflectionPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNRegistryPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{348347F3-6F9D-5C78-A532-8E7EA9903C49}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNRegistryPermission; overload;
    {class} function init(access: DNRegistryPermissionAccess; pathList: string): DNRegistryPermission; overload;
    {class} function init(access: DNRegistryPermissionAccess; control: DNAccessControlActions; pathList: string): DNRegistryPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.RegistryPermission')]
  DNRegistryPermission = interface(DNCodeAccessPermission)
  ['{B35E31F2-9E50-3D43-8EAF-EC111F6B3295}']
  { methods } 

    procedure SetPathList(access: DNRegistryPermissionAccess; pathList: string);
    procedure AddPathList(access: DNRegistryPermissionAccess; pathList: string); overload;
    procedure AddPathList(access: DNRegistryPermissionAccess; control: DNAccessControlActions; pathList: string); overload;
    function GetPathList(access: DNRegistryPermissionAccess): string;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(other: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    function ToXml: DNSecurityElement;
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRegistryPermission = class(TDNGenericImport<DNRegistryPermissionClass, DNRegistryPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{F60D4A96-C0E2-5A94-95C1-675D48576C86}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNSecurityPermission; overload;
    {class} function init(flag: DNSecurityPermissionFlag): DNSecurityPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.SecurityPermission')]
  DNSecurityPermission = interface(DNCodeAccessPermission)
  ['{D5F5125A-3D46-3C57-8393-0E4EE9D8016B}']
  { getters & setters } 

    function get_Flags: DNSecurityPermissionFlag;
    procedure set_Flags(value: DNSecurityPermissionFlag);

  { methods } 

    function IsSubsetOf(target: DNIPermission): Boolean;
    function Union(target: DNIPermission): DNIPermission;
    function Intersect(target: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    function IsUnrestricted: Boolean;
    function ToXml: DNSecurityElement;
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Flags: DNSecurityPermissionFlag read get_Flags write set_Flags;
  end;

  TDNSecurityPermission = class(TDNGenericImport<DNSecurityPermissionClass, DNSecurityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSiteIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{B8302D00-64D7-5A88-B793-0B44AC4A5DF8}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNSiteIdentityPermission; overload;
    {class} function init(site: string): DNSiteIdentityPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.SiteIdentityPermission')]
  DNSiteIdentityPermission = interface(DNCodeAccessPermission)
  ['{3BCFC458-07DC-3BA7-8404-97EB76641080}']
  { getters & setters } 

    function get_Site: string;
    procedure set_Site(value: string);

  { methods } 

    function Copy: DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    procedure FromXml(esd: DNSecurityElement);
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Site: string read get_Site write set_Site;
  end;

  TDNSiteIdentityPermission = class(TDNGenericImport<DNSiteIdentityPermissionClass, DNSiteIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStrongNameIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{4357D86B-4039-57C9-878D-B14A2A879144}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNStrongNameIdentityPermission; overload;
    {class} function init(blob: DNStrongNamePublicKeyBlob; name: string; version: DNVersion): DNStrongNameIdentityPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.StrongNameIdentityPermission')]
  DNStrongNameIdentityPermission = interface(DNCodeAccessPermission)
  ['{2B00B9EC-B4F4-3243-90AB-532E64FEE941}']
  { getters & setters } 

    function get_PublicKey: DNStrongNamePublicKeyBlob;
    procedure set_PublicKey(value: DNStrongNamePublicKeyBlob);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);

  { methods } 

    function Copy: DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    procedure FromXml(e: DNSecurityElement);
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property PublicKey: DNStrongNamePublicKeyBlob read get_PublicKey write set_PublicKey;
    property Name: string read get_Name write set_Name;
    property Version: DNVersion read get_Version write set_Version;
  end;

  TDNStrongNameIdentityPermission = class(TDNGenericImport<DNStrongNameIdentityPermissionClass, DNStrongNameIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUIPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{8C89607B-8399-5C8F-B202-A3A83540BE1A}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNUIPermission; overload;
    {class} function init(windowFlag: DNUIPermissionWindow; clipboardFlag: DNUIPermissionClipboard): DNUIPermission; overload;
    {class} function init(windowFlag: DNUIPermissionWindow): DNUIPermission; overload;
    {class} function init(clipboardFlag: DNUIPermissionClipboard): DNUIPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.UIPermission')]
  DNUIPermission = interface(DNCodeAccessPermission)
  ['{05B46A2D-7C6B-3EFF-A09A-1490A36811C2}']
  { getters & setters } 

    function get_Window: DNUIPermissionWindow;
    procedure set_Window(value: DNUIPermissionWindow);
    function get_Clipboard: DNUIPermissionClipboard;
    procedure set_Clipboard(value: DNUIPermissionClipboard);

  { methods } 

    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    function Copy: DNIPermission;
    function ToXml: DNSecurityElement;
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Window: DNUIPermissionWindow read get_Window write set_Window;
    property Clipboard: DNUIPermissionClipboard read get_Clipboard write set_Clipboard;
  end;

  TDNUIPermission = class(TDNGenericImport<DNUIPermissionClass, DNUIPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNUrlIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{5A4E41BC-5BD2-5F15-BEE9-BAC039906B20}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNUrlIdentityPermission; overload;
    {class} function init(site: string): DNUrlIdentityPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.UrlIdentityPermission')]
  DNUrlIdentityPermission = interface(DNCodeAccessPermission)
  ['{AB7D1AB9-D192-3A95-B34C-A3996837C6A7}']
  { getters & setters } 

    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    function Copy: DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    procedure FromXml(esd: DNSecurityElement);
    function ToXml: DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Url: string read get_Url write set_Url;
  end;

  TDNUrlIdentityPermission = class(TDNGenericImport<DNUrlIdentityPermissionClass, DNUrlIdentityPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNZoneIdentityPermissionClass = interface(DNCodeAccessPermissionClass)
  ['{23B64A98-BF54-55C2-984B-2D4EEBF4671A}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNZoneIdentityPermission; overload;
    {class} function init(zone: DNSecurityZone): DNZoneIdentityPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.ZoneIdentityPermission')]
  DNZoneIdentityPermission = interface(DNCodeAccessPermission)
  ['{CAEB199E-CEB9-388A-B240-E29C9F55199B}']
  { getters & setters } 

    function get_SecurityZone: DNSecurityZone;
    procedure set_SecurityZone(value: DNSecurityZone);

  { methods } 

    function Copy: DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(target: DNIPermission): DNIPermission;
    function ToXml: DNSecurityElement;
    procedure FromXml(esd: DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property SecurityZone: DNSecurityZone read get_SecurityZone write set_SecurityZone;
  end;

  TDNZoneIdentityPermission = class(TDNGenericImport<DNZoneIdentityPermissionClass, DNZoneIdentityPermission>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricAlgorithmClass = interface(DNObjectClass)
  ['{6C1238FF-1026-5E82-A6F3-203A4EBE6C79}']
  { static methods } 

    {class} function Create(algName: string): DNAsymmetricAlgorithm; overload;
    {class} function Create: DNAsymmetricAlgorithm; overload;

  end;

  [DNTypeName('System.Security.Cryptography.AsymmetricAlgorithm')]
  DNAsymmetricAlgorithm = interface(DNIDisposable)
  ['{4B135D8E-7B1B-3EA8-8D06-10E34F157E9D}']
  { getters & setters } 

    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_SignatureAlgorithm: string;
    function get_KeyExchangeAlgorithm: string;

  { methods } 

    procedure Dispose;
    procedure Clear;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
  end;

  TDNAsymmetricAlgorithm = class(TDNGenericImport<DNAsymmetricAlgorithmClass, DNAsymmetricAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSAClass = interface(DNAsymmetricAlgorithmClass)
  ['{BB720A3B-DEAF-571F-A9A6-E95AD4847BAC}']
  { static methods } 

    {class} function Create(algName: string): DNDSA; overload;
    {class} function Create: DNDSA; overload;
    {class} function Create(keySizeInBits: Int32): DNDSA; overload;
    {class} function Create(parameters: DNDSAParameters): DNDSA; overload;

  end;

  [DNTypeName('System.Security.Cryptography.DSA')]
  DNDSA = interface(DNAsymmetricAlgorithm)
  ['{C13E7301-9B3F-3530-B60A-7F141D6DDE83}']
  { getters & setters } 

    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_SignatureAlgorithm: string;
    function get_KeyExchangeAlgorithm: string;

  { methods } 

    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>;
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    function ExportParameters(includePrivateParameters: Boolean): DNDSAParameters;
    procedure ImportParameters(parameters: DNDSAParameters);
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
  end;

  TDNDSA = class(TDNGenericImport<DNDSAClass, DNDSA>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSACryptoServiceProviderClass = interface(DNDSAClass)
  ['{4275DAA4-10E6-50D0-A14E-126B220304AD}']
  { static getter & setter } 

    {class} function get_UseMachineKeyStore: Boolean;
    {class} procedure set_UseMachineKeyStore(value: Boolean);

  { constructors } 

    {class} function init: DNDSACryptoServiceProvider; overload;
    {class} function init(dwKeySize: Int32): DNDSACryptoServiceProvider; overload;
    {class} function init(parameters: DNCspParameters): DNDSACryptoServiceProvider; overload;
    {class} function init(dwKeySize: Int32; parameters: DNCspParameters): DNDSACryptoServiceProvider; overload;

  { static propertys } 

    {class} property UseMachineKeyStore: Boolean read get_UseMachineKeyStore write set_UseMachineKeyStore;
  end;

  [DNTypeName('System.Security.Cryptography.DSACryptoServiceProvider')]
  DNDSACryptoServiceProvider = interface(DNDSA)
  ['{673DFE75-9F93-304F-ABA8-D2A86BA87D7C}']
  { getters & setters } 

    function get_PublicOnly: Boolean;
    function get_CspKeyContainerInfo: DNCspKeyContainerInfo;
    function get_KeySize: Int32;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_PersistKeyInCsp: Boolean;
    procedure set_PersistKeyInCsp(value: Boolean);
    function get_LegalKeySizes: TArray<DNKeySizes>;

  { methods } 

    function ExportParameters(includePrivateParameters: Boolean): DNDSAParameters;
    function ExportCspBlob(includePrivateParameters: Boolean): TArray<Byte>;
    procedure ImportParameters(parameters: DNDSAParameters);
    procedure ImportCspBlob(keyBlob: TArray<Byte>);
    function SignData(inputStream: DNStream): TArray<Byte>; overload;
    function SignData(buffer: TArray<Byte>): TArray<Byte>; overload;
    function SignData(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function VerifyData(rgbData: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>;
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean;
    function SignHash(rgbHash: TArray<Byte>; str: string): TArray<Byte>;
    function VerifyHash(rgbHash: TArray<Byte>; str: string; rgbSignature: TArray<Byte>): Boolean;
    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PublicOnly: Boolean read get_PublicOnly;
    property CspKeyContainerInfo: DNCspKeyContainerInfo read get_CspKeyContainerInfo;
    property KeySize: Int32 read get_KeySize;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property PersistKeyInCsp: Boolean read get_PersistKeyInCsp write set_PersistKeyInCsp;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
  end;

  TDNDSACryptoServiceProvider = class(TDNGenericImport<DNDSACryptoServiceProviderClass, DNDSACryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAClass = interface(DNAsymmetricAlgorithmClass)
  ['{C908936D-7664-5D61-8FC9-7389CE1D9A79}']
  { static methods } 

    {class} function Create(algName: string): DNRSA; overload;
    {class} function Create: DNRSA; overload;
    {class} function Create(keySizeInBits: Int32): DNRSA; overload;
    {class} function Create(parameters: DNRSAParameters): DNRSA; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSA')]
  DNRSA = interface(DNAsymmetricAlgorithm)
  ['{3E39CA4F-CD6F-3CFE-8659-7FDC8D1C9F0B}']
  { getters & setters } 

    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DNKeySizes>;

  { methods } 

    function Encrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>;
    function Decrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>;
    function SignHash(hash: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>;
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean;
    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function DecryptValue(rgb: TArray<Byte>): TArray<Byte>;
    function EncryptValue(rgb: TArray<Byte>): TArray<Byte>;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    function ExportParameters(includePrivateParameters: Boolean): DNRSAParameters;
    procedure ImportParameters(parameters: DNRSAParameters);
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
  end;

  TDNRSA = class(TDNGenericImport<DNRSAClass, DNRSA>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSACryptoServiceProviderClass = interface(DNRSAClass)
  ['{61BA3CB3-AE99-5AD0-8584-44A3473836B3}']
  { static getter & setter } 

    {class} function get_UseMachineKeyStore: Boolean;
    {class} procedure set_UseMachineKeyStore(value: Boolean);

  { constructors } 

    {class} function init: DNRSACryptoServiceProvider; overload;
    {class} function init(dwKeySize: Int32): DNRSACryptoServiceProvider; overload;
    {class} function init(parameters: DNCspParameters): DNRSACryptoServiceProvider; overload;
    {class} function init(dwKeySize: Int32; parameters: DNCspParameters): DNRSACryptoServiceProvider; overload;

  { static propertys } 

    {class} property UseMachineKeyStore: Boolean read get_UseMachineKeyStore write set_UseMachineKeyStore;
  end;

  [DNTypeName('System.Security.Cryptography.RSACryptoServiceProvider')]
  DNRSACryptoServiceProvider = interface(DNRSA)
  ['{D9035152-6B1F-33E3-86F4-411CD21CDE0E}']
  { getters & setters } 

    function get_PublicOnly: Boolean;
    function get_CspKeyContainerInfo: DNCspKeyContainerInfo;
    function get_KeySize: Int32;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_PersistKeyInCsp: Boolean;
    procedure set_PersistKeyInCsp(value: Boolean);
    function get_LegalKeySizes: TArray<DNKeySizes>;

  { methods } 

    function ExportParameters(includePrivateParameters: Boolean): DNRSAParameters;
    function ExportCspBlob(includePrivateParameters: Boolean): TArray<Byte>;
    procedure ImportParameters(parameters: DNRSAParameters);
    procedure ImportCspBlob(keyBlob: TArray<Byte>);
    function SignData(inputStream: DNStream; halg: DNObject): TArray<Byte>; overload;
    function SignData(buffer: TArray<Byte>; halg: DNObject): TArray<Byte>; overload;
    function SignData(buffer: TArray<Byte>; offset: Int32; count: Int32; halg: DNObject): TArray<Byte>; overload;
    function VerifyData(buffer: TArray<Byte>; halg: DNObject; signature: TArray<Byte>): Boolean; overload;
    function SignHash(rgbHash: TArray<Byte>; str: string): TArray<Byte>; overload;
    function VerifyHash(rgbHash: TArray<Byte>; str: string; rgbSignature: TArray<Byte>): Boolean; overload;
    function Encrypt(rgb: TArray<Byte>; fOAEP: Boolean): TArray<Byte>; overload;
    function Decrypt(rgb: TArray<Byte>; fOAEP: Boolean): TArray<Byte>; overload;
    function DecryptValue(rgb: TArray<Byte>): TArray<Byte>;
    function EncryptValue(rgb: TArray<Byte>): TArray<Byte>;
    function Encrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>; overload;
    function Decrypt(data: TArray<Byte>; padding: DNRSAEncryptionPadding): TArray<Byte>; overload;
    function SignHash(hash: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function SignData(data: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: DNStream; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: DNStream; signature: TArray<Byte>; hashAlgorithm: DNHashAlgorithmName; padding: DNRSASignaturePadding): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PublicOnly: Boolean read get_PublicOnly;
    property CspKeyContainerInfo: DNCspKeyContainerInfo read get_CspKeyContainerInfo;
    property KeySize: Int32 read get_KeySize;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property PersistKeyInCsp: Boolean read get_PersistKeyInCsp write set_PersistKeyInCsp;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
  end;

  TDNRSACryptoServiceProvider = class(TDNGenericImport<DNRSACryptoServiceProviderClass, DNRSACryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricKeyExchangeDeformatterClass = interface(DNObjectClass)
  ['{DDFFE136-3FC8-511A-B699-792DF9D39D50}']
  end;

  [DNTypeName('System.Security.Cryptography.AsymmetricKeyExchangeDeformatter')]
  DNAsymmetricKeyExchangeDeformatter = interface(DNObject)
  ['{0202CE16-1F18-3BFB-807D-760B157AB260}']
  { getters & setters } 

    function get_Parameters: string;
    procedure set_Parameters(value: string);

  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    function DecryptKeyExchange(rgb: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Parameters: string read get_Parameters write set_Parameters;
  end;

  TDNAsymmetricKeyExchangeDeformatter = class(TDNGenericImport<DNAsymmetricKeyExchangeDeformatterClass, DNAsymmetricKeyExchangeDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAOAEPKeyExchangeDeformatterClass = interface(DNAsymmetricKeyExchangeDeformatterClass)
  ['{2F4769C6-F1AA-55C9-9867-0B12215CC7DA}']
  { constructors } 

    {class} function init: DNRSAOAEPKeyExchangeDeformatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAOAEPKeyExchangeDeformatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter')]
  DNRSAOAEPKeyExchangeDeformatter = interface(DNAsymmetricKeyExchangeDeformatter)
  ['{4D187AC2-D815-3B7E-BCEA-8E0BBC702F7C}']
  { getters & setters } 

    function get_Parameters: string;
    procedure set_Parameters(value: string);

  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    function DecryptKeyExchange(rgbData: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Parameters: string read get_Parameters write set_Parameters;
  end;

  TDNRSAOAEPKeyExchangeDeformatter = class(TDNGenericImport<DNRSAOAEPKeyExchangeDeformatterClass, DNRSAOAEPKeyExchangeDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1KeyExchangeDeformatterClass = interface(DNAsymmetricKeyExchangeDeformatterClass)
  ['{E698BAF6-5483-574B-A609-30619347E3A4}']
  { constructors } 

    {class} function init: DNRSAPKCS1KeyExchangeDeformatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1KeyExchangeDeformatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter')]
  DNRSAPKCS1KeyExchangeDeformatter = interface(DNAsymmetricKeyExchangeDeformatter)
  ['{EE96F4E1-377E-315C-AEF5-874DC8C7A2AA}']
  { getters & setters } 

    function get_RNG: DNRandomNumberGenerator;
    procedure set_RNG(value: DNRandomNumberGenerator);
    function get_Parameters: string;
    procedure set_Parameters(value: string);

  { methods } 

    function DecryptKeyExchange(rgbIn: TArray<Byte>): TArray<Byte>;
    procedure SetKey(key: DNAsymmetricAlgorithm);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property RNG: DNRandomNumberGenerator read get_RNG write set_RNG;
    property Parameters: string read get_Parameters write set_Parameters;
  end;

  TDNRSAPKCS1KeyExchangeDeformatter = class(TDNGenericImport<DNRSAPKCS1KeyExchangeDeformatterClass, DNRSAPKCS1KeyExchangeDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricKeyExchangeFormatterClass = interface(DNObjectClass)
  ['{B122AE6A-CBF1-59D1-8B02-448893E45DDF}']
  end;

  [DNTypeName('System.Security.Cryptography.AsymmetricKeyExchangeFormatter')]
  DNAsymmetricKeyExchangeFormatter = interface(DNObject)
  ['{CE38DC2D-EB2D-3B6A-AFAC-8537BD0B9BF7}']
  { getters & setters } 

    function get_Parameters: string;

  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    function CreateKeyExchange(data: TArray<Byte>): TArray<Byte>; overload;
    function CreateKeyExchange(data: TArray<Byte>; symAlgType: DNType): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Parameters: string read get_Parameters;
  end;

  TDNAsymmetricKeyExchangeFormatter = class(TDNGenericImport<DNAsymmetricKeyExchangeFormatterClass, DNAsymmetricKeyExchangeFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAOAEPKeyExchangeFormatterClass = interface(DNAsymmetricKeyExchangeFormatterClass)
  ['{44E188EF-4F3B-5BA3-9414-E14C411B3E28}']
  { constructors } 

    {class} function init: DNRSAOAEPKeyExchangeFormatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAOAEPKeyExchangeFormatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSAOAEPKeyExchangeFormatter')]
  DNRSAOAEPKeyExchangeFormatter = interface(DNAsymmetricKeyExchangeFormatter)
  ['{A0E2E749-63CE-3651-8F4F-F5F996344C32}']
  { getters & setters } 

    function get_Parameter: TArray<Byte>;
    procedure set_Parameter(value: TArray<Byte>);
    function get_Parameters: string;
    function get_Rng: DNRandomNumberGenerator;
    procedure set_Rng(value: DNRandomNumberGenerator);

  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    function CreateKeyExchange(rgbData: TArray<Byte>; symAlgType: DNType): TArray<Byte>; overload;
    function CreateKeyExchange(rgbData: TArray<Byte>): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Parameter: TArray<Byte> read get_Parameter write set_Parameter;
    property Parameters: string read get_Parameters;
    property Rng: DNRandomNumberGenerator read get_Rng write set_Rng;
  end;

  TDNRSAOAEPKeyExchangeFormatter = class(TDNGenericImport<DNRSAOAEPKeyExchangeFormatterClass, DNRSAOAEPKeyExchangeFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1KeyExchangeFormatterClass = interface(DNAsymmetricKeyExchangeFormatterClass)
  ['{9C3931FD-86A7-5FD7-B1A6-E69F59003A6F}']
  { constructors } 

    {class} function init: DNRSAPKCS1KeyExchangeFormatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1KeyExchangeFormatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter')]
  DNRSAPKCS1KeyExchangeFormatter = interface(DNAsymmetricKeyExchangeFormatter)
  ['{92755472-2059-3F96-8938-8AC767B5187B}']
  { getters & setters } 

    function get_Parameters: string;
    function get_Rng: DNRandomNumberGenerator;
    procedure set_Rng(value: DNRandomNumberGenerator);

  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    function CreateKeyExchange(rgbData: TArray<Byte>; symAlgType: DNType): TArray<Byte>; overload;
    function CreateKeyExchange(rgbData: TArray<Byte>): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Parameters: string read get_Parameters;
    property Rng: DNRandomNumberGenerator read get_Rng write set_Rng;
  end;

  TDNRSAPKCS1KeyExchangeFormatter = class(TDNGenericImport<DNRSAPKCS1KeyExchangeFormatterClass, DNRSAPKCS1KeyExchangeFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricSignatureDeformatterClass = interface(DNObjectClass)
  ['{4D071977-7DCB-56BA-B823-F08859094B56}']
  end;

  [DNTypeName('System.Security.Cryptography.AsymmetricSignatureDeformatter')]
  DNAsymmetricSignatureDeformatter = interface(DNObject)
  ['{BEE4E9FD-DE7A-3512-93D8-0C5E006B167A}']
  { methods } 

    function VerifySignature(hash: DNHashAlgorithm; rgbSignature: TArray<Byte>): Boolean; overload;
    procedure SetKey(key: DNAsymmetricAlgorithm);
    procedure SetHashAlgorithm(strName: string);
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAsymmetricSignatureDeformatter = class(TDNGenericImport<DNAsymmetricSignatureDeformatterClass, DNAsymmetricSignatureDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSASignatureDeformatterClass = interface(DNAsymmetricSignatureDeformatterClass)
  ['{C3A70F06-6D35-5552-9C5B-8A4A1411CE6B}']
  { constructors } 

    {class} function init: DNDSASignatureDeformatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNDSASignatureDeformatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.DSASignatureDeformatter')]
  DNDSASignatureDeformatter = interface(DNAsymmetricSignatureDeformatter)
  ['{1F17C39C-99D5-37E0-8E98-8F27044BD50A}']
  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    procedure SetHashAlgorithm(strName: string);
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    function VerifySignature(hash: DNHashAlgorithm; rgbSignature: TArray<Byte>): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDSASignatureDeformatter = class(TDNGenericImport<DNDSASignatureDeformatterClass, DNDSASignatureDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1SignatureDeformatterClass = interface(DNAsymmetricSignatureDeformatterClass)
  ['{4D99FE19-86F1-5AEB-8202-FD945AEEC62E}']
  { constructors } 

    {class} function init: DNRSAPKCS1SignatureDeformatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1SignatureDeformatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSAPKCS1SignatureDeformatter')]
  DNRSAPKCS1SignatureDeformatter = interface(DNAsymmetricSignatureDeformatter)
  ['{6F674828-9081-3B45-BC39-791BD84CCF8F}']
  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    procedure SetHashAlgorithm(strName: string);
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean; overload;
    function VerifySignature(hash: DNHashAlgorithm; rgbSignature: TArray<Byte>): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRSAPKCS1SignatureDeformatter = class(TDNGenericImport<DNRSAPKCS1SignatureDeformatterClass, DNRSAPKCS1SignatureDeformatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsymmetricSignatureFormatterClass = interface(DNObjectClass)
  ['{4066C955-B288-5511-AA9E-D2A1BB4A90A5}']
  end;

  [DNTypeName('System.Security.Cryptography.AsymmetricSignatureFormatter')]
  DNAsymmetricSignatureFormatter = interface(DNObject)
  ['{5B475A84-5310-3C64-B625-E2BF00476F53}']
  { methods } 

    function CreateSignature(hash: DNHashAlgorithm): TArray<Byte>; overload;
    procedure SetKey(key: DNAsymmetricAlgorithm);
    procedure SetHashAlgorithm(strName: string);
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNAsymmetricSignatureFormatter = class(TDNGenericImport<DNAsymmetricSignatureFormatterClass, DNAsymmetricSignatureFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSASignatureFormatterClass = interface(DNAsymmetricSignatureFormatterClass)
  ['{FF75A8F0-37DE-57BF-9D56-A432CAE46941}']
  { constructors } 

    {class} function init: DNDSASignatureFormatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNDSASignatureFormatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.DSASignatureFormatter')]
  DNDSASignatureFormatter = interface(DNAsymmetricSignatureFormatter)
  ['{8F6D198C-E66F-3A87-AA3F-F885DD09EA13}']
  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    procedure SetHashAlgorithm(strName: string);
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>; overload;
    function CreateSignature(hash: DNHashAlgorithm): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDSASignatureFormatter = class(TDNGenericImport<DNDSASignatureFormatterClass, DNDSASignatureFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAPKCS1SignatureFormatterClass = interface(DNAsymmetricSignatureFormatterClass)
  ['{412054ED-8AFF-5DEC-BF30-EBA009630B51}']
  { constructors } 

    {class} function init: DNRSAPKCS1SignatureFormatter; overload;
    {class} function init(key: DNAsymmetricAlgorithm): DNRSAPKCS1SignatureFormatter; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSAPKCS1SignatureFormatter')]
  DNRSAPKCS1SignatureFormatter = interface(DNAsymmetricSignatureFormatter)
  ['{7BC115CD-1EE2-3068-894D-E3D3F7632F40}']
  { methods } 

    procedure SetKey(key: DNAsymmetricAlgorithm);
    procedure SetHashAlgorithm(strName: string);
    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>; overload;
    function CreateSignature(hash: DNHashAlgorithm): TArray<Byte>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRSAPKCS1SignatureFormatter = class(TDNGenericImport<DNRSAPKCS1SignatureFormatterClass, DNRSAPKCS1SignatureFormatter>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptoAPITransformClass = interface(DNObjectClass)
  ['{233004E5-C256-51A3-8226-026F6C21C10C}']
  end;

  [DNTypeName('System.Security.Cryptography.CryptoAPITransform')]
  DNCryptoAPITransform = interface(DNICryptoTransform)
  ['{AE746923-16BB-3D31-9D08-CE50EF6F7B1A}']
  { getters & setters } 

    function get_KeyHandle: IntPtr;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Dispose;
    procedure Clear;
    procedure Reset;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyHandle: IntPtr read get_KeyHandle;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNCryptoAPITransform = class(TDNGenericImport<DNCryptoAPITransformClass, DNCryptoAPITransform>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptoConfigClass = interface(DNObjectClass)
  ['{93C3A420-762C-54A7-92BC-30AADCB39A34}']
  { static getter & setter } 

    {class} function get_AllowOnlyFipsAlgorithms: Boolean;

  { constructors } 

    {class} function init: DNCryptoConfig;

  { static methods } 

    {class} function CreateFromName(name: string; args: TArray<DNObject>): DNObject; overload;
    {class} procedure AddAlgorithm(algorithm: DNType; names: TArray<string>);
    {class} function CreateFromName(name: string): DNObject; overload;
    {class} procedure AddOID(oid: string; names: TArray<string>);
    {class} function MapNameToOID(name: string): string;
    {class} function EncodeOID(str: string): TArray<Byte>;

  { static propertys } 

    {class} property AllowOnlyFipsAlgorithms: Boolean read get_AllowOnlyFipsAlgorithms;
  end;

  [DNTypeName('System.Security.Cryptography.CryptoConfig')]
  DNCryptoConfig = interface(DNObject)
  ['{9EA60ECA-3DCD-340F-8E95-67845D185999}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCryptoConfig = class(TDNGenericImport<DNCryptoConfigClass, DNCryptoConfig>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCspKeyContainerInfoClass = interface(DNObjectClass)
  ['{FE6DDA13-4668-589B-B81F-BCF3A562A698}']
  { constructors } 

    {class} function init(parameters: DNCspParameters): DNCspKeyContainerInfo;

  end;

  [DNTypeName('System.Security.Cryptography.CspKeyContainerInfo')]
  DNCspKeyContainerInfo = interface(DNObject)
  ['{E5E5B585-8A68-3F26-BB61-F34EF3AD27F8}']
  { getters & setters } 

    function get_MachineKeyStore: Boolean;
    function get_ProviderName: string;
    function get_ProviderType: Int32;
    function get_KeyContainerName: string;
    function get_UniqueKeyContainerName: string;
    function get_KeyNumber: DNKeyNumber;
    function get_Exportable: Boolean;
    function get_HardwareDevice: Boolean;
    function get_Removable: Boolean;
    function get_Accessible: Boolean;
    function get_Protected: Boolean;
    function get_CryptoKeySecurity: DNCryptoKeySecurity;
    function get_RandomlyGenerated: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MachineKeyStore: Boolean read get_MachineKeyStore;
    property ProviderName: string read get_ProviderName;
    property ProviderType: Int32 read get_ProviderType;
    property KeyContainerName: string read get_KeyContainerName;
    property UniqueKeyContainerName: string read get_UniqueKeyContainerName;
    property KeyNumber: DNKeyNumber read get_KeyNumber;
    property Exportable: Boolean read get_Exportable;
    property HardwareDevice: Boolean read get_HardwareDevice;
    property Removable: Boolean read get_Removable;
    property Accessible: Boolean read get_Accessible;
    property &Protected: Boolean read get_Protected;
    property CryptoKeySecurity: DNCryptoKeySecurity read get_CryptoKeySecurity;
    property RandomlyGenerated: Boolean read get_RandomlyGenerated;
  end;

  TDNCspKeyContainerInfo = class(TDNGenericImport<DNCspKeyContainerInfoClass, DNCspKeyContainerInfo>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCspParametersClass = interface(DNObjectClass)
  ['{CE1D6F57-DFDC-58D9-B412-598F62919E59}']
  { constructors } 

    {class} function init: DNCspParameters; overload;
    {class} function init(dwTypeIn: Int32): DNCspParameters; overload;
    {class} function init(dwTypeIn: Int32; strProviderNameIn: string): DNCspParameters; overload;
    {class} function init(dwTypeIn: Int32; strProviderNameIn: string; strContainerNameIn: string): DNCspParameters; overload;
    {class} function init(providerType: Int32; providerName: string; keyContainerName: string; cryptoKeySecurity: DNCryptoKeySecurity; keyPassword: DNSecureString): DNCspParameters; overload;
    {class} function init(providerType: Int32; providerName: string; keyContainerName: string; cryptoKeySecurity: DNCryptoKeySecurity; parentWindowHandle: IntPtr): DNCspParameters; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CspParameters')]
  DNCspParameters = interface(DNObject)
  ['{AF60343F-6C7B-3761-839F-0C44E3CA06DA}']
  { getters & setters } 

    function get_Flags: DNCspProviderFlags;
    procedure set_Flags(value: DNCspProviderFlags);
    function get_CryptoKeySecurity: DNCryptoKeySecurity;
    procedure set_CryptoKeySecurity(value: DNCryptoKeySecurity);
    function get_KeyPassword: DNSecureString;
    procedure set_KeyPassword(value: DNSecureString);
    function get_ParentWindowHandle: IntPtr;
    procedure set_ParentWindowHandle(value: IntPtr);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNCspProviderFlags read get_Flags write set_Flags;
    property CryptoKeySecurity: DNCryptoKeySecurity read get_CryptoKeySecurity write set_CryptoKeySecurity;
    property KeyPassword: DNSecureString read get_KeyPassword write set_KeyPassword;
    property ParentWindowHandle: IntPtr read get_ParentWindowHandle write set_ParentWindowHandle;
  end;

  TDNCspParameters = class(TDNGenericImport<DNCspParametersClass, DNCspParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDeriveBytesClass = interface(DNObjectClass)
  ['{AC12C121-3A47-5F6D-AB4A-480079D1A2B6}']
  end;

  [DNTypeName('System.Security.Cryptography.DeriveBytes')]
  DNDeriveBytes = interface(DNIDisposable)
  ['{7D62DB2D-86E3-3ADE-90C4-215950643D10}']
  { methods } 

    procedure Dispose;
    function GetBytes(cb: Int32): TArray<Byte>;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNDeriveBytes = class(TDNGenericImport<DNDeriveBytesClass, DNDeriveBytes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNPasswordDeriveBytesClass = interface(DNDeriveBytesClass)
  ['{E8BD1CA9-DBD0-55A7-BF9F-1915BB72B281}']
  { constructors } 

    {class} function init(strPassword: string; rgbSalt: TArray<Byte>): DNPasswordDeriveBytes; overload;
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>): DNPasswordDeriveBytes; overload;
    {class} function init(strPassword: string; rgbSalt: TArray<Byte>; strHashName: string; iterations: Int32): DNPasswordDeriveBytes; overload;
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; hashName: string; iterations: Int32): DNPasswordDeriveBytes; overload;
    {class} function init(strPassword: string; rgbSalt: TArray<Byte>; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;
    {class} function init(strPassword: string; rgbSalt: TArray<Byte>; strHashName: string; iterations: Int32; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; hashName: string; iterations: Int32; cspParams: DNCspParameters): DNPasswordDeriveBytes; overload;

  end;

  [DNTypeName('System.Security.Cryptography.PasswordDeriveBytes')]
  DNPasswordDeriveBytes = interface(DNDeriveBytes)
  ['{EED31DD9-AA11-3993-80E0-0088C1F5FEBA}']
  { getters & setters } 

    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_IterationCount: Int32;
    procedure set_IterationCount(value: Int32);
    function get_Salt: TArray<Byte>;
    procedure set_Salt(value: TArray<Byte>);

  { methods } 

    function GetBytes(cb: Int32): TArray<Byte>;
    procedure Reset;
    function CryptDeriveKey(algname: string; alghashname: string; keySize: Int32; rgbIV: TArray<Byte>): TArray<Byte>;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashName: string read get_HashName write set_HashName;
    property IterationCount: Int32 read get_IterationCount write set_IterationCount;
    property Salt: TArray<Byte> read get_Salt write set_Salt;
  end;

  TDNPasswordDeriveBytes = class(TDNGenericImport<DNPasswordDeriveBytesClass, DNPasswordDeriveBytes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRfc2898DeriveBytesClass = interface(DNDeriveBytesClass)
  ['{8FEAEC44-1C1B-5C90-A5D2-E29B15311A76}']
  { constructors } 

    {class} function init(password: string; saltSize: Int32): DNRfc2898DeriveBytes; overload;
    {class} function init(password: string; saltSize: Int32; iterations: Int32): DNRfc2898DeriveBytes; overload;
    {class} function init(password: string; saltSize: Int32; iterations: Int32; hashAlgorithm: DNHashAlgorithmName): DNRfc2898DeriveBytes; overload;
    {class} function init(password: string; salt: TArray<Byte>): DNRfc2898DeriveBytes; overload;
    {class} function init(password: string; salt: TArray<Byte>; iterations: Int32): DNRfc2898DeriveBytes; overload;
    {class} function init(password: string; salt: TArray<Byte>; iterations: Int32; hashAlgorithm: DNHashAlgorithmName): DNRfc2898DeriveBytes; overload;
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; iterations: Int32): DNRfc2898DeriveBytes; overload;
    {class} function init(password: TArray<Byte>; salt: TArray<Byte>; iterations: Int32; hashAlgorithm: DNHashAlgorithmName): DNRfc2898DeriveBytes; overload;

  end;

  [DNTypeName('System.Security.Cryptography.Rfc2898DeriveBytes')]
  DNRfc2898DeriveBytes = interface(DNDeriveBytes)
  ['{7107AB85-4C6D-3890-AF8A-90B2E2D82F5B}']
  { getters & setters } 

    function get_IterationCount: Int32;
    procedure set_IterationCount(value: Int32);
    function get_Salt: TArray<Byte>;
    procedure set_Salt(value: TArray<Byte>);

  { methods } 

    function GetBytes(cb: Int32): TArray<Byte>;
    procedure Reset;
    function CryptDeriveKey(algname: string; alghashname: string; keySize: Int32; rgbIV: TArray<Byte>): TArray<Byte>;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IterationCount: Int32 read get_IterationCount write set_IterationCount;
    property Salt: TArray<Byte> read get_Salt write set_Salt;
  end;

  TDNRfc2898DeriveBytes = class(TDNGenericImport<DNRfc2898DeriveBytesClass, DNRfc2898DeriveBytes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNFromBase64TransformClass = interface(DNObjectClass)
  ['{6D2070A5-6488-52C6-A9F5-080FD1A06766}']
  { constructors } 

    {class} function init: DNFromBase64Transform; overload;
    {class} function init(whitespaces: DNFromBase64TransformMode): DNFromBase64Transform; overload;

  end;

  [DNTypeName('System.Security.Cryptography.FromBase64Transform')]
  DNFromBase64Transform = interface(DNICryptoTransform)
  ['{C1ABB475-F198-39D5-BF8D-330BC7189661}']
  { getters & setters } 

    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNFromBase64Transform = class(TDNGenericImport<DNFromBase64TransformClass, DNFromBase64Transform>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHashAlgorithmClass = interface(DNObjectClass)
  ['{B57BC031-C800-55BE-8082-D139471D48BF}']
  { static methods } 

    {class} function Create(hashName: string): DNHashAlgorithm; overload;
    {class} function Create: DNHashAlgorithm; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HashAlgorithm')]
  DNHashAlgorithm = interface(DNIDisposable)
  ['{68549FC3-F82C-3387-8578-E5FB09833740}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHashAlgorithm = class(TDNGenericImport<DNHashAlgorithmClass, DNHashAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNKeyedHashAlgorithmClass = interface(DNHashAlgorithmClass)
  ['{31725715-F261-560D-817F-116D2EF948EF}']
  { static methods } 

    {class} function Create(algName: string): DNKeyedHashAlgorithm; overload;
    {class} function Create: DNKeyedHashAlgorithm; overload;

  end;

  [DNTypeName('System.Security.Cryptography.KeyedHashAlgorithm')]
  DNKeyedHashAlgorithm = interface(DNHashAlgorithm)
  ['{BF1B2D6A-E41E-3645-8257-A08D7483BD41}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNKeyedHashAlgorithm = class(TDNGenericImport<DNKeyedHashAlgorithmClass, DNKeyedHashAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACClass = interface(DNKeyedHashAlgorithmClass)
  ['{65E618A4-0CD4-5D43-8A2B-0731DC2E602B}']
  { static methods } 

    {class} function Create(algorithmName: string): DNHMAC; overload;
    {class} function Create: DNHMAC; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HMAC')]
  DNHMAC = interface(DNKeyedHashAlgorithm)
  ['{C67D3B5F-8B7F-3720-B35F-3B49D058A900}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMAC = class(TDNGenericImport<DNHMACClass, DNHMAC>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACMD5Class = interface(DNHMACClass)
  ['{5CF7764D-2DCD-5532-96AD-CDCB2145786D}']
  { constructors } 

    {class} function init: DNHMACMD5; overload;
    {class} function init(key: TArray<Byte>): DNHMACMD5; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HMACMD5')]
  DNHMACMD5 = interface(DNHMAC)
  ['{A7EDDCB5-6043-3988-921C-25E3DEE6322B}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACMD5 = class(TDNGenericImport<DNHMACMD5Class, DNHMACMD5>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACRIPEMD160Class = interface(DNHMACClass)
  ['{EB3086EE-454C-5BF0-A2D0-9A37B1956E3F}']
  { constructors } 

    {class} function init: DNHMACRIPEMD160; overload;
    {class} function init(key: TArray<Byte>): DNHMACRIPEMD160; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HMACRIPEMD160')]
  DNHMACRIPEMD160 = interface(DNHMAC)
  ['{20051D1B-321F-3E4D-A3DA-5FBE892F7EC5}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACRIPEMD160 = class(TDNGenericImport<DNHMACRIPEMD160Class, DNHMACRIPEMD160>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA1Class = interface(DNHMACClass)
  ['{B440BD85-47C5-5C5D-8E2A-1E315992B259}']
  { constructors } 

    {class} function init: DNHMACSHA1; overload;
    {class} function init(key: TArray<Byte>): DNHMACSHA1; overload;
    {class} function init(key: TArray<Byte>; useManagedSha1: Boolean): DNHMACSHA1; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HMACSHA1')]
  DNHMACSHA1 = interface(DNHMAC)
  ['{00B01B2E-B1FE-33A6-AD40-57DE8358DC7D}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA1 = class(TDNGenericImport<DNHMACSHA1Class, DNHMACSHA1>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA256Class = interface(DNHMACClass)
  ['{2C4B1F3C-9B41-5391-9B9A-8479D4349251}']
  { constructors } 

    {class} function init: DNHMACSHA256; overload;
    {class} function init(key: TArray<Byte>): DNHMACSHA256; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HMACSHA256')]
  DNHMACSHA256 = interface(DNHMAC)
  ['{2C314899-8F99-3041-A49D-2F6AFC0E6296}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA256 = class(TDNGenericImport<DNHMACSHA256Class, DNHMACSHA256>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA384Class = interface(DNHMACClass)
  ['{2E80BCE9-9614-5B90-9F1D-81D9FD6343ED}']
  { constructors } 

    {class} function init: DNHMACSHA384; overload;
    {class} function init(key: TArray<Byte>): DNHMACSHA384; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HMACSHA384')]
  DNHMACSHA384 = interface(DNHMAC)
  ['{AE53ED01-CAB4-39CE-854A-8BF544EEEC35}']
  { getters & setters } 

    function get_ProduceLegacyHmacValues: Boolean;
    procedure set_ProduceLegacyHmacValues(value: Boolean);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ProduceLegacyHmacValues: Boolean read get_ProduceLegacyHmacValues write set_ProduceLegacyHmacValues;
    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA384 = class(TDNGenericImport<DNHMACSHA384Class, DNHMACSHA384>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHMACSHA512Class = interface(DNHMACClass)
  ['{C05079DC-EFE9-535F-9EA9-272CA31D47BC}']
  { constructors } 

    {class} function init: DNHMACSHA512; overload;
    {class} function init(key: TArray<Byte>): DNHMACSHA512; overload;

  end;

  [DNTypeName('System.Security.Cryptography.HMACSHA512')]
  DNHMACSHA512 = interface(DNHMAC)
  ['{477A7D8E-8D26-3959-88F6-F6AB7E7F50CF}']
  { getters & setters } 

    function get_ProduceLegacyHmacValues: Boolean;
    procedure set_ProduceLegacyHmacValues(value: Boolean);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashName: string;
    procedure set_HashName(value: string);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ProduceLegacyHmacValues: Boolean read get_ProduceLegacyHmacValues write set_ProduceLegacyHmacValues;
    property Key: TArray<Byte> read get_Key write set_Key;
    property HashName: string read get_HashName write set_HashName;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNHMACSHA512 = class(TDNGenericImport<DNHMACSHA512Class, DNHMACSHA512>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMACTripleDESClass = interface(DNKeyedHashAlgorithmClass)
  ['{5DB54B63-9569-53C0-A178-EB7E343A53CB}']
  { constructors } 

    {class} function init: DNMACTripleDES; overload;
    {class} function init(rgbKey: TArray<Byte>): DNMACTripleDES; overload;
    {class} function init(strTripleDES: string; rgbKey: TArray<Byte>): DNMACTripleDES; overload;

  end;

  [DNTypeName('System.Security.Cryptography.MACTripleDES')]
  DNMACTripleDES = interface(DNKeyedHashAlgorithm)
  ['{39B68485-6773-3C46-82E9-56D8F0B4570C}']
  { getters & setters } 

    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Padding: DNPaddingMode read get_Padding write set_Padding;
    property Key: TArray<Byte> read get_Key write set_Key;
    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMACTripleDES = class(TDNGenericImport<DNMACTripleDESClass, DNMACTripleDES>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMD5Class = interface(DNHashAlgorithmClass)
  ['{B8A02F1A-4B1E-5B08-9929-3CABD9B0BEFC}']
  { static methods } 

    {class} function Create(algName: string): DNMD5; overload;
    {class} function Create: DNMD5; overload;

  end;

  [DNTypeName('System.Security.Cryptography.MD5')]
  DNMD5 = interface(DNHashAlgorithm)
  ['{668515A6-213D-377A-8FE4-5A1E59A10AC9}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMD5 = class(TDNGenericImport<DNMD5Class, DNMD5>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMD5CryptoServiceProviderClass = interface(DNMD5Class)
  ['{DEA3B111-DC7B-5C87-8C80-53C3D1F0EEFC}']
  { constructors } 

    {class} function init: DNMD5CryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.MD5CryptoServiceProvider')]
  DNMD5CryptoServiceProvider = interface(DNMD5)
  ['{D2548BF2-801A-36AF-8800-1F11FBF54361}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMD5CryptoServiceProvider = class(TDNGenericImport<DNMD5CryptoServiceProviderClass, DNMD5CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRIPEMD160Class = interface(DNHashAlgorithmClass)
  ['{414E2AA1-D1E6-57B5-BA2E-82BDBF7DBEF3}']
  { static methods } 

    {class} function Create(hashName: string): DNRIPEMD160; overload;
    {class} function Create: DNRIPEMD160; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RIPEMD160')]
  DNRIPEMD160 = interface(DNHashAlgorithm)
  ['{7813009A-0F6F-3F40-B73A-FAE619971619}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNRIPEMD160 = class(TDNGenericImport<DNRIPEMD160Class, DNRIPEMD160>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRIPEMD160ManagedClass = interface(DNRIPEMD160Class)
  ['{5569CBAD-FA29-53E3-A94C-6F486065404B}']
  { constructors } 

    {class} function init: DNRIPEMD160Managed;

  end;

  [DNTypeName('System.Security.Cryptography.RIPEMD160Managed')]
  DNRIPEMD160Managed = interface(DNRIPEMD160)
  ['{3D367908-928F-3C13-8B93-5E1718820F6D}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNRIPEMD160Managed = class(TDNGenericImport<DNRIPEMD160ManagedClass, DNRIPEMD160Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1Class = interface(DNHashAlgorithmClass)
  ['{1CF84507-DFB5-5F70-8DE9-8599DA280DEC}']
  { static methods } 

    {class} function Create(hashName: string): DNSHA1; overload;
    {class} function Create: DNSHA1; overload;

  end;

  [DNTypeName('System.Security.Cryptography.SHA1')]
  DNSHA1 = interface(DNHashAlgorithm)
  ['{EB52B161-AFB3-3DEA-BFAF-C183AEB57E56}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1 = class(TDNGenericImport<DNSHA1Class, DNSHA1>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1CryptoServiceProviderClass = interface(DNSHA1Class)
  ['{954E3B81-0D53-54B0-9C7E-EC2409E0B202}']
  { constructors } 

    {class} function init: DNSHA1CryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.SHA1CryptoServiceProvider')]
  DNSHA1CryptoServiceProvider = interface(DNSHA1)
  ['{FC13A7D5-E2B3-37BA-B807-7FA6238284D5}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1CryptoServiceProvider = class(TDNGenericImport<DNSHA1CryptoServiceProviderClass, DNSHA1CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1ManagedClass = interface(DNSHA1Class)
  ['{D546BB75-1810-50CE-95A9-3257713B3946}']
  { constructors } 

    {class} function init: DNSHA1Managed;

  end;

  [DNTypeName('System.Security.Cryptography.SHA1Managed')]
  DNSHA1Managed = interface(DNSHA1)
  ['{FDF9C30D-CCAB-3E2D-B584-9E24CE8038E3}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1Managed = class(TDNGenericImport<DNSHA1ManagedClass, DNSHA1Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256Class = interface(DNHashAlgorithmClass)
  ['{ADF7B889-4FEB-53C5-AC05-73564BC6B211}']
  { static methods } 

    {class} function Create(hashName: string): DNSHA256; overload;
    {class} function Create: DNSHA256; overload;

  end;

  [DNTypeName('System.Security.Cryptography.SHA256')]
  DNSHA256 = interface(DNHashAlgorithm)
  ['{E29B25FC-9402-3A80-AAA5-EB07D9EF5488}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256 = class(TDNGenericImport<DNSHA256Class, DNSHA256>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256ManagedClass = interface(DNSHA256Class)
  ['{E24457D5-B173-5F26-84BE-BBF2310E5380}']
  { constructors } 

    {class} function init: DNSHA256Managed;

  end;

  [DNTypeName('System.Security.Cryptography.SHA256Managed')]
  DNSHA256Managed = interface(DNSHA256)
  ['{44181B13-AE94-3CFB-81D1-37DB59145030}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256Managed = class(TDNGenericImport<DNSHA256ManagedClass, DNSHA256Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384Class = interface(DNHashAlgorithmClass)
  ['{AAC73710-5D75-56AF-9DB3-766B88AF8EDB}']
  { static methods } 

    {class} function Create(hashName: string): DNSHA384; overload;
    {class} function Create: DNSHA384; overload;

  end;

  [DNTypeName('System.Security.Cryptography.SHA384')]
  DNSHA384 = interface(DNHashAlgorithm)
  ['{0C00C2E9-7BBE-359E-8261-FD9B9C882A15}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384 = class(TDNGenericImport<DNSHA384Class, DNSHA384>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384ManagedClass = interface(DNSHA384Class)
  ['{1D9AF8D7-222C-5CB5-863A-D7037AD6D257}']
  { constructors } 

    {class} function init: DNSHA384Managed;

  end;

  [DNTypeName('System.Security.Cryptography.SHA384Managed')]
  DNSHA384Managed = interface(DNSHA384)
  ['{7FD3958D-0A14-3001-8074-0D15EAD7F05C}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384Managed = class(TDNGenericImport<DNSHA384ManagedClass, DNSHA384Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512Class = interface(DNHashAlgorithmClass)
  ['{8DC6FA1F-5FCF-5D8C-8AD0-A679C3BC39D4}']
  { static methods } 

    {class} function Create(hashName: string): DNSHA512; overload;
    {class} function Create: DNSHA512; overload;

  end;

  [DNTypeName('System.Security.Cryptography.SHA512')]
  DNSHA512 = interface(DNHashAlgorithm)
  ['{8DE638D4-0575-3083-9CD7-41619EF9AC75}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    procedure Initialize;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512 = class(TDNGenericImport<DNSHA512Class, DNSHA512>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512ManagedClass = interface(DNSHA512Class)
  ['{5F16DFBB-DB18-574D-B2B2-8A2CFDE57B43}']
  { constructors } 

    {class} function init: DNSHA512Managed;

  end;

  [DNTypeName('System.Security.Cryptography.SHA512Managed')]
  DNSHA512Managed = interface(DNSHA512)
  ['{A6673C32-3943-3BBB-B476-C09A0EC0BCD6}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512Managed = class(TDNGenericImport<DNSHA512ManagedClass, DNSHA512Managed>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNKeySizesClass = interface(DNObjectClass)
  ['{717250CC-4676-55C7-BF4F-793CBE3BFCB0}']
  { constructors } 

    {class} function init(minSize: Int32; maxSize: Int32; skipSize: Int32): DNKeySizes;

  end;

  [DNTypeName('System.Security.Cryptography.KeySizes')]
  DNKeySizes = interface(DNObject)
  ['{D7A12132-100F-37AE-A277-268A2656E476}']
  { getters & setters } 

    function get_MinSize: Int32;
    function get_MaxSize: Int32;
    function get_SkipSize: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MinSize: Int32 read get_MinSize;
    property MaxSize: Int32 read get_MaxSize;
    property SkipSize: Int32 read get_SkipSize;
  end;

  TDNKeySizes = class(TDNGenericImport<DNKeySizesClass, DNKeySizes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMaskGenerationMethodClass = interface(DNObjectClass)
  ['{EFEC4FC1-BB10-5196-A619-198CDAE74174}']
  end;

  [DNTypeName('System.Security.Cryptography.MaskGenerationMethod')]
  DNMaskGenerationMethod = interface(DNObject)
  ['{BE1E426E-676B-3524-9CED-21E306E9B827}']
  { methods } 

    function GenerateMask(rgbSeed: TArray<Byte>; cbReturn: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMaskGenerationMethod = class(TDNGenericImport<DNMaskGenerationMethodClass, DNMaskGenerationMethod>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNPKCS1MaskGenerationMethodClass = interface(DNMaskGenerationMethodClass)
  ['{FEAFC934-A35A-561D-858C-8E9195F11B5E}']
  { constructors } 

    {class} function init: DNPKCS1MaskGenerationMethod;

  end;

  [DNTypeName('System.Security.Cryptography.PKCS1MaskGenerationMethod')]
  DNPKCS1MaskGenerationMethod = interface(DNMaskGenerationMethod)
  ['{7AE844F0-ECA8-3F15-AE27-AFA21A2AA6F8}']
  { getters & setters } 

    function get_HashName: string;
    procedure set_HashName(value: string);

  { methods } 

    function GenerateMask(rgbSeed: TArray<Byte>; cbReturn: Int32): TArray<Byte>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property HashName: string read get_HashName write set_HashName;
  end;

  TDNPKCS1MaskGenerationMethod = class(TDNGenericImport<DNPKCS1MaskGenerationMethodClass, DNPKCS1MaskGenerationMethod>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRandomNumberGeneratorClass = interface(DNObjectClass)
  ['{36A5549F-216F-52E4-A33C-AF05BF2EFCCC}']
  { static methods } 

    {class} function Create: DNRandomNumberGenerator; overload;
    {class} function Create(rngName: string): DNRandomNumberGenerator; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RandomNumberGenerator')]
  DNRandomNumberGenerator = interface(DNIDisposable)
  ['{3E04DC56-84CE-3893-8BEF-6C9B95F9CCF4}']
  { methods } 

    procedure Dispose;
    procedure GetBytes(data: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure GetNonZeroBytes(data: TArray<Byte>);
    procedure GetBytes(data: TArray<Byte>); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRandomNumberGenerator = class(TDNGenericImport<DNRandomNumberGeneratorClass, DNRandomNumberGenerator>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRNGCryptoServiceProviderClass = interface(DNRandomNumberGeneratorClass)
  ['{B53989C6-4B69-573F-8743-30B233530237}']
  { constructors } 

    {class} function init: DNRNGCryptoServiceProvider; overload;
    {class} function init(str: string): DNRNGCryptoServiceProvider; overload;
    {class} function init(rgb: TArray<Byte>): DNRNGCryptoServiceProvider; overload;
    {class} function init(cspParams: DNCspParameters): DNRNGCryptoServiceProvider; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RNGCryptoServiceProvider')]
  DNRNGCryptoServiceProvider = interface(DNRandomNumberGenerator)
  ['{40031115-09D2-3851-A13F-56930BE48038}']
  { methods } 

    procedure GetBytes(data: TArray<Byte>); overload;
    procedure GetNonZeroBytes(data: TArray<Byte>);
    procedure Dispose;
    procedure GetBytes(data: TArray<Byte>; offset: Int32; count: Int32); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNRNGCryptoServiceProvider = class(TDNGenericImport<DNRNGCryptoServiceProviderClass, DNRNGCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRijndaelManagedTransformClass = interface(DNObjectClass)
  ['{CC5B2D30-539E-5B1D-91F9-AEC85FBE90B8}']
  end;

  [DNTypeName('System.Security.Cryptography.RijndaelManagedTransform')]
  DNRijndaelManagedTransform = interface(DNICryptoTransform)
  ['{FA28C8E8-6B89-3EC5-AC16-720D8E31DC97}']
  { getters & setters } 

    function get_BlockSizeValue: Int32;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Dispose;
    procedure Clear;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSizeValue: Int32 read get_BlockSizeValue;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNRijndaelManagedTransform = class(TDNGenericImport<DNRijndaelManagedTransformClass, DNRijndaelManagedTransform>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAEncryptionPaddingClass = interface(DNObjectClass)
  ['{B1101945-C9DF-585B-AD7A-63BFB2FAE2F4}']
  { static getter & setter } 

    {class} function get_Pkcs1: DNRSAEncryptionPadding;
    {class} function get_OaepSHA1: DNRSAEncryptionPadding;
    {class} function get_OaepSHA256: DNRSAEncryptionPadding;
    {class} function get_OaepSHA384: DNRSAEncryptionPadding;
    {class} function get_OaepSHA512: DNRSAEncryptionPadding;

  { static methods } 

    {class} function CreateOaep(hashAlgorithm: DNHashAlgorithmName): DNRSAEncryptionPadding;

  { static propertys } 

    {class} property Pkcs1: DNRSAEncryptionPadding read get_Pkcs1;
    {class} property OaepSHA1: DNRSAEncryptionPadding read get_OaepSHA1;
    {class} property OaepSHA256: DNRSAEncryptionPadding read get_OaepSHA256;
    {class} property OaepSHA384: DNRSAEncryptionPadding read get_OaepSHA384;
    {class} property OaepSHA512: DNRSAEncryptionPadding read get_OaepSHA512;
  end;

  [DNTypeName('System.Security.Cryptography.RSAEncryptionPadding')]
  DNRSAEncryptionPadding = interface(DNObject)
  ['{B9A342C5-1CF3-39B5-A083-904D79959F0A}']
  { getters & setters } 

    function get_Mode: DNRSAEncryptionPaddingMode;
    function get_OaepHashAlgorithm: DNHashAlgorithmName;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNRSAEncryptionPadding): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Mode: DNRSAEncryptionPaddingMode read get_Mode;
    property OaepHashAlgorithm: DNHashAlgorithmName read get_OaepHashAlgorithm;
  end;

  TDNRSAEncryptionPadding = class(TDNGenericImport<DNRSAEncryptionPaddingClass, DNRSAEncryptionPadding>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSASignaturePaddingClass = interface(DNObjectClass)
  ['{E7DD632B-5622-5A06-BBAA-C8A3434D7174}']
  { static getter & setter } 

    {class} function get_Pkcs1: DNRSASignaturePadding;
    {class} function get_Pss: DNRSASignaturePadding;

  { static propertys } 

    {class} property Pkcs1: DNRSASignaturePadding read get_Pkcs1;
    {class} property Pss: DNRSASignaturePadding read get_Pss;
  end;

  [DNTypeName('System.Security.Cryptography.RSASignaturePadding')]
  DNRSASignaturePadding = interface(DNObject)
  ['{B95E3BCB-9822-390B-82F4-21BCDF178092}']
  { getters & setters } 

    function get_Mode: DNRSASignaturePaddingMode;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNRSASignaturePadding): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Mode: DNRSASignaturePaddingMode read get_Mode;
  end;

  TDNRSASignaturePadding = class(TDNGenericImport<DNRSASignaturePaddingClass, DNRSASignaturePadding>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSignatureDescriptionClass = interface(DNObjectClass)
  ['{C59D7CA7-646D-5602-81A7-5CDED1D61A45}']
  { constructors } 

    {class} function init: DNSignatureDescription; overload;
    {class} function init(el: DNSecurityElement): DNSignatureDescription; overload;

  end;

  [DNTypeName('System.Security.Cryptography.SignatureDescription')]
  DNSignatureDescription = interface(DNObject)
  ['{3FA7A1C5-812C-3B56-B957-CB14AF670C09}']
  { getters & setters } 

    function get_KeyAlgorithm: string;
    procedure set_KeyAlgorithm(value: string);
    function get_DigestAlgorithm: string;
    procedure set_DigestAlgorithm(value: string);
    function get_FormatterAlgorithm: string;
    procedure set_FormatterAlgorithm(value: string);
    function get_DeformatterAlgorithm: string;
    procedure set_DeformatterAlgorithm(value: string);

  { methods } 

    function CreateDeformatter(key: DNAsymmetricAlgorithm): DNAsymmetricSignatureDeformatter;
    function CreateFormatter(key: DNAsymmetricAlgorithm): DNAsymmetricSignatureFormatter;
    function CreateDigest: DNHashAlgorithm;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyAlgorithm: string read get_KeyAlgorithm write set_KeyAlgorithm;
    property DigestAlgorithm: string read get_DigestAlgorithm write set_DigestAlgorithm;
    property FormatterAlgorithm: string read get_FormatterAlgorithm write set_FormatterAlgorithm;
    property DeformatterAlgorithm: string read get_DeformatterAlgorithm write set_DeformatterAlgorithm;
  end;

  TDNSignatureDescription = class(TDNGenericImport<DNSignatureDescriptionClass, DNSignatureDescription>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSymmetricAlgorithmClass = interface(DNObjectClass)
  ['{9BE6EDE7-8C77-5D19-8753-4D43FE8A2680}']
  { static methods } 

    {class} function Create(algName: string): DNSymmetricAlgorithm; overload;
    {class} function Create: DNSymmetricAlgorithm; overload;

  end;

  [DNTypeName('System.Security.Cryptography.SymmetricAlgorithm')]
  DNSymmetricAlgorithm = interface(DNIDisposable)
  ['{5B67EA6B-D85D-3F48-86D2-8581DB230C43}']
  { getters & setters } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNSymmetricAlgorithm = class(TDNGenericImport<DNSymmetricAlgorithmClass, DNSymmetricAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesClass = interface(DNSymmetricAlgorithmClass)
  ['{3AD48E81-6BEE-53F3-9127-0433AA6D3791}']
  { static methods } 

    {class} function Create(algorithmName: string): DNAes; overload;
    {class} function Create: DNAes; overload;

  end;

  [DNTypeName('System.Security.Cryptography.Aes')]
  DNAes = interface(DNSymmetricAlgorithm)
  ['{CC1DC774-5DCD-3DB6-BFF3-C59224F807A0}']
  { getters & setters } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNAes = class(TDNGenericImport<DNAesClass, DNAes>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDESClass = interface(DNSymmetricAlgorithmClass)
  ['{FAA5473F-97F0-5ECC-928B-7AB64B819A18}']
  { static methods } 

    {class} function Create(algName: string): DNDES; overload;
    {class} function IsWeakKey(rgbKey: TArray<Byte>): Boolean;
    {class} function IsSemiWeakKey(rgbKey: TArray<Byte>): Boolean;
    {class} function Create: DNDES; overload;

  end;

  [DNTypeName('System.Security.Cryptography.DES')]
  DNDES = interface(DNSymmetricAlgorithm)
  ['{F30D404C-A350-36FA-A6FC-054C3F583420}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNDES = class(TDNGenericImport<DNDESClass, DNDES>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDESCryptoServiceProviderClass = interface(DNDESClass)
  ['{EEA4F021-198E-5DDA-B664-3126484C832B}']
  { constructors } 

    {class} function init: DNDESCryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.DESCryptoServiceProvider')]
  DNDESCryptoServiceProvider = interface(DNDES)
  ['{B6EB52D5-BB1C-3380-8BCA-345FF43F4B04}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNDESCryptoServiceProvider = class(TDNGenericImport<DNDESCryptoServiceProviderClass, DNDESCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRC2Class = interface(DNSymmetricAlgorithmClass)
  ['{5B58D3D7-991D-5711-9171-6BBBB701C7B1}']
  { static methods } 

    {class} function Create(AlgName: string): DNRC2; overload;
    {class} function Create: DNRC2; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RC2')]
  DNRC2 = interface(DNSymmetricAlgorithm)
  ['{1C6DC255-62D6-3366-BB25-01C509085473}']
  { getters & setters } 

    function get_EffectiveKeySize: Int32;
    procedure set_EffectiveKeySize(value: Int32);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EffectiveKeySize: Int32 read get_EffectiveKeySize write set_EffectiveKeySize;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRC2 = class(TDNGenericImport<DNRC2Class, DNRC2>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRC2CryptoServiceProviderClass = interface(DNRC2Class)
  ['{A27F6125-9D99-5C0A-8B35-19304C4547A5}']
  { constructors } 

    {class} function init: DNRC2CryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.RC2CryptoServiceProvider')]
  DNRC2CryptoServiceProvider = interface(DNRC2)
  ['{62E92675-CB77-3FC9-8597-1A81A5F18013}']
  { getters & setters } 

    function get_EffectiveKeySize: Int32;
    procedure set_EffectiveKeySize(value: Int32);
    function get_UseSalt: Boolean;
    procedure set_UseSalt(value: Boolean);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EffectiveKeySize: Int32 read get_EffectiveKeySize write set_EffectiveKeySize;
    property UseSalt: Boolean read get_UseSalt write set_UseSalt;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRC2CryptoServiceProvider = class(TDNGenericImport<DNRC2CryptoServiceProviderClass, DNRC2CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRijndaelClass = interface(DNSymmetricAlgorithmClass)
  ['{9EDC60DA-69A4-5510-B05A-0528A910CAD9}']
  { static methods } 

    {class} function Create(algName: string): DNRijndael; overload;
    {class} function Create: DNRijndael; overload;

  end;

  [DNTypeName('System.Security.Cryptography.Rijndael')]
  DNRijndael = interface(DNSymmetricAlgorithm)
  ['{48CBEB8F-DB77-3103-899C-CD24A832B5CC}']
  { getters & setters } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRijndael = class(TDNGenericImport<DNRijndaelClass, DNRijndael>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRijndaelManagedClass = interface(DNRijndaelClass)
  ['{91748FC6-978D-519F-BD53-9DE628E05AE9}']
  { constructors } 

    {class} function init: DNRijndaelManaged;

  end;

  [DNTypeName('System.Security.Cryptography.RijndaelManaged')]
  DNRijndaelManaged = interface(DNRijndael)
  ['{1F9F18A3-EFC0-3913-84A5-90678A4A9A80}']
  { getters & setters } 

    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNRijndaelManaged = class(TDNGenericImport<DNRijndaelManagedClass, DNRijndaelManaged>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNTripleDESClass = interface(DNSymmetricAlgorithmClass)
  ['{5B2405F4-88D3-56B8-B804-F999C90F5A9B}']
  { static methods } 

    {class} function Create(str: string): DNTripleDES; overload;
    {class} function IsWeakKey(rgbKey: TArray<Byte>): Boolean;
    {class} function Create: DNTripleDES; overload;

  end;

  [DNTypeName('System.Security.Cryptography.TripleDES')]
  DNTripleDES = interface(DNSymmetricAlgorithm)
  ['{3D79AE1A-A949-3601-978F-02BEA1E70A98}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNTripleDES = class(TDNGenericImport<DNTripleDESClass, DNTripleDES>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNTripleDESCryptoServiceProviderClass = interface(DNTripleDESClass)
  ['{1E92F795-89C5-500F-8356-5AA9B3C87FEC}']
  { constructors } 

    {class} function init: DNTripleDESCryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.TripleDESCryptoServiceProvider')]
  DNTripleDESCryptoServiceProvider = interface(DNTripleDES)
  ['{DAA132BF-1170-3D8B-A0EF-E2F55A68A91D}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DNKeySizes>;
    function get_LegalKeySizes: TArray<DNKeySizes>;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DNCipherMode;
    procedure set_Mode(value: DNCipherMode);
    function get_Padding: DNPaddingMode;
    procedure set_Padding(value: DNPaddingMode);

  { methods } 

    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function CreateEncryptor: DNICryptoTransform; overload;
    function CreateDecryptor: DNICryptoTransform; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DNKeySizes> read get_LegalKeySizes;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DNCipherMode read get_Mode write set_Mode;
    property Padding: DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNTripleDESCryptoServiceProvider = class(TDNGenericImport<DNTripleDESCryptoServiceProviderClass, DNTripleDESCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNToBase64TransformClass = interface(DNObjectClass)
  ['{9D63D08F-1FB2-58E5-BB92-7E9E736DD30F}']
  { constructors } 

    {class} function init: DNToBase64Transform;

  end;

  [DNTypeName('System.Security.Cryptography.ToBase64Transform')]
  DNToBase64Transform = interface(DNICryptoTransform)
  ['{5F3A0F8D-5EF9-3AD5-94E0-53AFF8BCE960}']
  { getters & setters } 

    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNToBase64Transform = class(TDNGenericImport<DNToBase64TransformClass, DNToBase64Transform>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509CertificateClass = interface(DNObjectClass)
  ['{90A43604-441F-5A11-A5FB-A99D70C6FB65}']
  { constructors } 

    {class} function init: DNX509Certificate; overload;
    {class} function init(data: TArray<Byte>): DNX509Certificate; overload;
    {class} function init(rawData: TArray<Byte>; password: string): DNX509Certificate; overload;
    {class} function init(rawData: TArray<Byte>; password: DNSecureString): DNX509Certificate; overload;
    {class} function init(rawData: TArray<Byte>; password: string; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    {class} function init(rawData: TArray<Byte>; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    {class} function init(fileName: string): DNX509Certificate; overload;
    {class} function init(fileName: string; password: string): DNX509Certificate; overload;
    {class} function init(fileName: string; password: DNSecureString): DNX509Certificate; overload;
    {class} function init(fileName: string; password: string; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    {class} function init(fileName: string; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags): DNX509Certificate; overload;
    {class} function init(handle: IntPtr): DNX509Certificate; overload;
    {class} function init(cert: DNX509Certificate): DNX509Certificate; overload;
    {class} function init(info: DNSerializationInfo; context: DNStreamingContext): DNX509Certificate; overload;

  { static methods } 

    {class} function CreateFromCertFile(filename: string): DNX509Certificate;
    {class} function CreateFromSignedFile(filename: string): DNX509Certificate;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Certificate')]
  DNX509Certificate = interface(DNIDisposable)
  ['{4C69C54F-9824-38CC-8387-A22DC67E0BAB}']
  { getters & setters } 

    function get_Handle: IntPtr;
    function get_Issuer: string;
    function get_Subject: string;

  { methods } 

    function GetRawCertData: TArray<Byte>;
    procedure Reset;
    function GetName: string;
    function GetIssuerName: string;
    function GetSerialNumber: TArray<Byte>;
    function GetSerialNumberString: string;
    function GetKeyAlgorithmParameters: TArray<Byte>;
    function GetKeyAlgorithmParametersString: string;
    function GetKeyAlgorithm: string;
    function GetPublicKey: TArray<Byte>;
    function GetPublicKeyString: string;
    function GetRawCertDataString: string;
    function GetCertHash: TArray<Byte>; overload;
    function GetCertHash(hashAlgorithm: DNHashAlgorithmName): TArray<Byte>; overload;
    function GetCertHashString: string; overload;
    function GetCertHashString(hashAlgorithm: DNHashAlgorithmName): string; overload;
    function GetEffectiveDateString: string;
    function GetExpirationDateString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNX509Certificate): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    procedure Import(rawData: TArray<Byte>); overload;
    procedure Import(rawData: TArray<Byte>; password: string; keyStorageFlags: DNX509KeyStorageFlags); overload;
    procedure Import(rawData: TArray<Byte>; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags); overload;
    procedure Import(fileName: string); overload;
    procedure Import(fileName: string; password: string; keyStorageFlags: DNX509KeyStorageFlags); overload;
    procedure Import(fileName: string; password: DNSecureString; keyStorageFlags: DNX509KeyStorageFlags); overload;
    function &Export(contentType: DNX509ContentType): TArray<Byte>; overload;
    function &Export(contentType: DNX509ContentType; password: string): TArray<Byte>; overload;
    function &Export(contentType: DNX509ContentType; password: DNSecureString): TArray<Byte>; overload;
    procedure Dispose;
    function ToString(fVerbose: Boolean): string; overload;
    function GetFormat: string;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle;
    property Issuer: string read get_Issuer;
    property Subject: string read get_Subject;
  end;

  TDNX509Certificate = class(TDNGenericImport<DNX509CertificateClass, DNX509Certificate>) end;

  //-------------namespace: System.Security----------------
  DNHostSecurityManagerClass = interface(DNObjectClass)
  ['{771813C9-8CA4-5235-B35C-B71FDEC9E2B0}']
  { constructors } 

    {class} function init: DNHostSecurityManager;

  end;

  [DNTypeName('System.Security.HostSecurityManager')]
  DNHostSecurityManager = interface(DNObject)
  ['{84589833-40D7-36E2-8545-67A92B97C408}']
  { getters & setters } 

    function get_Flags: DNHostSecurityManagerOptions;
    function get_DomainPolicy: DNPolicyLevel;

  { methods } 

    function ResolvePolicy(evidence: DNEvidence): DNPermissionSet;
    function ProvideAppDomainEvidence(inputEvidence: DNEvidence): DNEvidence;
    function ProvideAssemblyEvidence(loadedAssembly: DNAssembly; inputEvidence: DNEvidence): DNEvidence;
    function DetermineApplicationTrust(applicationEvidence: DNEvidence; activatorEvidence: DNEvidence; context: DNTrustManagerContext): DNApplicationTrust;
    function GetHostSuppliedAppDomainEvidenceTypes: TArray<DNType>;
    function GetHostSuppliedAssemblyEvidenceTypes(assembly: DNAssembly): TArray<DNType>;
    function GenerateAppDomainEvidence(evidenceType: DNType): DNEvidenceBase;
    function GenerateAssemblyEvidence(evidenceType: DNType; assembly: DNAssembly): DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNHostSecurityManagerOptions read get_Flags;
    property DomainPolicy: DNPolicyLevel read get_DomainPolicy;
  end;

  TDNHostSecurityManager = class(TDNGenericImport<DNHostSecurityManagerClass, DNHostSecurityManager>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAccessEntryClass = interface(DNObjectClass)
  ['{E2C144B1-81A8-53FB-A42E-C480E9605303}']
  { constructors } 

    {class} function init(keyContainerName: string; flags: DNKeyContainerPermissionFlags): DNKeyContainerPermissionAccessEntry; overload;
    {class} function init(parameters: DNCspParameters; flags: DNKeyContainerPermissionFlags): DNKeyContainerPermissionAccessEntry; overload;
    {class} function init(keyStore: string; providerName: string; providerType: Int32; keyContainerName: string; keySpec: Int32; flags: DNKeyContainerPermissionFlags): DNKeyContainerPermissionAccessEntry; overload;

  end;

  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAccessEntry')]
  DNKeyContainerPermissionAccessEntry = interface(DNObject)
  ['{AB32DBC6-3D50-3098-8B72-FE98BA5CEFBA}']
  { getters & setters } 

    function get_KeyStore: string;
    procedure set_KeyStore(value: string);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_ProviderType: Int32;
    procedure set_ProviderType(value: Int32);
    function get_KeyContainerName: string;
    procedure set_KeyContainerName(value: string);
    function get_KeySpec: Int32;
    procedure set_KeySpec(value: Int32);
    function get_Flags: DNKeyContainerPermissionFlags;
    procedure set_Flags(value: DNKeyContainerPermissionFlags);

  { methods } 

    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyStore: string read get_KeyStore write set_KeyStore;
    property ProviderName: string read get_ProviderName write set_ProviderName;
    property ProviderType: Int32 read get_ProviderType write set_ProviderType;
    property KeyContainerName: string read get_KeyContainerName write set_KeyContainerName;
    property KeySpec: Int32 read get_KeySpec write set_KeySpec;
    property Flags: DNKeyContainerPermissionFlags read get_Flags write set_Flags;
  end;

  TDNKeyContainerPermissionAccessEntry = class(TDNGenericImport<DNKeyContainerPermissionAccessEntryClass, DNKeyContainerPermissionAccessEntry>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAccessEntryCollectionClass = interface(DNObjectClass)
  ['{F45E74FA-E2E5-5385-A355-78BCE082A249}']
  end;

  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAccessEntryCollection')]
  DNKeyContainerPermissionAccessEntryCollection = interface(DNICollection)
  ['{A9B28590-073C-392C-82F4-B47FD3D00EC3}']
  { getters & setters } 

    function get_Item(index: Int32): DNKeyContainerPermissionAccessEntry;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    function Add(accessEntry: DNKeyContainerPermissionAccessEntry): Int32;
    procedure Clear;
    function IndexOf(accessEntry: DNKeyContainerPermissionAccessEntry): Int32;
    procedure Remove(accessEntry: DNKeyContainerPermissionAccessEntry);
    function GetEnumerator: DNKeyContainerPermissionAccessEntryEnumerator;
    procedure CopyTo(&array: TArray<DNKeyContainerPermissionAccessEntry>; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNKeyContainerPermissionAccessEntry read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNKeyContainerPermissionAccessEntryCollection = class(TDNGenericImport<DNKeyContainerPermissionAccessEntryCollectionClass, DNKeyContainerPermissionAccessEntryCollection>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNKeyContainerPermissionAccessEntryEnumeratorClass = interface(DNObjectClass)
  ['{8570ED48-7514-553C-87CF-F6791546FA31}']
  end;

  [DNTypeName('System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator')]
  DNKeyContainerPermissionAccessEntryEnumerator = interface(DNIEnumerator)
  ['{616E9D9E-EE8A-35E6-A0A1-8BF70D536B02}']
  { getters & setters } 

    function get_Current: DNKeyContainerPermissionAccessEntry;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Current: DNKeyContainerPermissionAccessEntry read get_Current;
  end;

  TDNKeyContainerPermissionAccessEntryEnumerator = class(TDNGenericImport<DNKeyContainerPermissionAccessEntryEnumeratorClass, DNKeyContainerPermissionAccessEntryEnumerator>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNPrincipalPermissionClass = interface(DNObjectClass)
  ['{18263831-8191-5FE1-9FAF-AA793F79F9D3}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNPrincipalPermission; overload;
    {class} function init(name: string; role: string): DNPrincipalPermission; overload;
    {class} function init(name: string; role: string; isAuthenticated: Boolean): DNPrincipalPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.PrincipalPermission')]
  DNPrincipalPermission = interface(DNIPermission)
  ['{67100ADE-60CF-33F1-8D95-F6FE1174458A}']
  { methods } 

    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Intersect(target: DNIPermission): DNIPermission;
    function Union(other: DNIPermission): DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Copy: DNIPermission;
    procedure Demand;
    procedure FromXml(elem: DNSecurityElement);
    function ToString: string;
    function ToXml: DNSecurityElement;
    function GetType: DNType;

  end;

  TDNPrincipalPermission = class(TDNGenericImport<DNPrincipalPermissionClass, DNPrincipalPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStrongNamePublicKeyBlobClass = interface(DNObjectClass)
  ['{5F6609DD-CE00-58DB-9CEC-DFAAB5077342}']
  { constructors } 

    {class} function init(publicKey: TArray<Byte>): DNStrongNamePublicKeyBlob;

  end;

  [DNTypeName('System.Security.Permissions.StrongNamePublicKeyBlob')]
  DNStrongNamePublicKeyBlob = interface(DNObject)
  ['{A463394F-7BA6-3721-8AD8-842748612B4C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNStrongNamePublicKeyBlob = class(TDNGenericImport<DNStrongNamePublicKeyBlobClass, DNStrongNamePublicKeyBlob>) end;

  //-------------namespace: System.Security----------------
  DNPermissionSetClass = interface(DNObjectClass)
  ['{61243A5D-0E7C-5B80-ACBF-EA675E44D8FA}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNPermissionSet; overload;
    {class} function init(permSet: DNPermissionSet): DNPermissionSet; overload;

  { static methods } 

    {class} function ConvertPermissionSet(inFormat: string; inData: TArray<Byte>; outFormat: string): TArray<Byte>;
    {class} procedure RevertAssert;

  end;

  [DNTypeName('System.Security.PermissionSet')]
  DNPermissionSet = interface(DNISecurityEncodable)
  ['{AFAFD122-DAC4-3FF9-9646-DC032A4A8806}']
  { getters & setters } 

    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: DNArray; index: Int32);
    function IsEmpty: Boolean;
    function GetPermission(permClass: DNType): DNIPermission;
    function SetPermission(perm: DNIPermission): DNIPermission;
    function AddPermission(perm: DNIPermission): DNIPermission;
    function RemovePermission(permClass: DNType): DNIPermission;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNPermissionSet): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function Copy: DNPermissionSet;
    function GetEnumerator: DNIEnumerator;
    function ToString: string;
    procedure FromXml(et: DNSecurityElement);
    function ContainsNonCodeAccessPermissions: Boolean;
    function Union(other: DNPermissionSet): DNPermissionSet;
    function ToXml: DNSecurityElement;
    function Intersect(other: DNPermissionSet): DNPermissionSet;
    function GetType: DNType;

  { propertys } 

    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
  end;

  TDNPermissionSet = class(TDNGenericImport<DNPermissionSetClass, DNPermissionSet>) end;

  //-------------namespace: System.Security----------------
  DNNamedPermissionSetClass = interface(DNPermissionSetClass)
  ['{6AFB2AE8-14E6-5628-8BB4-998E5098850E}']
  { constructors } 

    {class} function init(name: string): DNNamedPermissionSet; overload;
    {class} function init(name: string; state: DNPermissionState): DNNamedPermissionSet; overload;
    {class} function init(name: string; permSet: DNPermissionSet): DNNamedPermissionSet; overload;
    {class} function init(permSet: DNNamedPermissionSet): DNNamedPermissionSet; overload;

  end;

  [DNTypeName('System.Security.NamedPermissionSet')]
  DNNamedPermissionSet = interface(DNPermissionSet)
  ['{C23E56CE-0A9A-3733-8189-46B43C9E4FB3}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    function ToXml: DNSecurityElement;
    function Copy: DNPermissionSet; overload;
    function Copy(name: string): DNNamedPermissionSet; overload;
    procedure FromXml(et: DNSecurityElement);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: DNArray; index: Int32);
    function IsEmpty: Boolean;
    function GetPermission(permClass: DNType): DNIPermission;
    function SetPermission(perm: DNIPermission): DNIPermission;
    function AddPermission(perm: DNIPermission): DNIPermission;
    function RemovePermission(permClass: DNType): DNIPermission;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNPermissionSet): Boolean;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function GetEnumerator: DNIEnumerator;
    function ToString: string;
    function ContainsNonCodeAccessPermissions: Boolean;
    function Union(other: DNPermissionSet): DNPermissionSet;
    function Intersect(other: DNPermissionSet): DNPermissionSet;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
  end;

  TDNNamedPermissionSet = class(TDNGenericImport<DNNamedPermissionSetClass, DNNamedPermissionSet>) end;

  //-------------namespace: System.Security----------------
  DNReadOnlyPermissionSetClass = interface(DNPermissionSetClass)
  ['{D35ECBC8-785E-52A4-80ED-4B39F9BEDCFF}']
  { constructors } 

    {class} function init(permissionSetXml: DNSecurityElement): DNReadOnlyPermissionSet;

  end;

  [DNTypeName('System.Security.ReadOnlyPermissionSet')]
  DNReadOnlyPermissionSet = interface(DNPermissionSet)
  ['{C9167755-37FF-3ED4-9296-50F8ED2AAC76}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;

  { methods } 

    function Copy: DNPermissionSet;
    function ToXml: DNSecurityElement;
    procedure FromXml(et: DNSecurityElement);
    procedure CopyTo(&array: DNArray; index: Int32);
    function IsEmpty: Boolean;
    function GetPermission(permClass: DNType): DNIPermission;
    function SetPermission(perm: DNIPermission): DNIPermission;
    function AddPermission(perm: DNIPermission): DNIPermission;
    function RemovePermission(permClass: DNType): DNIPermission;
    function IsUnrestricted: Boolean;
    function IsSubsetOf(target: DNPermissionSet): Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function GetEnumerator: DNIEnumerator;
    function ToString: string;
    function ContainsNonCodeAccessPermissions: Boolean;
    function Union(other: DNPermissionSet): DNPermissionSet;
    function Intersect(other: DNPermissionSet): DNPermissionSet;
    function GetType: DNType;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyPermissionSet = class(TDNGenericImport<DNReadOnlyPermissionSetClass, DNReadOnlyPermissionSet>) end;

  //-------------namespace: System.Security.Policy----------------
  DNAllMembershipConditionClass = interface(DNObjectClass)
  ['{AA820D36-7487-57E6-B53C-C36C92876395}']
  { constructors } 

    {class} function init: DNAllMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.AllMembershipCondition')]
  DNAllMembershipCondition = interface(DNIMembershipCondition)
  ['{06B81C12-A5DA-340D-AFF7-FA1453FBC29A}']
  { methods } 

    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAllMembershipCondition = class(TDNGenericImport<DNAllMembershipConditionClass, DNAllMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationDirectoryMembershipConditionClass = interface(DNObjectClass)
  ['{02A04D86-4C2A-59F7-B95F-5FDADFB0F00A}']
  { constructors } 

    {class} function init: DNApplicationDirectoryMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.ApplicationDirectoryMembershipCondition')]
  DNApplicationDirectoryMembershipCondition = interface(DNIMembershipCondition)
  ['{3DDB2114-9285-30A6-906D-B117640CA927}']
  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNApplicationDirectoryMembershipCondition = class(TDNGenericImport<DNApplicationDirectoryMembershipConditionClass, DNApplicationDirectoryMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationSecurityInfoClass = interface(DNObjectClass)
  ['{5E206503-5293-5F3C-A0DB-9E434251B1C5}']
  { constructors } 

    {class} function init(activationContext: DNActivationContext): DNApplicationSecurityInfo;

  end;

  [DNTypeName('System.Security.Policy.ApplicationSecurityInfo')]
  DNApplicationSecurityInfo = interface(DNObject)
  ['{80472D32-EF68-3988-BE44-BD9E336D4DF8}']
  { getters & setters } 

    function get_ApplicationId: DNApplicationId;
    procedure set_ApplicationId(value: DNApplicationId);
    function get_DeploymentId: DNApplicationId;
    procedure set_DeploymentId(value: DNApplicationId);
    function get_DefaultRequestSet: DNPermissionSet;
    procedure set_DefaultRequestSet(value: DNPermissionSet);
    function get_ApplicationEvidence: DNEvidence;
    procedure set_ApplicationEvidence(value: DNEvidence);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ApplicationId: DNApplicationId read get_ApplicationId write set_ApplicationId;
    property DeploymentId: DNApplicationId read get_DeploymentId write set_DeploymentId;
    property DefaultRequestSet: DNPermissionSet read get_DefaultRequestSet write set_DefaultRequestSet;
    property ApplicationEvidence: DNEvidence read get_ApplicationEvidence write set_ApplicationEvidence;
  end;

  TDNApplicationSecurityInfo = class(TDNGenericImport<DNApplicationSecurityInfoClass, DNApplicationSecurityInfo>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationSecurityManagerClass = interface(DNObjectClass)
  ['{1B1AA41B-C774-5617-A4CD-B2ACBCA9F508}']
  { static getter & setter } 

    {class} function get_UserApplicationTrusts: DNApplicationTrustCollection;
    {class} function get_ApplicationTrustManager: DNIApplicationTrustManager;

  { static methods } 

    {class} function DetermineApplicationTrust(activationContext: DNActivationContext; context: DNTrustManagerContext): Boolean;

  { static propertys } 

    {class} property UserApplicationTrusts: DNApplicationTrustCollection read get_UserApplicationTrusts;
    {class} property ApplicationTrustManager: DNIApplicationTrustManager read get_ApplicationTrustManager;
  end;

  [DNTypeName('System.Security.Policy.ApplicationSecurityManager')]
  DNApplicationSecurityManager = interface(DNObject)
  ['{2FB9AC2A-8724-32D0-98FA-218C1B2B3E1D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNApplicationSecurityManager = class(TDNGenericImport<DNApplicationSecurityManagerClass, DNApplicationSecurityManager>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationTrustCollectionClass = interface(DNObjectClass)
  ['{DC602A15-F2D4-5EAD-83A3-F4EBAC12B645}']
  end;

  [DNTypeName('System.Security.Policy.ApplicationTrustCollection')]
  DNApplicationTrustCollection = interface(DNICollection)
  ['{45CD6D50-A8B4-3783-9759-445FC3D4731C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNApplicationTrust; overload;
    function get_Item(appFullName: string): DNApplicationTrust; overload;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    function Add(trust: DNApplicationTrust): Int32;
    procedure AddRange(trusts: TArray<DNApplicationTrust>); overload;
    procedure AddRange(trusts: DNApplicationTrustCollection); overload;
    function Find(applicationIdentity: DNApplicationIdentity; versionMatch: DNApplicationVersionMatch): DNApplicationTrustCollection;
    procedure Remove(applicationIdentity: DNApplicationIdentity; versionMatch: DNApplicationVersionMatch); overload;
    procedure Remove(trust: DNApplicationTrust); overload;
    procedure RemoveRange(trusts: TArray<DNApplicationTrust>); overload;
    procedure RemoveRange(trusts: DNApplicationTrustCollection); overload;
    procedure Clear;
    function GetEnumerator: DNApplicationTrustEnumerator;
    procedure CopyTo(&array: TArray<DNApplicationTrust>; index: Int32);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNApplicationTrust read get_Item; default;
    property Item[appFullName: string]: DNApplicationTrust read get_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNApplicationTrustCollection = class(TDNGenericImport<DNApplicationTrustCollectionClass, DNApplicationTrustCollection>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationTrustEnumeratorClass = interface(DNObjectClass)
  ['{E9FF3CB1-F7A6-5A0D-8D2A-2AC6F0D70997}']
  end;

  [DNTypeName('System.Security.Policy.ApplicationTrustEnumerator')]
  DNApplicationTrustEnumerator = interface(DNIEnumerator)
  ['{128BA7D4-E68F-3223-85BE-7372D0FB5423}']
  { getters & setters } 

    function get_Current: DNApplicationTrust;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Current: DNApplicationTrust read get_Current;
  end;

  TDNApplicationTrustEnumerator = class(TDNGenericImport<DNApplicationTrustEnumeratorClass, DNApplicationTrustEnumerator>) end;

  //-------------namespace: System.Security.Policy----------------
  DNCodeConnectAccessClass = interface(DNObjectClass)
  ['{3E760C7B-0D97-5EAC-AC85-F79EAD02846F}']
  { constructors } 

    {class} function init(allowScheme: string; allowPort: Int32): DNCodeConnectAccess;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultPort: Int32;
   function __fakeFieldGet_OriginPort: Int32;
   function __fakeFieldGet_OriginScheme: string;
   function __fakeFieldGet_AnyScheme: string;

  { static fields } 

    {class} property DefaultPort: Int32 read __fakeFieldGet_DefaultPort;
    {class} property OriginPort: Int32 read __fakeFieldGet_OriginPort;
    {class} property OriginScheme: string read __fakeFieldGet_OriginScheme;
    {class} property AnyScheme: string read __fakeFieldGet_AnyScheme;

  { static methods } 

    {class} function CreateOriginSchemeAccess(allowPort: Int32): DNCodeConnectAccess;
    {class} function CreateAnySchemeAccess(allowPort: Int32): DNCodeConnectAccess;

  end;

  [DNTypeName('System.Security.Policy.CodeConnectAccess')]
  DNCodeConnectAccess = interface(DNObject)
  ['{E7473F93-ECCF-38ED-9285-E93CD2D27608}']
  { getters & setters } 

    function get_Scheme: string;
    function get_Port: Int32;

  { methods } 

    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Scheme: string read get_Scheme;
    property Port: Int32 read get_Port;
  end;

  TDNCodeConnectAccess = class(TDNGenericImport<DNCodeConnectAccessClass, DNCodeConnectAccess>) end;

  //-------------namespace: System.Security.Policy----------------
  DNCodeGroupClass = interface(DNObjectClass)
  ['{D00CE960-3466-53B8-927C-8BC11CB100B1}']
  end;

  [DNTypeName('System.Security.Policy.CodeGroup')]
  DNCodeGroup = interface(DNObject)
  ['{05C4D71E-FB7D-30BE-B6B4-1DF8999CEEE1}']
  { getters & setters } 

    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_PermissionSetName: string;
    function get_AttributeString: string;
    function get_MergeLogic: string;

  { methods } 

    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetHashCode: Int32;
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    function Copy: DNCodeGroup;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property PermissionSetName: string read get_PermissionSetName;
    property AttributeString: string read get_AttributeString;
    property MergeLogic: string read get_MergeLogic;
  end;

  TDNCodeGroup = class(TDNGenericImport<DNCodeGroupClass, DNCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNFileCodeGroupClass = interface(DNCodeGroupClass)
  ['{7AE2FB0E-DF50-5B54-97C5-F75CB2602D31}']
  { constructors } 

    {class} function init(membershipCondition: DNIMembershipCondition; access: DNFileIOPermissionAccess): DNFileCodeGroup;

  end;

  [DNTypeName('System.Security.Policy.FileCodeGroup')]
  DNFileCodeGroup = interface(DNCodeGroup)
  ['{3F8D7E3A-24E7-3F7C-9DC5-4CA22EE7C782}']
  { getters & setters } 

    function get_MergeLogic: string;
    function get_PermissionSetName: string;
    function get_AttributeString: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);

  { methods } 

    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    function Copy: DNCodeGroup;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MergeLogic: string read get_MergeLogic;
    property PermissionSetName: string read get_PermissionSetName;
    property AttributeString: string read get_AttributeString;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
  end;

  TDNFileCodeGroup = class(TDNGenericImport<DNFileCodeGroupClass, DNFileCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNFirstMatchCodeGroupClass = interface(DNCodeGroupClass)
  ['{0B388F3B-45A8-5A9A-9E49-935A97368B59}']
  { constructors } 

    {class} function init(membershipCondition: DNIMembershipCondition; policy: DNPolicyStatement): DNFirstMatchCodeGroup;

  end;

  [DNTypeName('System.Security.Policy.FirstMatchCodeGroup')]
  DNFirstMatchCodeGroup = interface(DNCodeGroup)
  ['{28635CC7-4C39-3779-8C31-839101001F78}']
  { getters & setters } 

    function get_MergeLogic: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_PermissionSetName: string;
    function get_AttributeString: string;

  { methods } 

    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    function Copy: DNCodeGroup;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MergeLogic: string read get_MergeLogic;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property PermissionSetName: string read get_PermissionSetName;
    property AttributeString: string read get_AttributeString;
  end;

  TDNFirstMatchCodeGroup = class(TDNGenericImport<DNFirstMatchCodeGroupClass, DNFirstMatchCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNNetCodeGroupClass = interface(DNCodeGroupClass)
  ['{D5950FA5-5131-5F86-ADA4-872967E897CF}']
  { constructors } 

    {class} function init(membershipCondition: DNIMembershipCondition): DNNetCodeGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_AnyOtherOriginScheme: string;
   function __fakeFieldGet_AbsentOriginScheme: string;

  { static fields } 

    {class} property AnyOtherOriginScheme: string read __fakeFieldGet_AnyOtherOriginScheme;
    {class} property AbsentOriginScheme: string read __fakeFieldGet_AbsentOriginScheme;

  end;

  [DNTypeName('System.Security.Policy.NetCodeGroup')]
  DNNetCodeGroup = interface(DNCodeGroup)
  ['{A601B6B7-422D-3B21-A61C-A77C5512F36A}']
  { getters & setters } 

    function get_MergeLogic: string;
    function get_PermissionSetName: string;
    function get_AttributeString: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);

  { methods } 

    procedure ResetConnectAccess;
    procedure AddConnectAccess(originScheme: string; connectAccess: DNCodeConnectAccess);
    function GetConnectAccessRules: TArray<DNDictionaryEntry>;
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    function Copy: DNCodeGroup;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MergeLogic: string read get_MergeLogic;
    property PermissionSetName: string read get_PermissionSetName;
    property AttributeString: string read get_AttributeString;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
  end;

  TDNNetCodeGroup = class(TDNGenericImport<DNNetCodeGroupClass, DNNetCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNUnionCodeGroupClass = interface(DNCodeGroupClass)
  ['{6F841C58-F523-5580-A213-C1A6030BD800}']
  { constructors } 

    {class} function init(membershipCondition: DNIMembershipCondition; policy: DNPolicyStatement): DNUnionCodeGroup;

  end;

  [DNTypeName('System.Security.Policy.UnionCodeGroup')]
  DNUnionCodeGroup = interface(DNCodeGroup)
  ['{F424D0BE-F3CB-3D09-9B18-C523A739EBFE}']
  { getters & setters } 

    function get_MergeLogic: string;
    function get_Children: DNIList;
    procedure set_Children(value: DNIList);
    function get_MembershipCondition: DNIMembershipCondition;
    procedure set_MembershipCondition(value: DNIMembershipCondition);
    function get_PolicyStatement: DNPolicyStatement;
    procedure set_PolicyStatement(value: DNPolicyStatement);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_PermissionSetName: string;
    function get_AttributeString: string;

  { methods } 

    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    function Copy: DNCodeGroup;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    procedure AddChild(group: DNCodeGroup);
    procedure RemoveChild(group: DNCodeGroup);
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(cg: DNCodeGroup; compareChildren: Boolean): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MergeLogic: string read get_MergeLogic;
    property Children: DNIList read get_Children write set_Children;
    property MembershipCondition: DNIMembershipCondition read get_MembershipCondition write set_MembershipCondition;
    property PolicyStatement: DNPolicyStatement read get_PolicyStatement write set_PolicyStatement;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property PermissionSetName: string read get_PermissionSetName;
    property AttributeString: string read get_AttributeString;
  end;

  TDNUnionCodeGroup = class(TDNGenericImport<DNUnionCodeGroupClass, DNUnionCodeGroup>) end;

  //-------------namespace: System.Security.Policy----------------
  DNEvidenceClass = interface(DNObjectClass)
  ['{D5D033E0-89BE-51DC-8A5B-1C82029B6062}']
  { constructors } 

    {class} function init: DNEvidence; overload;
    {class} function init(evidence: DNEvidence): DNEvidence; overload;
    {class} function init(hostEvidence: TArray<DNObject>; assemblyEvidence: TArray<DNObject>): DNEvidence; overload;
    {class} function init(hostEvidence: TArray<DNEvidenceBase>; assemblyEvidence: TArray<DNEvidenceBase>): DNEvidence; overload;

  end;

  [DNTypeName('System.Security.Policy.Evidence')]
  DNEvidence = interface(DNICollection)
  ['{62545937-20A9-3D0F-B04B-322E854EACB0}']
  { getters & setters } 

    function get_Locked: Boolean;
    procedure set_Locked(value: Boolean);
    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure AddHost(id: DNObject);
    procedure AddAssembly(id: DNObject);
    procedure Merge(evidence: DNEvidence);
    procedure CopyTo(&array: DNArray; index: Int32);
    function GetHostEnumerator: DNIEnumerator;
    function GetAssemblyEnumerator: DNIEnumerator;
    function GetEnumerator: DNIEnumerator;
    function Clone: DNEvidence;
    procedure Clear;
    procedure RemoveType(t: DNType);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Locked: Boolean read get_Locked write set_Locked;
    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNEvidence = class(TDNGenericImport<DNEvidenceClass, DNEvidence>) end;

  //-------------namespace: System.Security.Policy----------------
  DNEvidenceBaseClass = interface(DNObjectClass)
  ['{5EC8D91E-D575-58B5-8BF4-B1072554CFD1}']
  end;

  [DNTypeName('System.Security.Policy.EvidenceBase')]
  DNEvidenceBase = interface(DNObject)
  ['{D85D40CE-A21A-3C41-A38F-323709B37697}']
  { methods } 

    function Clone: DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEvidenceBase = class(TDNGenericImport<DNEvidenceBaseClass, DNEvidenceBase>) end;

  //-------------namespace: System.Runtime.Hosting----------------
  DNActivationArgumentsClass = interface(DNEvidenceBaseClass)
  ['{01E102A8-0406-567E-9A8C-69430FAB32B7}']
  { constructors } 

    {class} function init(applicationIdentity: DNApplicationIdentity): DNActivationArguments; overload;
    {class} function init(applicationIdentity: DNApplicationIdentity; activationData: TArray<string>): DNActivationArguments; overload;
    {class} function init(activationData: DNActivationContext): DNActivationArguments; overload;
    {class} function init(activationContext: DNActivationContext; activationData: TArray<string>): DNActivationArguments; overload;

  end;

  [DNTypeName('System.Runtime.Hosting.ActivationArguments')]
  DNActivationArguments = interface(DNEvidenceBase)
  ['{D12B05F9-0654-351A-92D1-8FDAC1F243DE}']
  { getters & setters } 

    function get_ApplicationIdentity: DNApplicationIdentity;
    function get_ActivationContext: DNActivationContext;
    function get_ActivationData: TArray<string>;

  { methods } 

    function Clone: DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ApplicationIdentity: DNApplicationIdentity read get_ApplicationIdentity;
    property ActivationContext: DNActivationContext read get_ActivationContext;
    property ActivationData: TArray<string> read get_ActivationData;
  end;

  TDNActivationArguments = class(TDNGenericImport<DNActivationArgumentsClass, DNActivationArguments>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationDirectoryClass = interface(DNEvidenceBaseClass)
  ['{6FEE130C-2D6A-5D55-83D1-86BC1EE23B07}']
  { constructors } 

    {class} function init(name: string): DNApplicationDirectory;

  end;

  [DNTypeName('System.Security.Policy.ApplicationDirectory')]
  DNApplicationDirectory = interface(DNEvidenceBase)
  ['{720BF501-75AA-39F3-B6C2-EABE2F47CEE5}']
  { getters & setters } 

    function get_Directory: string;

  { methods } 

    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNEvidenceBase;
    function Copy: DNObject;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Directory: string read get_Directory;
  end;

  TDNApplicationDirectory = class(TDNGenericImport<DNApplicationDirectoryClass, DNApplicationDirectory>) end;

  //-------------namespace: System.Security.Policy----------------
  DNApplicationTrustClass = interface(DNEvidenceBaseClass)
  ['{AF7EC807-4D63-526A-81D0-E089D4D09C25}']
  { constructors } 

    {class} function init(applicationIdentity: DNApplicationIdentity): DNApplicationTrust; overload;
    {class} function init: DNApplicationTrust; overload;
    {class} function init(defaultGrantSet: DNPermissionSet; fullTrustAssemblies: DNIEnumerable<DNStrongName>): DNApplicationTrust; overload;

  end;

  [DNTypeName('System.Security.Policy.ApplicationTrust')]
  DNApplicationTrust = interface(DNEvidenceBase)
  ['{A5448B7A-AA07-3C56-B42B-7D881FA10934}']
  { getters & setters } 

    function get_ApplicationIdentity: DNApplicationIdentity;
    procedure set_ApplicationIdentity(value: DNApplicationIdentity);
    function get_DefaultGrantSet: DNPolicyStatement;
    procedure set_DefaultGrantSet(value: DNPolicyStatement);
    function get_FullTrustAssemblies: DNIList<DNStrongName>;
    function get_IsApplicationTrustedToRun: Boolean;
    procedure set_IsApplicationTrustedToRun(value: Boolean);
    function get_Persist: Boolean;
    procedure set_Persist(value: Boolean);
    function get_ExtraInfo: DNObject;
    procedure set_ExtraInfo(value: DNObject);

  { methods } 

    function ToXml: DNSecurityElement;
    procedure FromXml(element: DNSecurityElement);
    function Clone: DNEvidenceBase;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ApplicationIdentity: DNApplicationIdentity read get_ApplicationIdentity write set_ApplicationIdentity;
    property DefaultGrantSet: DNPolicyStatement read get_DefaultGrantSet write set_DefaultGrantSet;
    property FullTrustAssemblies: DNIList<DNStrongName> read get_FullTrustAssemblies;
    property IsApplicationTrustedToRun: Boolean read get_IsApplicationTrustedToRun write set_IsApplicationTrustedToRun;
    property Persist: Boolean read get_Persist write set_Persist;
    property ExtraInfo: DNObject read get_ExtraInfo write set_ExtraInfo;
  end;

  TDNApplicationTrust = class(TDNGenericImport<DNApplicationTrustClass, DNApplicationTrust>) end;

  //-------------namespace: System.Security.Policy----------------
  DNGacInstalledClass = interface(DNEvidenceBaseClass)
  ['{315F55D6-3706-5026-81CB-266A0D168C9F}']
  { constructors } 

    {class} function init: DNGacInstalled;

  end;

  [DNTypeName('System.Security.Policy.GacInstalled')]
  DNGacInstalled = interface(DNEvidenceBase)
  ['{EE24A2C3-3AA2-33DA-8731-A4FCC1105813}']
  { methods } 

    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNEvidenceBase;
    function Copy: DNObject;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNGacInstalled = class(TDNGenericImport<DNGacInstalledClass, DNGacInstalled>) end;

  //-------------namespace: System.Security.Policy----------------
  DNHashClass = interface(DNEvidenceBaseClass)
  ['{6EDC9A8E-56A6-54E4-BC2E-6D45654F497B}']
  { constructors } 

    {class} function init(assembly: DNAssembly): DNHash;

  { static methods } 

    {class} function CreateSHA1(sha1: TArray<Byte>): DNHash;
    {class} function CreateSHA256(sha256: TArray<Byte>): DNHash;
    {class} function CreateMD5(md5: TArray<Byte>): DNHash;

  end;

  [DNTypeName('System.Security.Policy.Hash')]
  DNHash = interface(DNEvidenceBase)
  ['{260356E2-BAFA-3349-8BF7-86EEB460A2C7}']
  { getters & setters } 

    function get_SHA1: TArray<Byte>;
    function get_SHA256: TArray<Byte>;
    function get_MD5: TArray<Byte>;

  { methods } 

    function Clone: DNEvidenceBase;
    function GenerateHash(hashAlg: DNHashAlgorithm): TArray<Byte>;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property SHA1: TArray<Byte> read get_SHA1;
    property SHA256: TArray<Byte> read get_SHA256;
    property MD5: TArray<Byte> read get_MD5;
  end;

  TDNHash = class(TDNGenericImport<DNHashClass, DNHash>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPermissionRequestEvidenceClass = interface(DNEvidenceBaseClass)
  ['{0268F3EF-7DF6-5B56-8DCB-93FD7E802E40}']
  { constructors } 

    {class} function init(request: DNPermissionSet; optional: DNPermissionSet; denied: DNPermissionSet): DNPermissionRequestEvidence;

  end;

  [DNTypeName('System.Security.Policy.PermissionRequestEvidence')]
  DNPermissionRequestEvidence = interface(DNEvidenceBase)
  ['{E1C3E338-B088-3C69-9989-A0E59E96FEA8}']
  { getters & setters } 

    function get_RequestedPermissions: DNPermissionSet;
    function get_OptionalPermissions: DNPermissionSet;
    function get_DeniedPermissions: DNPermissionSet;

  { methods } 

    function Clone: DNEvidenceBase;
    function Copy: DNPermissionRequestEvidence;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property RequestedPermissions: DNPermissionSet read get_RequestedPermissions;
    property OptionalPermissions: DNPermissionSet read get_OptionalPermissions;
    property DeniedPermissions: DNPermissionSet read get_DeniedPermissions;
  end;

  TDNPermissionRequestEvidence = class(TDNGenericImport<DNPermissionRequestEvidenceClass, DNPermissionRequestEvidence>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPublisherClass = interface(DNEvidenceBaseClass)
  ['{087B707C-F1F0-5194-AFE5-8F04F9F43843}']
  { constructors } 

    {class} function init(cert: DNX509Certificate): DNPublisher;

  end;

  [DNTypeName('System.Security.Policy.Publisher')]
  DNPublisher = interface(DNEvidenceBase)
  ['{649546A7-965F-366F-A735-0FB522917B5A}']
  { getters & setters } 

    function get_Certificate: DNX509Certificate;

  { methods } 

    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNEvidenceBase;
    function Copy: DNObject;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Certificate: DNX509Certificate read get_Certificate;
  end;

  TDNPublisher = class(TDNGenericImport<DNPublisherClass, DNPublisher>) end;

  //-------------namespace: System.Security.Policy----------------
  DNSiteClass = interface(DNEvidenceBaseClass)
  ['{3A4E7575-5B53-50DF-B155-96B9F90ADAB0}']
  { constructors } 

    {class} function init(name: string): DNSite;

  { static methods } 

    {class} function CreateFromUrl(url: string): DNSite;

  end;

  [DNTypeName('System.Security.Policy.Site')]
  DNSite = interface(DNEvidenceBase)
  ['{0F71B36D-4006-35B5-9F42-4C468514AF70}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNEvidenceBase;
    function Copy: DNObject;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
  end;

  TDNSite = class(TDNGenericImport<DNSiteClass, DNSite>) end;

  //-------------namespace: System.Security.Policy----------------
  DNStrongNameClass = interface(DNEvidenceBaseClass)
  ['{B7743326-B8B3-55A0-A165-2986EC90BD80}']
  { constructors } 

    {class} function init(blob: DNStrongNamePublicKeyBlob; name: string; version: DNVersion): DNStrongName;

  end;

  [DNTypeName('System.Security.Policy.StrongName')]
  DNStrongName = interface(DNEvidenceBase)
  ['{F1566AAF-63FE-3F4B-B121-DCD17999119B}']
  { getters & setters } 

    function get_PublicKey: DNStrongNamePublicKeyBlob;
    function get_Name: string;
    function get_Version: DNVersion;

  { methods } 

    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    function Clone: DNEvidenceBase;
    function Copy: DNObject;
    function ToString: string;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property PublicKey: DNStrongNamePublicKeyBlob read get_PublicKey;
    property Name: string read get_Name;
    property Version: DNVersion read get_Version;
  end;

  TDNStrongName = class(TDNGenericImport<DNStrongNameClass, DNStrongName>) end;

  //-------------namespace: System.Security.Policy----------------
  DNUrlClass = interface(DNEvidenceBaseClass)
  ['{E4B6131E-8B78-5ED5-AF23-A968249E88BD}']
  { constructors } 

    {class} function init(name: string): DNUrl;

  end;

  [DNTypeName('System.Security.Policy.Url')]
  DNUrl = interface(DNEvidenceBase)
  ['{7A2AE0C8-EF79-334E-BACF-D7BA452CAF7C}']
  { getters & setters } 

    function get_Value: string;

  { methods } 

    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNEvidenceBase;
    function Copy: DNObject;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
  end;

  TDNUrl = class(TDNGenericImport<DNUrlClass, DNUrl>) end;

  //-------------namespace: System.Security.Policy----------------
  DNZoneClass = interface(DNEvidenceBaseClass)
  ['{D6312B88-36EB-587F-BF46-CFC77D9A5E8D}']
  { constructors } 

    {class} function init(zone: DNSecurityZone): DNZone;

  { static methods } 

    {class} function CreateFromUrl(url: string): DNZone;

  end;

  [DNTypeName('System.Security.Policy.Zone')]
  DNZone = interface(DNEvidenceBase)
  ['{6FCF98FF-B4D6-37A4-9DAB-4DE11A5FE5F2}']
  { getters & setters } 

    function get_SecurityZone: DNSecurityZone;

  { methods } 

    function CreateIdentityPermission(evidence: DNEvidence): DNIPermission;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNEvidenceBase;
    function Copy: DNObject;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property SecurityZone: DNSecurityZone read get_SecurityZone;
  end;

  TDNZone = class(TDNGenericImport<DNZoneClass, DNZone>) end;

  //-------------namespace: System.Security.Policy----------------
  DNGacMembershipConditionClass = interface(DNObjectClass)
  ['{1B706B31-BE33-551F-B873-475083BF2C6D}']
  { constructors } 

    {class} function init: DNGacMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.GacMembershipCondition')]
  DNGacMembershipCondition = interface(DNIMembershipCondition)
  ['{390E92C9-FA66-3357-BEF2-45A1F34186B9}']
  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNGacMembershipCondition = class(TDNGenericImport<DNGacMembershipConditionClass, DNGacMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNHashMembershipConditionClass = interface(DNObjectClass)
  ['{31504DBD-18C3-570E-B3C8-CD3AB66D6B6C}']
  { constructors } 

    {class} function init(hashAlg: DNHashAlgorithm; value: TArray<Byte>): DNHashMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.HashMembershipCondition')]
  DNHashMembershipCondition = interface(DNISerializable)
  ['{769EDEAD-E3B2-3C89-B9A6-948CD7288587}']
  { getters & setters } 

    function get_HashAlgorithm: DNHashAlgorithm;
    procedure set_HashAlgorithm(value: DNHashAlgorithm);
    function get_HashValue: TArray<Byte>;
    procedure set_HashValue(value: TArray<Byte>);

  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property HashAlgorithm: DNHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    property HashValue: TArray<Byte> read get_HashValue write set_HashValue;
  end;

  TDNHashMembershipCondition = class(TDNGenericImport<DNHashMembershipConditionClass, DNHashMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPolicyLevelClass = interface(DNObjectClass)
  ['{6F607659-BC61-50DA-8F50-807F26BBCFC9}']
  { static methods } 

    {class} function CreateAppDomainLevel: DNPolicyLevel;

  end;

  [DNTypeName('System.Security.Policy.PolicyLevel')]
  DNPolicyLevel = interface(DNObject)
  ['{64E304C1-D80D-3388-94EF-002F45D5AC05}']
  { getters & setters } 

    function get_Label: string;
    function get_Type: DNPolicyLevelType;
    function get_StoreLocation: string;
    function get_RootCodeGroup: DNCodeGroup;
    procedure set_RootCodeGroup(value: DNCodeGroup);
    function get_NamedPermissionSets: DNIList;
    function get_FullTrustAssemblies: DNIList;

  { methods } 

    function GetNamedPermissionSet(name: string): DNNamedPermissionSet;
    function Resolve(evidence: DNEvidence): DNPolicyStatement;
    procedure FromXml(e: DNSecurityElement);
    function ResolveMatchingCodeGroups(evidence: DNEvidence): DNCodeGroup;
    procedure AddFullTrustAssembly(sn: DNStrongName); overload;
    procedure AddFullTrustAssembly(snMC: DNStrongNameMembershipCondition); overload;
    procedure RemoveFullTrustAssembly(sn: DNStrongName); overload;
    procedure RemoveFullTrustAssembly(snMC: DNStrongNameMembershipCondition); overload;
    procedure AddNamedPermissionSet(permSet: DNNamedPermissionSet);
    function RemoveNamedPermissionSet(permSet: DNNamedPermissionSet): DNNamedPermissionSet; overload;
    function RemoveNamedPermissionSet(name: string): DNNamedPermissionSet; overload;
    function ChangeNamedPermissionSet(name: string; pSet: DNPermissionSet): DNNamedPermissionSet;
    procedure Recover;
    procedure Reset;
    function ToXml: DNSecurityElement;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property &Label: string read get_Label;
    property &Type: DNPolicyLevelType read get_Type;
    property StoreLocation: string read get_StoreLocation;
    property RootCodeGroup: DNCodeGroup read get_RootCodeGroup write set_RootCodeGroup;
    property NamedPermissionSets: DNIList read get_NamedPermissionSets;
    property FullTrustAssemblies: DNIList read get_FullTrustAssemblies;
  end;

  TDNPolicyLevel = class(TDNGenericImport<DNPolicyLevelClass, DNPolicyLevel>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPolicyStatementClass = interface(DNObjectClass)
  ['{BDA53107-AAFF-50C4-9542-6E9104D9DA3E}']
  { constructors } 

    {class} function init(permSet: DNPermissionSet): DNPolicyStatement; overload;
    {class} function init(permSet: DNPermissionSet; attributes: DNPolicyStatementAttribute): DNPolicyStatement; overload;

  end;

  [DNTypeName('System.Security.Policy.PolicyStatement')]
  DNPolicyStatement = interface(DNISecurityPolicyEncodable)
  ['{ABCC3DF5-7E59-3780-A3CC-4F412008A5EA}']
  { getters & setters } 

    function get_PermissionSet: DNPermissionSet;
    procedure set_PermissionSet(value: DNPermissionSet);
    function get_Attributes: DNPolicyStatementAttribute;
    procedure set_Attributes(value: DNPolicyStatementAttribute);
    function get_AttributeString: string;

  { methods } 

    function Copy: DNPolicyStatement;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(et: DNSecurityElement); overload;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(et: DNSecurityElement; level: DNPolicyLevel); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PermissionSet: DNPermissionSet read get_PermissionSet write set_PermissionSet;
    property Attributes: DNPolicyStatementAttribute read get_Attributes write set_Attributes;
    property AttributeString: string read get_AttributeString;
  end;

  TDNPolicyStatement = class(TDNGenericImport<DNPolicyStatementClass, DNPolicyStatement>) end;

  //-------------namespace: System.Security.Policy----------------
  DNPublisherMembershipConditionClass = interface(DNObjectClass)
  ['{D5B8158C-3CE5-563C-A6BB-9D52115501E9}']
  { constructors } 

    {class} function init(certificate: DNX509Certificate): DNPublisherMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.PublisherMembershipCondition')]
  DNPublisherMembershipCondition = interface(DNIMembershipCondition)
  ['{05BF00F9-44B8-39A7-AF36-7E11C9B502DD}']
  { getters & setters } 

    function get_Certificate: DNX509Certificate;
    procedure set_Certificate(value: DNX509Certificate);

  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function GetType: DNType;

  { propertys } 

    property Certificate: DNX509Certificate read get_Certificate write set_Certificate;
  end;

  TDNPublisherMembershipCondition = class(TDNGenericImport<DNPublisherMembershipConditionClass, DNPublisherMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNSiteMembershipConditionClass = interface(DNObjectClass)
  ['{389E31E4-D79D-5187-BB89-BA0D761DE1FE}']
  { constructors } 

    {class} function init(site: string): DNSiteMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.SiteMembershipCondition')]
  DNSiteMembershipCondition = interface(DNIMembershipCondition)
  ['{7F5E4FD8-9575-3691-BF0C-2D30A21E4376}']
  { getters & setters } 

    function get_Site: string;
    procedure set_Site(value: string);

  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Site: string read get_Site write set_Site;
  end;

  TDNSiteMembershipCondition = class(TDNGenericImport<DNSiteMembershipConditionClass, DNSiteMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNStrongNameMembershipConditionClass = interface(DNObjectClass)
  ['{7F3ECC13-E0F4-5F6A-AB29-C785D5AF57FD}']
  { constructors } 

    {class} function init(blob: DNStrongNamePublicKeyBlob; name: string; version: DNVersion): DNStrongNameMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.StrongNameMembershipCondition')]
  DNStrongNameMembershipCondition = interface(DNIMembershipCondition)
  ['{7CFFAC1C-7370-30F9-AA72-E30FE39257D9}']
  { getters & setters } 

    function get_PublicKey: DNStrongNamePublicKeyBlob;
    procedure set_PublicKey(value: DNStrongNamePublicKeyBlob);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);

  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PublicKey: DNStrongNamePublicKeyBlob read get_PublicKey write set_PublicKey;
    property Name: string read get_Name write set_Name;
    property Version: DNVersion read get_Version write set_Version;
  end;

  TDNStrongNameMembershipCondition = class(TDNGenericImport<DNStrongNameMembershipConditionClass, DNStrongNameMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNTrustManagerContextClass = interface(DNObjectClass)
  ['{BFEC6F58-C9FC-524D-BECC-6EF88369FC0D}']
  { constructors } 

    {class} function init: DNTrustManagerContext; overload;
    {class} function init(uiContext: DNTrustManagerUIContext): DNTrustManagerContext; overload;

  end;

  [DNTypeName('System.Security.Policy.TrustManagerContext')]
  DNTrustManagerContext = interface(DNObject)
  ['{AFAEF10F-1BC4-351F-886A-878A265C1862}']
  { getters & setters } 

    function get_UIContext: DNTrustManagerUIContext;
    procedure set_UIContext(value: DNTrustManagerUIContext);
    function get_NoPrompt: Boolean;
    procedure set_NoPrompt(value: Boolean);
    function get_IgnorePersistedDecision: Boolean;
    procedure set_IgnorePersistedDecision(value: Boolean);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_Persist: Boolean;
    procedure set_Persist(value: Boolean);
    function get_PreviousApplicationIdentity: DNApplicationIdentity;
    procedure set_PreviousApplicationIdentity(value: DNApplicationIdentity);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property UIContext: DNTrustManagerUIContext read get_UIContext write set_UIContext;
    property NoPrompt: Boolean read get_NoPrompt write set_NoPrompt;
    property IgnorePersistedDecision: Boolean read get_IgnorePersistedDecision write set_IgnorePersistedDecision;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property Persist: Boolean read get_Persist write set_Persist;
    property PreviousApplicationIdentity: DNApplicationIdentity read get_PreviousApplicationIdentity write set_PreviousApplicationIdentity;
  end;

  TDNTrustManagerContext = class(TDNGenericImport<DNTrustManagerContextClass, DNTrustManagerContext>) end;

  //-------------namespace: System.Security.Policy----------------
  DNUrlMembershipConditionClass = interface(DNObjectClass)
  ['{44975D52-7C8B-5F63-8AD3-58BD11D51C66}']
  { constructors } 

    {class} function init(url: string): DNUrlMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.UrlMembershipCondition')]
  DNUrlMembershipCondition = interface(DNIMembershipCondition)
  ['{93E33D56-812D-3112-BEEB-276A67D1172E}']
  { getters & setters } 

    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Url: string read get_Url write set_Url;
  end;

  TDNUrlMembershipCondition = class(TDNGenericImport<DNUrlMembershipConditionClass, DNUrlMembershipCondition>) end;

  //-------------namespace: System.Security.Policy----------------
  DNZoneMembershipConditionClass = interface(DNObjectClass)
  ['{B7BD7FDB-8FF0-5FB4-AA74-1233BBFEEAAC}']
  { constructors } 

    {class} function init(zone: DNSecurityZone): DNZoneMembershipCondition;

  end;

  [DNTypeName('System.Security.Policy.ZoneMembershipCondition')]
  DNZoneMembershipCondition = interface(DNIMembershipCondition)
  ['{D72F9AEB-23F8-3B88-B6FD-8A143E3245A1}']
  { getters & setters } 

    function get_SecurityZone: DNSecurityZone;
    procedure set_SecurityZone(value: DNSecurityZone);

  { methods } 

    function Check(evidence: DNEvidence): Boolean;
    function Copy: DNIMembershipCondition;
    function ToXml: DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement); overload;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToXml(level: DNPolicyLevel): DNSecurityElement; overload;
    procedure FromXml(e: DNSecurityElement; level: DNPolicyLevel); overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property SecurityZone: DNSecurityZone read get_SecurityZone write set_SecurityZone;
  end;

  TDNZoneMembershipCondition = class(TDNGenericImport<DNZoneMembershipConditionClass, DNZoneMembershipCondition>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityReferenceClass = interface(DNObjectClass)
  ['{8E2DB930-B917-50A9-944E-8A9A8D122F57}']
  end;

  [DNTypeName('System.Security.Principal.IdentityReference')]
  DNIdentityReference = interface(DNObject)
  ['{B8B1BCCC-F738-3D73-BA14-25D6056A6523}']
  { getters & setters } 

    function get_Value: string;

  { methods } 

    function IsValidTargetType(targetType: DNType): Boolean;
    function Translate(targetType: DNType): DNIdentityReference;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
  end;

  TDNIdentityReference = class(TDNGenericImport<DNIdentityReferenceClass, DNIdentityReference>) end;

  //-------------namespace: System.Security.Principal----------------
  DNNTAccountClass = interface(DNIdentityReferenceClass)
  ['{3DAE2760-A682-5C6A-A240-628C77373009}']
  { constructors } 

    {class} function init(domainName: string; accountName: string): DNNTAccount; overload;
    {class} function init(name: string): DNNTAccount; overload;

  end;

  [DNTypeName('System.Security.Principal.NTAccount')]
  DNNTAccount = interface(DNIdentityReference)
  ['{591EAEA3-F70C-3503-83D0-2D42F4C6C0D5}']
  { getters & setters } 

    function get_Value: string;

  { methods } 

    function IsValidTargetType(targetType: DNType): Boolean;
    function Translate(targetType: DNType): DNIdentityReference;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
  end;

  TDNNTAccount = class(TDNGenericImport<DNNTAccountClass, DNNTAccount>) end;

  //-------------namespace: System.Security.Principal----------------
  DNSecurityIdentifierClass = interface(DNIdentityReferenceClass)
  ['{84379119-0546-5D1E-8085-F221EC5F5B8F}']
  { constructors } 

    {class} function init(sddlForm: string): DNSecurityIdentifier; overload;
    {class} function init(binaryForm: TArray<Byte>; offset: Int32): DNSecurityIdentifier; overload;
    {class} function init(binaryForm: IntPtr): DNSecurityIdentifier; overload;
    {class} function init(sidType: DNWellKnownSidType; domainSid: DNSecurityIdentifier): DNSecurityIdentifier; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinBinaryLength: Int32;
   function __fakeFieldGet_MaxBinaryLength: Int32;

  { static fields } 

    {class} property MinBinaryLength: Int32 read __fakeFieldGet_MinBinaryLength;
    {class} property MaxBinaryLength: Int32 read __fakeFieldGet_MaxBinaryLength;

  end;

  [DNTypeName('System.Security.Principal.SecurityIdentifier')]
  DNSecurityIdentifier = interface(DNIdentityReference)
  ['{71354EE9-4244-395D-B9AD-C413CE482097}']
  { getters & setters } 

    function get_BinaryLength: Int32;
    function get_AccountDomainSid: DNSecurityIdentifier;
    function get_Value: string;

  { methods } 

    function Translate(targetType: DNType): DNIdentityReference;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(sid: DNSecurityIdentifier): Boolean; overload;
    function GetHashCode: Int32;
    function IsValidTargetType(targetType: DNType): Boolean;
    function IsAccountSid: Boolean;
    function CompareTo(sid: DNSecurityIdentifier): Int32;
    function IsWellKnown(&type: DNWellKnownSidType): Boolean;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function IsEqualDomainSid(sid: DNSecurityIdentifier): Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property BinaryLength: Int32 read get_BinaryLength;
    property AccountDomainSid: DNSecurityIdentifier read get_AccountDomainSid;
    property Value: string read get_Value;
  end;

  TDNSecurityIdentifier = class(TDNGenericImport<DNSecurityIdentifierClass, DNSecurityIdentifier>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityReferenceCollectionClass = interface(DNObjectClass)
  ['{B3E1D374-FFAA-5CEB-B808-915A6F41B7D3}']
  { constructors } 

    {class} function init: DNIdentityReferenceCollection; overload;
    {class} function init(capacity: Int32): DNIdentityReferenceCollection; overload;

  end;

  [DNTypeName('System.Security.Principal.IdentityReferenceCollection')]
  DNIdentityReferenceCollection = interface(DNObject)
  ['{3283EEBF-E67D-31AC-8481-A968F3A77E9A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNIdentityReference;
    procedure set_Item(index: Int32; value: DNIdentityReference);

  { methods } 

    procedure CopyTo(&array: TArray<DNIdentityReference>; offset: Int32);
    function &Contains(identity: DNIdentityReference): Boolean;
    function GetEnumerator: DNIEnumerator<DNIdentityReference>;
    function Translate(targetType: DNType): DNIdentityReferenceCollection; overload;
    function Translate(targetType: DNType; forceSuccess: Boolean): DNIdentityReferenceCollection; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNIdentityReference read get_Item write set_Item; default;
  end;

  TDNIdentityReferenceCollection = class(TDNGenericImport<DNIdentityReferenceCollectionClass, DNIdentityReferenceCollection>) end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsImpersonationContextClass = interface(DNObjectClass)
  ['{650947C5-5CB6-5611-9207-739DD258F9CE}']
  end;

  [DNTypeName('System.Security.Principal.WindowsImpersonationContext')]
  DNWindowsImpersonationContext = interface(DNIDisposable)
  ['{FC1ABB5C-D107-3145-908A-3EA107D53748}']
  { methods } 

    procedure Undo;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWindowsImpersonationContext = class(TDNGenericImport<DNWindowsImpersonationContextClass, DNWindowsImpersonationContext>) end;

  //-------------namespace: System.Security----------------
  DNSecureStringClass = interface(DNObjectClass)
  ['{5603B404-EDA4-5098-8E59-67B59299008F}']
  { constructors } 

    {class} function init: DNSecureString; overload;
    {class} function init(value: PChar; length: Int32): DNSecureString; overload;

  end;

  [DNTypeName('System.Security.SecureString')]
  DNSecureString = interface(DNIDisposable)
  ['{396C030F-BE46-3871-9815-7BB2B55DAC34}']
  { getters & setters } 

    function get_Length: Int32;

  { methods } 

    procedure Clear;
    function Copy: DNSecureString;
    procedure Dispose;
    function IsReadOnly: Boolean;
    procedure MakeReadOnly;
    procedure AppendChar(c: Char);
    procedure InsertAt(index: Int32; c: Char);
    procedure RemoveAt(index: Int32);
    procedure SetAt(index: Int32; c: Char);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
  end;

  TDNSecureString = class(TDNGenericImport<DNSecureStringClass, DNSecureString>) end;

  //-------------namespace: System.Security----------------
  DNSecurityContextClass = interface(DNObjectClass)
  ['{A4042F48-B34A-55BD-AFEB-C17AF49781EA}']
  { static methods } 

    {class} procedure Run(securityContext: DNSecurityContext; callback: DNContextCallback; state: DNObject);
    {class} function Capture: DNSecurityContext;
    {class} function SuppressFlow: DNAsyncFlowControl;
    {class} function SuppressFlowWindowsIdentity: DNAsyncFlowControl;
    {class} procedure RestoreFlow;
    {class} function IsFlowSuppressed: Boolean;
    {class} function IsWindowsIdentityFlowSuppressed: Boolean;

  end;

  [DNTypeName('System.Security.SecurityContext')]
  DNSecurityContext = interface(DNIDisposable)
  ['{6757B80B-89A4-39F3-AA34-BCC6C7D21D64}']
  { methods } 

    function CreateCopy: DNSecurityContext;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSecurityContext = class(TDNGenericImport<DNSecurityContextClass, DNSecurityContext>) end;

  //-------------namespace: System.Security----------------
  DNSecurityElementClass = interface(DNObjectClass)
  ['{DB587B87-1E10-5D7A-AA3E-B8BF1A8170D1}']
  { constructors } 

    {class} function init(tag: string): DNSecurityElement; overload;
    {class} function init(tag: string; text: string): DNSecurityElement; overload;

  { static methods } 

    {class} function FromString(xml: string): DNSecurityElement;
    {class} function IsValidTag(tag: string): Boolean;
    {class} function IsValidText(text: string): Boolean;
    {class} function IsValidAttributeName(name: string): Boolean;
    {class} function IsValidAttributeValue(value: string): Boolean;
    {class} function Escape(str: string): string;

  end;

  [DNTypeName('System.Security.SecurityElement')]
  DNSecurityElement = interface(DNObject)
  ['{B9033CD1-C905-3059-9D29-562ECB13B0B3}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Attributes: DNHashtable;
    procedure set_Attributes(value: DNHashtable);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Children: DNArrayList;
    procedure set_Children(value: DNArrayList);

  { methods } 

    procedure AddAttribute(name: string; value: string);
    function Attribute(name: string): string;
    function ToString: string;
    procedure AddChild(child: DNSecurityElement);
    function Equal(other: DNSecurityElement): Boolean;
    function Copy: DNSecurityElement;
    function SearchForChildByTag(tag: string): DNSecurityElement;
    function SearchForTextOfTag(tag: string): string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Tag: string read get_Tag write set_Tag;
    property Attributes: DNHashtable read get_Attributes write set_Attributes;
    property Text: string read get_Text write set_Text;
    property Children: DNArrayList read get_Children write set_Children;
  end;

  TDNSecurityElement = class(TDNGenericImport<DNSecurityElementClass, DNSecurityElement>) end;

  //-------------namespace: System.Security----------------
  DNSecurityManagerClass = interface(DNObjectClass)
  ['{0DFE8D19-316B-5F69-8F74-648E75EF5565}']
  { static getter & setter } 

    {class} function get_CheckExecutionRights: Boolean;
    {class} procedure set_CheckExecutionRights(value: Boolean);
    {class} function get_SecurityEnabled: Boolean;
    {class} procedure set_SecurityEnabled(value: Boolean);

  { static methods } 

    {class} function GetStandardSandbox(evidence: DNEvidence): DNPermissionSet;
    {class} function LoadPolicyLevelFromString(str: string; &type: DNPolicyLevelType): DNPolicyLevel;
    {class} function CurrentThreadRequiresSecurityContextCapture: Boolean;
    {class} function IsGranted(perm: DNIPermission): Boolean;
    {class} procedure GetZoneAndOrigin(out zone: DNArrayList; out origin: DNArrayList);
    {class} procedure SavePolicyLevel(level: DNPolicyLevel);
    {class} function ResolvePolicy(evidence: DNEvidence; reqdPset: DNPermissionSet; optPset: DNPermissionSet; denyPset: DNPermissionSet; out denied: DNPermissionSet): DNPermissionSet; overload;
    {class} function ResolvePolicy(evidence: DNEvidence): DNPermissionSet; overload;
    {class} function ResolvePolicy(evidences: TArray<DNEvidence>): DNPermissionSet; overload;
    {class} function ResolveSystemPolicy(evidence: DNEvidence): DNPermissionSet;
    {class} function ResolvePolicyGroups(evidence: DNEvidence): DNIEnumerator;
    {class} function PolicyHierarchy: DNIEnumerator;
    {class} procedure SavePolicy;
    {class} function LoadPolicyLevelFromFile(path: string; &type: DNPolicyLevelType): DNPolicyLevel;

  { static propertys } 

    {class} property CheckExecutionRights: Boolean read get_CheckExecutionRights write set_CheckExecutionRights;
    {class} property SecurityEnabled: Boolean read get_SecurityEnabled write set_SecurityEnabled;
  end;

  [DNTypeName('System.Security.SecurityManager')]
  DNSecurityManager = interface(DNObject)
  ['{DF4E1BB0-8CDC-3C4B-A1C9-FEE64BBEF8C5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSecurityManager = class(TDNGenericImport<DNSecurityManagerClass, DNSecurityManager>) end;

  //-------------namespace: System.Security----------------
  DNSecurityStateClass = interface(DNObjectClass)
  ['{083974EA-777F-5EAA-AB99-D63BE2E823F1}']
  end;

  [DNTypeName('System.Security.SecurityState')]
  DNSecurityState = interface(DNObject)
  ['{F87DC982-F016-37DC-A8D0-B14CF779D0FF}']
  { methods } 

    function IsStateAvailable: Boolean;
    procedure EnsureState;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSecurityState = class(TDNGenericImport<DNSecurityStateClass, DNSecurityState>) end;

  //-------------namespace: System.IO.IsolatedStorage----------------
  DNIsolatedStorageSecurityStateClass = interface(DNSecurityStateClass)
  ['{B68AA62E-D202-5251-B7C4-5C63822A5FE6}']
  end;

  [DNTypeName('System.IO.IsolatedStorage.IsolatedStorageSecurityState')]
  DNIsolatedStorageSecurityState = interface(DNSecurityState)
  ['{D0228A81-ED0B-344D-9196-FAE17589A3DE}']
  { getters & setters } 

    function get_Options: DNIsolatedStorageSecurityOptions;
    function get_UsedSize: Int64;
    function get_Quota: Int64;
    procedure set_Quota(value: Int64);

  { methods } 

    procedure EnsureState;
    function IsStateAvailable: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Options: DNIsolatedStorageSecurityOptions read get_Options;
    property UsedSize: Int64 read get_UsedSize;
    property Quota: Int64 read get_Quota write set_Quota;
  end;

  TDNIsolatedStorageSecurityState = class(TDNGenericImport<DNIsolatedStorageSecurityStateClass, DNIsolatedStorageSecurityState>) end;

  //-------------namespace: System----------------
  DNStringClass = interface(DNObjectClass)
  ['{4EE7DCAE-D1E3-53F5-9EB0-5A8282165184}']
  { constructors } 

    {class} function init(value: PChar): DNString; overload;
    {class} function init(value: PChar; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PSByte): DNString; overload;
    {class} function init(value: PSByte; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PSByte; startIndex: Int32; length: Int32; enc: DNEncoding): DNString; overload;
    {class} function init(value: TArray<Char>; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: TArray<Char>): DNString; overload;
    {class} function init(c: Char; count: Int32): DNString; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: string;

  { static fields } 

    {class} property Empty: string read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Join(separator: string; value: TArray<string>): string; overload;
    {class} function Join(separator: string; values: TArray<DNObject>): string; overload;
    {class} function Join(separator: string; values: DNIEnumerable<string>): string; overload;
    {class} function Join(separator: string; value: TArray<string>; startIndex: Int32; count: Int32): string; overload;
    {class} function Equals(a: string; b: string): Boolean; overload;
    {class} function Equals(a: string; b: string; comparisonType: DNStringComparison): Boolean; overload;
    {class} function IsNullOrEmpty(value: string): Boolean;
    {class} function IsNullOrWhiteSpace(value: string): Boolean;
    {class} function Compare(strA: string; strB: string): Int32; overload;
    {class} function Compare(strA: string; strB: string; ignoreCase: Boolean): Int32; overload;
    {class} function Compare(strA: string; strB: string; comparisonType: DNStringComparison): Int32; overload;
    {class} function Compare(strA: string; strB: string; culture: DNCultureInfo; options: DNCompareOptions): Int32; overload;
    {class} function Compare(strA: string; strB: string; ignoreCase: Boolean; culture: DNCultureInfo): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; ignoreCase: Boolean): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; ignoreCase: Boolean; culture: DNCultureInfo): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; culture: DNCultureInfo; options: DNCompareOptions): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; comparisonType: DNStringComparison): Int32; overload;
    {class} function CompareOrdinal(strA: string; strB: string): Int32; overload;
    {class} function CompareOrdinal(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32): Int32; overload;
    {class} function Format(format: string; arg0: DNObject): string; overload;
    {class} function Format(format: string; arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Format(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Copy(str: string): string;
    {class} function Concat(arg0: DNObject): string; overload;
    {class} function Concat(arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Concat(arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Concat(arg0: DNObject; arg1: DNObject; arg2: DNObject; arg3: DNObject): string; overload;
    {class} function Concat(args: TArray<DNObject>): string; overload;
    {class} function Concat(values: DNIEnumerable<string>): string; overload;
    {class} function Concat(str0: string; str1: string): string; overload;
    {class} function Concat(str0: string; str1: string; str2: string): string; overload;
    {class} function Concat(str0: string; str1: string; str2: string; str3: string): string; overload;
    {class} function Concat(values: TArray<string>): string; overload;
    {class} function Intern(str: string): string;
    {class} function IsInterned(str: string): string;
    {class} function Format(format: string; args: TArray<DNObject>): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; args: TArray<DNObject>): string; overload;

  end;

  [DNTypeName('System.String')]
  DNString = interface(DNIComparable)
  ['{296AFBFF-1B0B-3FF5-9D6C-4E7E599F8B57}']
  { getters & setters } 

    function get_Length: Int32;
    function get_Chars(index: Int32): Char;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(value: string): Boolean; overload;
    function Equals(value: string; comparisonType: DNStringComparison): Boolean; overload;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<Char>; destinationIndex: Int32; count: Int32);
    function ToCharArray: TArray<Char>; overload;
    function ToCharArray(startIndex: Int32; length: Int32): TArray<Char>; overload;
    function GetHashCode: Int32;
    function Split(separator: TArray<Char>): TArray<string>; overload;
    function Split(separator: TArray<Char>; count: Int32): TArray<string>; overload;
    function Split(separator: TArray<Char>; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<Char>; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<string>; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<string>; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Substring(startIndex: Int32): string; overload;
    function Substring(startIndex: Int32; length: Int32): string; overload;
    function Trim(trimChars: TArray<Char>): string; overload;
    function TrimStart(trimChars: TArray<Char>): string;
    function TrimEnd(trimChars: TArray<Char>): string;
    function IsNormalized: Boolean; overload;
    function IsNormalized(normalizationForm: DNNormalizationForm): Boolean; overload;
    function Normalize: string; overload;
    function Normalize(normalizationForm: DNNormalizationForm): string; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(strB: string): Int32; overload;
    function &Contains(value: string): Boolean;
    function EndsWith(value: string): Boolean; overload;
    function EndsWith(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function EndsWith(value: string; ignoreCase: Boolean; culture: DNCultureInfo): Boolean; overload;
    function IndexOf(value: Char): Int32; overload;
    function IndexOf(value: Char; startIndex: Int32): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>; startIndex: Int32): Int32; overload;
    function IndexOf(value: string): Int32; overload;
    function IndexOf(value: string; startIndex: Int32): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(value: string; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; count: Int32; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: Char): Int32; overload;
    function LastIndexOf(value: Char; startIndex: Int32): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: string): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(value: string; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; count: Int32; comparisonType: DNStringComparison): Int32; overload;
    function PadLeft(totalWidth: Int32): string; overload;
    function PadLeft(totalWidth: Int32; paddingChar: Char): string; overload;
    function PadRight(totalWidth: Int32): string; overload;
    function PadRight(totalWidth: Int32; paddingChar: Char): string; overload;
    function StartsWith(value: string): Boolean; overload;
    function StartsWith(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function StartsWith(value: string; ignoreCase: Boolean; culture: DNCultureInfo): Boolean; overload;
    function ToLower: string; overload;
    function ToLower(culture: DNCultureInfo): string; overload;
    function ToLowerInvariant: string;
    function ToUpper: string; overload;
    function ToUpper(culture: DNCultureInfo): string; overload;
    function ToUpperInvariant: string;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function Clone: DNObject;
    function Trim: string; overload;
    function Insert(startIndex: Int32; value: string): string;
    function Replace(oldChar: Char; newChar: Char): string; overload;
    function Replace(oldValue: string; newValue: string): string; overload;
    function Remove(startIndex: Int32; count: Int32): string; overload;
    function Remove(startIndex: Int32): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetEnumerator: DNCharEnumerator;
    function IndexOf(value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>; startIndex: Int32; count: Int32): Int32; overload;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property Chars[index: Int32]: Char read get_Chars; default;
  end;

  TDNString = class(TDNGenericImport<DNStringClass, DNString>) end;

  //-------------namespace: System----------------
  DNStringComparerClass = interface(DNObjectClass)
  ['{1190D015-A51C-5172-9737-A5D8A5F36F8E}']
  { static getter & setter } 

    {class} function get_InvariantCulture: DNStringComparer;
    {class} function get_InvariantCultureIgnoreCase: DNStringComparer;
    {class} function get_CurrentCulture: DNStringComparer;
    {class} function get_CurrentCultureIgnoreCase: DNStringComparer;
    {class} function get_Ordinal: DNStringComparer;
    {class} function get_OrdinalIgnoreCase: DNStringComparer;

  { static methods } 

    {class} function Create(culture: DNCultureInfo; ignoreCase: Boolean): DNStringComparer;

  { static propertys } 

    {class} property InvariantCulture: DNStringComparer read get_InvariantCulture;
    {class} property InvariantCultureIgnoreCase: DNStringComparer read get_InvariantCultureIgnoreCase;
    {class} property CurrentCulture: DNStringComparer read get_CurrentCulture;
    {class} property CurrentCultureIgnoreCase: DNStringComparer read get_CurrentCultureIgnoreCase;
    {class} property Ordinal: DNStringComparer read get_Ordinal;
    {class} property OrdinalIgnoreCase: DNStringComparer read get_OrdinalIgnoreCase;
  end;

  [DNTypeName('System.StringComparer')]
  DNStringComparer = interface(DNIComparer)
  ['{8EA98C90-180D-39AE-AA70-2AA3D5EBB7AE}']
  { methods } 

    function Compare(x: DNObject; y: DNObject): Int32; overload;
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function Compare(x: string; y: string): Int32; overload;
    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNStringComparer = class(TDNGenericImport<DNStringComparerClass, DNStringComparer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderClass = interface(DNObjectClass)
  ['{E98CB492-7F7F-5772-B460-40041C4FB224}']
  end;

  [DNTypeName('System.Text.Decoder')]
  DNDecoder = interface(DNObject)
  ['{A924269D-5DF2-33AF-B72A-3250C4105EBE}']
  { getters & setters } 

    function get_Fallback: DNDecoderFallback;
    procedure set_Fallback(value: DNDecoderFallback);
    function get_FallbackBuffer: DNDecoderFallbackBuffer;

  { methods } 

    procedure Reset;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32; flush: Boolean): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; flush: Boolean): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean): Int32; overload;
    procedure Convert(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    procedure Convert(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Fallback: DNDecoderFallback read get_Fallback write set_Fallback;
    property FallbackBuffer: DNDecoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNDecoder = class(TDNGenericImport<DNDecoderClass, DNDecoder>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackClass = interface(DNObjectClass)
  ['{B2E1B7B6-4C9E-50B3-A7F1-3E7112DF1CFC}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNDecoderFallback;
    {class} function get_ExceptionFallback: DNDecoderFallback;

  { static propertys } 

    {class} property ReplacementFallback: DNDecoderFallback read get_ReplacementFallback;
    {class} property ExceptionFallback: DNDecoderFallback read get_ExceptionFallback;
  end;

  [DNTypeName('System.Text.DecoderFallback')]
  DNDecoderFallback = interface(DNObject)
  ['{B0D5EBBD-EA60-391F-9EB7-CAA43BA97515}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderFallback = class(TDNGenericImport<DNDecoderFallbackClass, DNDecoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackClass = interface(DNDecoderFallbackClass)
  ['{B7F1FBC8-1370-5B2F-9BD7-860F1909C41C}']
  { constructors } 

    {class} function init: DNDecoderExceptionFallback;

  end;

  [DNTypeName('System.Text.DecoderExceptionFallback')]
  DNDecoderExceptionFallback = interface(DNDecoderFallback)
  ['{973A7390-2608-3943-9015-D798D1217C08}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderExceptionFallback = class(TDNGenericImport<DNDecoderExceptionFallbackClass, DNDecoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackClass = interface(DNDecoderFallbackClass)
  ['{2AF552BC-27AC-5073-A39D-0E2959AC5FF3}']
  { constructors } 

    {class} function init: DNDecoderReplacementFallback; overload;
    {class} function init(replacement: string): DNDecoderReplacementFallback; overload;

  end;

  [DNTypeName('System.Text.DecoderReplacementFallback')]
  DNDecoderReplacementFallback = interface(DNDecoderFallback)
  ['{04FBCBF4-DC23-3CEC-9025-9D4093C26733}']
  { getters & setters } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DefaultString: string read get_DefaultString;
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderReplacementFallback = class(TDNGenericImport<DNDecoderReplacementFallbackClass, DNDecoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackBufferClass = interface(DNObjectClass)
  ['{222C4FFB-F2E7-56C2-9E29-FFA26F569B49}']
  end;

  [DNTypeName('System.Text.DecoderFallbackBuffer')]
  DNDecoderFallbackBuffer = interface(DNObject)
  ['{9A53C520-4AB6-366C-B86A-DD015C22694E}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    procedure Reset;
    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderFallbackBuffer = class(TDNGenericImport<DNDecoderFallbackBufferClass, DNDecoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{2333919C-8001-5EFD-BC12-0E9C200337DE}']
  { constructors } 

    {class} function init: DNDecoderExceptionFallbackBuffer;

  end;

  [DNTypeName('System.Text.DecoderExceptionFallbackBuffer')]
  DNDecoderExceptionFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{8E8F1601-AE98-3DAC-B48B-EC27C95A481E}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderExceptionFallbackBuffer = class(TDNGenericImport<DNDecoderExceptionFallbackBufferClass, DNDecoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{13F1F98D-749B-5FCF-A4B9-0B7296704768}']
  { constructors } 

    {class} function init(fallback: DNDecoderReplacementFallback): DNDecoderReplacementFallbackBuffer;

  end;

  [DNTypeName('System.Text.DecoderReplacementFallbackBuffer')]
  DNDecoderReplacementFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{4DEAA859-53A2-318E-A981-7B931FB1ACA1}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderReplacementFallbackBuffer = class(TDNGenericImport<DNDecoderReplacementFallbackBufferClass, DNDecoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderClass = interface(DNObjectClass)
  ['{5AC07AA6-8EA4-54C1-9413-F4DC5E49C78A}']
  end;

  [DNTypeName('System.Text.Encoder')]
  DNEncoder = interface(DNObject)
  ['{CC9D4538-57E8-3A82-886A-5FE65A127A5A}']
  { getters & setters } 

    function get_Fallback: DNEncoderFallback;
    procedure set_Fallback(value: DNEncoderFallback);
    function get_FallbackBuffer: DNEncoderFallbackBuffer;

  { methods } 

    procedure Reset;
    function GetByteCount(chars: PChar; count: Int32; flush: Boolean): Int32; overload;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; flush: Boolean): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean): Int32; overload;
    procedure Convert(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    procedure Convert(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Fallback: DNEncoderFallback read get_Fallback write set_Fallback;
    property FallbackBuffer: DNEncoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackClass = interface(DNObjectClass)
  ['{DF613C82-9CE5-534D-A9DD-58DA382F8BD9}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNEncoderFallback;
    {class} function get_ExceptionFallback: DNEncoderFallback;

  { static propertys } 

    {class} property ReplacementFallback: DNEncoderFallback read get_ReplacementFallback;
    {class} property ExceptionFallback: DNEncoderFallback read get_ExceptionFallback;
  end;

  [DNTypeName('System.Text.EncoderFallback')]
  DNEncoderFallback = interface(DNObject)
  ['{AA6C2003-FEDD-384C-B8F2-F59E0F3B3855}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderFallback = class(TDNGenericImport<DNEncoderFallbackClass, DNEncoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackClass = interface(DNEncoderFallbackClass)
  ['{70241A64-772A-50BF-8BFB-25CA46863347}']
  { constructors } 

    {class} function init: DNEncoderExceptionFallback;

  end;

  [DNTypeName('System.Text.EncoderExceptionFallback')]
  DNEncoderExceptionFallback = interface(DNEncoderFallback)
  ['{56198675-BD59-3B10-8346-583781462CEF}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderExceptionFallback = class(TDNGenericImport<DNEncoderExceptionFallbackClass, DNEncoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackClass = interface(DNEncoderFallbackClass)
  ['{AEE8DEAA-E615-5F9E-A037-4912CF5F3D95}']
  { constructors } 

    {class} function init: DNEncoderReplacementFallback; overload;
    {class} function init(replacement: string): DNEncoderReplacementFallback; overload;

  end;

  [DNTypeName('System.Text.EncoderReplacementFallback')]
  DNEncoderReplacementFallback = interface(DNEncoderFallback)
  ['{D4692569-5A04-351D-8BA7-5F43AB458DF6}']
  { getters & setters } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DefaultString: string read get_DefaultString;
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderReplacementFallback = class(TDNGenericImport<DNEncoderReplacementFallbackClass, DNEncoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackBufferClass = interface(DNObjectClass)
  ['{2157816F-3FA1-5924-B84E-561400228E30}']
  end;

  [DNTypeName('System.Text.EncoderFallbackBuffer')]
  DNEncoderFallbackBuffer = interface(DNObject)
  ['{3453AFBC-BF44-3C7C-B4ED-C8AE89DF8BAB}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    procedure Reset;
    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderFallbackBuffer = class(TDNGenericImport<DNEncoderFallbackBufferClass, DNEncoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{71F4C582-8228-5EA6-8FBD-82EE5AF88E7A}']
  { constructors } 

    {class} function init: DNEncoderExceptionFallbackBuffer;

  end;

  [DNTypeName('System.Text.EncoderExceptionFallbackBuffer')]
  DNEncoderExceptionFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{81BD8EE8-F713-36A5-B7D5-9E92ACB4A18A}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderExceptionFallbackBuffer = class(TDNGenericImport<DNEncoderExceptionFallbackBufferClass, DNEncoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{331767DF-5F39-5C2E-8832-911574AAD332}']
  { constructors } 

    {class} function init(fallback: DNEncoderReplacementFallback): DNEncoderReplacementFallbackBuffer;

  end;

  [DNTypeName('System.Text.EncoderReplacementFallbackBuffer')]
  DNEncoderReplacementFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{64EDFA29-AA4C-395B-B9EE-8281D0C00C67}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderReplacementFallbackBuffer = class(TDNGenericImport<DNEncoderReplacementFallbackBufferClass, DNEncoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncodingClass = interface(DNObjectClass)
  ['{D0359566-CFBF-5754-A5EF-D3554227404D}']
  { static getter & setter } 

    {class} function get_ASCII: DNEncoding;
    {class} function get_Default: DNEncoding;
    {class} function get_Unicode: DNEncoding;
    {class} function get_BigEndianUnicode: DNEncoding;
    {class} function get_UTF7: DNEncoding;
    {class} function get_UTF8: DNEncoding;
    {class} function get_UTF32: DNEncoding;

  { static methods } 

    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>): TArray<Byte>; overload;
    {class} procedure RegisterProvider(provider: DNEncodingProvider);
    {class} function GetEncoding(codepage: Int32): DNEncoding; overload;
    {class} function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    {class} function GetEncoding(name: string): DNEncoding; overload;
    {class} function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    {class} function GetEncodings: TArray<DNEncodingInfo>;
    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Byte>; overload;

  { static propertys } 

    {class} property ASCII: DNEncoding read get_ASCII;
    {class} property &Default: DNEncoding read get_Default;
    {class} property Unicode: DNEncoding read get_Unicode;
    {class} property BigEndianUnicode: DNEncoding read get_BigEndianUnicode;
    {class} property UTF7: DNEncoding read get_UTF7;
    {class} property UTF8: DNEncoding read get_UTF8;
    {class} property UTF32: DNEncoding read get_UTF32;
  end;

  [DNTypeName('System.Text.Encoding')]
  DNEncoding = interface(DNICloneable)
  ['{EAECC459-5CE4-35A2-A085-5AFC0451C03A}']
  { getters & setters } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNEncoding = class(TDNGenericImport<DNEncodingClass, DNEncoding>) end;

  //-------------namespace: System.Text----------------
  DNASCIIEncodingClass = interface(DNEncodingClass)
  ['{9DE85D71-3C45-5F60-A050-15577FC299C5}']
  { constructors } 

    {class} function init: DNASCIIEncoding;

  end;

  [DNTypeName('System.Text.ASCIIEncoding')]
  DNASCIIEncoding = interface(DNEncoding)
  ['{9E28EF95-9C6F-3A00-B525-36A76178CC9C}']
  { getters & setters } 

    function get_IsSingleByte: Boolean;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetBytes(chars: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32): string; overload;
    function GetByteCount(chars: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsSingleByte: Boolean read get_IsSingleByte;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNASCIIEncoding = class(TDNGenericImport<DNASCIIEncodingClass, DNASCIIEncoding>) end;

  //-------------namespace: System.Text----------------
  DNUnicodeEncodingClass = interface(DNEncodingClass)
  ['{3588B3C8-B06A-5FFD-AE2C-111744586549}']
  { constructors } 

    {class} function init: DNUnicodeEncoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUnicodeEncoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidBytes: Boolean): DNUnicodeEncoding; overload;

  end;

  [DNTypeName('System.Text.UnicodeEncoding')]
  DNUnicodeEncoding = interface(DNEncoding)
  ['{A0F5F5DC-337B-38D7-B1A3-FB1B95666BBF}']
  { getters & setters } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetEncoder: DNEncoder;
    function GetDecoder: DNDecoder;
    function GetPreamble: TArray<Byte>;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUnicodeEncoding = class(TDNGenericImport<DNUnicodeEncodingClass, DNUnicodeEncoding>)
  public const
   CharSize = 2;
  end;

  //-------------namespace: System.Text----------------
  DNUTF32EncodingClass = interface(DNEncodingClass)
  ['{6E31F0A5-37BF-5191-935F-42CB683E480A}']
  { constructors } 

    {class} function init: DNUTF32Encoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUTF32Encoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidCharacters: Boolean): DNUTF32Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF32Encoding')]
  DNUTF32Encoding = interface(DNEncoding)
  ['{AE62C05D-0A02-30E7-9B51-E9D4DD157207}']
  { getters & setters } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF32Encoding = class(TDNGenericImport<DNUTF32EncodingClass, DNUTF32Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF7EncodingClass = interface(DNEncodingClass)
  ['{DD9036A6-0BA4-516E-855F-EA6AEFE64C9D}']
  { constructors } 

    {class} function init: DNUTF7Encoding; overload;
    {class} function init(allowOptionals: Boolean): DNUTF7Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF7Encoding')]
  DNUTF7Encoding = interface(DNEncoding)
  ['{3C9DCA8B-4410-3143-B801-559553EB6725}']
  { getters & setters } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF7Encoding = class(TDNGenericImport<DNUTF7EncodingClass, DNUTF7Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF8EncodingClass = interface(DNEncodingClass)
  ['{4A23F78F-6797-5BD9-9E41-72CA74BE7088}']
  { constructors } 

    {class} function init: DNUTF8Encoding; overload;
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean): DNUTF8Encoding; overload;
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean; throwOnInvalidBytes: Boolean): DNUTF8Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF8Encoding')]
  DNUTF8Encoding = interface(DNEncoding)
  ['{8C40D44A-4EDE-3760-9B61-50255056D3C7}']
  { getters & setters } 

    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetByteCount(chars: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF8Encoding = class(TDNGenericImport<DNUTF8EncodingClass, DNUTF8Encoding>) end;

  //-------------namespace: System.Text----------------
  DNEncodingInfoClass = interface(DNObjectClass)
  ['{0A3014F3-1E84-5C1E-BBDD-3F942C40C614}']
  end;

  [DNTypeName('System.Text.EncodingInfo')]
  DNEncodingInfo = interface(DNObject)
  ['{FF5F02A3-703A-33FE-A1DD-D720DC31D163}']
  { getters & setters } 

    function get_CodePage: Int32;
    function get_Name: string;
    function get_DisplayName: string;

  { methods } 

    function GetEncoding: DNEncoding;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CodePage: Int32 read get_CodePage;
    property Name: string read get_Name;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEncodingInfo = class(TDNGenericImport<DNEncodingInfoClass, DNEncodingInfo>) end;

  //-------------namespace: System.Text----------------
  DNEncodingProviderClass = interface(DNObjectClass)
  ['{823750AE-599F-5849-A601-C2486F3A552D}']
  { constructors } 

    {class} function init: DNEncodingProvider;

  end;

  [DNTypeName('System.Text.EncodingProvider')]
  DNEncodingProvider = interface(DNObject)
  ['{3D92F301-0C35-32F1-AAEB-99AAE75CD054}']
  { methods } 

    function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    function GetEncoding(name: string): DNEncoding; overload;
    function GetEncoding(codepage: Int32): DNEncoding; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEncodingProvider = class(TDNGenericImport<DNEncodingProviderClass, DNEncodingProvider>) end;

  //-------------namespace: System.Text----------------
  DNStringBuilderClass = interface(DNObjectClass)
  ['{2E2983FF-BFF2-5C05-9543-4BF42AAADC78}']
  { constructors } 

    {class} function init: DNStringBuilder; overload;
    {class} function init(capacity: Int32): DNStringBuilder; overload;
    {class} function init(value: string): DNStringBuilder; overload;
    {class} function init(value: string; capacity: Int32): DNStringBuilder; overload;
    {class} function init(value: string; startIndex: Int32; length: Int32; capacity: Int32): DNStringBuilder; overload;
    {class} function init(capacity: Int32; maxCapacity: Int32): DNStringBuilder; overload;

  end;

  [DNTypeName('System.Text.StringBuilder')]
  DNStringBuilder = interface(DNISerializable)
  ['{E724B749-18D6-36AB-9F6D-09C36D9C6016}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_MaxCapacity: Int32;
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Chars(index: Int32): Char;
    procedure set_Chars(index: Int32; value: Char);

  { methods } 

    function EnsureCapacity(capacity: Int32): Int32;
    function ToString: string; overload;
    function ToString(startIndex: Int32; length: Int32): string; overload;
    function Clear: DNStringBuilder;
    function Append(value: Char; repeatCount: Int32): DNStringBuilder; overload;
    function Append(value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    function Append(value: string): DNStringBuilder; overload;
    function Append(value: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<Char>; destinationIndex: Int32; count: Int32);
    function Insert(index: Int32; value: string; count: Int32): DNStringBuilder; overload;
    function Remove(startIndex: Int32; length: Int32): DNStringBuilder;
    function Append(value: SByte): DNStringBuilder; overload;
    function Append(value: Byte): DNStringBuilder; overload;
    function Append(value: Char): DNStringBuilder; overload;
    function Append(value: Int16): DNStringBuilder; overload;
    function Append(value: Int32): DNStringBuilder; overload;
    function Append(value: Int64): DNStringBuilder; overload;
    function Append(value: Single): DNStringBuilder; overload;
    function Append(value: Double): DNStringBuilder; overload;
    function Append(value: DNDecimal): DNStringBuilder; overload;
    function Append(value: UInt16): DNStringBuilder; overload;
    function Append(value: UInt32): DNStringBuilder; overload;
    function Append(value: UInt64): DNStringBuilder; overload;
    function Append(value: DNObject): DNStringBuilder; overload;
    function Append(value: TArray<Char>): DNStringBuilder; overload;
    function Insert(index: Int32; value: string): DNStringBuilder; overload;
    function Insert(index: Int32; value: SByte): DNStringBuilder; overload;
    function Insert(index: Int32; value: Byte): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int16): DNStringBuilder; overload;
    function Insert(index: Int32; value: Char): DNStringBuilder; overload;
    function Insert(index: Int32; value: TArray<Char>): DNStringBuilder; overload;
    function Insert(index: Int32; value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int32): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int64): DNStringBuilder; overload;
    function Insert(index: Int32; value: Single): DNStringBuilder; overload;
    function Insert(index: Int32; value: Double): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNDecimal): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt16): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt32): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt64): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    function Replace(oldValue: string; newValue: string): DNStringBuilder; overload;
    function Equals(sb: DNStringBuilder): Boolean; overload;
    function Replace(oldValue: string; newValue: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Replace(oldChar: Char; newChar: Char): DNStringBuilder; overload;
    function Replace(oldChar: Char; newChar: Char; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Append(value: PChar; valueCount: Int32): DNStringBuilder; overload;
    function AppendLine: DNStringBuilder; overload;
    function Append(value: Boolean): DNStringBuilder; overload;
    function Insert(index: Int32; value: Boolean): DNStringBuilder; overload;
    function AppendLine(value: string): DNStringBuilder; overload;
    function AppendFormat(format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property MaxCapacity: Int32 read get_MaxCapacity;
    property Length: Int32 read get_Length write set_Length;
    property Chars[index: Int32]: Char read get_Chars write set_Chars; default;
  end;

  TDNStringBuilder = class(TDNGenericImport<DNStringBuilderClass, DNStringBuilder>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncLocalClass<T> = interface(DNObjectClass)
  ['{45CB3C66-636D-5D3F-AA91-1ABECCDD8581}']
  { constructors } 

    {class} function init: DNAsyncLocal<T>; overload;
    {class} function init(valueChangedHandler: DNAction<DNAsyncLocalValueChangedArgs<T>>): DNAsyncLocal<T>; overload;

  end;

  [DNTypeName('System.Threading.AsyncLocal`1')]
  DNAsyncLocal<T> = interface(DNObject)
  ['{E5B67672-7299-3067-971F-FAF35217C237}']
  { getters & setters } 

    function get_Value: T;
    procedure set_Value(value: T);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: T read get_Value write set_Value;
  end;

  TDNAsyncLocal<T> = class(TDNGenericImport<DNAsyncLocalClass<T>, DNAsyncLocal<T>>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenSourceClass = interface(DNObjectClass)
  ['{F00E4C24-A3A8-564C-95DA-6A6569762EAE}']
  { constructors } 

    {class} function init: DNCancellationTokenSource; overload;
    {class} function init(delay: DNTimeSpan): DNCancellationTokenSource; overload;
    {class} function init(millisecondsDelay: Int32): DNCancellationTokenSource; overload;

  { static methods } 

    {class} function CreateLinkedTokenSource(token1: DNCancellationToken; token2: DNCancellationToken): DNCancellationTokenSource; overload;
    {class} function CreateLinkedTokenSource(tokens: TArray<DNCancellationToken>): DNCancellationTokenSource; overload;

  end;

  [DNTypeName('System.Threading.CancellationTokenSource')]
  DNCancellationTokenSource = interface(DNIDisposable)
  ['{EC0CE4B8-A699-3D66-8D53-647A41E87078}']
  { getters & setters } 

    function get_IsCancellationRequested: Boolean;
    function get_Token: DNCancellationToken;

  { methods } 

    procedure Cancel(throwOnFirstException: Boolean); overload;
    procedure CancelAfter(delay: DNTimeSpan); overload;
    procedure Dispose;
    procedure Cancel; overload;
    procedure CancelAfter(millisecondsDelay: Int32); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    property Token: DNCancellationToken read get_Token;
  end;

  TDNCancellationTokenSource = class(TDNGenericImport<DNCancellationTokenSourceClass, DNCancellationTokenSource>) end;

  //-------------namespace: System.Threading----------------
  DNCompressedStackClass = interface(DNObjectClass)
  ['{1DF247FF-00EC-542A-84F1-15F14C73C80E}']
  { static methods } 

    {class} function Capture: DNCompressedStack;
    {class} procedure Run(compressedStack: DNCompressedStack; callback: DNContextCallback; state: DNObject);
    {class} function GetCompressedStack: DNCompressedStack;

  end;

  [DNTypeName('System.Threading.CompressedStack')]
  DNCompressedStack = interface(DNISerializable)
  ['{F3CE7312-70AE-37FF-98F6-CF1DCB22B9E4}']
  { methods } 

    function CreateCopy: DNCompressedStack;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCompressedStack = class(TDNGenericImport<DNCompressedStackClass, DNCompressedStack>) end;

  //-------------namespace: System.Threading----------------
  DNCountdownEventClass = interface(DNObjectClass)
  ['{ED4820DC-AD17-55A6-990B-E876D0B29450}']
  { constructors } 

    {class} function init(initialCount: Int32): DNCountdownEvent;

  end;

  [DNTypeName('System.Threading.CountdownEvent')]
  DNCountdownEvent = interface(DNIDisposable)
  ['{88CDADAA-25F4-3500-87CB-AAD36249A952}']
  { getters & setters } 

    function get_CurrentCount: Int32;
    function get_InitialCount: Int32;
    function get_IsSet: Boolean;
    function get_WaitHandle: DNWaitHandle;

  { methods } 

    procedure Dispose;
    function Signal: Boolean; overload;
    function Signal(signalCount: Int32): Boolean; overload;
    procedure AddCount; overload;
    function TryAddCount: Boolean; overload;
    procedure AddCount(signalCount: Int32); overload;
    function TryAddCount(signalCount: Int32): Boolean; overload;
    procedure Reset; overload;
    procedure Reset(count: Int32); overload;
    procedure Wait; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CurrentCount: Int32 read get_CurrentCount;
    property InitialCount: Int32 read get_InitialCount;
    property IsSet: Boolean read get_IsSet;
    property WaitHandle: DNWaitHandle read get_WaitHandle;
  end;

  TDNCountdownEvent = class(TDNGenericImport<DNCountdownEventClass, DNCountdownEvent>) end;

  //-------------namespace: System.Threading----------------
  DNExecutionContextClass = interface(DNObjectClass)
  ['{B58C67BA-E750-5779-864D-6FD4F8615E9A}']
  { static methods } 

    {class} procedure Run(executionContext: DNExecutionContext; callback: DNContextCallback; state: DNObject);
    {class} function SuppressFlow: DNAsyncFlowControl;
    {class} procedure RestoreFlow;
    {class} function IsFlowSuppressed: Boolean;
    {class} function Capture: DNExecutionContext;

  end;

  [DNTypeName('System.Threading.ExecutionContext')]
  DNExecutionContext = interface(DNIDisposable)
  ['{61D201D5-0A0E-3A70-9F48-3268B7FEBBDF}']
  { methods } 

    procedure Dispose;
    function CreateCopy: DNExecutionContext;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNExecutionContext = class(TDNGenericImport<DNExecutionContextClass, DNExecutionContext>) end;

  //-------------namespace: System.Threading----------------
  DNHostExecutionContextClass = interface(DNObjectClass)
  ['{A8D86204-C3B8-5C37-87F2-25C535D45695}']
  { constructors } 

    {class} function init: DNHostExecutionContext; overload;
    {class} function init(state: DNObject): DNHostExecutionContext; overload;

  end;

  [DNTypeName('System.Threading.HostExecutionContext')]
  DNHostExecutionContext = interface(DNIDisposable)
  ['{79F49D2D-E478-3F8E-9C93-BFEAD89E37EE}']
  { methods } 

    function CreateCopy: DNHostExecutionContext;
    procedure Dispose; overload;
    procedure Dispose(disposing: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNHostExecutionContext = class(TDNGenericImport<DNHostExecutionContextClass, DNHostExecutionContext>) end;

  //-------------namespace: System.Threading----------------
  DNHostExecutionContextManagerClass = interface(DNObjectClass)
  ['{502282F9-B66A-5095-92A4-218A648B8835}']
  { constructors } 

    {class} function init: DNHostExecutionContextManager;

  end;

  [DNTypeName('System.Threading.HostExecutionContextManager')]
  DNHostExecutionContextManager = interface(DNObject)
  ['{254BE22A-F1D5-34A7-B3D1-44F75B99CB9C}']
  { methods } 

    procedure Revert(previousState: DNObject);
    function Capture: DNHostExecutionContext;
    function SetHostExecutionContext(hostExecutionContext: DNHostExecutionContext): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNHostExecutionContextManager = class(TDNGenericImport<DNHostExecutionContextManagerClass, DNHostExecutionContextManager>) end;

  //-------------namespace: System.Threading----------------
  DNInterlockedClass = interface(DNObjectClass)
  ['{3E17BE2F-4684-5ED2-B481-63C556824604}']
  { static methods } 

    {class} function Increment(out location: Int32): Int32; overload;
    {class} function Increment(out location: Int64): Int64; overload;
    {class} function Decrement(out location: Int32): Int32; overload;
    {class} function Decrement(out location: Int64): Int64; overload;
    {class} function Add(out location1: Int32; value: Int32): Int32; overload;
    {class} function Add(out location1: Int64; value: Int64): Int64; overload;
    {class} function Read(out location: Int64): Int64;
    {class} procedure MemoryBarrier;
    {class} function Exchange(out location1: Int64; value: Int64): Int64; overload;
    {class} function Exchange(out location1: Single; value: Single): Single; overload;
    {class} function Exchange(out location1: Double; value: Double): Double; overload;
    {class} function CompareExchange(out location1: Int64; value: Int64; comparand: Int64): Int64; overload;
    {class} function CompareExchange(out location1: Single; value: Single; comparand: Single): Single; overload;
    {class} function CompareExchange(out location1: Double; value: Double; comparand: Double): Double; overload;
    {class} procedure SpeculationBarrier;
    {class} function Exchange(out location1: Int32; value: Int32): Int32; overload;
    {class} function Exchange(out location1: DNObject; value: DNObject): DNObject; overload;
    {class} function Exchange(out location1: IntPtr; value: IntPtr): IntPtr; overload;
    {class} function CompareExchange(out location1: Int32; value: Int32; comparand: Int32): Int32; overload;
    {class} function CompareExchange(out location1: DNObject; value: DNObject; comparand: DNObject): DNObject; overload;
    {class} function CompareExchange(out location1: IntPtr; value: IntPtr; comparand: IntPtr): IntPtr; overload;

  end;

  [DNTypeName('System.Threading.Interlocked')]
  DNInterlocked = interface(DNObject)
  ['{6AFBF244-9AB3-37D7-B4D4-357A72B76DE1}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNInterlocked = class(TDNGenericImport<DNInterlockedClass, DNInterlocked>) end;

  //-------------namespace: System.Threading----------------
  DNLazyInitializerClass = interface(DNObjectClass)
  ['{5E9171FC-FE34-5B34-BB7F-54F74511C097}']
  end;

  [DNTypeName('System.Threading.LazyInitializer')]
  DNLazyInitializer = interface(DNObject)
  ['{35ABA057-A91C-35BF-96DF-16FFDC0D3B9E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNLazyInitializer = class(TDNGenericImport<DNLazyInitializerClass, DNLazyInitializer>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventSlimClass = interface(DNObjectClass)
  ['{517B90DF-E931-5A3A-9573-20F995B71994}']
  { constructors } 

    {class} function init: DNManualResetEventSlim; overload;
    {class} function init(initialState: Boolean): DNManualResetEventSlim; overload;
    {class} function init(initialState: Boolean; spinCount: Int32): DNManualResetEventSlim; overload;

  end;

  [DNTypeName('System.Threading.ManualResetEventSlim')]
  DNManualResetEventSlim = interface(DNIDisposable)
  ['{B36A33C4-1FC3-389B-9758-DC0AB64757AB}']
  { getters & setters } 

    function get_WaitHandle: DNWaitHandle;
    function get_IsSet: Boolean;
    function get_SpinCount: Int32;

  { methods } 

    procedure &Set;
    procedure Reset;
    procedure Wait; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WaitHandle: DNWaitHandle read get_WaitHandle;
    property IsSet: Boolean read get_IsSet;
    property SpinCount: Int32 read get_SpinCount;
  end;

  TDNManualResetEventSlim = class(TDNGenericImport<DNManualResetEventSlimClass, DNManualResetEventSlim>) end;

  //-------------namespace: System.Threading----------------
  DNMonitorClass = interface(DNObjectClass)
  ['{EAB6D139-1525-5FF8-94C8-06FB4495DC13}']
  { static methods } 

    {class} procedure Enter(obj: DNObject; out lockTaken: Boolean); overload;
    {class} function TryEnter(obj: DNObject): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; out lockTaken: Boolean); overload;
    {class} function TryEnter(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    {class} function TryEnter(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    {class} procedure TryEnter(obj: DNObject; timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    {class} function IsEntered(obj: DNObject): Boolean;
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    {class} function Wait(obj: DNObject): Boolean; overload;
    {class} procedure Pulse(obj: DNObject);
    {class} procedure PulseAll(obj: DNObject);
    {class} procedure Enter(obj: DNObject); overload;
    {class} procedure &Exit(obj: DNObject);

  end;

  [DNTypeName('System.Threading.Monitor')]
  DNMonitor = interface(DNObject)
  ['{9E97213A-0B49-3C05-A0BF-D203C4FC8487}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNMonitor = class(TDNGenericImport<DNMonitorClass, DNMonitor>) end;

  //-------------namespace: System.Threading----------------
  DNOverlappedClass = interface(DNObjectClass)
  ['{B3552A82-1B1D-5AD4-972A-DCF90823031F}']
  { constructors } 

    {class} function init: DNOverlapped; overload;
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: IntPtr; ar: DNIAsyncResult): DNOverlapped; overload;
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: Int32; ar: DNIAsyncResult): DNOverlapped; overload;

  { static methods } 

    {class} function Unpack(var nativeOverlappedPtr: DNNativeOverlapped): DNOverlapped;
    {class} procedure Free(var nativeOverlappedPtr: DNNativeOverlapped);

  end;

  [DNTypeName('System.Threading.Overlapped')]
  DNOverlapped = interface(DNObject)
  ['{7FE87A55-1321-3D9F-8FEF-CD2F5E8AB2E9}']
  { getters & setters } 

    function get_AsyncResult: DNIAsyncResult;
    procedure set_AsyncResult(value: DNIAsyncResult);
    function get_OffsetLow: Int32;
    procedure set_OffsetLow(value: Int32);
    function get_OffsetHigh: Int32;
    procedure set_OffsetHigh(value: Int32);
    function get_EventHandle: Int32;
    procedure set_EventHandle(value: Int32);
    function get_EventHandleIntPtr: IntPtr;
    procedure set_EventHandleIntPtr(value: IntPtr);

  { methods } 

    function Pack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    function UnsafePack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    function Pack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    function UnsafePack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AsyncResult: DNIAsyncResult read get_AsyncResult write set_AsyncResult;
    property OffsetLow: Int32 read get_OffsetLow write set_OffsetLow;
    property OffsetHigh: Int32 read get_OffsetHigh write set_OffsetHigh;
    property EventHandle: Int32 read get_EventHandle write set_EventHandle;
    property EventHandleIntPtr: IntPtr read get_EventHandleIntPtr write set_EventHandleIntPtr;
  end;

  TDNOverlapped = class(TDNGenericImport<DNOverlappedClass, DNOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNPreAllocatedOverlappedClass = interface(DNObjectClass)
  ['{91E72CD2-59CC-528F-BE88-719A4643AA93}']
  { constructors } 

    {class} function init(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNPreAllocatedOverlapped;

  end;

  [DNTypeName('System.Threading.PreAllocatedOverlapped')]
  DNPreAllocatedOverlapped = interface(DNIDisposable)
  ['{722275F6-D931-3659-9047-C3244543F193}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNPreAllocatedOverlapped = class(TDNGenericImport<DNPreAllocatedOverlappedClass, DNPreAllocatedOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreSlimClass = interface(DNObjectClass)
  ['{6529E9A0-7FCE-5694-BCB9-9245C6B00D15}']
  { constructors } 

    {class} function init(initialCount: Int32): DNSemaphoreSlim; overload;
    {class} function init(initialCount: Int32; maxCount: Int32): DNSemaphoreSlim; overload;

  end;

  [DNTypeName('System.Threading.SemaphoreSlim')]
  DNSemaphoreSlim = interface(DNIDisposable)
  ['{6228BBB1-0E28-3C6B-BA33-D70D10B849CE}']
  { getters & setters } 

    function get_CurrentCount: Int32;
    function get_AvailableWaitHandle: DNWaitHandle;

  { methods } 

    procedure Wait; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function WaitAsync: DNTask; overload;
    function WaitAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function WaitAsync(millisecondsTimeout: Int32): DNTask<Boolean>; overload;
    function WaitAsync(timeout: DNTimeSpan): DNTask<Boolean>; overload;
    function WaitAsync(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): DNTask<Boolean>; overload;
    function WaitAsync(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): DNTask<Boolean>; overload;
    function Release: Int32; overload;
    function Release(releaseCount: Int32): Int32; overload;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CurrentCount: Int32 read get_CurrentCount;
    property AvailableWaitHandle: DNWaitHandle read get_AvailableWaitHandle;
  end;

  TDNSemaphoreSlim = class(TDNGenericImport<DNSemaphoreSlimClass, DNSemaphoreSlim>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationContextClass = interface(DNObjectClass)
  ['{F686499D-E87E-5032-974A-FEE08236F80A}']
  { static getter & setter } 

    {class} function get_Current: DNSynchronizationContext;

  { constructors } 

    {class} function init: DNSynchronizationContext;

  { static methods } 

    {class} procedure SetSynchronizationContext(syncContext: DNSynchronizationContext);

  { static propertys } 

    {class} property Current: DNSynchronizationContext read get_Current;
  end;

  [DNTypeName('System.Threading.SynchronizationContext')]
  DNSynchronizationContext = interface(DNObject)
  ['{A241CA63-8C2F-3D67-AD72-646F739FC9BD}']
  { methods } 

    procedure OperationStarted;
    procedure OperationCompleted;
    function Wait(waitHandles: TArray<IntPtr>; waitAll: Boolean; millisecondsTimeout: Int32): Int32;
    function IsWaitNotificationRequired: Boolean;
    procedure Send(d: DNSendOrPostCallback; state: DNObject);
    function CreateCopy: DNSynchronizationContext;
    procedure Post(d: DNSendOrPostCallback; state: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNSynchronizationContext = class(TDNGenericImport<DNSynchronizationContextClass, DNSynchronizationContext>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNConcurrentExclusiveSchedulerPairClass = interface(DNObjectClass)
  ['{F4B51EE5-B783-5010-A574-C93850EE21E8}']
  { constructors } 

    {class} function init: DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler): DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32): DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32; maxItemsPerTask: Int32): DNConcurrentExclusiveSchedulerPair; overload;

  end;

  [DNTypeName('System.Threading.Tasks.ConcurrentExclusiveSchedulerPair')]
  DNConcurrentExclusiveSchedulerPair = interface(DNObject)
  ['{379F58B4-3161-37E6-843B-2AFEBF8F1317}']
  { getters & setters } 

    function get_Completion: DNTask;
    function get_ConcurrentScheduler: DNTaskScheduler;
    function get_ExclusiveScheduler: DNTaskScheduler;

  { methods } 

    procedure Complete;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Completion: DNTask read get_Completion;
    property ConcurrentScheduler: DNTaskScheduler read get_ConcurrentScheduler;
    property ExclusiveScheduler: DNTaskScheduler read get_ExclusiveScheduler;
  end;

  TDNConcurrentExclusiveSchedulerPair = class(TDNGenericImport<DNConcurrentExclusiveSchedulerPairClass, DNConcurrentExclusiveSchedulerPair>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelClass = interface(DNObjectClass)
  ['{5D409FA8-F2A5-54FE-8863-8AF00FB02409}']
  { static methods } 

    {class} procedure Invoke(actions: TArray<DNAction>); overload;
    {class} function &For(fromInclusive: Int32; toExclusive: Int32; body: DNAction<Int32>): DNParallelLoopResult; overload;
    {class} function &For(fromInclusive: Int64; toExclusive: Int64; body: DNAction<Int64>): DNParallelLoopResult; overload;
    {class} function &For(fromInclusive: Int32; toExclusive: Int32; parallelOptions: DNParallelOptions; body: DNAction<Int32>): DNParallelLoopResult; overload;
    {class} function &For(fromInclusive: Int64; toExclusive: Int64; parallelOptions: DNParallelOptions; body: DNAction<Int64>): DNParallelLoopResult; overload;
    {class} function &For(fromInclusive: Int32; toExclusive: Int32; body: DNAction<Int32, DNParallelLoopState>): DNParallelLoopResult; overload;
    {class} function &For(fromInclusive: Int64; toExclusive: Int64; body: DNAction<Int64, DNParallelLoopState>): DNParallelLoopResult; overload;
    {class} function &For(fromInclusive: Int32; toExclusive: Int32; parallelOptions: DNParallelOptions; body: DNAction<Int32, DNParallelLoopState>): DNParallelLoopResult; overload;
    {class} function &For(fromInclusive: Int64; toExclusive: Int64; parallelOptions: DNParallelOptions; body: DNAction<Int64, DNParallelLoopState>): DNParallelLoopResult; overload;
    {class} procedure Invoke(parallelOptions: DNParallelOptions; actions: TArray<DNAction>); overload;

  end;

  [DNTypeName('System.Threading.Tasks.Parallel')]
  DNParallel = interface(DNObject)
  ['{EA5B9720-74C5-31D0-B5B2-C8AFBD3DF160}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNParallel = class(TDNGenericImport<DNParallelClass, DNParallel>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelLoopStateClass = interface(DNObjectClass)
  ['{08A29291-C7A0-588C-85DD-0B5FE04A362E}']
  end;

  [DNTypeName('System.Threading.Tasks.ParallelLoopState')]
  DNParallelLoopState = interface(DNObject)
  ['{A63295A1-B066-3EB0-9720-F7E08BA2ECC4}']
  { getters & setters } 

    function get_ShouldExitCurrentIteration: Boolean;
    function get_IsStopped: Boolean;
    function get_IsExceptional: Boolean;
    function get_LowestBreakIteration: DNNullable<Int64>;

  { methods } 

    procedure Stop;
    procedure Break;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ShouldExitCurrentIteration: Boolean read get_ShouldExitCurrentIteration;
    property IsStopped: Boolean read get_IsStopped;
    property IsExceptional: Boolean read get_IsExceptional;
    property LowestBreakIteration: DNNullable<Int64> read get_LowestBreakIteration;
  end;

  TDNParallelLoopState = class(TDNGenericImport<DNParallelLoopStateClass, DNParallelLoopState>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelOptionsClass = interface(DNObjectClass)
  ['{C6A30695-9BFB-5C86-8F84-AE45EA41CE7A}']
  { constructors } 

    {class} function init: DNParallelOptions;

  end;

  [DNTypeName('System.Threading.Tasks.ParallelOptions')]
  DNParallelOptions = interface(DNObject)
  ['{C8F7340F-4045-3974-8181-0BCCD7F6815E}']
  { getters & setters } 

    function get_TaskScheduler: DNTaskScheduler;
    procedure set_TaskScheduler(value: DNTaskScheduler);
    function get_MaxDegreeOfParallelism: Int32;
    procedure set_MaxDegreeOfParallelism(value: Int32);
    function get_CancellationToken: DNCancellationToken;
    procedure set_CancellationToken(value: DNCancellationToken);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TaskScheduler: DNTaskScheduler read get_TaskScheduler write set_TaskScheduler;
    property MaxDegreeOfParallelism: Int32 read get_MaxDegreeOfParallelism write set_MaxDegreeOfParallelism;
    property CancellationToken: DNCancellationToken read get_CancellationToken write set_CancellationToken;
  end;

  TDNParallelOptions = class(TDNGenericImport<DNParallelOptionsClass, DNParallelOptions>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskClass = interface(DNObjectClass)
  ['{21BA8935-9EBB-55A2-9BE2-B697016D8325}']
  { static getter & setter } 

    {class} function get_CurrentId: DNNullable<Int32>;
    {class} function get_Factory: DNTaskFactory;
    {class} function get_CompletedTask: DNTask;

  { constructors } 

    {class} function init(action: DNAction): DNTask; overload;
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function init(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask; overload;

  { static methods } 

    {class} function Yield: DNYieldAwaitable;
    {class} procedure WaitAll(tasks: TArray<DNTask>); overload;
    {class} function WaitAll(tasks: TArray<DNTask>; timeout: DNTimeSpan): Boolean; overload;
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Boolean; overload;
    {class} procedure WaitAll(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken); overload;
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    {class} function WaitAny(tasks: TArray<DNTask>): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; timeout: DNTimeSpan): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Int32; overload;
    {class} function FromException(exception: DNException): DNTask;
    {class} function Run(action: DNAction): DNTask; overload;
    {class} function Run(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Run(&function: DNFunc<DNTask>): DNTask; overload;
    {class} function Run(&function: DNFunc<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Delay(delay: DNTimeSpan): DNTask; overload;
    {class} function Delay(delay: DNTimeSpan; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Delay(millisecondsDelay: Int32): DNTask; overload;
    {class} function WhenAll(tasks: DNIEnumerable<DNTask>): DNTask; overload;
    {class} function WhenAll(tasks: TArray<DNTask>): DNTask; overload;
    {class} function WhenAny(tasks: TArray<DNTask>): DNTask<DNTask>; overload;
    {class} function WhenAny(tasks: DNIEnumerable<DNTask>): DNTask<DNTask>; overload;
    {class} function Delay(millisecondsDelay: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function FromCanceled(cancellationToken: DNCancellationToken): DNTask;

  { static propertys } 

    {class} property CurrentId: DNNullable<Int32> read get_CurrentId;
    {class} property Factory: DNTaskFactory read get_Factory;
    {class} property CompletedTask: DNTask read get_CompletedTask;
  end;

  [DNTypeName('System.Threading.Tasks.Task')]
  DNTask = interface(DNObject)
  ['{8B6869C2-05E5-3922-8CA6-C3C32C0B4C17}']
  { getters & setters } 

    function get_Id: Int32;
    function get_Exception: DNAggregateException;
    function get_Status: DNTaskStatus;
    function get_IsCanceled: Boolean;
    function get_IsCompleted: Boolean;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_AsyncState: DNObject;
    function get_IsFaulted: Boolean;

  { methods } 

    procedure Start; overload;
    procedure Start(scheduler: DNTaskScheduler); overload;
    procedure RunSynchronously; overload;
    procedure RunSynchronously(scheduler: DNTaskScheduler); overload;
    procedure Dispose;
    function GetAwaiter: DNTaskAwaiter;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredTaskAwaitable;
    procedure Wait; overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property Exception: DNAggregateException read get_Exception;
    property Status: DNTaskStatus read get_Status;
    property IsCanceled: Boolean read get_IsCanceled;
    property IsCompleted: Boolean read get_IsCompleted;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property AsyncState: DNObject read get_AsyncState;
    property IsFaulted: Boolean read get_IsFaulted;
  end;

  TDNTask = class(TDNGenericImport<DNTaskClass, DNTask>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskClass<TResult> = interface(DNTaskClass)
  ['{B042B198-E26B-5743-AED6-0FA44D57897B}']
  { static getter & setter } 

    {class} function get_Factory: DNTaskFactory<TResult>;

  { constructors } 

    {class} function init(&function: DNFunc<TResult>): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;

  { static propertys } 

    {class} property Factory: DNTaskFactory<TResult> read get_Factory;
  end;

  [DNTypeName('System.Threading.Tasks.Task`1')]
  DNTask<TResult> = interface(DNTask)
  ['{0140CF76-663E-3C69-9FEE-03F3DC65D481}']
  { getters & setters } 

    function get_Result: TResult;
    function get_Id: Int32;
    function get_Exception: DNAggregateException;
    function get_Status: DNTaskStatus;
    function get_IsCanceled: Boolean;
    function get_IsCompleted: Boolean;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_AsyncState: DNObject;
    function get_IsFaulted: Boolean;

  { methods } 

    function GetAwaiter: DNTaskAwaiter<TResult>;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredTaskAwaitable<TResult>;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    procedure Start; overload;
    procedure Start(scheduler: DNTaskScheduler); overload;
    procedure RunSynchronously; overload;
    procedure RunSynchronously(scheduler: DNTaskScheduler); overload;
    procedure Dispose;
    procedure Wait; overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Result: TResult read get_Result;
    property Id: Int32 read get_Id;
    property Exception: DNAggregateException read get_Exception;
    property Status: DNTaskStatus read get_Status;
    property IsCanceled: Boolean read get_IsCanceled;
    property IsCompleted: Boolean read get_IsCompleted;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property AsyncState: DNObject read get_AsyncState;
    property IsFaulted: Boolean read get_IsFaulted;
  end;

  TDNTask<TResult> = class(TDNGenericImport<DNTaskClass<TResult>, DNTask<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCompletionSourceClass<TResult> = interface(DNObjectClass)
  ['{0D604167-A4B2-555D-8D92-1008920B96D5}']
  { constructors } 

    {class} function init: DNTaskCompletionSource<TResult>; overload;
    {class} function init(creationOptions: DNTaskCreationOptions): DNTaskCompletionSource<TResult>; overload;
    {class} function init(state: DNObject): DNTaskCompletionSource<TResult>; overload;
    {class} function init(state: DNObject; creationOptions: DNTaskCreationOptions): DNTaskCompletionSource<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskCompletionSource`1')]
  DNTaskCompletionSource<TResult> = interface(DNObject)
  ['{7D5D9892-AF33-3089-B8F6-3236C5531B77}']
  { getters & setters } 

    function get_Task: DNTask<TResult>;

  { methods } 

    function TrySetException(exception: DNException): Boolean; overload;
    function TrySetResult(result: TResult): Boolean;
    procedure SetResult(result: TResult);
    procedure SetCanceled;
    function TrySetException(exceptions: DNIEnumerable<DNException>): Boolean; overload;
    procedure SetException(exception: DNException); overload;
    procedure SetException(exceptions: DNIEnumerable<DNException>); overload;
    function TrySetCanceled: Boolean; overload;
    function TrySetCanceled(cancellationToken: DNCancellationToken): Boolean; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Task: DNTask<TResult> read get_Task;
  end;

  TDNTaskCompletionSource<TResult> = class(TDNGenericImport<DNTaskCompletionSourceClass<TResult>, DNTaskCompletionSource<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskFactoryClass<TResult> = interface(DNObjectClass)
  ['{6986DB57-F36F-5224-872A-B1599F48524A}']
  { constructors } 

    {class} function init: DNTaskFactory<TResult>; overload;
    {class} function init(cancellationToken: DNCancellationToken): DNTaskFactory<TResult>; overload;
    {class} function init(scheduler: DNTaskScheduler): DNTaskFactory<TResult>; overload;
    {class} function init(creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions): DNTaskFactory<TResult>; overload;
    {class} function init(cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTaskFactory<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskFactory`1')]
  DNTaskFactory<TResult> = interface(DNObject)
  ['{25D671AB-AA28-3356-8D7E-29D1662FB94F}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Scheduler: DNTaskScheduler;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_ContinuationOptions: DNTaskContinuationOptions;

  { methods } 

    function StartNew(&function: DNFunc<TResult>): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNFunc<DNIAsyncResult, TResult>; state: DNObject): DNTask<TResult>; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNFunc<DNIAsyncResult, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; continuationOptions: DNTaskContinuationOptions): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; continuationOptions: DNTaskContinuationOptions): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Scheduler: DNTaskScheduler read get_Scheduler;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property ContinuationOptions: DNTaskContinuationOptions read get_ContinuationOptions;
  end;

  TDNTaskFactory<TResult> = class(TDNGenericImport<DNTaskFactoryClass<TResult>, DNTaskFactory<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskFactoryClass = interface(DNObjectClass)
  ['{0A32F1C4-27D9-5726-AC93-CF5D0CB0E328}']
  { constructors } 

    {class} function init: DNTaskFactory; overload;
    {class} function init(cancellationToken: DNCancellationToken): DNTaskFactory; overload;
    {class} function init(scheduler: DNTaskScheduler): DNTaskFactory; overload;
    {class} function init(creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions): DNTaskFactory; overload;
    {class} function init(cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTaskFactory; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskFactory')]
  DNTaskFactory = interface(DNObject)
  ['{8A4322AD-2DC3-36B2-A5D4-99EAEE0BEEDE}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Scheduler: DNTaskScheduler;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_ContinuationOptions: DNTaskContinuationOptions;

  { methods } 

    function StartNew(action: DNAction<DNObject>; state: DNObject): DNTask; overload;
    function StartNew(action: DNAction): DNTask; overload;
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    function StartNew(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNAction<DNIAsyncResult>; state: DNObject): DNTask; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNAction<DNIAsyncResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Scheduler: DNTaskScheduler read get_Scheduler;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property ContinuationOptions: DNTaskContinuationOptions read get_ContinuationOptions;
  end;

  TDNTaskFactory = class(TDNGenericImport<DNTaskFactoryClass, DNTaskFactory>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerClass = interface(DNObjectClass)
  ['{6ABFB254-CEA4-5567-AFF6-D16464F4EDA4}']
  { static getter & setter } 

    {class} function get_Default: DNTaskScheduler;
    {class} function get_Current: DNTaskScheduler;

  { static methods } 

    {class} function FromCurrentSynchronizationContext: DNTaskScheduler;

  { static propertys } 

    {class} property &Default: DNTaskScheduler read get_Default;
    {class} property Current: DNTaskScheduler read get_Current;
  end;

  [DNTypeName('System.Threading.Tasks.TaskScheduler')]
  DNTaskScheduler = interface(DNObject)
  ['{97885044-A181-3FB4-82A3-10568C92DAB6}']
  { getters & setters } 

    function get_MaximumConcurrencyLevel: Int32;
    function get_Id: Int32;

  { events } 

    {class} procedure add_UnobservedTaskException(value: DNEventHandler<DNUnobservedTaskExceptionEventArgs>);
    {class} procedure remove_UnobservedTaskException(value: DNEventHandler<DNUnobservedTaskExceptionEventArgs>);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaximumConcurrencyLevel: Int32 read get_MaximumConcurrencyLevel;
    property Id: Int32 read get_Id;
  end;

  TDNTaskScheduler = class(TDNGenericImport<DNTaskSchedulerClass, DNTaskScheduler>) end;

  //-------------namespace: System.Threading----------------
  DNThreadLocalClass<T> = interface(DNObjectClass)
  ['{62F18CBD-B861-5259-89A8-F7F7833FC74A}']
  { constructors } 

    {class} function init: DNThreadLocal<T>; overload;
    {class} function init(trackAllValues: Boolean): DNThreadLocal<T>; overload;
    {class} function init(valueFactory: DNFunc<T>): DNThreadLocal<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; trackAllValues: Boolean): DNThreadLocal<T>; overload;

  end;

  [DNTypeName('System.Threading.ThreadLocal`1')]
  DNThreadLocal<T> = interface(DNIDisposable)
  ['{B6342D76-12AC-3F91-833F-1E41E54E46B1}']
  { getters & setters } 

    function get_Value: T;
    procedure set_Value(value: T);
    function get_Values: DNIList<T>;
    function get_IsValueCreated: Boolean;

  { methods } 

    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: T read get_Value write set_Value;
    property Values: DNIList<T> read get_Values;
    property IsValueCreated: Boolean read get_IsValueCreated;
  end;

  TDNThreadLocal<T> = class(TDNGenericImport<DNThreadLocalClass<T>, DNThreadLocal<T>>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolClass = interface(DNObjectClass)
  ['{07BCB0F0-EBA7-5110-BE19-8B6712D93526}']
  { static methods } 

    {class} function SetMaxThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMaxThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} function SetMinThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMinThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} procedure GetAvailableThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function QueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean; overload;
    {class} function QueueUserWorkItem(callBack: DNWaitCallback): Boolean; overload;
    {class} function UnsafeQueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean;
    {class} function UnsafeQueueNativeOverlapped(var overlapped: DNNativeOverlapped): Boolean;
    {class} function BindHandle(osHandle: IntPtr): Boolean; overload;
    {class} function BindHandle(osHandle: DNSafeHandle): Boolean; overload;

  end;

  [DNTypeName('System.Threading.ThreadPool')]
  DNThreadPool = interface(DNObject)
  ['{F18C1BBB-EFA1-3789-8CDF-2D89E83834E5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNThreadPool = class(TDNGenericImport<DNThreadPoolClass, DNThreadPool>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolBoundHandleClass = interface(DNObjectClass)
  ['{75929CB8-A616-5771-977A-464E0E930944}']
  { static methods } 

    {class} function BindHandle(handle: DNSafeHandle): DNThreadPoolBoundHandle;
    {class} function GetNativeOverlappedState(var overlapped: DNNativeOverlapped): DNObject;

  end;

  [DNTypeName('System.Threading.ThreadPoolBoundHandle')]
  DNThreadPoolBoundHandle = interface(DNIDisposable)
  ['{EEF62825-2983-3A9C-B0F6-64FC87F40DBD}']
  { getters & setters } 

    function get_Handle: DNSafeHandle;

  { methods } 

    function AllocateNativeOverlapped(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNNativeOverlapped; overload;
    function AllocateNativeOverlapped(preAllocated: DNPreAllocatedOverlapped): DNNativeOverlapped; overload;
    procedure FreeNativeOverlapped(var overlapped: DNNativeOverlapped);
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Handle: DNSafeHandle read get_Handle;
  end;

  TDNThreadPoolBoundHandle = class(TDNGenericImport<DNThreadPoolBoundHandleClass, DNThreadPoolBoundHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimeoutClass = interface(DNObjectClass)
  ['{C575FBE4-D8D8-5A3A-ABCD-079435CEFCAF}']
  { static fields getter & setter } 

   function __fakeFieldGet_InfiniteTimeSpan: DNTimeSpan;

  { static fields } 

    {class} property InfiniteTimeSpan: DNTimeSpan read __fakeFieldGet_InfiniteTimeSpan;

  end;

  [DNTypeName('System.Threading.Timeout')]
  DNTimeout = interface(DNObject)
  ['{5A49B766-B474-3501-901E-5BDAC8B48A3D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTimeout = class(TDNGenericImport<DNTimeoutClass, DNTimeout>)
  public const
   Infinite = -1;
  end;

  //-------------namespace: System.Threading----------------
  DNVolatileClass = interface(DNObjectClass)
  ['{E4C9E7D7-1F73-5C14-8D0D-F139DA655525}']
  { static methods } 

    {class} function Read(out location: Int64): Int64; overload;
    {class} procedure Write(out location: Int64; value: Int64); overload;
    {class} function Read(out location: Boolean): Boolean; overload;
    {class} function Read(out location: SByte): SByte; overload;
    {class} function Read(out location: Byte): Byte; overload;
    {class} function Read(out location: Int16): Int16; overload;
    {class} function Read(out location: UInt16): UInt16; overload;
    {class} function Read(out location: Int32): Int32; overload;
    {class} function Read(out location: UInt32): UInt32; overload;
    {class} function Read(out location: UInt64): UInt64; overload;
    {class} function Read(out location: IntPtr): IntPtr; overload;
    {class} function Read(out location: UIntPtr): UIntPtr; overload;
    {class} function Read(out location: Single): Single; overload;
    {class} function Read(out location: Double): Double; overload;
    {class} procedure Write(out location: Boolean; value: Boolean); overload;
    {class} procedure Write(out location: SByte; value: SByte); overload;
    {class} procedure Write(out location: Byte; value: Byte); overload;
    {class} procedure Write(out location: Int16; value: Int16); overload;
    {class} procedure Write(out location: UInt16; value: UInt16); overload;
    {class} procedure Write(out location: Int32; value: Int32); overload;
    {class} procedure Write(out location: UInt32; value: UInt32); overload;
    {class} procedure Write(out location: UInt64; value: UInt64); overload;
    {class} procedure Write(out location: IntPtr; value: IntPtr); overload;
    {class} procedure Write(out location: UIntPtr; value: UIntPtr); overload;
    {class} procedure Write(out location: Single; value: Single); overload;
    {class} procedure Write(out location: Double; value: Double); overload;

  end;

  [DNTypeName('System.Threading.Volatile')]
  DNVolatile = interface(DNObject)
  ['{4DF6D5FA-51BB-39D0-81CA-6FC7EFF274B0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNVolatile = class(TDNGenericImport<DNVolatileClass, DNVolatile>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleExtensionsClass = interface(DNObjectClass)
  ['{C75F9AA4-44CE-5E3C-A757-B21DE0E6DFA0}']
  { static methods } 

    {class} function GetSafeWaitHandle(waitHandle: DNWaitHandle): DNSafeWaitHandle;
    {class} procedure SetSafeWaitHandle(waitHandle: DNWaitHandle; value: DNSafeWaitHandle);

  end;

  [DNTypeName('System.Threading.WaitHandleExtensions')]
  DNWaitHandleExtensions = interface(DNObject)
  ['{E23D357E-F371-3D98-B8BE-433227B80BF0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWaitHandleExtensions = class(TDNGenericImport<DNWaitHandleExtensionsClass, DNWaitHandleExtensions>) end;

  //-------------namespace: System----------------
  DNTimeZoneClass = interface(DNObjectClass)
  ['{69EE26B6-1FAB-573A-AFBB-69BEB0252B01}']
  { static getter & setter } 

    {class} function get_CurrentTimeZone: DNTimeZone;

  { static methods } 

    {class} function IsDaylightSavingTime(time: DNDateTime; daylightTimes: DNDaylightTime): Boolean; overload;

  { static propertys } 

    {class} property CurrentTimeZone: DNTimeZone read get_CurrentTimeZone;
  end;

  [DNTypeName('System.TimeZone')]
  DNTimeZone = interface(DNObject)
  ['{543C0DD8-A713-3777-B01A-AEB801DAC001}']
  { getters & setters } 

    function get_StandardName: string;
    function get_DaylightName: string;

  { methods } 

    function ToUniversalTime(time: DNDateTime): DNDateTime;
    function ToLocalTime(time: DNDateTime): DNDateTime;
    function IsDaylightSavingTime(time: DNDateTime): Boolean; overload;
    function GetUtcOffset(time: DNDateTime): DNTimeSpan;
    function GetDaylightChanges(year: Int32): DNDaylightTime;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StandardName: string read get_StandardName;
    property DaylightName: string read get_DaylightName;
  end;

  TDNTimeZone = class(TDNGenericImport<DNTimeZoneClass, DNTimeZone>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfoClass = interface(DNObjectClass)
  ['{8D5961F0-F5B2-5212-805D-D2F7B59B1219}']
  { static getter & setter } 

    {class} function get_Local: DNTimeZoneInfo;
    {class} function get_Utc: DNTimeZoneInfo;

  { static methods } 

    {class} procedure ClearCachedData;
    {class} function ConvertTimeBySystemTimeZoneId(dateTimeOffset: DNDateTimeOffset; destinationTimeZoneId: string): DNDateTimeOffset; overload;
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; destinationTimeZoneId: string): DNDateTime; overload;
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; sourceTimeZoneId: string; destinationTimeZoneId: string): DNDateTime; overload;
    {class} function ConvertTime(dateTimeOffset: DNDateTimeOffset; destinationTimeZone: DNTimeZoneInfo): DNDateTimeOffset; overload;
    {class} function ConvertTime(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function ConvertTime(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function ConvertTimeFromUtc(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime;
    {class} function ConvertTimeToUtc(dateTime: DNDateTime): DNDateTime; overload;
    {class} function ConvertTimeToUtc(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function FromSerializedString(source: string): DNTimeZoneInfo;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string): DNTimeZoneInfo; overload;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>): DNTimeZoneInfo; overload;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>; disableDaylightSavingTime: Boolean): DNTimeZoneInfo; overload;
    {class} function GetSystemTimeZones: DNReadOnlyCollection<DNTimeZoneInfo>;
    {class} function FindSystemTimeZoneById(id: string): DNTimeZoneInfo;

  { static propertys } 

    {class} property Local: DNTimeZoneInfo read get_Local;
    {class} property Utc: DNTimeZoneInfo read get_Utc;
  end;

  [DNTypeName('System.TimeZoneInfo')]
  DNTimeZoneInfo = interface(DNObject)
  ['{EA7C5B9E-398B-3E4D-B922-D2C395F3EFA2}']
  { getters & setters } 

    function get_Id: string;
    function get_DisplayName: string;
    function get_StandardName: string;
    function get_DaylightName: string;
    function get_BaseUtcOffset: DNTimeSpan;
    function get_SupportsDaylightSavingTime: Boolean;

  { methods } 

    function GetAdjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>;
    function GetAmbiguousTimeOffsets(dateTimeOffset: DNDateTimeOffset): TArray<DNTimeSpan>; overload;
    function GetAmbiguousTimeOffsets(dateTime: DNDateTime): TArray<DNTimeSpan>; overload;
    function GetUtcOffset(dateTimeOffset: DNDateTimeOffset): DNTimeSpan; overload;
    function GetUtcOffset(dateTime: DNDateTime): DNTimeSpan; overload;
    function IsAmbiguousTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    function IsAmbiguousTime(dateTime: DNDateTime): Boolean; overload;
    function IsDaylightSavingTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    function IsDaylightSavingTime(dateTime: DNDateTime): Boolean; overload;
    function IsInvalidTime(dateTime: DNDateTime): Boolean;
    function Equals(other: DNTimeZoneInfo): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function HasSameRules(other: DNTimeZoneInfo): Boolean;
    function ToSerializedString: string;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Id: string read get_Id;
    property DisplayName: string read get_DisplayName;
    property StandardName: string read get_StandardName;
    property DaylightName: string read get_DaylightName;
    property BaseUtcOffset: DNTimeSpan read get_BaseUtcOffset;
    property SupportsDaylightSavingTime: Boolean read get_SupportsDaylightSavingTime;
  end;

  TDNTimeZoneInfo = class(TDNGenericImport<DNTimeZoneInfoClass, DNTimeZoneInfo>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_AdjustmentRuleClass = interface(DNObjectClass)
  ['{465C7162-4E85-5FBF-A075-9CECC27F4412}']
  { static methods } 

    {class} function CreateAdjustmentRule(dateStart: DNDateTime; dateEnd: DNDateTime; daylightDelta: DNTimeSpan; daylightTransitionStart: DNTimeZoneInfo_TransitionTime; daylightTransitionEnd: DNTimeZoneInfo_TransitionTime): DNTimeZoneInfo_AdjustmentRule;

  end;

  [DNTypeName('System.TimeZoneInfo+AdjustmentRule')]
  DNTimeZoneInfo_AdjustmentRule = interface(DNObject)
  ['{176A2F1E-15CA-3553-AB42-BBCE66C3713E}']
  { getters & setters } 

    function get_DateStart: DNDateTime;
    function get_DateEnd: DNDateTime;
    function get_DaylightDelta: DNTimeSpan;
    function get_DaylightTransitionStart: DNTimeZoneInfo_TransitionTime;
    function get_DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime;

  { methods } 

    function Equals(other: DNTimeZoneInfo_AdjustmentRule): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DateStart: DNDateTime read get_DateStart;
    property DateEnd: DNDateTime read get_DateEnd;
    property DaylightDelta: DNTimeSpan read get_DaylightDelta;
    property DaylightTransitionStart: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionStart;
    property DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionEnd;
  end;

  TDNTimeZoneInfo_AdjustmentRule = class(TDNGenericImport<DNTimeZoneInfo_AdjustmentRuleClass, DNTimeZoneInfo_AdjustmentRule>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1> = interface(DNObjectClass)
  ['{11B62F40-75EB-514F-840E-7983F72838A0}']
  { constructors } 

    {class} function init(item1: T1): DNTuple<T1>;

  end;

  [DNTypeName('System.Tuple`1')]
  DNTuple<T1> = interface(DNIStructuralEquatable)
  ['{AD63FD25-BD9F-34EF-8BF9-77CCEEC3ECB5}']
  { getters & setters } 

    function get_Item1: T1;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
  end;

  TDNTuple<T1> = class(TDNGenericImport<DNTupleClass<T1>, DNTuple<T1>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2> = interface(DNObjectClass)
  ['{668B4F8C-6E32-513F-BA7B-3B057F8AC7E4}']
  { constructors } 

    {class} function init(item1: T1; item2: T2): DNTuple<T1, T2>;

  end;

  [DNTypeName('System.Tuple`2')]
  DNTuple<T1, T2> = interface(DNIStructuralEquatable)
  ['{664EC8CD-2337-3E5E-BEED-FD4CD0B49789}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
  end;

  TDNTuple<T1, T2> = class(TDNGenericImport<DNTupleClass<T1, T2>, DNTuple<T1, T2>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3> = interface(DNObjectClass)
  ['{C594FA79-30AE-536B-A219-B2DF3EB7F016}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3): DNTuple<T1, T2, T3>;

  end;

  [DNTypeName('System.Tuple`3')]
  DNTuple<T1, T2, T3> = interface(DNIStructuralEquatable)
  ['{585BBF75-6C04-3538-B52C-A0AF95D714BD}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
  end;

  TDNTuple<T1, T2, T3> = class(TDNGenericImport<DNTupleClass<T1, T2, T3>, DNTuple<T1, T2, T3>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4> = interface(DNObjectClass)
  ['{B2933B7D-2B4F-5897-9C3D-A688204894E0}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4): DNTuple<T1, T2, T3, T4>;

  end;

  [DNTypeName('System.Tuple`4')]
  DNTuple<T1, T2, T3, T4> = interface(DNIStructuralEquatable)
  ['{F80C9C70-A297-37CE-B67D-52AFE3B94259}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
  end;

  TDNTuple<T1, T2, T3, T4> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4>, DNTuple<T1, T2, T3, T4>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5> = interface(DNObjectClass)
  ['{01E6EA13-419E-566A-82C5-60FE8DD1B087}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5): DNTuple<T1, T2, T3, T4, T5>;

  end;

  [DNTypeName('System.Tuple`5')]
  DNTuple<T1, T2, T3, T4, T5> = interface(DNIStructuralEquatable)
  ['{169701E2-8C15-31EA-A556-2BE084239DEE}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
  end;

  TDNTuple<T1, T2, T3, T4, T5> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5>, DNTuple<T1, T2, T3, T4, T5>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6> = interface(DNObjectClass)
  ['{B83B7242-924B-5149-9F8C-5CAD8D22447F}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6): DNTuple<T1, T2, T3, T4, T5, T6>;

  end;

  [DNTypeName('System.Tuple`6')]
  DNTuple<T1, T2, T3, T4, T5, T6> = interface(DNIStructuralEquatable)
  ['{2F540B8D-C1A4-3052-B4BB-4155C09D0AF7}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6>, DNTuple<T1, T2, T3, T4, T5, T6>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6, T7> = interface(DNObjectClass)
  ['{A3242E8F-FD43-5E40-91D2-4A73F5650A39}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7): DNTuple<T1, T2, T3, T4, T5, T6, T7>;

  end;

  [DNTypeName('System.Tuple`7')]
  DNTuple<T1, T2, T3, T4, T5, T6, T7> = interface(DNIStructuralEquatable)
  ['{361AF741-399F-32E7-9817-9125C0939266}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;
    function get_Item7: T7;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
    property Item7: T7 read get_Item7;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6, T7> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6, T7>, DNTuple<T1, T2, T3, T4, T5, T6, T7>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNObjectClass)
  ['{C25740A6-9E6C-581E-B5BA-774D9D1606D3}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7; rest: TRest): DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest>;

  end;

  [DNTypeName('System.Tuple`8')]
  DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNIStructuralEquatable)
  ['{CBC1A280-EA20-314D-A649-58B06817402A}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;
    function get_Item7: T7;
    function get_Rest: TRest;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
    property Item7: T7 read get_Item7;
    property Rest: TRest read get_Rest;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest>, DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>) end;

  //-------------namespace: System----------------
  DNTupleClass = interface(DNObjectClass)
  ['{44F1FB85-8FF2-5C71-9902-F5B2F7BFD8CF}']
  end;

  [DNTypeName('System.Tuple')]
  DNTuple = interface(DNObject)
  ['{B6EFDCC2-6386-375E-84AA-6732B6518B3F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTuple = class(TDNGenericImport<DNTupleClass, DNTuple>) end;

  //-------------namespace: System----------------
  DNTupleExtensionsClass = interface(DNObjectClass)
  ['{FF4D537F-9E74-57A7-84EC-E22F2BEEF41A}']
  end;

  [DNTypeName('System.TupleExtensions')]
  DNTupleExtensions = interface(DNObject)
  ['{A4409B28-2A1E-3FB1-95E3-320B6499E58D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNTupleExtensions = class(TDNGenericImport<DNTupleExtensionsClass, DNTupleExtensions>) end;

  //-------------namespace: System----------------
  DNValueTypeClass = interface(DNObjectClass)
  ['{0CE0F1BE-38A9-556C-BFAC-BC4BA3DF9604}']
  end;

  [DNTypeName('System.ValueType')]
  DNValueType = interface(DNObject)
  ['{CE8AD32F-B6DB-31EA-9F1E-C2424E0F5EEE}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNValueType = class(TDNGenericImport<DNValueTypeClass, DNValueType>) end;

  //-------------namespace: System----------------
  DNArgIteratorClass = interface(DNValueTypeClass)
  ['{80119DC8-F8A4-59FA-A90A-2843741E9C2C}']
  { constructors } 

    {class} function init(arglist: DNRuntimeArgumentHandle): DNArgIterator; overload;
    {class} function init(arglist: DNRuntimeArgumentHandle; var ptr: DNVoid): DNArgIterator; overload;

  end;

  [DNTypeName('System.ArgIterator')]
  DNArgIterator = interface(DNValueType)
  ['{B0E32349-8F96-3CA4-B0CA-5353911C33B9}']
  { methods } 

    function GetNextArg: DNTypedReference; overload;
    function GetNextArg(rth: DNRuntimeTypeHandle): DNTypedReference; overload;
    procedure &End;
    function GetNextArgType: DNRuntimeTypeHandle;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function GetRemainingCount: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArgIterator = class(TDNGenericImport<DNArgIteratorClass, DNArgIterator>) end;

  //-------------namespace: System----------------
  DNArraySegmentClass<T> = interface(DNValueTypeClass)
  ['{AC87A0AF-89CD-5EF1-BBFE-F53171ADB68C}']
  { constructors } 

    {class} function init(&array: TArray<T>): DNArraySegment<T>; overload;
    {class} function init(&array: TArray<T>; offset: Int32; count: Int32): DNArraySegment<T>; overload;

  end;

  [DNTypeName('System.ArraySegment`1')]
  DNArraySegment<T> = interface(DNValueType)
  ['{B784A4EB-921D-3977-A9B0-4E2776FA433E}']
  { getters & setters } 

    function get_Array: TArray<T>;
    function get_Offset: Int32;
    function get_Count: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNArraySegment<T>): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property &Array: TArray<T> read get_Array;
    property Offset: Int32 read get_Offset;
    property Count: Int32 read get_Count;
  end;

  TDNArraySegment<T> = class(TDNGenericImport<DNArraySegmentClass<T>, DNArraySegment<T>>) end;

  //-------------namespace: System----------------
  DNBooleanClass = interface(DNValueTypeClass)
  ['{02B045A3-E486-5CB3-BF78-135A4BF692DE}']
  { static fields getter & setter } 

   function __fakeFieldGet_TrueString: string;
   function __fakeFieldGet_FalseString: string;

  { static fields } 

    {class} property TrueString: string read __fakeFieldGet_TrueString;
    {class} property FalseString: string read __fakeFieldGet_FalseString;

  { static methods } 

    {class} function Parse(value: string): Boolean;
    {class} function TryParse(value: string; out result: Boolean): Boolean;

  end;

  [DNTypeName('System.Boolean')]
  DNBoolean = interface(DNValueType)
  ['{C3008E12-9B16-36EC-B731-73257F25BE7A}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Boolean): Boolean; overload;
    function CompareTo(obj: DNObject): Int32; overload;
    function CompareTo(value: Boolean): Int32; overload;
    function GetTypeCode: DNTypeCode;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  end;

  TDNBoolean = class(TDNGenericImport<DNBooleanClass, DNBoolean>) end;

  //-------------namespace: System----------------
  DNByteClass = interface(DNValueTypeClass)
  ['{19D5EDE2-0E9E-5378-9A81-9B631BC2899E}']
  { static methods } 

    {class} function Parse(s: string): Byte; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Byte; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Byte; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Byte; overload;
    {class} function TryParse(s: string; out result: Byte): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Byte): Boolean; overload;

  end;

  [DNTypeName('System.Byte')]
  DNByte = interface(DNValueType)
  ['{9B957340-ADBA-3234-91EA-46A5C9BFF530}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Byte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Byte): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNByte = class(TDNGenericImport<DNByteClass, DNByte>)
  public const
   MaxValue = 255;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNCharClass = interface(DNValueTypeClass)
  ['{6AC6A21A-11C9-5C4A-814D-35D9E34E08A2}']
  { static methods } 

    {class} function ToString(c: Char): string; overload;
    {class} function Parse(s: string): Char;
    {class} function TryParse(s: string; out result: Char): Boolean;
    {class} function IsDigit(c: Char): Boolean; overload;
    {class} function IsLetter(c: Char): Boolean; overload;
    {class} function IsWhiteSpace(c: Char): Boolean; overload;
    {class} function IsUpper(c: Char): Boolean; overload;
    {class} function IsLower(c: Char): Boolean; overload;
    {class} function IsPunctuation(c: Char): Boolean; overload;
    {class} function IsLetterOrDigit(c: Char): Boolean; overload;
    {class} function ToUpper(c: Char; culture: DNCultureInfo): Char; overload;
    {class} function ToUpper(c: Char): Char; overload;
    {class} function ToUpperInvariant(c: Char): Char;
    {class} function ToLower(c: Char; culture: DNCultureInfo): Char; overload;
    {class} function ToLower(c: Char): Char; overload;
    {class} function ToLowerInvariant(c: Char): Char;
    {class} function IsControl(c: Char): Boolean; overload;
    {class} function IsControl(s: string; index: Int32): Boolean; overload;
    {class} function IsDigit(s: string; index: Int32): Boolean; overload;
    {class} function IsLetter(s: string; index: Int32): Boolean; overload;
    {class} function IsLetterOrDigit(s: string; index: Int32): Boolean; overload;
    {class} function IsLower(s: string; index: Int32): Boolean; overload;
    {class} function IsNumber(c: Char): Boolean; overload;
    {class} function IsNumber(s: string; index: Int32): Boolean; overload;
    {class} function IsPunctuation(s: string; index: Int32): Boolean; overload;
    {class} function IsSeparator(c: Char): Boolean; overload;
    {class} function IsSeparator(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogate(c: Char): Boolean; overload;
    {class} function IsSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsSymbol(c: Char): Boolean; overload;
    {class} function IsSymbol(s: string; index: Int32): Boolean; overload;
    {class} function IsUpper(s: string; index: Int32): Boolean; overload;
    {class} function IsWhiteSpace(s: string; index: Int32): Boolean; overload;
    {class} function GetUnicodeCategory(c: Char): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(s: string; index: Int32): DNUnicodeCategory; overload;
    {class} function GetNumericValue(c: Char): Double; overload;
    {class} function GetNumericValue(s: string; index: Int32): Double; overload;
    {class} function IsHighSurrogate(c: Char): Boolean; overload;
    {class} function IsHighSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsLowSurrogate(c: Char): Boolean; overload;
    {class} function IsLowSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogatePair(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogatePair(highSurrogate: Char; lowSurrogate: Char): Boolean; overload;
    {class} function ConvertFromUtf32(utf32: Int32): string;
    {class} function ConvertToUtf32(highSurrogate: Char; lowSurrogate: Char): Int32; overload;
    {class} function ConvertToUtf32(s: string; index: Int32): Int32; overload;

  end;

  [DNTypeName('System.Char')]
  DNChar = interface(DNValueType)
  ['{6EE96102-3657-3D66-867A-26B63AAAAF78}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Char): Boolean; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Char): Int32; overload;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNChar = class(TDNGenericImport<DNCharClass, DNChar>)
  public const
   MaxValue = #65535;
   MinValue = #0;
  end;

  //-------------namespace: System.Collections----------------
  DNDictionaryEntryClass = interface(DNValueTypeClass)
  ['{E94B3D5A-FFCA-5959-B36B-51FEB2C7342C}']
  { constructors } 

    {class} function init(key: DNObject; value: DNObject): DNDictionaryEntry;

  end;

  [DNTypeName('System.Collections.DictionaryEntry')]
  DNDictionaryEntry = interface(DNValueType)
  ['{A6CCEB32-EC73-3E9B-8852-02783C97D3FA}']
  { getters & setters } 

    function get_Key: DNObject;
    procedure set_Key(value: DNObject);
    function get_Value: DNObject;
    procedure set_Value(value: DNObject);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Key: DNObject read get_Key write set_Key;
    property Value: DNObject read get_Value write set_Value;
  end;

  TDNDictionaryEntry = class(TDNGenericImport<DNDictionaryEntryClass, DNDictionaryEntry>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{667F82A7-994E-555B-A39E-B678ACD55EA2}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+Enumerator')]
  DNDictionary_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{2E73003C-B040-3F66-A210-0EC723CA8FAF}']
  { getters & setters } 

    function get_Current: DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Current: DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_EnumeratorClass<TKey, TValue>, DNDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_KeyCollection_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{94A9C003-EE2F-50CF-88D0-D20967B78445}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator')]
  DNDictionary_KeyCollection_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{150BD7DD-69FD-3F9C-9D39-01E3F45896CE}']
  { getters & setters } 

    function get_Current: TKey;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Current: TKey read get_Current;
  end;

  TDNDictionary_KeyCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_KeyCollection_EnumeratorClass<TKey, TValue>, DNDictionary_KeyCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_ValueCollection_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{445C2A7A-EDE6-5EC1-BCD0-16334CB82406}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator')]
  DNDictionary_ValueCollection_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{F7DF8336-757D-3732-9088-A18305F3033F}']
  { getters & setters } 

    function get_Current: TValue;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Current: TValue read get_Current;
  end;

  TDNDictionary_ValueCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_ValueCollection_EnumeratorClass<TKey, TValue>, DNDictionary_ValueCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyValuePairClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{C3A23400-AD75-5E15-AC48-AF89B934232E}']
  { constructors } 

    {class} function init(key: TKey; value: TValue): DNKeyValuePair<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.KeyValuePair`2')]
  DNKeyValuePair<TKey, TValue> = interface(DNValueType)
  ['{050615F3-A120-3A9B-9485-C4EABA6C02EF}']
  { getters & setters } 

    function get_Key: TKey;
    function get_Value: TValue;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Key: TKey read get_Key;
    property Value: TValue read get_Value;
  end;

  TDNKeyValuePair<TKey, TValue> = class(TDNGenericImport<DNKeyValuePairClass<TKey, TValue>, DNKeyValuePair<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNList_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{3DB6C440-9300-5CC6-AB43-274DAFCE3743}']
  end;

  [DNTypeName('System.Collections.Generic.List`1+Enumerator')]
  DNList_Enumerator<T> = interface(DNValueType)
  ['{12D6823A-4753-3F0E-A1F5-C194E751496B}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNList_Enumerator<T> = class(TDNGenericImport<DNList_EnumeratorClass<T>, DNList_Enumerator<T>>) end;

  //-------------namespace: System.Configuration.Assemblies----------------
  DNAssemblyHashClass = interface(DNValueTypeClass)
  ['{2BDFE403-0DB7-5463-B6E6-C49246B01603}']
  { constructors } 

    {class} function init(value: TArray<Byte>): DNAssemblyHash; overload;
    {class} function init(algorithm: DNAssemblyHashAlgorithm; value: TArray<Byte>): DNAssemblyHash; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNAssemblyHash;

  { static fields } 

    {class} property Empty: DNAssemblyHash read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Configuration.Assemblies.AssemblyHash')]
  DNAssemblyHash = interface(DNValueType)
  ['{42A66664-072F-3A67-A189-7D440709A77E}']
  { getters & setters } 

    function get_Algorithm: DNAssemblyHashAlgorithm;
    procedure set_Algorithm(value: DNAssemblyHashAlgorithm);

  { methods } 

    function GetValue: TArray<Byte>;
    procedure SetValue(value: TArray<Byte>);
    function Clone: DNObject;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Algorithm: DNAssemblyHashAlgorithm read get_Algorithm write set_Algorithm;
  end;

  TDNAssemblyHash = class(TDNGenericImport<DNAssemblyHashClass, DNAssemblyHash>) end;

  //-------------namespace: System----------------
  DNConsoleKeyInfoClass = interface(DNValueTypeClass)
  ['{53ED4273-816A-55F3-A2A8-B6B79E9DA1B1}']
  { constructors } 

    {class} function init(keyChar: Char; key: DNConsoleKey; shift: Boolean; alt: Boolean; control: Boolean): DNConsoleKeyInfo;

  end;

  [DNTypeName('System.ConsoleKeyInfo')]
  DNConsoleKeyInfo = interface(DNValueType)
  ['{188164B7-0CD9-3BC0-A3B0-9311B0BD16FF}']
  { getters & setters } 

    function get_KeyChar: Char;
    function get_Key: DNConsoleKey;
    function get_Modifiers: DNConsoleModifiers;

  { methods } 

    function Equals(value: DNObject): Boolean; overload;
    function Equals(obj: DNConsoleKeyInfo): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property KeyChar: Char read get_KeyChar;
    property Key: DNConsoleKey read get_Key;
    property Modifiers: DNConsoleModifiers read get_Modifiers;
  end;

  TDNConsoleKeyInfo = class(TDNGenericImport<DNConsoleKeyInfoClass, DNConsoleKeyInfo>) end;

  //-------------namespace: System----------------
  DNDateTimeClass = interface(DNValueTypeClass)
  ['{DE49A844-D1E2-5D7C-8AC3-F11DC2D376BE}']
  { static getter & setter } 

    {class} function get_Now: DNDateTime;
    {class} function get_UtcNow: DNDateTime;
    {class} function get_Today: DNDateTime;

  { constructors } 

    {class} function init(ticks: Int64): DNDateTime; overload;
    {class} function init(ticks: Int64; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; kind: DNDateTimeKind): DNDateTime; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinValue: DNDateTime;
   function __fakeFieldGet_MaxValue: DNDateTime;

  { static fields } 

    {class} property MinValue: DNDateTime read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNDateTime read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Compare(t1: DNDateTime; t2: DNDateTime): Int32;
    {class} function DaysInMonth(year: Int32; month: Int32): Int32;
    {class} function Equals(t1: DNDateTime; t2: DNDateTime): Boolean; overload;
    {class} function FromBinary(dateData: Int64): DNDateTime;
    {class} function FromFileTime(fileTime: Int64): DNDateTime;
    {class} function FromFileTimeUtc(fileTime: Int64): DNDateTime;
    {class} function FromOADate(d: Double): DNDateTime;
    {class} function SpecifyKind(value: DNDateTime; kind: DNDateTimeKind): DNDateTime;
    {class} function IsLeapYear(year: Int32): Boolean;
    {class} function Parse(s: string): DNDateTime; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function TryParse(s: string; out result: DNDateTime): Boolean; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function TryParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;

  { static propertys } 

    {class} property Now: DNDateTime read get_Now;
    {class} property UtcNow: DNDateTime read get_UtcNow;
    {class} property Today: DNDateTime read get_Today;
  end;

  [DNTypeName('System.DateTime')]
  DNDateTime = interface(DNValueType)
  ['{C48BFDF5-A271-384B-BF13-BD21D931C1BF}']
  { getters & setters } 

    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Kind: DNDateTimeKind;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    function Add(value: DNTimeSpan): DNDateTime;
    function AddDays(value: Double): DNDateTime;
    function AddHours(value: Double): DNDateTime;
    function AddMilliseconds(value: Double): DNDateTime;
    function AddMinutes(value: Double): DNDateTime;
    function AddMonths(months: Int32): DNDateTime;
    function AddSeconds(value: Double): DNDateTime;
    function AddTicks(value: Int64): DNDateTime;
    function AddYears(value: Int32): DNDateTime;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNDateTime): Int32; overload;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(value: DNDateTime): Boolean; overload;
    function IsDaylightSavingTime: Boolean;
    function ToBinary: Int64;
    function GetHashCode: Int32;
    function Subtract(value: DNDateTime): DNTimeSpan; overload;
    function Subtract(value: DNTimeSpan): DNDateTime; overload;
    function ToOADate: Double;
    function ToFileTime: Int64;
    function ToFileTimeUtc: Int64;
    function ToLocalTime: DNDateTime;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function ToUniversalTime: DNDateTime;
    function GetDateTimeFormats: TArray<string>; overload;
    function GetDateTimeFormats(provider: DNIFormatProvider): TArray<string>; overload;
    function GetDateTimeFormats(format: Char): TArray<string>; overload;
    function GetDateTimeFormats(format: Char; provider: DNIFormatProvider): TArray<string>; overload;
    function GetTypeCode: DNTypeCode;
    function ToLongDateString: string;
    function ToLongTimeString: string;
    function ToShortTimeString: string;
    function ToShortDateString: string;
    function GetType: DNType;

  { propertys } 

    property Date: DNDateTime read get_Date;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property DayOfYear: Int32 read get_DayOfYear;
    property Hour: Int32 read get_Hour;
    property Kind: DNDateTimeKind read get_Kind;
    property Millisecond: Int32 read get_Millisecond;
    property Minute: Int32 read get_Minute;
    property Month: Int32 read get_Month;
    property Second: Int32 read get_Second;
    property Ticks: Int64 read get_Ticks;
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    property Year: Int32 read get_Year;
  end;

  TDNDateTime = class(TDNGenericImport<DNDateTimeClass, DNDateTime>) end;

  //-------------namespace: System----------------
  DNDateTimeOffsetClass = interface(DNValueTypeClass)
  ['{F2EF7A67-4BDB-559B-B8EA-03B4EF92A95F}']
  { static getter & setter } 

    {class} function get_Now: DNDateTimeOffset;
    {class} function get_UtcNow: DNDateTimeOffset;

  { constructors } 

    {class} function init(ticks: Int64; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(dateTime: DNDateTime): DNDateTimeOffset; overload;
    {class} function init(dateTime: DNDateTime; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; offset: DNTimeSpan): DNDateTimeOffset; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinValue: DNDateTimeOffset;
   function __fakeFieldGet_MaxValue: DNDateTimeOffset;

  { static fields } 

    {class} property MinValue: DNDateTimeOffset read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNDateTimeOffset read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Compare(first: DNDateTimeOffset; second: DNDateTimeOffset): Int32;
    {class} function Equals(first: DNDateTimeOffset; second: DNDateTimeOffset): Boolean; overload;
    {class} function FromFileTime(fileTime: Int64): DNDateTimeOffset;
    {class} function Parse(input: string): DNDateTimeOffset; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    {class} function TryParse(input: string; out result: DNDateTimeOffset): Boolean; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function FromUnixTimeSeconds(seconds: Int64): DNDateTimeOffset;
    {class} function FromUnixTimeMilliseconds(milliseconds: Int64): DNDateTimeOffset;

  { static propertys } 

    {class} property Now: DNDateTimeOffset read get_Now;
    {class} property UtcNow: DNDateTimeOffset read get_UtcNow;
  end;

  [DNTypeName('System.DateTimeOffset')]
  DNDateTimeOffset = interface(DNValueType)
  ['{92F5A917-07B2-36C0-AEF9-3845A093142A}']
  { getters & setters } 

    function get_DateTime: DNDateTime;
    function get_UtcDateTime: DNDateTime;
    function get_LocalDateTime: DNDateTime;
    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Offset: DNTimeSpan;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_UtcTicks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    function ToOffset(offset: DNTimeSpan): DNDateTimeOffset;
    function Add(timeSpan: DNTimeSpan): DNDateTimeOffset;
    function AddDays(days: Double): DNDateTimeOffset;
    function AddHours(hours: Double): DNDateTimeOffset;
    function AddMilliseconds(milliseconds: Double): DNDateTimeOffset;
    function AddMinutes(minutes: Double): DNDateTimeOffset;
    function AddMonths(months: Int32): DNDateTimeOffset;
    function AddSeconds(seconds: Double): DNDateTimeOffset;
    function AddTicks(ticks: Int64): DNDateTimeOffset;
    function AddYears(years: Int32): DNDateTimeOffset;
    function CompareTo(other: DNDateTimeOffset): Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNDateTimeOffset): Boolean; overload;
    function EqualsExact(other: DNDateTimeOffset): Boolean;
    function GetHashCode: Int32;
    function Subtract(value: DNDateTimeOffset): DNTimeSpan; overload;
    function Subtract(value: DNTimeSpan): DNDateTimeOffset; overload;
    function ToFileTime: Int64;
    function ToLocalTime: DNDateTimeOffset;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function ToUniversalTime: DNDateTimeOffset;
    function ToUnixTimeSeconds: Int64;
    function ToUnixTimeMilliseconds: Int64;
    function GetType: DNType;

  { propertys } 

    property DateTime: DNDateTime read get_DateTime;
    property UtcDateTime: DNDateTime read get_UtcDateTime;
    property LocalDateTime: DNDateTime read get_LocalDateTime;
    property Date: DNDateTime read get_Date;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property DayOfYear: Int32 read get_DayOfYear;
    property Hour: Int32 read get_Hour;
    property Millisecond: Int32 read get_Millisecond;
    property Minute: Int32 read get_Minute;
    property Month: Int32 read get_Month;
    property Offset: DNTimeSpan read get_Offset;
    property Second: Int32 read get_Second;
    property Ticks: Int64 read get_Ticks;
    property UtcTicks: Int64 read get_UtcTicks;
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    property Year: Int32 read get_Year;
  end;

  TDNDateTimeOffset = class(TDNGenericImport<DNDateTimeOffsetClass, DNDateTimeOffset>) end;

  //-------------namespace: System----------------
  DNDecimalClass = interface(DNValueTypeClass)
  ['{D39A77E6-A3B8-50AE-AFEA-9899B2B376DF}']
  { constructors } 

    {class} function init(value: Int32): DNDecimal; overload;
    {class} function init(value: UInt32): DNDecimal; overload;
    {class} function init(value: Int64): DNDecimal; overload;
    {class} function init(value: UInt64): DNDecimal; overload;
    {class} function init(value: Single): DNDecimal; overload;
    {class} function init(value: Double): DNDecimal; overload;
    {class} function init(bits: TArray<Int32>): DNDecimal; overload;
    {class} function init(lo: Int32; mid: Int32; hi: Int32; isNegative: Boolean; scale: Byte): DNDecimal; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: DNDecimal;
   function __fakeFieldGet_One: DNDecimal;
   function __fakeFieldGet_MinusOne: DNDecimal;
   function __fakeFieldGet_MaxValue: DNDecimal;
   function __fakeFieldGet_MinValue: DNDecimal;

  { static fields } 

    {class} property Zero: DNDecimal read __fakeFieldGet_Zero;
    {class} property One: DNDecimal read __fakeFieldGet_One;
    {class} property MinusOne: DNDecimal read __fakeFieldGet_MinusOne;
    {class} property MaxValue: DNDecimal read __fakeFieldGet_MaxValue;
    {class} property MinValue: DNDecimal read __fakeFieldGet_MinValue;

  { static methods } 

    {class} function ToByte(value: DNDecimal): Byte;
    {class} function ToInt32(d: DNDecimal): Int32;
    {class} function ToOACurrency(value: DNDecimal): Int64;
    {class} function FromOACurrency(cy: Int64): DNDecimal;
    {class} function Add(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Ceiling(d: DNDecimal): DNDecimal;
    {class} function Compare(d1: DNDecimal; d2: DNDecimal): Int32;
    {class} function Divide(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Equals(d1: DNDecimal; d2: DNDecimal): Boolean; overload;
    {class} function Floor(d: DNDecimal): DNDecimal;
    {class} function Parse(s: string): DNDecimal; overload;
    {class} function Parse(s: string; style: DNNumberStyles): DNDecimal; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function TryParse(s: string; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNDecimal): Boolean; overload;
    {class} function GetBits(d: DNDecimal): TArray<Int32>;
    {class} function Remainder(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Multiply(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Negate(d: DNDecimal): DNDecimal;
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;
    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Subtract(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function ToSByte(value: DNDecimal): SByte;
    {class} function ToInt16(value: DNDecimal): Int16;
    {class} function ToInt64(d: DNDecimal): Int64;
    {class} function ToUInt16(value: DNDecimal): UInt16;
    {class} function ToUInt32(d: DNDecimal): UInt32;
    {class} function ToUInt64(d: DNDecimal): UInt64;
    {class} function Truncate(d: DNDecimal): DNDecimal;
    {class} function ToDouble(d: DNDecimal): Double;
    {class} function ToSingle(d: DNDecimal): Single;

  end;

  [DNTypeName('System.Decimal')]
  DNDecimal = interface(DNValueType)
  ['{6FB370D8-4F72-3AC1-9A32-3875F336ECB5}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNDecimal): Int32; overload;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(value: DNDecimal): Boolean; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDecimal = class(TDNGenericImport<DNDecimalClass, DNDecimal>) end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  DNSymbolTokenClass = interface(DNValueTypeClass)
  ['{291B94A6-52AA-5178-B913-610A1673A656}']
  { constructors } 

    {class} function init(val: Int32): DNSymbolToken;

  end;

  [DNTypeName('System.Diagnostics.SymbolStore.SymbolToken')]
  DNSymbolToken = interface(DNValueType)
  ['{709164DF-D0E2-3813-A07D-F9F1E99F9A4B}']
  { methods } 

    function GetToken: Int32;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNSymbolToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSymbolToken = class(TDNGenericImport<DNSymbolTokenClass, DNSymbolToken>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceOptionsClass = interface(DNValueTypeClass)
  ['{EEC5A75F-7262-5D49-8090-8817F0B6849D}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceOptions')]
  DNEventSourceOptions = interface(DNValueType)
  ['{8B698E0A-F98A-32D6-9E5C-C05FA25591BC}']
  { getters & setters } 

    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Level: DNEventLevel read get_Level write set_Level;
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    property Tags: DNEventTags read get_Tags write set_Tags;
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
  end;

  TDNEventSourceOptions = class(TDNGenericImport<DNEventSourceOptionsClass, DNEventSourceOptions>) end;

  //-------------namespace: System----------------
  DNDoubleClass = interface(DNValueTypeClass)
  ['{C5EAEB35-6E3F-5A02-B591-D989C74E5339}']
  { static methods } 

    {class} function IsInfinity(d: Double): Boolean;
    {class} function IsPositiveInfinity(d: Double): Boolean;
    {class} function IsNegativeInfinity(d: Double): Boolean;
    {class} function IsNaN(d: Double): Boolean;
    {class} function Parse(s: string): Double; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Double; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Double; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Double; overload;
    {class} function TryParse(s: string; out result: Double): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Double): Boolean; overload;

  end;

  [DNTypeName('System.Double')]
  DNDouble = interface(DNValueType)
  ['{0F4F147F-4369-3388-8E4B-71E20C96F9AD}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Double): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Double): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNDouble = class(TDNGenericImport<DNDoubleClass, DNDouble>)
  public const
   MinValue = -1.79769313486232E+308;
   MaxValue = 1.79769313486232E+308;
   Epsilon = 4.94065645841247E-324;
  end;

  //-------------namespace: System----------------
  DNEnumClass = interface(DNValueTypeClass)
  ['{AFF6CA94-83C1-5901-94DC-29257892C2B6}']
  { static methods } 

    {class} function Parse(enumType: DNType; value: string): DNObject; overload;
    {class} function Parse(enumType: DNType; value: string; ignoreCase: Boolean): DNObject; overload;
    {class} function GetUnderlyingType(enumType: DNType): DNType;
    {class} function GetValues(enumType: DNType): DNArray;
    {class} function GetName(enumType: DNType; value: DNObject): string;
    {class} function GetNames(enumType: DNType): TArray<string>;
    {class} function ToObject(enumType: DNType; value: DNObject): DNObject; overload;
    {class} function IsDefined(enumType: DNType; value: DNObject): Boolean;
    {class} function Format(enumType: DNType; value: DNObject; format: string): string;
    {class} function ToObject(enumType: DNType; value: SByte): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int16): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int32): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Byte): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt16): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt32): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int64): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt64): DNObject; overload;

  end;

  [DNTypeName('System.Enum')]
  DNEnum = interface(DNValueType)
  ['{C43345B9-7FED-3FC7-8FC2-7B1B82BC109E}']
  { methods } 

    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function CompareTo(target: DNObject): Int32;
    function ToString(provider: DNIFormatProvider): string; overload;
    function HasFlag(flag: DNEnum): Boolean;
    function GetTypeCode: DNTypeCode;
    function Equals(obj: DNObject): Boolean;
    function ToString(format: string): string; overload;
    function GetType: DNType;

  end;

  TDNEnum = class(TDNGenericImport<DNEnumClass, DNEnum>) end;

  //-------------namespace: System----------------
  DNGuidClass = interface(DNValueTypeClass)
  ['{1F95A8E8-2BE3-5657-A210-4BD4BFB0F74A}']
  { constructors } 

    {class} function init(b: TArray<Byte>): DNGuid; overload;
    {class} function init(a: UInt32; b: UInt16; c: UInt16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: TArray<Byte>): DNGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    {class} function init(g: string): DNGuid; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNGuid;

  { static fields } 

    {class} property Empty: DNGuid read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Parse(input: string): DNGuid;
    {class} function TryParse(input: string; out result: DNGuid): Boolean;
    {class} function ParseExact(input: string; format: string): DNGuid;
    {class} function TryParseExact(input: string; format: string; out result: DNGuid): Boolean;
    {class} function NewGuid: DNGuid;

  end;

  [DNTypeName('System.Guid')]
  DNGuid = interface(DNValueType)
  ['{9C5923E9-DE52-33EA-88DE-7EBC8633B9CC}']
  { methods } 

    function ToByteArray: TArray<Byte>;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(g: DNGuid): Boolean; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNGuid): Int32; overload;
    function ToString(format: string): string; overload;
    function ToString: string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  end;

  TDNGuid = class(TDNGenericImport<DNGuidClass, DNGuid>) end;

  //-------------namespace: System----------------
  DNInt16Class = interface(DNValueTypeClass)
  ['{53E46BFE-3EEC-561F-8708-DAE4225F1E12}']
  { static methods } 

    {class} function Parse(s: string): Int16; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int16; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int16; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int16; overload;
    {class} function TryParse(s: string; out result: Int16): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int16): Boolean; overload;

  end;

  [DNTypeName('System.Int16')]
  DNInt16 = interface(DNValueType)
  ['{206DAF34-5BA5-3504-8A19-D57699561886}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int16): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int16): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt16 = class(TDNGenericImport<DNInt16Class, DNInt16>)
  public const
   MaxValue = 32767;
   MinValue = -32768;
  end;

  //-------------namespace: System----------------
  DNInt32Class = interface(DNValueTypeClass)
  ['{5D5049A8-17A8-5CC5-8B46-C25F34FA6262}']
  { static methods } 

    {class} function Parse(s: string): Int32; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int32; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int32; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int32; overload;
    {class} function TryParse(s: string; out result: Int32): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int32): Boolean; overload;

  end;

  [DNTypeName('System.Int32')]
  DNInt32 = interface(DNValueType)
  ['{A310FADD-7C33-377C-9D6B-599B0317D7F2}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int32): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int32): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt32 = class(TDNGenericImport<DNInt32Class, DNInt32>)
  public const
   MaxValue = 2147483647;
   MinValue = -2147483648;
  end;

  //-------------namespace: System----------------
  DNInt64Class = interface(DNValueTypeClass)
  ['{CC99C666-4E17-50C1-85B6-7DBA11B1E2CC}']
  { static methods } 

    {class} function Parse(s: string): Int64; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int64; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int64; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int64; overload;
    {class} function TryParse(s: string; out result: Int64): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int64): Boolean; overload;

  end;

  [DNTypeName('System.Int64')]
  DNInt64 = interface(DNValueType)
  ['{AD1CECF5-5FAD-3ECF-AD89-2FEBD6521FA9}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int64): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int64): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt64 = class(TDNGenericImport<DNInt64Class, DNInt64>)
  public const
   MaxValue = 9223372036854775807;
   MinValue = -9223372036854775808;
  end;

  //-------------namespace: System----------------
  DNIntPtrClass = interface(DNValueTypeClass)
  ['{815A2F3D-B593-5C25-A5D6-74B5E19510C4}']
  { static getter & setter } 

    {class} function get_Size: Int32;

  { constructors } 

    {class} function init(value: Int32): DNIntPtr; overload;
    {class} function init(value: Int64): DNIntPtr; overload;
    {class} function init(var value: DNVoid): DNIntPtr; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: IntPtr;

  { static fields } 

    {class} property Zero: IntPtr read __fakeFieldGet_Zero;

  { static methods } 

    {class} function Add(pointer: IntPtr; offset: Int32): IntPtr;
    {class} function Subtract(pointer: IntPtr; offset: Int32): IntPtr;

  { static propertys } 

    {class} property Size: Int32 read get_Size;
  end;

  [DNTypeName('System.IntPtr')]
  DNIntPtr = interface(DNValueType)
  ['{A1CB710C-8D50-3181-BB38-65CE2E98F9A6}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToInt32: Int32;
    function ToInt64: Int64;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToPointer: DNVoid;
    function GetType: DNType;

  end;

  TDNIntPtr = class(TDNGenericImport<DNIntPtrClass, DNIntPtr>) end;

  //-------------namespace: System----------------
  DNModuleHandleClass = interface(DNValueTypeClass)
  ['{EA5C5542-DAD4-531A-8A58-F0422116671E}']
  { static fields getter & setter } 

   function __fakeFieldGet_EmptyHandle: DNModuleHandle;

  { static fields } 

    {class} property EmptyHandle: DNModuleHandle read __fakeFieldGet_EmptyHandle;

  end;

  [DNTypeName('System.ModuleHandle')]
  DNModuleHandle = interface(DNValueType)
  ['{8531F85A-746B-3DB5-A45F-9BAC4BD02D8B}']
  { getters & setters } 

    function get_MDStreamVersion: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNModuleHandle): Boolean; overload;
    function GetRuntimeTypeHandleFromMetadataToken(typeToken: Int32): DNRuntimeTypeHandle;
    function ResolveTypeHandle(typeToken: Int32): DNRuntimeTypeHandle; overload;
    function ResolveTypeHandle(typeToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeTypeHandle; overload;
    function GetRuntimeMethodHandleFromMetadataToken(methodToken: Int32): DNRuntimeMethodHandle;
    function ResolveMethodHandle(methodToken: Int32): DNRuntimeMethodHandle; overload;
    function ResolveMethodHandle(methodToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeMethodHandle; overload;
    function GetRuntimeFieldHandleFromMetadataToken(fieldToken: Int32): DNRuntimeFieldHandle;
    function ResolveFieldHandle(fieldToken: Int32): DNRuntimeFieldHandle; overload;
    function ResolveFieldHandle(fieldToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeFieldHandle; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MDStreamVersion: Int32 read get_MDStreamVersion;
  end;

  TDNModuleHandle = class(TDNGenericImport<DNModuleHandleClass, DNModuleHandle>) end;

  //-------------namespace: System----------------
  DNNullableClass<T> = interface(DNValueTypeClass)
  ['{E972445C-C2AA-5E0A-9681-98CBE227DBF8}']
  { constructors } 

    {class} function init(value: T): DNNullable<T>;

  end;

  [DNTypeName('System.Nullable`1')]
  DNNullable<T> = interface(DNValueType)
  ['{9A9177C7-CF5F-31AB-8495-96F58AC5DF3A}']
  { getters & setters } 

    function get_HasValue: Boolean;
    function get_Value: T;

  { methods } 

    function GetValueOrDefault: T; overload;
    function GetValueOrDefault(defaultValue: T): T; overload;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property HasValue: Boolean read get_HasValue;
    property Value: T read get_Value;
  end;

  TDNNullable<T> = class(TDNGenericImport<DNNullableClass<T>, DNNullable<T>>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeNamedArgumentClass = interface(DNValueTypeClass)
  ['{33C045D9-0CF5-59E7-A1A1-1CF87AFE7D5E}']
  { constructors } 

    {class} function init(memberInfo: DNMemberInfo; value: DNObject): DNCustomAttributeNamedArgument; overload;
    {class} function init(memberInfo: DNMemberInfo; typedArgument: DNCustomAttributeTypedArgument): DNCustomAttributeNamedArgument; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeNamedArgument')]
  DNCustomAttributeNamedArgument = interface(DNValueType)
  ['{7FC47A26-AA2E-32EA-BDE4-01A490842D87}']
  { getters & setters } 

    function get_MemberInfo: DNMemberInfo;
    function get_TypedValue: DNCustomAttributeTypedArgument;
    function get_MemberName: string;
    function get_IsField: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberInfo: DNMemberInfo read get_MemberInfo;
    property TypedValue: DNCustomAttributeTypedArgument read get_TypedValue;
    property MemberName: string read get_MemberName;
    property IsField: Boolean read get_IsField;
  end;

  TDNCustomAttributeNamedArgument = class(TDNGenericImport<DNCustomAttributeNamedArgumentClass, DNCustomAttributeNamedArgument>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeTypedArgumentClass = interface(DNValueTypeClass)
  ['{A39E0610-3BD1-59B9-AEC7-17E317026042}']
  { constructors } 

    {class} function init(argumentType: DNType; value: DNObject): DNCustomAttributeTypedArgument; overload;
    {class} function init(value: DNObject): DNCustomAttributeTypedArgument; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeTypedArgument')]
  DNCustomAttributeTypedArgument = interface(DNValueType)
  ['{9DC6AC40-EDFA-3E34-9AD1-B7A0A9E3A40A}']
  { getters & setters } 

    function get_ArgumentType: DNType;
    function get_Value: DNObject;

  { methods } 

    function ToString: string;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    property ArgumentType: DNType read get_ArgumentType;
    property Value: DNObject read get_Value;
  end;

  TDNCustomAttributeTypedArgument = class(TDNGenericImport<DNCustomAttributeTypedArgumentClass, DNCustomAttributeTypedArgument>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventTokenClass = interface(DNValueTypeClass)
  ['{8C807F60-F011-5637-9126-8E786D5F6D90}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventToken;

  { static fields } 

    {class} property Empty: DNEventToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.EventToken')]
  DNEventToken = interface(DNValueType)
  ['{4E8B1BB8-6A6F-3B57-8AFA-0129550B07BE}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNEventToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNEventToken = class(TDNGenericImport<DNEventTokenClass, DNEventToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNExceptionHandlerClass = interface(DNValueTypeClass)
  ['{0B75556E-44F3-593C-9423-C192AF9EE5CD}']
  { constructors } 

    {class} function init(tryOffset: Int32; tryLength: Int32; filterOffset: Int32; handlerOffset: Int32; handlerLength: Int32; kind: DNExceptionHandlingClauseOptions; exceptionTypeToken: Int32): DNExceptionHandler;

  end;

  [DNTypeName('System.Reflection.Emit.ExceptionHandler')]
  DNExceptionHandler = interface(DNValueType)
  ['{4677C456-2CFC-3ADC-B319-50F4B9DECE20}']
  { getters & setters } 

    function get_ExceptionTypeToken: Int32;
    function get_TryOffset: Int32;
    function get_TryLength: Int32;
    function get_FilterOffset: Int32;
    function get_HandlerOffset: Int32;
    function get_HandlerLength: Int32;
    function get_Kind: DNExceptionHandlingClauseOptions;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNExceptionHandler): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property ExceptionTypeToken: Int32 read get_ExceptionTypeToken;
    property TryOffset: Int32 read get_TryOffset;
    property TryLength: Int32 read get_TryLength;
    property FilterOffset: Int32 read get_FilterOffset;
    property HandlerOffset: Int32 read get_HandlerOffset;
    property HandlerLength: Int32 read get_HandlerLength;
    property Kind: DNExceptionHandlingClauseOptions read get_Kind;
  end;

  TDNExceptionHandler = class(TDNGenericImport<DNExceptionHandlerClass, DNExceptionHandler>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldTokenClass = interface(DNValueTypeClass)
  ['{963629DF-1D0B-5DA2-9693-AF88A37FCF2F}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNFieldToken;

  { static fields } 

    {class} property Empty: DNFieldToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.FieldToken')]
  DNFieldToken = interface(DNValueType)
  ['{24246833-61EB-329D-BDDF-0DAF3874062B}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNFieldToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNFieldToken = class(TDNGenericImport<DNFieldTokenClass, DNFieldToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLabelClass = interface(DNValueTypeClass)
  ['{98A09901-04DF-5EC4-AAA0-B78DAAF7DC7B}']
  end;

  [DNTypeName('System.Reflection.Emit.Label')]
  DNLabel = interface(DNValueType)
  ['{A419B664-DABD-383D-A0DB-991487D41E14}']
  { methods } 

    function Equals(obj: DNLabel): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNLabel = class(TDNGenericImport<DNLabelClass, DNLabel>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodTokenClass = interface(DNValueTypeClass)
  ['{6EAD5034-6C74-5C72-87BF-6D88D957B30B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNMethodToken;

  { static fields } 

    {class} property Empty: DNMethodToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.MethodToken')]
  DNMethodToken = interface(DNValueType)
  ['{0EFE423A-A87E-33D9-8BF4-2D212620EE5F}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNMethodToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNMethodToken = class(TDNGenericImport<DNMethodTokenClass, DNMethodToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodeClass = interface(DNValueTypeClass)
  ['{D1F75B3F-44A4-50FE-9ECE-1D72F0090E96}']
  end;

  [DNTypeName('System.Reflection.Emit.OpCode')]
  DNOpCode = interface(DNValueType)
  ['{A7ED05C6-FECF-3C35-BA3B-84163AC1D5E5}']
  { getters & setters } 

    function get_OperandType: DNOperandType;
    function get_FlowControl: DNFlowControl;
    function get_OpCodeType: DNOpCodeType;
    function get_StackBehaviourPop: DNStackBehaviour;
    function get_StackBehaviourPush: DNStackBehaviour;
    function get_Size: Int32;
    function get_Value: Int16;
    function get_Name: string;

  { methods } 

    function Equals(obj: DNOpCode): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property OperandType: DNOperandType read get_OperandType;
    property FlowControl: DNFlowControl read get_FlowControl;
    property OpCodeType: DNOpCodeType read get_OpCodeType;
    property StackBehaviourPop: DNStackBehaviour read get_StackBehaviourPop;
    property StackBehaviourPush: DNStackBehaviour read get_StackBehaviourPush;
    property Size: Int32 read get_Size;
    property Value: Int16 read get_Value;
    property Name: string read get_Name;
  end;

  TDNOpCode = class(TDNGenericImport<DNOpCodeClass, DNOpCode>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterTokenClass = interface(DNValueTypeClass)
  ['{F86C0C73-85C7-5530-931D-68CD28DBA49D}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNParameterToken;

  { static fields } 

    {class} property Empty: DNParameterToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.ParameterToken')]
  DNParameterToken = interface(DNValueType)
  ['{CFB98CA9-8121-35BE-AF40-C176C616A16B}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNParameterToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNParameterToken = class(TDNGenericImport<DNParameterTokenClass, DNParameterToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyTokenClass = interface(DNValueTypeClass)
  ['{9D9B5365-6641-535F-9C14-124F75FAE24F}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPropertyToken;

  { static fields } 

    {class} property Empty: DNPropertyToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.PropertyToken')]
  DNPropertyToken = interface(DNValueType)
  ['{566833C7-F4A0-30EE-BD7E-44752AD570E6}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNPropertyToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNPropertyToken = class(TDNGenericImport<DNPropertyTokenClass, DNPropertyToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureTokenClass = interface(DNValueTypeClass)
  ['{20B9537F-C036-5888-B28E-D644C0DB6A6A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSignatureToken;

  { static fields } 

    {class} property Empty: DNSignatureToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.SignatureToken')]
  DNSignatureToken = interface(DNValueType)
  ['{155E1466-0E84-3F2B-B825-F6525523407C}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNSignatureToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNSignatureToken = class(TDNGenericImport<DNSignatureTokenClass, DNSignatureToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNStringTokenClass = interface(DNValueTypeClass)
  ['{ED2D6648-056B-5B40-B634-712438C39E1C}']
  end;

  [DNTypeName('System.Reflection.Emit.StringToken')]
  DNStringToken = interface(DNValueType)
  ['{8CF0278D-D0AD-307D-BE63-A785432E3FDF}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNStringToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNStringToken = class(TDNGenericImport<DNStringTokenClass, DNStringToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeTokenClass = interface(DNValueTypeClass)
  ['{107312AD-83AA-5792-87BA-7078EBD542D6}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNTypeToken;

  { static fields } 

    {class} property Empty: DNTypeToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.TypeToken')]
  DNTypeToken = interface(DNValueType)
  ['{048FA0C2-8EBB-3BC2-A47F-01F12A32008E}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNTypeToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNTypeToken = class(TDNGenericImport<DNTypeTokenClass, DNTypeToken>) end;

  //-------------namespace: System.Reflection----------------
  DNInterfaceMappingClass = interface(DNValueTypeClass)
  ['{E60F9E20-1DC8-59CF-B30E-62985EE2C4E3}']
  end;

  [DNTypeName('System.Reflection.InterfaceMapping')]
  DNInterfaceMapping = interface(DNValueType)
  ['{5F7A2664-4778-3D72-A78F-D38B6B00180D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInterfaceMapping = class(TDNGenericImport<DNInterfaceMappingClass, DNInterfaceMapping>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterModifierClass = interface(DNValueTypeClass)
  ['{E04CEA21-6FF0-5A47-BE76-27AC504A35D1}']
  { constructors } 

    {class} function init(parameterCount: Int32): DNParameterModifier;

  end;

  [DNTypeName('System.Reflection.ParameterModifier')]
  DNParameterModifier = interface(DNValueType)
  ['{11D31042-14C0-3B5C-87D0-A2CD40803CB5}']
  { getters & setters } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
  end;

  TDNParameterModifier = class(TDNGenericImport<DNParameterModifierClass, DNParameterModifier>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncTaskMethodBuilderClass<TResult> = interface(DNValueTypeClass)
  ['{8467518A-7326-5125-B3BB-3965E83B5AA3}']
  { static methods } 

    {class} function Create: DNAsyncTaskMethodBuilder<TResult>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1')]
  DNAsyncTaskMethodBuilder<TResult> = interface(DNValueType)
  ['{124336B7-9CAD-3BF6-8249-05856123EC9E}']
  { getters & setters } 

    function get_Task: DNTask<TResult>;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult(result: TResult);
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask<TResult> read get_Task;
  end;

  TDNAsyncTaskMethodBuilder<TResult> = class(TDNGenericImport<DNAsyncTaskMethodBuilderClass<TResult>, DNAsyncTaskMethodBuilder<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncTaskMethodBuilderClass = interface(DNValueTypeClass)
  ['{5FA75619-3B1E-5AA4-923C-8F34930ABD30}']
  { static methods } 

    {class} function Create: DNAsyncTaskMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncTaskMethodBuilder')]
  DNAsyncTaskMethodBuilder = interface(DNValueType)
  ['{0C722BE0-9E01-3DD6-8EDF-3695318F795D}']
  { getters & setters } 

    function get_Task: DNTask;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask read get_Task;
  end;

  TDNAsyncTaskMethodBuilder = class(TDNGenericImport<DNAsyncTaskMethodBuilderClass, DNAsyncTaskMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncVoidMethodBuilderClass = interface(DNValueTypeClass)
  ['{FE877575-FDC5-5CB0-9A64-48C35648D3D6}']
  { static methods } 

    {class} function Create: DNAsyncVoidMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncVoidMethodBuilder')]
  DNAsyncVoidMethodBuilder = interface(DNValueType)
  ['{4A029946-A91B-3B8A-90A1-0099BC5C1006}']
  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNAsyncVoidMethodBuilder = class(TDNGenericImport<DNAsyncVoidMethodBuilderClass, DNAsyncVoidMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitableClass<TResult> = interface(DNValueTypeClass)
  ['{BE6CC728-D349-5B88-AFF9-4D6FFE686B9E}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1')]
  DNConfiguredTaskAwaitable<TResult> = interface(DNValueType)
  ['{810B7088-C14E-390F-832E-D823CF9D853C}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult>;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNConfiguredTaskAwaitable<TResult> = class(TDNGenericImport<DNConfiguredTaskAwaitableClass<TResult>, DNConfiguredTaskAwaitable<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{205EE7BE-42ED-5913-8D64-D0B2B1387CE8}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter')]
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = interface(DNValueType)
  ['{E382BFEF-9F40-3B23-8C3E-5CCCBB7FCE3B}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function GetResult: TResult;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = class(TDNGenericImport<DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass<TResult>, DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitableClass = interface(DNValueTypeClass)
  ['{9D25024E-B353-5549-BB6F-322BE2247322}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable')]
  DNConfiguredTaskAwaitable = interface(DNValueType)
  ['{472E005F-9856-321C-9A68-BB9F3AA331A7}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNConfiguredTaskAwaitable = class(TDNGenericImport<DNConfiguredTaskAwaitableClass, DNConfiguredTaskAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass = interface(DNValueTypeClass)
  ['{2C26690C-3DEE-5316-8987-956490BD043E}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter')]
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface(DNValueType)
  ['{BFD6BA67-E59D-397A-857E-945AE2C1E8C1}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = class(TDNGenericImport<DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass, DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{BF77B4C4-0C92-532A-A95E-A9DA765704E1}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.TaskAwaiter`1')]
  DNTaskAwaiter<TResult> = interface(DNValueType)
  ['{D8F23A33-FE5F-321E-81CD-8BB0F946EEBD}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure UnsafeOnCompleted(continuation: DNAction);
    function GetResult: TResult;
    procedure OnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNTaskAwaiter<TResult> = class(TDNGenericImport<DNTaskAwaiterClass<TResult>, DNTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTaskAwaiterClass = interface(DNValueTypeClass)
  ['{C9791E78-5B87-530B-8F08-943B15277487}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.TaskAwaiter')]
  DNTaskAwaiter = interface(DNValueType)
  ['{6503951D-3783-31CF-85D7-EBBA9711B424}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure GetResult;
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNTaskAwaiter = class(TDNGenericImport<DNTaskAwaiterClass, DNTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitableClass = interface(DNValueTypeClass)
  ['{49D9EF3B-B887-5EAE-969F-0BAE9AA52099}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable')]
  DNYieldAwaitable = interface(DNValueType)
  ['{522674D0-B420-305E-807A-DC43738E8E2C}']
  { methods } 

    function GetAwaiter: DNYieldAwaitable_YieldAwaiter;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNYieldAwaitable = class(TDNGenericImport<DNYieldAwaitableClass, DNYieldAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitable_YieldAwaiterClass = interface(DNValueTypeClass)
  ['{89884F12-2A45-51D9-8A62-3822C0F2A9AB}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter')]
  DNYieldAwaitable_YieldAwaiter = interface(DNValueType)
  ['{C6EC8441-900C-30EC-927F-E9A4ECE32725}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNYieldAwaitable_YieldAwaiter = class(TDNGenericImport<DNYieldAwaitable_YieldAwaiterClass, DNYieldAwaitable_YieldAwaiter>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNArrayWithOffsetClass = interface(DNValueTypeClass)
  ['{E7D1C90A-8BAE-5C6E-A989-3399E178C543}']
  { constructors } 

    {class} function init(&array: DNObject; offset: Int32): DNArrayWithOffset;

  end;

  [DNTypeName('System.Runtime.InteropServices.ArrayWithOffset')]
  DNArrayWithOffset = interface(DNValueType)
  ['{8351108F-34E3-3CC9-BF5A-C76C48060835}']
  { methods } 

    function GetArray: DNObject;
    function GetOffset: Int32;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNArrayWithOffset): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArrayWithOffset = class(TDNGenericImport<DNArrayWithOffsetClass, DNArrayWithOffset>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_BIND_OPTSClass = interface(DNValueTypeClass)
  ['{E9270A2A-AE17-5E68-9B84-B8A270197B5A}']
  end;

  [DNTypeName('System.Runtime.InteropServices.BIND_OPTS')]
  DNInteropServices_BIND_OPTS = interface(DNValueType)
  ['{C405DB40-4A54-3FC6-B8DA-6BC332002AA1}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_BIND_OPTS = class(TDNGenericImport<DNInteropServices_BIND_OPTSClass, DNInteropServices_BIND_OPTS>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_BINDPTRClass = interface(DNValueTypeClass)
  ['{4C3B6CAE-22E2-58FD-83A2-BFAB653D1476}']
  end;

  [DNTypeName('System.Runtime.InteropServices.BINDPTR')]
  DNInteropServices_BINDPTR = interface(DNValueType)
  ['{0A52E03D-5F69-33D7-85F9-0271981AA380}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_BINDPTR = class(TDNGenericImport<DNInteropServices_BINDPTRClass, DNInteropServices_BINDPTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_BIND_OPTSClass = interface(DNValueTypeClass)
  ['{D9FA8B67-50A1-57AD-A372-14592A7B7C75}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.BIND_OPTS')]
  DNComTypes_BIND_OPTS = interface(DNValueType)
  ['{381E7F17-0361-399C-A5D0-6C16FBDC7030}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_BIND_OPTS = class(TDNGenericImport<DNComTypes_BIND_OPTSClass, DNComTypes_BIND_OPTS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_BINDPTRClass = interface(DNValueTypeClass)
  ['{01507687-E361-51D6-AB10-5F3AAC8259D1}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.BINDPTR')]
  DNComTypes_BINDPTR = interface(DNValueType)
  ['{81E3F13E-7E40-365C-B2E2-4B93341D86A8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_BINDPTR = class(TDNGenericImport<DNComTypes_BINDPTRClass, DNComTypes_BINDPTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_CONNECTDATAClass = interface(DNValueTypeClass)
  ['{FAFF1732-9594-50DD-8240-54EEEF8D3E48}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.CONNECTDATA')]
  DNComTypes_CONNECTDATA = interface(DNValueType)
  ['{0CB2C84F-441C-3133-8751-5DDA51EB5DA8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_CONNECTDATA = class(TDNGenericImport<DNComTypes_CONNECTDATAClass, DNComTypes_CONNECTDATA>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_DISPPARAMSClass = interface(DNValueTypeClass)
  ['{734A1561-B689-5870-BBF1-9AF541416EEC}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.DISPPARAMS')]
  DNComTypes_DISPPARAMS = interface(DNValueType)
  ['{CD3563A9-ACFD-3F08-8BBA-00DB5FD44BCF}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_DISPPARAMS = class(TDNGenericImport<DNComTypes_DISPPARAMSClass, DNComTypes_DISPPARAMS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_ELEMDESCClass = interface(DNValueTypeClass)
  ['{B95BDEA9-6546-5BA2-AC86-4679D95C2CAF}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC')]
  DNComTypes_ELEMDESC = interface(DNValueType)
  ['{74106BEE-426F-3B1E-B2B2-FB2A76C84591}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_ELEMDESC = class(TDNGenericImport<DNComTypes_ELEMDESCClass, DNComTypes_ELEMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_ELEMDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{09058376-E77D-5DBC-8302-1E97F4EF65FE}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION')]
  DNComTypes_ELEMDESC_DESCUNION = interface(DNValueType)
  ['{01F42F89-DA1F-3DC6-A449-EA5847F4D27F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_ELEMDESC_DESCUNION = class(TDNGenericImport<DNComTypes_ELEMDESC_DESCUNIONClass, DNComTypes_ELEMDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_EXCEPINFOClass = interface(DNValueTypeClass)
  ['{063C5D2A-60C0-55B6-889D-FBD95481E3F4}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.EXCEPINFO')]
  DNComTypes_EXCEPINFO = interface(DNValueType)
  ['{16971614-0313-36C1-9272-901297BE6DAE}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_EXCEPINFO = class(TDNGenericImport<DNComTypes_EXCEPINFOClass, DNComTypes_EXCEPINFO>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_FILETIMEClass = interface(DNValueTypeClass)
  ['{1934D230-B695-57C6-BC7B-DA830B80AD61}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.FILETIME')]
  DNComTypes_FILETIME = interface(DNValueType)
  ['{4224C3F0-69C7-3076-A4A0-4F3B581C0EFC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_FILETIME = class(TDNGenericImport<DNComTypes_FILETIMEClass, DNComTypes_FILETIME>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_FUNCDESCClass = interface(DNValueTypeClass)
  ['{8B2FB254-DCFE-5E8D-8359-0E544C95F98C}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCDESC')]
  DNComTypes_FUNCDESC = interface(DNValueType)
  ['{23F7CBB6-C88B-37BE-BE71-01F49C8E5C5F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_FUNCDESC = class(TDNGenericImport<DNComTypes_FUNCDESCClass, DNComTypes_FUNCDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_IDLDESCClass = interface(DNValueTypeClass)
  ['{5B6AA358-EF45-5559-B38F-D548C2CC6A82}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLDESC')]
  DNComTypes_IDLDESC = interface(DNValueType)
  ['{1B4D3F24-53B7-3567-B133-BC37EEDADF89}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_IDLDESC = class(TDNGenericImport<DNComTypes_IDLDESCClass, DNComTypes_IDLDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_PARAMDESCClass = interface(DNValueTypeClass)
  ['{20E3B13F-5FEE-5E7F-8C7F-AB1DEFCAD03F}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMDESC')]
  DNComTypes_PARAMDESC = interface(DNValueType)
  ['{5B668873-9A1A-3784-AD5D-389280196213}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_PARAMDESC = class(TDNGenericImport<DNComTypes_PARAMDESCClass, DNComTypes_PARAMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_STATSTGClass = interface(DNValueTypeClass)
  ['{39F187A1-DE2F-53D2-AB8E-178AABC3F94C}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.STATSTG')]
  DNComTypes_STATSTG = interface(DNValueType)
  ['{01DCF150-4B5A-3327-A05D-2E7F22743CDC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_STATSTG = class(TDNGenericImport<DNComTypes_STATSTGClass, DNComTypes_STATSTG>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_TYPEATTRClass = interface(DNValueTypeClass)
  ['{43024942-8278-5341-A429-1F6030157754}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEATTR')]
  DNComTypes_TYPEATTR = interface(DNValueType)
  ['{FF962CD8-46B5-3665-93D6-E1EAB8BAFB33}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_TYPEATTR = class(TDNGenericImport<DNComTypes_TYPEATTRClass, DNComTypes_TYPEATTR>)
  public const
   MEMBER_ID_NIL = -1;
  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_TYPEDESCClass = interface(DNValueTypeClass)
  ['{7943FAB7-FCC9-5B60-B04F-D09C78BD3A3C}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEDESC')]
  DNComTypes_TYPEDESC = interface(DNValueType)
  ['{8E485973-B992-30A6-9D31-814E602AF4A9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_TYPEDESC = class(TDNGenericImport<DNComTypes_TYPEDESCClass, DNComTypes_TYPEDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_TYPELIBATTRClass = interface(DNValueTypeClass)
  ['{4AD480E4-81AB-54A8-A326-335FEAAF7F77}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPELIBATTR')]
  DNComTypes_TYPELIBATTR = interface(DNValueType)
  ['{F21A7681-7E4A-3FC7-ADD9-C946C3593C2B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_TYPELIBATTR = class(TDNGenericImport<DNComTypes_TYPELIBATTRClass, DNComTypes_TYPELIBATTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_VARDESCClass = interface(DNValueTypeClass)
  ['{B9F8D94C-97FE-5AE8-83EA-A0DD4E741394}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC')]
  DNComTypes_VARDESC = interface(DNValueType)
  ['{D93D82E8-5E94-3228-9716-0E870F63E63B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_VARDESC = class(TDNGenericImport<DNComTypes_VARDESCClass, DNComTypes_VARDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNComTypes_VARDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{0C47D51E-D3BD-5A29-93C2-37B4797A776C}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION')]
  DNComTypes_VARDESC_DESCUNION = interface(DNValueType)
  ['{5389D117-E279-3350-8ECE-C0081D394DEA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComTypes_VARDESC_DESCUNION = class(TDNGenericImport<DNComTypes_VARDESC_DESCUNIONClass, DNComTypes_VARDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_CONNECTDATAClass = interface(DNValueTypeClass)
  ['{1762DF87-5669-53A5-A856-278D2EF9E7D5}']
  end;

  [DNTypeName('System.Runtime.InteropServices.CONNECTDATA')]
  DNInteropServices_CONNECTDATA = interface(DNValueType)
  ['{BE84D601-56D4-399B-8672-05D6E23BF1C0}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_CONNECTDATA = class(TDNGenericImport<DNInteropServices_CONNECTDATAClass, DNInteropServices_CONNECTDATA>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_DISPPARAMSClass = interface(DNValueTypeClass)
  ['{7AAFAE1B-2673-5853-8033-823F19C4EAB4}']
  end;

  [DNTypeName('System.Runtime.InteropServices.DISPPARAMS')]
  DNInteropServices_DISPPARAMS = interface(DNValueType)
  ['{B2D19783-7787-3595-90BA-9E7BA1195808}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_DISPPARAMS = class(TDNGenericImport<DNInteropServices_DISPPARAMSClass, DNInteropServices_DISPPARAMS>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_ELEMDESCClass = interface(DNValueTypeClass)
  ['{C2CCEE7D-EA1B-5327-B1AE-1345078403E2}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ELEMDESC')]
  DNInteropServices_ELEMDESC = interface(DNValueType)
  ['{1DB3807C-5B42-3927-BD3F-3C82C9C88256}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_ELEMDESC = class(TDNGenericImport<DNInteropServices_ELEMDESCClass, DNInteropServices_ELEMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_ELEMDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{A259C983-78CA-5013-A28D-C0E5CA6A4EAE}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ELEMDESC+DESCUNION')]
  DNInteropServices_ELEMDESC_DESCUNION = interface(DNValueType)
  ['{F376E5E7-2DDA-3F74-97C3-0695A67F3F19}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_ELEMDESC_DESCUNION = class(TDNGenericImport<DNInteropServices_ELEMDESC_DESCUNIONClass, DNInteropServices_ELEMDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_EXCEPINFOClass = interface(DNValueTypeClass)
  ['{9C5B6B38-33A2-5A14-A0BE-0B788079AA51}']
  end;

  [DNTypeName('System.Runtime.InteropServices.EXCEPINFO')]
  DNInteropServices_EXCEPINFO = interface(DNValueType)
  ['{71B0E837-5D3E-33AF-BAFE-218EBF533A2E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_EXCEPINFO = class(TDNGenericImport<DNInteropServices_EXCEPINFOClass, DNInteropServices_EXCEPINFO>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_FILETIMEClass = interface(DNValueTypeClass)
  ['{8792E6D3-F586-586D-BEA9-810BFDC5269D}']
  end;

  [DNTypeName('System.Runtime.InteropServices.FILETIME')]
  DNInteropServices_FILETIME = interface(DNValueType)
  ['{1D90B2BD-2A28-3A8A-9506-B3AA2CBE5067}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_FILETIME = class(TDNGenericImport<DNInteropServices_FILETIMEClass, DNInteropServices_FILETIME>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_FUNCDESCClass = interface(DNValueTypeClass)
  ['{E5562FD0-09B4-531E-BE8E-6032695EC34E}']
  end;

  [DNTypeName('System.Runtime.InteropServices.FUNCDESC')]
  DNInteropServices_FUNCDESC = interface(DNValueType)
  ['{C4E343BB-8828-3E79-A712-3F84CDC2BD90}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_FUNCDESC = class(TDNGenericImport<DNInteropServices_FUNCDESCClass, DNInteropServices_FUNCDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGCHandleClass = interface(DNValueTypeClass)
  ['{B7CCF176-FD63-5266-AE33-797E0EFD155C}']
  { static methods } 

    {class} function Alloc(value: DNObject): DNGCHandle; overload;
    {class} function Alloc(value: DNObject; &type: DNGCHandleType): DNGCHandle; overload;
    {class} function FromIntPtr(value: IntPtr): DNGCHandle;
    {class} function ToIntPtr(value: DNGCHandle): IntPtr;

  end;

  [DNTypeName('System.Runtime.InteropServices.GCHandle')]
  DNGCHandle = interface(DNValueType)
  ['{66E1F723-E57F-35CE-8306-3C09FB68A322}']
  { getters & setters } 

    function get_Target: DNObject;
    procedure set_Target(value: DNObject);
    function get_IsAllocated: Boolean;

  { methods } 

    procedure Free;
    function AddrOfPinnedObject: IntPtr;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Target: DNObject read get_Target write set_Target;
    property IsAllocated: Boolean read get_IsAllocated;
  end;

  TDNGCHandle = class(TDNGenericImport<DNGCHandleClass, DNGCHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNHandleRefClass = interface(DNValueTypeClass)
  ['{B56F48B4-2045-567E-9152-40431B31E2ED}']
  { constructors } 

    {class} function init(wrapper: DNObject; handle: IntPtr): DNHandleRef;

  { static methods } 

    {class} function ToIntPtr(value: DNHandleRef): IntPtr;

  end;

  [DNTypeName('System.Runtime.InteropServices.HandleRef')]
  DNHandleRef = interface(DNValueType)
  ['{C71DCE2B-B87F-37A9-89ED-F1145955BCD6}']
  { getters & setters } 

    function get_Wrapper: DNObject;
    function get_Handle: IntPtr;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Wrapper: DNObject read get_Wrapper;
    property Handle: IntPtr read get_Handle;
  end;

  TDNHandleRef = class(TDNGenericImport<DNHandleRefClass, DNHandleRef>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_IDLDESCClass = interface(DNValueTypeClass)
  ['{66996100-2386-537B-BFEE-8B02DC369E87}']
  end;

  [DNTypeName('System.Runtime.InteropServices.IDLDESC')]
  DNInteropServices_IDLDESC = interface(DNValueType)
  ['{C216B21B-CDF3-30CF-943F-19D7F3958D50}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_IDLDESC = class(TDNGenericImport<DNInteropServices_IDLDESCClass, DNInteropServices_IDLDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOSPlatformClass = interface(DNValueTypeClass)
  ['{A62AAFF7-5BEF-590B-BD46-2A0C9E2CEF79}']
  { static getter & setter } 

    {class} function get_Linux: DNOSPlatform;
    {class} function get_OSX: DNOSPlatform;
    {class} function get_Windows: DNOSPlatform;

  { static methods } 

    {class} function Create(osPlatform: string): DNOSPlatform;

  { static propertys } 

    {class} property Linux: DNOSPlatform read get_Linux;
    {class} property OSX: DNOSPlatform read get_OSX;
    {class} property Windows: DNOSPlatform read get_Windows;
  end;

  [DNTypeName('System.Runtime.InteropServices.OSPlatform')]
  DNOSPlatform = interface(DNValueType)
  ['{E1F1FDA8-2B80-3CE1-A8D5-8994E86CBECB}']
  { methods } 

    function Equals(other: DNOSPlatform): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNOSPlatform = class(TDNGenericImport<DNOSPlatformClass, DNOSPlatform>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_PARAMDESCClass = interface(DNValueTypeClass)
  ['{6FA9CB33-EFE9-569B-A214-9C9FACEACFC7}']
  end;

  [DNTypeName('System.Runtime.InteropServices.PARAMDESC')]
  DNInteropServices_PARAMDESC = interface(DNValueType)
  ['{96A49179-5103-3375-B37A-C0BA22862D12}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_PARAMDESC = class(TDNGenericImport<DNInteropServices_PARAMDESCClass, DNInteropServices_PARAMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_STATSTGClass = interface(DNValueTypeClass)
  ['{8D28615F-56D3-5A29-A0A1-F04719D110CF}']
  end;

  [DNTypeName('System.Runtime.InteropServices.STATSTG')]
  DNInteropServices_STATSTG = interface(DNValueType)
  ['{F7933E5D-9C90-36B0-9C7B-4225E42E92B6}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_STATSTG = class(TDNGenericImport<DNInteropServices_STATSTGClass, DNInteropServices_STATSTG>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_TYPEATTRClass = interface(DNValueTypeClass)
  ['{CA09EC1C-A4D3-53F2-A11F-CEEF3A04504B}']
  end;

  [DNTypeName('System.Runtime.InteropServices.TYPEATTR')]
  DNInteropServices_TYPEATTR = interface(DNValueType)
  ['{471089CB-AC5A-33F7-9E0A-76CFECE9D223}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_TYPEATTR = class(TDNGenericImport<DNInteropServices_TYPEATTRClass, DNInteropServices_TYPEATTR>)
  public const
   MEMBER_ID_NIL = -1;
  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_TYPEDESCClass = interface(DNValueTypeClass)
  ['{F78C8402-7BD0-56A7-A3B4-C86C1CBA0DE7}']
  end;

  [DNTypeName('System.Runtime.InteropServices.TYPEDESC')]
  DNInteropServices_TYPEDESC = interface(DNValueType)
  ['{6527CB57-D7F4-3B86-B11A-C213F8E493CA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_TYPEDESC = class(TDNGenericImport<DNInteropServices_TYPEDESCClass, DNInteropServices_TYPEDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_TYPELIBATTRClass = interface(DNValueTypeClass)
  ['{AA117197-BC6F-533D-8E25-0E0A813C60CD}']
  end;

  [DNTypeName('System.Runtime.InteropServices.TYPELIBATTR')]
  DNInteropServices_TYPELIBATTR = interface(DNValueType)
  ['{B5C27B9A-F1C1-3AAD-B66F-6F60249C048D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_TYPELIBATTR = class(TDNGenericImport<DNInteropServices_TYPELIBATTRClass, DNInteropServices_TYPELIBATTR>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_VARDESCClass = interface(DNValueTypeClass)
  ['{819EC63A-925A-514A-A069-58710E0EB616}']
  end;

  [DNTypeName('System.Runtime.InteropServices.VARDESC')]
  DNInteropServices_VARDESC = interface(DNValueType)
  ['{B01CE747-F3BA-3778-A886-20526DE1F9A1}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_VARDESC = class(TDNGenericImport<DNInteropServices_VARDESCClass, DNInteropServices_VARDESC>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInteropServices_VARDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{225D5253-0A04-58E9-B11A-CBB7C8BE5679}']
  end;

  [DNTypeName('System.Runtime.InteropServices.VARDESC+DESCUNION')]
  DNInteropServices_VARDESC_DESCUNION = interface(DNValueType)
  ['{2547112D-39B6-3C5A-84DE-84F04DDC2E4D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInteropServices_VARDESC_DESCUNION = class(TDNGenericImport<DNInteropServices_VARDESC_DESCUNIONClass, DNInteropServices_VARDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNEventRegistrationTokenClass = interface(DNValueTypeClass)
  ['{2FA0634C-919A-50A6-BAE1-ED5A0DCA0AA3}']
  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken')]
  DNEventRegistrationToken = interface(DNValueType)
  ['{9DA1B309-12F7-3993-8ACA-2327DEA35380}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNEventRegistrationToken = class(TDNGenericImport<DNEventRegistrationTokenClass, DNEventRegistrationToken>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationEntryClass = interface(DNValueTypeClass)
  ['{06A6BC63-ACD3-514E-9C9E-E44EA466D0CF}']
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationEntry')]
  DNSerializationEntry = interface(DNValueType)
  ['{3642E7ED-5A69-3A94-98D3-A08877A0D046}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_Name: string;
    function get_ObjectType: DNType;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: DNObject read get_Value;
    property Name: string read get_Name;
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationEntry = class(TDNGenericImport<DNSerializationEntryClass, DNSerializationEntry>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNStreamingContextClass = interface(DNValueTypeClass)
  ['{2307BCCB-84CD-5942-AFC1-9735B316729F}']
  { constructors } 

    {class} function init(state: DNStreamingContextStates): DNStreamingContext; overload;
    {class} function init(state: DNStreamingContextStates; additional: DNObject): DNStreamingContext; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.StreamingContext')]
  DNStreamingContext = interface(DNValueType)
  ['{79179AA0-E14C-35EA-A666-66BE968AF69F}']
  { getters & setters } 

    function get_Context: DNObject;
    function get_State: DNStreamingContextStates;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Context: DNObject read get_Context;
    property State: DNStreamingContextStates read get_State;
  end;

  TDNStreamingContext = class(TDNGenericImport<DNStreamingContextClass, DNStreamingContext>) end;

  //-------------namespace: System----------------
  DNRuntimeArgumentHandleClass = interface(DNValueTypeClass)
  ['{92A0154A-93C5-52F6-8A4E-BD4E659993A1}']
  end;

  [DNTypeName('System.RuntimeArgumentHandle')]
  DNRuntimeArgumentHandle = interface(DNValueType)
  ['{3613A9B6-C23B-3B54-AE02-6EC764D69E70}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRuntimeArgumentHandle = class(TDNGenericImport<DNRuntimeArgumentHandleClass, DNRuntimeArgumentHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeFieldHandleClass = interface(DNValueTypeClass)
  ['{FDD8B542-4CA6-5FCA-8C94-C523368E86F0}']
  end;

  [DNTypeName('System.RuntimeFieldHandle')]
  DNRuntimeFieldHandle = interface(DNValueType)
  ['{27B33BD9-E6F7-3148-911D-F67340A5353F}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeFieldHandle): Boolean; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeFieldHandle = class(TDNGenericImport<DNRuntimeFieldHandleClass, DNRuntimeFieldHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeMethodHandleClass = interface(DNValueTypeClass)
  ['{C6F4C947-FCA8-51E6-9F46-D84819B89EF7}']
  end;

  [DNTypeName('System.RuntimeMethodHandle')]
  DNRuntimeMethodHandle = interface(DNValueType)
  ['{F8FC5D7C-8215-3E65-BEFB-11E8172606FE}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    function GetFunctionPointer: IntPtr;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeMethodHandle): Boolean; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeMethodHandle = class(TDNGenericImport<DNRuntimeMethodHandleClass, DNRuntimeMethodHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeTypeHandleClass = interface(DNValueTypeClass)
  ['{185C1EF1-99E2-5046-98B5-03386E9BF693}']
  end;

  [DNTypeName('System.RuntimeTypeHandle')]
  DNRuntimeTypeHandle = interface(DNValueType)
  ['{78C18A10-C00E-3C09-B000-411C38900C2C}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    function GetHashCode: Int32;
    function Equals(handle: DNRuntimeTypeHandle): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetModuleHandle: DNModuleHandle;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeTypeHandle = class(TDNGenericImport<DNRuntimeTypeHandleClass, DNRuntimeTypeHandle>) end;

  //-------------namespace: System----------------
  DNSByteClass = interface(DNValueTypeClass)
  ['{C0E4EE4F-BFB8-5670-86A8-DF5BF902DE69}']
  { static methods } 

    {class} function Parse(s: string): SByte; overload;
    {class} function Parse(s: string; style: DNNumberStyles): SByte; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): SByte; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): SByte; overload;
    {class} function TryParse(s: string; out result: SByte): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: SByte): Boolean; overload;

  end;

  [DNTypeName('System.SByte')]
  DNSByte = interface(DNValueType)
  ['{CA2BCDB4-3A7E-33E8-80ED-D32475ADEF33}']
  { methods } 

    function ToString: string; overload;
    function CompareTo(obj: DNObject): Int32; overload;
    function CompareTo(value: SByte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: SByte): Boolean; overload;
    function GetHashCode: Int32;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNSByte = class(TDNGenericImport<DNSByteClass, DNSByte>)
  public const
   MaxValue = 127;
   MinValue = -128;
  end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSAParametersClass = interface(DNValueTypeClass)
  ['{F74FFE3F-C018-5E03-9017-DCC7F03F9298}']
  end;

  [DNTypeName('System.Security.Cryptography.DSAParameters')]
  DNDSAParameters = interface(DNValueType)
  ['{0C646F46-AA27-350D-88DD-D8C920CE6C2D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDSAParameters = class(TDNGenericImport<DNDSAParametersClass, DNDSAParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNHashAlgorithmNameClass = interface(DNValueTypeClass)
  ['{A0A24DCA-42C6-54E5-A777-55095C9F3A2D}']
  { static getter & setter } 

    {class} function get_MD5: DNHashAlgorithmName;
    {class} function get_SHA1: DNHashAlgorithmName;
    {class} function get_SHA256: DNHashAlgorithmName;
    {class} function get_SHA384: DNHashAlgorithmName;
    {class} function get_SHA512: DNHashAlgorithmName;

  { constructors } 

    {class} function init(name: string): DNHashAlgorithmName;

  { static propertys } 

    {class} property MD5: DNHashAlgorithmName read get_MD5;
    {class} property SHA1: DNHashAlgorithmName read get_SHA1;
    {class} property SHA256: DNHashAlgorithmName read get_SHA256;
    {class} property SHA384: DNHashAlgorithmName read get_SHA384;
    {class} property SHA512: DNHashAlgorithmName read get_SHA512;
  end;

  [DNTypeName('System.Security.Cryptography.HashAlgorithmName')]
  DNHashAlgorithmName = interface(DNValueType)
  ['{E4924CAF-7DC5-33C0-BE11-F1940CF41D14}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNHashAlgorithmName): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
  end;

  TDNHashAlgorithmName = class(TDNGenericImport<DNHashAlgorithmNameClass, DNHashAlgorithmName>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSAParametersClass = interface(DNValueTypeClass)
  ['{031F278C-B825-5176-8741-419F4198BFC0}']
  end;

  [DNTypeName('System.Security.Cryptography.RSAParameters')]
  DNRSAParameters = interface(DNValueType)
  ['{094E9135-483D-334A-AAE7-8690895AB70A}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRSAParameters = class(TDNGenericImport<DNRSAParametersClass, DNRSAParameters>) end;

  //-------------namespace: System----------------
  DNSingleClass = interface(DNValueTypeClass)
  ['{04EA3D79-2779-59F5-A103-91A883E4FFCA}']
  { static methods } 

    {class} function IsInfinity(f: Single): Boolean;
    {class} function IsPositiveInfinity(f: Single): Boolean;
    {class} function IsNegativeInfinity(f: Single): Boolean;
    {class} function IsNaN(f: Single): Boolean;
    {class} function Parse(s: string): Single; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Single; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Single; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Single; overload;
    {class} function TryParse(s: string; out result: Single): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Single): Boolean; overload;

  end;

  [DNTypeName('System.Single')]
  DNSingle = interface(DNValueType)
  ['{23D4A35B-C997-3401-8372-736025B17744}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Single): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Single): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNSingle = class(TDNGenericImport<DNSingleClass, DNSingle>)
  public const
   MinValue = -3.402823E+38;
   Epsilon = 1.401298E-45;
   MaxValue = 3.402823E+38;
  end;

  //-------------namespace: System.Threading----------------
  DNAsyncFlowControlClass = interface(DNValueTypeClass)
  ['{DBBF4184-0641-5F52-BC4F-F5969AE1C909}']
  end;

  [DNTypeName('System.Threading.AsyncFlowControl')]
  DNAsyncFlowControl = interface(DNValueType)
  ['{6AAAE08D-777C-356A-984D-08D14C40BF8A}']
  { methods } 

    procedure Dispose;
    procedure Undo;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNAsyncFlowControl): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAsyncFlowControl = class(TDNGenericImport<DNAsyncFlowControlClass, DNAsyncFlowControl>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncLocalValueChangedArgsClass<T> = interface(DNValueTypeClass)
  ['{EC4F4817-B2FA-50DE-875E-90D252D68046}']
  end;

  [DNTypeName('System.Threading.AsyncLocalValueChangedArgs`1')]
  DNAsyncLocalValueChangedArgs<T> = interface(DNValueType)
  ['{0B22A134-96C4-34C6-8062-0773981F730E}']
  { getters & setters } 

    function get_PreviousValue: T;
    function get_CurrentValue: T;
    function get_ThreadContextChanged: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property PreviousValue: T read get_PreviousValue;
    property CurrentValue: T read get_CurrentValue;
    property ThreadContextChanged: Boolean read get_ThreadContextChanged;
  end;

  TDNAsyncLocalValueChangedArgs<T> = class(TDNGenericImport<DNAsyncLocalValueChangedArgsClass<T>, DNAsyncLocalValueChangedArgs<T>>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenClass = interface(DNValueTypeClass)
  ['{0BD6F765-61C6-5D66-8C41-5706D372B9C8}']
  { static getter & setter } 

    {class} function get_None: DNCancellationToken;

  { constructors } 

    {class} function init(canceled: Boolean): DNCancellationToken;

  { static propertys } 

    {class} property None: DNCancellationToken read get_None;
  end;

  [DNTypeName('System.Threading.CancellationToken')]
  DNCancellationToken = interface(DNValueType)
  ['{443A091C-ADDB-3F3C-A4E5-3D223ADE21B3}']
  { getters & setters } 

    function get_IsCancellationRequested: Boolean;
    function get_CanBeCanceled: Boolean;
    function get_WaitHandle: DNWaitHandle;

  { methods } 

    function &Register(callback: DNAction): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction; useSynchronizationContext: Boolean): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction<DNObject>; state: DNObject): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction<DNObject>; state: DNObject; useSynchronizationContext: Boolean): DNCancellationTokenRegistration; overload;
    function Equals(other: DNCancellationToken): Boolean; overload;
    function Equals(other: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    procedure ThrowIfCancellationRequested;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    property CanBeCanceled: Boolean read get_CanBeCanceled;
    property WaitHandle: DNWaitHandle read get_WaitHandle;
  end;

  TDNCancellationToken = class(TDNGenericImport<DNCancellationTokenClass, DNCancellationToken>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenRegistrationClass = interface(DNValueTypeClass)
  ['{AE8D590E-131C-59A9-8A3C-77DEE66AD04C}']
  end;

  [DNTypeName('System.Threading.CancellationTokenRegistration')]
  DNCancellationTokenRegistration = interface(DNValueType)
  ['{BA50F3F1-33BE-35B7-A180-B930A4279A97}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNCancellationTokenRegistration): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNCancellationTokenRegistration = class(TDNGenericImport<DNCancellationTokenRegistrationClass, DNCancellationTokenRegistration>) end;

  //-------------namespace: System.Threading----------------
  DNLockCookieClass = interface(DNValueTypeClass)
  ['{7F16D5A4-4127-5D0E-8ADD-6834C202E721}']
  end;

  [DNTypeName('System.Threading.LockCookie')]
  DNLockCookie = interface(DNValueType)
  ['{BA0E4CF7-A429-3FE8-ABAB-183387D05852}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNLockCookie): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNLockCookie = class(TDNGenericImport<DNLockCookieClass, DNLockCookie>) end;

  //-------------namespace: System.Threading----------------
  DNNativeOverlappedClass = interface(DNValueTypeClass)
  ['{9B6BA52E-8166-524A-A63C-7C63B1AEBBF5}']
  end;

  [DNTypeName('System.Threading.NativeOverlapped')]
  DNNativeOverlapped = interface(DNValueType)
  ['{A2959123-2F66-35B4-815D-37C83360809B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNNativeOverlapped = class(TDNGenericImport<DNNativeOverlappedClass, DNNativeOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNSpinLockClass = interface(DNValueTypeClass)
  ['{2600A5A2-D092-5E9D-BD2B-348A6AECE12D}']
  { constructors } 

    {class} function init(enableThreadOwnerTracking: Boolean): DNSpinLock;

  end;

  [DNTypeName('System.Threading.SpinLock')]
  DNSpinLock = interface(DNValueType)
  ['{FD703E79-2BC6-3F00-8840-D79214A53AD9}']
  { getters & setters } 

    function get_IsHeld: Boolean;
    function get_IsHeldByCurrentThread: Boolean;
    function get_IsThreadOwnerTrackingEnabled: Boolean;

  { methods } 

    procedure Enter(out lockTaken: Boolean);
    procedure TryEnter(out lockTaken: Boolean); overload;
    procedure TryEnter(timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    procedure TryEnter(millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    procedure &Exit; overload;
    procedure &Exit(useMemoryBarrier: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsHeld: Boolean read get_IsHeld;
    property IsHeldByCurrentThread: Boolean read get_IsHeldByCurrentThread;
    property IsThreadOwnerTrackingEnabled: Boolean read get_IsThreadOwnerTrackingEnabled;
  end;

  TDNSpinLock = class(TDNGenericImport<DNSpinLockClass, DNSpinLock>) end;

  //-------------namespace: System.Threading----------------
  DNSpinWaitClass = interface(DNValueTypeClass)
  ['{2C741B35-E579-5B2D-97DC-5F6481FDDCB7}']
  { static methods } 

    {class} procedure SpinUntil(condition: DNFunc<Boolean>); overload;
    {class} function SpinUntil(condition: DNFunc<Boolean>; timeout: DNTimeSpan): Boolean; overload;
    {class} function SpinUntil(condition: DNFunc<Boolean>; millisecondsTimeout: Int32): Boolean; overload;

  end;

  [DNTypeName('System.Threading.SpinWait')]
  DNSpinWait = interface(DNValueType)
  ['{70121822-4C0A-386B-814A-D3B1819A95D7}']
  { getters & setters } 

    function get_Count: Int32;
    function get_NextSpinWillYield: Boolean;

  { methods } 

    procedure SpinOnce;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property NextSpinWillYield: Boolean read get_NextSpinWillYield;
  end;

  TDNSpinWait = class(TDNGenericImport<DNSpinWaitClass, DNSpinWait>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNParallelLoopResultClass = interface(DNValueTypeClass)
  ['{1DF8B335-3056-5D50-A348-802D9C9B697B}']
  end;

  [DNTypeName('System.Threading.Tasks.ParallelLoopResult')]
  DNParallelLoopResult = interface(DNValueType)
  ['{4DB552D1-9A29-3F8E-907D-F42A125DB565}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_LowestBreakIteration: DNNullable<Int64>;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property LowestBreakIteration: DNNullable<Int64> read get_LowestBreakIteration;
  end;

  TDNParallelLoopResult = class(TDNGenericImport<DNParallelLoopResultClass, DNParallelLoopResult>) end;

  //-------------namespace: System----------------
  DNTimeSpanClass = interface(DNValueTypeClass)
  ['{21DFC616-BF2D-5A87-829F-E64B1161BC19}']
  { constructors } 

    {class} function init(ticks: Int64): DNTimeSpan; overload;
    {class} function init(hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32; milliseconds: Int32): DNTimeSpan; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: DNTimeSpan;
   function __fakeFieldGet_MaxValue: DNTimeSpan;
   function __fakeFieldGet_MinValue: DNTimeSpan;

  { static fields } 

    {class} property Zero: DNTimeSpan read __fakeFieldGet_Zero;
    {class} property MaxValue: DNTimeSpan read __fakeFieldGet_MaxValue;
    {class} property MinValue: DNTimeSpan read __fakeFieldGet_MinValue;

  { static methods } 

    {class} function Compare(t1: DNTimeSpan; t2: DNTimeSpan): Int32;
    {class} function FromDays(value: Double): DNTimeSpan;
    {class} function Equals(t1: DNTimeSpan; t2: DNTimeSpan): Boolean; overload;
    {class} function FromHours(value: Double): DNTimeSpan;
    {class} function FromMilliseconds(value: Double): DNTimeSpan;
    {class} function FromMinutes(value: Double): DNTimeSpan;
    {class} function FromSeconds(value: Double): DNTimeSpan;
    {class} function FromTicks(value: Int64): DNTimeSpan;
    {class} function Parse(s: string): DNTimeSpan; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function TryParse(s: string; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;

  end;

  [DNTypeName('System.TimeSpan')]
  DNTimeSpan = interface(DNValueType)
  ['{94942670-4ACF-3572-92D1-0916CD777E00}']
  { getters & setters } 

    function get_Ticks: Int64;
    function get_Days: Int32;
    function get_Hours: Int32;
    function get_Milliseconds: Int32;
    function get_Minutes: Int32;
    function get_Seconds: Int32;
    function get_TotalDays: Double;
    function get_TotalHours: Double;
    function get_TotalMilliseconds: Double;
    function get_TotalMinutes: Double;
    function get_TotalSeconds: Double;

  { methods } 

    function Add(ts: DNTimeSpan): DNTimeSpan;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNTimeSpan): Int32; overload;
    function Duration: DNTimeSpan;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(obj: DNTimeSpan): Boolean; overload;
    function GetHashCode: Int32;
    function Negate: DNTimeSpan;
    function Subtract(ts: DNTimeSpan): DNTimeSpan;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  { propertys } 

    property Ticks: Int64 read get_Ticks;
    property Days: Int32 read get_Days;
    property Hours: Int32 read get_Hours;
    property Milliseconds: Int32 read get_Milliseconds;
    property Minutes: Int32 read get_Minutes;
    property Seconds: Int32 read get_Seconds;
    property TotalDays: Double read get_TotalDays;
    property TotalHours: Double read get_TotalHours;
    property TotalMilliseconds: Double read get_TotalMilliseconds;
    property TotalMinutes: Double read get_TotalMinutes;
    property TotalSeconds: Double read get_TotalSeconds;
  end;

  TDNTimeSpan = class(TDNGenericImport<DNTimeSpanClass, DNTimeSpan>)
  public const
   TicksPerMillisecond = 10000;
   TicksPerSecond = 10000000;
   TicksPerMinute = 600000000;
   TicksPerHour = 36000000000;
   TicksPerDay = 864000000000;
  end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_TransitionTimeClass = interface(DNValueTypeClass)
  ['{FA5ED9AC-D81E-534B-91AA-D740CB32C9D4}']
  { static methods } 

    {class} function CreateFixedDateRule(timeOfDay: DNDateTime; month: Int32; day: Int32): DNTimeZoneInfo_TransitionTime;
    {class} function CreateFloatingDateRule(timeOfDay: DNDateTime; month: Int32; week: Int32; dayOfWeek: DNDayOfWeek): DNTimeZoneInfo_TransitionTime;

  end;

  [DNTypeName('System.TimeZoneInfo+TransitionTime')]
  DNTimeZoneInfo_TransitionTime = interface(DNValueType)
  ['{FD84B7A6-60CC-3B02-AA9C-DAE953B4C8DD}']
  { getters & setters } 

    function get_TimeOfDay: DNDateTime;
    function get_Month: Int32;
    function get_Week: Int32;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_IsFixedDateRule: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNTimeZoneInfo_TransitionTime): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TimeOfDay: DNDateTime read get_TimeOfDay;
    property Month: Int32 read get_Month;
    property Week: Int32 read get_Week;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property IsFixedDateRule: Boolean read get_IsFixedDateRule;
  end;

  TDNTimeZoneInfo_TransitionTime = class(TDNGenericImport<DNTimeZoneInfo_TransitionTimeClass, DNTimeZoneInfo_TransitionTime>) end;

  //-------------namespace: System----------------
  DNTypedReferenceClass = interface(DNValueTypeClass)
  ['{6D41E735-328A-594C-BB1D-FB8658B18B29}']
  { static methods } 

    {class} function MakeTypedReference(target: DNObject; flds: TArray<DNFieldInfo>): DNTypedReference;
    {class} function ToObject(value: DNTypedReference): DNObject;
    {class} function GetTargetType(value: DNTypedReference): DNType;
    {class} function TargetTypeToken(value: DNTypedReference): DNRuntimeTypeHandle;
    {class} procedure SetTypedReference(target: DNTypedReference; value: DNObject);

  end;

  [DNTypeName('System.TypedReference')]
  DNTypedReference = interface(DNValueType)
  ['{06AD02B5-C5A4-3EEC-B7BA-B0AF7860D36A}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTypedReference = class(TDNGenericImport<DNTypedReferenceClass, DNTypedReference>) end;

  //-------------namespace: System----------------
  DNUInt16Class = interface(DNValueTypeClass)
  ['{49AFCC11-D7AD-51A9-B665-E1D7F997176B}']
  { static methods } 

    {class} function Parse(s: string): UInt16; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt16; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt16; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt16; overload;
    {class} function TryParse(s: string; out result: UInt16): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt16): Boolean; overload;

  end;

  [DNTypeName('System.UInt16')]
  DNUInt16 = interface(DNValueType)
  ['{0F0928B7-11DD-31DD-A0D5-BB008AE887BF}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt16): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt16): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt16 = class(TDNGenericImport<DNUInt16Class, DNUInt16>)
  public const
   MaxValue = 65535;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUInt32Class = interface(DNValueTypeClass)
  ['{8A91158D-076F-51F7-A034-F608BC561F43}']
  { static methods } 

    {class} function Parse(s: string): UInt32; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt32; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt32; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt32; overload;
    {class} function TryParse(s: string; out result: UInt32): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt32): Boolean; overload;

  end;

  [DNTypeName('System.UInt32')]
  DNUInt32 = interface(DNValueType)
  ['{4F854E40-AF6D-3D30-860A-E9722C85E9A3}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt32): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt32): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt32 = class(TDNGenericImport<DNUInt32Class, DNUInt32>)
  public const
   MaxValue = 4294967295;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUInt64Class = interface(DNValueTypeClass)
  ['{A7582FF5-861C-5744-BC04-2A2F6C00F4CF}']
  { static methods } 

    {class} function Parse(s: string): UInt64; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt64; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt64; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt64; overload;
    {class} function TryParse(s: string; out result: UInt64): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt64): Boolean; overload;

  end;

  [DNTypeName('System.UInt64')]
  DNUInt64 = interface(DNValueType)
  ['{62AD7D6B-52CC-3ED4-A20D-1A32EF6BF1DA}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt64): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt64): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt64 = class(TDNGenericImport<DNUInt64Class, DNUInt64>)
  public const
   MaxValue = 18446744073709551615;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUIntPtrClass = interface(DNValueTypeClass)
  ['{6B4C7C49-196F-5AAE-B66B-250788779640}']
  { static getter & setter } 

    {class} function get_Size: Int32;

  { constructors } 

    {class} function init(value: UInt32): DNUIntPtr; overload;
    {class} function init(value: UInt64): DNUIntPtr; overload;
    {class} function init(var value: DNVoid): DNUIntPtr; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: UIntPtr;

  { static fields } 

    {class} property Zero: UIntPtr read __fakeFieldGet_Zero;

  { static methods } 

    {class} function Add(pointer: UIntPtr; offset: Int32): UIntPtr;
    {class} function Subtract(pointer: UIntPtr; offset: Int32): UIntPtr;

  { static propertys } 

    {class} property Size: Int32 read get_Size;
  end;

  [DNTypeName('System.UIntPtr')]
  DNUIntPtr = interface(DNValueType)
  ['{4F93B8DD-5396-3B65-B16A-11FBC8812A71}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToUInt32: UInt32;
    function ToUInt64: UInt64;
    function ToString: string;
    function ToPointer: DNVoid;
    function GetType: DNType;

  end;

  TDNUIntPtr = class(TDNGenericImport<DNUIntPtrClass, DNUIntPtr>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1> = interface(DNValueTypeClass)
  ['{59F27E11-A7E3-56D1-AD69-C210F8030EEC}']
  { constructors } 

    {class} function init(item1: T1): DNValueTuple<T1>;

  end;

  [DNTypeName('System.ValueTuple`1')]
  DNValueTuple<T1> = interface(DNValueType)
  ['{33E1853D-D007-39D9-821B-A64A51632C4E}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1> = class(TDNGenericImport<DNValueTupleClass<T1>, DNValueTuple<T1>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2> = interface(DNValueTypeClass)
  ['{C58A4DB5-1138-5C6A-A425-361A164A4C55}']
  { constructors } 

    {class} function init(item1: T1; item2: T2): DNValueTuple<T1, T2>;

  end;

  [DNTypeName('System.ValueTuple`2')]
  DNValueTuple<T1, T2> = interface(DNValueType)
  ['{4EF7A00E-CDEA-35B7-B21A-E9B5D6AE58A3}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2> = class(TDNGenericImport<DNValueTupleClass<T1, T2>, DNValueTuple<T1, T2>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3> = interface(DNValueTypeClass)
  ['{BECB5904-4A66-5E4F-B006-88E593C4F186}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3): DNValueTuple<T1, T2, T3>;

  end;

  [DNTypeName('System.ValueTuple`3')]
  DNValueTuple<T1, T2, T3> = interface(DNValueType)
  ['{ABF1B68B-7857-3D30-97C6-26A7B2092568}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3>, DNValueTuple<T1, T2, T3>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4> = interface(DNValueTypeClass)
  ['{CACFF09E-866E-5A85-A807-4FAA985FBEA2}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4): DNValueTuple<T1, T2, T3, T4>;

  end;

  [DNTypeName('System.ValueTuple`4')]
  DNValueTuple<T1, T2, T3, T4> = interface(DNValueType)
  ['{8C2B9CA9-2139-3FCC-8A92-91E92E5F1139}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4>, DNValueTuple<T1, T2, T3, T4>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5> = interface(DNValueTypeClass)
  ['{96EAB103-2A4D-5647-9F8B-F5331BA7FD96}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5): DNValueTuple<T1, T2, T3, T4, T5>;

  end;

  [DNTypeName('System.ValueTuple`5')]
  DNValueTuple<T1, T2, T3, T4, T5> = interface(DNValueType)
  ['{7C1D2772-92B6-3DB1-99B0-04057F914718}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5>, DNValueTuple<T1, T2, T3, T4, T5>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6> = interface(DNValueTypeClass)
  ['{3536A2CE-29D3-546A-82B1-245F33C4EB41}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6): DNValueTuple<T1, T2, T3, T4, T5, T6>;

  end;

  [DNTypeName('System.ValueTuple`6')]
  DNValueTuple<T1, T2, T3, T4, T5, T6> = interface(DNValueType)
  ['{B92AFC33-1C75-3ACA-B2E6-3109DF7649F9}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5, T6> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6>, DNValueTuple<T1, T2, T3, T4, T5, T6>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7> = interface(DNValueTypeClass)
  ['{D80D9DF8-B57D-5354-B963-4FFDB9FA83C0}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7): DNValueTuple<T1, T2, T3, T4, T5, T6, T7>;

  end;

  [DNTypeName('System.ValueTuple`7')]
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7> = interface(DNValueType)
  ['{58E935F7-DF2F-353E-822E-8DCB0E087F1E}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5, T6, T7> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7>, DNValueTuple<T1, T2, T3, T4, T5, T6, T7>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNValueTypeClass)
  ['{A85F55D7-01D4-5E6E-9E93-DD1649CCA66F}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7; rest: TRest): DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>;

  end;

  [DNTypeName('System.ValueTuple`8')]
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNValueType)
  ['{05E37379-B340-36FB-97E7-ADC15811C7C4}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest>, DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass = interface(DNValueTypeClass)
  ['{B734D39F-35B5-52A6-8E86-6736053B8451}']
  { static methods } 

    {class} function Create: DNValueTuple; overload;

  end;

  [DNTypeName('System.ValueTuple')]
  DNValueTuple = interface(DNValueType)
  ['{4AF8963C-B97C-35A2-BDB7-05DDD63741C7}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple): Boolean; overload;
    function CompareTo(other: DNValueTuple): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple = class(TDNGenericImport<DNValueTupleClass, DNValueTuple>) end;

  //-------------namespace: System----------------
  DNVoidClass = interface(DNValueTypeClass)
  ['{80FBF9F7-5A5C-584E-91E0-6C0B65BA0700}']
  end;

  [DNTypeName('System.Void')]
  DNVoid = interface(DNValueType)
  ['{CA5C1C2B-61F8-3FC4-B66B-17163A3066A5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNVoid = class(TDNGenericImport<DNVoidClass, DNVoid>) end;

  //-------------namespace: System----------------
  DNVersionClass = interface(DNObjectClass)
  ['{8DA7F1AD-A9DB-57EA-A008-30CA43D212F4}']
  { constructors } 

    {class} function init(major: Int32; minor: Int32; build: Int32; revision: Int32): DNVersion; overload;
    {class} function init(major: Int32; minor: Int32; build: Int32): DNVersion; overload;
    {class} function init(major: Int32; minor: Int32): DNVersion; overload;
    {class} function init(version: string): DNVersion; overload;
    {class} function init: DNVersion; overload;

  { static methods } 

    {class} function Parse(input: string): DNVersion;
    {class} function TryParse(input: string; out result: DNVersion): Boolean;

  end;

  [DNTypeName('System.Version')]
  DNVersion = interface(DNICloneable)
  ['{43CD41AD-3B78-3531-9031-3059E0AA64EB}']
  { getters & setters } 

    function get_Major: Int32;
    function get_Minor: Int32;
    function get_Build: Int32;
    function get_Revision: Int32;
    function get_MajorRevision: Int16;
    function get_MinorRevision: Int16;

  { methods } 

    function Clone: DNObject;
    function CompareTo(version: DNObject): Int32; overload;
    function CompareTo(value: DNVersion): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNVersion): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(fieldCount: Int32): string; overload;
    function GetType: DNType;

  { propertys } 

    property Major: Int32 read get_Major;
    property Minor: Int32 read get_Minor;
    property Build: Int32 read get_Build;
    property Revision: Int32 read get_Revision;
    property MajorRevision: Int16 read get_MajorRevision;
    property MinorRevision: Int16 read get_MinorRevision;
  end;

  TDNVersion = class(TDNGenericImport<DNVersionClass, DNVersion>) end;

  //-------------namespace: System----------------
  DNWeakReferenceClass<T> = interface(DNObjectClass)
  ['{E9FDB3F6-14FD-50C9-8E9B-B4B1115C26A8}']
  { constructors } 

    {class} function init(target: T): DNWeakReference<T>; overload;
    {class} function init(target: T; trackResurrection: Boolean): DNWeakReference<T>; overload;

  end;

  [DNTypeName('System.WeakReference`1')]
  DNWeakReference<T> = interface(DNISerializable)
  ['{F53269A7-A16F-32DA-89CC-82AC40C7EC2C}']
  { methods } 

    function TryGetTarget(out target: T): Boolean;
    procedure SetTarget(target: T);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNWeakReference<T> = class(TDNGenericImport<DNWeakReferenceClass<T>, DNWeakReference<T>>) end;

  //-------------namespace: System----------------
  DNWeakReferenceClass = interface(DNObjectClass)
  ['{F390BBEF-92F4-56CF-ADD0-96B55BC4A2A5}']
  { constructors } 

    {class} function init(target: DNObject): DNWeakReference; overload;
    {class} function init(target: DNObject; trackResurrection: Boolean): DNWeakReference; overload;

  end;

  [DNTypeName('System.WeakReference')]
  DNWeakReference = interface(DNISerializable)
  ['{D3F54E92-A0C7-3BF4-A114-F1F384CE3EFF}']
  { getters & setters } 

    function get_IsAlive: Boolean;
    function get_TrackResurrection: Boolean;
    function get_Target: DNObject;
    procedure set_Target(value: DNObject);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsAlive: Boolean read get_IsAlive;
    property TrackResurrection: Boolean read get_TrackResurrection;
    property Target: DNObject read get_Target write set_Target;
  end;

  TDNWeakReference = class(TDNGenericImport<DNWeakReferenceClass, DNWeakReference>) end;


implementation

{ TDNGenericImport<C, T> }

class function TDNGenericImport<C, T>.GetTypeId: DNType;
var LObj: DNNObject;
begin
  Result := nil;
  LObj := GetClsID;
  if LObj <> nil then
     Result := TDNType.Wrap(LObj);
end;

end.
