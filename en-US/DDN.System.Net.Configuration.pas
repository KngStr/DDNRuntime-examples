//----------------------------------------------------------------------------
//  System.dll: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Net.Configuration
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Net.Configuration;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Net.Configuration----------------
  ///<summary>Specifies whether the proxy is automatically detected.</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement+AutoDetectValues')]
  DNProxyElement_AutoDetectValues = type Integer;
  DNProxyElement_AutoDetectValuesHelper = record helper for DNProxyElement_AutoDetectValues
  public const
    ///<summary>The proxy is not automatically detected.</summary>
    False = 0;
    ///<summary>The proxy is automatically detected.</summary>
    True = 1;
    ///<summary>Unspecified.</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>Specifies whether the proxy is bypassed for local resources.</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement+BypassOnLocalValues')]
  DNProxyElement_BypassOnLocalValues = type Integer;
  DNProxyElement_BypassOnLocalValuesHelper = record helper for DNProxyElement_BypassOnLocalValues
  public const
    ///<summary>All requests for local resources should go through the proxy</summary>
    False = 0;
    ///<summary>Access local resources directly.</summary>
    True = 1;
    ///<summary>Unspecified.</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>Specifies whether to use the local system proxy settings to determine whether the proxy is bypassed for local resources.</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement+UseSystemDefaultValues')]
  DNProxyElement_UseSystemDefaultValues = type Integer;
  DNProxyElement_UseSystemDefaultValuesHelper = record helper for DNProxyElement_UseSystemDefaultValues
  public const
    ///<summary>Do not use system default proxy setting values</summary>
    False = 0;
    ///<summary>Use system default proxy setting values.</summary>
    True = 1;
    ///<summary>The system default proxy setting is unspecified.</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>Controls how Unicode characters are interpreted by the <see cref="Overload:System.Net.WebUtility.HtmlDecode" />
  ///  methods.</summary>
  [DNTypeName('System.Net.Configuration.UnicodeDecodingConformance')]
  DNUnicodeDecodingConformance = type Integer;
  DNUnicodeDecodingConformanceHelper = record helper for DNUnicodeDecodingConformance
  public const
    ///<summary>Use automatic behavior. The decoding behavior is determined by current application's target Framework. For .NET Framework 4.5 and later, the Unicode encoding decoding is strict.</summary>
    Auto = 0;
    ///<summary>Use strict behavior. Specifies that the incoming encoded data is checked for validity before being decoded. For example, an input string of "&amp;#144308;" would decode as U+233B4, but an input string of "&amp;#xD84C;&amp;#xDFB4;" would fail to decode properly. Already-decoded data in the string is not checked for validity. For example, an input string of "\ud800" will result in an output string of "\ud800", as the already-decoded surrogate is skipped during decoding, even though it is unpaired.</summary>
    Strict_ = 1;
    ///<summary>Use compatible behavior. Specifies that incoming data is not checked for validity before being decoded. For example, an input string of "&amp;amp;#xD84C;" would decode as U+D84C, which is an unpaired surrogate. Additionally, the decoder does not understand code points in the SMP unless they're represented as HTML-encoded surrogates, so the inputstring "&amp;#144308;" would result in the output string "&amp;#144308;".</summary>
    Compat = 2;
    ///<summary>Use loose behavior. Similar to <see cref="F:System.Net.Configuration.UnicodeDecodingConformance.Compat" />
    ///  in that there are no validity checks, but the decoder also understands code points. The input string "&amp;#144308;" would decode into the character U+233B4 correctly. This switch is meant to provide maximum interoperability when the decoder doesn't know which format the provider is using to generate the encoded string.</summary>
    Loose = 3;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>Controls how Unicode characters are output by the <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
  ///  methods.</summary>
  [DNTypeName('System.Net.Configuration.UnicodeEncodingConformance')]
  DNUnicodeEncodingConformance = type Integer;
  DNUnicodeEncodingConformanceHelper = record helper for DNUnicodeEncodingConformance
  public const
    ///<summary>Use automatic behavior. The Unicode encoding behavior is determined by current application's target Framework. For .NET Framework 4.5 and later, the Unicode encoding behavior is strict.        </summary>
    Auto = 0;
    ///<summary>Use strict behavior. Specifies that individual UTF-16 surrogate code points are combined into a single code point when one of the <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  methods is called. For example, given the input string "\uD84C\uDFB4" (or "\U000233B4"), the output of the <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  methods is "&amp;#144308;". If the input is a malformed UTF-16 string (it contains unpaired surrogates, for example), the bad code points will be replaced with U+FFFD (Unicode replacement char) before being HTML-encoded.</summary>
    Strict_ = 1;
    ///<summary>Use compatible behavior. Specifies that individual UTF-16 surrogate code points are output as-is when one of <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  methods is called. For example, given a string "\uD84C\uDFB4" (or "\U000233B4"), the output of <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  is "\uD84C\uDFB4" (the input is not encoded).</summary>
    Compat = 2;
  end;




type


{ declares }

  DNAuthenticationModuleElementCollection = interface; // type: System.Net.Configuration.AuthenticationModuleElementCollection, namespace: System.Net.Configuration
  DNBypassElementCollection = interface; // type: System.Net.Configuration.BypassElementCollection, namespace: System.Net.Configuration
  DNConnectionManagementElementCollection = interface; // type: System.Net.Configuration.ConnectionManagementElementCollection, namespace: System.Net.Configuration
  DNWebRequestModuleElementCollection = interface; // type: System.Net.Configuration.WebRequestModuleElementCollection, namespace: System.Net.Configuration
  DNAuthenticationModulesSection = interface; // type: System.Net.Configuration.AuthenticationModulesSection, namespace: System.Net.Configuration
  DNConnectionManagementSection = interface; // type: System.Net.Configuration.ConnectionManagementSection, namespace: System.Net.Configuration
  DNDefaultProxySection = interface; // type: System.Net.Configuration.DefaultProxySection, namespace: System.Net.Configuration
  DNRequestCachingSection = interface; // type: System.Net.Configuration.RequestCachingSection, namespace: System.Net.Configuration
  DNSettingsSection = interface; // type: System.Net.Configuration.SettingsSection, namespace: System.Net.Configuration
  DNSmtpSection = interface; // type: System.Net.Configuration.SmtpSection, namespace: System.Net.Configuration
  DNWebRequestModulesSection = interface; // type: System.Net.Configuration.WebRequestModulesSection, namespace: System.Net.Configuration
  DNAuthenticationModuleElement = interface; // type: System.Net.Configuration.AuthenticationModuleElement, namespace: System.Net.Configuration
  DNBypassElement = interface; // type: System.Net.Configuration.BypassElement, namespace: System.Net.Configuration
  DNConnectionManagementElement = interface; // type: System.Net.Configuration.ConnectionManagementElement, namespace: System.Net.Configuration
  DNFtpCachePolicyElement = interface; // type: System.Net.Configuration.FtpCachePolicyElement, namespace: System.Net.Configuration
  DNHttpCachePolicyElement = interface; // type: System.Net.Configuration.HttpCachePolicyElement, namespace: System.Net.Configuration
  DNHttpListenerElement = interface; // type: System.Net.Configuration.HttpListenerElement, namespace: System.Net.Configuration
  DNHttpListenerTimeoutsElement = interface; // type: System.Net.Configuration.HttpListenerTimeoutsElement, namespace: System.Net.Configuration
  DNHttpWebRequestElement = interface; // type: System.Net.Configuration.HttpWebRequestElement, namespace: System.Net.Configuration
  DNIpv6Element = interface; // type: System.Net.Configuration.Ipv6Element, namespace: System.Net.Configuration
  DNModuleElement = interface; // type: System.Net.Configuration.ModuleElement, namespace: System.Net.Configuration
  DNPerformanceCountersElement = interface; // type: System.Net.Configuration.PerformanceCountersElement, namespace: System.Net.Configuration
  DNProxyElement = interface; // type: System.Net.Configuration.ProxyElement, namespace: System.Net.Configuration
  DNServicePointManagerElement = interface; // type: System.Net.Configuration.ServicePointManagerElement, namespace: System.Net.Configuration
  DNSmtpNetworkElement = interface; // type: System.Net.Configuration.SmtpNetworkElement, namespace: System.Net.Configuration
  DNSmtpSpecifiedPickupDirectoryElement = interface; // type: System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement, namespace: System.Net.Configuration
  DNSocketElement = interface; // type: System.Net.Configuration.SocketElement, namespace: System.Net.Configuration
  DNWebProxyScriptElement = interface; // type: System.Net.Configuration.WebProxyScriptElement, namespace: System.Net.Configuration
  DNWebRequestModuleElement = interface; // type: System.Net.Configuration.WebRequestModuleElement, namespace: System.Net.Configuration
  DNWebUtilityElement = interface; // type: System.Net.Configuration.WebUtilityElement, namespace: System.Net.Configuration
  DNWindowsAuthenticationElement = interface; // type: System.Net.Configuration.WindowsAuthenticationElement, namespace: System.Net.Configuration
  DNMailSettingsSectionGroup = interface; // type: System.Net.Configuration.MailSettingsSectionGroup, namespace: System.Net.Configuration
  DNNetSectionGroup = interface; // type: System.Net.Configuration.NetSectionGroup, namespace: System.Net.Configuration


{ objects }

  //-------------namespace: System.Net.Configuration----------------
  DNAuthenticationModuleElementCollectionClass = interface(DNObjectClass)
  ['{3E5B622A-A1F2-547C-85DC-63A8F0894430}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" />
    ///  class. </summary>
    {class} function init: DNAuthenticationModuleElementCollection;

  end;

  ///<summary>Represents a container for authentication module configuration elements. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.AuthenticationModuleElementCollection')]
  DNAuthenticationModuleElementCollection = interface(DNObject)
  ['{30BE1B0F-EDAA-3ABF-81AC-71743BC642DD}']
  { getters & setters } 

    function get_Item(index: Int32): DNAuthenticationModuleElement; overload;
    procedure set_Item(index: Int32; value: DNAuthenticationModuleElement); overload;
    function get_Item(name: string): DNAuthenticationModuleElement; overload;
    procedure set_Item(name: string; value: DNAuthenticationModuleElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds an element to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  to add to the collection.</param>
    procedure Add(element: DNAuthenticationModuleElement);
    ///<summary>Removes all elements from the collection.</summary>
    procedure Clear;
    ///<summary>Returns the index of the specified configuration element.</summary>
    ///  <param name="element">A <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  .</param>
    ///<returns>The zero-based index of <paramref name="element" />
    ///  .</returns>
    function IndexOf(element: DNAuthenticationModuleElement): Int32;
    ///<summary>Removes the specified configuration element from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  to remove.</param>
    procedure Remove(element: DNAuthenticationModuleElement); overload;
    ///<summary>Removes the element with the specified key.</summary>
    ///  <param name="name">The key of the element to remove.</param>
    procedure Remove(name: string); overload;
    ///<summary>Removes the element at the specified index.</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNAuthenticationModuleElement read get_Item write set_Item; default;
    property Item[name: string]: DNAuthenticationModuleElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthenticationModuleElementCollection = class(TDNGenericImport<DNAuthenticationModuleElementCollectionClass, DNAuthenticationModuleElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNBypassElementCollectionClass = interface(DNObjectClass)
  ['{08E16BAF-8716-5CAC-B42D-4893D6BA3C58}']
  { constructors } 

    ///<summary>Initializes an empty instance of the <see cref="T:System.Net.Configuration.BypassElementCollection" />
    ///  class. </summary>
    {class} function init: DNBypassElementCollection;

  end;

  ///<summary>Represents a container for the addresses of resources that bypass the proxy server. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.BypassElementCollection')]
  DNBypassElementCollection = interface(DNObject)
  ['{44D5F88E-76B3-3B0F-9977-7DB90B662F35}']
  { getters & setters } 

    function get_Item(index: Int32): DNBypassElement; overload;
    procedure set_Item(index: Int32; value: DNBypassElement); overload;
    function get_Item(name: string): DNBypassElement; overload;
    procedure set_Item(name: string; value: DNBypassElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds an element to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.BypassElement" />
    ///  to add to the collection.</param>
    procedure Add(element: DNBypassElement);
    ///<summary>Removes all elements from the collection.</summary>
    procedure Clear;
    ///<summary>Returns the index of the specified configuration element.</summary>
    ///  <param name="element">A <see cref="T:System.Net.Configuration.BypassElement" />
    ///  .</param>
    ///<returns>The zero-based index of <paramref name="element" />
    ///  .</returns>
    function IndexOf(element: DNBypassElement): Int32;
    ///<summary>Removes the specified configuration element from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.BypassElement" />
    ///  to remove.</param>
    procedure Remove(element: DNBypassElement); overload;
    ///<summary>Removes the element with the specified key.</summary>
    ///  <param name="name">The key of the element to remove.</param>
    procedure Remove(name: string); overload;
    ///<summary>Removes the element at the specified index.</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNBypassElement read get_Item write set_Item; default;
    property Item[name: string]: DNBypassElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNBypassElementCollection = class(TDNGenericImport<DNBypassElementCollectionClass, DNBypassElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNConnectionManagementElementCollectionClass = interface(DNObjectClass)
  ['{0A55556C-7FDD-568E-AF71-C98DAA052891}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" />
    ///  class. </summary>
    {class} function init: DNConnectionManagementElementCollection;

  end;

  ///<summary>Represents a container for connection management configuration elements. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.ConnectionManagementElementCollection')]
  DNConnectionManagementElementCollection = interface(DNObject)
  ['{DAE5D242-84A2-3E36-9F79-4A9775B071A8}']
  { getters & setters } 

    function get_Item(index: Int32): DNConnectionManagementElement; overload;
    procedure set_Item(index: Int32; value: DNConnectionManagementElement); overload;
    function get_Item(name: string): DNConnectionManagementElement; overload;
    procedure set_Item(name: string; value: DNConnectionManagementElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds an element to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  to add to the collection.</param>
    procedure Add(element: DNConnectionManagementElement);
    ///<summary>Removes all elements from the collection.</summary>
    procedure Clear;
    ///<summary>Returns the index of the specified configuration element.</summary>
    ///  <param name="element">A <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  .</param>
    ///<returns>The zero-based index of <paramref name="element" />
    ///  .</returns>
    function IndexOf(element: DNConnectionManagementElement): Int32;
    ///<summary>Removes the specified configuration element from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  to remove.</param>
    procedure Remove(element: DNConnectionManagementElement); overload;
    ///<summary>Removes the element with the specified key.</summary>
    ///  <param name="name">The key of the element to remove.</param>
    procedure Remove(name: string); overload;
    ///<summary>Removes the element at the specified index.</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConnectionManagementElement read get_Item write set_Item; default;
    property Item[name: string]: DNConnectionManagementElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionManagementElementCollection = class(TDNGenericImport<DNConnectionManagementElementCollectionClass, DNConnectionManagementElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebRequestModuleElementCollectionClass = interface(DNObjectClass)
  ['{FD7506E6-106C-56B2-A299-BB99C57424FD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" />
    ///  class. </summary>
    {class} function init: DNWebRequestModuleElementCollection;

  end;

  ///<summary>Represents a container for Web request module configuration elements. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.WebRequestModuleElementCollection')]
  DNWebRequestModuleElementCollection = interface(DNObject)
  ['{146D1F14-5F97-3C11-9929-725BC4CCA898}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebRequestModuleElement; overload;
    procedure set_Item(index: Int32; value: DNWebRequestModuleElement); overload;
    function get_Item(name: string): DNWebRequestModuleElement; overload;
    procedure set_Item(name: string; value: DNWebRequestModuleElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds an element to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  to add to the collection.</param>
    procedure Add(element: DNWebRequestModuleElement);
    ///<summary>Removes all elements from the collection.</summary>
    procedure Clear;
    ///<summary>Returns the index of the specified configuration element.</summary>
    ///  <param name="element">A <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  .</param>
    ///<returns>The zero-based index of <paramref name="element" />
    ///  .</returns>
    function IndexOf(element: DNWebRequestModuleElement): Int32;
    ///<summary>Removes the specified configuration element from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  to remove.</param>
    procedure Remove(element: DNWebRequestModuleElement); overload;
    ///<summary>Removes the element with the specified key.</summary>
    ///  <param name="name">The key of the element to remove.</param>
    procedure Remove(name: string); overload;
    ///<summary>Removes the element at the specified index.</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebRequestModuleElement read get_Item write set_Item; default;
    property Item[name: string]: DNWebRequestModuleElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebRequestModuleElementCollection = class(TDNGenericImport<DNWebRequestModuleElementCollectionClass, DNWebRequestModuleElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNAuthenticationModulesSectionClass = interface(DNObjectClass)
  ['{31876F49-1085-5B14-90CF-A2E55C153359}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.AuthenticationModulesSection" />
    ///  class. </summary>
    {class} function init: DNAuthenticationModulesSection;

  end;

  ///<summary>Represents the configuration section for authentication modules. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.AuthenticationModulesSection')]
  DNAuthenticationModulesSection = interface(DNObject)
  ['{DF18CD21-DB70-3E3E-B069-EDE6A56F4B72}']
  { getters & setters } 

    function get_AuthenticationModules: DNAuthenticationModuleElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of authentication modules in the section.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" />
    ///  that contains the registered authentication modules. </returns>
    property AuthenticationModules: DNAuthenticationModuleElementCollection read get_AuthenticationModules;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthenticationModulesSection = class(TDNGenericImport<DNAuthenticationModulesSectionClass, DNAuthenticationModulesSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNConnectionManagementSectionClass = interface(DNObjectClass)
  ['{3EBEBEB1-2938-5102-BB77-DA5E9FB90057}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ConnectionManagementSection" />
    ///  class. </summary>
    {class} function init: DNConnectionManagementSection;

  end;

  ///<summary>Represents the configuration section for connection management. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.ConnectionManagementSection')]
  DNConnectionManagementSection = interface(DNObject)
  ['{D536B35C-EEB7-3304-9622-82A8394804E5}']
  { getters & setters } 

    function get_ConnectionManagement: DNConnectionManagementElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of connection management objects in the section.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" />
    ///  that contains the connection management information for the local computer. </returns>
    property ConnectionManagement: DNConnectionManagementElementCollection read get_ConnectionManagement;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionManagementSection = class(TDNGenericImport<DNConnectionManagementSectionClass, DNConnectionManagementSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNDefaultProxySectionClass = interface(DNObjectClass)
  ['{0E38D258-5ADE-5D04-8F8A-A0CD1250FA6E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.DefaultProxySection" />
    ///  class. </summary>
    {class} function init: DNDefaultProxySection;

  end;

  ///<summary>Represents the configuration section for Web proxy server usage. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.DefaultProxySection')]
  DNDefaultProxySection = interface(DNObject)
  ['{086ED210-223A-3564-A9B9-6663C4280C8D}']
  { getters & setters } 

    function get_BypassList: DNBypassElementCollection;
    function get_Module: DNModuleElement;
    function get_Proxy: DNProxyElement;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of resources that are not obtained using the Web proxy server.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.BypassElementCollection" />
    ///  that contains the addresses of resources that bypass the Web proxy server. </returns>
    property BypassList: DNBypassElementCollection read get_BypassList;
    ///<summary>Gets the type information for a custom Web proxy implementation.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.ModuleElement" />
    ///  . The type information for a custom Web proxy implementation.</returns>
    property Module: DNModuleElement read get_Module;
    ///<summary>Gets the URI that identifies the Web proxy server to use.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.ProxyElement" />
    ///  . The URI that identifies the Web proxy server.</returns>
    property Proxy: DNProxyElement read get_Proxy;
    ///<summary>Gets or sets whether a Web proxy is used.</summary>
    ///<returns><see langword="true" />
    ///  if a Web proxy will be used; otherwise, <see langword="false" />
    ///  .</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>Gets or sets whether default credentials are to be used to access a Web proxy server.</summary>
    ///<returns><see langword="true" />
    ///  if default credentials are to be used; otherwise, <see langword="false" />
    ///  .</returns>
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDefaultProxySection = class(TDNGenericImport<DNDefaultProxySectionClass, DNDefaultProxySection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNRequestCachingSectionClass = interface(DNObjectClass)
  ['{D3C87A38-082F-587F-B2C4-BEF8D28251D4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.RequestCachingSection" />
    ///  class. </summary>
    {class} function init: DNRequestCachingSection;

  end;

  ///<summary>Represents the configuration section for cache behavior. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.RequestCachingSection')]
  DNRequestCachingSection = interface(DNObject)
  ['{A8466872-24FD-3A18-A365-E06327DB91F5}']
  { getters & setters } 

    function get_DefaultHttpCachePolicy: DNHttpCachePolicyElement;
    function get_DefaultFtpCachePolicy: DNFtpCachePolicyElement;
    function get_DefaultPolicyLevel: DNRequestCacheLevel;
    procedure set_DefaultPolicyLevel(value: DNRequestCacheLevel);
    function get_DisableAllCaching: Boolean;
    procedure set_DisableAllCaching(value: Boolean);
    function get_IsPrivateCache: Boolean;
    procedure set_IsPrivateCache(value: Boolean);
    function get_UnspecifiedMaximumAge: DDN.mscorlib.DNTimeSpan;
    procedure set_UnspecifiedMaximumAge(value: DDN.mscorlib.DNTimeSpan);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the default caching behavior for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.HttpCachePolicyElement" />
    ///  that defines the default cache policy.</returns>
    property DefaultHttpCachePolicy: DNHttpCachePolicyElement read get_DefaultHttpCachePolicy;
    ///<summary>Gets the default FTP caching behavior for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.FtpCachePolicyElement" />
    ///  that defines the default cache policy.</returns>
    property DefaultFtpCachePolicy: DNFtpCachePolicyElement read get_DefaultFtpCachePolicy;
    ///<summary>Gets or sets the default cache policy level.</summary>
    ///<returns>A <see cref="T:System.Net.Cache.RequestCacheLevel" />
    ///  enumeration value.</returns>
    property DefaultPolicyLevel: DNRequestCacheLevel read get_DefaultPolicyLevel write set_DefaultPolicyLevel;
    ///<summary>Gets or sets a Boolean value that enables caching on the local computer.</summary>
    ///<returns><see langword="true" />
    ///  if caching is disabled on the local computer; otherwise, <see langword="false" />
    ///  .</returns>
    property DisableAllCaching: Boolean read get_DisableAllCaching write set_DisableAllCaching;
    ///<summary>Gets or sets a Boolean value that indicates whether the local computer cache is private.</summary>
    ///<returns><see langword="true" />
    ///  if the cache provides user isolation; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPrivateCache: Boolean read get_IsPrivateCache write set_IsPrivateCache;
    ///<summary>Gets or sets a value used as the maximum age for cached resources that do not have expiration information.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  that provides a default maximum age for cached resources.</returns>
    property UnspecifiedMaximumAge: DDN.mscorlib.DNTimeSpan read get_UnspecifiedMaximumAge write set_UnspecifiedMaximumAge;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNRequestCachingSection = class(TDNGenericImport<DNRequestCachingSectionClass, DNRequestCachingSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSettingsSectionClass = interface(DNObjectClass)
  ['{BF735F2C-DAFF-5D63-B1B0-2FA322B7F18F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ConnectionManagementSection" />
    ///  class. </summary>
    {class} function init: DNSettingsSection;

  end;

  ///<summary>Represents the configuration section for sockets, IPv6, response headers, and service points. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.SettingsSection')]
  DNSettingsSection = interface(DNObject)
  ['{0C7B9893-B74A-344E-AE79-B3A7C4FE8828}']
  { getters & setters } 

    function get_HttpWebRequest: DNHttpWebRequestElement;
    function get_Ipv6: DNIpv6Element;
    function get_ServicePointManager: DNServicePointManagerElement;
    function get_Socket: DNSocketElement;
    function get_WebProxyScript: DNWebProxyScriptElement;
    function get_PerformanceCounters: DNPerformanceCountersElement;
    function get_HttpListener: DNHttpListenerElement;
    function get_WebUtility: DNWebUtilityElement;
    function get_WindowsAuthentication: DNWindowsAuthenticationElement;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the configuration element that controls the settings used by an <see cref="T:System.Net.HttpWebRequest" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.HttpWebRequestElement" />
    ///  object.The configuration element that controls the maximum response header length and other settings used by an <see cref="T:System.Net.HttpWebRequest" />
    ///  object.</returns>
    property HttpWebRequest: DNHttpWebRequestElement read get_HttpWebRequest;
    ///<summary>Gets the configuration element that enables Internet Protocol version 6 (IPv6).</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.Ipv6Element" />
    ///  .The configuration element that controls setting used by IPv6.</returns>
    property Ipv6: DNIpv6Element read get_Ipv6;
    ///<summary>Gets the configuration element that controls settings for connections to remote host computers.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.ServicePointManagerElement" />
    ///  object.The configuration element that that controls setting used network performance counters for connections to remote host computers.</returns>
    property ServicePointManager: DNServicePointManagerElement read get_ServicePointManager;
    ///<summary>Gets the configuration element that controls settings for sockets.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.SocketElement" />
    ///  object.The configuration element that controls settings for sockets.</returns>
    property Socket: DNSocketElement read get_Socket;
    ///<summary>Gets the configuration element that controls the execution timeout and download timeout of Web proxy scripts.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.WebProxyScriptElement" />
    ///  object.The configuration element that controls settings for the execution timeout and download timeout used by the Web proxy scripts.</returns>
    property WebProxyScript: DNWebProxyScriptElement read get_WebProxyScript;
    ///<summary>Gets the configuration element that controls whether network performance counters are enabled.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.PerformanceCountersElement" />
    ///  .The configuration element that controls setting used network performance counters.</returns>
    property PerformanceCounters: DNPerformanceCountersElement read get_PerformanceCounters;
    ///<summary>Gets the configuration element that controls the settings used by an <see cref="T:System.Net.HttpListener" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Net.Configuration.HttpListenerElement" />
    ///  object.The configuration element that controls the settings used by an <see cref="T:System.Net.HttpListener" />
    ///  object.</returns>
    property HttpListener: DNHttpListenerElement read get_HttpListener;
    ///<summary>Gets the configuration element that controls the settings used by an <see cref="T:System.Net.WebUtility" />
    ///  object.</summary>
    ///<returns>Returns <see cref="T:System.Net.Configuration.WebUtilityElement" />
    ///  .The configuration element that controls the settings used by an <see cref="T:System.Net.WebUtility" />
    ///  object.</returns>
    property WebUtility: DNWebUtilityElement read get_WebUtility;
    property WindowsAuthentication: DNWindowsAuthenticationElement read get_WindowsAuthentication;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSettingsSection = class(TDNGenericImport<DNSettingsSectionClass, DNSettingsSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSmtpSectionClass = interface(DNObjectClass)
  ['{A07B97D0-32B6-548A-9355-81AEF631478E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.SmtpSection" />
    ///  class.</summary>
    {class} function init: DNSmtpSection;

  end;

  ///<summary>Represents the SMTP section in the <see langword="System.Net" />
  ///  configuration file.</summary>
  [DNTypeName('System.Net.Configuration.SmtpSection')]
  DNSmtpSection = interface(DNObject)
  ['{2B03FD71-9C48-3F6D-B05B-F3B7E4430B34}']
  { getters & setters } 

    function get_DeliveryMethod: DNSmtpDeliveryMethod;
    procedure set_DeliveryMethod(value: DNSmtpDeliveryMethod);
    function get_DeliveryFormat: DNSmtpDeliveryFormat;
    procedure set_DeliveryFormat(value: DNSmtpDeliveryFormat);
    function get_From: string;
    procedure set_From(value: string);
    function get_Network: DNSmtpNetworkElement;
    function get_SpecifiedPickupDirectory: DNSmtpSpecifiedPickupDirectoryElement;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Simple Mail Transport Protocol (SMTP) delivery method. The default delivery method is <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />
    ///  .</summary>
    ///<returns>A string that represents the SMTP delivery method.</returns>
    property DeliveryMethod: DNSmtpDeliveryMethod read get_DeliveryMethod write set_DeliveryMethod;
    ///<summary>Gets or sets the delivery format to use for sending outgoing e-mail using the Simple Mail Transport Protocol (SMTP).</summary>
    ///<returns>Returns <see cref="T:System.Net.Mail.SmtpDeliveryFormat" />
    ///  .The delivery format to use for sending outgoing e-mail using SMTP.</returns>
    property DeliveryFormat: DNSmtpDeliveryFormat read get_DeliveryFormat write set_DeliveryFormat;
    ///<summary>Gets or sets the default value that indicates who the email message is from.</summary>
    ///<returns>A string that represents the default value indicating who a mail message is from.</returns>
    property From: string read get_From write set_From;
    ///<summary>Gets the configuration element that controls the network settings used by the Simple Mail Transport Protocol (SMTP). file.<see cref="T:System.Net.Configuration.SmtpNetworkElement" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.SmtpNetworkElement" />
    ///  object.The configuration element that controls the network settings used by SMTP.</returns>
    property Network: DNSmtpNetworkElement read get_Network;
    ///<summary>Gets the pickup directory that will be used by the SMPT client.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" />
    ///  object that specifies the pickup directory folder.</returns>
    property SpecifiedPickupDirectory: DNSmtpSpecifiedPickupDirectoryElement read get_SpecifiedPickupDirectory;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSmtpSection = class(TDNGenericImport<DNSmtpSectionClass, DNSmtpSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebRequestModulesSectionClass = interface(DNObjectClass)
  ['{AEBD7F61-8629-5BA5-A583-51CAD27AE3F4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.WebRequestModulesSection" />
    ///  class.</summary>
    {class} function init: DNWebRequestModulesSection;

  end;

  ///<summary>Represents the configuration section for Web request modules. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.WebRequestModulesSection')]
  DNWebRequestModulesSection = interface(DNObject)
  ['{9B213E9F-B6AE-38F8-8561-D80710F0B261}']
  { getters & setters } 

    function get_WebRequestModules: DNWebRequestModuleElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of Web request modules in the section.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" />
    ///  containing the registered Web request modules. </returns>
    property WebRequestModules: DNWebRequestModuleElementCollection read get_WebRequestModules;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebRequestModulesSection = class(TDNGenericImport<DNWebRequestModulesSectionClass, DNWebRequestModulesSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNAuthenticationModuleElementClass = interface(DNObjectClass)
  ['{179B8082-1827-582F-9393-33741A42FB13}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  class. </summary>
    {class} function init: DNAuthenticationModuleElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  class with the specified type information.</summary>
    ///  <param name="typeName">A string that identifies the type and the assembly that contains it.</param>
    {class} function init(typeName: string): DNAuthenticationModuleElement; overload;

  end;

  ///<summary>Represents the type information for an authentication module. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.AuthenticationModuleElement')]
  DNAuthenticationModuleElement = interface(DNObject)
  ['{D04C9593-F364-3E07-8EB7-87E292CE8A55}']
  { getters & setters } 

    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the type and assembly information for the current instance.</summary>
    ///<returns>A string that identifies a type that implements an authentication module or <see langword="null" />
    ///  if no value has been specified.</returns>
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthenticationModuleElement = class(TDNGenericImport<DNAuthenticationModuleElementClass, DNAuthenticationModuleElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNBypassElementClass = interface(DNObjectClass)
  ['{3185DE0F-8F56-542E-AF62-57C5BC29A840}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.BypassElement" />
    ///  class. </summary>
    {class} function init: DNBypassElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.BypassElement" />
    ///  class with the specified type information.</summary>
    ///  <param name="address">A string that identifies the address of a resource.</param>
    {class} function init(address: string): DNBypassElement; overload;

  end;

  ///<summary>Represents the address information for resources that are not retrieved using a proxy server. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.BypassElement')]
  DNBypassElement = interface(DNObject)
  ['{2296AA7C-1E61-38EA-B2C5-06FF1C226965}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the addresses of resources that bypass the proxy server.</summary>
    ///<returns>A string that identifies a resource.</returns>
    property Address: string read get_Address write set_Address;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNBypassElement = class(TDNGenericImport<DNBypassElementClass, DNBypassElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNConnectionManagementElementClass = interface(DNObjectClass)
  ['{D2564865-7819-5E6A-A18F-CB0F5F749BC8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  class. </summary>
    {class} function init: DNConnectionManagementElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  class with the specified address and connection limit information.</summary>
    ///  <param name="address">A string that identifies the address of a remote computer.</param>
    ///  <param name="maxConnection">An integer that identifies the maximum number of connections allowed to <paramref name="address" />
    ///  from the local computer.</param>
    {class} function init(address: string; maxConnection: Int32): DNConnectionManagementElement; overload;

  end;

  ///<summary>Represents the maximum number of connections to a remote computer. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.ConnectionManagementElement')]
  DNConnectionManagementElement = interface(DNObject)
  ['{5589BB66-821D-37DB-B91F-9334C4C10B50}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_MaxConnection: Int32;
    procedure set_MaxConnection(value: Int32);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the address for remote computers.</summary>
    ///<returns>A string that contains a regular expression describing an IP address or DNS name.</returns>
    property Address: string read get_Address write set_Address;
    ///<summary>Gets or sets the maximum number of connections that can be made to a remote computer.</summary>
    ///<returns>An integer that specifies the maximum number of connections.</returns>
    property MaxConnection: Int32 read get_MaxConnection write set_MaxConnection;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionManagementElement = class(TDNGenericImport<DNConnectionManagementElementClass, DNConnectionManagementElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNFtpCachePolicyElementClass = interface(DNObjectClass)
  ['{7878EFB8-45F9-58FA-AC02-FB4F00CA483A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.FtpCachePolicyElement" />
    ///  class.</summary>
    {class} function init: DNFtpCachePolicyElement;

  end;

  ///<summary>Represents the default FTP cache policy for network resources. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.FtpCachePolicyElement')]
  DNFtpCachePolicyElement = interface(DNObject)
  ['{9FA957E7-E3F1-3462-8A47-036698C5FD68}']
  { getters & setters } 

    function get_PolicyLevel: DNRequestCacheLevel;
    procedure set_PolicyLevel(value: DNRequestCacheLevel);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets FTP caching behavior for the local machine.</summary>
    ///<returns>A <see cref="T:System.Net.Cache.RequestCacheLevel" />
    ///  value that specifies the cache behavior.</returns>
    property PolicyLevel: DNRequestCacheLevel read get_PolicyLevel write set_PolicyLevel;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFtpCachePolicyElement = class(TDNGenericImport<DNFtpCachePolicyElementClass, DNFtpCachePolicyElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpCachePolicyElementClass = interface(DNObjectClass)
  ['{70CB3E7D-0455-53F7-8D4C-E286F0B202C6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.HttpCachePolicyElement" />
    ///  class. </summary>
    {class} function init: DNHttpCachePolicyElement;

  end;

  ///<summary>Represents the default HTTP cache policy for network resources. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.HttpCachePolicyElement')]
  DNHttpCachePolicyElement = interface(DNObject)
  ['{9DAD3938-EB30-3044-9E10-04BE6F9DE894}']
  { getters & setters } 

    function get_MaximumAge: DDN.mscorlib.DNTimeSpan;
    procedure set_MaximumAge(value: DDN.mscorlib.DNTimeSpan);
    function get_MaximumStale: DDN.mscorlib.DNTimeSpan;
    procedure set_MaximumStale(value: DDN.mscorlib.DNTimeSpan);
    function get_MinimumFresh: DDN.mscorlib.DNTimeSpan;
    procedure set_MinimumFresh(value: DDN.mscorlib.DNTimeSpan);
    function get_PolicyLevel: DNHttpRequestCacheLevel;
    procedure set_PolicyLevel(value: DNHttpRequestCacheLevel);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the maximum age permitted for a resource returned from the cache.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  value that specifies the maximum age for cached resources specified in the configuration file.</returns>
    property MaximumAge: DDN.mscorlib.DNTimeSpan read get_MaximumAge write set_MaximumAge;
    ///<summary>Gets or sets the maximum staleness value permitted for a resource returned from the cache.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  value that is set to the maximum staleness value specified in the configuration file.</returns>
    property MaximumStale: DDN.mscorlib.DNTimeSpan read get_MaximumStale write set_MaximumStale;
    ///<summary>Gets or sets the minimum freshness permitted for a resource returned from the cache.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  value that specifies the minimum freshness specified in the configuration file.</returns>
    property MinimumFresh: DDN.mscorlib.DNTimeSpan read get_MinimumFresh write set_MinimumFresh;
    ///<summary>Gets or sets HTTP caching behavior for the local machine.</summary>
    ///<returns>A <see cref="T:System.Net.Cache.HttpRequestCacheLevel" />
    ///  value that specifies the cache behavior.</returns>
    property PolicyLevel: DNHttpRequestCacheLevel read get_PolicyLevel write set_PolicyLevel;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpCachePolicyElement = class(TDNGenericImport<DNHttpCachePolicyElementClass, DNHttpCachePolicyElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpListenerElementClass = interface(DNObjectClass)
  ['{C2EB79F8-704D-512E-AADC-1F815DF21390}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.HttpListenerElement" />
    ///  class.</summary>
    {class} function init: DNHttpListenerElement;

  end;

  ///<summary>Represents the HttpListener element in the configuration file. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.HttpListenerElement')]
  DNHttpListenerElement = interface(DNObject)
  ['{EDFF484B-6E6E-3625-964B-912A4AD7EFE7}']
  { getters & setters } 

    function get_UnescapeRequestUrl: Boolean;
    function get_Timeouts: DNHttpListenerTimeoutsElement;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates if <see cref="T:System.Net.HttpListener" />
    ///  uses the raw unescaped URI instead of the converted URI.</summary>
    ///<returns>A Boolean value that indicates if <see cref="T:System.Net.HttpListener" />
    ///  uses the raw unescaped URI, rather than the converted URI.</returns>
    property UnescapeRequestUrl: Boolean read get_UnescapeRequestUrl;
    ///<summary>Gets the default timeout elements used for an <see cref="T:System.Net.HttpListener" />
    ///  object.</summary>
    ///<returns>Returns <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
    ///  .The timeout elements used for an <see cref="T:System.Net.HttpListener" />
    ///  object.</returns>
    property Timeouts: DNHttpListenerTimeoutsElement read get_Timeouts;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpListenerElement = class(TDNGenericImport<DNHttpListenerElementClass, DNHttpListenerElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpListenerTimeoutsElementClass = interface(DNObjectClass)
  ['{79AB40F8-94B6-5700-89E8-FC84ABD1066B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
    ///  class.</summary>
    {class} function init: DNHttpListenerTimeoutsElement;

  end;

  ///<summary>Represents the <see cref="T:System.Net.HttpListener" />
  ///  timeouts element in the configuration file. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.HttpListenerTimeoutsElement')]
  DNHttpListenerTimeoutsElement = interface(DNObject)
  ['{564B8B86-7104-3DA2-BB0A-4096123195D1}']
  { getters & setters } 

    function get_EntityBody: DDN.mscorlib.DNTimeSpan;
    function get_DrainEntityBody: DDN.mscorlib.DNTimeSpan;
    function get_RequestQueue: DDN.mscorlib.DNTimeSpan;
    function get_IdleConnection: DDN.mscorlib.DNTimeSpan;
    function get_HeaderWait: DDN.mscorlib.DNTimeSpan;
    function get_MinSendBytesPerSecond: Int64;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the time, in seconds, allowed for the request entity body to arrive.</summary>
    ///<returns>Returns <see cref="T:System.TimeSpan" />
    ///  .The time, in seconds, allowed for the request entity body to arrive.</returns>
    property EntityBody: DDN.mscorlib.DNTimeSpan read get_EntityBody;
    ///<summary>Gets the time, in seconds, allowed for the <see cref="T:System.Net.HttpListener" />
    ///  to drain the entity body on a Keep-Alive connection.</summary>
    ///<returns>Returns <see cref="T:System.TimeSpan" />
    ///  .The time, in seconds, allowed for the <see cref="T:System.Net.HttpListener" />
    ///  to drain the entity body on a Keep-Alive connection.</returns>
    property DrainEntityBody: DDN.mscorlib.DNTimeSpan read get_DrainEntityBody;
    ///<summary>Gets the time, in seconds, allowed for the request to remain in the request queue before the <see cref="T:System.Net.HttpListener" />
    ///  picks it up.</summary>
    ///<returns>Returns <see cref="T:System.TimeSpan" />
    ///  .The time, in seconds, allowed for the request to remain in the request queue before the <see cref="T:System.Net.HttpListener" />
    ///  picks it up.</returns>
    property RequestQueue: DDN.mscorlib.DNTimeSpan read get_RequestQueue;
    ///<summary>Gets the time, in seconds, allowed for an idle connection.</summary>
    ///<returns>Returns <see cref="T:System.TimeSpan" />
    ///  .The time, in seconds, allowed for an idle connection.</returns>
    property IdleConnection: DDN.mscorlib.DNTimeSpan read get_IdleConnection;
    ///<summary>Gets the time, in seconds, allowed for the <see cref="T:System.Net.HttpListener" />
    ///  to parse the request header.</summary>
    ///<returns>Returns <see cref="T:System.TimeSpan" />
    ///  .The time, in seconds, allowed for the <see cref="T:System.Net.HttpListener" />
    ///  to parse the request header.</returns>
    property HeaderWait: DDN.mscorlib.DNTimeSpan read get_HeaderWait;
    ///<summary>Gets the minimum send rate, in bytes-per-second, for the response.</summary>
    ///<returns>Returns <see cref="T:System.Int64" />
    ///  .The minimum send rate, in bytes-per-second, for the response.</returns>
    property MinSendBytesPerSecond: Int64 read get_MinSendBytesPerSecond;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpListenerTimeoutsElement = class(TDNGenericImport<DNHttpListenerTimeoutsElementClass, DNHttpListenerTimeoutsElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpWebRequestElementClass = interface(DNObjectClass)
  ['{0A4F9C3B-4CAE-56A8-8EF6-C113D3D18666}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.HttpWebRequestElement" />
    ///  class. </summary>
    {class} function init: DNHttpWebRequestElement;

  end;

  ///<summary>Represents the maximum length for response headers. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.HttpWebRequestElement')]
  DNHttpWebRequestElement = interface(DNObject)
  ['{B76D34F2-2C99-350F-AABF-8B0E1D1496CA}']
  { getters & setters } 

    function get_MaximumUnauthorizedUploadLength: Int32;
    procedure set_MaximumUnauthorizedUploadLength(value: Int32);
    function get_MaximumErrorResponseLength: Int32;
    procedure set_MaximumErrorResponseLength(value: Int32);
    function get_MaximumResponseHeadersLength: Int32;
    procedure set_MaximumResponseHeadersLength(value: Int32);
    function get_UseUnsafeHeaderParsing: Boolean;
    procedure set_UseUnsafeHeaderParsing(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the maximum length of an upload in response to an unauthorized error code.</summary>
    ///<returns>A 32-bit signed integer containing the maximum length (in multiple of 1,024 byte units) of an upload in response to an unauthorized error code. A value of -1 indicates that no size limit will be imposed on the upload. Setting the <see cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
    ///  property to any other value will only send the request body if it is smaller than the number of bytes specified. So a value of 1 would indicate to only send the request body if it is smaller than 1,024 bytes. The default value for this property is -1.</returns>
    property MaximumUnauthorizedUploadLength: Int32 read get_MaximumUnauthorizedUploadLength write set_MaximumUnauthorizedUploadLength;
    ///<summary>Gets or sets the maximum allowed length of an error response.</summary>
    ///<returns>A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the error response. The default value is 64.</returns>
    property MaximumErrorResponseLength: Int32 read get_MaximumErrorResponseLength write set_MaximumErrorResponseLength;
    ///<summary>Gets or sets the maximum allowed length of the response headers.</summary>
    ///<returns>A 32-bit signed integer containing the maximum length in kilobytes (1024 bytes) of the response headers. The default value is 64.</returns>
    property MaximumResponseHeadersLength: Int32 read get_MaximumResponseHeadersLength write set_MaximumResponseHeadersLength;
    ///<summary>Setting this property ignores validation errors that occur during HTTP parsing.</summary>
    ///<returns>Boolean that indicates whether this property has been set. </returns>
    property UseUnsafeHeaderParsing: Boolean read get_UseUnsafeHeaderParsing write set_UseUnsafeHeaderParsing;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpWebRequestElement = class(TDNGenericImport<DNHttpWebRequestElementClass, DNHttpWebRequestElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNIpv6ElementClass = interface(DNObjectClass)
  ['{2FBCDBF5-247A-5C52-911B-76ABF86CFB95}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.Ipv6Element" />
    ///  class. </summary>
    {class} function init: DNIpv6Element;

  end;

  ///<summary>Determines whether Internet Protocol version 6 is enabled on the local computer. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.Ipv6Element')]
  DNIpv6Element = interface(DNObject)
  ['{55E84D89-EAFF-3582-BFFC-44655AF15BA9}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a Boolean value that indicates whether Internet Protocol version 6 is enabled on the local computer.</summary>
    ///<returns><see langword="true" />
    ///  if IPv6 is enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIpv6Element = class(TDNGenericImport<DNIpv6ElementClass, DNIpv6Element>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNModuleElementClass = interface(DNObjectClass)
  ['{F6881870-A63E-5018-A2F3-921228DE149A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ModuleElement" />
    ///  class. </summary>
    {class} function init: DNModuleElement;

  end;

  ///<summary>Represents the type information for a custom <see cref="T:System.Net.IWebProxy" />
  ///  module. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.ModuleElement')]
  DNModuleElement = interface(DNObject)
  ['{CE566ABE-EC05-39DC-A4DB-F0437BBF7B97}']
  { getters & setters } 

    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the type and assembly information for the current instance.</summary>
    ///<returns>A string that identifies a type that implements the <see cref="T:System.Net.IWebProxy" />
    ///  interface or <see langword="null" />
    ///  if no value has been specified.</returns>
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNModuleElement = class(TDNGenericImport<DNModuleElementClass, DNModuleElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNPerformanceCountersElementClass = interface(DNObjectClass)
  ['{D4EF93C9-5CE3-53A4-874E-77DE759240CC}']
  { constructors } 

    ///<summary>Instantiates a <see cref="T:System.Net.Configuration.PerformanceCountersElement" />
    ///  object.</summary>
    {class} function init: DNPerformanceCountersElement;

  end;

  ///<summary>Represents the performance counter element in the <see langword="System.Net" />
  ///  configuration file that determines whether networking performance counters are enabled. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.PerformanceCountersElement')]
  DNPerformanceCountersElement = interface(DNObject)
  ['{6F07726D-E3BB-3941-B17E-F2B18764DD48}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets whether performance counters are enabled.</summary>
    ///<returns><see langword="true" />
    ///  if performance counters are enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNPerformanceCountersElement = class(TDNGenericImport<DNPerformanceCountersElementClass, DNPerformanceCountersElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNProxyElementClass = interface(DNObjectClass)
  ['{B703D76A-F1FF-5BB2-A74C-765C4D608738}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ProxyElement" />
    ///  class. </summary>
    {class} function init: DNProxyElement;

  end;

  ///<summary>Identifies the configuration settings for Web proxy server. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement')]
  DNProxyElement = interface(DNObject)
  ['{60CD2A81-F59A-3913-9ABE-9F2C9552AB7E}']
  { getters & setters } 

    function get_AutoDetect: DNProxyElement_AutoDetectValues;
    procedure set_AutoDetect(value: DNProxyElement_AutoDetectValues);
    function get_ScriptLocation: DNUri;
    procedure set_ScriptLocation(value: DNUri);
    function get_BypassOnLocal: DNProxyElement_BypassOnLocalValues;
    procedure set_BypassOnLocal(value: DNProxyElement_BypassOnLocalValues);
    function get_ProxyAddress: DNUri;
    procedure set_ProxyAddress(value: DNUri);
    function get_UseSystemDefault: DNProxyElement_UseSystemDefaultValues;
    procedure set_UseSystemDefault(value: DNProxyElement_UseSystemDefaultValues);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an <see cref="T:System.Net.Configuration.ProxyElement.AutoDetectValues" />
    ///  value that controls whether the Web proxy is automatically detected.</summary>
    ///<returns><see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.True" />
    ///  if the <see cref="T:System.Net.WebProxy" />
    ///  is automatically detected; <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.False" />
    ///  if the <see cref="T:System.Net.WebProxy" />
    ///  is not automatically detected; or <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.Unspecified" />
    ///  .</returns>
    property AutoDetect: DNProxyElement_AutoDetectValues read get_AutoDetect write set_AutoDetect;
    ///<summary>Gets or sets an <see cref="T:System.Uri" />
    ///  value that specifies the location of the automatic proxy detection script.</summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  specifying the location of the automatic proxy detection script.</returns>
    property ScriptLocation: DNUri read get_ScriptLocation write set_ScriptLocation;
    ///<summary>Gets or sets a value that indicates whether local resources are retrieved by using a Web proxy server.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.ProxyElement.BypassOnLocalValues" />
    ///  .Avalue that indicates whether local resources are retrieved by using a Web proxy server.</returns>
    property BypassOnLocal: DNProxyElement_BypassOnLocalValues read get_BypassOnLocal write set_BypassOnLocal;
    ///<summary>Gets or sets the URI that identifies the Web proxy server to use.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing a URI.</returns>
    property ProxyAddress: DNUri read get_ProxyAddress write set_ProxyAddress;
    ///<summary>Gets or sets a <see cref="T:System.Boolean" />
    ///  value that controls whether the Internet Explorer Web proxy settings are used.</summary>
    ///<returns><see langword="true" />
    ///  if the Internet Explorer LAN settings are used to detect and configure the default <see cref="T:System.Net.WebProxy" />
    ///  used for requests; otherwise, <see langword="false" />
    ///  .</returns>
    property UseSystemDefault: DNProxyElement_UseSystemDefaultValues read get_UseSystemDefault write set_UseSystemDefault;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProxyElement = class(TDNGenericImport<DNProxyElementClass, DNProxyElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNServicePointManagerElementClass = interface(DNObjectClass)
  ['{AB217019-D966-513E-9104-95621A941A0E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.ServicePointManagerElement" />
    ///  class. </summary>
    {class} function init: DNServicePointManagerElement;

  end;

  ///<summary>Represents the default settings used to create connections to a remote computer. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.ServicePointManagerElement')]
  DNServicePointManagerElement = interface(DNObject)
  ['{911E4C94-0A48-3E3D-A142-0D41BCAEA9AF}']
  { getters & setters } 

    function get_CheckCertificateName: Boolean;
    procedure set_CheckCertificateName(value: Boolean);
    function get_CheckCertificateRevocationList: Boolean;
    procedure set_CheckCertificateRevocationList(value: Boolean);
    function get_DnsRefreshTimeout: Int32;
    procedure set_DnsRefreshTimeout(value: Int32);
    function get_EnableDnsRoundRobin: Boolean;
    procedure set_EnableDnsRoundRobin(value: Boolean);
    function get_EncryptionPolicy: DNEncryptionPolicy;
    procedure set_EncryptionPolicy(value: DNEncryptionPolicy);
    function get_Expect100Continue: Boolean;
    procedure set_Expect100Continue(value: Boolean);
    function get_UseNagleAlgorithm: Boolean;
    procedure set_UseNagleAlgorithm(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a Boolean value that controls checking host name information in an X509 certificate.</summary>
    ///<returns><see langword="true" />
    ///  to specify host name checking; otherwise, <see langword="false" />
    ///  . </returns>
    property CheckCertificateName: Boolean read get_CheckCertificateName write set_CheckCertificateName;
    ///<summary>Gets or sets a Boolean value that indicates whether the certificate is checked against the certificate authority revocation list.</summary>
    ///<returns><see langword="true" />
    ///  if the certificate revocation list is checked; otherwise, <see langword="false" />
    ///  .The default value is <see langword="false" />
    ///  .</returns>
    property CheckCertificateRevocationList: Boolean read get_CheckCertificateRevocationList write set_CheckCertificateRevocationList;
    ///<summary>Gets or sets the amount of time after which address information is refreshed.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  that specifies when addresses are resolved using DNS.</returns>
    property DnsRefreshTimeout: Int32 read get_DnsRefreshTimeout write set_DnsRefreshTimeout;
    ///<summary>Gets or sets a Boolean value that controls using different IP addresses on connections to the same server.</summary>
    ///<returns><see langword="true" />
    ///  to enable DNS round-robin behavior; otherwise, <see langword="false" />
    ///  .</returns>
    property EnableDnsRoundRobin: Boolean read get_EnableDnsRoundRobin write set_EnableDnsRoundRobin;
    ///<summary>Gets or sets the <see cref="T:System.Net.Security.EncryptionPolicy" />
    ///  to use.</summary>
    ///<returns>The encryption policy to use for a <see cref="T:System.Net.ServicePointManager" />
    ///  instance.</returns>
    property EncryptionPolicy: DNEncryptionPolicy read get_EncryptionPolicy write set_EncryptionPolicy;
    ///<summary>Gets or sets a Boolean value that determines whether 100-Continue behavior is used.</summary>
    ///<returns><see langword="true" />
    ///  to expect 100-Continue responses for <see langword="POST" />
    ///  requests; otherwise, <see langword="false" />
    ///  . The default value is <see langword="true" />
    ///  .</returns>
    property Expect100Continue: Boolean read get_Expect100Continue write set_Expect100Continue;
    ///<summary>Gets or sets a Boolean value that determines whether the Nagle algorithm is used.</summary>
    ///<returns><see langword="true" />
    ///  to use the Nagle algorithm; otherwise, <see langword="false" />
    ///  . The default value is <see langword="true" />
    ///  .</returns>
    property UseNagleAlgorithm: Boolean read get_UseNagleAlgorithm write set_UseNagleAlgorithm;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNServicePointManagerElement = class(TDNGenericImport<DNServicePointManagerElementClass, DNServicePointManagerElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSmtpNetworkElementClass = interface(DNObjectClass)
  ['{0807B926-2135-57BB-A642-8B7364942BFC}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.SmtpNetworkElement" />
    ///  class.</summary>
    {class} function init: DNSmtpNetworkElement;

  end;

  ///<summary>Represents the network element in the SMTP configuration file. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.SmtpNetworkElement')]
  DNSmtpNetworkElement = interface(DNObject)
  ['{59BC81E4-67F2-34DC-BC83-B1A3D657C1A7}']
  { getters & setters } 

    function get_DefaultCredentials: Boolean;
    procedure set_DefaultCredentials(value: Boolean);
    function get_Host: string;
    procedure set_Host(value: string);
    function get_TargetName: string;
    procedure set_TargetName(value: string);
    function get_ClientDomain: string;
    procedure set_ClientDomain(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Port: Int32;
    procedure set_Port(value: Int32);
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_EnableSsl: Boolean;
    procedure set_EnableSsl(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Determines whether or not default user credentials are used to access an SMTP server. The default value is <see langword="false" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  indicates that default user credentials will be used to access the SMTP server; otherwise, <see langword="false" />
    ///  .</returns>
    property DefaultCredentials: Boolean read get_DefaultCredentials write set_DefaultCredentials;
    ///<summary>Gets or sets the name of the SMTP server.</summary>
    ///<returns>A string that represents the name of the SMTP server to connect to.</returns>
    property Host: string read get_Host write set_Host;
    ///<summary>Gets or sets the Service Provider Name (SPN) to use for authentication when using extended protection to connect to an SMTP mail server.</summary>
    ///<returns>A string that represents the SPN to use for authentication when using extended protection to connect to an SMTP mail server.</returns>
    property TargetName: string read get_TargetName write set_TargetName;
    ///<summary>Gets or sets the client domain name used in the initial SMTP protocol request to connect to an SMTP mail server.</summary>
    ///<returns>A string that represents the client domain name used in the initial SMTP protocol request to connect to an SMTP mail server.</returns>
    property ClientDomain: string read get_ClientDomain write set_ClientDomain;
    ///<summary>Gets or sets the user password to use to connect to an SMTP mail server.</summary>
    ///<returns>A string that represents the password to use to connect to an SMTP mail server.</returns>
    property Password: string read get_Password write set_Password;
    ///<summary>Gets or sets the port that SMTP clients use to connect to an SMTP mail server. The default value is 25.</summary>
    ///<returns>A string that represents the port to connect to an SMTP mail server.</returns>
    property Port: Int32 read get_Port write set_Port;
    ///<summary>Gets or sets the user name to connect to an SMTP mail server.</summary>
    ///<returns>A string that represents the user name to connect to an SMTP mail server.</returns>
    property UserName: string read get_UserName write set_UserName;
    ///<summary>Gets or sets whether SSL is used to access an SMTP mail server. The default value is <see langword="false" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  indicates that SSL will be used to access the SMTP mail server; otherwise, <see langword="false" />
    ///  .</returns>
    property EnableSsl: Boolean read get_EnableSsl write set_EnableSsl;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSmtpNetworkElement = class(TDNGenericImport<DNSmtpNetworkElementClass, DNSmtpNetworkElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSmtpSpecifiedPickupDirectoryElementClass = interface(DNObjectClass)
  ['{B55E1ECF-529F-54F9-87D2-F68EC5789CFC}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" />
    ///  class.</summary>
    {class} function init: DNSmtpSpecifiedPickupDirectoryElement;

  end;

  ///<summary>Represents an SMTP pickup directory configuration element.</summary>
  [DNTypeName('System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement')]
  DNSmtpSpecifiedPickupDirectoryElement = interface(DNObject)
  ['{C667E362-A200-362F-8FD6-E313B9693277}']
  { getters & setters } 

    function get_PickupDirectoryLocation: string;
    procedure set_PickupDirectoryLocation(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the folder where applications save mail messages to be processed by the SMTP server.</summary>
    ///<returns>A string that specifies the pickup directory for e-mail messages.</returns>
    property PickupDirectoryLocation: string read get_PickupDirectoryLocation write set_PickupDirectoryLocation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSmtpSpecifiedPickupDirectoryElement = class(TDNGenericImport<DNSmtpSpecifiedPickupDirectoryElementClass, DNSmtpSpecifiedPickupDirectoryElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSocketElementClass = interface(DNObjectClass)
  ['{7FD51C9A-2691-5602-92F8-EB41959DC853}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.SocketElement" />
    ///  class. </summary>
    {class} function init: DNSocketElement;

  end;

  ///<summary>Represents information used to configure <see cref="T:System.Net.Sockets.Socket" />
  ///  objects. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.SocketElement')]
  DNSocketElement = interface(DNObject)
  ['{ABBF8192-167B-3ADD-B48D-5367283B76FE}']
  { getters & setters } 

    function get_AlwaysUseCompletionPortsForAccept: Boolean;
    procedure set_AlwaysUseCompletionPortsForAccept(value: Boolean);
    function get_AlwaysUseCompletionPortsForConnect: Boolean;
    procedure set_AlwaysUseCompletionPortsForConnect(value: Boolean);
    function get_IPProtectionLevel: DNIPProtectionLevel;
    procedure set_IPProtectionLevel(value: DNIPProtectionLevel);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a Boolean value that specifies whether completion ports are used when accepting connections.</summary>
    ///<returns><see langword="true" />
    ///  to use completion ports; otherwise, <see langword="false" />
    ///  .</returns>
    property AlwaysUseCompletionPortsForAccept: Boolean read get_AlwaysUseCompletionPortsForAccept write set_AlwaysUseCompletionPortsForAccept;
    ///<summary>Gets or sets a Boolean value that specifies whether completion ports are used when making connections.</summary>
    ///<returns><see langword="true" />
    ///  to use completion ports; otherwise, <see langword="false" />
    ///  .</returns>
    property AlwaysUseCompletionPortsForConnect: Boolean read get_AlwaysUseCompletionPortsForConnect write set_AlwaysUseCompletionPortsForConnect;
    ///<summary>Gets or sets a value that specifies the default <see cref="T:System.Net.Sockets.IPProtectionLevel" />
    ///  to use for a socket.</summary>
    ///<returns>The value of the <see cref="T:System.Net.Sockets.IPProtectionLevel" />
    ///  for the current instance.</returns>
    property IPProtectionLevel: DNIPProtectionLevel read get_IPProtectionLevel write set_IPProtectionLevel;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSocketElement = class(TDNGenericImport<DNSocketElementClass, DNSocketElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebProxyScriptElementClass = interface(DNObjectClass)
  ['{BF22DBF0-B21C-51B1-890E-B007D10B9859}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Net.Configuration.WebProxyScriptElement" />
    ///  class.</summary>
    {class} function init: DNWebProxyScriptElement;

  end;

  ///<summary>Represents information used to configure Web proxy scripts. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.WebProxyScriptElement')]
  DNWebProxyScriptElement = interface(DNObject)
  ['{4B0C914B-BA8B-34EE-9F99-C7AD97E4D65C}']
  { getters & setters } 

    function get_AutoConfigUrlRetryInterval: Int32;
    procedure set_AutoConfigUrlRetryInterval(value: Int32);
    function get_DownloadTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_DownloadTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoConfigUrlRetryInterval: Int32 read get_AutoConfigUrlRetryInterval write set_AutoConfigUrlRetryInterval;
    ///<summary>Gets or sets the Web proxy script download timeout using the format hours:minutes:seconds.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  object that contains the timeout value. The default download timeout is one minute.</returns>
    property DownloadTimeout: DDN.mscorlib.DNTimeSpan read get_DownloadTimeout write set_DownloadTimeout;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebProxyScriptElement = class(TDNGenericImport<DNWebProxyScriptElementClass, DNWebProxyScriptElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebRequestModuleElementClass = interface(DNObjectClass)
  ['{BDB1519E-A21B-5BE9-83CD-6CEC2FFBFBDB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  class. </summary>
    {class} function init: DNWebRequestModuleElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  class using the specified URI prefix and type information. </summary>
    ///  <param name="prefix">A string containing a URI prefix.</param>
    ///  <param name="type">A string containing the type and assembly information for the class that handles creating requests for resources that use the <paramref name="prefix" />
    ///  URI prefix. For more information, see the Remarks section.</param>
    {class} function init(prefix: string; &type: string): DNWebRequestModuleElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  class using the specified URI prefix and type identifier.</summary>
    ///  <param name="prefix">A string containing a URI prefix.</param>
    ///  <param name="type">A <see cref="T:System.Type" />
    ///  that identifies the class that handles creating requests for resources that use the <paramref name="prefix" />
    ///  URI prefix. </param>
    {class} function init(prefix: string; &type: DDN.mscorlib.DNType): DNWebRequestModuleElement; overload;

  end;

  ///<summary>Represents a URI prefix and the associated class that handles creating Web requests for the prefix. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.WebRequestModuleElement')]
  DNWebRequestModuleElement = interface(DNObject)
  ['{4640AA20-9DD7-3EE1-A78A-8E1EBED6AFFF}']
  { getters & setters } 

    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URI prefix for the current Web request module.</summary>
    ///<returns>A string that contains a URI prefix.</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>Gets or sets a class that creates Web requests.</summary>
    ///<returns>A <see cref="T:System.Type" />
    ///  instance that identifies a Web request module.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebRequestModuleElement = class(TDNGenericImport<DNWebRequestModuleElementClass, DNWebRequestModuleElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebUtilityElementClass = interface(DNObjectClass)
  ['{B17EA15C-E192-5701-AB47-8DF36D0F6409}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.WebUtilityElement" />
    ///  class.</summary>
    {class} function init: DNWebUtilityElement;

  end;

  ///<summary>Represents the WebUtility element in the configuration file.</summary>
  [DNTypeName('System.Net.Configuration.WebUtilityElement')]
  DNWebUtilityElement = interface(DNObject)
  ['{304AEA87-1B21-3EC5-A477-7CDF6639CA49}']
  { getters & setters } 

    function get_UnicodeDecodingConformance: DNUnicodeDecodingConformance;
    procedure set_UnicodeDecodingConformance(value: DNUnicodeDecodingConformance);
    function get_UnicodeEncodingConformance: DNUnicodeEncodingConformance;
    procedure set_UnicodeEncodingConformance(value: DNUnicodeEncodingConformance);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the default Unicode decoding conformance behavior used for an <see cref="T:System.Net.WebUtility" />
    ///  object.</summary>
    ///<returns>Returns <see cref="T:System.Net.Configuration.UnicodeDecodingConformance" />
    ///  .The default Unicode decoding behavior.</returns>
    property UnicodeDecodingConformance: DNUnicodeDecodingConformance read get_UnicodeDecodingConformance write set_UnicodeDecodingConformance;
    ///<summary>Gets the default Unicode encoding conformance behavior used for an <see cref="T:System.Net.WebUtility" />
    ///  object.</summary>
    ///<returns>Returns <see cref="T:System.Net.Configuration.UnicodeEncodingConformance" />
    ///  .The default Unicode encoding behavior.</returns>
    property UnicodeEncodingConformance: DNUnicodeEncodingConformance read get_UnicodeEncodingConformance write set_UnicodeEncodingConformance;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebUtilityElement = class(TDNGenericImport<DNWebUtilityElementClass, DNWebUtilityElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWindowsAuthenticationElementClass = interface(DNObjectClass)
  ['{05DAC69E-3CD7-521E-A2C2-D55E1C0EEB2F}']
  { constructors } 

    {class} function init: DNWindowsAuthenticationElement;

  end;

  [DNTypeName('System.Net.Configuration.WindowsAuthenticationElement')]
  DNWindowsAuthenticationElement = interface(DNObject)
  ['{F6155DD5-9EA5-361F-9C44-51C694A7F38A}']
  { getters & setters } 

    function get_DefaultCredentialsHandleCacheSize: Int32;
    procedure set_DefaultCredentialsHandleCacheSize(value: Int32);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultCredentialsHandleCacheSize: Int32 read get_DefaultCredentialsHandleCacheSize write set_DefaultCredentialsHandleCacheSize;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWindowsAuthenticationElement = class(TDNGenericImport<DNWindowsAuthenticationElementClass, DNWindowsAuthenticationElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNMailSettingsSectionGroupClass = interface(DNObjectClass)
  ['{287FD533-204E-5E25-A4B6-5DE60C3E1D98}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" />
    ///  class.</summary>
    {class} function init: DNMailSettingsSectionGroup;

  end;

  ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" />
  ///  class.</summary>
  [DNTypeName('System.Net.Configuration.MailSettingsSectionGroup')]
  DNMailSettingsSectionGroup = interface(DNObject)
  ['{1B183768-EEB4-3060-8BFE-E0FFDBFD8FE9}']
  { getters & setters } 

    function get_Smtp: DNSmtpSection;
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DDN.System.Configuration.DNConfigurationSectionCollection;
    function get_SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the SMTP settings for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.SmtpSection" />
    ///  object that contains configuration information for the local computer.</returns>
    property Smtp: DNSmtpSection read get_Smtp;
    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DDN.System.Configuration.DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNMailSettingsSectionGroup = class(TDNGenericImport<DNMailSettingsSectionGroupClass, DNMailSettingsSectionGroup>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNNetSectionGroupClass = interface(DNObjectClass)
  ['{FBB9DBF5-CA3A-5041-A444-3941EADFFD2E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Net.Configuration.NetSectionGroup" />
    ///  class. </summary>
    {class} function init: DNNetSectionGroup;

  { static methods } 

    ///<summary>Gets the <see langword="System.Net" />
    ///  configuration section group from the specified configuration file.</summary>
    ///  <param name="config">A <see cref="T:System.Configuration.Configuration" />
    ///  that represents a configuration file.</param>
    ///<returns>A <see cref="T:System.Net.Configuration.NetSectionGroup" />
    ///  that represents the <see langword="System.Net" />
    ///  settings in <paramref name="config" />
    ///  .</returns>
    {class} function GetSectionGroup(config: DDN.System.Configuration.DNConfiguration): DNNetSectionGroup;

  end;

  ///<summary>Gets the section group information for the networking namespaces. This class cannot be inherited.</summary>
  [DNTypeName('System.Net.Configuration.NetSectionGroup')]
  DNNetSectionGroup = interface(DNObject)
  ['{494C85DF-5186-3ADB-986B-0C722FF3C77E}']
  { getters & setters } 

    function get_AuthenticationModules: DNAuthenticationModulesSection;
    function get_ConnectionManagement: DNConnectionManagementSection;
    function get_DefaultProxy: DNDefaultProxySection;
    function get_MailSettings: DNMailSettingsSectionGroup;
    function get_RequestCaching: DNRequestCachingSection;
    function get_Settings: DNSettingsSection;
    function get_WebRequestModules: DNWebRequestModulesSection;
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DDN.System.Configuration.DNConfigurationSectionCollection;
    function get_SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the configuration section containing the authentication modules registered for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.AuthenticationModulesSection" />
    ///  object.</returns>
    property AuthenticationModules: DNAuthenticationModulesSection read get_AuthenticationModules;
    ///<summary>Gets the configuration section containing the connection management settings for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.ConnectionManagementSection" />
    ///  object.</returns>
    property ConnectionManagement: DNConnectionManagementSection read get_ConnectionManagement;
    ///<summary>Gets the configuration section containing the default Web proxy server settings for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.DefaultProxySection" />
    ///  object.</returns>
    property DefaultProxy: DNDefaultProxySection read get_DefaultProxy;
    ///<summary>Gets the configuration section containing the SMTP client e-mail settings for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" />
    ///  object.</returns>
    property MailSettings: DNMailSettingsSectionGroup read get_MailSettings;
    ///<summary>Gets the configuration section containing the cache configuration settings for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.RequestCachingSection" />
    ///  object.</returns>
    property RequestCaching: DNRequestCachingSection read get_RequestCaching;
    ///<summary>Gets the configuration section containing the network settings for the local computer.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.SettingsSection" />
    ///  object.</returns>
    property Settings: DNSettingsSection read get_Settings;
    ///<summary>Gets the configuration section containing the modules registered for use with the <see cref="T:System.Net.WebRequest" />
    ///  class.</summary>
    ///<returns>A <see cref="T:System.Net.Configuration.WebRequestModulesSection" />
    ///  object.</returns>
    property WebRequestModules: DNWebRequestModulesSection read get_WebRequestModules;
    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DDN.System.Configuration.DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNNetSectionGroup = class(TDNGenericImport<DNNetSectionGroupClass, DNNetSectionGroup>) end;


implementation

end.
