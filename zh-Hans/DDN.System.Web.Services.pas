//----------------------------------------------------------------------------
//  System.Web.Services.dll: System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Web.Services
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Web.Services;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.EnterpriseServices,
  DDN.System.Xml,
  DDN.System,
  DDN.System.Web,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Web.Services.Configuration----------------
  ///<summary>
  ///  指定用于 Web 服务配置文件中设置 SOAP 扩展的优先级和组属性的值。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.PriorityGroup')]
  DNPriorityGroup = type Integer;
  DNPriorityGroupHelper = record helper for DNPriorityGroup
  public const
    ///<summary>
    ///  表示 1 的值。
    ///  表示 SOAP 扩展执行具有最高优先级的 SOAP 扩展的组中。
    ///</summary>
    High = 0;
    ///<summary>
    ///  表示值 0。
    ///  表示 SOAP 扩展执行 SOAP 扩展优先级最低的组中。
    ///</summary>
    Low = 1;
  end;


  //-------------namespace: System.Web.Services.Configuration----------------
  ///<summary>
  ///  指定用于解密从 HTTP 请求中的客户端浏览器发送的数据的传输协议。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.WebServiceProtocols')]
  DNWebServiceProtocols = type Integer;
  DNWebServiceProtocolsHelper = record helper for DNWebServiceProtocols
  public const
    ///<summary>
    ///  未知的协议。
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  HTTP SOAP 协议中。
    ///</summary>
    HttpSoap = 1;
    ///<summary>
    ///  HTTP GET 协议。
    ///</summary>
    HttpGet = 2;
    ///<summary>
    ///  HTTP POST 协议。
    ///</summary>
    HttpPost = 4;
    ///<summary>
    ///  Web 服务文档的协议。
    ///</summary>
    Documentation = 8;
    ///<summary>
    ///  HTTP POST LOCALHOST 协议中。
    ///</summary>
    HttpPostLocalhost = 16;
    ///<summary>
    ///  HTTP SOAP 版本 1.2 协议。
    ///</summary>
    HttpSoap12 = 32;
    ///<summary>
    ///  HTTP SOAP 协议的任何版本。
    ///</summary>
    AnyHttpSoap = 33;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>
  ///  指定 XML Web 服务的终结点可以支持传输的类型。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationFlow')]
  DNOperationFlow = type Integer;
  DNOperationFlowHelper = record helper for DNOperationFlow
  public const
    ///<summary>
    ///  指示 XML Web 服务的终结点接收不传输。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指示 XML Web 服务的终结点接收一条消息。
    ///</summary>
    OneWay = 1;
    ///<summary>
    ///  指示 XML Web 服务的终结点发送一条消息。
    ///</summary>
    Notification = 2;
    ///<summary>
    ///  表示 XML Web 服务的终结点接收消息时，请将发送一条相关的消息。
    ///</summary>
    RequestResponse = 3;
    ///<summary>
    ///  指示 XML Web 服务的终结点发送一条消息，然后接收相关的消息。
    ///</summary>
    SolicitResponse = 4;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>
  ///  指定是否进行导入到服务器或客户端计算机。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImportStyle')]
  DNServiceDescriptionImportStyle = type Integer;
  DNServiceDescriptionImportStyleHelper = record helper for DNServiceDescriptionImportStyle
  public const
    ///<summary>
    ///  指定应在客户端计算机进行导入。
    ///</summary>
    Client = 0;
    ///<summary>
    ///  指定应与服务器进行导入。
    ///</summary>
    Server = 1;
    ///<summary>
    ///  指定应给服务器接口进行导入。
    ///</summary>
    ServerInterface = 2;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>
  ///  指定的类型生成的警告 <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.Import(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)" />
  ///  。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImportWarnings')]
  DNServiceDescriptionImportWarnings = type Integer;
  DNServiceDescriptionImportWarningsHelper = record helper for DNServiceDescriptionImportWarnings
  public const
    ///<summary>
    ///  指定任何代理类由生成 <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.Import(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)" />
    ///  方法。
    ///</summary>
    NoCodeGenerated = 1;
    ///<summary>
    ///  指定至少一个可选 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  为 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  要导入已被忽略。
    ///</summary>
    OptionalExtensionsIgnored = 2;
    ///<summary>
    ///  指定在至少一个必需的 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  为 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  要导入已被忽略。
    ///</summary>
    RequiredExtensionsIgnored = 4;
    ///<summary>
    ///  指定在至少一个 <see cref="T:System.Web.Services.Description.Operation" />
    ///  为 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  要导入是不受支持的类型，已被忽略。
    ///</summary>
    UnsupportedOperationsIgnored = 8;
    ///<summary>
    ///  指定在至少一个 <see cref="T:System.Web.Services.Description.Binding" />
    ///  为 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  要导入是不受支持的类型，已被忽略。
    ///</summary>
    UnsupportedBindingsIgnored = 16;
    ///<summary>
    ///  指定由生成代理类 <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.Import(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)" />
    ///  方法不包含任何方法。
    ///</summary>
    NoMethodsGenerated = 32;
    ///<summary>
    ///  指定 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  架构无效。
    ///</summary>
    SchemaValidation = 64;
    ///<summary>
    ///  指定 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  要导入不符合 WS-基本配置文件。
    ///</summary>
    WsiConformance = 128;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>
  ///  此枚举应用于的类层次结构级别的 XML Web 服务中指定所发生的操作的类型。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapBindingStyle')]
  DNSoapBindingStyle = type Integer;
  DNSoapBindingStyleHelper = record helper for DNSoapBindingStyle
  public const
    ///<summary>
    ///  Web 服务描述语言 (WSDL) 文件的当前层次结构级别的操作的默认类型。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  正在传输的消息是面向文档的。
    ///</summary>
    Document = 1;
    ///<summary>
    ///  正在传输的消息包含来自该过程中调用过程或返回值的参数。
    ///  RPC 是"远程过程调用。"的首字母缩写
    ///</summary>
    Rpc = 2;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>
  ///  指定是否为抽象类型定义或具体架构定义进行编码的消息部分。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapBindingUse')]
  DNSoapBindingUse = type Integer;
  DNSoapBindingUseHelper = record helper for DNSoapBindingUse
  public const
    ///<summary>
    ///  指定了空字符串 ("") 为相应的 XML 值 <see langword="use" />
    ///  属性。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  使用给定的编码规则进行编码的消息部分。
    ///</summary>
    Encoded = 1;
    ///<summary>
    ///  消息部分表示具体的架构。
    ///</summary>
    Literal = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>
  ///  指定 XML Web 服务方法的调用方式。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.LogicalMethodTypes')]
  DNLogicalMethodTypes = type Integer;
  DNLogicalMethodTypesHelper = record helper for DNLogicalMethodTypes
  public const
    ///<summary>
    ///  以同步方式调用 XML Web 服务方法。
    ///</summary>
    Sync = 1;
    ///<summary>
    ///  以异步方式调用 XML Web 服务方法。
    ///</summary>
    Async = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>
  ///  指定是否的接收方 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
  ///  是 XML Web 服务、 XML Web 服务客户端，还是这两者。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderDirection')]
  DNSoapHeaderDirection = type Integer;
  DNSoapHeaderDirectionHelper = record helper for DNSoapHeaderDirection
  public const
    ///<summary>
    ///  指定 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  发送到 XML Web 服务。
    ///</summary>
    In_ = 1;
    ///<summary>
    ///  指定 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  发送给 XML Web 服务客户端。
    ///</summary>
    Out_ = 2;
    ///<summary>
    ///  指定 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  发送给 XML Web 服务和 XML Web 服务客户端。
    ///</summary>
    InOut = 3;
    ///<summary>
    ///  指定 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  由 XML Web 服务方法引发异常时发送给 XML Web 服务客户端。
    ///</summary>
    Fault = 4;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>
  ///  指定 SOAP 消息的处理阶段。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapMessageStage')]
  DNSoapMessageStage = type Integer;
  DNSoapMessageStageHelper = record helper for DNSoapMessageStage
  public const
    ///<summary>
    ///  正前方阶段 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  正在序列化。
    ///</summary>
    BeforeSerialize = 1;
    ///<summary>
    ///  舞台紧后面 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  序列化时，SOAP 消息发送之前通过缆线。
    ///</summary>
    AfterSerialize = 2;
    ///<summary>
    ///  舞台之前 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  从 SOAP 消息通过网络发送到一个对象进行反序列化。
    ///</summary>
    BeforeDeserialize = 4;
    ///<summary>
    ///  舞台紧后面 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  进行反序列化从 SOAP 消息到对象。
    ///</summary>
    AfterDeserialize = 8;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>
  ///  指定如何在 SOAP 消息中设置参数的格式。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapParameterStyle')]
  DNSoapParameterStyle = type Integer;
  DNSoapParameterStyleHelper = record helper for DNSoapParameterStyle
  public const
    ///<summary>
    ///  使用默认值指定 <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  XML Web 服务。
    ///  可以通过应用设置的默认值为 XML Web 服务 <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  于实现 XML Web 服务的类。
    ///  如果 <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  不应用于类实现 XML Web 服务，默认值 <see cref="F:System.Web.Services.Protocols.SoapParameterStyle.Wrapped" />
    ///  。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  发往和来自 XML Web 服务方法的参数放置在紧随的 XML 元素中 <see langword="Body" />
    ///  SOAP 请求或 SOAP 响应中的元素。
    ///</summary>
    Bare = 1;
    ///<summary>
    ///  发往和来自 XML Web 服务方法的参数封装在单个的 XML 元素 followig <see langword="Body" />
    ///  SOAP 请求或 SOAP 响应的 XML 部分中的元素。
    ///</summary>
    Wrapped = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>
  ///  指定用来与 XML Web 服务进行通信的 SOAP 协议的版本。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapProtocolVersion')]
  DNSoapProtocolVersion = type Integer;
  DNSoapProtocolVersionHelper = record helper for DNSoapProtocolVersion
  public const
    ///<summary>
    ///  此枚举的默认值。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  SOAP 协议版本 1.1。
    ///</summary>
    Soap11 = 1;
    ///<summary>
    ///  SOAP 协议 1.2 版。
    ///</summary>
    Soap12 = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>
  ///  指定如何将 SOAP 消息路由到承载该 XML Web 服务的 Web 服务器。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServiceRoutingStyle')]
  DNSoapServiceRoutingStyle = type Integer;
  DNSoapServiceRoutingStyleHelper = record helper for DNSoapServiceRoutingStyle
  public const
    ///<summary>
    ///  根据 SOAP 消息路由 <see langword="SOAPAction" />
    ///  HTTP 标头。
    ///</summary>
    SoapAction = 0;
    ///<summary>
    ///  SOAP 消息将路由基于后面的第一个子元素上 <see langword="&lt;Body&gt;" />
    ///  SOAP 消息的 XML 元素。
    ///</summary>
    RequestElement = 1;
  end;


  //-------------namespace: System.Web.Services----------------
  ///<summary>
  ///  描述 Web 服务声明才能符合的 Web 服务互操作性 (WSI) 规范。
  ///</summary>
  [DNTypeName('System.Web.Services.WsiProfiles')]
  DNWsiProfiles = type Integer;
  DNWsiProfilesHelper = record helper for DNWsiProfiles
  public const
    ///<summary>
    ///  Web 服务进行任何一致性声明。
    ///</summary>
    None = 0;
    ///<summary>
    ///  该 web 服务声明使其符合 WSI 基本配置文件 1.1 版。
    ///</summary>
    BasicProfile1_1 = 1;
  end;




type


{ declares }

  DNXmlFormatExtensionAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionAttribute, namespace: System.Web.Services.Configuration
  DNXmlFormatExtensionPointAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionPointAttribute, namespace: System.Web.Services.Configuration
  DNXmlFormatExtensionPrefixAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute, namespace: System.Web.Services.Configuration
  DNHttpMethodAttribute = interface; // type: System.Web.Services.Protocols.HttpMethodAttribute, namespace: System.Web.Services.Protocols
  DNMatchAttribute = interface; // type: System.Web.Services.Protocols.MatchAttribute, namespace: System.Web.Services.Protocols
  DNSoapDocumentMethodAttribute = interface; // type: System.Web.Services.Protocols.SoapDocumentMethodAttribute, namespace: System.Web.Services.Protocols
  DNSoapDocumentServiceAttribute = interface; // type: System.Web.Services.Protocols.SoapDocumentServiceAttribute, namespace: System.Web.Services.Protocols
  DNSoapExtensionAttribute = interface; // type: System.Web.Services.Protocols.SoapExtensionAttribute, namespace: System.Web.Services.Protocols
  DNSoapHeaderAttribute = interface; // type: System.Web.Services.Protocols.SoapHeaderAttribute, namespace: System.Web.Services.Protocols
  DNSoapRpcMethodAttribute = interface; // type: System.Web.Services.Protocols.SoapRpcMethodAttribute, namespace: System.Web.Services.Protocols
  DNSoapRpcServiceAttribute = interface; // type: System.Web.Services.Protocols.SoapRpcServiceAttribute, namespace: System.Web.Services.Protocols
  DNWebMethodAttribute = interface; // type: System.Web.Services.WebMethodAttribute, namespace: System.Web.Services
  DNWebServiceAttribute = interface; // type: System.Web.Services.WebServiceAttribute, namespace: System.Web.Services
  DNWebServiceBindingAttribute = interface; // type: System.Web.Services.WebServiceBindingAttribute, namespace: System.Web.Services
  DNBasicProfileViolationCollection = interface; // type: System.Web.Services.Description.BasicProfileViolationCollection, namespace: System.Web.Services.Description
  DNMimePartCollection = interface; // type: System.Web.Services.Description.MimePartCollection, namespace: System.Web.Services.Description
  DNMimeTextMatchCollection = interface; // type: System.Web.Services.Description.MimeTextMatchCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionBaseCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionBaseCollection, namespace: System.Web.Services.Description
  DNBindingCollection = interface; // type: System.Web.Services.Description.BindingCollection, namespace: System.Web.Services.Description
  DNFaultBindingCollection = interface; // type: System.Web.Services.Description.FaultBindingCollection, namespace: System.Web.Services.Description
  DNImportCollection = interface; // type: System.Web.Services.Description.ImportCollection, namespace: System.Web.Services.Description
  DNMessageCollection = interface; // type: System.Web.Services.Description.MessageCollection, namespace: System.Web.Services.Description
  DNMessagePartCollection = interface; // type: System.Web.Services.Description.MessagePartCollection, namespace: System.Web.Services.Description
  DNOperationBindingCollection = interface; // type: System.Web.Services.Description.OperationBindingCollection, namespace: System.Web.Services.Description
  DNOperationCollection = interface; // type: System.Web.Services.Description.OperationCollection, namespace: System.Web.Services.Description
  DNOperationFaultCollection = interface; // type: System.Web.Services.Description.OperationFaultCollection, namespace: System.Web.Services.Description
  DNOperationMessageCollection = interface; // type: System.Web.Services.Description.OperationMessageCollection, namespace: System.Web.Services.Description
  DNPortCollection = interface; // type: System.Web.Services.Description.PortCollection, namespace: System.Web.Services.Description
  DNPortTypeCollection = interface; // type: System.Web.Services.Description.PortTypeCollection, namespace: System.Web.Services.Description
  DNServiceCollection = interface; // type: System.Web.Services.Description.ServiceCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionFormatExtensionCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection, namespace: System.Web.Services.Description
  DNWebReferenceCollection = interface; // type: System.Web.Services.Description.WebReferenceCollection, namespace: System.Web.Services.Description
  DNDiscoveryClientResultCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientResultCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryReferenceCollection = interface; // type: System.Web.Services.Discovery.DiscoveryReferenceCollection, namespace: System.Web.Services.Discovery
  DNSoapHeaderCollection = interface; // type: System.Web.Services.Protocols.SoapHeaderCollection, namespace: System.Web.Services.Protocols
  DNDiscoveryClientDocumentCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientDocumentCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryClientReferenceCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientReferenceCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryExceptionDictionary = interface; // type: System.Web.Services.Discovery.DiscoveryExceptionDictionary, namespace: System.Web.Services.Discovery
  DNWebService = interface; // type: System.Web.Services.WebService, namespace: System.Web.Services
  DNProtocolElementCollection = interface; // type: System.Web.Services.Configuration.ProtocolElementCollection, namespace: System.Web.Services.Configuration
  DNSoapExtensionTypeElementCollection = interface; // type: System.Web.Services.Configuration.SoapExtensionTypeElementCollection, namespace: System.Web.Services.Configuration
  DNTypeElementCollection = interface; // type: System.Web.Services.Configuration.TypeElementCollection, namespace: System.Web.Services.Configuration
  DNWsiProfilesElementCollection = interface; // type: System.Web.Services.Configuration.WsiProfilesElementCollection, namespace: System.Web.Services.Configuration
  DNWebServicesSection = interface; // type: System.Web.Services.Configuration.WebServicesSection, namespace: System.Web.Services.Configuration
  DNDiagnosticsElement = interface; // type: System.Web.Services.Configuration.DiagnosticsElement, namespace: System.Web.Services.Configuration
  DNProtocolElement = interface; // type: System.Web.Services.Configuration.ProtocolElement, namespace: System.Web.Services.Configuration
  DNSoapEnvelopeProcessingElement = interface; // type: System.Web.Services.Configuration.SoapEnvelopeProcessingElement, namespace: System.Web.Services.Configuration
  DNSoapExtensionTypeElement = interface; // type: System.Web.Services.Configuration.SoapExtensionTypeElement, namespace: System.Web.Services.Configuration
  DNTypeElement = interface; // type: System.Web.Services.Configuration.TypeElement, namespace: System.Web.Services.Configuration
  DNWsdlHelpGeneratorElement = interface; // type: System.Web.Services.Configuration.WsdlHelpGeneratorElement, namespace: System.Web.Services.Configuration
  DNWsiProfilesElement = interface; // type: System.Web.Services.Configuration.WsiProfilesElement, namespace: System.Web.Services.Configuration
  DNInvokeCompletedEventArgs = interface; // type: System.Web.Services.Protocols.InvokeCompletedEventArgs, namespace: System.Web.Services.Protocols
  DNSoapException = interface; // type: System.Web.Services.Protocols.SoapException, namespace: System.Web.Services.Protocols
  DNSoapHeaderException = interface; // type: System.Web.Services.Protocols.SoapHeaderException, namespace: System.Web.Services.Protocols
  DNWebClientProtocol = interface; // type: System.Web.Services.Protocols.WebClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpWebClientProtocol = interface; // type: System.Web.Services.Protocols.HttpWebClientProtocol, namespace: System.Web.Services.Protocols
  DNDiscoveryClientProtocol = interface; // type: System.Web.Services.Discovery.DiscoveryClientProtocol, namespace: System.Web.Services.Discovery
  DNHttpSimpleClientProtocol = interface; // type: System.Web.Services.Protocols.HttpSimpleClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpGetClientProtocol = interface; // type: System.Web.Services.Protocols.HttpGetClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpPostClientProtocol = interface; // type: System.Web.Services.Protocols.HttpPostClientProtocol, namespace: System.Web.Services.Protocols
  DNSoapHttpClientProtocol = interface; // type: System.Web.Services.Protocols.SoapHttpClientProtocol, namespace: System.Web.Services.Protocols
  DNBasicProfileViolation = interface; // type: System.Web.Services.Description.BasicProfileViolation, namespace: System.Web.Services.Description
  DNBasicProfileViolationEnumerator = interface; // type: System.Web.Services.Description.BasicProfileViolationEnumerator, namespace: System.Web.Services.Description
  DNDocumentableItem = interface; // type: System.Web.Services.Description.DocumentableItem, namespace: System.Web.Services.Description
  DNImport = interface; // type: System.Web.Services.Description.Import, namespace: System.Web.Services.Description
  DNNamedItem = interface; // type: System.Web.Services.Description.NamedItem, namespace: System.Web.Services.Description
  DNBinding = interface; // type: System.Web.Services.Description.Binding, namespace: System.Web.Services.Description
  DNMessage = interface; // type: System.Web.Services.Description.Message, namespace: System.Web.Services.Description
  DNMessageBinding = interface; // type: System.Web.Services.Description.MessageBinding, namespace: System.Web.Services.Description
  DNFaultBinding = interface; // type: System.Web.Services.Description.FaultBinding, namespace: System.Web.Services.Description
  DNInputBinding = interface; // type: System.Web.Services.Description.InputBinding, namespace: System.Web.Services.Description
  DNOutputBinding = interface; // type: System.Web.Services.Description.OutputBinding, namespace: System.Web.Services.Description
  DNMessagePart = interface; // type: System.Web.Services.Description.MessagePart, namespace: System.Web.Services.Description
  DNOperation = interface; // type: System.Web.Services.Description.Operation, namespace: System.Web.Services.Description
  DNOperationBinding = interface; // type: System.Web.Services.Description.OperationBinding, namespace: System.Web.Services.Description
  DNOperationMessage = interface; // type: System.Web.Services.Description.OperationMessage, namespace: System.Web.Services.Description
  DNOperationFault = interface; // type: System.Web.Services.Description.OperationFault, namespace: System.Web.Services.Description
  DNOperationInput = interface; // type: System.Web.Services.Description.OperationInput, namespace: System.Web.Services.Description
  DNOperationOutput = interface; // type: System.Web.Services.Description.OperationOutput, namespace: System.Web.Services.Description
  DNPort = interface; // type: System.Web.Services.Description.Port, namespace: System.Web.Services.Description
  DNPortType = interface; // type: System.Web.Services.Description.PortType, namespace: System.Web.Services.Description
  DNService = interface; // type: System.Web.Services.Description.Service, namespace: System.Web.Services.Description
  DNServiceDescription = interface; // type: System.Web.Services.Description.ServiceDescription, namespace: System.Web.Services.Description
  DNTypes = interface; // type: System.Web.Services.Description.Types, namespace: System.Web.Services.Description
  DNMimeTextMatch = interface; // type: System.Web.Services.Description.MimeTextMatch, namespace: System.Web.Services.Description
  DNProtocolImporter = interface; // type: System.Web.Services.Description.ProtocolImporter, namespace: System.Web.Services.Description
  DNSoapProtocolImporter = interface; // type: System.Web.Services.Description.SoapProtocolImporter, namespace: System.Web.Services.Description
  DNProtocolReflector = interface; // type: System.Web.Services.Description.ProtocolReflector, namespace: System.Web.Services.Description
  DNServiceDescriptionFormatExtension = interface; // type: System.Web.Services.Description.ServiceDescriptionFormatExtension, namespace: System.Web.Services.Description
  DNHttpAddressBinding = interface; // type: System.Web.Services.Description.HttpAddressBinding, namespace: System.Web.Services.Description
  DNHttpBinding = interface; // type: System.Web.Services.Description.HttpBinding, namespace: System.Web.Services.Description
  DNHttpOperationBinding = interface; // type: System.Web.Services.Description.HttpOperationBinding, namespace: System.Web.Services.Description
  DNHttpUrlEncodedBinding = interface; // type: System.Web.Services.Description.HttpUrlEncodedBinding, namespace: System.Web.Services.Description
  DNHttpUrlReplacementBinding = interface; // type: System.Web.Services.Description.HttpUrlReplacementBinding, namespace: System.Web.Services.Description
  DNMimeContentBinding = interface; // type: System.Web.Services.Description.MimeContentBinding, namespace: System.Web.Services.Description
  DNMimeMultipartRelatedBinding = interface; // type: System.Web.Services.Description.MimeMultipartRelatedBinding, namespace: System.Web.Services.Description
  DNMimePart = interface; // type: System.Web.Services.Description.MimePart, namespace: System.Web.Services.Description
  DNMimeTextBinding = interface; // type: System.Web.Services.Description.MimeTextBinding, namespace: System.Web.Services.Description
  DNMimeXmlBinding = interface; // type: System.Web.Services.Description.MimeXmlBinding, namespace: System.Web.Services.Description
  DNSoapAddressBinding = interface; // type: System.Web.Services.Description.SoapAddressBinding, namespace: System.Web.Services.Description
  DNSoap12AddressBinding = interface; // type: System.Web.Services.Description.Soap12AddressBinding, namespace: System.Web.Services.Description
  DNDescription_SoapBinding = interface; // type: System.Web.Services.Description.SoapBinding, namespace: System.Web.Services.Description
  DNSoap12Binding = interface; // type: System.Web.Services.Description.Soap12Binding, namespace: System.Web.Services.Description
  DNSoapBodyBinding = interface; // type: System.Web.Services.Description.SoapBodyBinding, namespace: System.Web.Services.Description
  DNSoap12BodyBinding = interface; // type: System.Web.Services.Description.Soap12BodyBinding, namespace: System.Web.Services.Description
  DNSoapFaultBinding = interface; // type: System.Web.Services.Description.SoapFaultBinding, namespace: System.Web.Services.Description
  DNSoap12FaultBinding = interface; // type: System.Web.Services.Description.Soap12FaultBinding, namespace: System.Web.Services.Description
  DNSoapHeaderBinding = interface; // type: System.Web.Services.Description.SoapHeaderBinding, namespace: System.Web.Services.Description
  DNSoap12HeaderBinding = interface; // type: System.Web.Services.Description.Soap12HeaderBinding, namespace: System.Web.Services.Description
  DNSoapHeaderFaultBinding = interface; // type: System.Web.Services.Description.SoapHeaderFaultBinding, namespace: System.Web.Services.Description
  DNSoapOperationBinding = interface; // type: System.Web.Services.Description.SoapOperationBinding, namespace: System.Web.Services.Description
  DNSoap12OperationBinding = interface; // type: System.Web.Services.Description.Soap12OperationBinding, namespace: System.Web.Services.Description
  DNServiceDescriptionImporter = interface; // type: System.Web.Services.Description.ServiceDescriptionImporter, namespace: System.Web.Services.Description
  DNServiceDescriptionReflector = interface; // type: System.Web.Services.Description.ServiceDescriptionReflector, namespace: System.Web.Services.Description
  DNSoapExtensionImporter = interface; // type: System.Web.Services.Description.SoapExtensionImporter, namespace: System.Web.Services.Description
  DNSoapExtensionReflector = interface; // type: System.Web.Services.Description.SoapExtensionReflector, namespace: System.Web.Services.Description
  DNSoapTransportImporter = interface; // type: System.Web.Services.Description.SoapTransportImporter, namespace: System.Web.Services.Description
  DNWebReference = interface; // type: System.Web.Services.Description.WebReference, namespace: System.Web.Services.Description
  DNWebReferenceOptions = interface; // type: System.Web.Services.Description.WebReferenceOptions, namespace: System.Web.Services.Description
  DNWebServicesInteroperability = interface; // type: System.Web.Services.Description.WebServicesInteroperability, namespace: System.Web.Services.Description
  DNDiscoveryClientProtocol_DiscoveryClientResultsFile = interface; // type: System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile, namespace: System.Web.Services.Discovery
  DNDiscoveryClientResult = interface; // type: System.Web.Services.Discovery.DiscoveryClientResult, namespace: System.Web.Services.Discovery
  DNDiscoveryDocument = interface; // type: System.Web.Services.Discovery.DiscoveryDocument, namespace: System.Web.Services.Discovery
  DNDiscoveryReference = interface; // type: System.Web.Services.Discovery.DiscoveryReference, namespace: System.Web.Services.Discovery
  DNContractReference = interface; // type: System.Web.Services.Discovery.ContractReference, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentReference = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentReference, namespace: System.Web.Services.Discovery
  DNSchemaReference = interface; // type: System.Web.Services.Discovery.SchemaReference, namespace: System.Web.Services.Discovery
  DNDiscoveryRequestHandler = interface; // type: System.Web.Services.Discovery.DiscoveryRequestHandler, namespace: System.Web.Services.Discovery
  DNDiscoverySearchPattern = interface; // type: System.Web.Services.Discovery.DiscoverySearchPattern, namespace: System.Web.Services.Discovery
  DNContractSearchPattern = interface; // type: System.Web.Services.Discovery.ContractSearchPattern, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentLinksPattern = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentLinksPattern, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentSearchPattern = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentSearchPattern, namespace: System.Web.Services.Discovery
  DNXmlSchemaSearchPattern = interface; // type: System.Web.Services.Discovery.XmlSchemaSearchPattern, namespace: System.Web.Services.Discovery
  DNDynamicDiscoveryDocument = interface; // type: System.Web.Services.Discovery.DynamicDiscoveryDocument, namespace: System.Web.Services.Discovery
  DNExcludePathInfo = interface; // type: System.Web.Services.Discovery.ExcludePathInfo, namespace: System.Web.Services.Discovery
  DNDiscovery_SoapBinding = interface; // type: System.Web.Services.Discovery.SoapBinding, namespace: System.Web.Services.Discovery
  DNLogicalMethodInfo = interface; // type: System.Web.Services.Protocols.LogicalMethodInfo, namespace: System.Web.Services.Protocols
  DNMimeFormatter = interface; // type: System.Web.Services.Protocols.MimeFormatter, namespace: System.Web.Services.Protocols
  DNMimeParameterReader = interface; // type: System.Web.Services.Protocols.MimeParameterReader, namespace: System.Web.Services.Protocols
  DNValueCollectionParameterReader = interface; // type: System.Web.Services.Protocols.ValueCollectionParameterReader, namespace: System.Web.Services.Protocols
  DNHtmlFormParameterReader = interface; // type: System.Web.Services.Protocols.HtmlFormParameterReader, namespace: System.Web.Services.Protocols
  DNUrlParameterReader = interface; // type: System.Web.Services.Protocols.UrlParameterReader, namespace: System.Web.Services.Protocols
  DNMimeParameterWriter = interface; // type: System.Web.Services.Protocols.MimeParameterWriter, namespace: System.Web.Services.Protocols
  DNUrlEncodedParameterWriter = interface; // type: System.Web.Services.Protocols.UrlEncodedParameterWriter, namespace: System.Web.Services.Protocols
  DNHtmlFormParameterWriter = interface; // type: System.Web.Services.Protocols.HtmlFormParameterWriter, namespace: System.Web.Services.Protocols
  DNUrlParameterWriter = interface; // type: System.Web.Services.Protocols.UrlParameterWriter, namespace: System.Web.Services.Protocols
  DNMimeReturnReader = interface; // type: System.Web.Services.Protocols.MimeReturnReader, namespace: System.Web.Services.Protocols
  DNAnyReturnReader = interface; // type: System.Web.Services.Protocols.AnyReturnReader, namespace: System.Web.Services.Protocols
  DNNopReturnReader = interface; // type: System.Web.Services.Protocols.NopReturnReader, namespace: System.Web.Services.Protocols
  DNTextReturnReader = interface; // type: System.Web.Services.Protocols.TextReturnReader, namespace: System.Web.Services.Protocols
  DNXmlReturnReader = interface; // type: System.Web.Services.Protocols.XmlReturnReader, namespace: System.Web.Services.Protocols
  DNPatternMatcher = interface; // type: System.Web.Services.Protocols.PatternMatcher, namespace: System.Web.Services.Protocols
  DNServerProtocol = interface; // type: System.Web.Services.Protocols.ServerProtocol, namespace: System.Web.Services.Protocols
  DNSoapServerProtocol = interface; // type: System.Web.Services.Protocols.SoapServerProtocol, namespace: System.Web.Services.Protocols
  DNServerProtocolFactory = interface; // type: System.Web.Services.Protocols.ServerProtocolFactory, namespace: System.Web.Services.Protocols
  DNSoapServerProtocolFactory = interface; // type: System.Web.Services.Protocols.SoapServerProtocolFactory, namespace: System.Web.Services.Protocols
  DNServerType = interface; // type: System.Web.Services.Protocols.ServerType, namespace: System.Web.Services.Protocols
  DNSoapServerType = interface; // type: System.Web.Services.Protocols.SoapServerType, namespace: System.Web.Services.Protocols
  DNSoap12FaultCodes = interface; // type: System.Web.Services.Protocols.Soap12FaultCodes, namespace: System.Web.Services.Protocols
  DNSoapExtension = interface; // type: System.Web.Services.Protocols.SoapExtension, namespace: System.Web.Services.Protocols
  DNSoapFaultSubCode = interface; // type: System.Web.Services.Protocols.SoapFaultSubCode, namespace: System.Web.Services.Protocols
  DNSoapHeader = interface; // type: System.Web.Services.Protocols.SoapHeader, namespace: System.Web.Services.Protocols
  DNSoapUnknownHeader = interface; // type: System.Web.Services.Protocols.SoapUnknownHeader, namespace: System.Web.Services.Protocols
  DNSoapHeaderHandling = interface; // type: System.Web.Services.Protocols.SoapHeaderHandling, namespace: System.Web.Services.Protocols
  DNSoapHeaderMapping = interface; // type: System.Web.Services.Protocols.SoapHeaderMapping, namespace: System.Web.Services.Protocols
  DNSoapMessage = interface; // type: System.Web.Services.Protocols.SoapMessage, namespace: System.Web.Services.Protocols
  DNSoapClientMessage = interface; // type: System.Web.Services.Protocols.SoapClientMessage, namespace: System.Web.Services.Protocols
  DNSoapServerMessage = interface; // type: System.Web.Services.Protocols.SoapServerMessage, namespace: System.Web.Services.Protocols
  DNSoapServerMethod = interface; // type: System.Web.Services.Protocols.SoapServerMethod, namespace: System.Web.Services.Protocols
  DNWebClientAsyncResult = interface; // type: System.Web.Services.Protocols.WebClientAsyncResult, namespace: System.Web.Services.Protocols
  DNWebServiceHandlerFactory = interface; // type: System.Web.Services.Protocols.WebServiceHandlerFactory, namespace: System.Web.Services.Protocols

{ delegates }

  ///<summary>
  ///  表示一个事件处理程序接受以异步方式调用 Web 方法的结果。
  ///  此类不能被继承。
  ///</summary>
  ///  <param name="sender">
  ///  对 Web 服务代理的引用。
  ///</param>
  ///  <param name="e"><see cref="T:System.Web.Services.Protocols.InvokeCompletedEventArgs" />
  ///  包含方法调用的结果。
  ///</param>
  [DNTypeName('System.Web.Services.Protocols.InvokeCompletedEventHandler')]
  DNInvokeCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNInvokeCompletedEventArgs) of object;




{ objects }

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D8F70425-9869-57D3-B301-B54D916F5E77}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlFormatExtensionAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  指定的 XML 元素和要添加指定的扩展点在运行时命名空间的类。
    ///</summary>
    ///  <param name="elementName">
    ///  由服务说明格式扩展添加到服务说明的 XML 元素。
    ///</param>
    ///  <param name="ns">
    ///  由服务说明格式扩展添加到服务说明 XML 元素的 XML 命名空间。
    ///</param>
    ///  <param name="extensionPoint1">
    ///  位于其上运行的服务说明格式扩展的扩展点。
    ///</param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  指定的 XML 元素和要添加指定的扩展点在运行时命名空间的类。
    ///</summary>
    ///  <param name="elementName">
    ///  由服务说明格式扩展添加到服务说明的 XML 元素。
    ///</param>
    ///  <param name="ns">
    ///  由服务说明格式扩展添加到服务说明 XML 元素的 XML 命名空间。
    ///</param>
    ///  <param name="extensionPoint1">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    ///  <param name="extensionPoint2">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  指定的 XML 元素和要添加指定的扩展点在运行时命名空间的类。
    ///</summary>
    ///  <param name="elementName">
    ///  由服务说明格式扩展添加到服务说明的 XML 元素。
    ///</param>
    ///  <param name="ns">
    ///  由服务说明格式扩展添加到服务说明 XML 元素的 XML 命名空间。
    ///</param>
    ///  <param name="extensionPoint1">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    ///  <param name="extensionPoint2">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    ///  <param name="extensionPoint3">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType; extensionPoint3: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  指定的 XML 元素和要添加指定的扩展点在运行时命名空间的类。
    ///</summary>
    ///  <param name="elementName">
    ///  由服务说明格式扩展添加到服务说明的 XML 元素。
    ///</param>
    ///  <param name="ns">
    ///  由服务说明格式扩展添加到服务说明 XML 元素的 XML 命名空间。
    ///</param>
    ///  <param name="extensionPoint1">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    ///  <param name="extensionPoint2">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    ///  <param name="extensionPoint3">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    ///  <param name="extensionPoint4">
    ///  在其上运行的服务说明格式扩展一个扩展点。
    ///</param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType; extensionPoint3: DDN.mscorlib.DNType; extensionPoint4: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  指定的 XML 元素和要添加指定的扩展点在运行时命名空间的类。
    ///</summary>
    ///  <param name="elementName">
    ///  由服务说明格式扩展添加到服务说明的 XML 元素。
    ///</param>
    ///  <param name="ns">
    ///  由服务说明格式扩展添加到服务说明 XML 元素的 XML 命名空间。
    ///</param>
    ///  <param name="extensionPoints">
    ///  在其上运行的服务说明格式扩展的扩展点的数组。
    ///</param>
    {class} function init(elementName: string; ns: string; extensionPoints: TArray<DDN.mscorlib.DNType>): DNXmlFormatExtensionAttribute; overload;

  end;

  ///<summary>
  ///  指定服务说明格式扩展运行在一个或多个扩展点。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionAttribute')]
  DNXmlFormatExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6774FB3A-8F83-34F9-852D-2DB2D8C29A84}']
  { getters & setters } 

    function get_ExtensionPoints: TArray<DDN.mscorlib.DNType>;
    procedure set_ExtensionPoints(value: TArray<DDN.mscorlib.DNType>);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  服务说明格式扩展旨在运行阶段。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Type" />
    ///  ，它指定服务说明格式扩展将要运行的阶段。
    ///</returns>
    property ExtensionPoints: TArray<DDN.mscorlib.DNType> read get_ExtensionPoints write set_ExtensionPoints;
    ///<summary>
    ///  获取或设置由服务说明格式扩展添加到服务说明的 XML 元素的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  由服务说明格式扩展添加到服务说明 XML 元素的 XML 命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置由服务说明格式扩展添加到服务说明的 XML 元素。
    ///</summary>
    ///<returns>
    ///  由服务说明格式扩展添加到服务说明的 XML 元素。
    ///</returns>
    property ElementName: string read get_ElementName write set_ElementName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionAttribute = class(TDNGenericImport<DNXmlFormatExtensionAttributeClass, DNXmlFormatExtensionAttribute>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionPointAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{65917D03-8A16-50D7-BD67-C94F07D86170}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionPointAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="memberName">
    ///  实现可以具有一个与之关联的服务说明格式扩展服务说明格式扩展的类的成员。
    ///</param>
    {class} function init(memberName: string): DNXmlFormatExtensionPointAttribute;

  end;

  ///<summary>
  ///  指定 XML 命名空间和 XML 命名空间前缀，用于服务说明格式扩展服务说明中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionPointAttribute')]
  DNXmlFormatExtensionPointAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F491878B-5101-3DA0-A124-BD84B2A35F98}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_AllowElements: Boolean;
    procedure set_AllowElements(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定实现服务说明格式扩展的类的成员可以具有一个与之关联的服务说明格式扩展。
    ///</summary>
    ///<returns>
    ///  实现可以具有一个与之关联的服务说明格式扩展服务说明格式扩展的类的成员。
    ///</returns>
    property MemberName: string read get_MemberName write set_MemberName;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在指定的成员的实现的服务说明格式扩展的类 <see cref="P:System.Web.Services.Configuration.XmlFormatExtensionPointAttribute.MemberName" />
    ///  属性可接受原始 XML 元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果实现服务说明的类的成员的格式设置中指定的扩展名 <see cref="P:System.Web.Services.Configuration.XmlFormatExtensionPointAttribute.MemberName" />
    ///  属性可接受原始 XML 元素; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AllowElements: Boolean read get_AllowElements write set_AllowElements;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionPointAttribute = class(TDNGenericImport<DNXmlFormatExtensionPointAttributeClass, DNXmlFormatExtensionPointAttribute>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionPrefixAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{DFFCB22C-D4B9-5488-8D5C-6278C0A2559B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlFormatExtensionPrefixAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute" />
    ///  类设置的 XML 命名空间和服务说明格式扩展的 XML 命名空间前缀。
    ///</summary>
    ///  <param name="prefix">
    ///  与服务说明格式扩展关联的 XML 命名空间前缀。
    ///</param>
    ///  <param name="ns">
    ///  与服务说明格式扩展关联的 XML 命名空间。
    ///</param>
    {class} function init(prefix: string; ns: string): DNXmlFormatExtensionPrefixAttribute; overload;

  end;

  ///<summary>
  ///  指定 XML 命名空间和 XML 命名空间前缀，用于服务说明格式扩展服务说明中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute')]
  DNXmlFormatExtensionPrefixAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{75AB7299-DF38-33D4-926A-6B22255CB9F8}']
  { getters & setters } 

    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置与服务说明格式扩展关联的 XML 命名空间前缀。
    ///</summary>
    ///<returns>
    ///  与服务说明格式扩展关联的 XML 命名空间前缀。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取或设置与服务说明格式扩展相关联的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  与服务说明格式扩展关联的 XML 命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionPrefixAttribute = class(TDNGenericImport<DNXmlFormatExtensionPrefixAttributeClass, DNXmlFormatExtensionPrefixAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4EFF01D8-7CCB-5902-8EBA-7BB33BE9574A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.HttpMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpMethodAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.HttpMethodAttribute" />
    ///  的新实例。
    ///</summary>
    ///  <param name="returnFormatter">
    ///  初始化 <see cref="P:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter" />
    ///  属性设置为 <see cref="T:System.Type" />
    ///  ，反序列化来自 XML Web 服务方法的响应。
    ///</param>
    ///  <param name="parameterFormatter">
    ///  初始化 <see cref="P:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter" />
    ///  属性设置为 <see cref="T:System.Type" />
    ///  来序列化从 XML Web 服务客户端发送到 XML Web 服务方法的参数。
    ///</param>
    {class} function init(returnFormatter: DDN.mscorlib.DNType; parameterFormatter: DDN.mscorlib.DNType): DNHttpMethodAttribute; overload;

  end;

  ///<summary>
  ///  将此特性应用于 XML Web 服务客户端使用 HTTP GET 或 HTTP POST，序列化参数的类型发送到 XML Web 服务方法，并将响应来自 XML Web 服务方法读取的设置。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpMethodAttribute')]
  DNHttpMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F9700E71-4145-3C50-93EB-1E66801792F0}']
  { getters & setters } 

    function get_ReturnFormatter: DDN.mscorlib.DNType;
    procedure set_ReturnFormatter(value: DDN.mscorlib.DNType);
    function get_ParameterFormatter: DDN.mscorlib.DNType;
    procedure set_ParameterFormatter(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Type" />
    ///  ，反序列化来自 XML Web 服务方法的响应。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  ，反序列化来自 XML Web 服务方法的响应。
    ///  没有默认值。
    ///</returns>
    property ReturnFormatter: DDN.mscorlib.DNType read get_ReturnFormatter write set_ReturnFormatter;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Type" />
    ///  来序列化从 XML Web 服务客户端发送到 XML Web 服务方法的参数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  来序列化从 XML Web 服务客户端发送到 XML Web 服务方法的参数。
    ///  没有默认值。
    ///</returns>
    property ParameterFormatter: DDN.mscorlib.DNType read get_ParameterFormatter write set_ParameterFormatter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNHttpMethodAttribute = class(TDNGenericImport<DNHttpMethodAttributeClass, DNHttpMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMatchAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BA40C50C-E4F8-5DED-8574-3F0C136D632F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.MatchAttribute" />
    ///  类，具有指定的模式。
    ///</summary>
    ///  <param name="pattern">
    ///  一个字符串，表示要匹配的模式。
    ///</param>
    {class} function init(pattern: string): DNMatchAttribute;

  end;

  ///<summary>
  ///  表示使用文本模式匹配进行的匹配的特性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.MatchAttribute')]
  DNMatchAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DA520CF3-3A02-37A4-911A-E1F744921457}']
  { getters & setters } 

    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_Group: Int32;
    procedure set_Group(value: Int32);
    function get_Capture: Int32;
    procedure set_Capture(value: Int32);
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_MaxRepeats: Int32;
    procedure set_MaxRepeats(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置表示要匹配的模式的正则表达式。
    ///</summary>
    ///<returns>
    ///  表示要匹配的模式的正则表达式。
    ///</returns>
    property Pattern: string read get_Pattern write set_Pattern;
    ///<summary>
    ///  获取或设置一个值，表示相关匹配项的分组。
    ///</summary>
    ///<returns>
    ///  一个值，表示相关匹配项的分组
    ///</returns>
    property Group: Int32 read get_Group write set_Group;
    ///<summary>
    ///  获取或设置一个值，表示分组中的匹配项的索引。
    ///</summary>
    ///<returns>
    ///  一个值，表示分组中的匹配项的索引。
    ///</returns>
    property Capture: Int32 read get_Capture write set_Capture;
    ///<summary>
    ///  获取或设置一个值，该值指示是否要匹配的模式为区分大小写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果匹配不区分大小写;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    ///<summary>
    ///  获取或设置要从匹配返回的值最大数目。
    ///</summary>
    ///<returns>
    ///  值从匹配中返回的最大数目。
    ///  默认值为-1，指的是返回所有值。
    ///</returns>
    property MaxRepeats: Int32 read get_MaxRepeats write set_MaxRepeats;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMatchAttribute = class(TDNGenericImport<DNMatchAttributeClass, DNMatchAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapDocumentMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4509BFBC-019F-5F2C-BD15-DCDA890A695D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapDocumentMethodAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  类设置 <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.Action" />
    ///  属性的值 <paramref name="action" />
    ///  参数。
    ///</summary>
    ///  <param name="action"><see langword="SOAPAction" />
    ///  SOAP 请求的 HTTP 标头字段。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.Action" />
    ///  属性。
    ///</param>
    {class} function init(action: string): DNSoapDocumentMethodAttribute; overload;

  end;

  ///<summary>
  ///  应用 <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
  ///  到方法会指定的 SOAP 消息到和来自该方法使用 <see langword="Document" />
  ///  格式设置。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapDocumentMethodAttribute')]
  DNSoapDocumentMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BF3FE395-DBD5-305B-8AE8-775F175DCDD4}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_OneWay: Boolean;
    procedure set_OneWay(value: Boolean);
    function get_RequestNamespace: string;
    procedure set_RequestNamespace(value: string);
    function get_ResponseNamespace: string;
    procedure set_ResponseNamespace(value: string);
    function get_RequestElementName: string;
    procedure set_RequestElementName(value: string);
    function get_ResponseElementName: string;
    procedure set_ResponseElementName(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_ParameterStyle: DNSoapParameterStyle;
    procedure set_ParameterStyle(value: DNSoapParameterStyle);
    function get_Binding: string;
    procedure set_Binding(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="SOAPAction" />
    ///  SOAP 请求的 HTTP 标头字段。
    ///</summary>
    ///<returns><see langword="SOAPAction" />
    ///  SOAP 请求的 HTTP 标头字段。
    ///  默认值为 http://tempuri.org/MethodName，其中 MethodName 是 XML Web 服务方法的名称。
    ///</returns>
    property Action: string read get_Action write set_Action;
    ///<summary>
    ///  获取或设置是否 XML Web 服务客户端等待 Web 服务器以完成处理 XML Web 服务方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XML Web 服务客户端不等待完成的处理 XML Web 服务方法的 Web 服务器。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property OneWay: Boolean read get_OneWay write set_OneWay;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法的 SOAP 请求关联的命名空间。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法的 SOAP 请求关联的 XML 命名空间。
    ///  默认值为 http://tempuri.org/。
    ///</returns>
    property RequestNamespace: string read get_RequestNamespace write set_RequestNamespace;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法的 SOAP 响应关联的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法的 SOAP 响应关联的 XML 命名空间。
    ///  默认值为 http://tempuri.org/。
    ///</returns>
    property ResponseNamespace: string read get_ResponseNamespace write set_ResponseNamespace;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法，这些操作的形式为服务说明中定义的 SOAP 请求关联的 XML 元素。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法，在操作的形式的服务说明中定义的 SOAP 请求关联的 XML 元素。
    ///  默认值为 XML Web 服务方法的名称。
    ///</returns>
    property RequestElementName: string read get_RequestElementName write set_RequestElementName;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法的 SOAP 响应关联的 XML 元素。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法的 SOAP 请求关联的 XML 元素。
    ///  默认值为的 WebServiceNameResult，其中 WebServiceName 是 XML Web 服务方法的名称。
    ///</returns>
    property ResponseElementName: string read get_ResponseElementName write set_ResponseElementName;
    ///<summary>
    ///  获取或设置参数格式设置为 XML Web 服务方法内的 SOAP 消息的 XML 部分。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  为 XML Web 服务方法。
    ///  默认值为 <see cref="F:System.Web.Services.Description.SoapBindingUse.Literal" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置是否参数封装在单个 XML 元素下方 <see langword="Body" />
    ///  SOAP 消息的 XML 部分中的元素。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  为 SOAP 消息发往和来自 XML Web 服务方法。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapParameterStyle.Wrapped" />
    ///  。
    ///</returns>
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle write set_ParameterStyle;
    ///<summary>
    ///  获取或设置一个 XML Web 服务方法正在实现的操作的绑定。
    ///</summary>
    ///<returns>
    ///  XML Web 服务方法正在实现的操作绑定。
    ///  默认值为"Soap"追加的 XML Web 服务的名称。
    ///</returns>
    property Binding: string read get_Binding write set_Binding;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapDocumentMethodAttribute = class(TDNGenericImport<DNSoapDocumentMethodAttributeClass, DNSoapDocumentMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapDocumentServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9E5CEB54-04C7-5B34-A760-0FB33510E88A}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  类将所有属性都设置为其默认值。
    ///</summary>
    {class} function init: DNSoapDocumentServiceAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  类设置该参数的格式。
    ///</summary>
    ///  <param name="use">
    ///  该参数的格式的 XML Web 服务。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapDocumentServiceAttribute.Use" />
    ///  属性。
    ///</param>
    {class} function init(use: DNSoapBindingUse): DNSoapDocumentServiceAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  类将该参数的格式并在设置参数是否封装在单个 XML 元素， <see langword="Body" />
    ///  元素，SOAP 消息中的。
    ///</summary>
    ///  <param name="use">
    ///  参数格式设置样式。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapDocumentServiceAttribute.Use" />
    ///  属性。
    ///</param>
    ///  <param name="paramStyle">
    ///  在设置是否参数封装在单个 XML 元素， <see langword="Body" />
    ///  元素中，发往和来自 XML Web 服务中的 XML Web 服务方法的 SOAP 消息中。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapDocumentServiceAttribute.ParameterStyle" />
    ///  属性。
    ///</param>
    {class} function init(use: DNSoapBindingUse; paramStyle: DNSoapParameterStyle): DNSoapDocumentServiceAttribute; overload;

  end;

  ///<summary>
  ///  应用的可选 <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
  ///  到 XML Web 服务将设置从 XML Web 服务中的 XML Web 服务方法的 SOAP 请求和响应发送到和的默认格式。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapDocumentServiceAttribute')]
  DNSoapDocumentServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{97184EBC-78AC-36EB-904B-34CD02661283}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_ParameterStyle: DNSoapParameterStyle;
    procedure set_ParameterStyle(value: DNSoapParameterStyle);
    function get_RoutingStyle: DNSoapServiceRoutingStyle;
    procedure set_RoutingStyle(value: DNSoapServiceRoutingStyle);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 XML Web 服务格式设置的默认参数。
    ///</summary>
    ///<returns>
    ///  默认值 <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  XML Web 服务。
    ///  如果未设置，默认值是 <see cref="F:System.Web.Services.Description.SoapBindingUse.Literal" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置默认设置，用于控制是否参数封装在单个元素以下 <see langword="&lt;Body&gt;" />
    ///  XML Web 服务的 XML Web 服务方法的 SOAP 消息的 XML 部分中的元素。
    ///</summary>
    ///<returns>
    ///  默认值 <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  为 SOAP 请求和 SOAP 响应与从 XML Web 服务中的 XML Web 服务方法。
    ///  如果未设置，默认值是 <see cref="F:System.Web.Services.Protocols.SoapParameterStyle.Wrapped" />
    ///  。
    ///</returns>
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle write set_ParameterStyle;
    ///<summary>
    ///  获取或设置如何将 SOAP 消息传送到 XML Web 服务。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapServiceRoutingStyle" />
    ///  表示如何将 SOAP 消息传送到 XML Web 服务。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapServiceRoutingStyle.SoapAction" />
    ///  。
    ///</returns>
    property RoutingStyle: DNSoapServiceRoutingStyle read get_RoutingStyle write set_RoutingStyle;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapDocumentServiceAttribute = class(TDNGenericImport<DNSoapDocumentServiceAttributeClass, DNSoapDocumentServiceAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{67F431F0-3A07-5DC7-B422-4ADBAB7F0A31}']
  end;

  ///<summary>
  ///  当在派生类中重写指定 SOAP 扩展应与 XML Web 服务方法一起运行。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapExtensionAttribute')]
  DNSoapExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{177794D8-EA63-3982-8296-67AD5FB185A5}']
  { getters & setters } 

    function get_ExtensionType: DDN.mscorlib.DNType;
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Type" />
    ///  SOAP 扩展。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  SOAP 扩展。
    ///</returns>
    property ExtensionType: DDN.mscorlib.DNType read get_ExtensionType;
    ///<summary>
    ///  在中重写派生的类中，获取或设置的 SOAP 扩展优先级。
    ///</summary>
    ///<returns>
    ///  SOAP 扩展的优先级。
    ///</returns>
    property Priority: Int32 read get_Priority write set_Priority;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapExtensionAttribute = class(TDNGenericImport<DNSoapExtensionAttributeClass, DNSoapExtensionAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BEC94F14-BCD3-599C-9E4A-BF712FC6DEB6}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderAttribute" />
    ///  类设置表示 SOAP 标头内容的 XML Web 服务类的成员。
    ///</summary>
    ///  <param name="memberName">
    ///  表示 SOAP 标头内容的 XML Web 服务类的成员。
    ///<see cref="P:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" />
    ///  属性将设置为此参数的值。
    ///</param>
    {class} function init(memberName: string): DNSoapHeaderAttribute;

  end;

  ///<summary>
  ///  此特性应用于 XML Web 服务方法或 XML Web 服务客户端指定的 XML Web 服务方法或 XML Web 服务客户端可以处理的 SOAP 标头。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderAttribute')]
  DNSoapHeaderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{45D22740-EAD6-3F99-ADCB-7E9B0404EB0D}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Direction: DNSoapHeaderDirection;
    procedure set_Direction(value: DNSoapHeaderDirection);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置表示 SOAP 标头内容的 XML Web 服务类的成员。
    ///</summary>
    ///<returns>
    ///  表示 SOAP 标头内容的 XML Web 服务类的成员。
    ///  没有默认值。
    ///</returns>
    property MemberName: string read get_MemberName write set_MemberName;
    ///<summary>
    ///  获取或设置是否适用于 XML Web 服务和/或 XML Web 服务客户端的 SOAP 标头。
    ///</summary>
    ///<returns>
    ///  SOAP 标头的目标接收方。
    ///  默认值是 <see cref="F:System.Web.Services.Protocols.SoapHeaderDirection.In" />
    ///  , ，这意味着预期的接收方是只是 XML Web 服务。
    ///</returns>
    property Direction: DNSoapHeaderDirection read get_Direction write set_Direction;
    ///<summary>
    ///  此成员已过时，并没有任何功能。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Boolean" />
    ///  值。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapHeaderAttribute = class(TDNGenericImport<DNSoapHeaderAttributeClass, DNSoapHeaderAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapRpcMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C595ED6F-698D-53A0-82E9-81E2CDD42D57}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  类，将所有属性都设置为其默认值。
    ///</summary>
    {class} function init: DNSoapRpcMethodAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  类设置 <see cref="P:System.Web.Services.Protocols.SoapRpcMethodAttribute.Action" />
    ///  属性的值 <paramref name="action" />
    ///  参数。
    ///</summary>
    ///  <param name="action">
    ///  意图的 SOAP 请求。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapRpcMethodAttribute.Action" />
    ///  属性。
    ///</param>
    {class} function init(action: string): DNSoapRpcMethodAttribute; overload;

  end;

  ///<summary>
  ///  指定 SOAP 消息发往和来自方法使用 <see langword="RPC" />
  ///  格式设置。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapRpcMethodAttribute')]
  DNSoapRpcMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1B104B44-0A90-3023-94C4-20DE54408AD2}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_Binding: string;
    procedure set_Binding(value: string);
    function get_OneWay: Boolean;
    procedure set_OneWay(value: Boolean);
    function get_RequestNamespace: string;
    procedure set_RequestNamespace(value: string);
    function get_ResponseNamespace: string;
    procedure set_ResponseNamespace(value: string);
    function get_RequestElementName: string;
    procedure set_RequestElementName(value: string);
    function get_ResponseElementName: string;
    procedure set_ResponseElementName(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="SOAPAction" />
    ///  SOAP 请求的 HTTP 标头字段。
    ///</summary>
    ///<returns><see langword="SOAPAction" />
    ///  SOAP 请求的 HTTP 标头字段。
    ///  默认值为 http://tempuri.org/MethodName 其中 MethodName 是 XML Web 服务方法的名称。
    ///</returns>
    property Action: string read get_Action write set_Action;
    ///<summary>
    ///  获取或设置一个 XML Web 服务方法实现的操作的绑定。
    ///</summary>
    ///<returns>
    ///  XML Web 服务方法实现执行操作，以绑定。
    ///  默认值为"Soap"追加的 XML Web 服务的名称。
    ///</returns>
    property Binding: string read get_Binding write set_Binding;
    ///<summary>
    ///  获取或设置是否 XML Web 服务客户端等待 Web 服务器以完成处理 XML Web 服务方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XML Web 服务客户端不会等待 Web 服务器能够完全处理 XML Web 服务方法;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property OneWay: Boolean read get_OneWay write set_OneWay;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法的 SOAP 请求相关联的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法的 SOAP 请求关联的 XML 命名空间。
    ///  默认值为 http://tempuri.org/。
    ///</returns>
    property RequestNamespace: string read get_RequestNamespace write set_RequestNamespace;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法的 SOAP 响应关联的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法的 SOAP 响应关联的 XML 命名空间。
    ///  默认值为 http://tempuri.org/。
    ///</returns>
    property ResponseNamespace: string read get_ResponseNamespace write set_ResponseNamespace;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法的 SOAP 请求关联的 XML 元素。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法的 SOAP 请求关联的 XML 元素。
    ///  默认值为 XML Web 服务方法的名称。
    ///</returns>
    property RequestElementName: string read get_RequestElementName write set_RequestElementName;
    ///<summary>
    ///  获取或设置与 XML Web 服务方法的 SOAP 响应关联的 XML 元素。
    ///</summary>
    ///<returns>
    ///  与 XML Web 服务方法的 SOAP 请求关联的 XML 元素。
    ///  默认值是 WebServiceNameResult, ，其中 WebServiceName 是 XML Web 服务方法的名称。
    ///</returns>
    property ResponseElementName: string read get_ResponseElementName write set_ResponseElementName;
    ///<summary>
    ///  获取或设置调用该方法时所使用的绑定。
    ///</summary>
    ///<returns>
    ///  成员 <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  指定调用方法时所使用的绑定的枚举。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapRpcMethodAttribute = class(TDNGenericImport<DNSoapRpcMethodAttributeClass, DNSoapRpcMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapRpcServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A5F23360-FB26-536A-B06E-2AD0019E5B3E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapRpcServiceAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapRpcServiceAttribute;

  end;

  ///<summary>
  ///  设置 SOAP 请求和响应发送到和从 XML Web 服务中的 XML Web 服务方法的默认的格式。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapRpcServiceAttribute')]
  DNSoapRpcServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5DFE0DCA-3B64-3F13-81DE-10A317608568}']
  { getters & setters } 

    function get_RoutingStyle: DNSoapServiceRoutingStyle;
    procedure set_RoutingStyle(value: DNSoapServiceRoutingStyle);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置如何将 SOAP 消息传送到 XML Web 服务。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapServiceRoutingStyle" />
    ///  表示如何将 SOAP 消息传送到 XML Web 服务。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapServiceRoutingStyle.SoapAction" />
    ///  。
    ///</returns>
    property RoutingStyle: DNSoapServiceRoutingStyle read get_RoutingStyle write set_RoutingStyle;
    ///<summary>
    ///  获取或设置调用 Web 服务方法时使用的绑定。
    ///</summary>
    ///<returns>
    ///  成员 <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  指定调用 Web 服务方法时所使用的绑定的枚举。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapRpcServiceAttribute = class(TDNGenericImport<DNSoapRpcServiceAttributeClass, DNSoapRpcServiceAttribute>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A4C76320-1067-5B55-96CE-CFA0F284F936}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebMethodAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="enableSession">
    ///  初始化是否为 XML Web 服务方法启用会话状态。
    ///</param>
    {class} function init(enableSession: Boolean): DNWebMethodAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="enableSession">
    ///  初始化是否为 XML Web 服务方法启用会话状态。
    ///</param>
    ///  <param name="transactionOption">
    ///  初始化 XML Web 服务方法的事务支持。
    ///</param>
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption): DNWebMethodAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="enableSession">
    ///  初始化是否为 XML Web 服务方法启用会话状态。
    ///</param>
    ///  <param name="transactionOption">
    ///  初始化 XML Web 服务方法的事务支持。
    ///</param>
    ///  <param name="cacheDuration">
    ///  初始化缓存响应的秒数。
    ///</param>
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption; cacheDuration: Int32): DNWebMethodAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="enableSession">
    ///  初始化是否为 XML Web 服务方法启用会话状态。
    ///</param>
    ///  <param name="transactionOption">
    ///  初始化 XML Web 服务方法的事务支持。
    ///</param>
    ///  <param name="cacheDuration">
    ///  初始化缓存响应的秒数。
    ///</param>
    ///  <param name="bufferResponse">
    ///  初始化是否缓存此请求的响应。
    ///</param>
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption; cacheDuration: Int32; bufferResponse: Boolean): DNWebMethodAttribute; overload;

  end;

  ///<summary>
  ///  将此特性添加到 XML Web 中的一个方法使用 ASP.NET 创建的服务使该方法可调用从远程 Web 客户端。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.WebMethodAttribute')]
  DNWebMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E13D617E-4DD7-3166-A6FF-C05E9A19C53B}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_EnableSession: Boolean;
    procedure set_EnableSession(value: Boolean);
    function get_CacheDuration: Int32;
    procedure set_CacheDuration(value: Int32);
    function get_BufferResponse: Boolean;
    procedure set_BufferResponse(value: Boolean);
    function get_TransactionOption: DDN.System.EnterpriseServices.DNTransactionOption;
    procedure set_TransactionOption(value: DDN.System.EnterpriseServices.DNTransactionOption);
    function get_MessageName: string;
    procedure set_MessageName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  描述 XML Web 服务方法的描述性消息。
    ///</summary>
    ///<returns>
    ///  描述 XML Web 服务方法的描述性消息。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  指示是否为 XML Web 服务方法启用会话状态。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XML Web 服务方法启用会话状态。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableSession: Boolean read get_EnableSession write set_EnableSession;
    ///<summary>
    ///  获取或设置响应应保留在缓存中的秒数。
    ///</summary>
    ///<returns>
    ///  响应应保留在缓存中的秒数。
    ///  默认值为 0，这意味着不缓存响应。
    ///</returns>
    property CacheDuration: Int32 read get_CacheDuration write set_CacheDuration;
    ///<summary>
    ///  获取或设置是否对此请求的响应进行缓冲处理。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此请求的响应进行缓冲处理;，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property BufferResponse: Boolean read get_BufferResponse write set_BufferResponse;
    ///<summary>
    ///  指示 XML Web 服务方法的事务支持。
    ///</summary>
    ///<returns>
    ///  XML Web 服务方法的事务支持。
    ///  默认值为 <see cref="F:System.EnterpriseServices.TransactionOption.Disabled" />
    ///  。
    ///</returns>
    property TransactionOption: DDN.System.EnterpriseServices.DNTransactionOption read get_TransactionOption write set_TransactionOption;
    ///<summary>
    ///  用于在数据传递到从 XML Web 服务方法返回的 XML Web 服务方法的名称。
    ///</summary>
    ///<returns>
    ///  用于在数据传入和传出 XML Web 服务方法中的 XML Web 服务方法的名称。
    ///  默认值是 XML Web 服务方法的名称。
    ///</returns>
    property MessageName: string read get_MessageName write set_MessageName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebMethodAttribute = class(TDNGenericImport<DNWebMethodAttributeClass, DNWebMethodAttribute>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{96FA1B76-25D8-5530-8EE6-6DCF9CD4F4BD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebServiceAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebServiceAttribute;

  end;

  ///<summary>
  ///  用于将其他信息添加到 XML Web 服务，如描述其功能的字符串。
  ///</summary>
  [DNTypeName('System.Web.Services.WebServiceAttribute')]
  DNWebServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{7986D9D3-2B67-3D0A-A674-27FC7A009600}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  关于 XML Web 服务的描述性消息。
    ///</summary>
    ///<returns>
    ///  描述 XML Web 服务的功能的文本。
    ///</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  获取或设置要用于 XML Web 服务的默认 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  要为 XML Web 服务使用的默认 XML 命名空间。
    ///  在指定了默认值 <see cref="F:System.Web.Services.WebServiceAttribute.DefaultNamespace" />
    ///  属性。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置 XML Web 服务的名称。
    ///</summary>
    ///<returns>
    ///  XML Web 服务的名称。
    ///  默认值为实现 XML Web 服务的类的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebServiceAttribute = class(TDNGenericImport<DNWebServiceAttributeClass, DNWebServiceAttribute>)
  public const
    ///<summary>
    ///  默认值为 <see cref="P:System.Web.Services.WebServiceAttribute.Namespace" />
    ///  属性。
    ///  此字段为常数。
    ///</summary>
   DefaultNamespace = 'http://tempuri.org/';
  end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceBindingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B99651D7-502C-54A3-B518-02B864EE4137}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebServiceBindingAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  类将设置的绑定实现 XML Web 服务方法的名称。
    ///</summary>
    ///  <param name="name">
    ///  XML Web 服务方法正在实现的操作的绑定的名称。
    ///  设置 <see cref="P:System.Web.Services.WebServiceBindingAttribute.Name" />
    ///  属性。
    ///</param>
    {class} function init(name: string): DNWebServiceBindingAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  XML Web 服务方法正在实现的操作的绑定的名称。
    ///  设置 <see cref="P:System.Web.Services.WebServiceBindingAttribute.Name" />
    ///  属性。
    ///</param>
    ///  <param name="ns">
    ///  与绑定关联的命名空间。
    ///  设置 <see cref="P:System.Web.Services.WebServiceBindingAttribute.Namespace" />
    ///  属性。
    ///</param>
    {class} function init(name: string; ns: string): DNWebServiceBindingAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  XML Web 服务方法正在实现的操作的绑定的名称。
    ///  设置 <see cref="P:System.Web.Services.WebServiceBindingAttribute.Name" />
    ///  属性。
    ///</param>
    ///  <param name="ns">
    ///  与绑定关联的命名空间。
    ///  设置 <see cref="P:System.Web.Services.WebServiceBindingAttribute.Namespace" />
    ///  属性。
    ///</param>
    ///  <param name="location">
    ///  定义绑定位置。
    ///</param>
    {class} function init(name: string; ns: string; location: string): DNWebServiceBindingAttribute; overload;

  end;

  ///<summary>
  ///  声明定义了一个或多个 XML Web 服务方法的绑定。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.WebServiceBindingAttribute')]
  DNWebServiceBindingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0A8A2DAB-197E-3961-9795-4622CD2A626E}']
  { getters & setters } 

    function get_ConformsTo: DNWsiProfiles;
    procedure set_ConformsTo(value: DNWsiProfiles);
    function get_EmitConformanceClaims: Boolean;
    procedure set_EmitConformanceClaims(value: Boolean);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置绑定声明才能符合的 Web 服务互操作性 (WSI) 规范。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  值，指示 WSI 规范。
    ///</returns>
    property ConformsTo: DNWsiProfiles read get_ConformsTo write set_ConformsTo;
    ///<summary>
    ///  获取或设置一个值，该值指示绑定是否发出一致性声明。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果绑定发出一致性声明;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property EmitConformanceClaims: Boolean read get_EmitConformanceClaims write set_EmitConformanceClaims;
    ///<summary>
    ///  获取或设置定义绑定的位置。
    ///</summary>
    ///<returns>
    ///  定义绑定位置。
    ///  默认值是该属性应用到的 XML Web 服务的 URL。
    ///</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  获取或设置绑定的名称。
    ///</summary>
    ///<returns>
    ///  绑定的名称。
    ///  默认值为"Soap"追加的 XML Web 服务的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置与该绑定关联的命名空间。
    ///</summary>
    ///<returns>
    ///  绑定的命名空间。
    ///  默认值为 http://tempuri.org/。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebServiceBindingAttribute = class(TDNGenericImport<DNWebServiceBindingAttributeClass, DNWebServiceBindingAttribute>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{63ABA720-5224-524B-AE8C-1966645DF889}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  类的实例。
    ///</summary>
    {class} function init: DNBasicProfileViolationCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
  ///  对象的强类型集合。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.BasicProfileViolationCollection')]
  DNBasicProfileViolationCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{86B87E3A-8624-330A-9689-E1BD24FC6FDA}']
  { getters & setters } 

    function get_Item(index: Int32): DNBasicProfileViolation;
    procedure set_Item(index: Int32; value: DNBasicProfileViolation);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将插入 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  到集合中的指定位置处。
    ///</summary>
    ///  <param name="index">
    ///  要插入集合中的从零开始索引 <paramref name="violation" />
    ///  。
    ///</param>
    ///  <param name="violation">
    ///  要插入的 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; violation: DNBasicProfileViolation);
    ///<summary>
    ///  返回指定的从零开始的索引 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  集合中。
    ///</summary>
    ///  <param name="violation">
    ///  要在集合中查找的 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的索引 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  , ，否则为-1 的集合中找不到该元素。
    ///</returns>
    function IndexOf(violation: DNBasicProfileViolation): Int32;
    ///<summary>
    ///  检查集合是否包含指定 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  对象。
    ///</summary>
    ///  <param name="violation"><see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  要在集合中定位对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  对象存在于集合; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(violation: DNBasicProfileViolation): Boolean;
    ///<summary>
    ///  移除指定 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  集合中。
    ///</summary>
    ///  <param name="violation">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  。
    ///</param>
    procedure Remove(violation: DNBasicProfileViolation);
    ///<summary>
    ///  将元素从集合复制到数组，该数组的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  要向其复制集合的内容。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNBasicProfileViolation>; index: Int32);
    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  表示形式 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  集合中的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  表示形式 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  集合中的对象。
    ///</returns>
    function ToString: string;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Int32]: DNBasicProfileViolation read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBasicProfileViolationCollection = class(TDNGenericImport<DNBasicProfileViolationCollectionClass, DNBasicProfileViolationCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimePartCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{973FA0FA-7618-520B-B0FF-3218C4A09ED0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimePartCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.MimePart" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimePartCollection')]
  DNMimePartCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{0B454C50-010C-3774-8F73-216BABB06416}']
  { getters & setters } 

    function get_Item(index: Int32): DNMimePart;
    procedure set_Item(index: Int32; value: DNMimePart);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  。
    ///</summary>
    ///  <param name="mimePart">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="mimePart" />
    ///  添加参数。
    ///</returns>
    function Add(mimePart: DNMimePart): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  到 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="mimePart" />
    ///  参数。
    ///</param>
    ///  <param name="mimePart">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; mimePart: DNMimePart);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="mimePart"><see cref="T:System.Web.Services.Description.MimePart" />
    ///  要搜索 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(mimePart: DNMimePart): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  属于 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  。
    ///</summary>
    ///  <param name="mimePart"><see cref="T:System.Web.Services.Description.MimePart" />
    ///  集合成员身份检查。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="mimePart" />
    ///  参数属于 <see langword="MimePartCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(mimePart: DNMimePart): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  从 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  。
    ///</summary>
    ///  <param name="mimePart">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  。
    ///</param>
    procedure Remove(mimePart: DNMimePart);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNMimePart>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMimePart read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMimePartCollection = class(TDNGenericImport<DNMimePartCollectionClass, DNMimePartCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextMatchCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{52D4D7AB-3B34-52F9-A829-F8B6D45327B1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimeTextMatchCollection;

  end;

  ///<summary>
  ///  提供 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimeTextMatchCollection')]
  DNMimeTextMatchCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{6BDD8926-90C4-3AE9-B98D-C67D99EE6D20}']
  { getters & setters } 

    function get_Item(index: Int32): DNMimeTextMatch;
    procedure set_Item(index: Int32; value: DNMimeTextMatch);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  。
    ///</summary>
    ///  <param name="match">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="match" />
    ///  添加参数。
    ///</returns>
    function Add(match: DNMimeTextMatch): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  到 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="match" />
    ///  参数。
    ///</param>
    ///  <param name="match">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; match: DNMimeTextMatch);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="match"><see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(match: DNMimeTextMatch): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  属于 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  。
    ///</summary>
    ///  <param name="match"><see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="match" />
    ///  参数属于 <see langword="MimeTextMatchCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(match: DNMimeTextMatch): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  从 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  。
    ///</summary>
    ///  <param name="match">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  。
    ///</param>
    procedure Remove(match: DNMimeTextMatch);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNMimeTextMatch>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMimeTextMatch read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMimeTextMatchCollection = class(TDNGenericImport<DNMimeTextMatchCollectionClass, DNMimeTextMatchCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionBaseCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{4AC8E72D-88D1-54CB-B874-9DE9E925522C}']
  end;

  ///<summary>
  ///  构成强类型化集合的基础，它们是 <see cref="N:System.Web.Services.Description" />
  ///  命名空间的成员。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionBaseCollection')]
  DNServiceDescriptionBaseCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{7DA9E46B-0948-3A11-85DE-31963662B8C1}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionBaseCollection = class(TDNGenericImport<DNServiceDescriptionBaseCollectionClass, DNServiceDescriptionBaseCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{E245DCED-1E9F-5B2C-9A6E-6C4629A1A42F}']
  end;

  ///<summary>
  ///  表示受 XML Web 服务支持的 <see cref="T:System.Web.Services.Description.Binding" />
  ///  类的实例的集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.BindingCollection')]
  DNBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{8C68ECA6-C3B7-3034-8C06-39A90BA373BB}']
  { getters & setters } 

    function get_Item(index: Int32): DNBinding; overload;
    procedure set_Item(index: Int32; value: DNBinding);
    function get_Item(name: string): DNBinding; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Binding" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="binding">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Binding" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="binding" />
    ///  添加参数。
    ///</returns>
    function Add(binding: DNBinding): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Binding" />
    ///  到 <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="binding" />
    ///  参数。
    ///</param>
    ///  <param name="binding"><see cref="T:System.Web.Services.Description.Binding" />
    ///  要添加到集合。
    ///</param>
    procedure Insert(index: Int32; binding: DNBinding);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.Binding" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="binding"><see cref="T:System.Web.Services.Description.Binding" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(binding: DNBinding): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.Binding" />
    ///  属于 <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="binding">
    ///  一个 <see cref="T:System.Web.Services.Description.Binding" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="binding" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(binding: DNBinding): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.Binding" />
    ///  从 <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="binding">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.Binding" />
    ///  。
    ///</param>
    procedure Remove(binding: DNBinding);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.Binding" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.Binding" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNBinding read get_Item write set_Item; default;
    property Item[name: string]: DNBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBindingCollection = class(TDNGenericImport<DNBindingCollectionClass, DNBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNFaultBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{6148FA8B-3259-5672-9043-1FDA7BF74A2B}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.FaultBinding" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.FaultBindingCollection')]
  DNFaultBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{B99D3470-2A5C-3E49-BC7F-D8437FB9D1EF}']
  { getters & setters } 

    function get_Item(index: Int32): DNFaultBinding; overload;
    procedure set_Item(index: Int32; value: DNFaultBinding);
    function get_Item(name: string): DNFaultBinding; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="bindingOperationFault">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="bindingOperationFault" />
    ///  添加参数。
    ///</returns>
    function Add(bindingOperationFault: DNFaultBinding): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  到 <see langword="FaultBindingCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="bindingOperationFault" />
    ///  参数。
    ///</param>
    ///  <param name="bindingOperationFault">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; bindingOperationFault: DNFaultBinding);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="bindingOperationFault"><see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(bindingOperationFault: DNFaultBinding): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  属于 <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="bindingOperationFault"><see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="bindingOperationFault" />
    ///  参数属于 <see langword="FaultBindingCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(bindingOperationFault: DNFaultBinding): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  从 <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="bindingOperationFault">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  。
    ///</param>
    procedure Remove(bindingOperationFault: DNFaultBinding);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNFaultBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNFaultBinding read get_Item write set_Item; default;
    property Item[name: string]: DNFaultBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNFaultBindingCollection = class(TDNGenericImport<DNFaultBindingCollectionClass, DNFaultBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNImportCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{47CC628D-820B-544A-9F3A-86394354AF79}']
  end;

  ///<summary>
  ///  提供 <see cref="T:System.Web.Services.Description.Import" />
  ///  类的实例集合，该类表示要导入到 XML Web 服务的文档。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ImportCollection')]
  DNImportCollection = interface(DNServiceDescriptionBaseCollection)
  ['{7CCAD7FE-9CE1-3CDA-B03C-89810FB1569B}']
  { getters & setters } 

    function get_Item(index: Int32): DNImport;
    procedure set_Item(index: Int32; value: DNImport);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Import" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  。
    ///</summary>
    ///  <param name="import">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Import" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="import" />
    ///  添加参数。
    ///</returns>
    function Add(import: DNImport): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Import" />
    ///  到实例 <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="import" />
    ///  参数。
    ///</param>
    ///  <param name="import">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Import" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; import: DNImport);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.Import" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="import"><see cref="T:System.Web.Services.Description.Import" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(import: DNImport): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.Import" />
    ///  属于 <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  。
    ///</summary>
    ///  <param name="import"><see cref="T:System.Web.Services.Description.Import" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="import" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(import: DNImport): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.Import" />
    ///  从 <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  。
    ///</summary>
    ///  <param name="import">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.Import" />
    ///  。
    ///</param>
    procedure Remove(import: DNImport);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.Import" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.Import" />
    ///  作为复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNImport>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNImport read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNImportCollection = class(TDNGenericImport<DNImportCollectionClass, DNImportCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{4FACAE3D-EEFC-5F3E-85A4-0C617046DE1F}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.Message" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MessageCollection')]
  DNMessageCollection = interface(DNServiceDescriptionBaseCollection)
  ['{42003B6D-71EB-3EAC-B117-5729E10AB7EE}']
  { getters & setters } 

    function get_Item(index: Int32): DNMessage; overload;
    procedure set_Item(index: Int32; value: DNMessage);
    function get_Item(name: string): DNMessage; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Message" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="message" />
    ///  添加参数。
    ///</returns>
    function Add(message: DNMessage): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Message" />
    ///  到 <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="message" />
    ///  参数。
    ///</param>
    ///  <param name="message">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; message: DNMessage);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.Message" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="message"><see cref="T:System.Web.Services.Description.Message" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(message: DNMessage): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.Message" />
    ///  属于 <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  。
    ///</summary>
    ///  <param name="message"><see cref="T:System.Web.Services.Description.Message" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="message" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(message: DNMessage): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.Message" />
    ///  从 <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</param>
    procedure Remove(message: DNMessage);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.Message" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.Message" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNMessage>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMessage read get_Item write set_Item; default;
    property Item[name: string]: DNMessage read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMessageCollection = class(TDNGenericImport<DNMessageCollectionClass, DNMessageCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessagePartCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{2B802EFB-88B9-531D-ADDC-3C9A237ED86C}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.MessagePart" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MessagePartCollection')]
  DNMessagePartCollection = interface(DNServiceDescriptionBaseCollection)
  ['{928087D1-7AF0-3265-9C59-EB140C05D423}']
  { getters & setters } 

    function get_Item(index: Int32): DNMessagePart; overload;
    procedure set_Item(index: Int32; value: DNMessagePart);
    function get_Item(name: string): DNMessagePart; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  。
    ///</summary>
    ///  <param name="messagePart">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="messagePart" />
    ///  添加参数。
    ///</returns>
    function Add(messagePart: DNMessagePart): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  到 <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="messagePart" />
    ///  参数。
    ///</param>
    ///  <param name="messagePart">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; messagePart: DNMessagePart);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="messagePart"><see cref="T:System.Web.Services.Description.MessagePart" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(messagePart: DNMessagePart): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  属于 <see langword="MessagePartCollection" />
    ///  。
    ///</summary>
    ///  <param name="messagePart"><see cref="T:System.Web.Services.Description.MessagePart" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="messagePart" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(messagePart: DNMessagePart): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  从 <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  。
    ///</summary>
    ///  <param name="messagePart">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</param>
    procedure Remove(messagePart: DNMessagePart);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  作为复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNMessagePart>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMessagePart read get_Item write set_Item; default;
    property Item[name: string]: DNMessagePart read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMessagePartCollection = class(TDNGenericImport<DNMessagePartCollectionClass, DNMessagePartCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{192B8812-765F-5EED-BAED-31502E539658}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationBindingCollection')]
  DNOperationBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{FE6D8463-D80C-387B-8126-7FCFB2AE1A68}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationBinding;
    procedure set_Item(index: Int32; value: DNOperationBinding);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="bindingOperation">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="bindingOperation" />
    ///  添加参数。
    ///</returns>
    function Add(bindingOperation: DNOperationBinding): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  到实例 <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="bindingOperation" />
    ///  参数。
    ///</param>
    ///  <param name="bindingOperation">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; bindingOperation: DNOperationBinding);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="bindingOperation"><see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(bindingOperation: DNOperationBinding): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  属于 <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="bindingOperation"><see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="bindingOperation" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(bindingOperation: DNOperationBinding): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  从 <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  。
    ///</summary>
    ///  <param name="bindingOperation">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</param>
    procedure Remove(bindingOperation: DNOperationBinding);
    ///<summary>
    ///  将复制整个 <see langword="OperationBindingCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNOperationBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationBinding read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationBindingCollection = class(TDNGenericImport<DNOperationBindingCollectionClass, DNOperationBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{AA10AE7F-697B-5F31-9068-75B0CD8B333F}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.Operation" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationCollection')]
  DNOperationCollection = interface(DNServiceDescriptionBaseCollection)
  ['{052A90D8-17DC-3AFA-9A25-99600882790F}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperation;
    procedure set_Item(index: Int32; value: DNOperation);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Operation" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  。
    ///</summary>
    ///  <param name="operation">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="operation" />
    ///  添加参数。
    ///</returns>
    function Add(operation: DNOperation): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Operation" />
    ///  到 <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="operation" />
    ///  参数。
    ///</param>
    ///  <param name="operation">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; operation: DNOperation);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.Operation" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="operation"><see cref="T:System.Web.Services.Description.Operation" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(operation: DNOperation): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.Operation" />
    ///  属于 <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  。
    ///</summary>
    ///  <param name="operation"><see cref="T:System.Web.Services.Description.Operation" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="operation" />
    ///  属于 <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(operation: DNOperation): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.Operation" />
    ///  从 <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  。
    ///</summary>
    ///  <param name="operation">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</param>
    procedure Remove(operation: DNOperation);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.Operation" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.Operation" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNOperation>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperation read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationCollection = class(TDNGenericImport<DNOperationCollectionClass, DNOperationCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationFaultCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{F9F64D37-457A-5231-B828-D13433123369}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.OperationFault" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationFaultCollection')]
  DNOperationFaultCollection = interface(DNServiceDescriptionBaseCollection)
  ['{11F638AE-E3B2-3568-B40C-6132989A232C}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationFault; overload;
    procedure set_Item(index: Int32; value: DNOperationFault);
    function get_Item(name: string): DNOperationFault; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  。
    ///</summary>
    ///  <param name="operationFaultMessage">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="operationFaultMessage" />
    ///  添加参数。
    ///</returns>
    function Add(operationFaultMessage: DNOperationFault): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  到 <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="operationFaultMessage" />
    ///  参数。
    ///</param>
    ///  <param name="operationFaultMessage">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; operationFaultMessage: DNOperationFault);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="operationFaultMessage"><see cref="T:System.Web.Services.Description.OperationFault" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(operationFaultMessage: DNOperationFault): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  属于 <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  。
    ///</summary>
    ///  <param name="operationFaultMessage"><see cref="T:System.Web.Services.Description.OperationFault" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="operationFaultMessage" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(operationFaultMessage: DNOperationFault): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  从 <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  。
    ///</summary>
    ///  <param name="operationFaultMessage">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  。
    ///</param>
    procedure Remove(operationFaultMessage: DNOperationFault);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  作为复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNOperationFault>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationFault read get_Item write set_Item; default;
    property Item[name: string]: DNOperationFault read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationFaultCollection = class(TDNGenericImport<DNOperationFaultCollectionClass, DNOperationFaultCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationMessageCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{5255AC19-FCD8-56DC-B6A3-55C77C4A7273}']
  end;

  ///<summary>
  ///  表示与 XML Web service 相关的 <see cref="T:System.Web.Services.Description.OperationInput" />
  ///  和 <see cref="T:System.Web.Services.Description.OperationOutput" />
  ///  消息的集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationMessageCollection')]
  DNOperationMessageCollection = interface(DNServiceDescriptionBaseCollection)
  ['{4E941E36-9B9C-3AB7-95F9-E53DAFED969F}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationMessage;
    procedure set_Item(index: Int32; value: DNOperationMessage);
    function get_Input: DNOperationInput;
    function get_Output: DNOperationOutput;
    function get_Flow: DNOperationFlow;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  。
    ///</summary>
    ///  <param name="operationMessage">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="operationMessage" />
    ///  添加参数。
    ///</returns>
    function Add(operationMessage: DNOperationMessage): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  到 <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="operationMessage" />
    ///  参数。
    ///</param>
    ///  <param name="operationMessage">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; operationMessage: DNOperationMessage);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="operationMessage"><see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  指定的操作消息，则为-1 如果集合中找不到该元素从零开始的索引。
    ///</returns>
    function IndexOf(operationMessage: DNOperationMessage): Int32;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  属于 <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  。
    ///</summary>
    ///  <param name="operationMessage"><see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="operationMessage" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(operationMessage: DNOperationMessage): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  从 <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  。
    ///</summary>
    ///  <param name="operationMessage">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  。
    ///</param>
    procedure Remove(operationMessage: DNOperationMessage);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  到兼容的一维数组类型的 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNOperationMessage>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationMessage read get_Item write set_Item; default;
    ///<summary>
    ///  获取第一个匹配项 <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  在集合中。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationInput" />
    ///  在集合中。
    ///</returns>
    property Input: DNOperationInput read get_Input;
    ///<summary>
    ///  获取第一个匹配项 <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  在集合中。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  在集合中。
    ///</returns>
    property Output: DNOperationOutput read get_Output;
    ///<summary>
    ///  获取所支持的传输类型 <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationFlow" />
    ///  值之一。
    ///  默认值为 <see langword="SolicitResponse" />
    ///  。
    ///</returns>
    property Flow: DNOperationFlow read get_Flow;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationMessageCollection = class(TDNGenericImport<DNOperationMessageCollectionClass, DNOperationMessageCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{80A6DC27-6C52-595B-9A12-2E199D308278}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.Port" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.PortCollection')]
  DNPortCollection = interface(DNServiceDescriptionBaseCollection)
  ['{B8FC5BCF-9A8C-37BF-96B5-0E6163FC1CE0}']
  { getters & setters } 

    function get_Item(index: Int32): DNPort; overload;
    procedure set_Item(index: Int32; value: DNPort);
    function get_Item(name: string): DNPort; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Port" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  。
    ///</summary>
    ///  <param name="port">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Port" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="port" />
    ///  添加参数。
    ///</returns>
    function Add(port: DNPort): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Port" />
    ///  到实例 <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="port" />
    ///  参数。
    ///</param>
    ///  <param name="port">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Port" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; port: DNPort);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.Port" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="port"><see cref="T:System.Web.Services.Description.Port" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(port: DNPort): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.Port" />
    ///  属于 <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  。
    ///</summary>
    ///  <param name="port"><see cref="T:System.Web.Services.Description.Port" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定 <see cref="T:System.Web.Services.Description.Port" />
    ///  属于 <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(port: DNPort): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.Port" />
    ///  从 <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  。
    ///</summary>
    ///  <param name="port">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.Port" />
    ///  。
    ///</param>
    procedure Remove(port: DNPort);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  到类型的一维数组 <see cref="T:System.Web.Services.Description.Port" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.Port" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNPort>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPort read get_Item write set_Item; default;
    property Item[name: string]: DNPort read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPortCollection = class(TDNGenericImport<DNPortCollectionClass, DNPortCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortTypeCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{34807EB7-4837-5001-9162-57F7AF9EA7F8}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.PortType" />
  ///  类的实例集合；即，XML Web service 所支持的操作组的集合。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.PortTypeCollection')]
  DNPortTypeCollection = interface(DNServiceDescriptionBaseCollection)
  ['{DC1F42E1-36A8-3FB5-9760-FF826B7B7C13}']
  { getters & setters } 

    function get_Item(index: Int32): DNPortType; overload;
    procedure set_Item(index: Int32; value: DNPortType);
    function get_Item(name: string): DNPortType; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.PortType" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  。
    ///</summary>
    ///  <param name="portType">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.PortType" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="portType" />
    ///  添加参数。
    ///</returns>
    function Add(portType: DNPortType): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.PortType" />
    ///  到 <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="portType" />
    ///  参数。
    ///</param>
    ///  <param name="portType">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.PortType" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; portType: DNPortType);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.PortType" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="portType"><see cref="T:System.Web.Services.Description.PortType" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(portType: DNPortType): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.PortType" />
    ///  属于 <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  。
    ///</summary>
    ///  <param name="portType"><see cref="T:System.Web.Services.Description.PortType" />
    ///  对其进行检查集合成员资格。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="portType" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(portType: DNPortType): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.PortType" />
    ///  从 <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  。
    ///</summary>
    ///  <param name="portType">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.PortType" />
    ///  。
    ///</param>
    procedure Remove(portType: DNPortType);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  到类型的一维数组 <see cref="T:System.Web.Services.Description.PortType" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.PortType" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNPortType>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPortType read get_Item write set_Item; default;
    property Item[name: string]: DNPortType read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPortTypeCollection = class(TDNGenericImport<DNPortTypeCollectionClass, DNPortTypeCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{3E690398-8498-53AC-931D-503CBAEDFB47}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.Service" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceCollection')]
  DNServiceCollection = interface(DNServiceDescriptionBaseCollection)
  ['{6E65C6E9-2CDF-3F63-A49D-B10C19EB64D4}']
  { getters & setters } 

    function get_Item(index: Int32): DNService; overload;
    procedure set_Item(index: Int32; value: DNService);
    function get_Item(name: string): DNService; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Service" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  。
    ///</summary>
    ///  <param name="service"><see cref="T:System.Web.Services.Description.Service" />
    ///  实例以添加到集合。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <paramref name="service" />
    ///  添加参数。
    ///</returns>
    function Add(service: DNService): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.Service" />
    ///  到实例 <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="service" />
    ///  参数。
    ///</param>
    ///  <param name="service">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.Service" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; service: DNService);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.Service" />
    ///  并返回内的第一个匹配项的从零开始索引 <see langword="ServiceCollection" />
    ///  。
    ///</summary>
    ///  <param name="service"><see cref="T:System.Web.Services.Description.Service" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  32 位带符号整数。
    ///</returns>
    function IndexOf(service: DNService): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.Service" />
    ///  实例所在的 <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  。
    ///</summary>
    ///  <param name="service"><see cref="T:System.Web.Services.Description.Service" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="service" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(service: DNService): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.Service" />
    ///  从 <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  。
    ///</summary>
    ///  <param name="service">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.Service" />
    ///  。
    ///</param>
    procedure Remove(service: DNService);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  到类型的一维数组 <see cref="T:System.Web.Services.Description.Service" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.Service" />
    ///  充当复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNService>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNService read get_Item write set_Item; default;
    property Item[name: string]: DNService read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceCollection = class(TDNGenericImport<DNServiceCollectionClass, DNServiceCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{E748C7DE-515D-535A-9CE9-BD9C4717F7E0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServiceDescriptionCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Description.ServiceDescription" />
  ///  类的实例集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionCollection')]
  DNServiceDescriptionCollection = interface(DNServiceDescriptionBaseCollection)
  ['{285DC0B4-86A5-3E75-8B56-57E607ABAC40}']
  { getters & setters } 

    function get_Item(index: Int32): DNServiceDescription; overload;
    procedure set_Item(index: Int32; value: DNServiceDescription);
    function get_Item(ns: string): DNServiceDescription; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  。
    ///</summary>
    ///  <param name="serviceDescription">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  添加参数。
    ///</returns>
    function Add(serviceDescription: DNServiceDescription): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  到实例 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="serviceDescription" />
    ///  参数。
    ///</param>
    ///  <param name="serviceDescription">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; serviceDescription: DNServiceDescription);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="serviceDescription"><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  指定的服务说明中，则为-1 如果集合中找不到该元素从零开始的索引。
    ///</returns>
    function IndexOf(serviceDescription: DNServiceDescription): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  是集合的成员。
    ///</summary>
    ///  <param name="serviceDescription"><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="serviceDescription" />
    ///  参数属于 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(serviceDescription: DNServiceDescription): Boolean;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的第一个匹配项。
    ///</summary>
    ///  <param name="serviceDescription">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</param>
    procedure Remove(serviceDescription: DNServiceDescription);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  到类型的一维数组 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  作为复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DNServiceDescription>; index: Int32);
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  ，并返回 <see cref="T:System.Web.Services.Description.Message" />
    ///  具有指定名称，它是之一的成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中包含的实例。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  , ，传递的引用，其 <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  属性通过共享 <see cref="T:System.Web.Services.Description.Message" />
    ///  返回。
    ///</param>
    ///<returns>
    ///  具有指定名称的消息。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  指定 <see langword="Message" />
    ///  不是任何成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中的实例。
    ///</exception>
    function GetMessage(name: DDN.System.Xml.DNXmlQualifiedName): DNMessage;
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  ，并返回 <see cref="T:System.Web.Services.Description.PortType" />
    ///  具有指定名称，它是之一的成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中包含的实例。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  , ，传递的引用，其 <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  属性通过共享 <see cref="T:System.Web.Services.Description.PortType" />
    ///  返回。
    ///</param>
    ///<returns>
    ///  具有指定名称的 <see langword="PortType" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  指定 <see langword="PortType" />
    ///  不是任何成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中的实例。
    ///</exception>
    function GetPortType(name: DDN.System.Xml.DNXmlQualifiedName): DNPortType;
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  ，并返回 <see cref="T:System.Web.Services.Description.Service" />
    ///  具有指定名称，它是之一的成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中包含的实例。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  , ，传递的引用，其 <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  属性通过共享 <see cref="T:System.Web.Services.Description.Service" />
    ///  返回。
    ///</param>
    ///<returns>
    ///  具有指定名称的服务。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  指定 <see langword="Service" />
    ///  不是任何成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中的实例。
    ///</exception>
    function GetService(name: DDN.System.Xml.DNXmlQualifiedName): DNService;
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  ，并返回 <see cref="T:System.Web.Services.Description.Binding" />
    ///  具有指定名称，它是之一的成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中包含的实例。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  其 <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  属性用于检索 <see cref="T:System.Web.Services.Description.Binding" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  具有指定名称绑定。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  指定 <see langword="Binding" />
    ///  不是任何成员 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  集合中的实例。
    ///</exception>
    function GetBinding(name: DDN.System.Xml.DNXmlQualifiedName): DNBinding;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNServiceDescription read get_Item write set_Item; default;
    property Item[ns: string]: DNServiceDescription read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionCollection = class(TDNGenericImport<DNServiceDescriptionCollectionClass, DNServiceDescriptionCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionFormatExtensionCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{2D29C8F5-B5EA-5751-ACDB-CC9CCC736DA2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parent">
    ///  此集合是其成员的对象。
    ///</param>
    {class} function init(parent: DDN.mscorlib.DNObject): DNServiceDescriptionFormatExtensionCollection;

  end;

  ///<summary>
  ///  表示 XML Web 服务所使用的可扩展性元素的集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection')]
  DNServiceDescriptionFormatExtensionCollection = interface(DNServiceDescriptionBaseCollection)
  ['{498CDDD4-27D6-3C72-B879-3549553B706E}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  到末尾 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  。
    ///</summary>
    ///  <param name="extension"><see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , ，按引用传递，将添加到 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  增添了。
    ///</returns>
    function Add(extension: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  到 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  指定索引处的从零开始。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <paramref name="extension" />
    ///  参数。
    ///</param>
    ///  <param name="extension">
    ///  要添加到集合中的 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  参数是否大于 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; extension: DDN.mscorlib.DNObject);
    ///<summary>
    ///  搜索指定 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  并返回集合中第一个实例的从零开始索引。
    ///</summary>
    ///  <param name="extension"><see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  要在集合中搜索。
    ///</param>
    ///<returns>
    ///  指定的从零开始的索引 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , ，否则为-1 的集合中找不到该元素。
    ///</returns>
    function IndexOf(extension: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  属于 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  。
    ///</summary>
    ///  <param name="extension"><see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对其进行检查集合成员身份。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是集合的成员; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(extension: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  移除指定的第一个匹配项 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  从 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  。
    ///</summary>
    ///  <param name="extension">
    ///  要从 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  移除的 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  。
    ///</param>
    procedure Remove(extension: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  转换为的类型的一维数组 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , ，从目标数组从零开始的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  作为复制操作的目标。
    ///</param>
    ///  <param name="index">
    ///  从零开始的索引，在该处开始放置复制的集合。
    ///</param>
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNObject>; index: Int32);
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  ，并返回第一个元素指定的派生 <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  一个 <see cref="T:System.Type" />
    ///  表示要在集合中搜索。
    ///</param>
    ///<returns>
    ///  如果搜索未成功，指定的对象 <see cref="T:System.Type" />
    ///  ; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    function Find(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  ，并返回包含指定的所有元素的数组 <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  一个 <see cref="T:System.Type" />
    ///  表示要在集合中搜索。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  实例表示的指定类型的所有集合成员。
    ///</returns>
    function FindAll(&type: DDN.mscorlib.DNType): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  为具有指定的名称和命名空间 URI 的成员。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Xml.XmlElement" />
    ///  要查找。
    ///</param>
    ///  <param name="ns">
    ///  XML 命名空间 URI 的 <see cref="T:System.Xml.XmlElement" />
    ///  要查找。
    ///</param>
    ///<returns>
    ///  如果搜索未成功， <see cref="T:System.Xml.XmlElement" />
    ///  ; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    function Find(name: string; ns: string): DDN.System.Xml.DNXmlElement; overload;
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  并返回具有指定的名称和命名空间 URI 的所有成员的数组。
    ///</summary>
    ///  <param name="name">
    ///  XML 名称特性 <see cref="T:System.Xml.XmlElement" />
    ///  要查找的对象。
    ///</param>
    ///  <param name="ns">
    ///  XML 命名空间 URI 特性 <see cref="T:System.Xml.XmlElement" />
    ///  要查找的对象。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlElement" />
    ///  实例的数组。
    ///</returns>
    function FindAll(name: string; ns: string): TArray<DDN.System.Xml.DNXmlElement>; overload;
    ///<summary>
    ///  返回一个值，该值指示是否可扩展性元素导入 XML Web 服务时通过导入过程使用指定的对象。
    ///</summary>
    ///  <param name="item">
    ///  对象，方法是类型 <see cref="T:System.Xml.XmlElement" />
    ///  或 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  要检查导入进程使用。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="item" />
    ///  参数是使用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsHandled(item: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回一个值，该值指定的对象是否必需的 XML Web 服务的操作。
    ///</summary>
    ///  <param name="item">
    ///  对象，方法是类型 <see cref="T:System.Xml.XmlElement" />
    ///  或 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , ，以检查是否有必要。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="item" />
    ///  参数是必选的; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsRequired(item: DDN.mscorlib.DNObject): Boolean;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionFormatExtensionCollection = class(TDNGenericImport<DNServiceDescriptionFormatExtensionCollectionClass, DNServiceDescriptionFormatExtensionCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{617F08C5-F27E-544F-86E1-183997FB1769}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.WebReferenceCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebReferenceCollection;

  end;

  ///<summary>
  ///  描述 <see cref="T:System.Web.Services.Description.WebReference" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.WebReferenceCollection')]
  DNWebReferenceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{12E95E11-4A57-36AA-A3A1-FB7E361F2EFD}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebReference;
    procedure set_Item(index: Int32; value: DNWebReference);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  追加 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  到集合的实例。
    ///</summary>
    ///  <param name="webReference">
    ///  要追加的 Web 引用。
    ///</param>
    ///<returns>
    ///  追加的 Web 引用的索引。
    ///</returns>
    function Add(webReference: DNWebReference): Int32;
    ///<summary>
    ///  将指定 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  实例的指定索引位置。
    ///</summary>
    ///  <param name="index">
    ///  在其中插入指定的 Web 引用索引。
    ///</param>
    ///  <param name="webReference">
    ///  要插入的 Web 引用。
    ///</param>
    procedure Insert(index: Int32; webReference: DNWebReference);
    ///<summary>
    ///  确定指定的索引 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  实例。
    ///</summary>
    ///  <param name="webReference">
    ///  要搜索的 Web 引用。
    ///</param>
    ///<returns>
    ///  指定的 Web 引用，则为-1 如果集合不包含指定的 Web 引用的索引。
    ///</returns>
    function IndexOf(webReference: DNWebReference): Int32;
    ///<summary>
    ///  确定集合是否包含给定 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  实例。
    ///</summary>
    ///  <param name="webReference">
    ///  要搜索的 Web 引用。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该集合包含给定的 Web 引用实例;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(webReference: DNWebReference): Boolean;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  实例。
    ///</summary>
    ///  <param name="webReference">
    ///  要删除的 Web 引用。
    ///</param>
    procedure Remove(webReference: DNWebReference);
    ///<summary>
    ///  将成员复制到指定的数组，该集合的指定的数组索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  Web 引用的集合成员复制到其中的数组。
    ///</param>
    ///  <param name="index">
    ///  数组索引处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNWebReference>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebReference read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebReferenceCollection = class(TDNGenericImport<DNWebReferenceCollectionClass, DNWebReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientResultCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{32870C24-63CF-5270-932C-A1247DFF2DFF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryClientResultCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
  ///  对象的集合。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientResultCollection')]
  DNDiscoveryClientResultCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{0CA71B79-6FAE-31E7-980E-051BFA551097}']
  { getters & setters } 

    function get_Item(i: Int32): DNDiscoveryClientResult;
    procedure set_Item(i: Int32; value: DNDiscoveryClientResult);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  向 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  中添加一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要添加到 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  的 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  到的位置 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  插入。
    ///</returns>
    function Add(value: DNDiscoveryClientResult): Int32;
    ///<summary>
    ///  确定是否 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  包含特定 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要在 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  中定位的 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  中找到 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DNDiscoveryClientResult): Boolean;
    ///<summary>
    ///  从 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  中移除第一次出现的特定 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要从 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  移除的 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  。
    ///</param>
    procedure Remove(value: DNDiscoveryClientResult);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNDiscoveryClientResult read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientResultCollection = class(TDNGenericImport<DNDiscoveryClientResultCollectionClass, DNDiscoveryClientResultCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryReferenceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{3D648A24-D32B-51AB-8C03-29DC70F09579}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryReferenceCollection;

  end;

  ///<summary>
  ///  一个发现引用集合。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryReferenceCollection')]
  DNDiscoveryReferenceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{E18A5B9E-5231-3029-87B7-6268E65BF0E4}']
  { getters & setters } 

    function get_Item(i: Int32): DNDiscoveryReference;
    procedure set_Item(i: Int32; value: DNDiscoveryReference);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  向 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  中添加一个 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要添加到 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  的 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  位置其中 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  中插入 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  。
    ///</returns>
    function Add(value: DNDiscoveryReference): Int32;
    ///<summary>
    ///  确定是否 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  包含特定 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  要在中定位 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  包含 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DNDiscoveryReference): Boolean;
    ///<summary>
    ///  从 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  中移除 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要从 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  移除的 <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  。
    ///</param>
    procedure Remove(value: DNDiscoveryReference);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNDiscoveryReference read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryReferenceCollection = class(TDNGenericImport<DNDiscoveryReferenceCollectionClass, DNDiscoveryReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D7EE4A41-E982-579A-A21B-1790F67930B1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapHeaderCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
  ///  类的实例集合。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderCollection')]
  DNSoapHeaderCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{821C82E9-A3E7-3EAA-88B6-759282607AC9}']
  { getters & setters } 

    function get_Item(index: Int32): DNSoapHeader;
    procedure set_Item(index: Int32; value: DNSoapHeader);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  向 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  中添加一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</summary>
    ///  <param name="header">
    ///  要添加到 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  的 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  在其中的位置 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  插入。
    ///</returns>
    function Add(header: DNSoapHeader): Int32;
    ///<summary>
    ///  将插入 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  到 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，在其中插入 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  到 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</param>
    ///  <param name="header"><see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  要插入到 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  参数不是有效的索引中 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; header: DNSoapHeader);
    ///<summary>
    ///  确定索引 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  中 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</summary>
    ///  <param name="header">
    ///  要在 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  中定位的 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  索引 <paramref name="header" />
    ///  参数，如果位于 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ; 否则为-1。
    ///</returns>
    function IndexOf(header: DNSoapHeader): Int32;
    ///<summary>
    ///  确定是否 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  包含特定 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  。
    ///</summary>
    ///  <param name="header">
    ///  要在 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  中定位的 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果值 <paramref name="header" />
    ///  中找到的参数 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(header: DNSoapHeader): Boolean;
    ///<summary>
    ///  从 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  中移除第一次出现的特定 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</summary>
    ///  <param name="header">
    ///  要从 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  移除的 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  。
    ///</param>
    procedure Remove(header: DNSoapHeader);
    ///<summary>
    ///  中的元素复制 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  到 <see cref="T:System.Array" />
    ///  , 的某个特定索引处开始， <see cref="T:System.Array" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  一维 <see cref="T:System.Array" />
    ///  ，它是从 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  复制的元素的目标。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index">
    ///  中的从零开始索引 <paramref name="array" />
    ///  参数开始复制处开始。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  参数小于零。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  参数多维。
    ///  - 或 -
    ///  源 SoapHeaderCollection 中的元素数大于从的可用空间 <paramref name="index" />
    ///  到目标数组末尾的参数。
    ///</exception>
    procedure CopyTo(&array: TArray<DNSoapHeader>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSoapHeader read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSoapHeaderCollection = class(TDNGenericImport<DNSoapHeaderCollectionClass, DNSoapHeaderCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientDocumentCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{332825F8-A091-5868-87EC-0E6072154933}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryClientDocumentCollection;

  end;

  ///<summary>
  ///  表示在 XML Web service 发现期间发现的、已下载到客户端的文档的集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientDocumentCollection')]
  DNDiscoveryClientDocumentCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{F6C3BA94-E0F0-3189-BE64-62B171FDC604}']
  { getters & setters } 

    function get_Item(url: string): DDN.mscorlib.DNObject;
    procedure set_Item(url: string; value: DDN.mscorlib.DNObject);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将使用指定的 URL 为对象添加 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</summary>
    ///  <param name="url">
    ///  若要添加到文档的 URL <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  要添加的发现的文档 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个包含键的项 <paramref name="url" />
    ///  中已存在 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</exception>
    procedure Add(url: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  确定如果 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  包含具有指定的 URL 的对象。
    ///</summary>
    ///  <param name="url">
    ///  要在中找到该文档的 URL <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  都包含一个对象使用指定的 URL; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function &Contains(url: string): Boolean;
    ///<summary>
    ///  删除具有指定的 URL 的对象 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</summary>
    ///  <param name="url">
    ///  要移除的已发现文档的 URL <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.ICollection" />
    ///  对象中的所有键 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，包含 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  的键。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.ICollection" />
    ///  对象中的所有值 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，它包含 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  中的值。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientDocumentCollection = class(TDNGenericImport<DNDiscoveryClientDocumentCollectionClass, DNDiscoveryClientDocumentCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientReferenceCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{AC2BAAF9-956D-5EE1-AB5D-C0D56F541B49}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryClientReferenceCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
  ///  对象集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientReferenceCollection')]
  DNDiscoveryClientReferenceCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{319342E4-CF06-3820-BFAA-752EA92E6EB4}']
  { getters & setters } 

    function get_Item(url: string): DNDiscoveryReference;
    procedure set_Item(url: string; value: DNDiscoveryReference);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  向 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  中添加一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要添加到 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  的 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</param>
    procedure Add(value: DNDiscoveryReference); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  带有指定的 URL 和值的 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</summary>
    ///  <param name="url">
    ///  要将添加到该引用的 URL <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  要添加到 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  的 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</param>
    procedure Add(url: string; value: DNDiscoveryReference); overload;
    ///<summary>
    ///  确定如果 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  包含 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  与指定的 URL。
    ///</summary>
    ///  <param name="url">
    ///  有关 URL <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  要在中定位 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  包含 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  与指定的 URL; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(url: string): Boolean;
    ///<summary>
    ///  删除 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  与从指定的 URL <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</summary>
    ///  <param name="url">
    ///  一个字符串，表示该对象的 URL，以去除 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</param>
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DNDiscoveryReference read get_Item write set_Item; default;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.ICollection" />
    ///  对象中的所有键 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，包含 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  的键。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.ICollection" />
    ///  对象中的所有值 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，它包含 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  中的值。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientReferenceCollection = class(TDNGenericImport<DNDiscoveryClientReferenceCollectionClass, DNDiscoveryClientReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryExceptionDictionaryClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{B9B80E43-F41E-5735-AE44-FF2EBFF4C017}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryExceptionDictionary;

  end;

  ///<summary>
  ///  收集在发现 XML Web 服务期间发生的异常。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryExceptionDictionary')]
  DNDiscoveryExceptionDictionary = interface(DDN.mscorlib.DNDictionaryBase)
  ['{8A79B40D-70F9-3888-A1DE-C51D12790B82}']
  { getters & setters } 

    function get_Item(url: string): DDN.mscorlib.DNException;
    procedure set_Item(url: string; value: DDN.mscorlib.DNException);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Exception" />
    ///  键的 <paramref name="url" />
    ///  到 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  。
    ///</summary>
    ///  <param name="url">
    ///  导致在 XML Web 服务发现期间出现异常错误 URL。
    ///</param>
    ///  <param name="value"><see cref="T:System.Exception" />
    ///  XML Web 服务发现过程中发生。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个包含键的项 <paramref name="url" />
    ///  中已存在 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  。
    ///</exception>
    procedure Add(url: string; value: DDN.mscorlib.DNException);
    ///<summary>
    ///  确定是否 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  包含 <see cref="T:System.Exception" />
    ///  与指定的 URL。
    ///</summary>
    ///  <param name="url">
    ///  URL <see cref="T:System.Exception" />
    ///  要在中定位 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  包含 <see cref="T:System.Exception" />
    ///  与指定的 URL; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function &Contains(url: string): Boolean;
    ///<summary>
    ///  删除 <see cref="T:System.Exception" />
    ///  与从指定的 URL <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  。
    ///</summary>
    ///  <param name="url">
    ///  URL <see cref="T:System.Exception" />
    ///  以去除 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DDN.mscorlib.DNException read get_Item write set_Item; default;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.ICollection" />
    ///  对象中的所有键 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，包含 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  的键。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.ICollection" />
    ///  对象，其中包含中的所有值 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，它包含 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  中的值。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryExceptionDictionary = class(TDNGenericImport<DNDiscoveryExceptionDictionaryClass, DNDiscoveryExceptionDictionary>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceClass = interface(DNObjectClass)
  ['{76DF2388-4344-5160-A2EF-09B07A0EF4C2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.WebService" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebService;

  end;

  ///<summary>
  ///  定义可选类的基类 XML Web 服务，它提供对公共 ASP.NET 对象，例如应用程序和会话状态的直接访问。
  ///</summary>
  [DNTypeName('System.Web.Services.WebService')]
  DNWebService = interface(DNObject)
  ['{071632B9-45F4-37F9-9A37-45C335B86B5C}']
  { getters & setters } 

    function get_Application: DDN.System.Web.DNHttpApplicationState;
    function get_Context: DDN.System.Web.DNHttpContext;
    function get_Session: DDN.System.Web.DNHttpSessionState;
    function get_Server: DDN.System.Web.DNHttpServerUtility;
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取当前 HTTP 请求的应用程序对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.HttpApplicationState" />
    ///  对象。
    ///</returns>
    property Application: DDN.System.Web.DNHttpApplicationState read get_Application;
    ///<summary>
    ///  获取 ASP.NET <see cref="T:System.Web.HttpContext" />
    ///  为当前请求，将封装到 Web 请求的进程的 HTTP 服务器使用的所有 HTTP 特定上下文。
    ///</summary>
    ///<returns>
    ///  ASP.NET <see cref="T:System.Web.HttpContext" />
    ///  为当前请求。
    ///</returns>
    ///<exception cref="T:System.Exception"><paramref name="Context" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    property Context: DDN.System.Web.DNHttpContext read get_Context;
    ///<summary>
    ///  获取 <see cref="T:System.Web.SessionState.HttpSessionState" />
    ///  为当前请求的实例。
    ///</summary>
    ///<returns><see cref="T:System.Web.SessionState.HttpSessionState" />
    ///  表示为当前会话的 ASP.NET 会话状态对象。
    ///</returns>
    property Session: DDN.System.Web.DNHttpSessionState read get_Session;
    ///<summary>
    ///  获取 <see cref="T:System.Web.HttpServerUtility" />
    ///  为当前请求。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.HttpServerUtility" />
    ///  对象。
    ///</returns>
    property Server: DDN.System.Web.DNHttpServerUtility read get_Server;
    ///<summary>
    ///  获取 ASP.NET 服务器 <see cref="P:System.Web.HttpContext.User" />
    ///  对象。
    ///  可以用于对是否授权用户执行的请求进行身份验证。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Principal.IPrincipal" />
    ///  表示 ASP.NET 服务器 <see cref="P:System.Web.HttpContext.User" />
    ///  对象。
    ///</returns>
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    ///<summary>
    ///  获取用于对 XML Web 服务发出的 SOAP 请求的 SOAP 协议的版本。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  。
    ///</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNWebService = class(TDNGenericImport<DNWebServiceClass, DNWebService>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNProtocolElementCollectionClass = interface(DNObjectClass)
  ['{C76A5689-DBF4-5950-9351-49B8126F0140}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Configuration.ProtocolElementCollection" />
    ///  。
    ///</summary>
    {class} function init: DNProtocolElementCollection;

  end;

  ///<summary>
  ///  包含一个强类型化的集合 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.ProtocolElementCollection')]
  DNProtocolElementCollection = interface(DNObject)
  ['{3B1722C0-CF1E-3155-AE67-88E67336A395}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNProtocolElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNProtocolElement); overload;
    function get_Item(index: Int32): DNProtocolElement; overload;
    procedure set_Item(index: Int32; value: DNProtocolElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  添加到集合。
    ///</summary>
    ///  <param name="element">
    ///  要添加的 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  。
    ///</param>
    procedure Add(element: DNProtocolElement);
    ///<summary>
    ///  从集合中删除所有 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  ，该值指示是否 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  集合中存在具有指定键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  要在集合中查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  具有指定键; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将元素从集合复制到数组，该数组的某个特定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  要向其复制集合的内容。
    ///</param>
    ///  <param name="index"><paramref name="Array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNProtocolElement>; index: Int32); overload;
    ///<summary>
    ///  返回指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要在集合中查找的 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  , ，否则为-1 的集合中找不到该元素。
    ///</returns>
    function IndexOf(element: DNProtocolElement): Int32;
    ///<summary>
    ///  移除指定 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNProtocolElement);
    ///<summary>
    ///  删除 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  与集合中指定的键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  集合中移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引 <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNProtocolElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNProtocolElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolElementCollection = class(TDNGenericImport<DNProtocolElementCollectionClass, DNProtocolElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapExtensionTypeElementCollectionClass = interface(DNObjectClass)
  ['{96147F8F-5DD2-51D5-9394-BD5B877FE942}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElementCollection" />
    ///  。
    ///</summary>
    {class} function init: DNSoapExtensionTypeElementCollection;

  end;

  ///<summary>
  ///  包含一个强类型化的集合 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.SoapExtensionTypeElementCollection')]
  DNSoapExtensionTypeElementCollection = interface(DNObject)
  ['{141B31B9-5A61-34DB-AC7E-B308DAAE9575}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNSoapExtensionTypeElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNSoapExtensionTypeElement); overload;
    function get_Item(index: Int32): DNSoapExtensionTypeElement; overload;
    procedure set_Item(index: Int32; value: DNSoapExtensionTypeElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  添加到集合。
    ///</summary>
    ///  <param name="element">
    ///  要添加的 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  。
    ///</param>
    procedure Add(element: DNSoapExtensionTypeElement);
    ///<summary>
    ///  从集合中删除所有 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  ，该值指示是否 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  集合中存在具有指定键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  要在集合中查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  具有指定键; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将元素从集合复制到数组，该数组的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  要向其复制集合的内容。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNSoapExtensionTypeElement>; index: Int32); overload;
    ///<summary>
    ///  返回指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要在集合中查找的 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  , ，否则为-1 的集合中找不到该元素。
    ///</returns>
    function IndexOf(element: DNSoapExtensionTypeElement): Int32;
    ///<summary>
    ///  移除指定 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNSoapExtensionTypeElement);
    ///<summary>
    ///  删除 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  与集合中指定的键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  集合中移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNSoapExtensionTypeElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNSoapExtensionTypeElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapExtensionTypeElementCollection = class(TDNGenericImport<DNSoapExtensionTypeElementCollectionClass, DNSoapExtensionTypeElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNTypeElementCollectionClass = interface(DNObjectClass)
  ['{81DACE2A-BB34-5D14-80E8-931FAFAC628D}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  。
    ///</summary>
    {class} function init: DNTypeElementCollection;

  end;

  ///<summary>
  ///  包含一个强类型化的集合 <see cref="T:System.Web.Services.Configuration.TypeElement" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.TypeElementCollection')]
  DNTypeElementCollection = interface(DNObject)
  ['{9420CE26-DB85-30A6-9A7F-98D9386A37AC}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNTypeElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNTypeElement); overload;
    function get_Item(index: Int32): DNTypeElement; overload;
    procedure set_Item(index: Int32; value: DNTypeElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  添加到集合。
    ///</summary>
    ///  <param name="element">
    ///  要添加的 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  。
    ///</param>
    procedure Add(element: DNTypeElement);
    ///<summary>
    ///  从集合中删除所有 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  ，该值指示是否 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  集合中存在具有指定键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  要在集合中查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  具有指定键; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将元素从集合复制到数组，该数组的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  要向其复制集合的内容。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNTypeElement>; index: Int32); overload;
    ///<summary>
    ///  返回指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要在集合中查找的 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  , ，否则为-1 的集合中找不到该元素。
    ///</returns>
    function IndexOf(element: DNTypeElement): Int32;
    ///<summary>
    ///  移除指定 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNTypeElement);
    ///<summary>
    ///  删除 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  与集合中指定的键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  集合中移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNTypeElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNTypeElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTypeElementCollection = class(TDNGenericImport<DNTypeElementCollectionClass, DNTypeElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsiProfilesElementCollectionClass = interface(DNObjectClass)
  ['{23B46D28-0BFE-5F15-8E92-B513760F5E51}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Configuration.WsiProfilesElementCollection" />
    ///  。
    ///</summary>
    {class} function init: DNWsiProfilesElementCollection;

  end;

  ///<summary>
  ///  包含一个强类型化的集合 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.WsiProfilesElementCollection')]
  DNWsiProfilesElementCollection = interface(DNObject)
  ['{744F08E6-7BE8-3BA9-9F37-314819E2FF48}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNWsiProfilesElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNWsiProfilesElement); overload;
    function get_Item(index: Int32): DNWsiProfilesElement; overload;
    procedure set_Item(index: Int32; value: DNWsiProfilesElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  添加到集合。
    ///</summary>
    ///  <param name="element">
    ///  要添加的 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  。
    ///</param>
    procedure Add(element: DNWsiProfilesElement);
    ///<summary>
    ///  删除所有 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  来自集合的对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  ，该值指示是否 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  集合中存在具有指定键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  要在集合中查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  具有指定键; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将元素从集合复制到数组，该数组的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  类型的数组 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  要向其复制集合的内容。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNWsiProfilesElement>; index: Int32); overload;
    ///<summary>
    ///  返回指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要在集合中查找的 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的索引 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  , ，否则为-1 的集合中找不到该元素。
    ///</returns>
    function IndexOf(element: DNWsiProfilesElement): Int32;
    ///<summary>
    ///  移除指定 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  集合中。
    ///</summary>
    ///  <param name="element">
    ///  要从该集合中移除的 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNWsiProfilesElement);
    ///<summary>
    ///  删除 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  与集合中指定的键。
    ///</summary>
    ///  <param name="key">
    ///  键 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  集合中移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  若要从集合中移除。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNWsiProfilesElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNWsiProfilesElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsiProfilesElementCollection = class(TDNGenericImport<DNWsiProfilesElementCollectionClass, DNWsiProfilesElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWebServicesSectionClass = interface(DNObjectClass)
  ['{BDDC500A-FE8F-5F06-84B5-236CE67625CB}']
  { static getter & setter } 

    {class} function get_Current: DNWebServicesSection;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebServicesSection;

  { static methods } 

    ///<summary>
    ///  检索指定的配置节。
    ///</summary>
    ///  <param name="config">
    ///  一个 <see cref="T:System.Configuration.Configuration" />
    ///  对象，表示要检索的部分。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  对象，表示要检索的部分。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="config" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetSection(config: DDN.System.Configuration.DNConfiguration): DNWebServicesSection;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  对象，表示当前部分。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  对象。
    ///</returns>
    {class} property Current: DNWebServicesSection read get_Current;
  end;

  ///<summary>
  ///  表示 <see langword="webServices" />
  ///  配置文件中的元素。
  ///  此元素控制的 XML Web 服务的设置。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.WebServicesSection')]
  DNWebServicesSection = interface(DNObject)
  ['{9F8ADC5D-6785-3581-90CC-F758E37E0072}']
  { getters & setters } 

    function get_ConformanceWarnings: DNWsiProfilesElementCollection;
    function get_EnabledProtocols: DNWebServiceProtocols;
    function get_Protocols: DNProtocolElementCollection;
    function get_SoapEnvelopeProcessing: DNSoapEnvelopeProcessingElement;
    procedure set_SoapEnvelopeProcessing(value: DNSoapEnvelopeProcessingElement);
    function get_Diagnostics: DNDiagnosticsElement;
    procedure set_Diagnostics(value: DNDiagnosticsElement);
    function get_ServiceDescriptionFormatExtensionTypes: DNTypeElementCollection;
    function get_SoapExtensionImporterTypes: DNTypeElementCollection;
    function get_SoapExtensionReflectorTypes: DNTypeElementCollection;
    function get_SoapExtensionTypes: DNSoapExtensionTypeElementCollection;
    function get_SoapServerProtocolFactoryType: DNTypeElement;
    function get_SoapTransportImporterTypes: DNTypeElementCollection;
    function get_WsdlHelpGenerator: DNWsdlHelpGeneratorElement;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 Web 服务的一致性警告的集合。
    ///  此属性对应于 <see langword="configurationWarnings" />
    ///  配置文件中的元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.WsiProfilesElementCollection" />
    ///  对象，表示为 Web 服务的一致性警告的集合。
    ///</returns>
    property ConformanceWarnings: DNWsiProfilesElementCollection read get_ConformanceWarnings;
    ///<summary>
    ///  获取其中一个 <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  值，该值指示 Web 服务协议。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  值之一。
    ///</returns>
    property EnabledProtocols: DNWebServiceProtocols read get_EnabledProtocols;
    ///<summary>
    ///  获取用于解密从 HTTP 请求中的客户端浏览器发送的数据的传输协议。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  对象，表示用于解密从 HTTP 请求中的客户端浏览器发送的数据的传输协议。
    ///</returns>
    property Protocols: DNProtocolElementCollection read get_Protocols;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  为 <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  为当前的配置文件。
    ///</returns>
    property SoapEnvelopeProcessing: DNSoapEnvelopeProcessingElement read get_SoapEnvelopeProcessing write set_SoapEnvelopeProcessing;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Configuration.DiagnosticsElement" />
    ///  为 <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.DiagnosticsElement" />
    ///  为当前的配置文件。
    ///</returns>
    property Diagnostics: DNDiagnosticsElement read get_Diagnostics write set_Diagnostics;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  ，它指定要在配置文件的作用域内运行的服务说明格式扩展。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  ，它指定要在配置文件的作用域内运行的服务说明格式扩展。
    ///</returns>
    property ServiceDescriptionFormatExtensionTypes: DNTypeElementCollection read get_ServiceDescriptionFormatExtensionTypes;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  ，它指定的 SOAP 扩展运行时访问 XML Web 服务配置文件的作用域内的服务说明。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  ，它指定的 SOAP 扩展运行时访问 XML Web 服务配置文件的作用域内的服务说明。
    ///</returns>
    property SoapExtensionImporterTypes: DNTypeElementCollection read get_SoapExtensionImporterTypes;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  ，它指定要在服务说明生成的配置文件的作用域内的所有 XML Web 服务时运行的 SOAP 扩展。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  ，它指定要在服务说明生成的配置文件的作用域内的所有 XML Web 服务时运行的 SOAP 扩展。
    ///</returns>
    property SoapExtensionReflectorTypes: DNTypeElementCollection read get_SoapExtensionReflectorTypes;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElementCollection" />
    ///  ，它指定要使用配置文件的作用域内的所有 XML Web 服务运行的 SOAP 扩展。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElementCollection" />
    ///  ，它指定要使用配置文件的作用域内的所有 XML Web 服务运行的 SOAP 扩展。
    ///</returns>
    property SoapExtensionTypes: DNSoapExtensionTypeElementCollection read get_SoapExtensionTypes;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  对应于用来调用 Web 服务的协议的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  对应于用来调用 Web 服务的协议的对象。
    ///</returns>
    property SoapServerProtocolFactoryType: DNTypeElement read get_SoapServerProtocolFactoryType;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  对象，表示 SoapTransportImporterTypes 配置元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  对象，表示 <see langword="SoapTransportImporterTypes" />
    ///  配置元素。
    ///</returns>
    property SoapTransportImporterTypes: DNTypeElementCollection read get_SoapTransportImporterTypes;
    ///<summary>
    ///  获取在浏览器将直接导航到 ASMX 页时，向浏览器显示 Web 服务帮助页 （.aspx 文件）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.WsdlHelpGeneratorElement" />
    ///  对象，它指定在浏览器将直接导航到 ASMX XML Web 服务页时，向浏览器显示 XML Web 服务帮助页 （.aspx 文件）。
    ///</returns>
    property WsdlHelpGenerator: DNWsdlHelpGeneratorElement read get_WsdlHelpGenerator;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebServicesSection = class(TDNGenericImport<DNWebServicesSectionClass, DNWebServicesSection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNDiagnosticsElementClass = interface(DNObjectClass)
  ['{22E38B3A-5440-5519-B957-956760FA46EE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.DiagnosticsElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiagnosticsElement;

  end;

  ///<summary>
  ///  表示 Web.config 配置文件中的 &lt;diagnostics&gt; 元素。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.DiagnosticsElement')]
  DNDiagnosticsElement = interface(DNObject)
  ['{BAF33767-9E43-3C23-B8D1-E538A6EF771A}']
  { getters & setters } 

    function get_SuppressReturningExceptions: Boolean;
    procedure set_SuppressReturningExceptions(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示服务是否返回异常。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该服务返回的异常;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property SuppressReturningExceptions: Boolean read get_SuppressReturningExceptions write set_SuppressReturningExceptions;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDiagnosticsElement = class(TDNGenericImport<DNDiagnosticsElementClass, DNDiagnosticsElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNProtocolElementClass = interface(DNObjectClass)
  ['{7538B510-782A-5831-837F-EC834436FF82}']
  { constructors } 

    ///<summary>
    ///  创建此类的实例。
    ///</summary>
    {class} function init: DNProtocolElement; overload;
    ///<summary>
    ///  创建此类的实例并初始化 <see cref="P:System.Web.Services.Configuration.ProtocolElement.Name" />
    ///  属性。
    ///</summary>
    ///  <param name="protocol">
    ///  要初始化的值 <see cref="P:System.Web.Services.Configuration.ProtocolElement.Name" />
    ///  。
    ///</param>
    {class} function init(protocol: DNWebServiceProtocols): DNProtocolElement; overload;

  end;

  ///<summary>
  ///  表示 <see langword="protocol" />
  ///  Web 服务配置文件中的元素。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.ProtocolElement')]
  DNProtocolElement = interface(DNObject)
  ['{3C1D5EBC-5430-37E1-8D66-CD655A780583}']
  { getters & setters } 

    function get_Name: DNWebServiceProtocols;
    procedure set_Name(value: DNWebServiceProtocols);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置协议名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  对象，表示协议名称。
    ///</returns>
    property Name: DNWebServiceProtocols read get_Name write set_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolElement = class(TDNGenericImport<DNProtocolElementClass, DNProtocolElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapEnvelopeProcessingElementClass = interface(DNObjectClass)
  ['{8820641C-A645-55B1-9151-2FA6997842A9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapEnvelopeProcessingElement; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  类使用所提供 <see cref="T:System.Int32" />
    ///  值。
    ///</summary>
    ///  <param name="readTimeout">
    ///  超时期限的值。
    ///</param>
    {class} function init(readTimeout: Int32): DNSoapEnvelopeProcessingElement; overload;
    ///<summary>
    ///  获取或设置用于确定是否终止请求以防范拒绝服务攻击的超时期限。
    ///</summary>
    ///  <param name="readTimeout">
    ///  要在终止前等待的时间向请求 <see cref="M:System.Xml.XmlReader.Read" />
    ///  和 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  。
    ///</param>
    ///  <param name="strict">
    ///  没有时是否引发异常，如果序列化程序遇到元素或属性与原始架构中。
    ///  有关详细信息，请参阅 <see cref="P:System.Web.Services.Configuration.SoapEnvelopeProcessingElement.IsStrict" />
    ///  属性。
    ///</param>
    {class} function init(readTimeout: Int32; &strict: Boolean): DNSoapEnvelopeProcessingElement; overload;

  end;

  ///<summary>
  ///  配置一个有助于缓解拒绝服务攻击的终止时间超过任何请求的超时限制 <see cref="P:System.Web.Services.Configuration.SoapEnvelopeProcessingElement.ReadTimeout" />
  ///  属性值。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.SoapEnvelopeProcessingElement')]
  DNSoapEnvelopeProcessingElement = interface(DNObject)
  ['{11BF26C8-2F62-3960-B6B0-3CD6BCC5E30C}']
  { getters & setters } 

    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_IsStrict: Boolean;
    procedure set_IsStrict(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于确定是否终止请求以防范拒绝服务攻击的超时期限。
    ///</summary>
    ///<returns>
    ///  要在终止前等待的时间向请求 <see cref="M:System.Xml.XmlReader.Read" />
    ///  和 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  。
    ///</returns>
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    ///<summary>
    ///  获取或设置一个值，该值指示是否引发异常，如果序列化程序时遇到意外的元素或属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 Web 服务序列化程序将尝试检测到意外的元素或属性，则否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsStrict: Boolean read get_IsStrict write set_IsStrict;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapEnvelopeProcessingElement = class(TDNGenericImport<DNSoapEnvelopeProcessingElementClass, DNSoapEnvelopeProcessingElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapExtensionTypeElementClass = interface(DNObjectClass)
  ['{CCA39556-08FB-51E4-97B4-B7155CF687BE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapExtensionTypeElement; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type">
    ///  指定要添加的 SOAP 扩展类。
    ///</param>
    ///  <param name="priority">
    ///  指示当指定多个 SOAP 扩展时运行 SOAP 扩展的相对顺序。
    ///  在每个组中，优先级特性都区分 SOAP 扩展的整体相对优先级。
    ///  优先级编号越低指示 SOAP 扩展的优先级就越高。
    ///  优先级属性的最小值为 1。
    ///</param>
    ///  <param name="group">
    ///  优先级，以及指定多个 SOAP 扩展配置为运行时运行 SOAP 扩展的相对顺序。
    ///</param>
    {class} function init(&type: string; priority: Int32; group: DNPriorityGroup): DNSoapExtensionTypeElement; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type">
    ///  指定要添加的 SOAP 扩展类。
    ///</param>
    ///  <param name="priority">
    ///  指示当指定多个 SOAP 扩展时运行 SOAP 扩展的相对顺序。
    ///</param>
    ///  <param name="group">
    ///  优先级，以及指定多个 SOAP 扩展配置为运行时运行 SOAP 扩展的相对顺序。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; priority: Int32; group: DNPriorityGroup): DNSoapExtensionTypeElement; overload;

  end;

  ///<summary>
  ///  表示 SoapExtensionElement Web 服务配置文件中。
  ///  此元素中添加 SOAP 扩展，以使用配置文件的作用域内的所有 XML Web 服务运行。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.SoapExtensionTypeElement')]
  DNSoapExtensionTypeElement = interface(DNObject)
  ['{EFD42C93-4353-37DB-A5C8-31676535A1D8}']
  { getters & setters } 

    function get_Group: DNPriorityGroup;
    procedure set_Group(value: DNPriorityGroup);
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置多个 SOAP 扩展配置为运行时运行 SOAP 扩展的相对顺序。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Configuration.PriorityGroup" />
    ///  对象的值确定在其中运行 SOAP 扩展的相对顺序。
    ///</returns>
    property Group: DNPriorityGroup read get_Group write set_Group;
    ///<summary>
    ///  获取或设置一个值，指示当指定多个 SOAP 扩展时运行 SOAP 扩展的相对顺序。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Int32" />
    ///  其值确定在其中运行 SOAP 扩展的相对顺序。
    ///</returns>
    property Priority: Int32 read get_Priority write set_Priority;
    ///<summary>
    ///  获取或设置要添加到 Web 服务配置文件的 SoapExtensionType 元素的 SOAP 扩展类。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 SoapExtensionType 元素的类型名称。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapExtensionTypeElement = class(TDNGenericImport<DNSoapExtensionTypeElementClass, DNSoapExtensionTypeElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNTypeElementClass = interface(DNObjectClass)
  ['{A3435EB6-8AA8-5E73-BD6C-9D89A7C22895}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  类的实例。
    ///</summary>
    {class} function init: DNTypeElement; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  类的实例。
    ///</summary>
    ///  <param name="type">
    ///  配置属性的类型。
    ///</param>
    {class} function init(&type: string): DNTypeElement; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  类的实例。
    ///</summary>
    ///  <param name="type">
    ///  配置属性的类型。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNTypeElement; overload;

  end;

  ///<summary>
  ///  表示 <see langword="type" />
  ///  Web 服务配置文件中的元素。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.TypeElement')]
  DNTypeElement = interface(DNObject)
  ['{2724AAC7-EBAB-3582-94FD-EAADAC298424}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置配置属性的类型。
    ///</summary>
    ///<returns>
    ///  配置属性的类型。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTypeElement = class(TDNGenericImport<DNTypeElementClass, DNTypeElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsdlHelpGeneratorElementClass = interface(DNObjectClass)
  ['{B3C1B686-B9B3-5831-B699-BBC1C776DBC7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Configuration.WsdlHelpGeneratorElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWsdlHelpGeneratorElement;

  end;

  ///<summary>
  ///  表示 <see langword="WsdlHelpGenerator" />
  ///  指定浏览器将直接导航到 ASMX XML Web 服务页时显示给浏览器的 XML Web 服务帮助页 （.aspx 文件） 的配置文件中的元素。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.WsdlHelpGeneratorElement')]
  DNWsdlHelpGeneratorElement = interface(DNObject)
  ['{E0FD4447-DD52-36B2-9505-4ADCE0A3EEF3}']
  { getters & setters } 

    function get_Href: string;
    procedure set_Href(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置帮助页上的文件路径。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含帮助页上的文件路径。
    ///</returns>
    property Href: string read get_Href write set_Href;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsdlHelpGeneratorElement = class(TDNGenericImport<DNWsdlHelpGeneratorElementClass, DNWsdlHelpGeneratorElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsiProfilesElementClass = interface(DNObjectClass)
  ['{274BE160-6830-5FFB-8AE6-69703DA0B524}']
  { constructors } 

    ///<summary>
    ///  初始化和实例 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  类。
    ///</summary>
    {class} function init: DNWsiProfilesElement; overload;
    ///<summary>
    ///  初始化和实例 <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  类，使用指定 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  枚举值。
    ///</summary>
    ///  <param name="name">
    ///  一个 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  对象，它指定 Web 服务是否符合 WSI 基本配置文件 1.1 版。
    ///</param>
    {class} function init(name: DNWsiProfiles): DNWsiProfilesElement; overload;

  end;

  ///<summary>
  ///  表示 <see langword="WsiProfiles" />
  ///  配置文件中的元素。
  ///</summary>
  [DNTypeName('System.Web.Services.Configuration.WsiProfilesElement')]
  DNWsiProfilesElement = interface(DNObject)
  ['{B679E2EE-05EC-3099-82D8-B552B2F3AE5C}']
  { getters & setters } 

    function get_Name: DNWsiProfiles;
    procedure set_Name(value: DNWsiProfiles);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置是否符合 WSI 基本配置文件版本 1.1 的 Web 服务。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  对象，它指定 Web 服务是否符合 WSI 基本配置文件 1.1 版。
    ///</returns>
    property Name: DNWsiProfiles read get_Name write set_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsiProfilesElement = class(TDNGenericImport<DNWsiProfilesElementClass, DNWsiProfilesElement>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNInvokeCompletedEventArgsClass = interface(DNObjectClass)
  ['{80D8B0FD-CAB1-5BAB-B49E-6241DB306746}']
  end;

  ///<summary>
  ///  表示异步调用的 web 方法的结果。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.InvokeCompletedEventArgs')]
  DNInvokeCompletedEventArgs = interface(DNObject)
  ['{D0D18440-74F6-305C-8077-A796BA0C2F72}']
  { getters & setters } 

    function get_Results: TArray<DDN.mscorlib.DNObject>;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 Web 方法返回的结果。
    ///</summary>
    ///<returns>
    ///  Web 方法返回的对象的数组。
    ///</returns>
    property Results: TArray<DDN.mscorlib.DNObject> read get_Results;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNInvokeCompletedEventArgs = class(TDNGenericImport<DNInvokeCompletedEventArgsClass, DNInvokeCompletedEventArgs>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{D29DD0CB-A764-57A4-A8DB-1C047296C8CF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  用指定的异常消息、 异常代码和用于标识导致异常的代码段中的 URI。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定发生错误的类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  一个 URI，标识导致异常的代码。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string): DNSoapException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  使用指定的异常消息、 异常代码，用于标识导致了异常的代码的 URI 和对异常的根源的引用。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定发生错误的类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  一个 URI，标识导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="innerException">
    ///  该异常的根源异常。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  使用指定的异常消息和异常代码的类。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定发生错误的类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName): DNSoapException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  用指定的异常消息、 异常代码和引用该异常的根本原因。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  指定发生的错误类型的 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="innerException">
    ///  该异常的根源异常。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  类使用指定的异常消息、 异常代码标识导致异常，以及应用程序特定的异常信息的代码段中的 URI。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定发生错误的类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  一个 URI，标识导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="detail"><see cref="T:System.Xml.XmlNode" />
    ///  包含应用程序特定的异常信息。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; detail: DDN.System.Xml.DNXmlNode): DNSoapException; overload;
    ///<summary>
    ///  使用指定异常消息、异常代码、标识导致异常的代码段的 URI、特定于应用程序的异常信息以及对异常根源的引用来初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  指定发生的错误类型的 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  一个 URI，标识导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="detail">
    ///  一个 <see cref="T:System.Xml.XmlNode" />
    ///  ，包含特定于应用程序的异常信息。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  属性。
    ///</param>
    ///  <param name="innerException">
    ///  该异常的根源异常。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; detail: DDN.System.Xml.DNXmlNode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>
    ///  使用指定的异常消息、异常代码和子代码初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  指定发生的错误类型的 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="subCode">
    ///  SOAP 错误的可选子代码。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.SubCode" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; subCode: DNSoapFaultSubCode): DNSoapException; overload;
    ///<summary>
    ///  使用指定异常消息、异常代码、标识导致异常的代码段的 URI、特定于应用程序的异常信息以及对异常根源的引用来初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  指定发生的错误类型的 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  一个 URI，标识导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="role">
    ///  一个 URI，表示用于处理 SOAP 消息的 XML Web service 功能。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  属性。
    ///</param>
    ///  <param name="detail">
    ///  一个 <see cref="T:System.Xml.XmlNode" />
    ///  ，包含特定于应用程序的异常信息。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  属性。
    ///</param>
    ///  <param name="subCode">
    ///  SOAP 错误的可选子代码。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.SubCode" />
    ///  属性。
    ///</param>
    ///  <param name="innerException">
    ///  该异常的根源异常。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; detail: DDN.System.Xml.DNXmlNode; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>
    ///  使用以下内容初始化 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  类的新实例：指定的异常消息、异常代码、标识引起异常的代码块的 URI、表示用于处理 SOAP 消息的 XML Web service 功能的 URI、与异常关联的人类语言、特定于应用程序的异常信息、SOAP 错误的子代码以及对异常的根源的引用。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  指定发生的错误类型的 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  一个 URI，标识导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="role">
    ///  一个 URI，表示用于处理 SOAP 消息的 XML Web service 功能。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  属性。
    ///</param>
    ///  <param name="lang">
    ///  与异常关联的人类语言。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Lang" />
    ///  属性。
    ///</param>
    ///  <param name="detail">
    ///  一个 <see cref="T:System.Xml.XmlNode" />
    ///  ，包含特定于应用程序的异常信息。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  属性。
    ///</param>
    ///  <param name="subCode">
    ///  SOAP 错误的可选子代码。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.SubCode" />
    ///  属性。
    ///</param>
    ///  <param name="innerException">
    ///  该异常的根源异常。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; lang: string; detail: DDN.System.Xml.DNXmlNode; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ServerFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_ClientFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_DetailElementName: DDN.System.Xml.DNXmlQualifiedName;

  { static fields } 

    ///<summary>
    ///  指定在服务器上，此问题不由于消息内容的客户端调用的处理过程中发生了表示错误的 SOAP 错误代码。
    ///</summary>
    {class} property ServerFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ServerFaultCode;
    ///<summary>
    ///  指定 SOAP 错误代码表示客户端调用的格式不正确或者不包含相应的信息。
    ///</summary>
    {class} property ClientFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ClientFaultCode;
    ///<summary>
    ///  在 SOAP 消息的处理过程找表示无效的命名空间用于 SOAP 信封的 SOAP 错误代码。
    ///</summary>
    {class} property VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_VersionMismatchFaultCode;
    ///<summary>
    ///  SOAP 错误代码表示 SOAP 元素标记为 <see langword="MustUnderstand" />
    ///  未处理特性。
    ///</summary>
    {class} property MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_MustUnderstandFaultCode;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  表示 <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  的 SOAP 错误代码元素。
    ///</summary>
    {class} property DetailElementName: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_DetailElementName;

  { static methods } 

    ///<summary>
    ///  返回一个值，该值指示 SOAP 错误代码是否等效于 <see langword="Server" />
    ///  不管使用的 SOAP 协议的版本的 SOAP 错误代码。
    ///</summary>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，其中包含 SOAP 错误代码。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="code" />
    ///  等同于 <see langword="Server" />
    ///  SOAP 错误代码; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsServerFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    ///<summary>
    ///  返回一个值，该值指示 SOAP 错误代码是否等效于 <see langword="Client" />
    ///  不管使用的 SOAP 协议的版本的 SOAP 错误代码。
    ///</summary>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，其中包含 SOAP 错误代码。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="code" />
    ///  等同于 <see langword="Client" />
    ///  SOAP 错误代码; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsClientFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    ///<summary>
    ///  返回一个值，该值指示 SOAP 错误代码是否等效于 <see langword="VersionMismatch" />
    ///  不管使用的 SOAP 协议的版本的 SOAP 错误代码。
    ///</summary>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，其中包含 SOAP 错误代码。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="code" />
    ///  等同于 <see langword="VersionMismatch" />
    ///  SOAP 错误代码; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsVersionMismatchFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    ///<summary>
    ///  返回一个值，该值指示 SOAP 错误代码是否等效于 <see langword="MustUnderstand" />
    ///  不管使用的 SOAP 协议的版本。
    ///</summary>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，其中包含 SOAP 错误代码。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="code" />
    ///  等同于 <see langword="MustUnderstand" />
    ///  SOAP 错误代码; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsMustUnderstandFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;

  end;

  ///<summary>
  ///  表示在 SOAP 上调用 XML Web 服务方法，并且会发生异常时引发的异常。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapException')]
  DNSoapException = interface(DDN.mscorlib.DNSystemException)
  ['{F6D4AC82-366C-3BC5-AE59-ED6A0C95CADB}']
  { getters & setters } 

    function get_Actor: string;
    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_Detail: DDN.System.Xml.DNXmlNode;
    function get_Lang: string;
    function get_Node: string;
    function get_Role: string;
    function get_SubCode: DNSoapFaultSubCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  集 <see cref="T:System.Runtime.Serialization." />
    ///<see cref="SerializationInfo" />
    ///  有关异常的信息。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存关于所引发异常的序列化对象数据。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含关于源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取导致异常的代码段中。
    ///</summary>
    ///<returns>
    ///  导致异常的代码段。
    ///</returns>
    property Actor: string read get_Actor;
    ///<summary>
    ///  获取 SOAP 错误代码的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定出现的 SOAP 错误代码。
    ///</returns>
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNode" />
    ///  表示特定于应用程序错误的信息详细信息。
    ///</summary>
    ///<returns>
    ///  应用程序特定的错误信息。
    ///</returns>
    property Detail: DDN.System.Xml.DNXmlNode read get_Detail;
    ///<summary>
    ///  获取与异常关联的人类语言。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值标识与异常关联的人类语言。
    ///</returns>
    property Lang: string read get_Lang;
    ///<summary>
    ///  获取一个 URI，表示导致异常的代码段中。
    ///</summary>
    ///<returns>
    ///  导致异常的代码段。
    ///</returns>
    property Node: string read get_Node;
    ///<summary>
    ///  获取一个 URI，它表示在处理 SOAP 消息的 XML Web services 的函数。
    ///</summary>
    ///<returns>
    ///  XML Web 服务引发角色 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Role: string read get_Role;
    ///<summary>
    ///  获取 SOAP 错误的 <see langword="subcode" />
    ///  XML 元素中包含的可选错误信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  表示的内容 <see langword="subcode" />
    ///  的 SOAP 错误的 XML 元素。
    ///</returns>
    property SubCode: DNSoapFaultSubCode read get_SubCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSoapException = class(TDNGenericImport<DNSoapExceptionClass, DNSoapException>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderExceptionClass = interface(DNSoapExceptionClass)
  ['{139F0F84-DD11-5FD3-A796-E4B1574F981C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapHeaderException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  已发生的错误类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string): DNSoapHeaderException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  已发生的错误类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="innerException">
    ///  对异常的根本原因的引用。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  已发生的错误类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName): DNSoapHeaderException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  已发生的错误类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="innerException">
    ///  对异常的根本原因的引用。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    ///<summary>
    ///  使用关联数据初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  已发生的错误类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="role">
    ///  一个 URI，它表示在处理 SOAP 消息时 XML Web 服务的角色。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  属性。
    ///</param>
    ///  <param name="subCode">
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  ，其中包含的内容 <see langword="&lt;subcode&gt;" />
    ///  SOAP 错误的元素。
    ///</param>
    ///  <param name="innerException">
    ///  对异常根源的引用。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    ///<summary>
    ///  使用关联数据初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  一个标识异常发生原因的消息。
    ///  此参数设置 <see cref="P:System.Exception.Message" />
    ///  属性。
    ///</param>
    ///  <param name="code">
    ///  已发生的错误类型。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  属性。
    ///</param>
    ///  <param name="actor">
    ///  导致异常的代码段。
    ///  通常情况下，这是一个指向 XML Web service 方法的 URL。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  属性。
    ///</param>
    ///  <param name="role">
    ///  一个 URI，它表示在处理 SOAP 消息时 XML Web 服务的角色。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  属性。
    ///</param>
    ///  <param name="lang">
    ///  标识与异常关联的人类语言的字符串。
    ///  此参数设置 <see cref="P:System.Web.Services.Protocols.SoapException.Lang" />
    ///  属性。
    ///</param>
    ///  <param name="subCode">
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  ，其中包含的内容 <see langword="subcode" />
    ///  SOAP 错误的元素。
    ///</param>
    ///  <param name="innerException">
    ///  对异常的根源的引用。
    ///  此参数设置 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; lang: string; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;

  end;

  ///<summary>
  ///  服务器错误 SOAP 表示形式。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderException')]
  DNSoapHeaderException = interface(DNSoapException)
  ['{A0A70FB0-CA04-36F0-BCA2-C998A22E2E45}']
  { getters & setters } 

    function get_Actor: string;
    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_Detail: DDN.System.Xml.DNXmlNode;
    function get_Lang: string;
    function get_Node: string;
    function get_Role: string;
    function get_SubCode: DNSoapFaultSubCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  集 <see cref="T:System.Runtime.Serialization." />
    ///<see cref="SerializationInfo" />
    ///  有关异常的信息。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存关于所引发异常的序列化对象数据。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含关于源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取导致异常的代码段中。
    ///</summary>
    ///<returns>
    ///  导致异常的代码段。
    ///</returns>
    property Actor: string read get_Actor;
    ///<summary>
    ///  获取 SOAP 错误代码的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定出现的 SOAP 错误代码。
    ///</returns>
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNode" />
    ///  表示特定于应用程序错误的信息详细信息。
    ///</summary>
    ///<returns>
    ///  应用程序特定的错误信息。
    ///</returns>
    property Detail: DDN.System.Xml.DNXmlNode read get_Detail;
    ///<summary>
    ///  获取与异常关联的人类语言。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值标识与异常关联的人类语言。
    ///</returns>
    property Lang: string read get_Lang;
    ///<summary>
    ///  获取一个 URI，表示导致异常的代码段中。
    ///</summary>
    ///<returns>
    ///  导致异常的代码段。
    ///</returns>
    property Node: string read get_Node;
    ///<summary>
    ///  获取一个 URI，它表示在处理 SOAP 消息的 XML Web services 的函数。
    ///</summary>
    ///<returns>
    ///  XML Web 服务引发角色 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Role: string read get_Role;
    ///<summary>
    ///  获取 SOAP 错误的 <see langword="subcode" />
    ///  XML 元素中包含的可选错误信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  表示的内容 <see langword="subcode" />
    ///  的 SOAP 错误的 XML 元素。
    ///</returns>
    property SubCode: DNSoapFaultSubCode read get_SubCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSoapHeaderException = class(TDNGenericImport<DNSoapHeaderExceptionClass, DNSoapHeaderException>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebClientProtocolClass = interface(DNObjectClass)
  ['{EA09A5F2-D74C-53C3-8FBD-F79C8AA89BC8}']
  end;

  ///<summary>
  ///  使用 ASP.NET 创建的所有 XML Web 服务客户端代理的指定的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.WebClientProtocol')]
  DNWebClientProtocol = interface(DNObject)
  ['{4277F857-2873-3E94-86BA-DDEEA59EB9F6}']
  { getters & setters } 

    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  取消对 XML Web 服务方法的请求。
    ///</summary>
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 XML Web 服务客户端身份验证的安全凭据。
    ///</summary>
    ///<returns><see cref="T:System.Net.ICredentials" />
    ///  XML Web 服务客户端。
    ///</returns>
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    ///<summary>
    ///  获取或设置一个值，该值指示是否设置 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials" />
    ///  属性的值 <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果凭据属性设置为的值 <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    ///<summary>
    ///  获取或设置请求的连接组的名称。
    ///</summary>
    ///<returns>
    ///  连接组的名称。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    ///<summary>
    ///  获取或设置是否启用预身份验证。
    ///</summary>
    ///<returns><see langword="true" />
    ///  进行预身份验证请求;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    ///<summary>
    ///  获取或设置 XML Web 服务客户端的 URL 请求的基础。
    ///</summary>
    ///<returns>
    ///  正在请求 XML Web 服务客户端的基 URL。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Url: string read get_Url write set_Url;
    ///<summary><see cref="T:System.Text.Encoding" />
    ///  用于使客户端请求的 XML Web 服务。
    ///</summary>
    ///<returns>
    ///  客户端请求的字符编码。
    ///  默认值是 <see langword="null" />
    ///  , ，它使用的基础传输和协议的默认编码。
    ///</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    ///<summary>
    ///  指示 XML Web 服务客户端等待答复同步 XML Web 服务请求到达 （以毫秒为单位） 的时间。
    ///</summary>
    ///<returns>
    ///  超时值，以毫秒为单位，用于对 XML Web 服务的同步调用。
    ///  默认值是 100000 毫秒。
    ///</returns>
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNWebClientProtocol = class(TDNGenericImport<DNWebClientProtocolClass, DNWebClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpWebClientProtocolClass = interface(DNWebClientProtocolClass)
  ['{04C492BB-8D7E-598F-B3CA-C68B2556FB2E}']
  { static methods } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  针对每个 XML Web 服务方法公开由指定的类型，并将映射存储在指定 <see cref="T:System.Collections.ArrayList" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  公开 XML Web 服务方法。
    ///</param>
    ///  <param name="mappings">
    ///  一个 <see cref="T:System.Collections.ArrayList" />
    ///  用于存储的映射。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="type" />
    ///  可以分配给 <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function GenerateXmlMappings(&type: DDN.mscorlib.DNType; mappings: DDN.mscorlib.DNArrayList): Boolean; overload;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  针对每个 XML Web 服务方法公开由指定的类型，并将映射存储在指定 <see cref="T:System.Collections.ArrayList" />
    ///  , 、 以及如下所示︰ <see cref="T:System.Collections.Hashtable" />
    ///  ，此方法返回。
    ///</summary>
    ///  <param name="types">
    ///  类型的数组 <see cref="T:System.Type" />
    ///  包含公开 XML Web 服务方法的类型。
    ///</param>
    ///  <param name="mappings">
    ///  一个 <see cref="T:System.Collections.ArrayList" />
    ///  用于存储的映射。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Hashtable" />
    ///  ，其中包含 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  为指定类型所公开的每个 XML Web 服务方法。
    ///  中包含的类型 <paramref name="types" />
    ///  用作键。
    ///</returns>
    {class} function GenerateXmlMappings(types: TArray<DDN.mscorlib.DNType>; mappings: DDN.mscorlib.DNArrayList): DDN.mscorlib.DNHashtable; overload;

  end;

  ///<summary>
  ///  表示使用 HTTP 传输协议的所有 XML Web 服务客户端代理的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpWebClientProtocol')]
  DNHttpWebClientProtocol = interface(DNWebClientProtocol)
  ['{A2BAAC11-CAD5-36DF-9319-A6110144C2DA}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  取消对 XML Web 服务方法的请求。
    ///</summary>
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置是否自动客户端将按照服务器重定向。
    ///</summary>
    ///<returns><see langword="true" />
    ///  自动重定向客户端遵循服务器重定向;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Net.WebException"><see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  属性是 <see langword="false" />
    ///  和 Web 服务器尝试将请求重定向。
    ///</exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>
    ///  获取或设置的 cookie 的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.CookieContainer" />
    ///  ，它表示 Web 服务客户端的 cookie。
    ///</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>
    ///  获取客户端证书的集合。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  ，它表示客户端证书。
    ///</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>
    ///  获取或设置一个值，该值指示是否为此启用解压缩 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用解压缩，则此 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>
    ///  获取或设置与每个请求一起发送的用户代理标头的值。
    ///</summary>
    ///<returns>
    ///  HTTP 协议用户代理标头的值。
    ///  默认值为"MS Web 服务客户端协议 <paramref name="number" />
    ///  "，其中 <paramref name="number" />
    ///  是公共语言运行时 (例如，1.0.3705.0) 的版本。
    ///</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>
    ///  获取或设置发出 XML Web 服务请求通过防火墙的请求的代理信息。
    ///</summary>
    ///<returns><see cref="T:System.Net.IWebProxy" />
    ///  ，包含用于发出请求通过防火墙的代理信息。
    ///  默认值为操作系统的系统代理设置。
    ///</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>
    ///  获取或设置一个值，该值指示当客户端使用 NTLM 身份验证来连接到 Web 服务器承载 XML Web 服务是否启用连接共享。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了连接共享。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    ///<summary>
    ///  获取或设置 XML Web 服务客户端身份验证的安全凭据。
    ///</summary>
    ///<returns><see cref="T:System.Net.ICredentials" />
    ///  XML Web 服务客户端。
    ///</returns>
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    ///<summary>
    ///  获取或设置一个值，该值指示是否设置 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials" />
    ///  属性的值 <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果凭据属性设置为的值 <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    ///<summary>
    ///  获取或设置请求的连接组的名称。
    ///</summary>
    ///<returns>
    ///  连接组的名称。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    ///<summary>
    ///  获取或设置是否启用预身份验证。
    ///</summary>
    ///<returns><see langword="true" />
    ///  进行预身份验证请求;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    ///<summary>
    ///  获取或设置 XML Web 服务客户端的 URL 请求的基础。
    ///</summary>
    ///<returns>
    ///  正在请求 XML Web 服务客户端的基 URL。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Url: string read get_Url write set_Url;
    ///<summary><see cref="T:System.Text.Encoding" />
    ///  用于使客户端请求的 XML Web 服务。
    ///</summary>
    ///<returns>
    ///  客户端请求的字符编码。
    ///  默认值是 <see langword="null" />
    ///  , ，它使用的基础传输和协议的默认编码。
    ///</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    ///<summary>
    ///  指示 XML Web 服务客户端等待答复同步 XML Web 服务请求到达 （以毫秒为单位） 的时间。
    ///</summary>
    ///<returns>
    ///  超时值，以毫秒为单位，用于对 XML Web 服务的同步调用。
    ///  默认值是 100000 毫秒。
    ///</returns>
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpWebClientProtocol = class(TDNGenericImport<DNHttpWebClientProtocolClass, DNHttpWebClientProtocol>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{20DD4869-1A08-51DA-8B14-1EA69BCE64A5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryClientProtocol;

  end;

  ///<summary>
  ///  提供用于以编程方式调用 XML Web services 发现支持。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientProtocol')]
  DNDiscoveryClientProtocol = interface(DNHttpWebClientProtocol)
  ['{0DF7E8C1-DDEA-3842-A402-90FE051ED477}']
  { getters & setters } 

    function get_AdditionalInformation: DDN.mscorlib.DNIList;
    function get_Documents: DNDiscoveryClientDocumentCollection;
    function get_Errors: DNDiscoveryExceptionDictionary;
    function get_References: DNDiscoveryClientReferenceCollection;
    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  发现提供的 URL 以确定它是否发现文档。
    ///</summary>
    ///  <param name="url">
    ///  XML Web 服务发现的开始位置的 URL。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  包含结果的 XML Web 服务发现提供的 URL 处。
    ///</returns>
    ///<exception cref="T:System.Net.WebException">
    ///  访问所提供的 URL 而不返回 HTTP 状态代码 <see cref="F:System.Net.HttpStatusCode.OK" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="url" />
    ///  参数有效的 URL，但不指向有效的发现文档。
    ///</exception>
    function Discover(url: string): DNDiscoveryDocument;
    ///<summary>
    ///  发现提供的 URL，以确定它是一个发现文档、 服务说明或 XML 架构定义 (XSD) 架构。
    ///</summary>
    ///  <param name="url">
    ///  XML Web 服务发现的开始位置的 URL。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  包含结果的 XML Web 服务发现提供的 URL 处。
    ///  如果 <paramref name="url" />
    ///  参数是指服务说明或 XSD 架构中， <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  为其创建在内存中。
    ///</returns>
    ///<exception cref="T:System.Net.WebException">
    ///  访问所提供的 URL 而不返回 HTTP 状态代码 <see cref="F:System.Net.HttpStatusCode.OK" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="url" />
    ///  参数有效的 URL，但不指向有效的发现文档、 服务说明或 XSD 架构。
    ///</exception>
    function DiscoverAny(url: string): DNDiscoveryDocument;
    function Download(out url: string): DDN.mscorlib.DNStream; overload;
    function Download(out url: string; out contentType: string): DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  指示 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  对象将加载所有外部引用。
    ///</summary>
    procedure LoadExternals;
    ///<summary>
    ///  在包含的填充的已保存的发现文档的映射的文件中读取 <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  和 <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.References" />
    ///  属性，发现文档、 XML 架构定义 (XSD) 架构与该文件中引用的服务说明。
    ///</summary>
    ///  <param name="topLevelFilename">
    ///  名称包含的映射的保存的文件中进行读取，发现文档。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  包含在与该映射的文件中找到的结果已保存的发现文档。
    ///  文件格式是 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoveryClientResultsFile" />
    ///  序列化为 XML 的类; 但是，一个通常将创建仅限使用文件 <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.WriteAll(System.String,System.String)" />
    ///  方法或 Disco.exe。
    ///</returns>
    function ReadAll(topLevelFilename: string): DNDiscoveryClientResultCollection;
    ///<summary>
    ///  解析对发现文档、 XML 架构定义 (XSD) 架构和服务说明中的所有引用 <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.References" />
    ///  属性，以及在引用的发现文档中找到的引用。
    ///</summary>
    procedure ResolveAll;
    ///<summary>
    ///  解析对发现文档、 XML 架构定义 (XSD) 架构和服务说明中的所有引用 <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.References" />
    ///  , ，以及这些发现文档中找到的引用。
    ///</summary>
    procedure ResolveOneLevel;
    ///<summary>
    ///  将所有发现文档、 XML 架构定义 (XSD) 架构和服务说明中 <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  属性设置为提供的目录并在该目录中创建的文件。
    ///</summary>
    ///  <param name="directory">
    ///  要在其中保存所有文档当前处于目录 <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  属性。
    ///</param>
    ///  <param name="topLevelFilename">
    ///  要创建或覆盖包含映射的保存的所有文档的文件的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  包含结果的所有已保存文件。
    ///</returns>
    function WriteAll(directory: string; topLevelFilename: string): DNDiscoveryClientResultCollection;
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取信息以及在发现文档中找到的引用。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IList" />
    ///  包含其他信息的发现文档中找到。
    ///</returns>
    property AdditionalInformation: DDN.mscorlib.DNIList read get_AdditionalInformation;
    ///<summary>
    ///  获取发现文档的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  表示找到发现文档的集合。
    ///</returns>
    property Documents: DNDiscoveryClientDocumentCollection read get_Documents;
    ///<summary>
    ///  获取从此类的方法的调用过程中发生的异常的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  的异常。
    ///</returns>
    property Errors: DNDiscoveryExceptionDictionary read get_Errors;
    ///<summary>
    ///  已解析的发现文档中找到引用的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  发现的引用。
    ///</returns>
    property References: DNDiscoveryClientReferenceCollection read get_References;
    ///<summary>
    ///  获取或设置是否自动客户端将按照服务器重定向。
    ///</summary>
    ///<returns><see langword="true" />
    ///  自动重定向客户端遵循服务器重定向;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Net.WebException"><see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  属性是 <see langword="false" />
    ///  和 Web 服务器尝试将请求重定向。
    ///</exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>
    ///  获取或设置的 cookie 的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.CookieContainer" />
    ///  ，它表示 Web 服务客户端的 cookie。
    ///</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>
    ///  获取客户端证书的集合。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  ，它表示客户端证书。
    ///</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>
    ///  获取或设置一个值，该值指示是否为此启用解压缩 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用解压缩，则此 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>
    ///  获取或设置与每个请求一起发送的用户代理标头的值。
    ///</summary>
    ///<returns>
    ///  HTTP 协议用户代理标头的值。
    ///  默认值为"MS Web 服务客户端协议 <paramref name="number" />
    ///  "，其中 <paramref name="number" />
    ///  是公共语言运行时 (例如，1.0.3705.0) 的版本。
    ///</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>
    ///  获取或设置发出 XML Web 服务请求通过防火墙的请求的代理信息。
    ///</summary>
    ///<returns><see cref="T:System.Net.IWebProxy" />
    ///  ，包含用于发出请求通过防火墙的代理信息。
    ///  默认值为操作系统的系统代理设置。
    ///</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>
    ///  获取或设置一个值，该值指示当客户端使用 NTLM 身份验证来连接到 Web 服务器承载 XML Web 服务是否启用连接共享。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了连接共享。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDiscoveryClientProtocol = class(TDNGenericImport<DNDiscoveryClientProtocolClass, DNDiscoveryClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpSimpleClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{0DDD2FD8-BBA9-5D80-8B38-4A60DFC2634C}']
  end;

  ///<summary>
  ///  表示用于与使用简单的 HTTP GET 和 HTTP POST 协议绑定的 XML Web 服务进行通信的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpSimpleClientProtocol')]
  DNHttpSimpleClientProtocol = interface(DNHttpWebClientProtocol)
  ['{FA8E1429-5177-36EB-813E-9427B1FA0CF5}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置是否自动客户端将按照服务器重定向。
    ///</summary>
    ///<returns><see langword="true" />
    ///  自动重定向客户端遵循服务器重定向;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Net.WebException"><see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  属性是 <see langword="false" />
    ///  和 Web 服务器尝试将请求重定向。
    ///</exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>
    ///  获取或设置的 cookie 的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.CookieContainer" />
    ///  ，它表示 Web 服务客户端的 cookie。
    ///</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>
    ///  获取客户端证书的集合。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  ，它表示客户端证书。
    ///</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>
    ///  获取或设置一个值，该值指示是否为此启用解压缩 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用解压缩，则此 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>
    ///  获取或设置与每个请求一起发送的用户代理标头的值。
    ///</summary>
    ///<returns>
    ///  HTTP 协议用户代理标头的值。
    ///  默认值为"MS Web 服务客户端协议 <paramref name="number" />
    ///  "，其中 <paramref name="number" />
    ///  是公共语言运行时 (例如，1.0.3705.0) 的版本。
    ///</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>
    ///  获取或设置发出 XML Web 服务请求通过防火墙的请求的代理信息。
    ///</summary>
    ///<returns><see cref="T:System.Net.IWebProxy" />
    ///  ，包含用于发出请求通过防火墙的代理信息。
    ///  默认值为操作系统的系统代理设置。
    ///</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>
    ///  获取或设置一个值，该值指示当客户端使用 NTLM 身份验证来连接到 Web 服务器承载 XML Web 服务是否启用连接共享。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了连接共享。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpSimpleClientProtocol = class(TDNGenericImport<DNHttpSimpleClientProtocolClass, DNHttpSimpleClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpGetClientProtocolClass = interface(DNHttpSimpleClientProtocolClass)
  ['{20521212-F92D-58B4-9EDF-487640F4D0B6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.HttpGetClientProtocol" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpGetClientProtocol;

  end;

  ///<summary>
  ///  使用 HTTP GET 协议的 XML Web 服务客户端代理的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpGetClientProtocol')]
  DNHttpGetClientProtocol = interface(DNHttpSimpleClientProtocol)
  ['{278FFCD4-7F0B-3AAF-AD2C-BF43BED9E14C}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpGetClientProtocol = class(TDNGenericImport<DNHttpGetClientProtocolClass, DNHttpGetClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpPostClientProtocolClass = interface(DNHttpSimpleClientProtocolClass)
  ['{634771B0-779C-58FF-BE61-E21423B0D95C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.HttpPostClientProtocol" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpPostClientProtocol;

  end;

  ///<summary>
  ///  使用 HTTP POST 协议的 XML Web 服务客户端代理的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpPostClientProtocol')]
  DNHttpPostClientProtocol = interface(DNHttpSimpleClientProtocol)
  ['{5C6804FA-EC9D-3BE2-8D8D-47F7FCE46B8A}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpPostClientProtocol = class(TDNGenericImport<DNHttpPostClientProtocolClass, DNHttpPostClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHttpClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{C7BE43AF-6807-5E8D-9DA4-993B28127797}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapHttpClientProtocol;

  end;

  ///<summary>
  ///  指定当使用 SOAP 时，代理将派生自的类客户端。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHttpClientProtocol')]
  DNSoapHttpClientProtocol = interface(DNHttpWebClientProtocol)
  ['{EE5E5453-6867-333F-8E25-56B63C54F470}']
  { getters & setters } 

    function get_SoapVersion: DNSoapProtocolVersion;
    procedure set_SoapVersion(value: DNSoapProtocolVersion);
    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  动态绑定到 XML Web 服务上的发现文档中所述 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在发现文档中找不到代理类中定义的绑定 <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  代理类没有定义的绑定。
    ///</exception>
    procedure Discover;
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用于对 XML Web 服务发出的 SOAP 请求的 SOAP 协议的版本。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />
    ///  。
    ///</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion write set_SoapVersion;
    ///<summary>
    ///  获取或设置是否自动客户端将按照服务器重定向。
    ///</summary>
    ///<returns><see langword="true" />
    ///  自动重定向客户端遵循服务器重定向;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Net.WebException"><see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  属性是 <see langword="false" />
    ///  和 Web 服务器尝试将请求重定向。
    ///</exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>
    ///  获取或设置的 cookie 的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.CookieContainer" />
    ///  ，它表示 Web 服务客户端的 cookie。
    ///</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>
    ///  获取客户端证书的集合。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  ，它表示客户端证书。
    ///</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>
    ///  获取或设置一个值，该值指示是否为此启用解压缩 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用解压缩，则此 <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>
    ///  获取或设置与每个请求一起发送的用户代理标头的值。
    ///</summary>
    ///<returns>
    ///  HTTP 协议用户代理标头的值。
    ///  默认值为"MS Web 服务客户端协议 <paramref name="number" />
    ///  "，其中 <paramref name="number" />
    ///  是公共语言运行时 (例如，1.0.3705.0) 的版本。
    ///</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>
    ///  获取或设置发出 XML Web 服务请求通过防火墙的请求的代理信息。
    ///</summary>
    ///<returns><see cref="T:System.Net.IWebProxy" />
    ///  ，包含用于发出请求通过防火墙的代理信息。
    ///  默认值为操作系统的系统代理设置。
    ///</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>
    ///  获取或设置一个值，该值指示当客户端使用 NTLM 身份验证来连接到 Web 服务器承载 XML Web 服务是否启用连接共享。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了连接共享。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSoapHttpClientProtocol = class(TDNGenericImport<DNSoapHttpClientProtocolClass, DNSoapHttpClientProtocol>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FA19947-DDE3-5DD1-9007-EC486D3EDB67}']
  end;

  ///<summary>
  ///  表示 WSDL 违反了 WSI 基本配置文件 1.1 版。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.BasicProfileViolation')]
  DNBasicProfileViolation = interface(DDN.mscorlib.DNObject)
  ['{66DBB2C6-F87D-381C-8F7F-1A8F0AB571F3}']
  { getters & setters } 

    function get_Claims: DNWsiProfiles;
    function get_Details: string;
    function get_Elements: DDN.System.DNStringCollection;
    function get_NormativeStatement: string;
    function get_Recommendation: string;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  ，其中包含来自信息 <see cref="P:System.Web.Services.Description.BasicProfileViolation.NormativeStatement" />
    ///  , ，<see cref="P:System.Web.Services.Description.BasicProfileViolation.Details" />
    ///  , ，和 <see cref="P:System.Web.Services.Description.BasicProfileViolation.Elements" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含来自信息 <see cref="P:System.Web.Services.Description.BasicProfileViolation.NormativeStatement" />
    ///  , ，<see cref="P:System.Web.Services.Description.BasicProfileViolation.Details" />
    ///  , ，和 <see cref="P:System.Web.Services.Description.BasicProfileViolation.Elements" />
    ///  。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  对象，它指定 Web 服务是否声明它符合 WSI 基本配置文件 1.1 版。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  对象，它指定 Web 服务是否声明它符合 WSI 基本配置文件 1.1 版。
    ///</returns>
    property Claims: DNWsiProfiles read get_Claims;
    ///<summary>
    ///  获取 <see cref="T:System.String" />
    ///  ，它提供基本配置文件的 WSDL 冲突的详细的说明。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它提供基本配置文件的 WSDL 冲突的详细的说明。
    ///</returns>
    property Details: string read get_Details;
    ///<summary>
    ///  表示不符合 WSI 基本配置文件版本 1.1 规范的 WSDL 元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  ，其中包含不符合 WSI 基本配置文件版本 1.1 规范的 WSDL 元素。
    ///</returns>
    property Elements: DDN.System.DNStringCollection read get_Elements;
    ///<summary>
    ///  获取基本配置文件版本 1.1 规范的 WSDL 冲突的标识符。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含标识符 (例如，R2038) 基本配置文件版本 1.1 规范的 WSDL 冲突。
    ///</returns>
    property NormativeStatement: string read get_NormativeStatement;
    ///<summary>
    ///  获取 <see cref="T:System.String" />
    ///  说明基本配置文件版本 1.1 规范的 WSDL 冲突的对象。
    ///</summary>
    ///<returns><see cref="T:System.String" />
    ///  说明基本配置文件版本 1.1 规范的 WSDL 冲突的对象。
    ///</returns>
    property Recommendation: string read get_Recommendation;
  end;

  TDNBasicProfileViolation = class(TDNGenericImport<DNBasicProfileViolationClass, DNBasicProfileViolation>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E738742-7A52-57B4-9C70-11FDBC6E26E5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.BasicProfileViolationEnumerator" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="list"><see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  若要使用此类来枚举。
    ///</param>
    {class} function init(list: DNBasicProfileViolationCollection): DNBasicProfileViolationEnumerator;

  end;

  ///<summary>
  ///  枚举 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
  ///  中的元素。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.BasicProfileViolationEnumerator')]
  DNBasicProfileViolationEnumerator = interface(DDN.mscorlib.DNObject)
  ['{EBF9BFBC-F116-3FEC-AD73-51ED50522571}']
  { getters & setters } 

    function get_Current: DNBasicProfileViolation;

  { methods } 

    ///<summary>
    ///  释放当前实例所使用的所有资源 <see cref="T:System.Web.Services.Description.BasicProfileViolationEnumerator" />
    ///  类。释放使用的所有资源 <see cref="T:System.Web.Services.Description.BasicProfileViolationEnumerator" />
    ///  。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  枚举中的下一个元素到 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  。
    ///</summary>
    ///<returns><see langword="false" />
    ///  如果已到达集合的结尾;否则为 <see langword="true" />
    ///  。
    ///</returns>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  中的元素 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  对象，表示中的当前元素 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  。
    ///</returns>
    property Current: DNBasicProfileViolation read get_Current;
  end;

  TDNBasicProfileViolationEnumerator = class(TDNGenericImport<DNBasicProfileViolationEnumeratorClass, DNBasicProfileViolationEnumerator>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNDocumentableItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4532CAC-DF95-5A37-BC85-8C3BB9C73219}']
  end;

  ///<summary>
  ///  中的若干个类从表示的抽象基类 <see cref="N:System.Web.Services.Description" />
  ///  派生命名空间。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.DocumentableItem')]
  DNDocumentableItem = interface(DDN.mscorlib.DNObject)
  ['{A3CDDD20-DC42-3D33-9E69-8548C4136376}']
  { getters & setters } 

    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的实例的文本文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示为文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>
    ///  获取或设置有关的文档元素 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlElement" />
    ///  ，它表示的文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>
    ///  获取或设置类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</summary>
    ///<returns>
    ///  类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>
    ///  获取或设置命名空间前缀和命名空间，用来保留命名空间前缀和命名空间的字典时 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  构造对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  包含前缀/命名空间对的字典。
    ///</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNDocumentableItem = class(TDNGenericImport<DNDocumentableItemClass, DNDocumentableItem>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNImportClass = interface(DNDocumentableItemClass)
  ['{20B3472F-575C-5D93-A787-0F7DD2483966}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Import" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNImport;

  end;

  ///<summary>
  ///  将与文档位置关联的 XML 命名空间。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Import')]
  DNImport = interface(DNDocumentableItem)
  ['{3B61C69D-0E5F-31F6-BA7B-B78C86F08A7A}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  与此相关 <see cref="T:System.Web.Services.Description.Import" />
    ///  类。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  与此相关 <see cref="T:System.Web.Services.Description.Import" />
    ///  类。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取对 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  其中 <see cref="T:System.Web.Services.Description.Import" />
    ///  是成员。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  其中 <see cref="T:System.Web.Services.Description.Import" />
    ///  是成员。
    ///</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>
    ///  获取或设置的 xml 值 <see langword="namespace" />
    ///  属性 <see langword="import" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  值为 XML <see langword="namespace" />
    ///  属性 <see langword="import" />
    ///  元素。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置的 xml 值 <see langword="location" />
    ///  属性 <see langword="import" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  值为 XML <see langword="location" />
    ///  属性 <see langword="import" />
    ///  元素。
    ///  此值还指定导入的文档的 URL。
    ///</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  获取或设置的实例的文本文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示为文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>
    ///  获取或设置有关的文档元素 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlElement" />
    ///  ，它表示的文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>
    ///  获取或设置类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</summary>
    ///<returns>
    ///  类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>
    ///  获取或设置命名空间前缀和命名空间，用来保留命名空间前缀和命名空间的字典时 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  构造对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  包含前缀/命名空间对的字典。
    ///</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNImport = class(TDNGenericImport<DNImportClass, DNImport>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNNamedItemClass = interface(DNDocumentableItemClass)
  ['{EFA9320C-F53E-5BF6-9480-F24162673F4E}']
  end;

  ///<summary>
  ///  表示可记录的命名的项。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.NamedItem')]
  DNNamedItem = interface(DNDocumentableItem)
  ['{5A867DA0-FFED-3C2E-959C-256AA9CE10FA}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置的实例的文本文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示为文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>
    ///  获取或设置有关的文档元素 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlElement" />
    ///  ，它表示的文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>
    ///  获取或设置类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</summary>
    ///<returns>
    ///  类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>
    ///  获取或设置命名空间前缀和命名空间，用来保留命名空间前缀和命名空间的字典时 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  构造对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  包含前缀/命名空间对的字典。
    ///</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNNamedItem = class(TDNGenericImport<DNNamedItemClass, DNNamedItem>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBindingClass = interface(DNNamedItemClass)
  ['{E1C20336-C100-559B-91AC-B07E627F922A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Binding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBinding;

  end;

  ///<summary>
  ///  指定具体的数据格式和 XML Web 服务中使用的协议。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Binding')]
  DNBinding = interface(DNNamedItem)
  ['{72F0A66B-ED90-3B3F-B4AA-C95E599EDB42}']
  { getters & setters } 

    function get_ServiceDescription: DNServiceDescription;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operations: DNOperationBindingCollection;
    function get_Type: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Type(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  其中 <see cref="T:System.Web.Services.Description.Binding" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  其中 <see cref="T:System.Web.Services.Description.Binding" />
    ///  是成员。
    ///</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>
    ///  获取在 XML Web 服务中使用的可扩展性元素的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  对象，其中包含在 XML Web 服务中使用的可扩展性元素的集合。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取数据格式和消息协议可用于操作 XML Web 服务所支持的规范的集合。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  对象，其中包含用于表示数据格式和消息协议可用于操作 XML Web 服务所支持的规范的集合。
    ///</returns>
    property Operations: DNOperationBindingCollection read get_Operations;
    ///<summary>
    ///  获取或设置一个值，表示的命名空间限定名称 <see cref="T:System.Web.Services.Description.PortType" />
    ///  与其 <see langword="Binding" />
    ///  相关联。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  的 <see cref="T:System.Web.Services.Description.PortType" />
    ///  与其 <see langword="Binding" />
    ///  相关联。
    ///</returns>
    property &Type: DDN.System.Xml.DNXmlQualifiedName read get_Type write set_Type;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNBinding = class(TDNGenericImport<DNBindingClass, DNBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageClass = interface(DNNamedItemClass)
  ['{0BD73070-A3A0-577B-AFD0-3A40B4045A12}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Message" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMessage;

  end;

  ///<summary>
  ///  提供由 XML Web 服务传递的数据的抽象定义。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Message')]
  DNMessage = interface(DNNamedItem)
  ['{7831869D-5BDC-3D1D-BFED-33AF91678474}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Parts: DNMessagePartCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  返回 <see cref="P:System.Web.Services.Description.Message.Parts" />
    ///  属性，并返回类型的数组 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  ，其中包含的命名的实例。
    ///</summary>
    ///  <param name="partNames">
    ///  名称的数组 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  要返回的实例。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.MessagePart" />
    ///  类型的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  否 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  集合中不存在具有指定名称的实例。
    ///</exception>
    function FindPartsByName(partNames: TArray<string>): TArray<DNMessagePart>;
    ///<summary>
    ///  搜索 <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  返回 <see cref="P:System.Web.Services.Description.Message.Parts" />
    ///  属性，并返回已命名 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</summary>
    ///  <param name="partName">
    ///  命名的字符串 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  要返回。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  否 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  集合中存在具有指定名称。
    ///</exception>
    function FindPartByName(partName: string): DNMessagePart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  种当前 <see cref="T:System.Web.Services.Description.Message" />
    ///  是成员。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  中所含对象 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  。
    ///</returns>
    property Parts: DNMessagePartCollection read get_Parts;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNMessage = class(TDNGenericImport<DNMessageClass, DNMessage>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageBindingClass = interface(DNNamedItemClass)
  ['{ED76ED12-9C86-52A5-BFD7-6F367C8E4BD0}']
  end;

  ///<summary>
  ///  介绍如何抽象内容映射到具体格式。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MessageBinding')]
  DNMessageBinding = interface(DNNamedItem)
  ['{25D86ADF-A83D-3D7F-B896-7C639E6AABE9}']
  { getters & setters } 

    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNMessageBinding = class(TDNGenericImport<DNMessageBindingClass, DNMessageBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNFaultBindingClass = interface(DNMessageBindingClass)
  ['{0C0E13F3-3F81-5A17-874F-47CAE475F642}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNFaultBinding;

  end;

  ///<summary>
  ///  指定的格式可能会由于操作而输出任何错误信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.FaultBinding')]
  DNFaultBinding = interface(DNMessageBinding)
  ['{CE8469A0-74FF-3120-8C56-5B6609080F20}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与当前关联的可扩展性元素的集合 <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  。
    ///  默认值是一个集合 <see cref="P:System.Collections.CollectionBase.Count" />
    ///  为零。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNFaultBinding = class(TDNGenericImport<DNFaultBindingClass, DNFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNInputBindingClass = interface(DNMessageBindingClass)
  ['{40194096-195D-5277-83A0-3BF675E53EFE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.InputBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInputBinding;

  end;

  ///<summary>
  ///  用于表示数据格式和使用的输入消息的 XML Web 服务协议，提供了一套规范。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.InputBinding')]
  DNInputBinding = interface(DNMessageBinding)
  ['{0430661A-1BCC-378B-834F-B2CFC7F994FC}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与当前关联的可扩展性元素的集合 <see cref="T:System.Web.Services.Description.InputBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNInputBinding = class(TDNGenericImport<DNInputBindingClass, DNInputBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOutputBindingClass = interface(DNMessageBindingClass)
  ['{1E4320D0-7788-5538-AECA-62D1BF68AD59}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOutputBinding;

  end;

  ///<summary>
  ///  用于表示数据格式和输出消息的 XML Web 服务所使用的协议提供一套规范。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OutputBinding')]
  DNOutputBinding = interface(DNMessageBinding)
  ['{7A3A3791-9C3C-3F88-8F7D-CD62FCD0276F}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与当前关联的可扩展性元素的集合 <see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  。
    ///</summary>
    ///<returns>
    ///  服务说明格式扩展的集合。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  是成员。
    ///</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOutputBinding = class(TDNGenericImport<DNOutputBindingClass, DNOutputBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessagePartClass = interface(DNNamedItemClass)
  ['{65A2A902-F08D-56B3-9106-593D38F971B2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMessagePart;

  end;

  ///<summary>
  ///  表示要分解为逻辑单元，与特定的抽象信息的每个部分的消息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MessagePart')]
  DNMessagePart = interface(DNNamedItem)
  ['{0596EDAA-CE70-3548-B80A-43AB840DB0B1}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Message: DNMessage;
    function get_Element: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Element(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Type: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Type(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.Message" />
    ///  其中 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  消息 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  是成员。
    ///</returns>
    property Message: DNMessage read get_Message;
    ///<summary>
    ///  获取或设置相对应的 XML 元素的名称与当前 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对应于当前的 XML 元素名称 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</returns>
    property Element: DDN.System.Xml.DNXmlQualifiedName read get_Element write set_Element;
    ///<summary>
    ///  获取或设置 XML 数据类型的 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</returns>
    property &Type: DDN.System.Xml.DNXmlQualifiedName read get_Type write set_Type;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNMessagePart = class(TDNGenericImport<DNMessagePartClass, DNMessagePart>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationClass = interface(DNNamedItemClass)
  ['{77ADA884-892D-595D-A198-CF550478F8A4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Operation" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOperation;

  end;

  ///<summary>
  ///  提供了抽象定义的 XML Web 服务所支持的操作。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Operation')]
  DNOperation = interface(DNNamedItem)
  ['{5D59EB08-FE63-3657-BF73-50E844BE94D5}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_PortType: DNPortType;
    function get_ParameterOrderString: string;
    procedure set_ParameterOrderString(value: string);
    function get_ParameterOrder: TArray<string>;
    procedure set_ParameterOrder(value: TArray<string>);
    function get_Messages: DNOperationMessageCollection;
    function get_Faults: DNOperationFaultCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否指定 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  与匹配 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</summary>
    ///  <param name="operationBinding"><see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  以进行检查，以确定其是否匹配与 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.Operation" />
    ///  实例匹配 <paramref name="operationBinding" />
    ///  参数; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsBoundBy(operationBinding: DNOperationBinding): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.PortType" />
    ///  其中 <see cref="T:System.Web.Services.Description.Operation" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.PortType" />
    ///  对象。
    ///</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>
    ///  获取或设置请求响应或要求响应操作的规范排序的可选远程过程调用 (RPC) 签名。
    ///</summary>
    ///<returns>
    ///  名称的列表 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  实例，并用单个空格分隔。
    ///</returns>
    property ParameterOrderString: string read get_ParameterOrderString write set_ParameterOrderString;
    ///<summary>
    ///  获取或设置一个数组中包含的元素 <see cref="P:System.Web.Services.Description.Operation.ParameterOrderString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  名称的数组 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  实例。
    ///</returns>
    property ParameterOrder: TArray<string> read get_ParameterOrder write set_ParameterOrder;
    ///<summary>
    ///  获取集合的实例 <see cref="T:System.Web.Services.Description.Message" />
    ///  定义由当前类 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</summary>
    ///<returns>
    ///  实例的集合 <see cref="T:System.Web.Services.Description.Message" />
    ///  定义由当前类 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</returns>
    property Messages: DNOperationMessageCollection read get_Messages;
    ///<summary>
    ///  获取错误或错误消息，由当前已定义的集合 <see cref="T:System.Web.Services.Description.Operation" />
    ///  。
    ///</summary>
    ///<returns>
    ///  将出现故障或错误消息，当前操作已定义的集合。
    ///</returns>
    property Faults: DNOperationFaultCollection read get_Faults;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperation = class(TDNGenericImport<DNOperationClass, DNOperation>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationBindingClass = interface(DNNamedItemClass)
  ['{A2146659-0BB5-5F83-AED2-CDC2F1CA6992}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOperationBinding;

  end;

  ///<summary>
  ///  提供协议和 XML Web 服务支持的操作中使用的消息的数据格式的规范。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationBinding')]
  DNOperationBinding = interface(DNNamedItem)
  ['{D061384A-7647-3EB3-AEE9-631645043AC1}']
  { getters & setters } 

    function get_Binding: DNBinding;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Input: DNInputBinding;
    procedure set_Input(value: DNInputBinding);
    function get_Output: DNOutputBinding;
    procedure set_Output(value: DNOutputBinding);
    function get_Faults: DNFaultBindingCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.Binding" />
    ///  种当前 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  绑定当前 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  是成员。
    ///</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>
    ///  获取特定于当前的扩展性元素的集合 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</summary>
    ///<returns>
    ///  扩展元素的集合。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取或设置与 <see cref="T:System.Web.Services.Description.InputBinding" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.InputBinding" />
    ///  与关联 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</returns>
    property Input: DNInputBinding read get_Input write set_Input;
    ///<summary>
    ///  获取或设置与 <see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  与关联 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  。
    ///</returns>
    property Output: DNOutputBinding read get_Output write set_Output;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  与关联 <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  错误绑定集合。
    ///</returns>
    property Faults: DNFaultBindingCollection read get_Faults;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationBinding = class(TDNGenericImport<DNOperationBindingClass, DNOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationMessageClass = interface(DNNamedItemClass)
  ['{E1C13CC4-2789-5FF6-BBC0-08AB66FCDD90}']
  end;

  ///<summary>
  ///  表示 XML Web 服务的操作传递的消息类型。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationMessage')]
  DNOperationMessage = interface(DNNamedItem)
  ['{84C1E90C-70CE-3C74-A0D6-64191CA9EBD3}']
  { getters & setters } 

    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.Operation" />
    ///  其中 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  操作 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>
    ///  获取或设置正在传送的数据的抽象、 类型化的定义。
    ///</summary>
    ///<returns>
    ///  XML 限定的名。
    ///</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNOperationMessage = class(TDNGenericImport<DNOperationMessageClass, DNOperationMessage>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationFaultClass = interface(DNOperationMessageClass)
  ['{9E25F711-D34E-52BA-8D20-F00FFE352799}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOperationFault;

  end;

  ///<summary>
  ///  定义由 XML Web 服务返回的错误消息的规范。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationFault')]
  DNOperationFault = interface(DNOperationMessage)
  ['{D334DF82-E3F5-3320-8353-059C947A4DA5}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.Operation" />
    ///  其中 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  操作 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>
    ///  获取或设置正在传送的数据的抽象、 类型化的定义。
    ///</summary>
    ///<returns>
    ///  XML 限定的名。
    ///</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationFault = class(TDNGenericImport<DNOperationFaultClass, DNOperationFault>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationInputClass = interface(DNOperationMessageClass)
  ['{F065755A-8814-5E5C-8C8C-9036A354DECE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOperationInput;

  end;

  ///<summary>
  ///  定义由 XML Web 服务接收的输入消息的规范。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationInput')]
  DNOperationInput = interface(DNOperationMessage)
  ['{F0D1546A-CD19-31E7-9ED7-1F54A44D15C9}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.Operation" />
    ///  其中 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  操作 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>
    ///  获取或设置正在传送的数据的抽象、 类型化的定义。
    ///</summary>
    ///<returns>
    ///  XML 限定的名。
    ///</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationInput = class(TDNGenericImport<DNOperationInputClass, DNOperationInput>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationOutputClass = interface(DNOperationMessageClass)
  ['{F2BF5B09-6181-5720-9F1F-CAE916C31A5E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOperationOutput;

  end;

  ///<summary>
  ///  定义由 XML Web 服务返回的输出消息的规范。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.OperationOutput')]
  DNOperationOutput = interface(DNOperationMessage)
  ['{3923EF37-EFB1-360B-A386-82992AF85D74}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.Operation" />
    ///  其中 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  操作 <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  是成员。
    ///</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>
    ///  获取或设置正在传送的数据的抽象、 类型化的定义。
    ///</summary>
    ///<returns>
    ///  XML 限定的名。
    ///</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationOutput = class(TDNGenericImport<DNOperationOutputClass, DNOperationOutput>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortClass = interface(DNNamedItemClass)
  ['{383AEC24-A76D-5221-94D8-31446780975D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Port" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPort;

  end;

  ///<summary>
  ///  定义包含在 XML Web 服务的单个终结点。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Port')]
  DNPort = interface(DNNamedItem)
  ['{07BD011F-4825-3C83-A05A-C3A18D88E935}']
  { getters & setters } 

    function get_Service: DNService;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Binding: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Binding(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.Service" />
    ///  其中 <see cref="T:System.Web.Services.Description.Port" />
    ///  是成员。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.Service" />
    ///  其中 <see cref="T:System.Web.Services.Description.Port" />
    ///  是成员。
    ///</returns>
    property Service: DNService read get_Service;
    ///<summary>
    ///  获取与关联的可扩展性元素的集合 <see cref="T:System.Web.Services.Description.Port" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与端口相关联的可扩展性元素的集合。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取或设置的 xml 值 <see langword="&lt;binding&gt;" />
    ///  属性 <see cref="T:System.Web.Services.Description.Port" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 绑定的值。
    ///</returns>
    property Binding: DDN.System.Xml.DNXmlQualifiedName read get_Binding write set_Binding;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNPort = class(TDNGenericImport<DNPortClass, DNPort>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortTypeClass = interface(DNNamedItemClass)
  ['{45347A1A-4F69-5D49-8412-094C9B23F634}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.PortType" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPortType;

  end;

  ///<summary>
  ///  表示已命名的抽象的操作和相应的抽象消息集。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.PortType')]
  DNPortType = interface(DNNamedItem)
  ['{9071F449-C1CD-307D-83C4-034D5285DF6D}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Operations: DNOperationCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.PortType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  关联的 <see cref="T:System.Web.Services.Description.PortType" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  其中 <see cref="T:System.Web.Services.Description.PortType" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  其中的服务说明 <see cref="T:System.Web.Services.Description.PortType" />
    ///  是成员。
    ///</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.Operation" />
    ///  实例定义的 <see cref="T:System.Web.Services.Description.PortType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  通过定义的操作实例的集合 <see cref="T:System.Web.Services.Description.PortType" />
    ///  。
    ///</returns>
    property Operations: DNOperationCollection read get_Operations;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNPortType = class(TDNGenericImport<DNPortTypeClass, DNPortType>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceClass = interface(DNNamedItemClass)
  ['{604F4993-F415-511C-B8CB-E374835647A3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Service" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNService;

  end;

  ///<summary>
  ///  组合在一起的一组相关的实例 <see cref="T:System.Web.Services.Description.Port" />
  ///  与 XML Web 服务相关联的类。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Service')]
  DNService = interface(DNNamedItem)
  ['{DEA43AAB-E2E7-3348-81C5-C279AFC3B03D}']
  { getters & setters } 

    function get_ServiceDescription: DNServiceDescription;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Ports: DNPortCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  其中 <see cref="T:System.Web.Services.Description.Service" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  其中 <see cref="T:System.Web.Services.Description.Service" />
    ///  是成员。
    ///</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>
    ///  获取与关联的可扩展性元素的集合 <see cref="T:System.Web.Services.Description.Service" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与相关联的可扩展性元素的集合 <see cref="T:System.Web.Services.Description.Service" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.Port" />
    ///  中包含的实例 <see cref="T:System.Web.Services.Description.Service" />
    ///  。
    ///</summary>
    ///<returns>
    ///  集合中包含的端口实例 <see cref="T:System.Web.Services.Description.Service" />
    ///  。
    ///</returns>
    property Ports: DNPortCollection read get_Ports;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNService = class(TDNGenericImport<DNServiceClass, DNService>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionClass = interface(DNNamedItemClass)
  ['{C238E77B-1D57-5DCB-A949-288247734BF3}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;
    {class} function get_Serializer: DDN.System.Xml.DNXmlSerializer;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServiceDescription;

  { static methods } 

    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  直接加载从 XML 类 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="textReader">
    ///  一个 <see cref="T:System.IO.TextReader" />
    ///  实例中，按引用传递，其中包含要读取的文本。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(textReader: DDN.mscorlib.DNTextReader): DNServiceDescription; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  直接加载从 XML 类 <see cref="T:System.IO.Stream" />
    ///  实例。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  , ，按引用传递，其中包含要读取的字节数。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream): DNServiceDescription; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  直接加载从 XML 类 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  , ，按引用传递，其中包含要读取的 XML 数据。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(reader: DDN.System.Xml.DNXmlReader): DNServiceDescription; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  通过直接从指定的文件加载 XML 的对象。
    ///</summary>
    ///  <param name="fileName">
    ///  要读取的文件路径。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(fileName: string): DNServiceDescription; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  通过直接从指定的文件加载 XML 的对象。
    ///</summary>
    ///  <param name="fileName">
    ///  要读取的文件路径。
    ///</param>
    ///  <param name="validate">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，该值指示是否应根据指定的架构验证 XML <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(fileName: string; validate: Boolean): DNServiceDescription; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  直接加载从 XML 类 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="textReader">
    ///  一个 <see cref="T:System.IO.TextReader" />
    ///  实例中，按引用传递，其中包含要读取的文本。
    ///</param>
    ///  <param name="validate">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，该值指示是否应根据指定的架构验证 XML <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(textReader: DDN.mscorlib.DNTextReader; validate: Boolean): DNServiceDescription; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  直接加载从 XML 类 <see cref="T:System.IO.Stream" />
    ///  实例。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  , ，按引用传递，其中包含要读取的字节数。
    ///</param>
    ///  <param name="validate">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，该值指示是否应根据指定的架构验证 XML <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream; validate: Boolean): DNServiceDescription; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  直接加载从 XML 类 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  , ，按引用传递，其中包含要读取的 XML 数据。
    ///</param>
    ///  <param name="validate">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，该值指示是否应根据指定的架构验证 XML <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  的一个实例。
    ///</returns>
    {class} function Read(reader: DDN.System.Xml.DNXmlReader; validate: Boolean): DNServiceDescription; overload;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Xml.XmlReader" />
    ///  表示有效的 Web 服务描述语言 (WSDL) 文件，可以对其进行分析。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可以识别该节点在其上 <see cref="T:System.Xml.XmlReader" />
    ///  定位; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function CanRead(reader: DDN.System.Xml.DNXmlReader): Boolean;

  { static propertys } 

    ///<summary>
    ///  获取与此相关联的架构 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此相关联的架构 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</returns>
    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
    ///<summary>
    ///  获取 XML 序列化程序用于序列化和反序列化之间 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象和 Web 服务描述语言 (WSDL) 文档。
    ///</summary>
    ///<returns>
    ///  XML 序列化程序用于序列化和反序列化之间 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象和 Web 服务描述语言 (WSDL) 文档。
    ///</returns>
    {class} property Serializer: DDN.System.Xml.DNXmlSerializer read get_Serializer;
  end;

  ///<summary>
  ///  提供一种创建和格式化有效 Web 服务描述语言 (WSDL) 文档的文件，完成，但相应的命名空间、 元素和属性，用于描述 XML Web 服务方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescription')]
  DNServiceDescription = interface(DNNamedItem)
  ['{8BCC7200-84AC-38CF-AF7D-782CDD36B557}']
  { getters & setters } 

    function get_RetrievalUrl: string;
    procedure set_RetrievalUrl(value: string);
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Imports: DNImportCollection;
    function get_Types: DNTypes;
    procedure set_Types(value: DNTypes);
    function get_Messages: DNMessageCollection;
    function get_PortTypes: DNPortTypeCollection;
    function get_Bindings: DNBindingCollection;
    function get_Services: DNServiceCollection;
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_ValidationWarnings: DDN.System.DNStringCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    ///<summary>
    ///  写出 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  作为 Web 服务描述语言 (WSDL) 文件为指定的路径。
    ///</summary>
    ///  <param name="fileName">
    ///  向其写入 WSDL 文件的路径。
    ///</param>
    procedure Write(fileName: string); overload;
    ///<summary>
    ///  写出 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  到指定 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  , ，按引用传递，其中包含生成的 Web 服务描述语言 (WSDL) 文件。
    ///</param>
    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  写出 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  作为 Web 服务描述语言 (WSDL) 文件到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  一个 <see cref="T:System.IO.TextWriter" />
    ///  ，其中包含所生成的 WSDL 文件。
    ///</param>
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  写出 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  到 <see cref="T:System.Xml.XmlWriter" />
    ///  作为 Web 服务描述语言 (WSDL) 文件。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  , ，按引用传递，其中包含所生成的 WSDL 文件。
    ///</param>
    procedure Write(writer: DDN.System.Xml.DNXmlWriter); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 XML Web 服务的 URL 与其 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  实例应用。
    ///</summary>
    ///<returns>
    ///  XML Web 服务的 URL。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property RetrievalUrl: string read get_RetrievalUrl write set_RetrievalUrl;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  的该实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  服务说明的集合。
    ///</returns>
    ///<exception cref="T:System.NullReferenceException"><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  尚未分配到父集合。
    ///</exception>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>
    ///  获取集合中包含的可扩展性元素 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  集合中包含的可扩展性元素 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.Import" />
    ///  中所含元素 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  服务说明中包含的导入元素的集合。
    ///</returns>
    property Imports: DNImportCollection read get_Imports;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Description.Types" />
    ///  包含 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.Types" />
    ///  实例，它表示的参数的数据类型和由 XML Web 服务公开的方法的返回值。
    ///</returns>
    property Types: DNTypes read get_Types write set_Types;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.Message" />
    ///  中所含元素 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  服务说明中包含的消息元素的集合。
    ///</returns>
    property Messages: DNMessageCollection read get_Messages;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.PortType" />
    ///  中所含元素 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一套 <see cref="T:System.Web.Services.Description.PortType" />
    ///  中所含元素 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</returns>
    property PortTypes: DNPortTypeCollection read get_PortTypes;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.Binding" />
    ///  中所含元素 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  绑定的服务说明中所含元素的集合。
    ///</returns>
    property Bindings: DNBindingCollection read get_Bindings;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.Service" />
    ///  中包含的实例 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  服务说明中包含的服务实例的集合。
    ///</returns>
    property Services: DNServiceCollection read get_Services;
    ///<summary>
    ///  获取或设置 XML <see langword="targetNamespace" />
    ///  属性 <see langword="descriptions" />
    ///  标记括起来的 Web 服务描述语言 (WSDL) 文件。
    ///</summary>
    ///<returns>
    ///  所描述的 XML Web 服务的 URL <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</returns>
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  ，其中包含在调用过程中生成的所有验证警告 <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.Stream,System.Boolean)" />
    ///  , ，<see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.TextReader,System.Boolean)" />
    ///  , ，<see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.String,System.Boolean)" />
    ///  , ，或 <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.Xml.XmlReader,System.Boolean)" />
    ///  与 <paramref name="validate" />
    ///  参数设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  ，其中包含在调用过程中生成的所有验证警告 <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.Stream,System.Boolean)" />
    ///  , ，<see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.TextReader,System.Boolean)" />
    ///  , ，<see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.String,System.Boolean)" />
    ///  , ，或 <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.Xml.XmlReader,System.Boolean)" />
    ///  与 <paramref name="validate" />
    ///  参数设置为 <see langword="true" />
    ///  。
    ///</returns>
    property ValidationWarnings: DDN.System.DNStringCollection read get_ValidationWarnings;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含项的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNServiceDescription = class(TDNGenericImport<DNServiceDescriptionClass, DNServiceDescription>)
  public const
    ///<summary>
    ///  在其中的 XML 命名空间 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  类是定义 ("http://schemas.xmlsoap.org/wsdl/")。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNTypesClass = interface(DNDocumentableItemClass)
  ['{874C7C29-DD7C-5F47-94AD-0318C93B2BB0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Types" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypes;

  end;

  ///<summary>
  ///  描述与交换的消息相关的数据类型定义。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Types')]
  DNTypes = interface(DNDocumentableItem)
  ['{FD53E581-5BF2-395B-B172-72C6D1EA00E3}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  XML Web 服务中包含的元素。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  XML Web 服务中包括的扩展元素的集合。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 XML 架构作为 XML Web 服务的数据类型定义的集合。
    ///  此属性是只读的。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  集合。
    ///</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>
    ///  获取或设置的实例的文本文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示为文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>
    ///  获取或设置有关的文档元素 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlElement" />
    ///  ，它表示的文档 <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  。
    ///</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>
    ///  获取或设置类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</summary>
    ///<returns>
    ///  类型的数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  表示属性扩展的 WSDL 中符合 Web 服务互操作性 (WS-我) 基本配置文件 1.1。
    ///</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>
    ///  获取或设置命名空间前缀和命名空间，用来保留命名空间前缀和命名空间的字典时 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  构造对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  包含前缀/命名空间对的字典。
    ///</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNTypes = class(TDNGenericImport<DNTypesClass, DNTypes>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextMatchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99CDB98B-8E2A-5B5C-A341-7C8405BE23E3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimeTextMatch;

  end;

  ///<summary>
  ///  表示为其搜索 HTTP 传输的文本模式。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimeTextMatch')]
  DNMimeTextMatch = interface(DDN.mscorlib.DNObject)
  ['{3137DAB1-3EB9-3739-965D-0FDC02E1BE99}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Group: Int32;
    procedure set_Group(value: Int32);
    function get_Capture: Int32;
    procedure set_Capture(value: Int32);
    function get_Repeats: Int32;
    procedure set_Repeats(value: Int32);
    function get_RepeatsString: string;
    procedure set_RepeatsString(value: string);
    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_Matches: DNMimeTextMatchCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置一个值，指示要搜索的文本的 MIME 格式。
    ///</summary>
    ///<returns>
    ///  指示要搜索的文本的 MIME 格式的字符串。
    ///</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>
    ///  获取或设置一个值，指示要在其中放置文本搜索的结果的组的数目。
    ///</summary>
    ///<returns>
    ///  32 位带符号整数。
    ///  默认值为 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性值为负。
    ///</exception>
    property Group: Int32 read get_Group write set_Group;
    ///<summary>
    ///  获取或设置一个值，该值的从零开始的索引 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  组中。
    ///</summary>
    ///<returns>
    ///  32 位带符号整数。
    ///  默认值为 0，指示 <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  是组中的第一个实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性值为负。
    ///</exception>
    property Capture: Int32 read get_Capture write set_Capture;
    ///<summary>
    ///  获取或设置一个值，指示要执行搜索时的次数。
    ///</summary>
    ///<returns>
    ///  32 位带符号整数。
    ///  默认值为 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性值为负。
    ///</exception>
    property Repeats: Int32 read get_Repeats write set_Repeats;
    ///<summary>
    ///  获取或设置一个值，指示要执行搜索时的次数。
    ///</summary>
    ///<returns>
    ///  一个字符串，指示要执行搜索时的次数。
    ///  默认值为"1"。
    ///</returns>
    property RepeatsString: string read get_RepeatsString write set_RepeatsString;
    ///<summary>
    ///  获取或设置搜索的文本模式。
    ///</summary>
    ///<returns>
    ///  一个表示要搜索 HTTP 传输的文本字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Pattern: string read get_Pattern write set_Pattern;
    ///<summary>
    ///  获取或设置一个值，指示搜索是否应忽略要搜索的文本的大小写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果搜索应忽略大小写;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    ///<summary>
    ///  获取已找到的搜索模式匹配的文本的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  表示成员的 <see cref="P:System.Web.Services.Description.MimeTextMatch.Group" />
    ///  属性。
    ///</returns>
    property Matches: DNMimeTextMatchCollection read get_Matches;
  end;

  TDNMimeTextMatch = class(TDNGenericImport<DNMimeTextMatchClass, DNMimeTextMatch>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNProtocolImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F968D54-1145-5682-8CA5-010B7AE376C7}']
  end;

  ///<summary>
  ///  提供了常用功能，对于生成的 Web 服务的类，各种通信协议。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ProtocolImporter')]
  DNProtocolImporter = interface(DDN.mscorlib.DNObject)
  ['{A4B23FBB-6B0D-325B-AD7C-04678CB70D7B}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_AbstractSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_ConcreteSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_CodeNamespace: DDN.System.DNCodeNamespace;
    function get_CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration;
    function get_Style: DNServiceDescriptionImportStyle;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ClassNames: DDN.System.Xml.DNCodeIdentifiers;
    function get_MethodName: string;
    function get_ClassName: string;
    function get_Port: DNPort;
    function get_PortType: DNPortType;
    function get_Binding: DNBinding;
    function get_Service: DNService;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;
    function get_ProtocolName: string;

  { methods } 

    ///<summary>
    ///  对于每个未处理的扩展或 XML 元素中，输入的扩展集合，开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.RequiredExtensionsIgnored" />
    ///  或 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.OptionalExtensionsIgnored" />
    ///  针对每个未处理的扩展或 XML 元素中，输入的扩展集合的警告。
    ///</summary>
    ///  <param name="comments">
    ///  一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />
    ///  ，它指定要向其添加每个警告消息的代码批注的集合。
    ///</param>
    ///  <param name="extensions">
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  ，它指定扩展或为其生成警告如果它们未处理的 XML 元素。
    ///</param>
    procedure AddExtensionWarningComments(comments: DDN.System.DNCodeCommentStatementCollection; extensions: DNServiceDescriptionFormatExtensionCollection);
    ///<summary>
    ///  开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedBindingsIgnored" />
    ///  警告中 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举通过获取 <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  属性。
    ///  此方法还会为其生成的类的注释添加一条警告消息。
    ///</summary>
    ///  <param name="text">
    ///  要绑定到的警告消息，这已指示添加的批注已被忽略。
    ///</param>
    procedure UnsupportedBindingWarning(text: string);
    ///<summary>
    ///  开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  警告中 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举通过获取 <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  属性。
    ///  此方法还会为其生成的类的注释添加一条警告消息。
    ///</summary>
    ///  <param name="text">
    ///  要添加到的警告消息，这已指示操作绑定的批注被忽略。
    ///</param>
    procedure UnsupportedOperationWarning(text: string);
    ///<summary>
    ///  开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  警告中 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举通过获取 <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  属性。
    ///  此方法还会为其生成的类的注释添加一条警告消息。
    ///</summary>
    ///  <param name="text">
    ///  要添加到的警告消息，这已指示操作绑定的批注被忽略。
    ///</param>
    procedure UnsupportedOperationBindingWarning(text: string);
    ///<summary>
    ///  生成 异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</summary>
    ///  <param name="text">
    ///  要添加到异常消息，已指示该操作语法不正确的批注。
    ///</param>
    ///<returns>
    ///  异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</returns>
    function OperationSyntaxException(text: string): DDN.mscorlib.DNException;
    ///<summary>
    ///  生成 异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</summary>
    ///  <param name="text">
    ///  批注要添加到异常消息，已指示操作绑定语法无效。
    ///</param>
    ///<returns>
    ///  异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</returns>
    function OperationBindingSyntaxException(text: string): DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  属于关联对象 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  要搜索用于绑定从其生成的绑定类的实例。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  属于关联对象 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  要搜索用于绑定从其生成的绑定类的实例。
    ///</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>
    ///  获取由关联的所有 XML 架构，抽象和具体， <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  XML 架构，抽象和具体，由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>
    ///  获取所使用的关联的抽象的 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  使用由关联的抽象 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例
    ///</returns>
    property AbstractSchemas: DDN.System.Xml.DNXmlSchemas read get_AbstractSchemas;
    ///<summary>
    ///  获取所使用的关联的具体 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  使用由关联的具体 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</returns>
    property ConcreteSchemas: DDN.System.Xml.DNXmlSchemas read get_ConcreteSchemas;
    ///<summary>
    ///  获取表示正在生成的绑定类的.NET Framework 命名空间。
    ///</summary>
    ///<returns>
    ///  正在生成的绑定类的.NET Framework 命名空间表示。
    ///</returns>
    property CodeNamespace: DDN.System.DNCodeNamespace read get_CodeNamespace;
    ///<summary>
    ///  获取表示当前正在生成的绑定类。
    ///</summary>
    ///<returns>
    ///  当前正在生成的绑定类的表示形式。
    ///</returns>
    property CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration read get_CodeTypeDeclaration;
    ///<summary>
    ///  获取一个枚举值，该值指示是否正在生成客户端代理类或抽象服务器类。
    ///  值是 客户端 和 服务器。
    ///  值为关联的 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例的 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  枚举值，该值指示是否正在生成客户端代理类或抽象服务器类。
    ///  值是 客户端 和 服务器。
    ///  值为关联的 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例的 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  属性。
    ///</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举值，该值指示类型的警告，如果任何，在生成的绑定类时发出协议导入程序。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举值，该值指示类型的警告，如果任何，在生成的绑定类时发出协议导入程序。
    ///</returns>
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象，它生成的绑定类的当前正在生成的唯一名称。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象，它生成的绑定类的当前正在生成的唯一名称。
    ///</returns>
    property ClassNames: DDN.System.Xml.DNCodeIdentifiers read get_ClassNames;
    ///<summary>
    ///  获取绑定类方法的名称的协议导入当前正在生成。
    ///</summary>
    ///<returns>
    ///  绑定的名称方法的类，此类协议导入当前正在生成。
    ///</returns>
    property MethodName: string read get_MethodName;
    ///<summary>
    ///  获取当前正在生成的绑定类的名称。
    ///</summary>
    ///<returns>
    ///  当前正在生成的绑定类的名称。
    ///</returns>
    property ClassName: string read get_ClassName;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) 端口，其中包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用。
    ///  如果多个端口所引用的当前绑定中，当前的端口是最近已在其中找到绑定。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 端口，其中包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用。
    ///  如果多个端口所引用的当前绑定中，当前的端口是最近已在其中找到绑定。
    ///</returns>
    property Port: DNPort read get_Port;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  由协议导入当前正在处理以生成绑定类的绑定。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  由协议导入当前正在处理以生成绑定类的绑定。
    ///</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) 绑定协议导入程序当前正在处理，以生成类。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 的绑定，协议导入当前正在处理以生成类。
    ///</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>
    ///  获取包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用的 Web 服务描述语言 (WSDL) 服务。
    ///</summary>
    ///<returns>
    ///  包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用该 Web 服务描述语言 (WSDL) 服务。
    ///</returns>
    property Service: DNService read get_Service;
    ///<summary>
    ///  获取协议导入当前正在处理以绑定类中生成一个方法的抽象 Web 服务描述语言 (WSDL) 操作。
    ///</summary>
    ///<returns>
    ///  该协议导入当前正在处理以绑定类中生成一个方法的抽象 Web 服务描述语言 (WSDL) 操作。
    ///</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) 操作的绑定协议导入当前正在处理以绑定类中生成一个方法。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 操作绑定协议导入当前正在处理以绑定类中生成一个方法。
    ///</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>
    ///  协议导入当前正在处理以绑定类中生成一个方法的抽象操作获取 Web 服务描述语言 (WSDL) 输入的消息。
    ///</summary>
    ///<returns>
    ///  协议导入当前正在处理以绑定类中生成一个方法的抽象操作 Web 服务描述语言 (WSDL) 输入的消息。
    ///</returns>
    property InputMessage: DNMessage read get_InputMessage;
    ///<summary>
    ///  协议导入当前正在处理以绑定类中生成一个方法的抽象操作获取 Web 服务描述语言 (WSDL) 输出消息。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 输出协议导入当前正在处理以绑定类中生成一个方法的抽象操作的消息。
    ///</returns>
    property OutputMessage: DNMessage read get_OutputMessage;
    ///<summary>
    ///  具体派生的类的抽象属性必须实现它来获取正在使用的协议的名称。
    ///</summary>
    ///<returns>
    ///  正在使用的协议的名称。
    ///</returns>
    property ProtocolName: string read get_ProtocolName;
  end;

  TDNProtocolImporter = class(TDNGenericImport<DNProtocolImporterClass, DNProtocolImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapProtocolImporterClass = interface(DNProtocolImporterClass)
  ['{195A8A9E-47B2-5771-9EB7-60BCE3C60D0D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapProtocolImporter;

  end;

  ///<summary>
  ///  生成的 Web 服务的使用 SOAP 协议的类。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapProtocolImporter')]
  DNSoapProtocolImporter = interface(DNProtocolImporter)
  ['{5C3BFE62-0766-3AAD-9EB3-D9603AF56BAB}']
  { getters & setters } 

    function get_ProtocolName: string;
    function get_SoapBinding: DNDescription_SoapBinding;
    function get_SoapImporter: DDN.System.Xml.DNSoapSchemaImporter;
    function get_XmlImporter: DDN.System.Xml.DNXmlSchemaImporter;
    function get_XmlExporter: DDN.System.Xml.DNXmlCodeExporter;
    function get_SoapExporter: DDN.System.Xml.DNSoapCodeExporter;
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_AbstractSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_ConcreteSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_CodeNamespace: DDN.System.DNCodeNamespace;
    function get_CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration;
    function get_Style: DNServiceDescriptionImportStyle;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ClassNames: DDN.System.Xml.DNCodeIdentifiers;
    function get_MethodName: string;
    function get_ClassName: string;
    function get_Port: DNPort;
    function get_PortType: DNPortType;
    function get_Binding: DNBinding;
    function get_Service: DNService;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;

  { methods } 

    ///<summary>
    ///  对于每个未处理的扩展或 XML 元素中，输入的扩展集合，开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.RequiredExtensionsIgnored" />
    ///  或 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.OptionalExtensionsIgnored" />
    ///  针对每个未处理的扩展或 XML 元素中，输入的扩展集合的警告。
    ///</summary>
    ///  <param name="comments">
    ///  一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />
    ///  ，它指定要向其添加每个警告消息的代码批注的集合。
    ///</param>
    ///  <param name="extensions">
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  ，它指定扩展或为其生成警告如果它们未处理的 XML 元素。
    ///</param>
    procedure AddExtensionWarningComments(comments: DDN.System.DNCodeCommentStatementCollection; extensions: DNServiceDescriptionFormatExtensionCollection);
    ///<summary>
    ///  开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedBindingsIgnored" />
    ///  警告中 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举通过获取 <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  属性。
    ///  此方法还会为其生成的类的注释添加一条警告消息。
    ///</summary>
    ///  <param name="text">
    ///  要绑定到的警告消息，这已指示添加的批注已被忽略。
    ///</param>
    procedure UnsupportedBindingWarning(text: string);
    ///<summary>
    ///  开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  警告中 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举通过获取 <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  属性。
    ///  此方法还会为其生成的类的注释添加一条警告消息。
    ///</summary>
    ///  <param name="text">
    ///  要添加到的警告消息，这已指示操作绑定的批注被忽略。
    ///</param>
    procedure UnsupportedOperationWarning(text: string);
    ///<summary>
    ///  开启 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  警告中 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举通过获取 <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  属性。
    ///  此方法还会为其生成的类的注释添加一条警告消息。
    ///</summary>
    ///  <param name="text">
    ///  要添加到的警告消息，这已指示操作绑定的批注被忽略。
    ///</param>
    procedure UnsupportedOperationBindingWarning(text: string);
    ///<summary>
    ///  生成 异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</summary>
    ///  <param name="text">
    ///  要添加到异常消息，已指示该操作语法不正确的批注。
    ///</param>
    ///<returns>
    ///  异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</returns>
    function OperationSyntaxException(text: string): DDN.mscorlib.DNException;
    ///<summary>
    ///  生成 异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</summary>
    ///  <param name="text">
    ///  批注要添加到异常消息，已指示操作绑定语法无效。
    ///</param>
    ///<returns>
    ///  异常 ，该值指示当前 <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  为其生成的绑定类的实例中的目标命名空间无效。
    ///</returns>
    function OperationBindingSyntaxException(text: string): DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值"Soap"。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  对象，其中包含字符串"Soap"。
    ///</returns>
    property ProtocolName: string read get_ProtocolName;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  实例通过获取 <see cref="P:System.Web.Services.Description.SoapProtocolImporter.SoapBinding" />
    ///  属性的 <see cref="P:System.Web.Services.Description.Binding.Extensions" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  实例通过获取 <see cref="P:System.Web.Services.Description.SoapProtocolImporter.SoapBinding" />
    ///  属性的 <see cref="P:System.Web.Services.Description.Binding.Extensions" />
    ///  属性。
    ///</returns>
    property SoapBinding: DNDescription_SoapBinding read get_SoapBinding;
    ///<summary>
    ///  获取类型对象 <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类来生成 SOAP 编码的 XML 架构内容和.NET Framework 类型之间的映射。
    ///</summary>
    ///<returns>
    ///  类型的对象 <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类来生成 SOAP 编码的 XML 架构内容和.NET Framework 类型之间的映射。
    ///</returns>
    property SoapImporter: DDN.System.Xml.DNSoapSchemaImporter read get_SoapImporter;
    ///<summary>
    ///  获取类型对象 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类生成 XML 架构的文本内容和.NET Framework 类型之间的映射。
    ///</summary>
    ///<returns>
    ///  类型的对象 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类生成 XML 架构的文本内容和.NET Framework 类型之间的映射。
    ///</returns>
    property XmlImporter: DDN.System.Xml.DNXmlSchemaImporter read get_XmlImporter;
    ///<summary>
    ///  获取类型对象 <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类以便从 XML 架构的文本内容和.NET Framework 类型之间的映射生成代码。
    ///</summary>
    ///<returns>
    ///  类型的对象 <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类以便从 XML 架构的文本内容和.NET Framework 类型之间的映射生成代码。
    ///</returns>
    property XmlExporter: DDN.System.Xml.DNXmlCodeExporter read get_XmlExporter;
    ///<summary>
    ///  获取类型对象 <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类以便从 SOAP 编码的 XML 架构内容和.NET Framework 类型之间的映射生成代码。
    ///</summary>
    ///<returns>
    ///  类型的对象 <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  内部使用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  类以便从 SOAP 编码的 XML 架构内容和.NET Framework 类型之间的映射生成代码。
    ///</returns>
    property SoapExporter: DDN.System.Xml.DNSoapCodeExporter read get_SoapExporter;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  属于关联对象 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  要搜索用于绑定从其生成的绑定类的实例。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  属于关联对象 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  要搜索用于绑定从其生成的绑定类的实例。
    ///</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>
    ///  获取由关联的所有 XML 架构，抽象和具体， <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  XML 架构，抽象和具体，由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>
    ///  获取所使用的关联的抽象的 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  使用由关联的抽象 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例
    ///</returns>
    property AbstractSchemas: DDN.System.Xml.DNXmlSchemas read get_AbstractSchemas;
    ///<summary>
    ///  获取所使用的关联的具体 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  使用由关联的具体 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</returns>
    property ConcreteSchemas: DDN.System.Xml.DNXmlSchemas read get_ConcreteSchemas;
    ///<summary>
    ///  获取表示正在生成的绑定类的.NET Framework 命名空间。
    ///</summary>
    ///<returns>
    ///  正在生成的绑定类的.NET Framework 命名空间表示。
    ///</returns>
    property CodeNamespace: DDN.System.DNCodeNamespace read get_CodeNamespace;
    ///<summary>
    ///  获取表示当前正在生成的绑定类。
    ///</summary>
    ///<returns>
    ///  当前正在生成的绑定类的表示形式。
    ///</returns>
    property CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration read get_CodeTypeDeclaration;
    ///<summary>
    ///  获取一个枚举值，该值指示是否正在生成客户端代理类或抽象服务器类。
    ///  值是 客户端 和 服务器。
    ///  值为关联的 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例的 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  枚举值，该值指示是否正在生成客户端代理类或抽象服务器类。
    ///  值是 客户端 和 服务器。
    ///  值为关联的 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例的 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  属性。
    ///</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举值，该值指示类型的警告，如果任何，在生成的绑定类时发出协议导入程序。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  枚举值，该值指示类型的警告，如果任何，在生成的绑定类时发出协议导入程序。
    ///</returns>
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象，它生成的绑定类的当前正在生成的唯一名称。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象，它生成的绑定类的当前正在生成的唯一名称。
    ///</returns>
    property ClassNames: DDN.System.Xml.DNCodeIdentifiers read get_ClassNames;
    ///<summary>
    ///  获取绑定类方法的名称的协议导入当前正在生成。
    ///</summary>
    ///<returns>
    ///  绑定的名称方法的类，此类协议导入当前正在生成。
    ///</returns>
    property MethodName: string read get_MethodName;
    ///<summary>
    ///  获取当前正在生成的绑定类的名称。
    ///</summary>
    ///<returns>
    ///  当前正在生成的绑定类的名称。
    ///</returns>
    property ClassName: string read get_ClassName;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) 端口，其中包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用。
    ///  如果多个端口所引用的当前绑定中，当前的端口是最近已在其中找到绑定。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 端口，其中包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用。
    ///  如果多个端口所引用的当前绑定中，当前的端口是最近已在其中找到绑定。
    ///</returns>
    property Port: DNPort read get_Port;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  由协议导入当前正在处理以生成绑定类的绑定。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  由协议导入当前正在处理以生成绑定类的绑定。
    ///</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) 绑定协议导入程序当前正在处理，以生成类。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 的绑定，协议导入当前正在处理以生成类。
    ///</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>
    ///  获取包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用的 Web 服务描述语言 (WSDL) 服务。
    ///</summary>
    ///<returns>
    ///  包含对指定的绑定的协议导入当前正在处理以生成绑定类的引用该 Web 服务描述语言 (WSDL) 服务。
    ///</returns>
    property Service: DNService read get_Service;
    ///<summary>
    ///  获取协议导入当前正在处理以绑定类中生成一个方法的抽象 Web 服务描述语言 (WSDL) 操作。
    ///</summary>
    ///<returns>
    ///  该协议导入当前正在处理以绑定类中生成一个方法的抽象 Web 服务描述语言 (WSDL) 操作。
    ///</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) 操作的绑定协议导入当前正在处理以绑定类中生成一个方法。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 操作绑定协议导入当前正在处理以绑定类中生成一个方法。
    ///</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>
    ///  协议导入当前正在处理以绑定类中生成一个方法的抽象操作获取 Web 服务描述语言 (WSDL) 输入的消息。
    ///</summary>
    ///<returns>
    ///  协议导入当前正在处理以绑定类中生成一个方法的抽象操作 Web 服务描述语言 (WSDL) 输入的消息。
    ///</returns>
    property InputMessage: DNMessage read get_InputMessage;
    ///<summary>
    ///  协议导入当前正在处理以绑定类中生成一个方法的抽象操作获取 Web 服务描述语言 (WSDL) 输出消息。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 输出协议导入当前正在处理以绑定类中生成一个方法的抽象操作的消息。
    ///</returns>
    property OutputMessage: DNMessage read get_OutputMessage;
  end;

  TDNSoapProtocolImporter = class(TDNGenericImport<DNSoapProtocolImporterClass, DNSoapProtocolImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNProtocolReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E00F61E-FB8C-59F2-B776-588477CD5910}']
  end;

  ///<summary>
  ///  提供用于创建各种通信协议的常见功能 <see cref="T:System.Web.Services.Description.ServiceDescription" />
  ///  标识为 Web 服务的类中的对象。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ProtocolReflector')]
  DNProtocolReflector = interface(DDN.mscorlib.DNObject)
  ['{59BA2930-BDA6-3C4D-A672-4E86576EF2E7}']
  { getters & setters } 

    function get_Service: DNService;
    function get_ServiceDescription: DNServiceDescription;
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_SchemaExporter: DDN.System.Xml.DNXmlSchemaExporter;
    function get_ReflectionImporter: DDN.System.Xml.DNXmlReflectionImporter;
    function get_DefaultNamespace: string;
    function get_ServiceUrl: string;
    function get_ServiceType: DDN.mscorlib.DNType;
    function get_Method: DNLogicalMethodInfo;
    function get_Binding: DNBinding;
    function get_PortType: DNPortType;
    function get_Port: DNPort;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_MethodAttribute: DNWebMethodAttribute;
    function get_Methods: TArray<DNLogicalMethodInfo>;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;
    function get_HeaderMessages: DNMessageCollection;
    function get_ProtocolName: string;

  { methods } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  给定的 XML 命名空间和适用的通信协议的对象。
    ///</summary>
    ///  <param name="ns"><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  随后获取的实例获取填充了对应于输入的 Web 服务类中反映的 Web 服务描述语言 (WSDL) 实体的对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  给定的 XML 命名空间和适用的通信协议的对象。
    ///</returns>
    function GetServiceDescription(ns: string): DNServiceDescription;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取每个协议反射器当前正在生成可以包含对正在生成的绑定引用的 Web 服务描述语言 (WSDL) 服务。
    ///</summary>
    ///<returns>
    ///  每个协议反射器当前正在生成可以包含对正在生成的绑定引用该 Web 服务描述语言 (WSDL) 服务。
    ///</returns>
    property Service: DNService read get_Service;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象当前正在创建包含正在生成的绑定。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象当前正在创建包含正在生成的绑定。
    ///</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象，到目前为止已创建和添加到对应于 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  通过获取 <see cref="P:System.Web.Services.Description.ServiceDescriptionReflector.ServiceDescriptions" />
    ///  属性关联的 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象，到目前为止已创建和添加到对应于 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  通过获取 <see cref="P:System.Web.Services.Description.ServiceDescriptionReflector.ServiceDescriptions" />
    ///  属性关联的 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>
    ///  获取所生成的 XML 架构由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  正在生成的 XML 架构由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlSchemaExporter" />
    ///  实例正在使用由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSchemaExporter" />
    ///  实例正在使用由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</returns>
    property SchemaExporter: DDN.System.Xml.DNXmlSchemaExporter read get_SchemaExporter;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  实例正在使用由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  实例正在使用由关联 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  实例。
    ///</returns>
    property ReflectionImporter: DDN.System.Xml.DNXmlReflectionImporter read get_ReflectionImporter;
    ///<summary>
    ///  获取默认命名空间，由关联标识 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象的 <see cref="F:System.Web.Services.Description.ServiceDescription.Namespace" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  默认命名空间，如标识由关联 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象的 <see cref="F:System.Web.Services.Description.ServiceDescription.Namespace" />
    ///  属性。
    ///</returns>
    property DefaultNamespace: string read get_DefaultNamespace;
    ///<summary>
    ///  获取作为统一资源定位器 (URL)，从关联的关联的 Web 服务的终结点 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  从关联的终结点关联的 Web 服务作为统一资源定位器 (URL)，获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  对象。
    ///</returns>
    property ServiceUrl: string read get_ServiceUrl;
    ///<summary>
    ///  获取正在反射以生成的 Web 服务类的类型 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  正在反射以生成的 Web 服务类的类型 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象。
    ///</returns>
    property ServiceType: DDN.mscorlib.DNType read get_ServiceType;
    ///<summary>
    ///  获取 Web 服务方法，该协议反射器当前正在处理以生成 Web 服务描述语言 (WSDL) 操作，以便放置在生成 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  Web 服务方法，该协议反射器当前正在处理以生成 Web 服务描述语言 (WSDL) 操作，以便放置在生成 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</returns>
    property Method: DNLogicalMethodInfo read get_Method;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) 绑定当前正在生成并添加到关联 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 绑定当前正在生成并添加到关联 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>
    ///  获取 Web 服务描述语言 (WSDL) <see langword="portType" />
    ///  协议反射器当前正在生成由正在生成的绑定来实现。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) <see langword="portType" />
    ///  协议反射器当前正在生成由正在生成的绑定来实现。
    ///</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>
    ///  获取每个协议反射器当前正在生成可以包含对正在生成的绑定引用的 Web 服务描述语言 (WSDL) 端口。
    ///</summary>
    ///<returns>
    ///  每个协议反射器当前正在生成可以包含对正在生成的绑定引用 Web 服务描述语言 (WSDL) 端口。
    ///</returns>
    property Port: DNPort read get_Port;
    ///<summary>
    ///  获取协议反射器当前正在生成来自 Web 服务方法的抽象 Web 服务描述语言 (WSDL) 操作。
    ///</summary>
    ///<returns>
    ///  抽象协议反射器当前正在从 Web 服务方法生成的 Web 服务描述语言 (WSDL) 操作
    ///</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>
    ///  获取协议导入程序当前正在从 Web 服务方法生成的 Web 服务描述语言 (WSDL) 操作绑定。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 操作绑定协议导入程序当前正在生成来自 Web 服务方法。
    ///</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  协议反射当前正在处理以生成 Web 服务描述语言 (WSDL) 操作，以便放置的方法在生成 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  协议反射当前正在处理以生成 Web 服务描述语言 (WSDL) 操作，以便放置的方法在生成 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///</returns>
    property MethodAttribute: DNWebMethodAttribute read get_MethodAttribute;
    ///<summary>
    ///  获取 Web 服务方法属于 Web 服务类中，标识由关联 <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  对象的 <see cref="P:System.Web.Services.Description.ProtocolReflector.Methods" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  属于 Web 服务类中，标识由关联的 Web 服务方法 <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  对象的 <see cref="P:System.Web.Services.Description.ProtocolReflector.Methods" />
    ///  属性。
    ///</returns>
    property Methods: TArray<DNLogicalMethodInfo> read get_Methods;
    ///<summary>
    ///  协议反射器当前正在生成来自 Web 服务方法的抽象操作获取 Web 服务描述语言 (WSDL) 输入的消息。
    ///</summary>
    ///<returns>
    ///  协议反射器当前正在生成来自 Web 服务方法的抽象操作 Web 服务描述语言 (WSDL) 输入的消息。
    ///</returns>
    property InputMessage: DNMessage read get_InputMessage;
    ///<summary>
    ///  协议反射器当前正在生成来自 Web 服务方法的抽象操作获取 Web 服务描述语言 (WSDL) 输出消息。
    ///</summary>
    ///<returns>
    ///  Web 服务描述语言 (WSDL) 输出协议反射器当前正在生成来自 Web 服务方法的抽象操作的消息。
    ///</returns>
    property OutputMessage: DNMessage read get_OutputMessage;
    ///<summary>
    ///  获取 SOAP 标头消息定义要添加到关联 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  SOAP 标头消息定义要添加到关联 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象。
    ///</returns>
    property HeaderMessages: DNMessageCollection read get_HeaderMessages;
    ///<summary>
    ///  当在派生类中重写时获取正在使用的协议的名称。
    ///</summary>
    ///<returns>
    ///  正在使用的协议的名称。
    ///</returns>
    property ProtocolName: string read get_ProtocolName;
  end;

  TDNProtocolReflector = class(TDNGenericImport<DNProtocolReflectorClass, DNProtocolReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionFormatExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BA940F31-4FDE-5486-AD68-6019B8C14D4C}']
  end;

  ///<summary>
  ///  表示一个扩展元素添加到 XML Web 服务。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionFormatExtension')]
  DNServiceDescriptionFormatExtension = interface(DDN.mscorlib.DNObject)
  ['{4B053390-4782-35FD-B385-41E959724571}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNServiceDescriptionFormatExtension = class(TDNGenericImport<DNServiceDescriptionFormatExtensionClass, DNServiceDescriptionFormatExtension>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpAddressBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{1C700106-6759-57B6-8BFF-76F9272F1B65}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.HttpAddressBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpAddressBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.Port" />
  ///  XML Web 服务中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.HttpAddressBinding')]
  DNHttpAddressBinding = interface(DNServiceDescriptionFormatExtension)
  ['{E0C80317-09F5-30B2-8FB5-A7A165A8023F}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，表示 XML Web 服务的 URL。
    ///</summary>
    ///<returns>
    ///  一个字符串，指定的 URI <see cref="T:System.Web.Services.Description.Port" />
    ///  。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpAddressBinding = class(TDNGenericImport<DNHttpAddressBindingClass, DNHttpAddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{1DC4D0DA-5BB0-5617-AB22-8EB54A997F03}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.HttpBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.Binding" />
  ///  XML Web 服务中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.HttpBinding')]
  DNHttpBinding = interface(DNServiceDescriptionFormatExtension)
  ['{0B79E71A-FB26-3701-A240-E9671AF62C99}']
  { getters & setters } 

    function get_Verb: string;
    procedure set_Verb(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否将使用"GET"POST"方法进行 HTTP 请求。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含两个可能值、"GET"或"POST"之一。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Verb: string read get_Verb write set_Verb;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpBinding = class(TDNGenericImport<DNHttpBindingClass, DNHttpBinding>)
  public const
    ///<summary>
    ///  指定表示与 SOAP 一起使用的 HTTP 传输的 XML 命名空间的 URI。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/http/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpOperationBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DF9163D7-5EF3-5F59-AB53-DAA40957E068}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.HttpOperationBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpOperationBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  XML Web 服务中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.HttpOperationBinding')]
  DNHttpOperationBinding = interface(DNServiceDescriptionFormatExtension)
  ['{72447989-C247-3B50-B539-174632EA0829}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置图像的 URL 相对于指定的位置 <see cref="T:System.Web.Services.Description.HttpAddressBinding" />
    ///  , 、 在 Web 服务描述语言 (WSDL) 文档中，操作的支持 <see cref="T:System.Web.Services.Description.HttpOperationBinding" />
    ///  。
    ///</summary>
    ///<returns>
    ///  未编码的字符串表示的相对路径。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpOperationBinding = class(TDNGenericImport<DNHttpOperationBindingClass, DNHttpOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpUrlEncodedBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{B9F8DCC4-030F-530C-8EB1-F875A5DC6E60}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.HttpUrlEncodedBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpUrlEncodedBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  XML Web 服务中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.HttpUrlEncodedBinding')]
  DNHttpUrlEncodedBinding = interface(DNServiceDescriptionFormatExtension)
  ['{A8E9F29B-FFA1-3935-8831-61DCB5F8699C}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpUrlEncodedBinding = class(TDNGenericImport<DNHttpUrlEncodedBindingClass, DNHttpUrlEncodedBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpUrlReplacementBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DC12ED70-DB21-5B29-9B41-5362FB2BC752}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.HttpUrlReplacementBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpUrlReplacementBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  XML Web 服务中。
  ///  它指定用于通过 HTTP 传输数据的格式。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.HttpUrlReplacementBinding')]
  DNHttpUrlReplacementBinding = interface(DNServiceDescriptionFormatExtension)
  ['{1F56DF7C-9632-36C7-828C-E2F78E3AD0EE}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpUrlReplacementBinding = class(TDNGenericImport<DNHttpUrlReplacementBindingClass, DNHttpUrlReplacementBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeContentBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{4F79A2E0-67F6-56C3-8F79-1F42D8DA2A92}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimeContentBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  在 XML Web 服务中，指定 HTTP 传输的正文的 MIME 格式。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimeContentBinding')]
  DNMimeContentBinding = interface(DNServiceDescriptionFormatExtension)
  ['{2AC82FCF-9A51-3431-B679-A9F19DE57991}']
  { getters & setters } 

    function get_Part: string;
    procedure set_Part(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的名称 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  到 <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  适用。
    ///</summary>
    ///<returns>
    ///  一个表示名称的字符串 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  与其当前 <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  相关联。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>
    ///  获取或设置一个值，该值 HTTP 传输的正文的格式。
    ///</summary>
    ///<returns>
    ///  指示 HTTP 传输的正文的格式的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeContentBinding = class(TDNGenericImport<DNMimeContentBindingClass, DNMimeContentBinding>)
  public const
    ///<summary>
    ///  指定的 XML 命名空间的 URI <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  类。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/mime/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeMultipartRelatedBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DBEC29B5-F914-5F67-A4DD-749A0E64F4A7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimeMultipartRelatedBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  , ，指定的单个 MIME 格式的 HTTP 传输的部件。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimeMultipartRelatedBinding')]
  DNMimeMultipartRelatedBinding = interface(DNServiceDescriptionFormatExtension)
  ['{C88EB1EF-0525-33BC-A86E-21A667D15E29}']
  { getters & setters } 

    function get_Parts: DNMimePartCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的扩展性元素添加到集合 <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  指定的 MIME 消息部分的 MIME 格式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  表示可扩展性元素添加到 <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  。
    ///</returns>
    property Parts: DNMimePartCollection read get_Parts;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeMultipartRelatedBinding = class(TDNGenericImport<DNMimeMultipartRelatedBindingClass, DNMimeMultipartRelatedBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimePartClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{CBDF42A7-C95A-5E49-B11D-8F75DF078D33}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimePart;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
  ///  , ，指定具体的 MIME 类型 <see cref="T:System.Web.Services.Description.MessagePart" />
  ///  到 <see langword="MimePart" />
  ///  适用。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimePart')]
  DNMimePart = interface(DNServiceDescriptionFormatExtension)
  ['{5772EC04-543F-3DB5-8436-7E7BABAC5850}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的部分的 MIME 扩展性元素的集合 <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  其中 <see cref="T:System.Web.Services.Description.MimePart" />
    ///  是成员。
    ///</summary>
    ///<returns>
    ///  服务说明格式扩展的集合。
    ///</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimePart = class(TDNGenericImport<DNMimePartClass, DNMimePart>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{919A10C2-3463-5C89-B84A-487B59771EC2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimeTextBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimeTextBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  , 、 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  , ，或 <see cref="T:System.Web.Services.Description.MimePart" />
  ///  , ，指定要搜索 HTTP 传输的文本模式。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimeTextBinding')]
  DNMimeTextBinding = interface(DNServiceDescriptionFormatExtension)
  ['{F2002E31-CA87-392D-8E93-950762F1ED89}']
  { getters & setters } 

    function get_Matches: DNMimeTextMatchCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取为其搜索 HTTP 传输的 MIME 文本模式的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  表示要搜索的 MIME 文本模式。
    ///</returns>
    property Matches: DNMimeTextMatchCollection read get_Matches;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeTextBinding = class(TDNGenericImport<DNMimeTextBindingClass, DNMimeTextBinding>)
  public const
    ///<summary>
    ///  指定的 XML 命名空间的 URI <see cref="T:System.Web.Services.Description.MimeTextBinding" />
    ///  类。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'http://microsoft.com/wsdl/mime/textMatching/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeXmlBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{0EB14F68-86D5-5BB5-A979-E71AE03A18EE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.MimeXmlBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMimeXmlBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.MimePart" />
  ///  , 、 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  。
  ///  它指定为不符合 SOAP 的 XML 消息的架构。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.MimeXmlBinding')]
  DNMimeXmlBinding = interface(DNServiceDescriptionFormatExtension)
  ['{202782E1-F0BF-30AC-B810-EAA5B6B3A8A4}']
  { getters & setters } 

    function get_Part: string;
    procedure set_Part(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的名称 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  到 <see cref="T:System.Web.Services.Description.MimeXmlBinding" />
    ///  适用。
    ///</summary>
    ///<returns>
    ///  相应的名称 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeXmlBinding = class(TDNGenericImport<DNMimeXmlBindingClass, DNMimeXmlBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapAddressBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{BF14C764-E48D-5C75-A486-E18208C80555}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapAddressBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapAddressBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.Port" />
  ///  XML Web 服务中。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapAddressBinding')]
  DNSoapAddressBinding = interface(DNServiceDescriptionFormatExtension)
  ['{9394509A-247C-3837-A5AD-842F11DD1A31}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，表示的 URI <see cref="T:System.Web.Services.Description.Port" />
    ///  到 <see cref="T:System.Web.Services.Description.SoapAddressBinding" />
    ///  适用。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapAddressBinding = class(TDNGenericImport<DNSoapAddressBindingClass, DNSoapAddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12AddressBindingClass = interface(DNSoapAddressBindingClass)
  ['{BB6890B6-F58A-5C3F-A5B3-90FF6B917B85}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Soap12AddressBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoap12AddressBinding;

  end;

  ///<summary>
  ///  表示应用于服务说明格式扩展 <see cref="T:System.Web.Services.Description.Port" />
  ///  当 XML Web 服务支持 SOAP 协议 1.2 版。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Soap12AddressBinding')]
  DNSoap12AddressBinding = interface(DNSoapAddressBinding)
  ['{E6FB2398-2D89-3AE0-9EAD-756622618FD7}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，表示的 URI <see cref="T:System.Web.Services.Description.Port" />
    ///  到 <see cref="T:System.Web.Services.Description.SoapAddressBinding" />
    ///  适用。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Location: string read get_Location write set_Location;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12AddressBinding = class(TDNGenericImport<DNSoap12AddressBindingClass, DNSoap12AddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNDescription_SoapBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{7556E67D-34D3-53FB-A96C-F2C440F84C3B}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  类的实例。
    ///</summary>
    {class} function init: DNDescription_SoapBinding;

  { static propertys } 

    ///<summary>
    ///  获取要使用通过使用 SOAP 协议版本 1.1 来传输数据的绑定架构。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象，表示要使用通过使用 SOAP 协议版本 1.1 来传输数据的绑定架构。
    ///</returns>
    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
  end;

  ///<summary>
  ///  表示一个扩展添加到 <see cref="T:System.Web.Services.Description.Binding" />
  ///  XML Web 服务中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapBinding')]
  DNDescription_SoapBinding = interface(DNServiceDescriptionFormatExtension)
  ['{5C157D9E-2E33-32D4-B91C-9FB7973816F4}']
  { getters & setters } 

    function get_Transport: string;
    procedure set_Transport(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置与 HTTP 数据传输的 SOAP 规范的 URI。
    ///</summary>
    ///<returns>
    ///  通过 SOAP 表示有关数据传输的规范 URI 的字符串值。
    ///  默认值为空字符串("")。
    ///</returns>
    property Transport: string read get_Transport write set_Transport;
    ///<summary>
    ///  指定当前所使用的 SOAP 绑定的类型 <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  值之一。
    ///  默认值为 <see langword="Document" />
    ///  。
    ///</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNDescription_SoapBinding = class(TDNGenericImport<DNDescription_SoapBindingClass, DNDescription_SoapBinding>)
  public const
    ///<summary>
    ///  获取的 XML 命名空间的 URI <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  类。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/soap/';
    ///<summary>
    ///  获取指定 HTTP 数据传输的 SOAP 的标准协议的 URI。
    ///  此字段为常数。
    ///</summary>
   HttpTransport = 'http://schemas.xmlsoap.org/soap/http';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12BindingClass = interface(DNDescription_SoapBindingClass)
  ['{3BFCBBDD-42FE-5377-A4EE-1DF31D66A968}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Soap12Binding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoap12Binding;

  end;

  ///<summary>
  ///  表示 SOAP 版本 1.2 协议 Web 服务描述语言 (WSDL) 文档中的绑定。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Soap12Binding')]
  DNSoap12Binding = interface(DNDescription_SoapBinding)
  ['{104F99E0-1E53-33A2-89AE-90043973EEDB}']
  { getters & setters } 

    function get_Transport: string;
    procedure set_Transport(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置与 HTTP 数据传输的 SOAP 规范的 URI。
    ///</summary>
    ///<returns>
    ///  通过 SOAP 表示有关数据传输的规范 URI 的字符串值。
    ///  默认值为空字符串("")。
    ///</returns>
    property Transport: string read get_Transport write set_Transport;
    ///<summary>
    ///  指定当前所使用的 SOAP 绑定的类型 <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  值之一。
    ///  默认值为 <see langword="Document" />
    ///  。
    ///</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12Binding = class(TDNGenericImport<DNSoap12BindingClass, DNSoap12Binding>)
  public const
    ///<summary>
    ///  表示与 SOAP 协议 1.2 版的绑定的 XML 命名空间。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/soap12/';
    ///<summary>
    ///  表示 SOAP 消息是 HTTP 传输协议。
    ///  此字段为常数。
    ///</summary>
   HttpTransport = 'http://schemas.xmlsoap.org/soap/http';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapBodyBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{64FA76A2-FC20-5C9F-B455-844C8C244D05}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapBodyBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapBodyBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapBodyBinding')]
  DNSoapBodyBinding = interface(DNServiceDescriptionFormatExtension)
  ['{B3D26E8E-4FC1-3FF0-8161-8CC1C073772E}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_PartsString: string;
    procedure set_PartsString(value: string);
    function get_Parts: TArray<string>;
    procedure set_Parts(value: TArray<string>);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示是否使用指定的编码规则进行编码的消息部分，或定义消息的具体架构。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值之一。
    ///  默认值为 <see langword="Default" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置表示未特别定义的内容编码规范的位置的 URI <see cref="P:System.Web.Services.Description.SoapBodyBinding.Encoding" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置一个字符串，该字符串包含用空格分隔 Uri 的列表。
    ///  Uri 表示的编码样式 （或样式） 将用于对 SOAP 正文中的消息进行编码。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含的 Uri 列表。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置一个值，该值指示在传输的 SOAP 正文部分中的显示传输的消息中的哪些部分。
    ///</summary>
    ///<returns>
    ///  包含相应的消息部分用空格分隔的字符串。
    ///</returns>
    property PartsString: string read get_PartsString write set_PartsString;
    ///<summary>
    ///  获取或设置一个值，该值指示在传输的 SOAP 正文部分中的显示传输的消息中的哪些部分。
    ///</summary>
    ///<returns>
    ///  包含相应的消息部分的名称的字符串数组。
    ///</returns>
    property Parts: TArray<string> read get_Parts write set_Parts;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapBodyBinding = class(TDNGenericImport<DNSoapBodyBindingClass, DNSoapBodyBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12BodyBindingClass = interface(DNSoapBodyBindingClass)
  ['{46EEFC0D-E2C7-523F-8692-E8DE549BEB13}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Soap12BodyBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoap12BodyBinding;

  end;

  ///<summary>
  ///  表示应用于服务说明格式扩展 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  当 XML Web 服务支持 SOAP 协议 1.2 版。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Soap12BodyBinding')]
  DNSoap12BodyBinding = interface(DNSoapBodyBinding)
  ['{C2E83DE7-A249-3CED-A222-53C2D893A01D}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_PartsString: string;
    procedure set_PartsString(value: string);
    function get_Parts: TArray<string>;
    procedure set_Parts(value: TArray<string>);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示是否使用指定的编码规则进行编码的消息部分，或定义消息的具体架构。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值之一。
    ///  默认值为 <see langword="Default" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置表示未特别定义的内容编码规范的位置的 URI <see cref="P:System.Web.Services.Description.SoapBodyBinding.Encoding" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置一个字符串，该字符串包含用空格分隔 Uri 的列表。
    ///  Uri 表示的编码样式 （或样式） 将用于对 SOAP 正文中的消息进行编码。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含的 Uri 列表。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置一个值，该值指示在传输的 SOAP 正文部分中的显示传输的消息中的哪些部分。
    ///</summary>
    ///<returns>
    ///  包含相应的消息部分用空格分隔的字符串。
    ///</returns>
    property PartsString: string read get_PartsString write set_PartsString;
    ///<summary>
    ///  获取或设置一个值，该值指示在传输的 SOAP 正文部分中的显示传输的消息中的哪些部分。
    ///</summary>
    ///<returns>
    ///  包含相应的消息部分的名称的字符串数组。
    ///</returns>
    property Parts: TArray<string> read get_Parts write set_Parts;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12BodyBinding = class(TDNGenericImport<DNSoap12BodyBindingClass, DNSoap12BodyBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapFaultBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{BFC821D6-D1DD-5596-8FEE-1D8A6E7920BD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapFaultBinding" />
    ///  类的实例。
    ///</summary>
    {class} function init: DNSoapFaultBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.FaultBinding" />
  ///  XML Web 服务中。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapFaultBinding')]
  DNSoapFaultBinding = interface(DNServiceDescriptionFormatExtension)
  ['{1E2734B6-40BB-32DE-BC96-B8BFB1A9C203}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定是否使用指定的规则对错误消息进行编码 <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  属性，还是封装在具体的 XML 架构。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值之一。
    ///  默认值为 <see langword="Default" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置 soap 错误和定义为指定的操作的 wsdl 错误相关的 name 属性的值。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 soap 错误和 wsdl 错误相关的 name 属性的对象定义的操作。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置表示未特别定义的内容编码规范的位置的 URI <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  表示 URI 的字符串。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置一个 URI，表示用于编码的 SOAP 错误消息的编码样式。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapFaultBinding = class(TDNGenericImport<DNSoapFaultBindingClass, DNSoapFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12FaultBindingClass = interface(DNSoapFaultBindingClass)
  ['{39F0C6DE-C95F-506C-8E21-14B5317874A1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Soap12FaultBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoap12FaultBinding;

  end;

  ///<summary>
  ///  表示应用于服务说明格式扩展 <see cref="T:System.Web.Services.Description.FaultBinding" />
  ///  当 XML Web 服务支持 SOAP 协议 1.2 版。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Soap12FaultBinding')]
  DNSoap12FaultBinding = interface(DNSoapFaultBinding)
  ['{9738C068-F155-3188-B097-BB9C82C6BAF2}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定是否使用指定的规则对错误消息进行编码 <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  属性，还是封装在具体的 XML 架构。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值之一。
    ///  默认值为 <see langword="Default" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置 soap 错误和定义为指定的操作的 wsdl 错误相关的 name 属性的值。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 soap 错误和 wsdl 错误相关的 name 属性的对象定义的操作。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置表示未特别定义的内容编码规范的位置的 URI <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  表示 URI 的字符串。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置一个 URI，表示用于编码的 SOAP 错误消息的编码样式。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12FaultBinding = class(TDNGenericImport<DNSoap12FaultBindingClass, DNSoap12FaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapHeaderBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{802D010C-F16B-55B7-928C-42F881C997E2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapHeaderBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  XML Web 服务中。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapHeaderBinding')]
  DNSoapHeaderBinding = interface(DNServiceDescriptionFormatExtension)
  ['{9DBF5F11-6B80-3F11-8AA0-2BE02565CC07}']
  { getters & setters } 

    function get_MapToProperty: Boolean;
    procedure set_MapToProperty(value: Boolean);
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Fault: DNSoapHeaderFaultBinding;
    procedure set_Fault(value: DNSoapHeaderFaultBinding);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  实例只能映射到生成的代理类中的特定属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  映射到一个特定的属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property MapToProperty: Boolean read get_MapToProperty write set_MapToProperty;
    ///<summary>
    ///  获取或设置一个值，指定的名称 <see cref="T:System.Web.Services.Description.Message" />
    ///  中的 XML Web 服务 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  适用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  表示名称的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>
    ///  获取或设置一个值，该值与其 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  XML Web 服务中 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  适用。
    ///</summary>
    ///<returns>
    ///  一个表示名称的字符串 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  到 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  适用。
    ///</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>
    ///  指定是否使用指定的规则对标头的编码 <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  属性，还是封装在具体的 XML 架构。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值之一。
    ///  默认值为 <see langword="Default" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置一个 URI，表示用于编码的 SOAP 标头的编码样式。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置表示未特别定义的内容编码规范的位置的 URI <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  表示 URI 的字符串。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置控制在 WSDL 文档的输出的扩展插件类型 <see langword="headerfault" />
    ///  SOAP 标头 XML 元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  表示 SOAP 标头类型用来传输信息的错误。
    ///</returns>
    property Fault: DNSoapHeaderFaultBinding read get_Fault write set_Fault;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapHeaderBinding = class(TDNGenericImport<DNSoapHeaderBindingClass, DNSoapHeaderBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12HeaderBindingClass = interface(DNSoapHeaderBindingClass)
  ['{06CE11DE-4E59-5357-8DCD-6B6ECAC440BD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Soap12HeaderBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoap12HeaderBinding;

  end;

  ///<summary>
  ///  表示应用于服务说明格式扩展 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  当 XML Web 服务支持 SOAP 协议 1.2 版。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Soap12HeaderBinding')]
  DNSoap12HeaderBinding = interface(DNSoapHeaderBinding)
  ['{35707944-017B-30FC-8DC1-9B39698697DD}']
  { getters & setters } 

    function get_MapToProperty: Boolean;
    procedure set_MapToProperty(value: Boolean);
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Fault: DNSoapHeaderFaultBinding;
    procedure set_Fault(value: DNSoapHeaderFaultBinding);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  实例只能映射到生成的代理类中的特定属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  映射到一个特定的属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property MapToProperty: Boolean read get_MapToProperty write set_MapToProperty;
    ///<summary>
    ///  获取或设置一个值，指定的名称 <see cref="T:System.Web.Services.Description.Message" />
    ///  中的 XML Web 服务 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  适用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  表示名称的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>
    ///  获取或设置一个值，该值与其 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  XML Web 服务中 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  适用。
    ///</summary>
    ///<returns>
    ///  一个表示名称的字符串 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  到 <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  适用。
    ///</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>
    ///  指定是否使用指定的规则对标头的编码 <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  属性，还是封装在具体的 XML 架构。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值之一。
    ///  默认值为 <see langword="Default" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置一个 URI，表示用于编码的 SOAP 标头的编码样式。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置表示未特别定义的内容编码规范的位置的 URI <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  表示 URI 的字符串。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置控制在 WSDL 文档的输出的扩展插件类型 <see langword="headerfault" />
    ///  SOAP 标头 XML 元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  表示 SOAP 标头类型用来传输信息的错误。
    ///</returns>
    property Fault: DNSoapHeaderFaultBinding read get_Fault write set_Fault;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12HeaderBinding = class(TDNGenericImport<DNSoap12HeaderBindingClass, DNSoap12HeaderBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapHeaderFaultBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{A464D7F5-A5D4-56E0-BD6A-2CEE787C410E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapHeaderFaultBinding;

  end;

  ///<summary>
  ///  表示一个扩展元素添加到 <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  或 <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  XML Web 服务中。
  ///  它指定类型用于传输的 SOAP 标头中的错误信息的 SOAP 标头。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapHeaderFaultBinding')]
  DNSoapHeaderFaultBinding = interface(DNServiceDescriptionFormatExtension)
  ['{4EB4EC5A-66DB-3309-BAC9-D140CA269A43}']
  { getters & setters } 

    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，指定的名称 <see cref="T:System.Web.Services.Description.Message" />
    ///  中的 XML Web 服务 <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  适用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  表示名称的 <see cref="T:System.Web.Services.Description.Message" />
    ///  。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>
    ///  获取或设置一个值，指示该 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  XML Web 服务中 <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  适用于。
    ///</summary>
    ///<returns>
    ///  名称 <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  到 <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  适用。
    ///</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>
    ///  指定是否使用指定的规则对标头的编码 <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  属性，还是封装在具体的架构。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值之一。
    ///  默认值为 <see langword="Default" />
    ///  。
    ///</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>
    ///  获取或设置一个 URI，表示用于编码的 SOAP 标头的错误消息的编码样式。
    ///</summary>
    ///<returns>
    ///  包含 URI 的字符串。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置一个 URI，表示未特别定义的内容进行编码的规范的位置 <see cref="P:System.Web.Services.Description.SoapHeaderFaultBinding.Encoding" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  返回一个表示 URI 的字符串。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapHeaderFaultBinding = class(TDNGenericImport<DNSoapHeaderFaultBindingClass, DNSoapHeaderFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapOperationBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{03F31EE8-D48C-524B-81A5-D23C193BA96D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.SoapOperationBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapOperationBinding;

  end;

  ///<summary>
  ///  表示一个扩展添加到 <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  XML Web 服务中。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapOperationBinding')]
  DNSoapOperationBinding = interface(DNServiceDescriptionFormatExtension)
  ['{ED7F89ED-9265-3E1F-949C-C7F67A7F585A}']
  { getters & setters } 

    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 SOAP 标头的 URI。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含 SOAP 标头的 URI。
    ///</returns>
    property SoapAction: string read get_SoapAction write set_SoapAction;
    ///<summary>
    ///  获取或设置所使用的 SOAP 绑定的类型 <see cref="T:System.Web.Services.Description.SoapOperationBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  值之一。
    ///  默认值为 <see langword="Document" />
    ///  。
    ///</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  的父级。
    ///</summary>
    ///<returns>
    ///  父级 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  。
    ///</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  对于它所引用的操作是必需。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  是必选的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  由导入过程在导入的扩展性元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  所用的导入过程; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapOperationBinding = class(TDNGenericImport<DNSoapOperationBindingClass, DNSoapOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12OperationBindingClass = interface(DNSoapOperationBindingClass)
  ['{75582412-474B-5B25-8ACB-3710B777D45D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.Soap12OperationBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoap12OperationBinding;

  end;

  ///<summary>
  ///  表示应用于服务说明格式扩展 <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  当 XML Web 服务支持 SOAP 协议 1.2 版。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.Soap12OperationBinding')]
  DNSoap12OperationBinding = interface(DNSoapOperationBinding)
  ['{7C923004-9C40-3F26-8D22-9629686C3FFC}']
  { getters & setters } 

    function get_SoapActionRequired: Boolean;
    procedure set_SoapActionRequired(value: Boolean);
    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否可预见的 XML Web 服务需要 <see langword="SOAPAction" />
    ///  HTTP 标头。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XML Web 服务预计需要 <see langword="SOAPAction" />
    ///  HTTP 标头; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property SoapActionRequired: Boolean read get_SoapActionRequired write set_SoapActionRequired;
    ///<summary>
    ///  获取或设置 SOAP 标头的 URI。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含 SOAP 标头的 URI。
    ///</returns>
    property SoapAction: string read get_SoapAction write set_SoapAction;
    ///<summary>
    ///  获取或设置所使用的 SOAP 绑定的类型 <see cref="T:System.Web.Services.Description.SoapOperationBinding" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  值之一。
    ///  默认值为 <see langword="Document" />
    ///  。
    ///</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12OperationBinding = class(TDNGenericImport<DNSoap12OperationBindingClass, DNSoap12OperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5F0638B-C43D-55EC-B404-EAB91EBAE301}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServiceDescriptionImporter;

  { static methods } 

    ///<summary>
    ///  编译 Web 引用，以生成客户端代理或服务器存根的集合。
    ///</summary>
    ///  <param name="webReferences">
    ///  一个 <see cref="T:System.Web.Services.Description.WebReferenceCollection" />
    ///  的 Web 引用，以便编译。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  指定的代码提供程序。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  ，它指定代码编译到的单元。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  指定代码生成选项。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  的编译器警告。
    ///</returns>
    {class} function GenerateWebReferences(webReferences: DNWebReferenceCollection; codeProvider: DDN.System.DNCodeDomProvider; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNWebReferenceOptions): DDN.System.DNStringCollection;

  end;

  ///<summary>
  ///  公开了一种生成 XML Web 服务的客户端代理类。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImporter')]
  DNServiceDescriptionImporter = interface(DDN.mscorlib.DNObject)
  ['{C6A12A8C-8A97-38EE-9394-9114437AF225}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_Style: DNServiceDescriptionImportStyle;
    procedure set_Style(value: DNServiceDescriptionImportStyle);
    function get_CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions;
    procedure set_CodeGenerationOptions(value: DDN.System.Xml.DNCodeGenerationOptions);
    function get_CodeGenerator: DDN.System.DNCodeDomProvider;
    procedure set_CodeGenerator(value: DDN.System.DNCodeDomProvider);
    function get_ProtocolName: string;
    procedure set_ProtocolName(value: string);

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  到的集合 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  要导入的值。
    ///</summary>
    ///  <param name="serviceDescription"><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  实例以添加到集合
    ///</param>
    ///  <param name="appSettingUrlKey">
    ///  设置初始值 <see langword="Url" />
    ///  属性所表示的实例从生成的代理类 <paramref name="serviceDescription" />
    ///  参数。
    ///  指定它应从 web.config 文件中生成 <see langword="&lt;appsetting&gt;" />
    ///  部分。
    ///</param>
    ///  <param name="appSettingBaseUrl">
    ///  设置初始值 <see langword="Url" />
    ///  属性所表示的实例从生成的代理类 <paramref name="serviceDescription" />
    ///  参数。
    ///  指定应构造的组合，此参数和由指定的 URL 的值的 <see langword="location" />
    ///  WSDL 文档中的属性。
    ///</param>
    procedure AddServiceDescription(serviceDescription: DNServiceDescription; appSettingUrlKey: string; appSettingBaseUrl: string);
    ///<summary>
    ///  导入指定 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  生成代码由指定的值 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  属性。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  到其中的命名空间 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  导入的值。
    ///</param>
    ///  <param name="codeCompileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  中该实例表示的代码 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  生成值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  值，该值描述发生; 任何错误或 0，如果没有发生错误。
    ///</returns>
    function Import(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit): DNServiceDescriptionImportWarnings;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的集合 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  实例要导入。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  实例，它包含 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  实例必定会由导入 <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  实例。
    ///</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  使用 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  对象，其中包含所使用的 XML 架构 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  实例 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  集合。
    ///</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>
    ///  获取或设置一个值，确定代码 （客户端或服务器） 的样式时生成 <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  导入的值。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.ServiceDescriptionImportStyle" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Web.Services.Description.ServiceDescriptionImportStyle.Client" />
    ///  。
    ///</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style write set_Style;
    ///<summary>
    ///  获取或设置用于代码生成的各种选项。
    ///</summary>
    ///<returns>
    ///  成员或成员组合 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  枚举。
    ///</returns>
    property CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions read get_CodeGenerationOptions write set_CodeGenerationOptions;
    ///<summary>
    ///  获取或设置由服务说明导入程序使用的代码生成器。
    ///</summary>
    ///<returns><see cref="T:System.CodeDom.Compiler.ICodeGenerator" />
    ///  服务说明导入程序用于生成代理代码的接口。
    ///</returns>
    property CodeGenerator: DDN.System.DNCodeDomProvider read get_CodeGenerator write set_CodeGenerator;
    ///<summary>
    ///  获取或设置用来访问所述的 XML Web services 的协议。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含要导入的协议的不区分大小写的名称。
    ///</returns>
    property ProtocolName: string read get_ProtocolName write set_ProtocolName;
  end;

  TDNServiceDescriptionImporter = class(TDNGenericImport<DNServiceDescriptionImporterClass, DNServiceDescriptionImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{897BD507-381A-5F27-A6F5-0B755DE48C0A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServiceDescriptionReflector;

  end;

  ///<summary>
  ///  提供了一种托管动态地查看、 创建或调用 XML Web 服务支持的类型。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionReflector')]
  DNServiceDescriptionReflector = interface(DDN.mscorlib.DNObject)
  ['{6DEC1030-B63B-3E06-8D81-0B96ABF1922A}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  包括指定 <see cref="T:System.Type" />
    ///  XML Web 服务在指定的 URL。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  的类或接口，以反映。
    ///</param>
    ///  <param name="url">
    ///  XML Web 服务的地址 (URL)。
    ///</param>
    procedure Reflect(&type: DDN.mscorlib.DNType; url: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取对 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  与 XML Web 服务相关联。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  与 XML Web 服务相关联。
    ///</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>
    ///  获取对 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  与 XML Web 服务相关联。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  集合。
    ///</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
  end;

  TDNServiceDescriptionReflector = class(TDNGenericImport<DNServiceDescriptionReflectorClass, DNServiceDescriptionReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapExtensionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A956D768-0252-5EA5-B926-E99ED73E1194}']
  end;

  ///<summary>
  ///  提供通用的接口和类来生成代码属性，用于指定 SOAP 扩展的功能。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapExtensionImporter')]
  DNSoapExtensionImporter = interface(DDN.mscorlib.DNObject)
  ['{CE806377-A53C-3B54-A005-80076BF6D263}']
  { getters & setters } 

    function get_ImportContext: DNSoapProtocolImporter;
    procedure set_ImportContext(value: DNSoapProtocolImporter);

  { methods } 

    ///<summary>
    ///  当在派生类中重写中代码特性声明添加表示绑定中的操作的任何方法。
    ///</summary>
    ///  <param name="metadata">
    ///  一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
    ///  到 <see cref="M:System.Web.Services.Description.SoapExtensionImporter.ImportMethod(System.CodeDom.CodeAttributeDeclarationCollection)" />
    ///  方法可以放置新 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  实例。
    ///</param>
    procedure ImportMethod(metadata: DDN.System.DNCodeAttributeDeclarationCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  实例时，将调用 <see cref="M:System.Web.Services.Description.SoapExtensionImporter.ImportMethod(System.CodeDom.CodeAttributeDeclarationCollection)" />
    ///  方法。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  实例时，将调用 <see cref="M:System.Web.Services.Description.SoapExtensionImporter.ImportMethod(System.CodeDom.CodeAttributeDeclarationCollection)" />
    ///  方法。
    ///</returns>
    property ImportContext: DNSoapProtocolImporter read get_ImportContext write set_ImportContext;
  end;

  TDNSoapExtensionImporter = class(TDNGenericImport<DNSoapExtensionImporterClass, DNSoapExtensionImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapExtensionReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9734253B-E9D0-587E-B208-CBB057B6A3B2}']
  end;

  ///<summary>
  ///  提供通用的接口和类来添加到 SOAP 扩展信息的功能 <see cref="T:System.Web.Services.Description.ServiceDescription" />
  ///  分别为每个方法的对象。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapExtensionReflector')]
  DNSoapExtensionReflector = interface(DDN.mscorlib.DNObject)
  ['{0AA575E2-082A-3A24-B439-11435D0EA1F8}']
  { getters & setters } 

    function get_ReflectionContext: DNProtocolReflector;
    procedure set_ReflectionContext(value: DNProtocolReflector);

  { methods } 

    ///<summary>
    ///  会生成特定于服务的说明信息放在 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对应于绑定对象。
    ///</summary>
    procedure ReflectDescription;
    ///<summary><see langword="Abstract" />
    ///  为 SOAP 扩展将信息添加到派生的类必须实现的方法 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  分别为每个方法的对象。
    ///</summary>
    procedure ReflectMethod;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置派生自抽象类的实例 <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  类时，将调用 <see cref="M:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  从抽象派生类的实例 <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  类时，将调用 <see cref="M:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod" />
    ///  方法。
    ///</returns>
    property ReflectionContext: DNProtocolReflector read get_ReflectionContext write set_ReflectionContext;
  end;

  TDNSoapExtensionReflector = class(TDNGenericImport<DNSoapExtensionReflectorClass, DNSoapExtensionReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapTransportImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC1347AB-1794-58E2-BB5E-10F1D3AE05B3}']
  end;

  ///<summary>
  ///  作为将 SOAP 传输协议导入到 XML Web services 的派生类的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.SoapTransportImporter')]
  DNSoapTransportImporter = interface(DDN.mscorlib.DNObject)
  ['{710E0CB5-0A54-3A94-990E-12DB08E391C2}']
  { getters & setters } 

    function get_ImportContext: DNSoapProtocolImporter;
    procedure set_ImportContext(value: DNSoapProtocolImporter);

  { methods } 

    ///<summary>
    ///  当在派生类中重写此方法确定该 XML Web 服务是否支持指定的传输协议。
    ///</summary>
    ///  <param name="transport">
    ///  一个 URI，表示传输协议进行检查。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果支持的传输协议;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsSupportedTransport(transport: string): Boolean;
    ///<summary>
    ///  当在派生类中重写此方法使用中所包含信息 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象模型 (可通过 <see cref="P:System.Web.Services.Description.SoapTransportImporter.ImportContext" />
    ///  属性) 将特定于传输的代码添加到所生成的类。
    ///</summary>
    procedure ImportClass;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个引用， <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  执行导入操作。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  执行导入操作。
    ///</returns>
    property ImportContext: DNSoapProtocolImporter read get_ImportContext write set_ImportContext;
  end;

  TDNSoapTransportImporter = class(TDNGenericImport<DNSoapTransportImporterClass, DNSoapTransportImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0EE847A3-B426-5B19-B1DE-7A9FEA958424}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  给定的数据的类。
    ///</summary>
    ///  <param name="documents">
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  指定的说明文档的集合。
    ///</param>
    ///  <param name="proxyCode">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定的命名空间的代码编译。
    ///</param>
    ///  <param name="protocolName">
    ///  使用 XML Web 服务的协议。
    ///</param>
    ///  <param name="appSettingUrlKey">
    ///  Web 引用 URL 项。
    ///</param>
    ///  <param name="appSettingBaseUrl">
    ///  Web 引用的基 URL。
    ///</param>
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace; protocolName: string; appSettingUrlKey: string; appSettingBaseUrl: string): DNWebReference; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  与给定的说明文档集合和代理代码命名空间的类。
    ///</summary>
    ///  <param name="documents">
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  指定的说明文档的集合。
    ///</param>
    ///  <param name="proxyCode">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定的命名空间的代码编译。
    ///</param>
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace): DNWebReference; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  给定的数据的类。
    ///</summary>
    ///  <param name="documents">
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  指定的说明文档的集合。
    ///</param>
    ///  <param name="proxyCode">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定的命名空间的代码编译。
    ///</param>
    ///  <param name="appSettingUrlKey">
    ///  Web 引用 URL 项。
    ///</param>
    ///  <param name="appSettingBaseUrl">
    ///  Web 引用的基 URL。
    ///</param>
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace; appSettingUrlKey: string; appSettingBaseUrl: string): DNWebReference; overload;

  end;

  ///<summary>
  ///  描述对 XML Web services 的集合的引用。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.WebReference')]
  DNWebReference = interface(DDN.mscorlib.DNObject)
  ['{299634D7-C075-335A-9215-BBDCC86D09DA}']
  { getters & setters } 

    function get_AppSettingBaseUrl: string;
    function get_AppSettingUrlKey: string;
    function get_Documents: DNDiscoveryClientDocumentCollection;
    function get_ProxyCode: DDN.System.DNCodeNamespace;
    function get_ValidationWarnings: DDN.System.DNStringCollection;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ProtocolName: string;
    procedure set_ProtocolName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 Web 引用的基 URL。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 Web 引用的基 URL。
    ///</returns>
    property AppSettingBaseUrl: string read get_AppSettingBaseUrl;
    ///<summary>
    ///  获取 web 引用的 URL 参数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 Web 引用的 URL 参数。
    ///</returns>
    property AppSettingUrlKey: string read get_AppSettingUrlKey;
    ///<summary>
    ///  获取与该 Web 引用相关联的说明文档的集合。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  用来初始化 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  实例。
    ///</returns>
    property Documents: DNDiscoveryClientDocumentCollection read get_Documents;
    ///<summary>
    ///  获取与该 Web 引用相关联的代码命名空间。
    ///</summary>
    ///<returns><see cref="T:System.CodeDom.CodeNamespace" />
    ///  的代码将在哪个代理服务器时生成 <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.GenerateWebReferences(System.Web.Services.Description.WebReferenceCollection,System.CodeDom.Compiler.CodeDomProvider,System.CodeDom.CodeCompileUnit,System.Web.Services.Description.WebReferenceOptions)" />
    ///  调用方法。
    ///</returns>
    property ProxyCode: DDN.System.DNCodeNamespace read get_ProxyCode;
    ///<summary>
    ///  获取在验证说明文档时生成警告的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  的验证警告的文本。
    ///</returns>
    property ValidationWarnings: DDN.System.DNStringCollection read get_ValidationWarnings;
    ///<summary>
    ///  获取导入 Web 服务描述语言 (WSDL) 服务说明文档时会生成警告的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  导入 WSDL 服务说明文档时生成警告的集合。
    ///</returns>
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    ///<summary>
    ///  获取或设置与该 Web 引用关联的协议。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 Web 引用与关联的协议的名称。
    ///</returns>
    property ProtocolName: string read get_ProtocolName write set_ProtocolName;
  end;

  TDNWebReference = class(TDNGenericImport<DNWebReferenceClass, DNWebReference>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{399CCCBF-0F38-5841-BFDF-3E3DD860445E}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  的新实例。
    ///</summary>
    {class} function init: DNWebReferenceOptions;

  { static methods } 

    ///<summary>
    ///  返回的新实例 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  基于中指定所述的代码生成选项 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  ，其中包含代码生成选项。
    ///</param>
    ///  <param name="validationEventHandler"><see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  要与新的实例相关联 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  基于中指定所述的代码生成选项 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</returns>
    {class} function Read(reader: DDN.mscorlib.DNTextReader; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;
    ///<summary>
    ///  返回的新实例 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  基于指定的流中所述的代码生成选项。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  ，其中包含代码生成选项。
    ///</param>
    ///  <param name="validationEventHandler"><see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  要与新的实例相关联 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  基于指定的流中所述的代码生成选项。
    ///</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;
    ///<summary>
    ///  返回的新实例 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  基于中指定所述的代码生成选项 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  ，其中包含代码生成选项。
    ///</param>
    ///  <param name="validationEventHandler"><see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  要与新的实例相关联 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  基于中指定所述的代码生成选项 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</returns>
    {class} function Read(xmlReader: DDN.System.Xml.DNXmlReader; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;

  { static propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  关联的 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  关联的 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</returns>
    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
  end;

  ///<summary><see cref="T:System.Web.Services.Description.WebReferenceOptions" />
  ///  类表示一个 XML 文本文件中指定的代码生成选项。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.WebReferenceOptions')]
  DNWebReferenceOptions = interface(DDN.mscorlib.DNObject)
  ['{3302EADB-2127-3F1A-AD04-C5A48295E7C1}']
  { getters & setters } 

    function get_CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions;
    procedure set_CodeGenerationOptions(value: DDN.System.Xml.DNCodeGenerationOptions);
    function get_SchemaImporterExtensions: DDN.System.DNStringCollection;
    function get_Style: DNServiceDescriptionImportStyle;
    procedure set_Style(value: DNServiceDescriptionImportStyle);
    function get_Verbose: Boolean;
    procedure set_Verbose(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  与此相关 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  关联的 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</returns>
    property CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions read get_CodeGenerationOptions write set_CodeGenerationOptions;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  ，它表示与此关联的架构导入程序扩展 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  ，它表示与此关联的架构导入程序扩展 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</returns>
    property SchemaImporterExtensions: DDN.System.DNStringCollection read get_SchemaImporterExtensions;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportStyle" />
    ///  与此相关 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Web.Services.Description.ServiceDescriptionImportStyle" />
    ///  关联的 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style write set_Style;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Boolean" />
    ///  值，该值指示是否在客户端代理或服务器存根的编译过程中生成详细的警告消息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果要在客户端代理或服务器存根; 的编译过程中生成详细的警告消息否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Verbose: Boolean read get_Verbose write set_Verbose;
  end;

  TDNWebReferenceOptions = class(TDNGenericImport<DNWebReferenceOptionsClass, DNWebReferenceOptions>)
  public const
    ///<summary>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含的目标命名空间 <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  。
    ///</summary>
   TargetNamespace = 'http://microsoft.com/webReference/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebServicesInteroperabilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7542D5AC-75B3-50E5-BE65-21CA437D1771}']
  { static methods } 

    ///<summary>
    ///  验证给定的 Web 服务是否符合到给定的 WS-我规范，并提供它所找到的任何冲突的列表。
    ///</summary>
    ///  <param name="claims">
    ///  成员 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  ，该值指示 Web 服务互操作性规范。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  用于描述 Web 服务。
    ///</param>
    ///  <param name="violations">
    ///  一个 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  ，其中包含未找到任何冲突。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 Web 服务描述由 <paramref name="description" />
    ///  符合所指示的 Web 服务互操作性规范 <paramref name="claims" />
    ///  ; 否则为<see langword=" false" />
    ///  。
    ///</returns>
    {class} function CheckConformance(claims: DNWsiProfiles; description: DNServiceDescription; violations: DNBasicProfileViolationCollection): Boolean; overload;
    ///<summary>
    ///  验证给定的 Web 服务是否符合到给定的 WS-我规范，并提供它所找到的任何冲突的列表。
    ///</summary>
    ///  <param name="claims">
    ///  成员 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  ，该值指示 Web 服务互操作性规范。
    ///</param>
    ///  <param name="descriptions">
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  包含 Web 服务说明。
    ///</param>
    ///  <param name="violations">
    ///  一个 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  ，其中包含未找到任何冲突。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 Web 服务说明包含在 <paramref name="descriptions" />
    ///  符合所指示的 Web 服务互操作性规范 <paramref name="claims" />
    ///  ; <see langword="false" />
    ///  否则为。
    ///</returns>
    {class} function CheckConformance(claims: DNWsiProfiles; descriptions: DNServiceDescriptionCollection; violations: DNBasicProfileViolationCollection): Boolean; overload;
    ///<summary>
    ///  验证给定的 Web 服务是否符合到给定的 WS-我规范，并提供它所找到的任何冲突的列表。
    ///</summary>
    ///  <param name="claims">
    ///  成员 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  ，该值指示 Web 服务互操作性规范。
    ///</param>
    ///  <param name="webReference">
    ///  一个 <see cref="T:System.Web.Services.Description.WebReference" />
    ///  用于描述 Web 服务。
    ///</param>
    ///  <param name="violations">
    ///  一个 <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  ，其中包含未找到任何冲突。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 Web 服务描述由 <paramref name="webReference" />
    ///  符合所指示的 Web 服务互操作性规范 <paramref name="claims" />
    ///  ; <see langword="false" />
    ///  否则为。
    ///</returns>
    {class} function CheckConformance(claims: DNWsiProfiles; webReference: DNWebReference; violations: DNBasicProfileViolationCollection): Boolean; overload;

  end;

  ///<summary><see cref="T:System.Web.Services.Description.WebServicesInteroperability" />
  ///  类提供方法以验证给定的 Web 服务是否符合到给定 Web 服务互操作性 (WS-我) 组织规范。
  ///</summary>
  [DNTypeName('System.Web.Services.Description.WebServicesInteroperability')]
  DNWebServicesInteroperability = interface(DDN.mscorlib.DNObject)
  ['{46564511-E6C3-3536-AE9E-DDE549E3BB7C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebServicesInteroperability = class(TDNGenericImport<DNWebServicesInteroperabilityClass, DNWebServicesInteroperability>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientProtocol_DiscoveryClientResultsFileClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66F1E0DA-F05A-5FDC-8769-6611A9F05BBF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoveryClientResultsFile" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryClientProtocol_DiscoveryClientResultsFile;

  end;

  ///<summary>
  ///  表示包含的所有文件时写入结果的 XML 文档的根元素 <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.WriteAll(System.String,System.String)" />
  ///  调用方法。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile')]
  DNDiscoveryClientProtocol_DiscoveryClientResultsFile = interface(DDN.mscorlib.DNObject)
  ['{D5F055DF-ADA6-3386-A4E5-5482E48FB580}']
  { getters & setters } 

    function get_Results: DNDiscoveryClientResultCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  对象的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  包含来自结果 <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.ReadAll(System.String)" />
    ///  或 <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.WriteAll(System.String,System.String)" />
    ///  调用。
    ///</returns>
    property Results: DNDiscoveryClientResultCollection read get_Results;
  end;

  TDNDiscoveryClientProtocol_DiscoveryClientResultsFile = class(TDNGenericImport<DNDiscoveryClientProtocol_DiscoveryClientResultsFileClass, DNDiscoveryClientProtocol_DiscoveryClientResultsFile>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43FB6836-EF92-5E30-B4EE-D8DC704585A1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryClientResult; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  类并设置 <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.ReferenceTypeName" />
    ///  属性设置为 <paramref name="referenceType" />
    ///  , 、 <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Url" />
    ///  属性设置为 <paramref name="url" />
    ///  和 <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Filename" />
    ///  属性设置为 <paramref name="filename" />
    ///  。
    ///</summary>
    ///  <param name="referenceType">
    ///  表示在发现文档中引用的类型的类的名称。
    ///  设置 <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.ReferenceTypeName" />
    ///  属性。
    ///</param>
    ///  <param name="url">
    ///  引用的 URL。
    ///  设置 <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Url" />
    ///  属性。
    ///</param>
    ///  <param name="filename">
    ///  将引用保存的文件的名称。
    ///  设置 <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Filename" />
    ///  属性。
    ///</param>
    {class} function init(referenceType: DDN.mscorlib.DNType; url: string; filename: string): DNDiscoveryClientResult; overload;

  end;

  ///<summary>
  ///  表示发现引用不包含任何所引用的文档的内容的详细信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientResult')]
  DNDiscoveryClientResult = interface(DDN.mscorlib.DNObject)
  ['{41F364AF-DC21-3011-B955-3E3AD937E270}']
  { getters & setters } 

    function get_ReferenceTypeName: string;
    procedure set_ReferenceTypeName(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Filename: string;
    procedure set_Filename(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  表示在发现文档中引用的类型的类的名称。
    ///</summary>
    ///<returns>
    ///  表示的引用类型的类的名称。
    ///  默认值是 <see langword="null" />
    ///  。
    ///</returns>
    property ReferenceTypeName: string read get_ReferenceTypeName write set_ReferenceTypeName;
    ///<summary>
    ///  获取或设置引用的 URL。
    ///</summary>
    ///<returns>
    ///  引用的 URL。
    ///</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>
    ///  获取或设置在其中保存该引用的文件的名称。
    ///</summary>
    ///<returns>
    ///  在其中保存该引用的文件的名称。
    ///</returns>
    property Filename: string read get_Filename write set_Filename;
  end;

  TDNDiscoveryClientResult = class(TDNGenericImport<DNDiscoveryClientResultClass, DNDiscoveryClientResult>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E737A20B-28A2-5BEE-905F-E00D5EF072C9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryDocument;

  { static methods } 

    ///<summary>
    ///  读取并返回 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  从传递 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  从中进行读取 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  包含从传递一个发现文档内容 <see cref="T:System.IO.Stream" />
    ///  。
    ///</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream): DNDiscoveryDocument; overload;
    ///<summary>
    ///  读取并返回 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  从传递 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  从中进行读取 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  包含从传递一个发现文档内容 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</returns>
    {class} function Read(reader: DDN.mscorlib.DNTextReader): DNDiscoveryDocument; overload;
    ///<summary>
    ///  读取并返回 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  从传递 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  从中进行读取 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  包含从传递一个发现文档内容 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</returns>
    {class} function Read(xmlReader: DDN.System.Xml.DNXmlReader): DNDiscoveryDocument; overload;
    ///<summary>
    ///  返回一个值，该值指示是否已传递的 <see cref="T:System.Xml.XmlReader" />
    ///  可以反序列化为 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  被测试是否可以反序列化为 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  可以反序列化为 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function CanRead(xmlReader: DDN.System.Xml.DNXmlReader): Boolean;

  end;

  ///<summary>
  ///  表示一个发现文档。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocument')]
  DNDiscoveryDocument = interface(DDN.mscorlib.DNObject)
  ['{5E28BEB4-6A98-3974-985D-E5B6F6D9E558}']
  { getters & setters } 

    function get_References: DDN.mscorlib.DNIList;

  { methods } 

    ///<summary>
    ///  将此 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  到传递 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  到此 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  写入。
    ///</param>
    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  到传递 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  到此 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  写入。
    ///</param>
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  到传递 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  到此 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  写入。
    ///</param>
    procedure Write(writer: DDN.System.Xml.DNXmlWriter); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  发现文档中包含的引用的列表。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IList" />
    ///  包含发现文档中的引用。
    ///</returns>
    property References: DDN.mscorlib.DNIList read get_References;
  end;

  TDNDiscoveryDocument = class(TDNGenericImport<DNDiscoveryDocumentClass, DNDiscoveryDocument>)
  public const
    ///<summary>
    ///  一个发现文档的发现 XML 元素 Namespace。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B3F2E33F-FDEB-5DA2-9205-394B5801F725}']
  { static methods } 

    ///<summary>
    ///  返回基于传递的 URL 的文件名称。
    ///</summary>
    ///  <param name="url">
    ///  基于文件的名称的 URL。
    ///</param>
    ///<returns>
    ///  基于传递的 URL 的文件的名称。
    ///</returns>
    {class} function FilenameFromUrl(url: string): string;

  end;

  ///<summary>
  ///  使用 XML Web 服务发现可发现的引用的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryReference')]
  DNDiscoveryReference = interface(DDN.mscorlib.DNObject)
  ['{90F3DA69-A16C-38AD-94EE-F23F3B9C73C5}']
  { getters & setters } 

    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);
    function get_DefaultFilename: string;
    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    ///<summary>
    ///  下载在引用的文档 <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  来解析引用的文档是否有效。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Resolve;
    ///<summary>
    ///  当在派生类中重写时写入到的文档 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="document">
    ///  要写入到的文档 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  到 <paramref name="document" />
    ///  写入。
    ///</param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  读取传递 <see cref="T:System.IO.Stream" />
    ///  ，并返回表示引用的文档的类型的类的实例。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  包含引用的文档。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  具有基础类型匹配的引用的文档类型。
    ///</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用
    ///</returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
    ///<summary>
    ///  获取默认的文件以保存引用的发现文档、 XSD 架构中或服务说明时使用的名称。
    ///</summary>
    ///<returns>
    ///  保存引用的文档时要使用的默认文件的名称。
    ///</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>
    ///  获取或设置所引用的文档的 URL。
    ///</summary>
    ///<returns>
    ///  所引用的文档的 URL。
    ///</returns>
    property Url: string read get_Url write set_Url;
  end;

  TDNDiscoveryReference = class(TDNGenericImport<DNDiscoveryReferenceClass, DNDiscoveryReference>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNContractReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{77770136-A368-5ECC-A2DF-55A7AAC0B018}']
  { constructors } 

    ///<summary>
    ///  使用默认值初始化 <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNContractReference; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  类使用提供的对服务说明的引用。
    ///</summary>
    ///  <param name="href">
    ///  服务说明的 URL。
    ///  初始化 <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  属性值。
    ///</param>
    {class} function init(href: string): DNContractReference; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  类使用对服务说明和实现服务说明的 XML Web 服务提供的引用。
    ///</summary>
    ///  <param name="href">
    ///  服务说明的 URL。
    ///  初始化 <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  属性值。
    ///</param>
    ///  <param name="docRef">
    ///  实现在服务说明的 XML Web 服务 URL <paramref name="href" />
    ///  。
    ///  初始化 <see cref="P:System.Web.Services.Discovery.ContractReference.DocRef" />
    ///  属性值。
    ///</param>
    {class} function init(href: string; docRef: string): DNContractReference; overload;

  end;

  ///<summary>
  ///  表示对服务说明中发现文档的引用。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.ContractReference')]
  DNContractReference = interface(DNDiscoveryReference)
  ['{01089313-9BB8-3EDD-9D52-944D2FBC10BA}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_DocRef: string;
    procedure set_DocRef(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Contract: DNServiceDescription;
    function get_DefaultFilename: string;
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    ///<summary>
    ///  将传入的服务说明写入到传入的 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="document"><see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  以便写入 <paramref name="stream" />
    ///  。
    ///</param>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  到其中的序列化 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  写入。
    ///</param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  读取从传递的服务说明 <see cref="T:System.IO.Stream" />
    ///  并返回服务说明。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  包含服务说明。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  包含引用的服务说明的内容。
    ///</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>
    ///  下载在引用的文档 <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  来解析引用的文档是否有效。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置引用的服务说明的 URL。
    ///</summary>
    ///<returns>
    ///  指向引用的服务说明的 URL。
    ///</returns>
    property Ref: string read get_Ref write set_Ref;
    ///<summary>
    ///  获取和设置为实现服务说明中引用的 XML Web 服务 URL <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  实现服务说明中引用的 XML Web 服务 URL <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  属性。
    ///</returns>
    property DocRef: string read get_DocRef write set_DocRef;
    ///<summary>
    ///  获取或设置引用的服务说明的 URL。
    ///</summary>
    ///<returns>
    ///  引用的服务说明的 URL。
    ///</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象，表示服务说明。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  对象，表示服务说明。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Exception"><see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  属性 <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  不包含 url 为一个发现文档 <see cref="P:System.Web.Services.Discovery.ContractReference.Url" />
    ///  。
    ///</exception>
    property Contract: DNServiceDescription read get_Contract;
    ///<summary>
    ///  获取要在保存引用的服务说明时，默认情况下使用的文件的名称。
    ///</summary>
    ///<returns>
    ///  在保存到文件中引用的服务说明时要使用的默认文件的名称。
    ///</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>
    ///  获取或设置的实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用
    ///</returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNContractReference = class(TDNGenericImport<DNContractReferenceClass, DNContractReference>)
  public const
    ///<summary>
    ///  在发现文档中的服务说明引用的 XML 命名空间。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/scl/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{6042B283-1FA3-5850-9326-F7BBC3ECE3DC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryDocumentReference; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  类设置 <see cref="P:System.Web.Services.Discovery.DiscoveryDocumentReference.Ref" />
    ///  属性的值 <paramref name="href" />
    ///  。
    ///</summary>
    ///  <param name="href">
    ///  指向发现文档的引用。
    ///<see cref="P:System.Web.Services.Discovery.DiscoveryDocumentReference.Ref" />
    ///  属性设置为的值 <paramref name="href" />
    ///  。
    ///</param>
    {class} function init(href: string): DNDiscoveryDocumentReference; overload;

  end;

  ///<summary>
  ///  表示对发现文档的引用。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentReference')]
  DNDiscoveryDocumentReference = interface(DNDiscoveryReference)
  ['{523E0D39-B0E1-3EBF-A2AE-40352826C739}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_DefaultFilename: string;
    function get_Document: DNDiscoveryDocument;
    function get_Url: string;
    procedure set_Url(value: string);
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    ///<summary>
    ///  验证发现文档中的所有引用的文档有效。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  无法下载并成功地验证了发现文档。
    ///</exception>
    procedure ResolveAll;
    ///<summary>
    ///  写入已传递的 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  到传递 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="document"><see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  以便写入 <paramref name="stream" />
    ///  。
    ///</param>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  序列化的发现文档写入其中。
    ///</param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  读取并返回发现文档从传递 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  包含发现文档。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  包含引用的发现文档的内容。
    ///</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>
    ///  下载在引用的文档 <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  来解析引用的文档是否有效。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置对发现文档的引用。
    ///</summary>
    ///<returns>
    ///  指向发现文档的引用。
    ///</returns>
    property Ref: string read get_Ref write set_Ref;
    ///<summary>
    ///  获取默认的文件以保存引用的发现文档时使用的名称。
    ///</summary>
    ///<returns>
    ///  在保存到文件中引用的文档时要使用的默认文件的名称。
    ///</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>
    ///  获取作为引用的发现文档的内容 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  表示引用的发现文档的内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性是 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  在下载或 XSD 架构使用的解析期间出错 <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  。
    ///</exception>
    property Document: DNDiscoveryDocument read get_Document;
    ///<summary>
    ///  获取或设置引用的发现文档的 URL。
    ///</summary>
    ///<returns>
    ///  引用的发现文档的 URL。
    ///</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>
    ///  获取或设置的实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用
    ///</returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNDiscoveryDocumentReference = class(TDNGenericImport<DNDiscoveryDocumentReferenceClass, DNDiscoveryDocumentReference>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNSchemaReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{6CC92EDB-83B4-57FC-A5C3-1EE08168601E}']
  { constructors } 

    ///<summary>
    ///  使用默认值初始化 <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSchemaReference; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  类与 XSD 架构引用一样使用提供的 URL。
    ///</summary>
    ///  <param name="url">
    ///  XSD 架构的 URL。
    ///  初始化 <see cref="P:System.Web.Services.Discovery.SchemaReference.Ref" />
    ///  属性。
    ///</param>
    {class} function init(url: string): DNSchemaReference; overload;

  end;

  ///<summary>
  ///  表示 XML 架构定义 (XSD) 语言架构中发现文档的引用。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.SchemaReference')]
  DNSchemaReference = interface(DNDiscoveryReference)
  ['{F0C3D543-85B7-3A1A-9038-D146C8FA9B05}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_DefaultFilename: string;
    function get_Schema: DDN.System.Xml.DNXmlSchema;
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    ///<summary>
    ///  传递的 XSD 架构写入传递 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="document"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  以便写入 <paramref name="stream" />
    ///  。
    ///</param>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  序列化的 XSD 架构写入其中。
    ///</param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  读取并返回 XSD 架构从传递 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  包含的 XSD 架构。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  包含内容的引用的 XSD 架构。
    ///</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>
    ///  下载在引用的文档 <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  来解析引用的文档是否有效。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置引用的 XSD 架构的 URL。
    ///</summary>
    ///<returns>
    ///  所引用的 XSD 架构 URL。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Ref: string read get_Ref write set_Ref;
    ///<summary>
    ///  获取或设置 <see langword="targetNamespace" />
    ///  XSD 架构的 XML 特性。
    ///</summary>
    ///<returns><see langword="targetNamespace" />
    ///  XSD 架构的 XML 特性。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    ///<summary>
    ///  获取或设置架构引用的 URL。
    ///</summary>
    ///<returns>
    ///  所引用的 XSD 架构 URL。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>
    ///  获取默认的文件以保存引用的 XSD 架构时使用的名称。
    ///</summary>
    ///<returns>
    ///  默认在引用的 XSD 架构保存到文件时要使用的名称。
    ///</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示 XSD 架构的对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示 XSD 架构的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  属性是 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  在下载或 XSD 架构使用的解析期间出错 <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  。
    ///</exception>
    property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
    ///<summary>
    ///  获取或设置的实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  发现进程中使用
    ///</returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNSchemaReference = class(TDNGenericImport<DNSchemaReferenceClass, DNSchemaReference>)
  public const
    ///<summary>
    ///  对于在发现文档中的 XSD 架构引用的 XML 命名空间。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/schema/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryRequestHandlerClass = interface(DNObjectClass)
  ['{71B31E13-D4AA-5537-B179-EEB4788B6F34}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryRequestHandler" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryRequestHandler;

  end;

  ///<summary>
  ///  ASP.NET HTTP 处理程序处理请求的 Web 服务发现文档。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryRequestHandler')]
  DNDiscoveryRequestHandler = interface(DDN.System.Web.DNIHttpHandler)
  ['{E474F4B4-3CE1-308C-9A95-9BC212EA19E6}']
  { getters & setters } 

    function get_IsReusable: Boolean;

  { methods } 

    ///<summary>
    ///  处理对发现文档中，这会序列化为 HTTP 响应的 HTTP 请求。
    ///</summary>
    ///  <param name="context"><see cref="P:System.Web.HttpContext.Request" />
    ///  和 <see cref="P:System.Web.HttpContext.Response" />
    ///  属性 <see cref="T:System.Web.HttpContext" />
    ///  进行输入和输出，分别使用类。
    ///</param>
    procedure ProcessRequest(context: DDN.System.Web.DNHttpContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值的 <see langword="true" />
    ///  , ，该值指示是否实例 <see cref="T:System.Web.Services.Discovery.DiscoveryRequestHandler" />
    ///  （或派生的类） 是可重复使用。
    ///</summary>
    ///<returns>
    ///  此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReusable: Boolean read get_IsReusable;
  end;

  TDNDiscoveryRequestHandler = class(TDNGenericImport<DNDiscoveryRequestHandlerClass, DNDiscoveryRequestHandler>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoverySearchPatternClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70FFB100-4E57-5FD6-BF9C-F82A76B44867}']
  end;

  ///<summary>
  ///  建立可检测到的文件类型的文件扩展名搜索模式的接口。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoverySearchPattern')]
  DNDiscoverySearchPattern = interface(DDN.mscorlib.DNObject)
  ['{E8EBF995-6092-3F91-AEF1-C9664C65E01D}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>
    ///  当在派生类中重写返回 <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  对象给定的文件名。
    ///</summary>
    ///  <param name="filename">
    ///  发现文件或动态生成的发现文档中出现的文件的名称。
    ///  例如，一个.asmx 文件或.xsd 文件。
    ///</param>
    ///<returns>
    ///  文件的名称。
    ///</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用作搜索目标的文件名模式。
    ///</summary>
    ///<returns>
    ///  文件名模式。
    ///</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNDiscoverySearchPattern = class(TDNGenericImport<DNDiscoverySearchPatternClass, DNDiscoverySearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNContractSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{EC1B7EEF-0008-5EF0-A235-B4E64C48C379}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.ContractSearchPattern" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNContractSearchPattern;

  end;

  ///<summary>
  ///  获取文件位置和说明的 ASP.NET Web 服务。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.ContractSearchPattern')]
  DNContractSearchPattern = interface(DNDiscoverySearchPattern)
  ['{EF0788F1-EDE3-3193-9ABD-5E686D2DEE1D}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  指定的.asmx 文件的对象。
    ///</summary>
    ///  <param name="filename">
    ///  Web 服务的.asmx 文件的文件系统路径。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  替换为它的.asmx 文件指定的文件名称的对象。
    ///</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用作搜索目标的文件名模式。
    ///</summary>
    ///<returns>
    ///  文字字符串"*.asmx"。
    ///</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNContractSearchPattern = class(TDNGenericImport<DNContractSearchPatternClass, DNContractSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentLinksPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{D8AFA33F-7606-5F28-AF86-B583BFF034B6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentLinksPattern" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryDocumentLinksPattern;

  end;

  ///<summary>
  ///  获取用于填充另一个 Web 服务发现文档的 Web 服务发现文档的文件位置。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentLinksPattern')]
  DNDiscoveryDocumentLinksPattern = interface(DNDiscoverySearchPattern)
  ['{A00BEED2-2CFB-3BA8-B2C8-9D5501154CB8}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  给定的发现文档的对象。
    ///</summary>
    ///  <param name="filename">
    ///  发现文档的文件系统路径。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  对象，它指定.vsdisco 文件的位置。
    ///</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用作搜索目标的文件名模式。
    ///</summary>
    ///<returns>
    ///  文字字符串"*.disco"。
    ///</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNDiscoveryDocumentLinksPattern = class(TDNGenericImport<DNDiscoveryDocumentLinksPatternClass, DNDiscoveryDocumentLinksPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{4E2C0BCB-5130-576C-A20B-2D6E10CAB147}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentSearchPattern" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscoveryDocumentSearchPattern;

  end;

  ///<summary>
  ///  获取用于填充另一个 Web 服务发现文档的 Web 服务发现文档的文件位置。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentSearchPattern')]
  DNDiscoveryDocumentSearchPattern = interface(DNDiscoverySearchPattern)
  ['{7586A445-02FC-33C5-B321-EABD06695DFE}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  给定的发现文档的对象。
    ///</summary>
    ///  <param name="filename">
    ///  发现文档的文件系统路径。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  对象，它指定.vsdisco 文件的位置。
    ///</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用作搜索目标的文件名模式。
    ///</summary>
    ///<returns>
    ///  文字字符串"*.vsdisco"。
    ///</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNDiscoveryDocumentSearchPattern = class(TDNGenericImport<DNDiscoveryDocumentSearchPatternClass, DNDiscoveryDocumentSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNXmlSchemaSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{0B5F096A-CE67-59D4-991A-B938639C52BE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.XmlSchemaSearchPattern" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSearchPattern;

  end;

  ///<summary>
  ///  获取用于填充 Web 服务发现文档的 XML 架构文档的文件位置。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.XmlSchemaSearchPattern')]
  DNXmlSchemaSearchPattern = interface(DNDiscoverySearchPattern)
  ['{2CBB8153-9935-31B8-8045-769B8BAE1966}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  给定的发现文档的对象。
    ///</summary>
    ///  <param name="filename">
    ///  XML 架构文档的文件系统路径。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  对象，它指定 XML 架构文档的文件名。
    ///</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用作搜索目标的文件名模式。
    ///</summary>
    ///<returns>
    ///  文字字符串"*.xsd"。
    ///</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNXmlSchemaSearchPattern = class(TDNGenericImport<DNXmlSchemaSearchPatternClass, DNXmlSchemaSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDynamicDiscoveryDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4755B04-9186-5755-AFB0-2BA15BDA53C8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDynamicDiscoveryDocument;

  { static methods } 

    ///<summary>
    ///  反序列化将 XML 文档读入 <see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  实例。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  对象从其反序列化 XML 动态发现文档。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  已加载的。
    ///</returns>
    {class} function Load(stream: DDN.mscorlib.DNStream): DNDynamicDiscoveryDocument;

  end;

  ///<summary>
  ///  表示指定的文件系统目录路径不应该被搜索要添加到 Web 服务发现文档的引用列表的 XML 文档。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.DynamicDiscoveryDocument')]
  DNDynamicDiscoveryDocument = interface(DDN.mscorlib.DNObject)
  ['{B19F428A-459D-37F9-8377-FC1E8420AC93}']
  { getters & setters } 

    function get_ExcludePaths: TArray<DNExcludePathInfo>;
    procedure set_ExcludePaths(value: TArray<DNExcludePathInfo>);

  { methods } 

    ///<summary>
    ///  将序列化为 <see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  插入 XML 文档中指定为输出流的实例。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  XML 动态发现文档序列化到对象。
    ///</param>
    procedure Write(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置应不会搜索要添加到发现文档的引用的文件系统目录路径。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Discovery.ExcludePathInfo" />
    ///  对象数组。
    ///</returns>
    property ExcludePaths: TArray<DNExcludePathInfo> read get_ExcludePaths write set_ExcludePaths;
  end;

  TDNDynamicDiscoveryDocument = class(TDNGenericImport<DNDynamicDiscoveryDocumentClass, DNDynamicDiscoveryDocument>)
  public const
    ///<summary>
    ///  包含动态发现文档命名空间"urn︰ 架构-dynamicdiscovery:disco.2000-03-17"。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'urn:schemas-dynamicdiscovery:disco.2000-03-17';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNExcludePathInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC419DBB-B529-5BF6-A5FD-7B9DF06C9706}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.ExcludePathInfo" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNExcludePathInfo; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Discovery.ExcludePathInfo" />
    ///  类，并指定要从搜索中排除的文件系统路径。
    ///</summary>
    ///  <param name="path">
    ///  要从搜索中排除的路径。
    ///</param>
    {class} function init(path: string): DNExcludePathInfo; overload;

  end;

  ///<summary>
  ///  表示文件系统目录路径不应该被搜索要添加到 Web 服务发现文档的引用。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.ExcludePathInfo')]
  DNExcludePathInfo = interface(DDN.mscorlib.DNObject)
  ['{885281C6-1D9E-3CFE-8AC4-5F4BCE453653}']
  { getters & setters } 

    function get_Path: string;
    procedure set_Path(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置应不会搜索要添加到发现文档的引用的文件系统目录路径。
    ///</summary>
    ///<returns>
    ///  应从搜索中排除的文件系统目录路径。
    ///</returns>
    property Path: string read get_Path write set_Path;
  end;

  TDNExcludePathInfo = class(TDNGenericImport<DNExcludePathInfoClass, DNExcludePathInfo>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscovery_SoapBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{23A56EDF-D428-54C2-9C3A-AD60B2D2E6CD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Discovery.SoapBinding" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDiscovery_SoapBinding;

  end;

  ///<summary>
  ///  表示在发现文档中的 SOAP 绑定。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Discovery.SoapBinding')]
  DNDiscovery_SoapBinding = interface(DDN.mscorlib.DNObject)
  ['{24E235B1-486C-319F-BA46-5CE77DDE6828}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_Binding: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Binding(value: DDN.System.Xml.DNXmlQualifiedName);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置执行 SOAP 绑定的 XML Web 服务的 URL。
    ///</summary>
    ///<returns>
    ///  实现 SOAP 绑定的 XML Web 服务 URL。
    ///  默认值为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Address: string read get_Address write set_Address;
    ///<summary>
    ///  获取或设置由 XML Web 服务实现的 SOAP 绑定的 XML 限定的名。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  SOAP 绑定 XML Web 服务实现的。
    ///</returns>
    property Binding: DDN.System.Xml.DNXmlQualifiedName read get_Binding write set_Binding;
  end;

  TDNDiscovery_SoapBinding = class(TDNGenericImport<DNDiscovery_SoapBindingClass, DNDiscovery_SoapBinding>)
  public const
    ///<summary>
    ///  指定在发现文档中 SOAP 绑定的元素的 XML 命名空间。
    ///</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/soap/';
  end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNLogicalMethodInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6697680C-9086-5CEE-8A60-A481DEE3F45C}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  类 <see cref="T:System.Reflection.MethodInfo" />
    ///  中传递。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Reflection.MethodInfo" />
    ///  要初始化的属性 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  共有 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Reflection.MethodBase.IsStatic" />
    ///  属性 <paramref name="methodInfo" />
    ///  参数是 <see langword="true" />
    ///  。
    ///  - 或 -
    ///<see cref="M:System.Reflection.MethodBase.GetParameters" />
    ///  方法 <paramref name="methodInfo" />
    ///  参数不包含所有所需的实例所表示的方法的参数 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</exception>
    {class} function init(methodInfo: DDN.mscorlib.DNMethodInfo): DNLogicalMethodInfo;

  { static methods } 

    ///<summary>
    ///  给定数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  可以包含有关异步和同步方法的信息，请创建一个数组 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///  <param name="methodInfos">
    ///  一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  表示要为其创建的异步和同步方法 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  , ，表示的方法内 <paramref name="methodInfos" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  一个 <see langword="Begin" />
    ///  异步方法包含在 <paramref name="methodInfos" />
    ///  没有相应 <see langword="End" />
    ///  方法。
    ///</exception>
    {class} function Create(methodInfos: TArray<DDN.mscorlib.DNMethodInfo>): TArray<DNLogicalMethodInfo>; overload;
    ///<summary>
    ///  给定数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  , ，其中的返回的数组 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  可能会局限于仅异步或同步方法，创建一个数组 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///  <param name="methodInfos">
    ///  一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  表示要为其创建的异步和同步方法 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  对象。
    ///</param>
    ///  <param name="types"><see cref="T:System.Web.Services.Protocols.LogicalMethodTypes" />
    ///  值的按位组合。
    ///  确定是否在返回数组中包含和 / 或只是异步或同步方法 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  , ，表示的方法内 <paramref name="methodInfos" />
    ///  , 的、 经过筛选的值 <paramref name="types" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  一个 <see langword="Begin" />
    ///  异步方法包含在 <paramref name="methodInfos" />
    ///  没有相应 <see langword="End" />
    ///  方法。
    ///</exception>
    {class} function Create(methodInfos: TArray<DDN.mscorlib.DNMethodInfo>; types: DNLogicalMethodTypes): TArray<DNLogicalMethodInfo>; overload;
    ///<summary>
    ///  返回一个值，该值指示传入的方法是否表示 <see langword="Begin" />
    ///  异步调用的方法。
    ///</summary>
    ///  <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo" />
    ///  这可能是 <see langword="Begin" />
    ///  异步调用的方法。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="methodInfo" />
    ///  参数是 <see langword="Begin" />
    ///  异步调用的方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsBeginMethod(methodInfo: DDN.mscorlib.DNMethodInfo): Boolean;
    ///<summary>
    ///  返回一个值，该值指示传入的方法是否表示 <see langword="End" />
    ///  异步调用的方法。
    ///</summary>
    ///  <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo" />
    ///  这可能是 <see langword="End" />
    ///  异步调用的方法。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="methodInfo" />
    ///  参数是 <see langword="End" />
    ///  异步调用的方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsEndMethod(methodInfo: DDN.mscorlib.DNMethodInfo): Boolean;

  end;

  ///<summary>
  ///  表示属性和 XML Web 服务方法的元数据。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.LogicalMethodInfo')]
  DNLogicalMethodInfo = interface(DDN.mscorlib.DNObject)
  ['{4DA24A3C-2F47-3D15-B269-2E8CF4194796}']
  { getters & setters } 

    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_AsyncResultParameter: DDN.mscorlib.DNParameterInfo;
    function get_AsyncCallbackParameter: DDN.mscorlib.DNParameterInfo;
    function get_AsyncStateParameter: DDN.mscorlib.DNParameterInfo;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_IsVoid: Boolean;
    function get_IsAsync: Boolean;
    function get_InParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_OutParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_Parameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_CustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnTypeCustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider;
    function get_MethodInfo: DDN.mscorlib.DNMethodInfo;
    function get_BeginMethodInfo: DDN.mscorlib.DNMethodInfo;
    function get_EndMethodInfo: DDN.mscorlib.DNMethodInfo;

  { methods } 

    ///<summary>
    ///  返回表示当前 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  的字符串。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  如果任何自定义特性应用于该类型，则返回第一个自定义特性应用于该类型。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  对其应用自定义属性。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  包含第一个自定义特性应用于 <paramref name="type" />
    ///  参数。
    ///</returns>
    ///<exception cref="T:System.TypeLoadException">
    ///  无法加载自定义特性类型。
    ///</exception>
    function GetCustomAttribute(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  表示由当前的方法时，调用 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///  <param name="target">
    ///  实例 <see cref="T:System.Object" />
    ///  来调用的方法。
    ///</param>
    ///  <param name="values">
    ///  调用的方法参数列表。
    ///  这是具有相同的个数、 顺序和类型的对象的数组作为方法的参数。
    ///  如果该方法不需要任何参数， <paramref name="values" />
    ///  参数应为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  类型的数组 <see cref="T:System.Object" />
    ///  表示的返回值和 out 参数调用的方法。
    ///</returns>
    ///<exception cref="T:System.Reflection.TargetException"><paramref name="target" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  数量、 类型和中的参数顺序 <paramref name="values" />
    ///  参数与调用的方法的签名不匹配。
    ///</exception><exception cref="T:System.MemberAccessException">
    ///  调用方没有权限来调用的方法。
    ///</exception><exception cref="T:System.Reflection.TargetInvocationException">
    ///  调用的方法引发异常。
    ///</exception>
    function Invoke(target: DDN.mscorlib.DNObject; values: TArray<DDN.mscorlib.DNObject>): TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  开始由此所表示的方法的异步调用 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///  <param name="target">
    ///  实例 <see cref="T:System.Object" />
    ///  对其上调用该方法。
    ///</param>
    ///  <param name="values">
    ///  调用的方法参数列表。
    ///  这是具有相同的个数、 顺序和类型的对象的数组作为方法的参数。
    ///  如果该方法不需要任何参数， <paramref name="values" />
    ///  应 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="callback">
    ///  要异步调用完成时调用的委托。
    ///  如果 <paramref name="callback" />
    ///  是 <see langword="null" />
    ///  , ，不会调用的委托。
    ///</param>
    ///  <param name="asyncState">
    ///  传递给委托的状态信息。
    ///</param>
    ///<returns><see cref="T:System.IAsyncResult" />
    ///  后者传递给 <see cref="M:System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)" />
    ///  以从远程方法调用获取返回值。
    ///</returns>
    ///<exception cref="T:System.Reflection.TargetException"><paramref name="target" />
    ///  参数 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  数量、 类型和中的参数顺序 <paramref name="values" />
    ///  与调用的方法的签名不匹配。
    ///</exception><exception cref="T:System.MemberAccessException">
    ///  调用方没有权限来调用的方法。
    ///</exception>
    function BeginInvoke(target: DDN.mscorlib.DNObject; values: TArray<DDN.mscorlib.DNObject>; callback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束当前所表示的方法的异步调用 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///  <param name="target">
    ///  实例 <see cref="T:System.Object" />
    ///  在其上调用该方法。
    ///</param>
    ///  <param name="asyncResult"><see cref="T:System.IAsyncResult" />
    ///  从返回 <see cref="M:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)" />
    ///  。
    ///</param>
    ///<returns>
    ///  包含返回值和任何引用的对象或 out 参数的派生的类方法的数组。
    ///</returns>
    ///<exception cref="T:System.Reflection.TargetException"><paramref name="target" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.MemberAccessException">
    ///  调用方没有权限来调用的方法。
    ///</exception><exception cref="T:System.Reflection.TargetInvocationException">
    ///  调用的方法引发异常。
    ///</exception>
    function EndInvoke(target: DDN.mscorlib.DNObject; asyncResult: DDN.mscorlib.DNIAsyncResult): TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  返回应用于指定类型的自定义特性。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  对其应用自定义属性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  包含自定义的特性应用于 <paramref name="type" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.TypeLoadException">
    ///  无法加载自定义特性类型。
    ///</exception>
    function GetCustomAttributes(&type: DDN.mscorlib.DNType): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取声明所表示的当前方法的类 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  声明所表示的方法的类 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取由此所表示的方法的名称 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///<returns>
    ///  由此所表示的方法的名称 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取的返回值 <see langword="Begin" />
    ///  异步方法调用。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  表示 <see cref="T:System.IAsyncResult" />
    ///  从返回 <see langword="Begin" />
    ///  异步方法调用。
    ///</returns>
    property AsyncResultParameter: DDN.mscorlib.DNParameterInfo read get_AsyncResultParameter;
    ///<summary>
    ///  获取的参数信息 <paramref name="AsyncCallback" />
    ///  中的异步调用 Begin 方法的参数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  表示 <paramref name="AsyncCallback" />
    ///  参数 <see langword="Begin" />
    ///  异步方法调用。
    ///</returns>
    property AsyncCallbackParameter: DDN.mscorlib.DNParameterInfo read get_AsyncCallbackParameter;
    ///<summary>
    ///  获取的参数信息 <paramref name="AsyncState" />
    ///  参数 <see langword="Begin" />
    ///  中的异步调用的方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  表示 <paramref name="AsyncState" />
    ///  参数 <see langword="Begin" />
    ///  中的异步调用的方法。
    ///</returns>
    property AsyncStateParameter: DDN.mscorlib.DNParameterInfo read get_AsyncStateParameter;
    ///<summary>
    ///  获取此方法的返回类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  此方法返回。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取一个值，该值的实例是否表示该方法的返回类型 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  是 <see langword="void" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果返回类型为 void。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsVoid: Boolean read get_IsVoid;
    ///<summary>
    ///  获取一个值，该值的实例是否表示的方法 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  以异步方式调用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该方法调用以异步方式;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>
    ///  获取传入的实例所表示的方法的参数 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</summary>
    ///<returns>
    ///  类型的数组 <see cref="T:System.Reflection.ParameterInfo" />
    ///  包含的参数传递给该方法的实例所表示的 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  。
    ///</returns>
    property InParameters: TArray<DDN.mscorlib.DNParameterInfo> read get_InParameters;
    ///<summary>
    ///  获取方法的输出参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.ParameterInfo" />
    ///  表示的方法，按顺序的 out 参数。
    ///</returns>
    property OutParameters: TArray<DDN.mscorlib.DNParameterInfo> read get_OutParameters;
    ///<summary>
    ///  获取该方法的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.ParameterInfo" />
    ///  表示该方法的参数。
    ///</returns>
    property Parameters: TArray<DDN.mscorlib.DNParameterInfo> read get_Parameters;
    ///<summary>
    ///  获取应用于此方法的自定义特性。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.ICustomAttributeProvider" />
    ///  表示该方法的自定义特性。
    ///</returns>
    property CustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider read get_CustomAttributeProvider;
    ///<summary>
    ///  获取返回类型的自定义属性。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.ICustomAttributeProvider" />
    ///  表示自定义属性的返回类型。
    ///</returns>
    property ReturnTypeCustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributeProvider;
    ///<summary>
    ///  获取一种同步方法的属性和元数据。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.MethodInfo" />
    ///  表示的属性和方法的元数据。
    ///  如果 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync" />
    ///  是 <see langword="true" />
    ///  , ，则此属性的值是 <see langword="null" />
    ///  。
    ///</returns>
    property MethodInfo: DDN.mscorlib.DNMethodInfo read get_MethodInfo;
    ///<summary>
    ///  获取的属性和元数据 <see langword="Begin" />
    ///  中的异步调用的方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.MethodInfo" />
    ///  表示的属性和元数据 <see langword="Begin" />
    ///  异步方法调用。
    ///</returns>
    property BeginMethodInfo: DDN.mscorlib.DNMethodInfo read get_BeginMethodInfo;
    ///<summary>
    ///  获取的属性和元数据 <see langword="End" />
    ///  到方法的异步调用的方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.MethodInfo" />
    ///  表示的属性和元数据 <see langword="End" />
    ///  异步方法调用。
    ///</returns>
    property EndMethodInfo: DDN.mscorlib.DNMethodInfo read get_EndMethodInfo;
  end;

  TDNLogicalMethodInfo = class(TDNGenericImport<DNLogicalMethodInfoClass, DNLogicalMethodInfo>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeFormatterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F62E823-8C56-5DC2-B774-67E0B97696D1}']
  { static methods } 

    ///<summary>
    ///  返回指定的方法的初始值设定项。
    ///</summary>
    ///  <param name="type">
    ///  从派生类型， <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  ,，-用于从中获取初始值设定项。
    ///</param>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  对象，其中包含指定的方法的初始值设定项。
    ///</returns>
    {class} function GetInitializer(&type: DDN.mscorlib.DNType; methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  返回有关指定的类派生自对应于方法定义的输入数组的对象的数组初始值设定项的 <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  从派生类型， <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  , ，获取为哪些初始值设定项。
    ///</param>
    ///  <param name="methodInfos">
    ///  类型的数组 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  数组初始值设定项对应的对象的方法定义的输入数组为指定的类派生自 <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  。
    ///</returns>
    {class} function GetInitializers(&type: DDN.mscorlib.DNType; methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  创建和初始化的具体派生类的实例 <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  从派生类型， <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  , ，其创建实例。
    ///</param>
    ///  <param name="initializer">
    ///  用于初始化该实例的对象前面获取的派生的类实现通过 <see cref="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
    ///  方法。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  对象。
    ///</returns>
    {class} function CreateInstance(&type: DDN.mscorlib.DNType; initializer: DDN.mscorlib.DNObject): DNMimeFormatter;

  end;

  ///<summary>
  ///  用于所有的读取器和 Web 服务和客户端使用 HTTP 实现，但不支持 SOAP 的编写器提供一个抽象基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeFormatter')]
  DNMimeFormatter = interface(DDN.mscorlib.DNObject)
  ['{284D5254-6A9F-3E69-AC8C-A85AD71E2256}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写，返回的指定方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，其中包含指定的方法的初始值设定项。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中重写时初始化的实例。
    ///</summary>
    ///  <param name="initializer">
    ///  适用于实现该方法的特定类类型的对象。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>
    ///  当在派生类中重写，返回对应于方法定义的输入数组的对象的数组初始值设定项。
    ///</summary>
    ///  <param name="methodInfos">
    ///  其中，每个方法，返回的初始值设定项数组中的相应索引的对象已获得 Web 方法的数组。
    ///</param>
    ///<returns>
    ///  对应于方法定义的输入数组的初始值设定项对象的数组。
    ///</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeFormatter = class(TDNGenericImport<DNMimeFormatterClass, DNMimeFormatter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeParameterReaderClass = interface(DNMimeFormatterClass)
  ['{46F06763-887E-5DC1-9919-1311E61603D1}']
  end;

  ///<summary>
  ///  请求参数的实现使用 HTTP 的 Web 服务，但不支持 SOAP 的读取器提供一个通用基实现。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeParameterReader')]
  DNMimeParameterReader = interface(DNMimeFormatter)
  ['{80787D1F-6A15-38FF-A164-F73A920F7687}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写，反序列化为的 Web 方法的参数值数组的 HTTP 请求。
    ///</summary>
    ///  <param name="request"><see cref="T:System.Web.HttpRequest" />
    ///  对象，它包含一个操作的输入的消息。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  包含反序列化的 HTTP 请求的对象。
    ///</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  当在派生类中重写，返回的指定方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，其中包含指定的方法的初始值设定项。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  当在派生类中重写时初始化的实例。
    ///</summary>
    ///  <param name="initializer">
    ///  适用于实现该方法的特定类类型的对象。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>
    ///  当在派生类中重写，返回对应于方法定义的输入数组的对象的数组初始值设定项。
    ///</summary>
    ///  <param name="methodInfos">
    ///  其中，每个方法，返回的初始值设定项数组中的相应索引的对象已获得 Web 方法的数组。
    ///</param>
    ///<returns>
    ///  对应于方法定义的输入数组的初始值设定项对象的数组。
    ///</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeParameterReader = class(TDNGenericImport<DNMimeParameterReaderClass, DNMimeParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNValueCollectionParameterReaderClass = interface(DNMimeParameterReaderClass)
  ['{3A5E5934-CB3B-5262-BC22-794D576173C6}']
  { static methods } 

    ///<summary>
    ///  确定是否支持的方法定义的参数定义 <see cref="T:System.Web.Services.Protocols.ValueCollectionParameterReader" />
    ///  类。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定要检查的方法。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该方法的参数定义不支持的读取器;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsSupported(methodInfo: DNLogicalMethodInfo): Boolean; overload;
    ///<summary>
    ///  确定是否支持特定的参数类型 <see cref="T:System.Web.Services.Protocols.ValueCollectionParameterReader" />
    ///  类。
    ///</summary>
    ///  <param name="paramInfo">
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  ，它指定要检查的参数。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该方法的参数定义不支持的读取器;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsSupported(paramInfo: DDN.mscorlib.DNParameterInfo): Boolean; overload;

  end;

  ///<summary>
  ///  用作传入请求参数的实现使用 HTTP 的 Web 服务，但不支持 SOAP 的读取器的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.ValueCollectionParameterReader')]
  DNValueCollectionParameterReader = interface(DNMimeParameterReader)
  ['{87200DE8-D4C2-3885-99E0-FFCB1DF3DB65}']
  { methods } 

    ///<summary>
    ///  返回指定的方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  表示的 Web 方法。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="o">
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  数组，通过获取 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  属性 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  类。
    ///</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>
    ///  当在派生类中重写，反序列化为的 Web 方法的参数值数组的 HTTP 请求。
    ///</summary>
    ///  <param name="request"><see cref="T:System.Web.HttpRequest" />
    ///  对象，它包含一个操作的输入的消息。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  包含反序列化的 HTTP 请求的对象。
    ///</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValueCollectionParameterReader = class(TDNGenericImport<DNValueCollectionParameterReaderClass, DNValueCollectionParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHtmlFormParameterReaderClass = interface(DNValueCollectionParameterReaderClass)
  ['{2C51CF19-6C19-5F0A-9778-EDEA0395332D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.HtmlFormParameterReader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHtmlFormParameterReader;

  end;

  ///<summary>
  ///  读取实现 HTTP，使用类似 HTML 窗体，而不是 SOAP 消息编码的名称 / 值对的 Web 服务的传入请求参数。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.HtmlFormParameterReader')]
  DNHtmlFormParameterReader = interface(DNValueCollectionParameterReader)
  ['{256D6606-712B-3DFE-9177-AC34F15E59FD}']
  { methods } 

    ///<summary>
    ///  将读入 Web 方法参数值的名称 / 值对。
    ///</summary>
    ///  <param name="request"><see cref="T:System.Web.HttpRequest" />
    ///  对象，其中包含 HTML 编码的 HTTP 请求正文中的名称 / 值对。
    ///</param>
    ///<returns>
    ///  对象的数组包含名称 / 值对。
    ///</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  返回指定的方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  表示的 Web 方法。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="o">
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  数组，通过获取 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  属性 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  类。
    ///</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlFormParameterReader = class(TDNGenericImport<DNHtmlFormParameterReaderClass, DNHtmlFormParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlParameterReaderClass = interface(DNValueCollectionParameterReaderClass)
  ['{0B3401D9-C9B0-5BE7-9EA6-DD0F7A93D7A7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.UrlParameterReader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNUrlParameterReader;

  end;

  ///<summary>
  ///  读取实现使用编码的 URL 查询字符串中而不是作为 SOAP 消息的名称 / 值对 HTTP 的 Web 服务的传入请求参数。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.UrlParameterReader')]
  DNUrlParameterReader = interface(DNValueCollectionParameterReader)
  ['{FC6BB276-DA0C-36AA-9512-F376BAD96097}']
  { methods } 

    ///<summary>
    ///  读取名称/值对的 HTTP 请求的查询字符串中编码为 Web 方法的参数值。
    ///</summary>
    ///  <param name="request">
    ///  一个 <see cref="T:System.Net.WebResponse" />
    ///  objectcontaining HTML URL 编码名称/值对。
    ///</param>
    ///<returns>
    ///  名称/值对的数组。
    ///</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  返回指定的方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  表示的 Web 方法。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="o">
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  数组，通过获取 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  属性 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  类。
    ///</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUrlParameterReader = class(TDNGenericImport<DNUrlParameterReaderClass, DNUrlParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeParameterWriterClass = interface(DNMimeFormatterClass)
  ['{3124C45A-3F1F-5A60-AC5D-AE0DB23A1EE2}']
  end;

  ///<summary>
  ///  为传出请求参数的 Web 服务客户端使用 HTTP 实现，但不支持 SOAP 的编写器提供一个通用基实现。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeParameterWriter')]
  DNMimeParameterWriter = interface(DNMimeFormatter)
  ['{E46DD746-C6AB-3310-9D98-2A059777B025}']
  { getters & setters } 

    function get_UsesWriteRequest: Boolean;
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    ///<summary>
    ///  当在派生类中重写，将修改传出 HTTP 请求的统一请求定位符 (URL)。
    ///</summary>
    ///  <param name="url">
    ///  HTTP 请求的原始统一资源定位器 (URL)。
    ///</param>
    ///  <param name="parameters">
    ///  要添加到 URL，如有必要的 Web 方法参数值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  对象，其中包含已修改的传出 HTTP 请求的统一请求定位符 (URL)。
    ///</returns>
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    ///<summary>
    ///  当在派生类中重写初始化传出 HTTP 请求。
    ///</summary>
    ///  <param name="request">
    ///  传出请求，其中 <see cref="T:System.Net.WebRequest" />
    ///  类允许 HTTP 以外的传输协议。
    ///</param>
    ///  <param name="values">
    ///  Web 方法参数值。
    ///</param>
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>
    ///  当在派生类中重写序列化为 Web 方法的参数值表示传出 HTTP 请求正文的流。
    ///</summary>
    ///  <param name="requestStream">
    ///  传出 HTTP 请求的正文输入的流。
    ///</param>
    ///  <param name="values">
    ///  Web 方法参数值。
    ///</param>
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>
    ///  当在派生类中重写，返回的指定方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，其中包含指定的方法的初始值设定项。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  当在派生类中重写时初始化的实例。
    ///</summary>
    ///  <param name="initializer">
    ///  适用于实现该方法的特定类类型的对象。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>
    ///  当在派生类中重写，返回对应于方法定义的输入数组的对象的数组初始值设定项。
    ///</summary>
    ///  <param name="methodInfos">
    ///  其中，每个方法，返回的初始值设定项数组中的相应索引的对象已获得 Web 方法的数组。
    ///</param>
    ///<returns>
    ///  对应于方法定义的输入数组的初始值设定项对象的数组。
    ///</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否将 Web 方法参数的值序列化为传出 HTTP 请求正文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 Web 方法参数值进行序列化到传出 HTTP 请求的正文。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
    ///<summary>
    ///  获取或设置用来写入到 HTTP 请求的参数的编码。
    ///</summary>
    ///<returns>
    ///  用于写入到 HTTP 请求的参数的编码。
    ///</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
  end;

  TDNMimeParameterWriter = class(TDNGenericImport<DNMimeParameterWriterClass, DNMimeParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlEncodedParameterWriterClass = interface(DNMimeParameterWriterClass)
  ['{76340785-26B0-5E0A-8132-C99D869C54D7}']
  end;

  ///<summary>
  ///  提供 URL 编码的传出请求参数的 Web 服务客户端使用 HTTP 实现，但不支持 SOAP 的编写器的功能。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.UrlEncodedParameterWriter')]
  DNUrlEncodedParameterWriter = interface(DNMimeParameterWriter)
  ['{03DCFB9A-1903-314F-B141-F856A427BF70}']
  { getters & setters } 

    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_UsesWriteRequest: Boolean;

  { methods } 

    ///<summary>
    ///  返回指定方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  包含指定方法的初始值设定项的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="initializer">
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  通过获取数组 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  属性 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  类。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>
    ///  当在派生类中重写，将修改传出 HTTP 请求的统一请求定位符 (URL)。
    ///</summary>
    ///  <param name="url">
    ///  HTTP 请求的原始统一资源定位器 (URL)。
    ///</param>
    ///  <param name="parameters">
    ///  要添加到 URL，如有必要的 Web 方法参数值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  对象，其中包含已修改的传出 HTTP 请求的统一请求定位符 (URL)。
    ///</returns>
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    ///<summary>
    ///  当在派生类中重写初始化传出 HTTP 请求。
    ///</summary>
    ///  <param name="request">
    ///  传出请求，其中 <see cref="T:System.Net.WebRequest" />
    ///  类允许 HTTP 以外的传输协议。
    ///</param>
    ///  <param name="values">
    ///  Web 方法参数值。
    ///</param>
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>
    ///  当在派生类中重写序列化为 Web 方法的参数值表示传出 HTTP 请求正文的流。
    ///</summary>
    ///  <param name="requestStream">
    ///  传出 HTTP 请求的正文输入的流。
    ///</param>
    ///  <param name="values">
    ///  Web 方法参数值。
    ///</param>
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于将参数写入到 HTTP 请求的编码。
    ///</summary>
    ///<returns>
    ///  用于将参数写入到 HTTP 请求的编码。
    ///</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    ///<summary>
    ///  获取一个值，该值指示是否将 Web 方法参数的值序列化为传出 HTTP 请求正文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 Web 方法参数值进行序列化到传出 HTTP 请求的正文。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
  end;

  TDNUrlEncodedParameterWriter = class(TDNGenericImport<DNUrlEncodedParameterWriterClass, DNUrlEncodedParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHtmlFormParameterWriterClass = interface(DNUrlEncodedParameterWriterClass)
  ['{48AA461E-801D-5DA2-822B-51FE8178E48A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.HtmlFormParameterWriter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHtmlFormParameterWriter;

  end;

  ///<summary>
  ///  将实现与名称 / 值对使用 HTTP 的 Web 服务的传出请求参数编码类似 HTML 窗体，而不是 SOAP 消息。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.HtmlFormParameterWriter')]
  DNHtmlFormParameterWriter = interface(DNUrlEncodedParameterWriter)
  ['{D1AEDAAC-FBC4-3DFF-A672-E2002E2CCF56}']
  { getters & setters } 

    function get_UsesWriteRequest: Boolean;
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    ///<summary>
    ///  Web 方法参数的值序列化为表示传出 HTTP 请求正文的流。
    ///</summary>
    ///  <param name="requestStream">
    ///  传出 HTTP 请求的正文输入的流。
    ///</param>
    ///  <param name="values">
    ///  Web 方法参数值。
    ///</param>
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>
    ///  初始化传出 HTTP 请求。
    ///</summary>
    ///  <param name="request">
    ///  传出的请求。
    ///</param>
    ///  <param name="values">
    ///  Web 方法参数值。
    ///</param>
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>
    ///  返回指定方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  包含指定方法的初始值设定项的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="initializer">
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  通过获取数组 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  属性 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  类。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否 Web 方法参数的值序列化到传出 HTTP 请求的正文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要指示 Web 方法参数进行序列化。
    ///  此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
    ///<summary>
    ///  获取或设置用于将参数写入到 HTTP 请求的编码。
    ///</summary>
    ///<returns>
    ///  用于将参数写入到 HTTP 请求的编码。
    ///</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
  end;

  TDNHtmlFormParameterWriter = class(TDNGenericImport<DNHtmlFormParameterWriterClass, DNHtmlFormParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlParameterWriterClass = interface(DNUrlEncodedParameterWriterClass)
  ['{B05F3615-F23B-591E-87E3-F562E2D19DF2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.UrlParameterWriter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNUrlParameterWriter;

  end;

  ///<summary>
  ///  写入传出实现与名称 / 值对使用 HTTP 的 Web 服务的请求参数的 URL 查询字符串中而不是作为 SOAP 消息编码。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.UrlParameterWriter')]
  DNUrlParameterWriter = interface(DNUrlEncodedParameterWriter)
  ['{FA412673-0615-315F-A795-7FE17A11DCE2}']
  { getters & setters } 

    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_UsesWriteRequest: Boolean;

  { methods } 

    ///<summary>
    ///  将 Web 方法写入 HTTP 请求的查询字符串参数值。
    ///</summary>
    ///  <param name="url">
    ///  HTTP 请求的原始 URL。
    ///</param>
    ///  <param name="parameters">
    ///  要添加到 URL，如有必要的 Web 方法参数值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  对象，其中包含查询字符串和参数值。
    ///</returns>
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    ///<summary>
    ///  返回指定方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  包含指定方法的初始值设定项的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="initializer">
    ///  一个 <see cref="T:System.Reflection.ParameterInfo" />
    ///  通过获取数组 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  属性 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  类。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于将参数写入到 HTTP 请求的编码。
    ///</summary>
    ///<returns>
    ///  用于将参数写入到 HTTP 请求的编码。
    ///</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
  end;

  TDNUrlParameterWriter = class(TDNGenericImport<DNUrlParameterWriterClass, DNUrlParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeReturnReaderClass = interface(DNMimeFormatterClass)
  ['{B324ABCD-6677-5F9C-9878-CA7BBA341037}']
  end;

  ///<summary>
  ///  为 Web 服务客户端使用 HTTP 实现，但不支持 SOAP 的传入响应返回值的读取器提供一个通用基实现。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeReturnReader')]
  DNMimeReturnReader = interface(DNMimeFormatter)
  ['{E88BB6D4-A595-3BFA-A2F1-359DFB50A96F}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写，反序列化为 Web 方法返回值的 HTTP 响应。
    ///</summary>
    ///  <param name="response">
    ///  一个 <see cref="T:System.Net.WebResponse" />
    ///  对象，它包含一个操作的输出消息。
    ///</param>
    ///  <param name="responseStream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  其内容的 HTTP 响应的正文由 <see cref="T:System.Net.WebResponse" />
    ///  参数。
    ///</param>
    ///<returns>
    ///  HTTP 响应反序列化为 Web 方法返回值。
    ///</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>
    ///  当在派生类中重写，返回的指定方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，其中包含指定的方法的初始值设定项。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  当在派生类中重写时初始化的实例。
    ///</summary>
    ///  <param name="initializer">
    ///  适用于实现该方法的特定类类型的对象。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>
    ///  当在派生类中重写，返回对应于方法定义的输入数组的对象的数组初始值设定项。
    ///</summary>
    ///  <param name="methodInfos">
    ///  其中，每个方法，返回的初始值设定项数组中的相应索引的对象已获得 Web 方法的数组。
    ///</param>
    ///<returns>
    ///  对应于方法定义的输入数组的初始值设定项对象的数组。
    ///</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeReturnReader = class(TDNGenericImport<DNMimeReturnReaderClass, DNMimeReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNAnyReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{A77D50DB-AE0D-5FB4-9181-E6596DD60EB2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.AnyReturnReader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAnyReturnReader;

  end;

  ///<summary>
  ///  为 Web 服务客户端使用 HTTP 实现，但不支持 SOAP 提供的传入响应返回值的最小的读取器。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.AnyReturnReader')]
  DNAnyReturnReader = interface(DNMimeReturnReader)
  ['{002AFC50-3974-36A8-B720-411DEEBB7896}']
  { methods } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.AnyReturnReader" />
    ///  类的实例。
    ///</summary>
    ///  <param name="o">
    ///  另一个实例 <see cref="T:System.Web.Services.Protocols.AnyReturnReader" />
    ///  类，在其上的 <see cref="M:System.Web.Services.Protocols.AnyReturnReader.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
    ///  之前已调用方法。
    ///</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回参数传递给 <see cref="M:System.Web.Services.Protocols.AnyReturnReader.Initialize(System.Object)" />
    ///  方法。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，该值指示 Web 方法为其获取初始值设定项。
    ///</param>
    ///<returns>
    ///  参数传递给 <see cref="M:System.Web.Services.Protocols.AnyReturnReader.Initialize(System.Object)" />
    ///  方法。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回输入的 HTTP 响应流。
    ///</summary>
    ///  <param name="response">
    ///  Web 服务时，包含操作的输出消息所发送的 HTTP 响应的表示形式。
    ///</param>
    ///  <param name="responseStream">
    ///  输出流的 HTTP 响应的体，并且在其内容由 <paramref name="response" />
    ///  参数。
    ///</param>
    ///<returns>
    ///  输入的 HTTP 响应流。
    ///</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAnyReturnReader = class(TDNGenericImport<DNAnyReturnReaderClass, DNAnyReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNNopReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{B503C687-89A0-5017-89B8-4CBC9F3E1104}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.NopReturnReader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNopReturnReader;

  end;

  ///<summary>
  ///  为 Web 服务客户端使用 HTTP 实现，但不支持 SOAP，可作为传入响应不执行操作读取器返回的值。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.NopReturnReader')]
  DNNopReturnReader = interface(DNMimeReturnReader)
  ['{40607C71-AC71-37B7-BDE9-5EFAFC6AADD9}']
  { methods } 

    ///<summary>
    ///  返回指定的方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  初始值设定项的指定方法。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="initializer">
    ///  另一个实例 <see cref="T:System.Web.Services.Protocols.NopReturnReader" />
    ///  类，在其上的 <see cref="M:System.Web.Services.Protocols.NopReturnReader.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
    ///  之前已调用方法。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回 <see langword="null" />
    ///  ，而不是将 HTTP 响应流反序列化为 Web 方法返回值。
    ///</summary>
    ///  <param name="response">
    ///  一个包含操作的输出消息的 <see cref="T:System.Net.WebResponse" />
    ///  对象。
    ///</param>
    ///  <param name="responseStream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其内容是由 <paramref name="response" />
    ///  参数表示的 HTTP 响应的正文。
    ///</param>
    ///<returns><see langword="null" />
    ///  。
    ///</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNopReturnReader = class(TDNGenericImport<DNNopReturnReaderClass, DNNopReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNTextReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{4C3083F6-8F2D-5655-B5A0-7BCAEEBFC0BB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.TextReturnReader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTextReturnReader;

  end;

  ///<summary>
  ///  为 Web 服务客户端使用 HTTP 实现，但不支持 SOAP，读操作从 HTTP 响应文本返回值。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.TextReturnReader')]
  DNTextReturnReader = interface(DNMimeReturnReader)
  ['{6ED79D6B-C9E5-3194-9A05-D5E9EB9D039B}']
  { methods } 

    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="o">
    ///  一个 <see cref="T:System.Web.Services.Protocols.PatternMatcher" />
    ///  正在调用 Web 方法的返回类型的对象。
    ///</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回指定的方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  初始值设定项的指定方法
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  用于解析包含在 HTTP 响应中的文本。
    ///</summary>
    ///  <param name="response">
    ///  一个包含操作的输出消息的 <see cref="T:System.Net.WebResponse" />
    ///  对象。
    ///</param>
    ///  <param name="responseStream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其内容是由 <paramref name="response" />
    ///  参数表示的 HTTP 响应的正文。
    ///</param>
    ///<returns>
    ///  一个对象，包含反序列化的 Web 方法返回的值。
    ///</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextReturnReader = class(TDNGenericImport<DNTextReturnReaderClass, DNTextReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNXmlReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{9DEC7BBB-57A2-555E-A993-09280FA69043}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.XmlReturnReader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlReturnReader;

  end;

  ///<summary>
  ///  读操作从 Web 服务客户端使用 HTTP 实现，但不支持 SOAP 的传入响应正文中编码的 XML 返回值。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.XmlReturnReader')]
  DNXmlReturnReader = interface(DNMimeReturnReader)
  ['{03A9DC5C-2178-3937-BA29-99777C9BBB8B}']
  { methods } 

    ///<summary>
    ///  返回对象对应于方法定义的输入数组的初始值设定项的数组。
    ///</summary>
    ///  <param name="methodInfos">
    ///  类型的数组 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  对应于方法定义的输入数组的初始值设定项对象的数组。
    ///</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  初始化一个实例。
    ///</summary>
    ///  <param name="o"><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  正在调用 Web 方法的返回类型。
    ///</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回指定的方法的初始值设定项。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  ，它指定为其获取初始值设定项的 Web 方法。
    ///</param>
    ///<returns>
    ///  初始值设定项的指定方法。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取从 HTTP 响应中包含的 XML 文档反序列化一个返回值。
    ///</summary>
    ///  <param name="response"><see cref="T:System.Web.HttpRequest" />
    ///  对象，它包含一个操作的输出消息。
    ///</param>
    ///  <param name="responseStream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其内容是由 <paramref name="response" />
    ///  参数表示的 HTTP 响应的正文。
    ///</param>
    ///<returns>
    ///  从 HTTP 响应中包含的 XML 文档反序列化一个返回值。
    ///</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlReturnReader = class(TDNGenericImport<DNXmlReturnReaderClass, DNXmlReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNPatternMatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A22DCBB-41E5-5EB2-B18D-62DDFB5D9CFB}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Web.Services.Protocols.PatternMatcher" />
    ///  实例基于输入的类型。
    ///</summary>
    ///  <param name="type">
    ///  一个 <see cref="T:System.Type" />
    ///  ，它指定 Web 方法的返回类型。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNPatternMatcher;

  end;

  ///<summary>
  ///  搜索 Web 服务客户端返回值的 HTTP 响应文本。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.PatternMatcher')]
  DNPatternMatcher = interface(DDN.mscorlib.DNObject)
  ['{CA3D0A00-420E-3691-AD3A-BCF0FAD4A23B}']
  { methods } 

    ///<summary>
    ///  搜索文本输入进行反序列化表示 Web 方法返回值的对象。
    ///</summary>
    ///  <param name="text">
    ///  要搜索的文本，这是 HTTP 响应的正文。
    ///</param>
    ///<returns>
    ///  表示 Web 方法的对象返回的值。
    ///</returns>
    function Match(text: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPatternMatcher = class(TDNGenericImport<DNPatternMatcherClass, DNPatternMatcher>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerProtocolClass = interface(DDN.mscorlib.DNObjectClass)
  ['{913CCBD7-5C79-59B9-AE0C-A08C064B1E93}']
  end;

  ///<summary>
  ///  .NET Framework 使用派生自的类 <see cref="T:System.Web.Services.Protocols.ServerProtocol" />
  ///  类来处理 XML Web 服务请求。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.ServerProtocol')]
  DNServerProtocol = interface(DDN.mscorlib.DNObject)
  ['{CC7803E5-1458-378B-890B-3F58B094C1F0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerProtocol = class(TDNGenericImport<DNServerProtocolClass, DNServerProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerProtocolClass = interface(DNServerProtocolClass)
  ['{EA846EA3-425E-5093-B85A-1BDF73873A50}']
  end;

  ///<summary>
  ///  .NET Framework 创建的一个实例 <see cref="T:System.Web.Services.Protocols.SoapServerProtocol" />
  ///  类来处理 XML Web 服务请求。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerProtocol')]
  DNSoapServerProtocol = interface(DNServerProtocol)
  ['{B1994DE6-F115-332B-8C69-53742C002F1B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerProtocol = class(TDNGenericImport<DNSoapServerProtocolClass, DNSoapServerProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerProtocolFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54FF517C-B605-5D38-91AF-F542CF662DAF}']
  end;

  ///<summary>
  ///  .NET Framework 使用派生自的类 <see cref="T:System.Web.Services.Protocols.ServerProtocolFactory" />
  ///  类来处理 XML Web 服务请求。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.ServerProtocolFactory')]
  DNServerProtocolFactory = interface(DDN.mscorlib.DNObject)
  ['{6C6E52FC-5999-3C7A-85C9-3E799FF8DAE4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerProtocolFactory = class(TDNGenericImport<DNServerProtocolFactoryClass, DNServerProtocolFactory>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerProtocolFactoryClass = interface(DNServerProtocolFactoryClass)
  ['{B08F4FC3-91FE-5C37-B622-BECC7F9096F0}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Protocols.SoapServerProtocolFactory" />
    ///  。
    ///</summary>
    {class} function init: DNSoapServerProtocolFactory;

  end;

  ///<summary>
  ///  .NET Framework 创建的一个实例 <see cref="T:System.Web.Services.Protocols.SoapServerProtocolFactory" />
  ///  类来处理 XML Web 服务请求。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerProtocolFactory')]
  DNSoapServerProtocolFactory = interface(DNServerProtocolFactory)
  ['{E6BAE3D2-681A-390B-9EC2-507A5BD7D5FE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerProtocolFactory = class(TDNGenericImport<DNSoapServerProtocolFactoryClass, DNSoapServerProtocolFactory>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F044A3B-0A87-58E1-BF23-33D380E85709}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Protocols.ServerType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  公开 XML Web 服务。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNServerType;

  end;

  ///<summary>
  ///  .NET Framework 使用 <see cref="T:System.Web.Services.Protocols.ServerType" />
  ///  类来处理 XML Web 服务请求。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.ServerType')]
  DNServerType = interface(DDN.mscorlib.DNObject)
  ['{AAE43349-2E66-3D4C-A1F2-D1EEF093D513}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerType = class(TDNGenericImport<DNServerTypeClass, DNServerType>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerTypeClass = interface(DNServerTypeClass)
  ['{A2C3CA33-D768-5592-A9C1-00E3690716CA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapServerType" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  此 XML Web 服务所基于的。
    ///</param>
    ///  <param name="protocolsSupported">
    ///  一个 <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  值，该值指定用于解密数据的 XML Web 服务请求中发送的传输协议。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; protocolsSupported: DNWebServiceProtocols): DNSoapServerType;

  end;

  ///<summary><see cref="T:System.Web.Services.Protocols.SoapServerType" />
  ///  类表示 XML Web 服务所基于的类型。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerType')]
  DNSoapServerType = interface(DNServerType)
  ['{63B909EE-EA6C-31F0-ABA0-2A69FC094189}']
  { getters & setters } 

    function get_ServiceNamespace: string;
    function get_ServiceDefaultIsEncoded: Boolean;
    function get_ServiceRoutingOnSoapAction: Boolean;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  与指定键相关联。
    ///</summary>
    ///  <param name="key">
    ///  与所需相关联的密钥 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  与指定键相关联。
    ///</returns>
    function GetMethod(key: DDN.mscorlib.DNObject): DNSoapServerMethod;
    ///<summary>
    ///  返回重复 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  与指定键相关联。
    ///</summary>
    ///  <param name="key">
    ///  与所需的重复关联的密钥 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  。
    ///</param>
    ///<returns>
    ///  重复 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  与指定键相关联。
    ///</returns>
    function GetDuplicateMethod(key: DDN.mscorlib.DNObject): DNSoapServerMethod;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.String" />
    ///  ，其中包含此 XML Web 服务所属的命名空间。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含此 XML Web 服务所属的命名空间。
    ///</returns>
    property ServiceNamespace: string read get_ServiceNamespace;
    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  ，该值指示是否默认情况下进行编码 SOAP 发往和来自此 XML Web 服务的数据传输。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 SOAP 发往和来自此 XML Web 服务的数据传输编码默认设置。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ServiceDefaultIsEncoded: Boolean read get_ServiceDefaultIsEncoded;
    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  ，该值指示是否根据路由路由到此 XML Web 服务的 SOAP 消息 <see langword="SOAPAction" />
    ///  HTTP 标头。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果要将路由到此 XML Web 服务的 SOAP 消息路由基于 <see langword="SOAPAction" />
    ///  HTTP 标头; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ServiceRoutingOnSoapAction: Boolean read get_ServiceRoutingOnSoapAction;
  end;

  TDNSoapServerType = class(TDNGenericImport<DNSoapServerTypeClass, DNSoapServerType>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoap12FaultCodesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7184267-0167-5DBC-A49C-124DC0455072}']
  { static fields getter & setter } 

   function __fakeFieldGet_ReceiverFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_SenderFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_DataEncodingUnknownFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_RpcProcedureNotPresentFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_RpcBadArgumentsFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_EncodingMissingIdFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_EncodingUntypedValueFaultCode: DDN.System.Xml.DNXmlQualifiedName;

  { static fields } 

    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="Receiver" />
    ///  由于与收件人核实问题服务器上的客户端调用的处理过程中出现错误代码指示错误。
    ///</summary>
    {class} property ReceiverFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ReceiverFaultCode;
    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="Sender" />
    ///  ，该值指示客户端调用的错误代码的格式不正确或不包含相应的信息。
    ///</summary>
    {class} property SenderFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_SenderFaultCode;
    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="VersionMismatch" />
    ///  ，该值指示 XML Web 服务的错误代码应符合 SOAP 1.2 规范的 SOAP 消息，但接收到一个符合 SOAP 1.1。
    ///</summary>
    {class} property VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_VersionMismatchFaultCode;
    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="MustUnderstand" />
    ///  ，该值指示 SOAP 标头的错误代码标记为 <see langword="MustUnderstand" />
    ///  未处理特性。
    ///</summary>
    {class} property MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_MustUnderstandFaultCode;
    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="DataEncodingUnknown" />
    ///  错误代码，该值表示 SOAP 消息编码格式不可识别。
    ///</summary>
    {class} property DataEncodingUnknownFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_DataEncodingUnknownFaultCode;
    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="rpc:ProcedureNotPresent" />
    ///  错误子代码，该值指示 XML Web 服务不支持请求的 XML Web 服务方法。
    ///</summary>
    {class} property RpcProcedureNotPresentFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_RpcProcedureNotPresentFaultCode;
    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="rpc:BadArguments" />
    ///  错误子代码，用于指示发送到 XML Web 服务方法参数不正确或无法分析。
    ///</summary>
    {class} property RpcBadArgumentsFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_RpcBadArgumentsFaultCode;
    ///<summary>
    ///  表示 SOAP 编码数据中缺少 ID 的错误代码。
    ///</summary>
    {class} property EncodingMissingIdFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_EncodingMissingIdFaultCode;
    ///<summary>
    ///  表示 SOAP 1.2 版 <see langword="enc:UntypedValue" />
    ///  错误子代码，用于指示 SOAP 消息采用了 RPC 编码，并且未指定编码的图形节点的类型名称属性。
    ///</summary>
    {class} property EncodingUntypedValueFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_EncodingUntypedValueFaultCode;

  end;

  ///<summary>
  ///  定义 SOAP 消息中出现的 SOAP 错误代码时在与 XML Web 服务使用 SOAP 1.2 版协议进行通信时发生错误。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.Soap12FaultCodes')]
  DNSoap12FaultCodes = interface(DDN.mscorlib.DNObject)
  ['{C8DA73E1-6ABD-324D-92BE-A62A82CD6B3B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoap12FaultCodes = class(TDNGenericImport<DNSoap12FaultCodesClass, DNSoap12FaultCodes>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3575D082-F365-589E-946B-0D765142C114}']
  end;

  ///<summary>
  ///  使用 ASP.NET 创建的 XML Web services 的 SOAP 扩展的基类。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapExtension')]
  DNSoapExtension = interface(DDN.mscorlib.DNObject)
  ['{C81B0412-FAE7-3FF1-8FE2-7E2BFD12C744}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写，允许对内存缓冲区，其中包含在 SOAP 请求或响应的一个 SOAP 扩展的访问权限。
    ///</summary>
    ///  <param name="stream">
    ///  包含在 SOAP 请求或响应的内存缓冲区。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  表示此 SOAP 扩展可以修改的新内存缓冲区。
    ///</returns>
    function ChainStream(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNStream;
    ///<summary>
    ///  当在派生类中重写时允许 SOAP 扩展，以初始化数据特定于 XML Web 服务方法使用在一个应用于 XML Web 服务方法的属性的时间性能开销。
    ///</summary>
    ///  <param name="methodInfo">
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  表示 SOAP 扩展将应用于 XML Web 服务方法的特定函数原型。
    ///</param>
    ///  <param name="attribute"><see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    ///  应用于 XML Web 服务方法。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  的缓存初始化 SOAP 扩展。
    ///</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo; attribute: DNSoapExtensionAttribute): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中重写时允许 SOAP 扩展，以初始化数据特定于在一个实现 XML Web 服务的类时间的性能开销。
    ///</summary>
    ///  <param name="serviceType">
    ///  实现 SOAP 扩展将应用于 XML Web 服务的类的类型。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  的缓存初始化 SOAP 扩展。
    ///</returns>
    function GetInitializer(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中重写时允许 SOAP 扩展，以初始化自身使用的数据缓存在 <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
    ///  方法。
    ///</summary>
    ///  <param name="initializer"><see cref="T:System.Object" />
    ///  从返回 <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
    ///  由 ASP.NET 缓存。
    ///</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>
    ///  当在派生类中重写时允许 SOAP 扩展，以接收 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  到在每个进程 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  要处理的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  。
    ///</param>
    procedure ProcessMessage(message: DNSoapMessage);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapExtension = class(TDNGenericImport<DNSoapExtensionClass, DNSoapExtension>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapFaultSubCodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{223389A4-D159-5DB5-A83A-02B9703B22B3}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapFaultSubcode" />
    ///  类来设置应用程序特定的错误代码。
    ///</summary>
    ///  <param name="code"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  指定应用程序特定的错误代码。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapFaultSubcode.Code" />
    ///  属性。
    ///</param>
    {class} function init(code: DDN.System.Xml.DNXmlQualifiedName): DNSoapFaultSubCode; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  类设置的应用程序特定的错误代码和其他错误信息。
    ///</summary>
    ///  <param name="code">
    ///  一个 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定应用程序特定的错误代码。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapFaultSubCode.Code" />
    ///  属性。
    ///</param>
    ///  <param name="subCode">
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  指定其他应用程序特定的错误信息。
    ///  设置 <see cref="P:System.Web.Services.Protocols.SoapFaultSubCode.SubCode" />
    ///  属性。
    ///</param>
    {class} function init(code: DDN.System.Xml.DNXmlQualifiedName; subCode: DNSoapFaultSubCode): DNSoapFaultSubCode; overload;

  end;

  ///<summary>
  ///  表示的内容的可选 <see langword="Subcode" />
  ///  SOAP 错误时使用 SOAP 1.2 版客户端和 XML Web 服务之间进行通信的元素。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapFaultSubCode')]
  DNSoapFaultSubCode = interface(DDN.mscorlib.DNObject)
  ['{F645307A-8394-38E4-BBD0-2D9C71EA3190}']
  { getters & setters } 

    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_SubCode: DNSoapFaultSubCode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个 XML 限定名的形式的应用程序特定的错误代码。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  表示应用程序特定的错误代码。
    ///</returns>
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    ///<summary>
    ///  获取包含在子 <see langword="Subcode" />
    ///  元素中的附加错误信息。
    ///</summary>
    ///<returns>
    ///  包含附加错误信息的 <see cref="T:System.Web.Services.Protocols.SoapFaultSubcode" />
    ///  。
    ///</returns>
    property SubCode: DNSoapFaultSubCode read get_SubCode;
  end;

  TDNSoapFaultSubCode = class(TDNGenericImport<DNSoapFaultSubCodeClass, DNSoapFaultSubCode>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{758D8773-CA73-5A6F-B170-07D21332F56A}']
  end;

  ///<summary>
  ///  当在派生类中重写，则表示 SOAP 标头的内容。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeader')]
  DNSoapHeader = interface(DDN.mscorlib.DNObject)
  ['{4210CD23-EEEA-3069-AC29-65142F4779A4}']
  { getters & setters } 

    function get_EncodedMustUnderstand: string;
    procedure set_EncodedMustUnderstand(value: string);
    function get_EncodedMustUnderstand12: string;
    procedure set_EncodedMustUnderstand12(value: string);
    function get_MustUnderstand: Boolean;
    procedure set_MustUnderstand(value: Boolean);
    function get_Actor: string;
    procedure set_Actor(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_DidUnderstand: Boolean;
    procedure set_DidUnderstand(value: Boolean);
    function get_EncodedRelay: string;
    procedure set_EncodedRelay(value: string);
    function get_Relay: Boolean;
    procedure set_Relay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的值 <see langword="mustUnderstand" />
    ///  SOAP 标头与 SOAP 协议版本 1.1 通讯时使用的 XML 属性。
    ///</summary>
    ///<returns>
    ///  值 <see langword="mustUnderstand" />
    ///  属性。
    ///  默认值为"0"。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为一个值除:"0"、"1"、"true"或"false"。
    ///</exception>
    property EncodedMustUnderstand: string read get_EncodedMustUnderstand write set_EncodedMustUnderstand;
    ///<summary>
    ///  获取或设置的值 <see langword="mustUnderstand" />
    ///  SOAP 标头与 SOAP 协议 1.2 版进行通信时的 XML 属性。
    ///</summary>
    ///<returns>
    ///  值 <see langword="mustUnderstand" />
    ///  SOAP 标头的 XML 属性。
    ///  默认值为"0"。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为一个值除:"0"、"1"、"true"或"false"。
    ///</exception>
    property EncodedMustUnderstand12: string read get_EncodedMustUnderstand12 write set_EncodedMustUnderstand12;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  必须被理解。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XML Web 服务必须正确解释并处理 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property MustUnderstand: Boolean read get_MustUnderstand write set_MustUnderstand;
    ///<summary>
    ///  获取或设置 SOAP 标头的接收方。
    ///</summary>
    ///<returns>
    ///  SOAP 标头的收件人。
    ///  默认值为空字符串("")。
    ///</returns>
    property Actor: string read get_Actor write set_Actor;
    ///<summary>
    ///  获取或设置 SOAP 标头的接收方。
    ///</summary>
    ///<returns>
    ///  一个表示 SOAP 标头的接收方的 URI。
    ///  默认值为空字符串("")。
    ///</returns>
    property Role: string read get_Role write set_Role;
    ///<summary>
    ///  获取或设置一个值，该值指示 XML Web 服务方法正确处理 SOAP 标头。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果正确处理的 SOAP 标头;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property DidUnderstand: Boolean read get_DidUnderstand write set_DidUnderstand;
    ///<summary>
    ///  获取或设置 SOAP 1.2 标头中继属性。
    ///</summary>
    ///<returns>
    ///  任一"0"，"false"、"1"或"true"。
    ///</returns>
    property EncodedRelay: string read get_EncodedRelay write set_EncodedRelay;
    ///<summary>
    ///  获取或设置一个值，该值指示是否要中继到下一个 SOAP 节点，如果当前节点不理解标头的 SOAP 标头。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 SOAP 标头中包含"中继"属性设置为"true";否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Relay: Boolean read get_Relay write set_Relay;
  end;

  TDNSoapHeader = class(TDNGenericImport<DNSoapHeaderClass, DNSoapHeader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapUnknownHeaderClass = interface(DNSoapHeaderClass)
  ['{937A2935-1A5F-5E29-82E9-04CCAF97F771}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapUnknownHeader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapUnknownHeader;

  end;

  ///<summary>
  ///  表示未理解的收件人 XML Web 服务或 XML Web 服务客户端的 SOAP 标头从接收的数据。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapUnknownHeader')]
  DNSoapUnknownHeader = interface(DNSoapHeader)
  ['{AB9471A2-168F-3D8C-B1E3-442AB8AA9A86}']
  { getters & setters } 

    function get_Element: DDN.System.Xml.DNXmlElement;
    procedure set_Element(value: DDN.System.Xml.DNXmlElement);
    function get_EncodedMustUnderstand: string;
    procedure set_EncodedMustUnderstand(value: string);
    function get_EncodedMustUnderstand12: string;
    procedure set_EncodedMustUnderstand12(value: string);
    function get_MustUnderstand: Boolean;
    procedure set_MustUnderstand(value: Boolean);
    function get_Actor: string;
    procedure set_Actor(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_DidUnderstand: Boolean;
    procedure set_DidUnderstand(value: Boolean);
    function get_EncodedRelay: string;
    procedure set_EncodedRelay(value: string);
    function get_Relay: Boolean;
    procedure set_Relay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 SOAP 请求或响应的标头 XML 元素。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlElement" />
    ///  表示 SOAP 标头的原始 XML。
    ///</returns>
    property Element: DDN.System.Xml.DNXmlElement read get_Element write set_Element;
    ///<summary>
    ///  获取或设置的值 <see langword="mustUnderstand" />
    ///  SOAP 标头与 SOAP 协议版本 1.1 通讯时使用的 XML 属性。
    ///</summary>
    ///<returns>
    ///  值 <see langword="mustUnderstand" />
    ///  属性。
    ///  默认值为"0"。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为一个值除:"0"、"1"、"true"或"false"。
    ///</exception>
    property EncodedMustUnderstand: string read get_EncodedMustUnderstand write set_EncodedMustUnderstand;
    ///<summary>
    ///  获取或设置的值 <see langword="mustUnderstand" />
    ///  SOAP 标头与 SOAP 协议 1.2 版进行通信时的 XML 属性。
    ///</summary>
    ///<returns>
    ///  值 <see langword="mustUnderstand" />
    ///  SOAP 标头的 XML 属性。
    ///  默认值为"0"。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为一个值除:"0"、"1"、"true"或"false"。
    ///</exception>
    property EncodedMustUnderstand12: string read get_EncodedMustUnderstand12 write set_EncodedMustUnderstand12;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  必须被理解。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XML Web 服务必须正确解释并处理 <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property MustUnderstand: Boolean read get_MustUnderstand write set_MustUnderstand;
    ///<summary>
    ///  获取或设置 SOAP 标头的接收方。
    ///</summary>
    ///<returns>
    ///  SOAP 标头的收件人。
    ///  默认值为空字符串("")。
    ///</returns>
    property Actor: string read get_Actor write set_Actor;
    ///<summary>
    ///  获取或设置 SOAP 标头的接收方。
    ///</summary>
    ///<returns>
    ///  一个表示 SOAP 标头的接收方的 URI。
    ///  默认值为空字符串("")。
    ///</returns>
    property Role: string read get_Role write set_Role;
    ///<summary>
    ///  获取或设置一个值，该值指示 XML Web 服务方法正确处理 SOAP 标头。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果正确处理的 SOAP 标头;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property DidUnderstand: Boolean read get_DidUnderstand write set_DidUnderstand;
    ///<summary>
    ///  获取或设置 SOAP 1.2 标头中继属性。
    ///</summary>
    ///<returns>
    ///  任一"0"，"false"、"1"或"true"。
    ///</returns>
    property EncodedRelay: string read get_EncodedRelay write set_EncodedRelay;
    ///<summary>
    ///  获取或设置一个值，该值指示是否要中继到下一个 SOAP 节点，如果当前节点不理解标头的 SOAP 标头。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 SOAP 标头中包含"中继"属性设置为"true";否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Relay: Boolean read get_Relay write set_Relay;
  end;

  TDNSoapUnknownHeader = class(TDNGenericImport<DNSoapUnknownHeaderClass, DNSoapUnknownHeader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderHandlingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DFEEC10D-1F96-532B-9F27-10C8D36BD47E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.SoapHeaderHandling" />
    ///  的新实例。
    ///</summary>
    {class} function init: DNSoapHeaderHandling;

  { static methods } 

    ///<summary>
    ///  将指定的 SOAP 标头内容写入到 SOAP 消息。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  可以用于编写标头中。
    ///</param>
    ///  <param name="serializer"><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可以用于编写标头中。
    ///</param>
    ///  <param name="headers"><see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ，包含要写入的 SOAP 标头。
    ///</param>
    ///  <param name="mappings">
    ///  类型的数组 <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  ，其中包含 SOAP 标头的映射。
    ///</param>
    ///  <param name="direction">
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  值，该值指示 SOAP 标头的方向。
    ///</param>
    ///  <param name="isEncoded">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，该值指示是否进行编码的 SOAP 标头。
    ///</param>
    ///  <param name="defaultNS">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 XML Web 服务的默认命名空间。
    ///</param>
    ///  <param name="serviceDefaultIsEncoded">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，指示是否数据发送到和从 XML Web 服务编码的默认值。
    ///</param>
    ///  <param name="envelopeNS">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 SOAP 消息信封的命名空间。
    ///</param>
    {class} procedure WriteHeaders(writer: DDN.System.Xml.DNXmlWriter; serializer: DDN.System.Xml.DNXmlSerializer; headers: DNSoapHeaderCollection; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; isEncoded: Boolean; defaultNS: string; serviceDefaultIsEncoded: Boolean; envelopeNS: string);
    ///<summary>
    ///  将指定的 SOAP 标头内容写入到 SOAP 消息。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  可以用于编写标头中。
    ///</param>
    ///  <param name="headers"><see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ，包含要写入的 SOAP 标头。
    ///</param>
    ///  <param name="envelopeNS">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 SOAP 消息信封的命名空间。
    ///</param>
    {class} procedure WriteUnknownHeaders(writer: DDN.System.Xml.DNXmlWriter; headers: DNSoapHeaderCollection; envelopeNS: string);
    ///<summary>
    ///  设置指定的 SOAP 消息的 SOAP 标头内容。
    ///</summary>
    ///  <param name="headers"><see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ，包含 SOAP 标头。
    ///</param>
    ///  <param name="target">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示 SOAP 消息。
    ///</param>
    ///  <param name="mappings">
    ///  类型的数组 <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  ，其中包含 SOAP 标头的映射。
    ///</param>
    ///  <param name="direction">
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  值，该值指示 SOAP 标头的方向。
    ///</param>
    ///  <param name="client">
    ///  当前未使用此参数。
    ///</param>
    {class} procedure SetHeaderMembers(headers: DNSoapHeaderCollection; target: DDN.mscorlib.DNObject; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; client: Boolean);
    ///<summary>
    ///  获取指定的 SOAP 消息的 SOAP 标头内容。
    ///</summary>
    ///  <param name="headers"><see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ，包含 SOAP 标头。
    ///</param>
    ///  <param name="target">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示 SOAP 消息。
    ///</param>
    ///  <param name="mappings">
    ///  类型的数组 <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  ，其中包含 SOAP 标头的映射。
    ///</param>
    ///  <param name="direction">
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  值，该值指示 SOAP 标头的方向。
    ///</param>
    ///  <param name="client">
    ///  当前未使用此参数。
    ///</param>
    {class} procedure GetHeaderMembers(headers: DNSoapHeaderCollection; target: DDN.mscorlib.DNObject; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; client: Boolean);
    ///<summary>
    ///  检查以确保，必须理解的 SOAP 标头已被理解;否则，此方法将引发异常。
    ///</summary>
    ///  <param name="headers"><see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ，包含 SOAP 标头。
    ///</param>
    ///<exception cref="T:System.Web.Services.Protocols.SoapHeaderException">
    ///  无法识别必须理解的 SOAP 标头。
    ///</exception>
    {class} procedure EnsureHeadersUnderstood(headers: DNSoapHeaderCollection);

  end;

  ///<summary><see cref="T:System.Web.Services.Protocols.SoapHeaderHandling" />
  ///  类用于获取、 设置、 写入和读取与 SOAP 消息的 SOAP 标头内容。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderHandling')]
  DNSoapHeaderHandling = interface(DDN.mscorlib.DNObject)
  ['{B275EBAF-7107-3FEC-9836-0135F4678B98}']
  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  ，包含 SOAP 消息的 SOAP 标头内容。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  可以用于编写标头中。
    ///</param>
    ///  <param name="serializer"><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可以用于读取标头中。
    ///</param>
    ///  <param name="headers"><see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ，包含 SOAP 标头。
    ///</param>
    ///  <param name="mappings">
    ///  类型的数组 <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  ，其中包含 SOAP 标头的映射。
    ///</param>
    ///  <param name="direction">
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  值，该值指示 SOAP 标头的方向。
    ///</param>
    ///  <param name="envelopeNS">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 SOAP 消息信封的命名空间。
    ///</param>
    ///  <param name="encodingStyle">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 SOAP 标头的编码样式。
    ///</param>
    ///  <param name="checkRequiredHeaders">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，该值指示是否检查所需的 SOAP 标头。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含 SOAP 消息的 SOAP 标头内容。
    ///</returns>
    function ReadHeaders(reader: DDN.System.Xml.DNXmlReader; serializer: DDN.System.Xml.DNXmlSerializer; headers: DNSoapHeaderCollection; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; envelopeNS: string; encodingStyle: string; checkRequiredHeaders: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapHeaderHandling = class(TDNGenericImport<DNSoapHeaderHandlingClass, DNSoapHeaderHandling>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7A529E6-B51D-5701-A8CE-BEC1E7BD01AF}']
  end;

  ///<summary><see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
  ///  类表示 SOAP 标头映射。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderMapping')]
  DNSoapHeaderMapping = interface(DDN.mscorlib.DNObject)
  ['{5D7D8EF6-E5B4-3C57-BFF7-7EBF4589B414}']
  { getters & setters } 

    function get_HeaderType: DDN.mscorlib.DNType;
    function get_Repeats: Boolean;
    function get_Custom: Boolean;
    function get_Direction: DNSoapHeaderDirection;
    function get_MemberInfo: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  表示 SOAP 标头映射的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  表示 SOAP 标头映射的类型。
    ///</returns>
    property HeaderType: DDN.mscorlib.DNType read get_HeaderType;
    ///<summary>
    ///  获取 <see cref="T:System.Boolean" />
    ///  值，该值指示 SOAP 标头映射是否重复。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 SOAP 标头映射重复;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Repeats: Boolean read get_Repeats;
    ///<summary>
    ///  获取 <see cref="T:System.Boolean" />
    ///  值，该值指示是否自定义 SOAP 标头映射。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 SOAP 标头映射为自定义;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Custom: Boolean read get_Custom;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  值，该值指示 SOAP 标头映射的方向。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  值，该值指示 SOAP 标头映射的方向。
    ///</returns>
    property Direction: DNSoapHeaderDirection read get_Direction;
    ///<summary>
    ///  获取 <see cref="T:System.Reflection.MemberInfo" />
    ///  与 SOAP 标头映射相关联。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MemberInfo" />
    ///  与 SOAP 标头映射相关联。
    ///</returns>
    property MemberInfo: DDN.mscorlib.DNMemberInfo read get_MemberInfo;
  end;

  TDNSoapHeaderMapping = class(TDNGenericImport<DNSoapHeaderMappingClass, DNSoapHeaderMapping>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapMessageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4881606C-0DE9-5FDF-83E3-A249BFD8D695}']
  end;

  ///<summary>
  ///  表示在 SOAP 请求或 SOAP 响应中的特定数据 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
  ///  。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapMessage')]
  DNSoapMessage = interface(DDN.mscorlib.DNObject)
  ['{CB2AAFE1-CE77-3E28-9F44-C3A1CBCAFE4F}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;

  { methods } 

    ///<summary>
    ///  获取 XML Web 服务方法的返回值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  表示 XML Web 服务方法的返回值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  XML Web 服务方法没有返回值。
    ///  或
    ///  返回值不可用。
    ///  有关详细信息，请参阅备注部分
    ///</exception>
    function GetReturnValue: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取传递到指定索引处的 XML Web 服务方法的参数。
    ///</summary>
    ///  <param name="index">
    ///  参数数组中参数的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示指定索引处的参数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数是小于 0 或大于参数数组的长度。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  访问参数中的此属性将不可用。
    ///  有关详细信息，请参阅备注部分。
    ///</exception>
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取输出参数传递到指定索引处的 XML Web 服务方法。
    ///</summary>
    ///  <param name="index">
    ///  参数数组中参数的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示指定索引处的参数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数是否大于参数数组的长度。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  访问输出参数时此属性将不可用。
    ///  有关详细信息，请参阅备注部分。
    ///</exception>
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示 <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay" />
    ///  任一属性 <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  或 <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  特性应用于 XML Web 服务方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay" />
    ///  属性 <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  或 <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  应用于 XML Web 服务方法是 <see langword="true" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  与 XML Web 服务方法的调用。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  对 XML Web 服务方法的调用中发生。
    ///<see langword="null" />
    ///  如果没有 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  在对 Web 服务方法的调用过程中发生。
    ///</returns>
    property Exception: DNSoapException read get_Exception write set_Exception;
    ///<summary>
    ///  当在派生类中重写，获取 XML Web 服务方法的 SOAP 请求所针对的表示形式的方法原型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  表示 SOAP 请求所针对的 XML Web 服务方法。
    ///</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>
    ///  应用于当前的 SOAP 请求或 SOAP 响应的 SOAP 标头集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  应用于当前的 SOAP 请求或 SOAP 响应的 SOAP 标头。
    ///<see langword="null" />
    ///  , 如果没有 SOAP 标头。
    ///</returns>
    property Headers: DNSoapHeaderCollection read get_Headers;
    ///<summary>
    ///  获取表示 SOAP 请求或 SOAP 响应的窗体中的数据 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///<returns>
    ///  只读实例 <see cref="T:System.IO.Stream" />
    ///  类。
    ///</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>
    ///  获取或设置 HTTP <see langword="Content-Type" />
    ///  的 SOAP 请求或 SOAP 响应。
    ///</summary>
    ///<returns>
    ///  HTTP <see langword="Content-Type" />
    ///  的 SOAP 请求或 SOAP 响应。
    ///  默认值为"text/xml"。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Protocols.SoapMessage.ContentType" />
    ///  访问 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  或 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  阶段。
    ///</exception>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  获取或设置的内容 <see langword="Content-Encoding" />
    ///  HTTP 标头。
    ///</summary>
    ///<returns>
    ///  内容 <see langword="Content-Encoding" />
    ///  HTTP 标头。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  是 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  或 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  阶段。
    ///</exception>
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  。
    ///</returns>
    property Stage: DNSoapMessageStage read get_Stage;
    ///<summary>
    ///  当在派生类中重写时获取 XML Web 服务的基 URL。
    ///</summary>
    ///<returns>
    ///  XML Web 服务的基 URL。
    ///</returns>
    property Url: string read get_Url;
    ///<summary>
    ///  当在派生类中重写时获取的 SOAP 请求或 SOAP 响应的 SOAPAction HTTP 请求标头字段。
    ///</summary>
    ///<returns>
    ///  SOAP 请求或 SOAP 响应的 SOAPAction HTTP 请求标头字段。
    ///</returns>
    property Action: string read get_Action;
    ///<summary>
    ///  获取用来与 XML Web 服务进行通信的 SOAP 协议的版本。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  。
    ///</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
  end;

  TDNSoapMessage = class(TDNGenericImport<DNSoapMessageClass, DNSoapMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapClientMessageClass = interface(DNSoapMessageClass)
  ['{497F0C9E-60CF-5DFE-B16C-0F4DF1C31FF7}']
  end;

  ///<summary>
  ///  表示 SOAP 请求发送或接收中的特定 XML Web 服务客户端的 SOAP 响应中的数据<see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
  ///  。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapClientMessage')]
  DNSoapClientMessage = interface(DNSoapMessage)
  ['{FEAB897A-5917-3354-B972-44B0A597EC37}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Client: DNSoapHttpClientProtocol;
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;

  { methods } 

    ///<summary>
    ///  获取 XML Web 服务方法的返回值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  表示 XML Web 服务方法的返回值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  XML Web 服务方法没有返回值。
    ///  或
    ///  返回值不可用。
    ///  有关详细信息，请参阅备注部分
    ///</exception>
    function GetReturnValue: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取传递到指定索引处的 XML Web 服务方法的参数。
    ///</summary>
    ///  <param name="index">
    ///  参数数组中参数的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示指定索引处的参数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数是小于 0 或大于参数数组的长度。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  访问参数中的此属性将不可用。
    ///  有关详细信息，请参阅备注部分。
    ///</exception>
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取输出参数传递到指定索引处的 XML Web 服务方法。
    ///</summary>
    ///  <param name="index">
    ///  参数数组中参数的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示指定索引处的参数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数是否大于参数数组的长度。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  访问输出参数时此属性将不可用。
    ///  有关详细信息，请参阅备注部分。
    ///</exception>
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示客户端是否等待服务器以完成处理 XML Web 服务方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果客户端不等待服务器能够完全处理一种方法。
    ///</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>
    ///  获取派生自的客户端代理类的实例 <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
    ///  。
    ///</summary>
    ///<returns>
    ///  客户端代理类的实例。
    ///</returns>
    property Client: DNSoapHttpClientProtocol read get_Client;
    ///<summary>
    ///  获取表示形式在 SOAP 请求所针对的 XML Web 服务方法的方法原型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  表示 SOAP 请求所针对的 XML Web 服务方法。
    ///</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>
    ///  获取 XML Web 服务的 URL。
    ///</summary>
    ///<returns>
    ///  XML Web 服务的 URL。
    ///</returns>
    property Url: string read get_Url;
    ///<summary>
    ///  获取 <see langword="SOAPAction" />
    ///  SOAP 请求或 SOAP 响应的 HTTP 请求标头字段。
    ///</summary>
    ///<returns><see langword="SOAPAction" />
    ///  SOAP 请求或 SOAP 响应的 HTTP 请求标头字段。
    ///</returns>
    property Action: string read get_Action;
    ///<summary>
    ///  获取用来与 XML Web 服务进行通信的 SOAP 协议的版本。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  。
    ///</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  与 XML Web 服务方法的调用。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  对 XML Web 服务方法的调用中发生。
    ///<see langword="null" />
    ///  如果没有 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  在对 Web 服务方法的调用过程中发生。
    ///</returns>
    property Exception: DNSoapException read get_Exception write set_Exception;
    ///<summary>
    ///  应用于当前的 SOAP 请求或 SOAP 响应的 SOAP 标头集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  应用于当前的 SOAP 请求或 SOAP 响应的 SOAP 标头。
    ///<see langword="null" />
    ///  , 如果没有 SOAP 标头。
    ///</returns>
    property Headers: DNSoapHeaderCollection read get_Headers;
    ///<summary>
    ///  获取表示 SOAP 请求或 SOAP 响应的窗体中的数据 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///<returns>
    ///  只读实例 <see cref="T:System.IO.Stream" />
    ///  类。
    ///</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>
    ///  获取或设置 HTTP <see langword="Content-Type" />
    ///  的 SOAP 请求或 SOAP 响应。
    ///</summary>
    ///<returns>
    ///  HTTP <see langword="Content-Type" />
    ///  的 SOAP 请求或 SOAP 响应。
    ///  默认值为"text/xml"。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Protocols.SoapMessage.ContentType" />
    ///  访问 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  或 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  阶段。
    ///</exception>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  获取或设置的内容 <see langword="Content-Encoding" />
    ///  HTTP 标头。
    ///</summary>
    ///<returns>
    ///  内容 <see langword="Content-Encoding" />
    ///  HTTP 标头。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  是 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  或 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  阶段。
    ///</exception>
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  。
    ///</returns>
    property Stage: DNSoapMessageStage read get_Stage;
  end;

  TDNSoapClientMessage = class(TDNGenericImport<DNSoapClientMessageClass, DNSoapClientMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerMessageClass = interface(DNSoapMessageClass)
  ['{51478656-4A84-5ACD-AF6F-2A21ABB89572}']
  end;

  ///<summary>
  ///  表示接收的 SOAP 请求或发送的 XML Web 服务方法中的特定的 SOAP 响应中的数据 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
  ///  。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerMessage')]
  DNSoapServerMessage = interface(DNSoapMessage)
  ['{DFAC0AC2-0D55-34C0-A619-DDA7C0E14D3A}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Server: DDN.mscorlib.DNObject;
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;

  { methods } 

    ///<summary>
    ///  获取 XML Web 服务方法的返回值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  表示 XML Web 服务方法的返回值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  XML Web 服务方法没有返回值。
    ///  或
    ///  返回值不可用。
    ///  有关详细信息，请参阅备注部分
    ///</exception>
    function GetReturnValue: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取传递到指定索引处的 XML Web 服务方法的参数。
    ///</summary>
    ///  <param name="index">
    ///  参数数组中参数的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示指定索引处的参数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数是小于 0 或大于参数数组的长度。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  访问参数中的此属性将不可用。
    ///  有关详细信息，请参阅备注部分。
    ///</exception>
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取输出参数传递到指定索引处的 XML Web 服务方法。
    ///</summary>
    ///  <param name="index">
    ///  参数数组中参数的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示指定索引处的参数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="index" />
    ///  参数是否大于参数数组的长度。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  访问输出参数时此属性将不可用。
    ///  有关详细信息，请参阅备注部分。
    ///</exception>
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示客户端是否等待服务器以完成处理 XML Web 服务方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果客户端等待服务器完成的处理方法。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>
    ///  获取 XML Web 服务的基 URL。
    ///</summary>
    ///<returns>
    ///  XML Web 服务的基 URL。
    ///</returns>
    property Url: string read get_Url;
    ///<summary>
    ///  获取 SOAP 请求或 SOAP 响应的 SOAPAction HTTP 请求标头字段。
    ///</summary>
    ///<returns>
    ///  SOAP 请求或 SOAP 响应的 SOAPAction HTTP 请求标头字段。
    ///</returns>
    property Action: string read get_Action;
    ///<summary>
    ///  获取用来与 XML Web 服务进行通信的 SOAP 协议的版本。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  。
    ///</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    ///<summary>
    ///  获取处理 Web 服务器上的方法调用的类的实例。
    ///</summary>
    ///<returns>
    ///  实现 XML Web 服务的类的实例。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  不是 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  或 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.BeforeSerialize" />
    ///  。
    ///</exception>
    property Server: DDN.mscorlib.DNObject read get_Server;
    ///<summary>
    ///  获取 XML Web 服务方法的 SOAP 请求所针对的表示形式的方法原型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  表示 SOAP 请求所针对的 XML Web 服务方法。
    ///</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  与 XML Web 服务方法的调用。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  对 XML Web 服务方法的调用中发生。
    ///<see langword="null" />
    ///  如果没有 <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  在对 Web 服务方法的调用过程中发生。
    ///</returns>
    property Exception: DNSoapException read get_Exception write set_Exception;
    ///<summary>
    ///  应用于当前的 SOAP 请求或 SOAP 响应的 SOAP 标头集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  应用于当前的 SOAP 请求或 SOAP 响应的 SOAP 标头。
    ///<see langword="null" />
    ///  , 如果没有 SOAP 标头。
    ///</returns>
    property Headers: DNSoapHeaderCollection read get_Headers;
    ///<summary>
    ///  获取表示 SOAP 请求或 SOAP 响应的窗体中的数据 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///<returns>
    ///  只读实例 <see cref="T:System.IO.Stream" />
    ///  类。
    ///</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>
    ///  获取或设置 HTTP <see langword="Content-Type" />
    ///  的 SOAP 请求或 SOAP 响应。
    ///</summary>
    ///<returns>
    ///  HTTP <see langword="Content-Type" />
    ///  的 SOAP 请求或 SOAP 响应。
    ///  默认值为"text/xml"。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Protocols.SoapMessage.ContentType" />
    ///  访问 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  或 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  阶段。
    ///</exception>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  获取或设置的内容 <see langword="Content-Encoding" />
    ///  HTTP 标头。
    ///</summary>
    ///<returns>
    ///  内容 <see langword="Content-Encoding" />
    ///  HTTP 标头。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  是 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  或 <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  阶段。
    ///</exception>
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  的 <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  。
    ///</returns>
    property Stage: DNSoapMessageStage read get_Stage;
  end;

  TDNSoapServerMessage = class(TDNGenericImport<DNSoapServerMessageClass, DNSoapServerMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerMethodClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D48E5C24-2B08-57E3-9542-7A24DAF6FA46}']
  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  。
    ///</summary>
    {class} function init: DNSoapServerMethod; overload;
    ///<summary>
    ///  创建一个新的 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  。
    ///</summary>
    ///  <param name="serverType"><see cref="T:System.Type" />
    ///  此方法属于。
    ///</param>
    ///  <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  用来初始化此 <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  。
    ///</param>
    {class} function init(serverType: DDN.mscorlib.DNType; methodInfo: DNLogicalMethodInfo): DNSoapServerMethod; overload;

  end;

  ///<summary>
  ///  表示属性和 XML Web 服务方法的元数据。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerMethod')]
  DNSoapServerMethod = interface(DDN.mscorlib.DNObject)
  ['{6626E454-1EA0-3187-A5C2-F6AF5EA57F1C}']
  { getters & setters } 

    function get_MethodInfo: DNLogicalMethodInfo;
    function get_ReturnSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_ParameterSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_InHeaderSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_OutHeaderSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_InHeaderMappings: TArray<DNSoapHeaderMapping>;
    function get_OutHeaderMappings: TArray<DNSoapHeaderMapping>;
    function get_Action: string;
    function get_OneWay: Boolean;
    function get_Rpc: Boolean;
    function get_BindingUse: DNSoapBindingUse;
    function get_ParameterStyle: DNSoapParameterStyle;
    function get_WsiClaims: DNWsiProfiles;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  与此 XML Web 服务方法相关联。
    ///</summary>
    ///<returns><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  与此 XML Web 服务方法相关联。
    ///</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  与来自此 Web 服务方法的返回值一起使用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  与来自此 Web 服务方法的返回值一起使用。
    ///</returns>
    property ReturnSerializer: DDN.System.Xml.DNXmlSerializer read get_ReturnSerializer;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  与传递到此 Web 服务方法的参数一起使用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  与传递到此 Web 服务方法的参数一起使用。
    ///</returns>
    property ParameterSerializer: DDN.System.Xml.DNXmlSerializer read get_ParameterSerializer;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  用于对此 Web 服务方法的 SOAP 请求。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  用于对此 Web 服务方法的 SOAP 请求。
    ///</returns>
    property InHeaderSerializer: DDN.System.Xml.DNXmlSerializer read get_InHeaderSerializer;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  与 SOAP 响应来自此 Web 服务方法一起使用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  与 SOAP 响应来自此 Web 服务方法一起使用。
    ///</returns>
    property OutHeaderSerializer: DDN.System.Xml.DNXmlSerializer read get_OutHeaderSerializer;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  用于对此 Web 服务方法的 SOAP 请求。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  用于对此 Web 服务方法的 SOAP 请求。
    ///</returns>
    property InHeaderMappings: TArray<DNSoapHeaderMapping> read get_InHeaderMappings;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  与 SOAP 响应来自此 Web 服务方法一起使用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  与 SOAP 响应来自此 Web 服务方法一起使用。
    ///</returns>
    property OutHeaderMappings: TArray<DNSoapHeaderMapping> read get_OutHeaderMappings;
    ///<summary>
    ///  获取 <see langword="SOAPAction" />
    ///  的 SOAP 请求发送到此 XML Web 服务方法的 HTTP 标头字段。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含 <see langword="SOAPAction" />
    ///  的 SOAP 请求发送到此 XML Web 服务方法的 HTTP 标头字段。
    ///</returns>
    property Action: string read get_Action;
    ///<summary>
    ///  获取 <see cref="T:System.Boolean" />
    ///  ，该值指示 XML Web 服务客户端是否等待 Web 服务器以完成处理此 XML Web 服务方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XML Web 服务客户端不会等待 Web 服务器来完全处理此 XML Web 服务方法。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>
    ///  获取 <see cref="T:System.Boolean" />
    ///  ，该值指示是否发往和来自此 XML Web 服务方法的 SOAP 消息使用 RPC 格式设置。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果发往和来自此 XML Web 服务方法的 SOAP 消息使用 RPC 格式设置;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Rpc: Boolean read get_Rpc;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值，该值指定是否为抽象类型定义或具体架构定义进行编码的 SOAP 消息发送到此 XML Web 服务方法的部分。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  值，该值指定是否为抽象类型定义或具体架构定义进行编码的 SOAP 消息发送到此 XML Web 服务方法的部分。
    ///</returns>
    property BindingUse: DNSoapBindingUse read get_BindingUse;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  对象，它指定如何在 SOAP 消息发送到此 XML Web 服务方法中设置参数的格式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  ，它指定如何在 SOAP 消息发送到此 XML Web 服务方法中设置参数的格式。
    ///</returns>
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle;
    ///<summary>
    ///  获取 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  值，该值指示此 Web 服务声明才能符合的 Web 服务互操作性 (WSI) 规范。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Services.WsiProfiles" />
    ///  值，该值指示此 Web 服务声明才能符合的 Web 服务互操作性 (WSI) 规范。
    ///</returns>
    property WsiClaims: DNWsiProfiles read get_WsiClaims;
  end;

  TDNSoapServerMethod = class(TDNGenericImport<DNSoapServerMethodClass, DNSoapServerMethod>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebClientAsyncResultClass = interface(DNObjectClass)
  ['{63988241-EDFE-5356-AC0E-9FF0E370EA34}']
  end;

  ///<summary>
  ///  提供的实现 <see cref="T:System.IAsyncResult" />
  ///  以供 XML Web 服务代理实现的标准异步方法模式。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.WebClientAsyncResult')]
  DNWebClientAsyncResult = interface(DDN.mscorlib.DNIAsyncResult)
  ['{AC44DAAA-AB35-31BF-BACB-313A93716ADC}']
  { getters & setters } 

    function get_AsyncState: DDN.mscorlib.DNObject;
    function get_AsyncWaitHandle: DDN.mscorlib.DNWaitHandle;
    function get_CompletedSynchronously: Boolean;
    function get_IsCompleted: Boolean;

  { methods } 

    ///<summary>
    ///  取消一个异步 XML Web 服务请求。
    ///</summary>
    procedure &Abort;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取最后一个参数中提供的对象 <see langword="Begin" />
    ///  方法异步调用。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  中的最后一个参数提供 <see langword="Begin" />
    ///  方法调用。
    ///</returns>
    property AsyncState: DDN.mscorlib.DNObject read get_AsyncState;
    ///<summary>
    ///  获取用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />
    ///  。
    ///</returns>
    property AsyncWaitHandle: DDN.mscorlib.DNWaitHandle read get_AsyncWaitHandle;
    ///<summary>
    ///  获取一个值，该值指示是否已同步完成 Begin 调用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 Begin 调用完成同步进行;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
    ///<summary>
    ///  获取一个值，该值指示是否已完成的异步 XML Web 服务请求。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果异步 XML Web 服务请求已完成;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNWebClientAsyncResult = class(TDNGenericImport<DNWebClientAsyncResultClass, DNWebClientAsyncResult>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebServiceHandlerFactoryClass = interface(DNObjectClass)
  ['{58CADD48-A1D7-58B8-86D8-E0F1493E7CA3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Services.Protocols.WebServiceHandlerFactory" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebServiceHandlerFactory;

  end;

  ///<summary>
  ///  动态生成 Web 服务处理程序实例，其类型实现 <see cref="T:System.Web.IHttpHandler" />
  ///  接口。
  ///</summary>
  [DNTypeName('System.Web.Services.Protocols.WebServiceHandlerFactory')]
  DNWebServiceHandlerFactory = interface(DDN.System.Web.DNIHttpHandlerFactory)
  ['{255F1769-1D32-31BA-8D77-5C21467D59CB}']
  { methods } 

    ///<summary>
    ///  返回一个 <see cref="T:System.Web.IHttpHandler" />
    ///  实例。
    ///</summary>
    ///  <param name="context"><see cref="T:System.Web.HttpContext" />
    ///  ，它提供对内部服务器对象的引用 (例如， <see cref="P:System.Web.HttpContext.Request" />
    ///  , ，<see cref="P:System.Web.HttpContext.Response" />
    ///  , ，<see cref="P:System.Web.HttpContext.Session" />
    ///  , ，和 <see cref="P:System.Web.HttpContext.Server" />
    ///  ) 用于处理 HTTP 请求。
    ///</param>
    ///  <param name="verb">
    ///  HTTP 数据传输客户端使用的方法 （GET 或 POST）。
    ///</param>
    ///  <param name="url">
    ///  所请求资源的原始 URL。
    ///</param>
    ///  <param name="filePath">
    ///  请求的资源的文件系统路径。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Web.IHttpHandler" />
    ///  实例。
    ///</returns>
    function GetHandler(context: DDN.System.Web.DNHttpContext; verb: string; url: string; filePath: string): DDN.System.Web.DNIHttpHandler;
    ///<summary>
    ///  版本 <see cref="T:System.Web.IHttpHandler" />
    ///  实例。
    ///</summary>
    ///  <param name="handler">
    ///  要释放的 <see cref="T:System.Web.IHttpHandler" />
    ///  实例。
    ///</param>
    procedure ReleaseHandler(handler: DDN.System.Web.DNIHttpHandler);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebServiceHandlerFactory = class(TDNGenericImport<DNWebServiceHandlerFactoryClass, DNWebServiceHandlerFactory>) end;


implementation


initialization
  LoadAssemblyModule('System.Web.Services.dll', True);

finalization

end.
