//----------------------------------------------------------------------------
//  System.Web.ApplicationServices.dll: System.Web.ApplicationServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Web.ApplicationServices
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Web.ApplicationServices;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Configuration,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.MembershipPasswordCompatibilityMode')]
  DNMembershipPasswordCompatibilityMode = type Integer;
  DNMembershipPasswordCompatibilityModeHelper = record helper for DNMembershipPasswordCompatibilityMode
  public const
    Framework20 = 0;
    Framework40 = 1;
  end;


  //-------------namespace: System.Web.Security----------------
  [DNTypeName('System.Web.Security.MembershipCreateStatus')]
  DNMembershipCreateStatus = type Integer;
  DNMembershipCreateStatusHelper = record helper for DNMembershipCreateStatus
  public const
    Success = 0;
    InvalidUserName = 1;
    InvalidPassword = 2;
    InvalidQuestion = 3;
    InvalidAnswer = 4;
    InvalidEmail = 5;
    DuplicateUserName = 6;
    DuplicateEmail = 7;
    UserRejected = 8;
    InvalidProviderUserKey = 9;
    DuplicateProviderUserKey = 10;
    ProviderError = 11;
  end;


  //-------------namespace: System.Web.Security----------------
  [DNTypeName('System.Web.Security.MembershipPasswordFormat')]
  DNMembershipPasswordFormat = type Integer;
  DNMembershipPasswordFormatHelper = record helper for DNMembershipPasswordFormat
  public const
    Clear = 0;
    Hashed = 1;
    Encrypted = 2;
  end;




type


{ declares }

  DNCustomLoaderAttribute = interface; // type: System.Web.Hosting.CustomLoaderAttribute, namespace: System.Web.Hosting
  DNMembershipProvider = interface; // type: System.Web.Security.MembershipProvider, namespace: System.Web.Security
  DNRoleProvider = interface; // type: System.Web.Security.RoleProvider, namespace: System.Web.Security
  DNMembershipProviderCollection = interface; // type: System.Web.Security.MembershipProviderCollection, namespace: System.Web.Security
  DNValidatePasswordEventArgs = interface; // type: System.Web.Security.ValidatePasswordEventArgs, namespace: System.Web.Security
  DNMembershipCreateUserException = interface; // type: System.Web.Security.MembershipCreateUserException, namespace: System.Web.Security
  DNMembershipPasswordException = interface; // type: System.Web.Security.MembershipPasswordException, namespace: System.Web.Security
  DNMembershipUser = interface; // type: System.Web.Security.MembershipUser, namespace: System.Web.Security
  DNMembershipUserCollection = interface; // type: System.Web.Security.MembershipUserCollection, namespace: System.Web.Security

{ delegates }

  [DNTypeName('System.Web.Security.MembershipValidatePasswordEventHandler')]
  DNMembershipValidatePasswordEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNValidatePasswordEventArgs) of object;




{ objects }

  //-------------namespace: System.Web.Hosting----------------
  DNCustomLoaderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{049BD94B-0A35-51D8-B1EA-EB0422E81D62}']
  { constructors } 

    {class} function init(customLoaderType: DDN.mscorlib.DNType): DNCustomLoaderAttribute;

  end;

  [DNTypeName('System.Web.Hosting.CustomLoaderAttribute')]
  DNCustomLoaderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{77E9C4C7-B069-391C-BEA9-E577892583DE}']
  { getters & setters } 

    function get_CustomLoaderType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomLoaderType: DDN.mscorlib.DNType read get_CustomLoaderType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCustomLoaderAttribute = class(TDNGenericImport<DNCustomLoaderAttributeClass, DNCustomLoaderAttribute>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipProviderClass = interface(DNObjectClass)
  ['{5EF06F7E-D1D6-52DD-9B3A-7F9C0893E5B8}']
  end;

  [DNTypeName('System.Web.Security.MembershipProvider')]
  DNMembershipProvider = interface(DNObject)
  ['{51D5FA24-9734-30CE-A84D-A3C7272D84AC}']
  { getters & setters } 

    function get_EnablePasswordRetrieval: Boolean;
    function get_EnablePasswordReset: Boolean;
    function get_RequiresQuestionAndAnswer: Boolean;
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_MaxInvalidPasswordAttempts: Int32;
    function get_PasswordAttemptWindow: Int32;
    function get_RequiresUniqueEmail: Boolean;
    function get_PasswordFormat: DNMembershipPasswordFormat;
    function get_MinRequiredPasswordLength: Int32;
    function get_MinRequiredNonAlphanumericCharacters: Int32;
    function get_PasswordStrengthRegularExpression: string;
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_ValidatingPassword(value: DNMembershipValidatePasswordEventHandler);
    procedure remove_ValidatingPassword(value: DNMembershipValidatePasswordEventHandler);

  { methods } 

    function CreateUser(username: string; password: string; email: string; passwordQuestion: string; passwordAnswer: string; isApproved: Boolean; providerUserKey: DDN.mscorlib.DNObject; out status: DNMembershipCreateStatus): DNMembershipUser;
    function ChangePasswordQuestionAndAnswer(username: string; password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    function GetPassword(username: string; answer: string): string;
    function ChangePassword(username: string; oldPassword: string; newPassword: string): Boolean;
    function ResetPassword(username: string; answer: string): string;
    procedure UpdateUser(user: DNMembershipUser);
    function ValidateUser(username: string; password: string): Boolean;
    function UnlockUser(userName: string): Boolean;
    function GetUser(providerUserKey: DDN.mscorlib.DNObject; userIsOnline: Boolean): DNMembershipUser; overload;
    function GetUser(username: string; userIsOnline: Boolean): DNMembershipUser; overload;
    function GetUserNameByEmail(email: string): string;
    function DeleteUser(username: string; deleteAllRelatedData: Boolean): Boolean;
    function GetAllUsers(pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    function GetNumberOfUsersOnline: Int32;
    function FindUsersByName(usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    function FindUsersByEmail(emailToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnablePasswordRetrieval: Boolean read get_EnablePasswordRetrieval;
    property EnablePasswordReset: Boolean read get_EnablePasswordReset;
    property RequiresQuestionAndAnswer: Boolean read get_RequiresQuestionAndAnswer;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property MaxInvalidPasswordAttempts: Int32 read get_MaxInvalidPasswordAttempts;
    property PasswordAttemptWindow: Int32 read get_PasswordAttemptWindow;
    property RequiresUniqueEmail: Boolean read get_RequiresUniqueEmail;
    property PasswordFormat: DNMembershipPasswordFormat read get_PasswordFormat;
    property MinRequiredPasswordLength: Int32 read get_MinRequiredPasswordLength;
    property MinRequiredNonAlphanumericCharacters: Int32 read get_MinRequiredNonAlphanumericCharacters;
    property PasswordStrengthRegularExpression: string read get_PasswordStrengthRegularExpression;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNMembershipProvider = class(TDNGenericImport<DNMembershipProviderClass, DNMembershipProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNRoleProviderClass = interface(DNObjectClass)
  ['{1211F1E5-6F8D-54C9-B892-501D6A2F27D3}']
  end;

  [DNTypeName('System.Web.Security.RoleProvider')]
  DNRoleProvider = interface(DNObject)
  ['{5AE6C6A1-359B-3F21-8F37-E61F45DA5D38}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    function IsUserInRole(username: string; roleName: string): Boolean;
    function GetRolesForUser(username: string): TArray<string>;
    procedure CreateRole(roleName: string);
    function DeleteRole(roleName: string; throwOnPopulatedRole: Boolean): Boolean;
    function RoleExists(roleName: string): Boolean;
    procedure AddUsersToRoles(usernames: TArray<string>; roleNames: TArray<string>);
    procedure RemoveUsersFromRoles(usernames: TArray<string>; roleNames: TArray<string>);
    function GetUsersInRole(roleName: string): TArray<string>;
    function GetAllRoles: TArray<string>;
    function FindUsersInRole(roleName: string; usernameToMatch: string): TArray<string>;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNRoleProvider = class(TDNGenericImport<DNRoleProviderClass, DNRoleProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipProviderCollectionClass = interface(DNObjectClass)
  ['{55B69265-C696-572B-9076-C814A66EFFC5}']
  { constructors } 

    {class} function init: DNMembershipProviderCollection;

  end;

  [DNTypeName('System.Web.Security.MembershipProviderCollection')]
  DNMembershipProviderCollection = interface(DNObject)
  ['{BAAE0D37-587F-31BA-B985-6915A9A25E93}']
  { getters & setters } 

    function get_Item(name: string): DNMembershipProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(provider: DDN.System.Configuration.DNProviderBase);
    procedure CopyTo(&array: TArray<DNMembershipProvider>; index: Int32); overload;
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNMembershipProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMembershipProviderCollection = class(TDNGenericImport<DNMembershipProviderCollectionClass, DNMembershipProviderCollection>) end;

  //-------------namespace: System.Web.Security----------------
  DNValidatePasswordEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BFBBB6AB-F398-579C-AA60-3F56033AFEB3}']
  { constructors } 

    {class} function init(userName: string; password: string; isNewUser: Boolean): DNValidatePasswordEventArgs;

  end;

  [DNTypeName('System.Web.Security.ValidatePasswordEventArgs')]
  DNValidatePasswordEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B5D6612F-9D39-38AC-AD25-01ED85FEF6EF}']
  { getters & setters } 

    function get_UserName: string;
    function get_Password: string;
    function get_IsNewUser: Boolean;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_FailureInformation: DDN.mscorlib.DNException;
    procedure set_FailureInformation(value: DDN.mscorlib.DNException);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserName: string read get_UserName;
    property Password: string read get_Password;
    property IsNewUser: Boolean read get_IsNewUser;
    property Cancel: Boolean read get_Cancel write set_Cancel;
    property FailureInformation: DDN.mscorlib.DNException read get_FailureInformation write set_FailureInformation;
  end;

  TDNValidatePasswordEventArgs = class(TDNGenericImport<DNValidatePasswordEventArgsClass, DNValidatePasswordEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipCreateUserExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7914EDC9-0E6F-5C5D-9C3E-23D7FBAC956A}']
  { constructors } 

    {class} function init(statusCode: DNMembershipCreateStatus): DNMembershipCreateUserException; overload;
    {class} function init(message: string): DNMembershipCreateUserException; overload;
    {class} function init: DNMembershipCreateUserException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMembershipCreateUserException; overload;

  end;

  [DNTypeName('System.Web.Security.MembershipCreateUserException')]
  DNMembershipCreateUserException = interface(DDN.mscorlib.DNException)
  ['{90504B9A-DD00-3E9C-B397-D6AF57035533}']
  { getters & setters } 

    function get_StatusCode: DNMembershipCreateStatus;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StatusCode: DNMembershipCreateStatus read get_StatusCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMembershipCreateUserException = class(TDNGenericImport<DNMembershipCreateUserExceptionClass, DNMembershipCreateUserException>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipPasswordExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{8F691606-7172-5BCF-846E-C7502F65C3B6}']
  { constructors } 

    {class} function init(message: string): DNMembershipPasswordException; overload;
    {class} function init: DNMembershipPasswordException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMembershipPasswordException; overload;

  end;

  [DNTypeName('System.Web.Security.MembershipPasswordException')]
  DNMembershipPasswordException = interface(DDN.mscorlib.DNException)
  ['{1DA3370B-2D1F-328F-8F5D-8CA18CF13D62}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMembershipPasswordException = class(TDNGenericImport<DNMembershipPasswordExceptionClass, DNMembershipPasswordException>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipUserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{810378B9-69C0-5671-9875-5D1255F27A5B}']
  { constructors } 

    {class} function init(providerName: string; name: string; providerUserKey: DDN.mscorlib.DNObject; email: string; passwordQuestion: string; comment: string; isApproved: Boolean; isLockedOut: Boolean; creationDate: DDN.mscorlib.DNDateTime; lastLoginDate: DDN.mscorlib.DNDateTime; lastActivityDate: DDN.mscorlib.DNDateTime; lastPasswordChangedDate: DDN.mscorlib.DNDateTime; lastLockoutDate: DDN.mscorlib.DNDateTime): DNMembershipUser;

  end;

  [DNTypeName('System.Web.Security.MembershipUser')]
  DNMembershipUser = interface(DDN.mscorlib.DNObject)
  ['{D116FD6C-9F44-34B1-B050-3CF193B8F0DC}']
  { getters & setters } 

    function get_UserName: string;
    function get_ProviderUserKey: DDN.mscorlib.DNObject;
    function get_Email: string;
    procedure set_Email(value: string);
    function get_PasswordQuestion: string;
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_IsApproved: Boolean;
    procedure set_IsApproved(value: Boolean);
    function get_IsLockedOut: Boolean;
    function get_LastLockoutDate: DDN.mscorlib.DNDateTime;
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_LastLoginDate: DDN.mscorlib.DNDateTime;
    procedure set_LastLoginDate(value: DDN.mscorlib.DNDateTime);
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    procedure set_LastActivityDate(value: DDN.mscorlib.DNDateTime);
    function get_LastPasswordChangedDate: DDN.mscorlib.DNDateTime;
    function get_IsOnline: Boolean;
    function get_ProviderName: string;

  { methods } 

    function ToString: string;
    function ResetPassword: string; overload;
    function GetPassword: string; overload;
    function GetPassword(passwordAnswer: string): string; overload;
    function ChangePassword(oldPassword: string; newPassword: string): Boolean;
    function ChangePasswordQuestionAndAnswer(password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    function ResetPassword(passwordAnswer: string): string; overload;
    function UnlockUser: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property UserName: string read get_UserName;
    property ProviderUserKey: DDN.mscorlib.DNObject read get_ProviderUserKey;
    property Email: string read get_Email write set_Email;
    property PasswordQuestion: string read get_PasswordQuestion;
    property Comment: string read get_Comment write set_Comment;
    property IsApproved: Boolean read get_IsApproved write set_IsApproved;
    property IsLockedOut: Boolean read get_IsLockedOut;
    property LastLockoutDate: DDN.mscorlib.DNDateTime read get_LastLockoutDate;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property LastLoginDate: DDN.mscorlib.DNDateTime read get_LastLoginDate write set_LastLoginDate;
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate write set_LastActivityDate;
    property LastPasswordChangedDate: DDN.mscorlib.DNDateTime read get_LastPasswordChangedDate;
    property IsOnline: Boolean read get_IsOnline;
    property ProviderName: string read get_ProviderName;
  end;

  TDNMembershipUser = class(TDNGenericImport<DNMembershipUserClass, DNMembershipUser>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipUserCollectionClass = interface(DNObjectClass)
  ['{E4E65B87-4ED5-5B1F-AE87-AFBA5B8F68E5}']
  { constructors } 

    {class} function init: DNMembershipUserCollection;

  end;

  [DNTypeName('System.Web.Security.MembershipUserCollection')]
  DNMembershipUserCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{BCFB2F51-17F0-3E90-B24F-5E9A13AABD22}']
  { getters & setters } 

    function get_Item(name: string): DNMembershipUser;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(user: DNMembershipUser);
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DNMembershipUser>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNMembershipUser read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMembershipUserCollection = class(TDNGenericImport<DNMembershipUserCollectionClass, DNMembershipUserCollection>) end;


implementation


initialization
  LoadAssemblyModule('System.Web.ApplicationServices.dll', True);

finalization

end.
