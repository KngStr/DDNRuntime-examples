//----------------------------------------------------------------------------
//  System.Xaml.dll: System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Xaml
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Xaml;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xml;

type

{ enums }

  //-------------namespace: System.Xaml.Schema----------------
  ///<summary>
  ///  指定时，强制执行的属性上设置在 XAML 中，所报告的语法限制 <see cref="T:System.Xaml.XamlDirective" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xaml.Schema.AllowedMemberLocations')]
  DNAllowedMemberLocations = type Integer;
  DNAllowedMemberLocationsHelper = record helper for DNAllowedMemberLocations
  public const
    ///<summary>
    ///  不能完全在 XAML 中设置属性。
    ///  这是默认设置。
    ///</summary>
    None = 0;
    ///<summary>
    ///  XAML 特性语法中，可以设置属性。
    ///</summary>
    Attribute = 1;
    ///<summary>
    ///  XAML 属性元素语法中，可以设置属性。
    ///</summary>
    MemberElement = 2;
    ///<summary>
    ///  可以在任何一个属性设置 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" />
    ///  或 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" />
    ///  位置。
    ///  （此枚举成员定义为这些值的组合中）。
    ///</summary>
    Any = 3;
  end;


  //-------------namespace: System.Xaml.Schema----------------
  ///<summary>
  ///  定义序列化行为，如报告的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xaml.Schema.ShouldSerializeResult')]
  DNShouldSerializeResult = type Integer;
  DNShouldSerializeResultHelper = record helper for DNShouldSerializeResult
  public const
    ///<summary>
    ///  未知，推迟到该成员的类型。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  序列化结果。
    ///</summary>
    True = 1;
    ///<summary>
    ///  根本不序列化结果。
    ///</summary>
    False = 2;
  end;


  //-------------namespace: System.Xaml.Schema----------------
  ///<summary>
  ///  描述使用的 XAML 成员的集合形式 （如果有）。
  ///</summary>
  [DNTypeName('System.Xaml.Schema.XamlCollectionKind')]
  DNXamlCollectionKind = type Integer;
  DNXamlCollectionKindHelper = record helper for DNXamlCollectionKind
  public const
    ///<summary>
    ///  XAML 成员不支持集合。
    ///</summary>
    None = 0;
    ///<summary>
    ///  支持 XAML 成员的列表或集合。
    ///</summary>
    Collection = 1;
    ///<summary>
    ///  XAML 成员支持字典 （键 / 值对）。
    ///</summary>
    Dictionary = 2;
    ///<summary>
    ///  XAML 成员支持数组式的集合。
    ///</summary>
    Array_ = 3;
  end;


  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  描述当前正在 XAML 读取器处理的节点的类型。
  ///</summary>
  [DNTypeName('System.Xaml.XamlNodeType')]
  DNXamlNodeType = type Integer;
  DNXamlNodeTypeHelper = record helper for DNXamlNodeType
  public const
    ///<summary>
    ///  读取器未定位在真正的节点 （例如，读取器可能会在文件结尾）。
    ///</summary>
    None = 0;
    ///<summary>
    ///  读取器位于对象节点的开头。
    ///</summary>
    StartObject = 1;
    ///<summary>
    ///  读取器在对象节点和编写默认值或隐式值，而不是指定的对象值。
    ///</summary>
    GetObject = 2;
    ///<summary>
    ///  读取器末尾的对象节点。
    ///</summary>
    EndObject = 3;
    ///<summary>
    ///  读取器位于成员节点的开头。
    ///</summary>
    StartMember = 4;
    ///<summary>
    ///  读取器位于成员节点的末尾。
    ///</summary>
    EndMember = 5;
    ///<summary>
    ///  读取器都在一个节点，并且正在处理值内。
    ///</summary>
    Value = 6;
    ///<summary>
    ///  读取器位于 XML 命名空间声明内。
    ///</summary>
    NamespaceDeclaration = 7;
  end;




type


{ declares }

  DNIValueSerializerContext = interface; // type: System.Windows.Markup.IValueSerializerContext, namespace: System.Windows.Markup
  DNIComponentConnector = interface; // type: System.Windows.Markup.IComponentConnector, namespace: System.Windows.Markup
  DNINameScope = interface; // type: System.Windows.Markup.INameScope, namespace: System.Windows.Markup
  DNINameScopeDictionary = interface; // type: System.Windows.Markup.INameScopeDictionary, namespace: System.Windows.Markup
  DNIProvideValueTarget = interface; // type: System.Windows.Markup.IProvideValueTarget, namespace: System.Windows.Markup
  DNIQueryAmbient = interface; // type: System.Windows.Markup.IQueryAmbient, namespace: System.Windows.Markup
  DNIUriContext = interface; // type: System.Windows.Markup.IUriContext, namespace: System.Windows.Markup
  DNIXamlTypeResolver = interface; // type: System.Windows.Markup.IXamlTypeResolver, namespace: System.Windows.Markup
  DNIAmbientProvider = interface; // type: System.Xaml.IAmbientProvider, namespace: System.Xaml
  DNIAttachedPropertyStore = interface; // type: System.Xaml.IAttachedPropertyStore, namespace: System.Xaml
  DNIDestinationTypeProvider = interface; // type: System.Xaml.IDestinationTypeProvider, namespace: System.Xaml
  DNINamespacePrefixLookup = interface; // type: System.Xaml.INamespacePrefixLookup, namespace: System.Xaml
  DNIRootObjectProvider = interface; // type: System.Xaml.IRootObjectProvider, namespace: System.Xaml
  DNIXamlIndexingReader = interface; // type: System.Xaml.IXamlIndexingReader, namespace: System.Xaml
  DNIXamlLineInfo = interface; // type: System.Xaml.IXamlLineInfo, namespace: System.Xaml
  DNIXamlLineInfoConsumer = interface; // type: System.Xaml.IXamlLineInfoConsumer, namespace: System.Xaml
  DNIXamlNameProvider = interface; // type: System.Xaml.IXamlNameProvider, namespace: System.Xaml
  DNIXamlNameResolver = interface; // type: System.Xaml.IXamlNameResolver, namespace: System.Xaml
  DNIXamlNamespaceResolver = interface; // type: System.Xaml.IXamlNamespaceResolver, namespace: System.Xaml
  DNIXamlObjectWriterFactory = interface; // type: System.Xaml.IXamlObjectWriterFactory, namespace: System.Xaml
  DNIXamlSchemaContextProvider = interface; // type: System.Xaml.IXamlSchemaContextProvider, namespace: System.Xaml
  DNAcceptedMarkupExtensionExpressionTypeAttribute = interface; // type: System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute, namespace: System.Windows.Markup
  DNAmbientAttribute = interface; // type: System.Windows.Markup.AmbientAttribute, namespace: System.Windows.Markup
  DNConstructorArgumentAttribute = interface; // type: System.Windows.Markup.ConstructorArgumentAttribute, namespace: System.Windows.Markup
  DNContentPropertyAttribute = interface; // type: System.Windows.Markup.ContentPropertyAttribute, namespace: System.Windows.Markup
  DNContentWrapperAttribute = interface; // type: System.Windows.Markup.ContentWrapperAttribute, namespace: System.Windows.Markup
  DNDependsOnAttribute = interface; // type: System.Windows.Markup.DependsOnAttribute, namespace: System.Windows.Markup
  DNDictionaryKeyPropertyAttribute = interface; // type: System.Windows.Markup.DictionaryKeyPropertyAttribute, namespace: System.Windows.Markup
  DNMarkupExtensionBracketCharactersAttribute = interface; // type: System.Windows.Markup.MarkupExtensionBracketCharactersAttribute, namespace: System.Windows.Markup
  DNMarkupExtensionReturnTypeAttribute = interface; // type: System.Windows.Markup.MarkupExtensionReturnTypeAttribute, namespace: System.Windows.Markup
  DNNameScopePropertyAttribute = interface; // type: System.Windows.Markup.NameScopePropertyAttribute, namespace: System.Windows.Markup
  DNRootNamespaceAttribute = interface; // type: System.Windows.Markup.RootNamespaceAttribute, namespace: System.Windows.Markup
  DNRuntimeNamePropertyAttribute = interface; // type: System.Windows.Markup.RuntimeNamePropertyAttribute, namespace: System.Windows.Markup
  DNTrimSurroundingWhitespaceAttribute = interface; // type: System.Windows.Markup.TrimSurroundingWhitespaceAttribute, namespace: System.Windows.Markup
  DNUidPropertyAttribute = interface; // type: System.Windows.Markup.UidPropertyAttribute, namespace: System.Windows.Markup
  DNUsableDuringInitializationAttribute = interface; // type: System.Windows.Markup.UsableDuringInitializationAttribute, namespace: System.Windows.Markup
  DNWhitespaceSignificantCollectionAttribute = interface; // type: System.Windows.Markup.WhitespaceSignificantCollectionAttribute, namespace: System.Windows.Markup
  DNXamlDeferLoadAttribute = interface; // type: System.Windows.Markup.XamlDeferLoadAttribute, namespace: System.Windows.Markup
  DNXamlSetMarkupExtensionAttribute = interface; // type: System.Windows.Markup.XamlSetMarkupExtensionAttribute, namespace: System.Windows.Markup
  DNXamlSetTypeConverterAttribute = interface; // type: System.Windows.Markup.XamlSetTypeConverterAttribute, namespace: System.Windows.Markup
  DNXmlLangPropertyAttribute = interface; // type: System.Windows.Markup.XmlLangPropertyAttribute, namespace: System.Windows.Markup
  DNXmlnsCompatibleWithAttribute = interface; // type: System.Windows.Markup.XmlnsCompatibleWithAttribute, namespace: System.Windows.Markup
  DNXmlnsDefinitionAttribute = interface; // type: System.Windows.Markup.XmlnsDefinitionAttribute, namespace: System.Windows.Markup
  DNXmlnsPrefixAttribute = interface; // type: System.Windows.Markup.XmlnsPrefixAttribute, namespace: System.Windows.Markup
  DNNameReferenceConverter = interface; // type: System.Windows.Markup.NameReferenceConverter, namespace: System.Windows.Markup
  DNXamlTypeTypeConverter = interface; // type: System.Xaml.Schema.XamlTypeTypeConverter, namespace: System.Xaml.Schema
  DNXamlSetValueEventArgs = interface; // type: System.Windows.Markup.XamlSetValueEventArgs, namespace: System.Windows.Markup
  DNXamlSetMarkupExtensionEventArgs = interface; // type: System.Windows.Markup.XamlSetMarkupExtensionEventArgs, namespace: System.Windows.Markup
  DNXamlSetTypeConverterEventArgs = interface; // type: System.Windows.Markup.XamlSetTypeConverterEventArgs, namespace: System.Windows.Markup
  DNXamlObjectEventArgs = interface; // type: System.Xaml.XamlObjectEventArgs, namespace: System.Xaml
  DNXamlException = interface; // type: System.Xaml.XamlException, namespace: System.Xaml
  DNXamlDuplicateMemberException = interface; // type: System.Xaml.XamlDuplicateMemberException, namespace: System.Xaml
  DNXamlInternalException = interface; // type: System.Xaml.XamlInternalException, namespace: System.Xaml
  DNXamlObjectReaderException = interface; // type: System.Xaml.XamlObjectReaderException, namespace: System.Xaml
  DNXamlObjectWriterException = interface; // type: System.Xaml.XamlObjectWriterException, namespace: System.Xaml
  DNXamlParseException = interface; // type: System.Xaml.XamlParseException, namespace: System.Xaml
  DNXamlSchemaException = interface; // type: System.Xaml.XamlSchemaException, namespace: System.Xaml
  DNXamlXmlWriterException = interface; // type: System.Xaml.XamlXmlWriterException, namespace: System.Xaml
  DNXamlLoadPermission = interface; // type: System.Xaml.Permissions.XamlLoadPermission, namespace: System.Xaml.Permissions
  DNMarkupExtension = interface; // type: System.Windows.Markup.MarkupExtension, namespace: System.Windows.Markup
  DNArrayExtension = interface; // type: System.Windows.Markup.ArrayExtension, namespace: System.Windows.Markup
  DNNullExtension = interface; // type: System.Windows.Markup.NullExtension, namespace: System.Windows.Markup
  DNReference = interface; // type: System.Windows.Markup.Reference, namespace: System.Windows.Markup
  DNStaticExtension = interface; // type: System.Windows.Markup.StaticExtension, namespace: System.Windows.Markup
  DNTypeExtension = interface; // type: System.Windows.Markup.TypeExtension, namespace: System.Windows.Markup
  DNMemberDefinition = interface; // type: System.Windows.Markup.MemberDefinition, namespace: System.Windows.Markup
  DNPropertyDefinition = interface; // type: System.Windows.Markup.PropertyDefinition, namespace: System.Windows.Markup
  DNValueSerializer = interface; // type: System.Windows.Markup.ValueSerializer, namespace: System.Windows.Markup
  DNDateTimeValueSerializer = interface; // type: System.Windows.Markup.DateTimeValueSerializer, namespace: System.Windows.Markup
  DNXData = interface; // type: System.Windows.Markup.XData, namespace: System.Windows.Markup
  DNAmbientPropertyValue = interface; // type: System.Xaml.AmbientPropertyValue, namespace: System.Xaml
  DNAttachableMemberIdentifier = interface; // type: System.Xaml.AttachableMemberIdentifier, namespace: System.Xaml
  DNAttachablePropertyServices = interface; // type: System.Xaml.AttachablePropertyServices, namespace: System.Xaml
  DNNamespaceDeclaration = interface; // type: System.Xaml.NamespaceDeclaration, namespace: System.Xaml
  DNXamlAccessLevel = interface; // type: System.Xaml.Permissions.XamlAccessLevel, namespace: System.Xaml.Permissions
  DNXamlMemberInvoker = interface; // type: System.Xaml.Schema.XamlMemberInvoker, namespace: System.Xaml.Schema
  DNXamlTypeInvoker = interface; // type: System.Xaml.Schema.XamlTypeInvoker, namespace: System.Xaml.Schema
  DNXamlTypeName = interface; // type: System.Xaml.Schema.XamlTypeName, namespace: System.Xaml.Schema
  DNXamlValueConverter<TConverterBase> = interface; // type: System.Xaml.Schema.XamlValueConverter`1, namespace: System.Xaml.Schema
  DNXamlDeferringLoader = interface; // type: System.Xaml.XamlDeferringLoader, namespace: System.Xaml
  DNXamlLanguage = interface; // type: System.Xaml.XamlLanguage, namespace: System.Xaml
  DNXamlMember = interface; // type: System.Xaml.XamlMember, namespace: System.Xaml
  DNXamlDirective = interface; // type: System.Xaml.XamlDirective, namespace: System.Xaml
  DNXamlNodeList = interface; // type: System.Xaml.XamlNodeList, namespace: System.Xaml
  DNXamlNodeQueue = interface; // type: System.Xaml.XamlNodeQueue, namespace: System.Xaml
  DNXamlReader = interface; // type: System.Xaml.XamlReader, namespace: System.Xaml
  DNXamlBackgroundReader = interface; // type: System.Xaml.XamlBackgroundReader, namespace: System.Xaml
  DNXamlObjectReader = interface; // type: System.Xaml.XamlObjectReader, namespace: System.Xaml
  DNXamlXmlReader = interface; // type: System.Xaml.XamlXmlReader, namespace: System.Xaml
  DNXamlReaderSettings = interface; // type: System.Xaml.XamlReaderSettings, namespace: System.Xaml
  DNXamlObjectReaderSettings = interface; // type: System.Xaml.XamlObjectReaderSettings, namespace: System.Xaml
  DNXamlXmlReaderSettings = interface; // type: System.Xaml.XamlXmlReaderSettings, namespace: System.Xaml
  DNXamlSchemaContext = interface; // type: System.Xaml.XamlSchemaContext, namespace: System.Xaml
  DNXamlSchemaContextSettings = interface; // type: System.Xaml.XamlSchemaContextSettings, namespace: System.Xaml
  DNXamlServices = interface; // type: System.Xaml.XamlServices, namespace: System.Xaml
  DNXamlType = interface; // type: System.Xaml.XamlType, namespace: System.Xaml
  DNXamlWriter = interface; // type: System.Xaml.XamlWriter, namespace: System.Xaml
  DNXamlObjectWriter = interface; // type: System.Xaml.XamlObjectWriter, namespace: System.Xaml
  DNXamlXmlWriter = interface; // type: System.Xaml.XamlXmlWriter, namespace: System.Xaml
  DNXamlWriterSettings = interface; // type: System.Xaml.XamlWriterSettings, namespace: System.Xaml
  DNXamlObjectWriterSettings = interface; // type: System.Xaml.XamlObjectWriterSettings, namespace: System.Xaml
  DNXamlXmlWriterSettings = interface; // type: System.Xaml.XamlXmlWriterSettings, namespace: System.Xaml


{ objects }

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  定义提供给 <see cref="T:System.Windows.Markup.ValueSerializer" />
  ///  的上下文。
  ///  该上下文可用于允许序列化的特殊情况或不同的序列化模式。
  ///</summary>
  [DNTypeName('System.Windows.Markup.IValueSerializerContext')]
  DNIValueSerializerContext = interface(DDN.System.DNITypeDescriptorContext)
  ['{8304769D-A06C-3C84-98F6-6690BC5727C4}']
  { methods } 

    ///<summary>
    ///  获取与指定类型关联的 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  要转换的值的类型。
    ///</param>
    ///<returns>
    ///  可以序列化指定类型的 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  。
    ///</returns>
    function GetValueSerializerFor(&type: DDN.mscorlib.DNType): DNValueSerializer; overload;
    ///<summary>
    ///  获取给定属性描述符的 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  。
    ///</summary>
    ///  <param name="descriptor">
    ///  要转换的属性的描述符。
    ///</param>
    ///<returns>
    ///  一个可以序列化指定属性的 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  。
    ///</returns>
    function GetValueSerializerFor(descriptor: DDN.System.DNPropertyDescriptor): DNValueSerializer; overload;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  为命名 XAML 元素提供标记编译和工具支持，以及将事件处理程序附加到这些元素。
  ///</summary>
  [DNTypeName('System.Windows.Markup.IComponentConnector')]
  DNIComponentConnector = interface(DDN.mscorlib.DNObject)
  ['{0ED59497-2EB0-352E-9F49-BD380F12EB62}']
  { methods } 

    ///<summary>
    ///  将事件和名称附加到已编译的内容。
    ///</summary>
    ///  <param name="connectionId">
    ///  用于区分调用的标识符标记。
    ///</param>
    ///  <param name="target">
    ///  事件和名称所连接到的目标。
    ///</param>
    procedure Connect(connectionId: Int32; target: DDN.mscorlib.DNObject);
    ///<summary>
    ///  加载组件的已编译页面。
    ///</summary>
    procedure InitializeComponent;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  针对如何在特定的 XAML 名称范围内访问元素的名称，以及如何强制该 XAML 名称范围内名称的唯一性，定义一个协定。
  ///</summary>
  [DNTypeName('System.Windows.Markup.INameScope')]
  DNINameScope = interface(DDN.mscorlib.DNObject)
  ['{2302495C-8AFF-3D56-B199-CC3E825247EF}']
  { methods } 

    ///<summary>
    ///  将提供的名称注册到当前的 XAML 名称范围中。
    ///</summary>
    ///  <param name="name">
    ///  要注册的名称。
    ///</param>
    ///  <param name="scopedElement">
    ///  提供的 <paramref name="name" />
    ///  所引用的特定元素。
    ///</param>
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    ///<summary>
    ///  从当前的 XAML 名称范围中注销提供的名称。
    ///</summary>
    ///  <param name="name">
    ///  要注销的名称。
    ///</param>
    procedure UnregisterName(name: string);
    ///<summary>
    ///  返回具有提供的标识名称的对象。
    ///</summary>
    ///  <param name="name">
    ///  发出请求的对象的名称标识符。
    ///</param>
    ///<returns>
    ///  对象（如果找到）。
    ///  如果找不到该名称的对象，则返回 <see langword="null" />
    ///  。
    ///</returns>
    function FindName(name: string): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  将统一在一起可枚举的集合和字典支持进行了适用于公开在 XAML 名称范围中的名称的字典。
  ///</summary>
  [DNTypeName('System.Windows.Markup.INameScopeDictionary')]
  DNINameScopeDictionary = interface(DNINameScope)
  ['{0A135675-CCC1-3883-8BC7-DE455C166C6E}']
  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  表示一个服务，该服务报告标记扩展评估的情景对象和属性的关系。
  ///</summary>
  [DNTypeName('System.Windows.Markup.IProvideValueTarget')]
  DNIProvideValueTarget = interface(DDN.mscorlib.DNObject)
  ['{C702B659-BC6B-360F-A405-5E97AAFD7018}']
  { getters & setters } 

    function get_TargetObject: DDN.mscorlib.DNObject;
    function get_TargetProperty: DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取被报告的目标对象。
    ///</summary>
    ///<returns>
    ///  被报告的目标对象。
    ///</returns>
    property TargetObject: DDN.mscorlib.DNObject read get_TargetObject;
    ///<summary>
    ///  获取正在报告的目标属性的标识符。
    ///</summary>
    ///<returns>
    ///  正在报告的目标属性的标识符。
    ///</returns>
    property TargetProperty: DDN.mscorlib.DNObject read get_TargetProperty;
  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  是否有指定的属性应被视为为环境当前作用域中的查询。
  ///</summary>
  [DNTypeName('System.Windows.Markup.IQueryAmbient')]
  DNIQueryAmbient = interface(DDN.mscorlib.DNObject)
  ['{2CD1EF90-10D1-3B19-88E4-F37D6E110359}']
  { methods } 

    ///<summary>
    ///  是否指定的命名的属性可被视为环境当前作用域中的查询。
    ///</summary>
    ///  <param name="propertyName">
    ///  要检查环境状态的属性的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果请求的属性可被视为视为环境。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsAmbientPropertyAvailable(propertyName: string): Boolean;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  表示一个服务，该服务可使用应用程序上下文将提供的相对 URI 解析成绝对 URI。
  ///</summary>
  [DNTypeName('System.Windows.Markup.IUriContext')]
  DNIUriContext = interface(DDN.mscorlib.DNObject)
  ['{D1DFA023-9E55-3C49-88C9-406911354C48}']
  { getters & setters } 

    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);

  { propertys } 

    ///<summary>
    ///  获取或设置当前应用程序上下文的基 URI。
    ///</summary>
    ///<returns>
    ///  应用程序上下文的基 URI。
    ///</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  表示一种服务，该服务将 XAML 标记中的已命名元素解析为适当的 CLR 类型。
  ///</summary>
  [DNTypeName('System.Windows.Markup.IXamlTypeResolver')]
  DNIXamlTypeResolver = interface(DDN.mscorlib.DNObject)
  ['{77F75146-A83F-3929-ACEB-7F623F555CC3}']
  { methods } 

    ///<summary>
    ///  将已命名的 XAML 类型解析为相应的 CLR <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///  <param name="qualifiedTypeName">
    ///  要解析的 XAML 类型名称。
    ///  该类型名称可以由 XML 命名空间的前缀限定。
    ///  否则将采用当前默认的 XML 命名空间。
    ///</param>
    ///<returns><paramref name="qualifiedTypeName" />
    ///  要解析为的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    function Resolve(qualifiedTypeName: string): DDN.mscorlib.DNType;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  表示一种服务，可以返回有关环境属性或类型转换器和标记扩展的环境类型的信息项。
  ///</summary>
  [DNTypeName('System.Xaml.IAmbientProvider')]
  DNIAmbientProvider = interface(DDN.mscorlib.DNObject)
  ['{56B9C37F-8025-3048-B3AD-F55A05CCA21B}']
  { methods } 

    function GetFirstAmbientValue(ceilingTypes: DDN.mscorlib.DNIEnumerable<DNXamlType>; properties: TArray<DNXamlMember>): DNAmbientPropertyValue; overload;
    ///<summary>
    ///  返回是可能的请求类型的环境类型的第一个匹配对象。
    ///</summary>
    ///  <param name="types">
    ///  要从中检索环境类型信息的类型集。
    ///</param>
    ///<returns>
    ///  所请求集的的第一个结果对象。
    ///</returns>
    function GetFirstAmbientValue(types: TArray<DNXamlType>): DDN.mscorlib.DNObject; overload;
    function GetAllAmbientValues(ceilingTypes: DDN.mscorlib.DNIEnumerable<DNXamlType>; properties: TArray<DNXamlMember>): DDN.mscorlib.DNIEnumerable<DNAmbientPropertyValue>; overload;
    ///<summary>
    ///  返回针对请求的类型可能的环境类型的对象实例的可枚举集合。
    ///</summary>
    ///  <param name="types">
    ///  要从中检索环境类型信息的类型集。
    ///</param>
    ///<returns>
    ///  表示针对所请求的值的对象的可枚举集 <see cref="T:System.Xaml.XamlType" />
    ///  标识符。
    ///</returns>
    function GetAllAmbientValues(types: TArray<DNXamlType>): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNObject>; overload;
    function GetAllAmbientValues(ceilingTypes: DDN.mscorlib.DNIEnumerable<DNXamlType>; searchLiveStackOnly: Boolean; types: DDN.mscorlib.DNIEnumerable<DNXamlType>; properties: TArray<DNXamlMember>): DDN.mscorlib.DNIEnumerable<DNAmbientPropertyValue>; overload;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  表示一个附加成员用于存储对象在其中设置附加的成员。
  ///  然后可以使用引用此可附加成员存储 <see cref="T:System.Xaml.AttachablePropertyServices" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xaml.IAttachedPropertyStore')]
  DNIAttachedPropertyStore = interface(DDN.mscorlib.DNObject)
  ['{E6EAA35F-4FAE-3110-B9D1-ACF9C49C256D}']
  { getters & setters } 

    function get_PropertyCount: Int32;

  { methods } 

    procedure CopyPropertiesTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<DNAttachableMemberIdentifier, DDN.mscorlib.DNObject>>; index: Int32);
    ///<summary>
    ///  指定可附加成员由该可附加成员存储区中移除的项。
    ///</summary>
    ///  <param name="attachableMemberIdentifier">
    ///  要移除的可附加成员项 XAML 类型系统标识符。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果可附加成员条目 <paramref name="attachableMemberIdentifier" />
    ///  存储区中找到并移除; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function RemoveProperty(attachableMemberIdentifier: DNAttachableMemberIdentifier): Boolean;
    ///<summary>
    ///  指定可附加成员设置一个值，指定存储中。
    ///</summary>
    ///  <param name="attachableMemberIdentifier">
    ///  要设置的附加成员条目 XAML 类型系统标识符。
    ///</param>
    ///  <param name="value">
    ///  要设置的值。
    ///</param>
    procedure SetProperty(attachableMemberIdentifier: DNAttachableMemberIdentifier; value: DDN.mscorlib.DNObject);
    function TryGetProperty(attachableMemberIdentifier: DNAttachableMemberIdentifier; out value: DDN.mscorlib.DNObject): Boolean;

  { propertys } 

    ///<summary>
    ///  获取此可附加成员存储区中的条目可附加的成员的计数。
    ///</summary>
    ///<returns>
    ///  存储区中的条目整数计数。
    ///</returns>
    property PropertyCount: Int32 read get_PropertyCount;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  表示一种服务，可以返回目标类型的 CLR 类型系统标识符。
  ///  当反射或其他机制间接报告属性设置操作的目标类型时，目标类型是相关。
  ///</summary>
  [DNTypeName('System.Xaml.IDestinationTypeProvider')]
  DNIDestinationTypeProvider = interface(DDN.mscorlib.DNObject)
  ['{930DD1DE-CD98-3308-8B99-A1C4B8DF3E5B}']
  { methods } 

    ///<summary>
    ///  返回 CLR <see cref="T:System.Type" />
    ///  标识相关的类型转换器或标记扩展的目标类型。
    ///</summary>
    ///<returns>
    ///  CLR <see cref="T:System.Type" />
    ///  目标类型的值。
    ///</returns>
    function GetDestinationType: DDN.mscorlib.DNType;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  表示一个可以返回给使用者的 XAML 命名空间映射的建议的前缀的服务。
  ///  使用者可能包括设计环境或序列化程序。
  ///</summary>
  [DNTypeName('System.Xaml.INamespacePrefixLookup')]
  DNINamespacePrefixLookup = interface(DDN.mscorlib.DNObject)
  ['{8DE00F54-F37C-3432-BCCB-F0FB4FCDF5A7}']
  { methods } 

    ///<summary>
    ///  返回指定的 XAML 命名空间标识符的建议的前缀。
    ///</summary>
    ///  <param name="ns">
    ///  为其获取前缀的 XAML 命名空间标识符字符串。
    ///</param>
    ///<returns>
    ///  建议的前缀。
    ///</returns>
    function LookupPrefix(ns: string): string;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  描述可返回正在分析的标记的根对象的服务。
  ///</summary>
  [DNTypeName('System.Xaml.IRootObjectProvider')]
  DNIRootObjectProvider = interface(DDN.mscorlib.DNObject)
  ['{379E5C3B-82CF-35A0-8211-CC0947F989AC}']
  { getters & setters } 

    function get_RootObject: DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  从标记或对象图中获取根对象。
    ///</summary>
    ///<returns>
    ///  根对象。
    ///</returns>
    property RootObject: DDN.mscorlib.DNObject read get_RootObject;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  提供了一种服务，表示索引节点控件基于节点的 XAML 读取器的简单实现。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlIndexingReader')]
  DNIXamlIndexingReader = interface(DDN.mscorlib.DNObject)
  ['{A39E4ACA-0A4C-38B8-BC2B-8222A771B8AE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CurrentIndex: Int32;
    procedure set_CurrentIndex(value: Int32);

  { propertys } 

    ///<summary>
    ///  获取当前外部节点集中的节点数。
    ///</summary>
    ///<returns>
    ///  在当前外部节点的节点数设置。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取或设置 XAML 节点的索引的列表视图的当前读取器位置的索引号。
    ///</summary>
    ///<returns>
    ///  当前的读取器位置的索引号。
    ///</returns>
    property CurrentIndex: Int32 read get_CurrentIndex write set_CurrentIndex;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  描述用于报告的 XAML 读取器实现中的文本行信息的服务。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlLineInfo')]
  DNIXamlLineInfo = interface(DDN.mscorlib.DNObject)
  ['{86EFA016-F065-321A-92C8-5E9DC6D15118}']
  { getters & setters } 

    function get_HasLineInfo: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { propertys } 

    ///<summary>
    ///  获取一个值，指定是否使用行信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行信息可用，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasLineInfo: Boolean read get_HasLineInfo;
    ///<summary>
    ///  获取指向报表的行号。
    ///</summary>
    ///<returns>
    ///  报告的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取报表的行位置。
    ///</summary>
    ///<returns>
    ///  报告的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  描述 XAML 编写器可以使用报告的行信息，然后在输出中包含的信息的服务。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlLineInfoConsumer')]
  DNIXamlLineInfoConsumer = interface(DDN.mscorlib.DNObject)
  ['{79FADA26-2043-3B43-89C9-568038A21A77}']
  { getters & setters } 

    function get_ShouldProvideLineInfo: Boolean;

  { methods } 

    ///<summary>
    ///  收集行信息。
    ///</summary>
    ///  <param name="lineNumber">
    ///  要在输出中使用的行号。
    ///</param>
    ///  <param name="linePosition">
    ///  要在输出中使用的行位置。
    ///</param>
    procedure SetLineInfo(lineNumber: Int32; linePosition: Int32);

  { propertys } 

    ///<summary>
    ///  获取一个值，确定是否应提供行信息服务值，并因此，还应调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />
    ///  在相关时。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行信息由实现;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ShouldProvideLineInfo: Boolean read get_ShouldProvideLineInfo;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  提供过程中使用的服务保存并写入操作输入对象，并返回 XAML 名称。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlNameProvider')]
  DNIXamlNameProvider = interface(DDN.mscorlib.DNObject)
  ['{12721D30-EFC7-35C6-8C77-BD63C5288BC7}']
  { methods } 

    ///<summary>
    ///  检索指定对象的 XAML 名称。
    ///</summary>
    ///  <param name="value">
    ///  要获取其名称的对象。
    ///</param>
    ///<returns>
    ///  所请求对象的 XAML 名称值。
    ///</returns>
    function GetName(value: DDN.mscorlib.DNObject): string;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  描述可以返回由 XAML 名称指定的对象，则或者，返回一个标记，用于将延迟名称解析的服务。
  ///  该服务还可以返回 XAML 名称范围中的所有命名对象的可枚举集合。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlNameResolver')]
  DNIXamlNameResolver = interface(DDN.mscorlib.DNObject)
  ['{B5A81687-32FF-35AA-B88E-FEF1F475E29C}']
  { getters & setters } 

    function get_IsFixupTokenAvailable: Boolean;

  { events } 

    procedure add_OnNameScopeInitializationComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_OnNameScopeInitializationComplete(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  从解析对象名称引用。
    ///</summary>
    ///  <param name="name">
    ///  要解析的名称引用。
    ///</param>
    ///<returns>
    ///  已解析的对象;或者为 null。
    ///</returns>
    function Resolve(name: string): DDN.mscorlib.DNObject; overload;
    function Resolve(name: string; out isFullyInitialized: Boolean): DDN.mscorlib.DNObject; overload;
    function GetFixupToken(names: DDN.mscorlib.DNIEnumerable<string>): DDN.mscorlib.DNObject; overload;
    function GetFixupToken(names: DDN.mscorlib.DNIEnumerable<string>; canAssignDirectly: Boolean): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  返回 XAML 名称范围中的所有命名的对象的可枚举集合。
    ///</summary>
    ///<returns>
    ///  可枚举集 <see cref="T:System.Collections.Generic.KeyValuePair`2" />
    ///  对象。
    ///  每个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />
    ///  , 、 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" />
    ///  组件是一个字符串，与 <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" />
    ///  组件是使用对象 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" />
    ///  中 XAML 名称范围的名称。
    ///</returns>
    function GetAllNamesAndValuesInScope: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>>;

  { propertys } 

    ///<summary>
    ///  获取一个值，确定是否调用 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
    ///  可用，以将名称解析到的前向解析的标记。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
    ///  可用作一种实现，返回为前向解析有用标记; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixupTokenAvailable: Boolean read get_IsFixupTokenAvailable;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  描述可以返回在 XAML 标记中进行映射，它根据其前缀的 XAML 命名空间的服务。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlNamespaceResolver')]
  DNIXamlNamespaceResolver = interface(DDN.mscorlib.DNObject)
  ['{8147246D-027D-3EE4-B99A-44D48F453083}']
  { methods } 

    ///<summary>
    ///  检索指定的前缀字符串的 XAML 命名空间标识符。
    ///</summary>
    ///  <param name="prefix">
    ///  要为其检索 XAML 命名空间信息前缀。
    ///</param>
    ///<returns>
    ///  请求的 XAML 命名空间标识符，为字符串。
    ///</returns>
    function GetNamespace(prefix: string): string;
    ///<summary>
    ///  返回所有可能的前缀 XAML 命名空间映射 (<see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  值) 的活动的 XAML 架构上下文中提供。
    ///</summary>
    ///<returns>
    ///  可枚举集 <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  值。
    ///  若要获取所有前缀字符串，都获取 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" />
    ///  返回组中每个值的值。
    ///  若要获取特定 XAML 命名空间前缀，处理任何返回值具有所需 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" />
    ///  值。
    ///</returns>
    function GetNamespacePrefixes: DDN.mscorlib.DNIEnumerable<DNNamespaceDeclaration>;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  表示生成的服务 <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  基于当前的内部分析器上下文。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlObjectWriterFactory')]
  DNIXamlObjectWriterFactory = interface(DDN.mscorlib.DNObject)
  ['{224A5889-0333-3775-BFBD-DD2DE1D311FF}']
  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlObjectWriterSettings" />
    ///  从原始内部分析器上下文。
    ///</summary>
    ///<returns>
    ///  原始的内部分析器上下文中的设置。
    ///</returns>
    function GetParentSettings: DNXamlObjectWriterSettings;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  ，它是基于活动的 XAML 架构上下文。
    ///</summary>
    ///  <param name="settings">
    ///  设置要用于构造和初始化 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  具有指定的设置。
    ///</returns>
    function GetXamlObjectWriter(settings: DNXamlObjectWriterSettings): DNXamlObjectWriter;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>
  ///  表示提供 XAML 架构上下文信息供类型转换器和标记扩展的服务。
  ///</summary>
  [DNTypeName('System.Xaml.IXamlSchemaContextProvider')]
  DNIXamlSchemaContextProvider = interface(DDN.mscorlib.DNObject)
  ['{12451320-4140-38DE-B693-2057FF0E7C83}']
  { getters & setters } 

    function get_SchemaContext: DNXamlSchemaContext;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  服务上下文报告。
    ///</summary>
    ///<returns>
    ///  报告服务上下文的 XAML 架构上下文。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  //-------------namespace: System.Windows.Markup----------------
  DNAcceptedMarkupExtensionExpressionTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E4D2C753-2E5C-57D8-B7D2-6E8BB14F4CED}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type">
    ///  此属性将进行相应报告中的返回类型。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNAcceptedMarkupExtensionExpressionTypeAttribute;

  end;

  ///<summary>
  ///  以符号类型表示的旧报告的 XAML 标记扩展特征。
  ///</summary>
  [DNTypeName('System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute')]
  DNAcceptedMarkupExtensionExpressionTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A290C4F-ACAA-3B25-99A4-1025F52BA4F6}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置此属性将进行相应报告的返回类型。
    ///</summary>
    ///<returns>
    ///  此属性将进行相应报告中的返回类型。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAcceptedMarkupExtensionExpressionTypeAttribute = class(TDNGenericImport<DNAcceptedMarkupExtensionExpressionTypeAttributeClass, DNAcceptedMarkupExtensionExpressionTypeAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNAmbientAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8BD25265-8136-53F2-83E6-1F171A3B4D73}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAmbientAttribute;

  end;

  ///<summary>
  ///  指定应将某个属性或类型视为环境。
  ///  环境概念涉及 XAML 处理器如何确定成员的类型所有者。
  ///</summary>
  [DNTypeName('System.Windows.Markup.AmbientAttribute')]
  DNAmbientAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{31B49D75-82BA-35F2-9CEB-E655EE24CF0D}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAmbientAttribute = class(TDNGenericImport<DNAmbientAttributeClass, DNAmbientAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNConstructorArgumentAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F34E588D-83D2-5158-AD5D-34EDF518DA0D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="argumentName">
    ///  将初始化关联属性的构造函数的名称。
    ///</param>
    {class} function init(argumentName: string): DNConstructorArgumentAttribute;

  end;

  ///<summary>
  ///  指定可以使用非默认构造函数语法来初始化对象，而且由指定名称的属性提供构造信息。
  ///  此信息主要用于 XAML 序列化。
  ///</summary>
  [DNTypeName('System.Windows.Markup.ConstructorArgumentAttribute')]
  DNConstructorArgumentAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1C774710-301C-3948-A1E4-89F1AB279F17}']
  { getters & setters } 

    function get_ArgumentName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取将初始化关联的属性的构造函数的 name 参数。
    ///</summary>
    ///<returns>
    ///  构造函数的名称。
    ///  假定具有 CLR 支持，这对应于相关的构造函数参数的 <see cref="P:System.Reflection.ParameterInfo.Name" />
    ///  。
    ///</returns>
    property ArgumentName: string read get_ArgumentName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConstructorArgumentAttribute = class(TDNGenericImport<DNConstructorArgumentAttributeClass, DNConstructorArgumentAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNContentPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7ED8AC6A-51FF-559F-961F-10B297C73B59}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNContentPropertyAttribute; overload;
    ///<summary>
    ///  使用指定的名称初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  作为内容属性的属性的名称。
    ///</param>
    {class} function init(name: string): DNContentPropertyAttribute; overload;

  end;

  ///<summary>
  ///  指示某种类型的哪个属性是 XAML 内容属性。
  ///  处理特性化类型的 XAML 表示形式的 XAML 子元素时，XAML 处理器会使用此信息。
  ///</summary>
  [DNTypeName('System.Windows.Markup.ContentPropertyAttribute')]
  DNContentPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{29329CB8-7909-3A4B-A4D1-98088BE1E7CA}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取作为内容属性的属性的名称。
    ///</summary>
    ///<returns>
    ///  作为内容属性的属性的名称。
    ///</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNContentPropertyAttribute = class(TDNGenericImport<DNContentPropertyAttributeClass, DNContentPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNContentWrapperAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1B90DE00-E897-5A5E-992B-D4041BCD5EAF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="contentWrapper">
    ///  作为集合类型的内容包装声明的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    {class} function init(contentWrapper: DDN.mscorlib.DNType): DNContentWrapperAttribute;

  end;

  ///<summary>
  ///  指定将用于包装外部内容的关联集合类型的一个或多个类型。
  ///</summary>
  [DNTypeName('System.Windows.Markup.ContentWrapperAttribute')]
  DNContentWrapperAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5F3ADAC3-8042-3DD6-896F-13E3AAE3AAE5}']
  { getters & setters } 

    function get_ContentWrapper: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  通过比较 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" />
    ///  属性确定指定的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  是否等效于此 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" />
    ///  属性相等，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  整数哈希代码
    ///</returns>
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取作为与此特性关联的集合类型的内容包装声明的类型。
    ///</summary>
    ///<returns>
    ///  作为集合类型的内容包装声明的类型。
    ///</returns>
    property ContentWrapper: DDN.mscorlib.DNType read get_ContentWrapper;
    ///<summary>
    ///  获取此特性的唯一标识符。
    ///</summary>
    ///<returns>
    ///  此属性的唯一标识符。
    ///</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNContentWrapperAttribute = class(TDNGenericImport<DNContentWrapperAttributeClass, DNContentWrapperAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDependsOnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FA0DFA4F-B616-561B-BF72-49EE8A90B41E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  与此 <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  关联的属性所依赖的属性。
    ///</param>
    {class} function init(name: string): DNDependsOnAttribute;

  end;

  ///<summary>
  ///  指示特性化属性依赖于另一个属性的值。
  ///</summary>
  [DNTypeName('System.Windows.Markup.DependsOnAttribute')]
  DNDependsOnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D60A48B7-0228-389B-9CBF-3901C89A64BC}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  的唯一标识符。
    ///</summary>
    ///<returns>
    ///  唯一标识符。
    ///</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
    ///<summary>
    ///  获取在此 <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  中声明的相关属性的名称。
    ///</summary>
    ///<returns>
    ///  相关属性的名称。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNDependsOnAttribute = class(TDNGenericImport<DNDependsOnAttributeClass, DNDependsOnAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDictionaryKeyPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B2C13DF0-09C2-5C38-AE51-E58B4B8FC15D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  提供隐式密钥值的属性的名称。
    ///</param>
    {class} function init(name: string): DNDictionaryKeyPropertyAttribute;

  end;

  ///<summary>
  ///  指定提供隐式键值的关联类的属性。
  ///  对于 <see cref="T:System.Collections.IDictionary" />
  ///  集合中的项，隐式键用于除 XAML 中定义的显式 <see langword="x:Key" />
  ///  属性以外的键。
  ///</summary>
  [DNTypeName('System.Windows.Markup.DictionaryKeyPropertyAttribute')]
  DNDictionaryKeyPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{369461F5-D6DF-31C3-981C-83B3391F2375}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取提供隐式密钥值的属性的名称。
    ///</summary>
    ///<returns>
    ///  提供隐式密钥值的属性的名称。
    ///</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDictionaryKeyPropertyAttribute = class(TDNGenericImport<DNDictionaryKeyPropertyAttributeClass, DNDictionaryKeyPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMarkupExtensionBracketCharactersAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8128516C-33EC-5213-9E3A-87D1A904F636}']
  { constructors } 

    ///<summary>
    ///  使用提供的字符初始化 <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="openingBracket">
    ///  用于定义左方括号字符的 <see cref="T:System.Char" />
    ///  。
    ///</param>
    ///  <param name="closingBracket">
    ///  用于定义右方括号字符的 <see cref="T:System.Char" />
    ///  。
    ///</param>
    {class} function init(openingBracket: Char; closingBracket: Char): DNMarkupExtensionBracketCharactersAttribute;

  end;

  ///<summary>
  ///  报告标记扩展可以返回的括号字符。
  ///</summary>
  [DNTypeName('System.Windows.Markup.MarkupExtensionBracketCharactersAttribute')]
  DNMarkupExtensionBracketCharactersAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A562778A-E1FB-3E0B-BD9B-C09BD74B5038}']
  { getters & setters } 

    function get_OpeningBracket: Char;
    function get_ClosingBracket: Char;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定要在 <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  中用作起始分隔符的字符。
    ///</summary>
    ///<returns>
    ///  表示字符的 <see cref="T:System.Char" />
    ///  。
    ///</returns>
    property OpeningBracket: Char read get_OpeningBracket;
    ///<summary>
    ///  指定要在 <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  中用作结尾分隔符的字符。
    ///</summary>
    ///<returns>
    ///  表示字符的 <see cref="T:System.Char" />
    ///  。
    ///</returns>
    property ClosingBracket: Char read get_ClosingBracket;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMarkupExtensionBracketCharactersAttribute = class(TDNGenericImport<DNMarkupExtensionBracketCharactersAttributeClass, DNMarkupExtensionBracketCharactersAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMarkupExtensionReturnTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{452F9BD9-2376-5491-81FC-3BBB175BCBF8}']
  { constructors } 

    ///<summary>
    ///  使用提供的 <see cref="T:System.Type" />
    ///  初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="returnType">
    ///  此 .NET Framework 特性 报告的返回类型。
    ///</param>
    {class} function init(returnType: DDN.mscorlib.DNType): DNMarkupExtensionReturnTypeAttribute; overload;
    ///<summary>
    ///  不要使用，请参阅“备注”。
    ///</summary>
    ///  <param name="returnType">
    ///  此 .NET Framework 特性 报告的返回类型。
    ///</param>
    ///  <param name="expressionType">
    ///  不要使用；请参阅“备注”。
    ///</param>
    {class} function init(returnType: DDN.mscorlib.DNType; expressionType: DDN.mscorlib.DNType): DNMarkupExtensionReturnTypeAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMarkupExtensionReturnTypeAttribute; overload;

  end;

  ///<summary>
  ///  报告标记扩展可以返回的类型。
  ///</summary>
  [DNTypeName('System.Windows.Markup.MarkupExtensionReturnTypeAttribute')]
  DNMarkupExtensionReturnTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F46A4DBA-49E6-37D0-A560-A6B391F2C4E5}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ExpressionType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此 .NET Framework 特性 报告的 <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  返回类型。
    ///</summary>
    ///<returns>
    ///  在应用了 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />
    ///  .NET Framework 特性 的标记扩展中，特定 <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    ///  实现的类型安全的返回类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  不要使用；请参阅“备注”。
    ///</summary>
    ///<returns>
    ///  不要使用；请参阅“备注”。
    ///</returns>
    property ExpressionType: DDN.mscorlib.DNType read get_ExpressionType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMarkupExtensionReturnTypeAttribute = class(TDNGenericImport<DNMarkupExtensionReturnTypeAttributeClass, DNMarkupExtensionReturnTypeAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNNameScopePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3465DA8A-1DB5-53B8-B09E-C2EA64CF3702}']
  { constructors } 

    ///<summary>
    ///  用指定的名称初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  提供 XAML 名称范围的特性化类型上属性的名称。
    ///</param>
    {class} function init(name: string): DNNameScopePropertyAttribute; overload;
    ///<summary>
    ///  使用指定的名称和类型初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  提供 XAML 名称范围的可附加成员的名称。
    ///</param>
    ///  <param name="type">
    ///  提供 XAML 名称范围的可附加成员的所有者类型。
    ///</param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType): DNNameScopePropertyAttribute; overload;

  end;

  ///<summary>
  ///  指定提供 XAML 名称范围值的关联类的属性。
  ///</summary>
  [DNTypeName('System.Windows.Markup.NameScopePropertyAttribute')]
  DNNameScopePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{43B319BB-0085-3E90-9795-E18E468B183A}']
  { getters & setters } 

    function get_Name: string;
    function get_Type: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取提供 XAML 命名空间的属性的名称。
    ///</summary>
    ///<returns>
    ///  一个字符串值，该值是提供 XAML 命名空间的属性的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取提供 XAML 命名空间支持的附加属性的所有者类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  ，它是提供 XAML 命名空间支持的附加属性的所有者类型；或者为 <see langword="null" />
    ///  。
    ///  请参阅“备注”。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNameScopePropertyAttribute = class(TDNGenericImport<DNNameScopePropertyAttributeClass, DNNameScopePropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNRootNamespaceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{848A86A9-2B83-555D-A3B5-10210AF58E11}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.RootNamespaceAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nameSpace">
    ///  根命名空间值。
    ///</param>
    {class} function init(nameSpace: string): DNRootNamespaceAttribute;

  end;

  ///<summary>
  ///  表示一个程序集级别特性，它用于标识 Visual Studio 项目文件中 <see langword="RootNamespace" />
  ///  属性的值。
  ///</summary>
  [DNTypeName('System.Windows.Markup.RootNamespaceAttribute')]
  DNRootNamespaceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D5775BE3-F9FE-384D-A945-959B04ED3633}']
  { getters & setters } 

    function get_Namespace: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与 Visual Studio 项目文件中的 <see langword="RootNamespace" />
    ///  属性的值相对应的字符串。
    ///</summary>
    ///<returns>
    ///  与 Visual Studio 项目文件中的 <see langword="RootNamespace" />
    ///  属性的值相对应的字符串。
    ///</returns>
    property Namespace: string read get_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRootNamespaceAttribute = class(TDNGenericImport<DNRootNamespaceAttributeClass, DNRootNamespaceAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNRuntimeNamePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CC9423B4-78CA-5FF0-A1DC-8B3C6886930A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  用作类的 <see langword="x:Name" />
    ///  等效项的属性的名称。
    ///</param>
    {class} function init(name: string): DNRuntimeNamePropertyAttribute;

  end;

  ///<summary>
  ///  表示类型级别的特性，该特性报告类型的哪个属性映射到 XAML x:Name 特性。
  ///</summary>
  [DNTypeName('System.Windows.Markup.RuntimeNamePropertyAttribute')]
  DNRuntimeNamePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{573C662B-B16C-3E5A-B2C7-ACB1B7AF1782}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />
    ///  指定的运行时名称属性的名称。
    ///</summary>
    ///<returns>
    ///  属性的名称。
    ///</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRuntimeNamePropertyAttribute = class(TDNGenericImport<DNRuntimeNamePropertyAttributeClass, DNRuntimeNamePropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNTrimSurroundingWhitespaceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81B81F65-9BB6-51DF-ABBE-38898CFE32C0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTrimSurroundingWhitespaceAttribute;

  end;

  ///<summary>
  ///  向 XAML 处理器指示在序列化时应修剪标记中该类型元素四周的空白。
  ///</summary>
  [DNTypeName('System.Windows.Markup.TrimSurroundingWhitespaceAttribute')]
  DNTrimSurroundingWhitespaceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BB36049D-290E-3202-BB75-67F087A1D1B4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTrimSurroundingWhitespaceAttribute = class(TDNGenericImport<DNTrimSurroundingWhitespaceAttributeClass, DNTrimSurroundingWhitespaceAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNUidPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{17C86148-D6F1-55AE-854F-44F81F0609E2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.UidPropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  用于提供 <see langword="x:Uid" />
    ///  值的属性的名称。
    ///</param>
    {class} function init(name: string): DNUidPropertyAttribute;

  end;

  ///<summary>
  ///  指示提供的类的 CLR 属性 x:Uid Directive 值。
  ///</summary>
  [DNTypeName('System.Windows.Markup.UidPropertyAttribute')]
  DNUidPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D6A2E8FF-A9D8-340E-AF3E-E8863C2AF6E9}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取表示的 CLR 属性的名称 x:Uid Directive 值。
    ///</summary>
    ///<returns>
    ///  表示 CLR 属性的名称 x:Uid Directive。
    ///</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUidPropertyAttribute = class(TDNGenericImport<DNUidPropertyAttributeClass, DNUidPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNUsableDuringInitializationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{82B79E03-28CF-5423-A81B-89ED354B76ED}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="usable">
    ///  定义关联类在初始化期间是否可用。
    ///</param>
    {class} function init(usable: Boolean): DNUsableDuringInitializationAttribute;

  end;

  ///<summary>
  ///  指示在 XAML 对象图创建期间是否自上而下生成此类型。
  ///</summary>
  [DNTypeName('System.Windows.Markup.UsableDuringInitializationAttribute')]
  DNUsableDuringInitializationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8EB3776B-6D81-32D4-8AC7-0879116BCACC}']
  { getters & setters } 

    function get_Usable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示关联类在初始化期间是否可用。
    ///</summary>
    ///<returns>
    ///  如果关联类在初始化期间可用，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Usable: Boolean read get_Usable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUsableDuringInitializationAttribute = class(TDNGenericImport<DNUsableDuringInitializationAttributeClass, DNUsableDuringInitializationAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNWhitespaceSignificantCollectionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F37A3270-7363-5BB9-98F8-753B24339AF2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWhitespaceSignificantCollectionAttribute;

  end;

  ///<summary>
  ///  指示 XAML 处理器应以严格区分空格的方式处理某一集合类型。
  ///</summary>
  [DNTypeName('System.Windows.Markup.WhitespaceSignificantCollectionAttribute')]
  DNWhitespaceSignificantCollectionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{11CE8B95-3098-36C7-8BA1-3F0A9E223A2B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWhitespaceSignificantCollectionAttribute = class(TDNGenericImport<DNWhitespaceSignificantCollectionAttributeClass, DNWhitespaceSignificantCollectionAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlDeferLoadAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{570A6EC7-ED27-55D1-8529-E2DC1E3768A0}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" />
    ///  类，使用 CLR <see cref="T:System.Type" />
    ///  值。
    ///</summary>
    ///  <param name="loaderType">
    ///  CLR <see cref="T:System.Type" />
    ///  实现用于延迟加载行为的值。
    ///</param>
    ///  <param name="contentType">
    ///  CLR <see cref="T:System.Type" />
    ///  延迟加载行为的目标/内容类型的值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="loaderType" />
    ///  或 <paramref name="contentType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(loaderType: DDN.mscorlib.DNType; contentType: DDN.mscorlib.DNType): DNXamlDeferLoadAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" />
    ///  类，使用类型的字符串名称。
    ///</summary>
    ///  <param name="loaderType">
    ///  要用于延迟加载行为的实现类型字符串名称。
    ///</param>
    ///  <param name="contentType">
    ///  延迟的目标/内容类型的字符串名称的类型的加载行为。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="loaderType" />
    ///  或 <paramref name="contentType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(loaderType: string; contentType: string): DNXamlDeferLoadAttribute; overload;

  end;

  ///<summary>
  ///  指示类或属性的延迟的加载用途对 XAML （例如模板行为），并报告启用延迟的行为和其目标/内容类型的类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XamlDeferLoadAttribute')]
  DNXamlDeferLoadAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BD82683E-BAEB-3E79-AA00-197EE7ED9E82}']
  { getters & setters } 

    function get_LoaderTypeName: string;
    function get_ContentTypeName: string;
    function get_LoaderType: DDN.mscorlib.DNType;
    function get_ContentType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  延迟加载行为的目标/内容类型中获取该类型的字符串名称。
    ///</summary>
    ///<returns>
    ///  延迟的目标/内容类型的字符串名称的类型的加载行为。
    ///</returns>
    property LoaderTypeName: string read get_LoaderTypeName;
    ///<summary>
    ///  获取要用于延迟加载行为的实现类型的字符串名称。
    ///</summary>
    ///<returns>
    ///  要用于延迟加载行为转换器的类型的字符串名称。
    ///</returns>
    property ContentTypeName: string read get_ContentTypeName;
    ///<summary>
    ///  获取 CLR <see cref="T:System.Type" />
    ///  实现用于延迟加载行为的值。
    ///</summary>
    ///<returns>
    ///  CLR <see cref="T:System.Type" />
    ///  实现用于延迟加载行为的值。
    ///</returns>
    property LoaderType: DDN.mscorlib.DNType read get_LoaderType;
    ///<summary>
    ///  获取 CLR <see cref="T:System.Type" />
    ///  延迟加载行为的目标/内容类型的值。
    ///</summary>
    ///<returns>
    ///  CLR <see cref="T:System.Type" />
    ///  延迟加载行为的目标/内容类型的值。
    ///</returns>
    property ContentType: DDN.mscorlib.DNType read get_ContentType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXamlDeferLoadAttribute = class(TDNGenericImport<DNXamlDeferLoadAttributeClass, DNXamlDeferLoadAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetMarkupExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6DDC05BE-5EB6-5B66-A06F-666D8790CD11}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xamlSetMarkupExtensionHandler">
    ///  设置操作要用于标记扩展的处理程序的名称。
    ///</param>
    {class} function init(xamlSetMarkupExtensionHandler: string): DNXamlSetMarkupExtensionAttribute;

  end;

  ///<summary>
  ///  表示可用于标记扩展提供一个值，且引用的处理程序，用于标记扩展设置操作的类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XamlSetMarkupExtensionAttribute')]
  DNXamlSetMarkupExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CF25DFB5-FA36-38C2-BC37-A08D76B29F37}']
  { getters & setters } 

    function get_XamlSetMarkupExtensionHandler: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用于标记扩展的处理程序的名称设置操作。
    ///</summary>
    ///<returns>
    ///  设置操作要用于标记扩展的处理程序的名称。
    ///</returns>
    property XamlSetMarkupExtensionHandler: string read get_XamlSetMarkupExtensionHandler;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXamlSetMarkupExtensionAttribute = class(TDNGenericImport<DNXamlSetMarkupExtensionAttributeClass, DNXamlSetMarkupExtensionAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetTypeConverterAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FF3EDFBB-9BE9-5B3E-9674-4CFA5D25CDC4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xamlSetTypeConverterHandler">
    ///  要用于设置操作的类型转换器的处理程序的名称。
    ///</param>
    {class} function init(xamlSetTypeConverterHandler: string): DNXamlSetTypeConverterAttribute;

  end;

  ///<summary>
  ///  指示一个类可以使用类型转换器提供一个值，并引用一个处理程序以使用类型转换器设置情况。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XamlSetTypeConverterAttribute')]
  DNXamlSetTypeConverterAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C4FFCC04-7569-33EC-A8AE-06FEDE6DF425}']
  { getters & setters } 

    function get_XamlSetTypeConverterHandler: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <paramref name="xamlSetTypeConverterHandler" />
    ///  初始化值 （处理程序名称） 中指定 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
    ///  。
    ///</summary>
    ///<returns><paramref name="xamlSetTypeConverterHandler" />
    ///  中指定值 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
    ///  。
    ///</returns>
    property XamlSetTypeConverterHandler: string read get_XamlSetTypeConverterHandler;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXamlSetTypeConverterAttribute = class(TDNGenericImport<DNXamlSetTypeConverterAttributeClass, DNXamlSetTypeConverterAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlLangPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7F81136E-26F4-53AB-BDC4-D220ECA10B23}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  与 <see langword="xml:lang" />
    ///  属性关联的属性名。
    ///</param>
    {class} function init(name: string): DNXmlLangPropertyAttribute;

  end;

  ///<summary>
  ///  标识要与 xml:lang 特性关联的属性。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XmlLangPropertyAttribute')]
  DNXmlLangPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{83EBB703-ED09-3A72-ADF8-517DA5070003}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此特性中所指定属性的名称。
    ///</summary>
    ///<returns>
    ///  属性的名称。
    ///</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlLangPropertyAttribute = class(TDNGenericImport<DNXmlLangPropertyAttributeClass, DNXmlLangPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlnsCompatibleWithAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{849566EE-41AE-5CF3-93C4-4C1434EE3AA4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="oldNamespace">
    ///  引用 XAML 命名空间标识符。
    ///</param>
    ///  <param name="newNamespace">
    ///  包含 XAML 命名空间标识符。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="oldNamespace" />
    ///  或 <paramref name="newNamespace" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(oldNamespace: string; newNamespace: string): DNXmlnsCompatibleWithAttribute;

  end;

  ///<summary>
  ///  指定 XAML 命令空间可归入其他 XAML 命令空间。
  ///  通常，先前定义的 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />
  ///  中指示了包含 XAML 命令空间。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XmlnsCompatibleWithAttribute')]
  DNXmlnsCompatibleWithAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{75127560-85EE-3891-ABA8-D8FEB189D96F}']
  { getters & setters } 

    function get_OldNamespace: string;
    function get_NewNamespace: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取由此特性报告的引用命名空间标识符。
    ///</summary>
    ///<returns>
    ///  引用命名空间标识符。
    ///</returns>
    property OldNamespace: string read get_OldNamespace;
    ///<summary>
    ///  获取由此特性报告的包含命名空间标识符。
    ///</summary>
    ///<returns>
    ///  特性中报告的包含命名空间标识符。
    ///</returns>
    property NewNamespace: string read get_NewNamespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlnsCompatibleWithAttribute = class(TDNGenericImport<DNXmlnsCompatibleWithAttributeClass, DNXmlnsCompatibleWithAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlnsDefinitionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7557980F-8EEC-5D04-9756-5C29D05932EB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xmlNamespace">
    ///  XAML 命名空间标识符。
    ///</param>
    ///  <param name="clrNamespace">
    ///  引用 CLR 命名空间名称的字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlNamespace" />
    ///  或 <paramref name="clrNamespace" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlNamespace: string; clrNamespace: string): DNXmlnsDefinitionAttribute;

  end;

  ///<summary>
  ///  指定 XAML 命名空间与 CLR 命名空间之间按程序集进行的映射，然后 XAML 对象编写器或 XAML 架构上下文使用后一种命名空间进行类型解析。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XmlnsDefinitionAttribute')]
  DNXmlnsDefinitionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C1706FB1-EB9A-3A6F-AE0D-50BA6CAE1903}']
  { getters & setters } 

    function get_XmlNamespace: string;
    function get_ClrNamespace: string;
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此属性中指定的 XAML 命名空间标识符。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间标识符。
    ///</returns>
    property XmlNamespace: string read get_XmlNamespace;
    ///<summary>
    ///  获取此属性中指定 CLR 命名空间的字符串名称。
    ///</summary>
    ///<returns>
    ///  以字符串形式指定的 CLR 命名空间。
    ///</returns>
    property ClrNamespace: string read get_ClrNamespace;
    ///<summary>
    ///  获取或设置与特性关联的程序集的名称。
    ///</summary>
    ///<returns>
    ///  程序集名称。
    ///</returns>
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlnsDefinitionAttribute = class(TDNGenericImport<DNXmlnsDefinitionAttributeClass, DNXmlnsDefinitionAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlnsPrefixAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81E6C187-E467-59F2-BBFE-0B9CB30C2F69}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xmlNamespace">
    ///  XAML 命名空间标识符。
    ///</param>
    ///  <param name="prefix">
    ///  建议的前缀字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlNamespace" />
    ///  或 <paramref name="prefix" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlNamespace: string; prefix: string): DNXmlnsPrefixAttribute;

  end;

  ///<summary>
  ///  当在 XAML 文件（序列化）中编写元素和特性时，或与具有 XAML 编辑功能的设计环境进行交互时，标识要与 XAML 命名空间关联用于 XAML 的推荐前缀。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XmlnsPrefixAttribute')]
  DNXmlnsPrefixAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4F28D351-7E09-3CF7-B92E-AD7B7112830B}']
  { getters & setters } 

    function get_XmlNamespace: string;
    function get_Prefix: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此属性关联的 XAML 命名空间标识符。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间标识符。
    ///</returns>
    property XmlNamespace: string read get_XmlNamespace;
    ///<summary>
    ///  获取与此属性关联的建议前缀。
    ///</summary>
    ///<returns>
    ///  建议的前缀字符串。
    ///</returns>
    property Prefix: string read get_Prefix;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlnsPrefixAttribute = class(TDNGenericImport<DNXmlnsPrefixAttributeClass, DNXmlnsPrefixAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNNameReferenceConverterClass = interface(DNObjectClass)
  ['{38CB52C7-363D-557C-9AF6-E1301B99633A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.NameReferenceConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNameReferenceConverter;

  end;

  ///<summary>
  ///  提供类型转换以将字符串名称转换为对具有该名称的对象的对象引用或对象图中返回对象的名称。
  ///</summary>
  [DNTypeName('System.Windows.Markup.NameReferenceConverter')]
  DNNameReferenceConverter = interface(DNObject)
  ['{EE0B9D76-557A-3524-B43B-34B412677CF9}']
  { methods } 

    ///<summary>
    ///  返回此转换器是否可以转换到另一个对象的一种类型的对象。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，它表示您想要将从转换的类型。
    ///</param>
    ///<returns>
    ///  如果该转换器能够执行转换，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  返回一个值，该值指示此转换器是否可以将对象转换为指定的目标类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换为的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该转换器能够执行转换，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  将对象转换为指定的类型。
    ///  这被为了在对象图中返回的对象的 XAML 引用名称。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  要用作当前区域性。
    ///</param>
    ///  <param name="value">
    ///  要检索的引用名称的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  要返回的类型。
    ///  应始终引用 <see cref="T:System.String" />
    ///  类型。
    ///</param>
    ///<returns>
    ///  输入的引用名称 <paramref name="value" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xaml.IXamlNameProvider" />
    ///  服务已丢失或无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="context" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将所提供的对象转换为另一个对象，使用指定的上下文和区域性信息。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  要用作当前区域性。
    ///</param>
    ///  <param name="value">
    ///  要转换的引用名称字符串。
    ///</param>
    ///<returns>
    ///  返回的对象，它是有可能是相关支持程序集中的类型映射，并能够与 XAML 名称引用 XAML 中声明的任何对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="value" />
    ///  为空字符串或空字符串。
    ///  - 或 -
    ///<see cref="T:System.Xaml.IXamlNameResolver" />
    ///  服务已丢失或无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="context" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNameReferenceConverter = class(TDNGenericImport<DNNameReferenceConverterClass, DNNameReferenceConverter>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeTypeConverterClass = interface(DNObjectClass)
  ['{4426ED83-3E2B-5E7F-85E2-279855CA1B56}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlTypeTypeConverter;

  end;

  ///<summary>
  ///  将 <see cref="T:System.Xaml.XamlType" />
  ///  对象与代表类型名称的字符串相互转换。
  ///  此功能由标记定义通过 <see cref="T:System.Windows.Markup.PropertyDefinition" />
  ///  用于 XAML 扩展性。
  ///</summary>
  [DNTypeName('System.Xaml.Schema.XamlTypeTypeConverter')]
  DNXamlTypeTypeConverter = interface(DNObject)
  ['{468EBDE9-D13D-3B29-8009-DFC8246162B1}']
  { methods } 

    ///<summary>
    ///  确定指定类型的对象是否可以转换为的一个实例 <see cref="T:System.Xaml.XamlType" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  计算用于转换类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该转换器能够执行该操作;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换指定的对象与 <see cref="T:System.Xaml.XamlType" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法转换 <paramref name="value" />
    ///  。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定实例是否 <see cref="T:System.Xaml.XamlType" />
    ///  可以转换为指定的类型，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  计算用于转换类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该转换器能够执行该操作;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换 <see cref="T:System.Xaml.XamlType" />
    ///  到指定的类型，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法转换 <paramref name="value" />
    ///  。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlTypeTypeConverter = class(TDNGenericImport<DNXamlTypeTypeConverterClass, DNXamlTypeTypeConverter>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetValueEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{28989EA9-FA6C-5B6C-9750-CF1434BDCD30}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="member">
    ///  XAML 类型系统 / 设置该成员的架构信息。
    ///</param>
    ///  <param name="value">
    ///  要为成员提供的值。
    ///</param>
    {class} function init(member: DNXamlMember; value: DDN.mscorlib.DNObject): DNXamlSetValueEventArgs;

  end;

  ///<summary>
  ///  提供的回调的数据时调用 <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  设置某些值。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XamlSetValueEventArgs')]
  DNXamlSetValueEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{32F3A0E9-B315-3BFC-9E17-D57E7E46F11C}']
  { getters & setters } 

    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    ///<summary>
    ///  当在派生类中重写，使您能够调用 <see langword="SetValue" />
    ///  为在当前活动类型的基类的类上定义的回调。
    ///</summary>
    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 XAML 类型系统和要设置的成员的 XAML 架构信息。
    ///</summary>
    ///<returns>
    ///  XAML 类型系统和要设置的成员的 XAML 架构信息。
    ///</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>
    ///  获取要用于所设置的成员的值。
    ///</summary>
    ///<returns>
    ///  要为所设置的成员提供的值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  获取或设置一个值，确定是否正在使用的调用方 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  可以使用的值而无需调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果值是有用的且调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  必要; 否则为不是 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetValueEventArgs = class(TDNGenericImport<DNXamlSetValueEventArgsClass, DNXamlSetValueEventArgs>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetMarkupExtensionEventArgsClass = interface(DNXamlSetValueEventArgsClass)
  ['{E828B8DB-375A-50A6-8530-78B58030D618}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="member">
    ///  XAML 类型系统 / 设置该成员的架构信息。
    ///</param>
    ///  <param name="value">
    ///  要为所设置的成员提供的标记扩展引用。
    ///</param>
    ///  <param name="serviceProvider">
    ///  服务提供程序信息传递到标记扩展。
    ///</param>
    {class} function init(member: DNXamlMember; value: DNMarkupExtension; serviceProvider: DDN.mscorlib.DNIServiceProvider): DNXamlSetMarkupExtensionEventArgs;

  end;

  ///<summary>
  ///  XAML 对象编写器设置使用的标记扩展的值时调用的回调提供数据。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XamlSetMarkupExtensionEventArgs')]
  DNXamlSetMarkupExtensionEventArgs = interface(DNXamlSetValueEventArgs)
  ['{B635BFE2-E4BE-33DB-9ECB-BC4BBC4070F9}']
  { getters & setters } 

    function get_MarkupExtension: DNMarkupExtension;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    ///<summary>
    ///  使您能够调用一个回调，在当前活动类型的基类的类上定义。
    ///</summary>
    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  与此相关的参考 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此相关的标记扩展引用 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
    ///  。
    ///</returns>
    property MarkupExtension: DNMarkupExtension read get_MarkupExtension;
    ///<summary>
    ///  获取传递给标记扩展的服务提供程序信息。
    ///</summary>
    ///<returns>
    ///  已传递到标记扩展的服务提供程序信息。
    ///</returns>
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    ///<summary>
    ///  获取 XAML 类型系统和要设置的成员的 XAML 架构信息。
    ///</summary>
    ///<returns>
    ///  XAML 类型系统和要设置的成员的 XAML 架构信息。
    ///</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>
    ///  获取要用于所设置的成员的值。
    ///</summary>
    ///<returns>
    ///  要为所设置的成员提供的值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  获取或设置一个值，确定是否正在使用的调用方 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  可以使用的值而无需调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果值是有用的且调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  必要; 否则为不是 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetMarkupExtensionEventArgs = class(TDNGenericImport<DNXamlSetMarkupExtensionEventArgsClass, DNXamlSetMarkupExtensionEventArgs>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetTypeConverterEventArgsClass = interface(DNXamlSetValueEventArgsClass)
  ['{C36468DD-E6CF-52C4-9C0E-60ABBD6E8011}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="member">
    ///  XAML 类型系统 / 设置该成员的架构信息。
    ///</param>
    ///  <param name="typeConverter">
    ///  正在调用的特定类型转换器实例。
    ///</param>
    ///  <param name="value">
    ///  要为所设置的成员提供的值。
    ///</param>
    ///  <param name="serviceProvider">
    ///  服务可以使用的提供程序信息 <paramref name="typeConverter" />
    ///  类。
    ///</param>
    ///  <param name="cultureInfo">
    ///  区域性信息可由 <paramref name="typeConverter" />
    ///  类调用时 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    ///  和其他方法。
    ///</param>
    {class} function init(member: DNXamlMember; typeConverter: DDN.System.DNTypeConverter; value: DDN.mscorlib.DNObject; serviceProvider: DDN.System.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo): DNXamlSetTypeConverterEventArgs;

  end;

  ///<summary>
  ///  XAML 编写器设置一个值，使用类型转换器调用时调用的回调提供数据。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XamlSetTypeConverterEventArgs')]
  DNXamlSetTypeConverterEventArgs = interface(DNXamlSetValueEventArgs)
  ['{C92E4D80-049A-3501-911F-A93C2F79F802}']
  { getters & setters } 

    function get_TypeConverter: DDN.System.DNTypeConverter;
    function get_ServiceProvider: DDN.System.DNITypeDescriptorContext;
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    ///<summary>
    ///  使您能够调用一个回调，在当前活动类型的基类的类上定义。
    ///</summary>
    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  实例，将调用并提供类型转换行为。
    ///</summary>
    ///<returns>
    ///  提供类型转换行为的类型转换器。
    ///</returns>
    property TypeConverter: DDN.System.DNTypeConverter read get_TypeConverter;
    ///<summary>
    ///  获取 <see cref="T:System.IServiceProvider" />
    ///  可供类型转换器类信息。
    ///</summary>
    ///<returns>
    ///  服务可以使用的提供程序信息 <paramref name="typeConverter" />
    ///  类。
    ///</returns>
    property ServiceProvider: DDN.System.DNITypeDescriptorContext read get_ServiceProvider;
    ///<summary>
    ///  获取 <see cref="T:System.Globalization.CultureInfo" />
    ///  调用时，类型转换器类可使用的信息 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    ///  和其他方法。
    ///</summary>
    ///<returns>
    ///  类型转换器类可使用的区域性信息
    ///</returns>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    ///<summary>
    ///  获取 XAML 类型系统和要设置的成员的 XAML 架构信息。
    ///</summary>
    ///<returns>
    ///  XAML 类型系统和要设置的成员的 XAML 架构信息。
    ///</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>
    ///  获取要用于所设置的成员的值。
    ///</summary>
    ///<returns>
    ///  要为所设置的成员提供的值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  获取或设置一个值，确定是否正在使用的调用方 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  可以使用的值而无需调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果值是有用的且调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  必要; 否则为不是 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetTypeConverterEventArgs = class(TDNGenericImport<DNXamlSetTypeConverterEventArgsClass, DNXamlSetTypeConverterEventArgs>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D6340497-B007-56B0-BF54-6ED2AD17478A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlObjectEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="instance">
    ///  与事件数据相关的对象实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(instance: DDN.mscorlib.DNObject): DNXamlObjectEventArgs;

  end;

  ///<summary>
  ///  为可插入序列以实现对象初始化和属性设置的回调提供数据。
  ///  这会影响 <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  生成的对象图。
  ///</summary>
  [DNTypeName('System.Xaml.XamlObjectEventArgs')]
  DNXamlObjectEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0C76CAEF-0578-3C06-BA49-EA1E3F1D9F64}']
  { getters & setters } 

    function get_Instance: DDN.mscorlib.DNObject;
    function get_SourceBamlUri: DDN.System.DNUri;
    function get_ElementLineNumber: Int32;
    function get_ElementLinePosition: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与事件数据相关的对象实例。
    ///</summary>
    ///<returns>
    ///  与事件数据相关的对象实例。
    ///</returns>
    property Instance: DDN.mscorlib.DNObject read get_Instance;
    ///<summary>
    ///  获取或设置相关对象实例的 BAML URI。
    ///</summary>
    ///<returns>
    ///  相关对象实例的 BAML URI。
    ///</returns>
    property SourceBamlUri: DDN.System.DNUri read get_SourceBamlUri;
    ///<summary>
    ///  获取或设置相关对象实例的行号。
    ///</summary>
    ///<returns>
    ///  元素的行号。
    ///</returns>
    property ElementLineNumber: Int32 read get_ElementLineNumber;
    ///<summary>
    ///  获取或设置相关对象实例在行中的位置。
    ///</summary>
    ///<returns>
    ///  元素在行中的位置。
    ///</returns>
    property ElementLinePosition: Int32 read get_ElementLinePosition;
  end;

  TDNXamlObjectEventArgs = class(TDNGenericImport<DNXamlObjectEventArgsClass, DNXamlObjectEventArgs>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{C73A8FE6-F3CC-5296-92A0-7558D0E13494}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlException" />
    ///  类的新实例。
    ///  该实例包含指定的错误消息、 内部异常和行信息。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///</param>
    ///  <param name="lineNumber">
    ///  报告到调试或行信息的使用者的行号。
    ///</param>
    ///  <param name="linePosition">
    ///  要报告给调试或行信息的使用者的行位置。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXamlException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlException" />
    ///  类的新实例。
    ///  实例包含指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlException" />
    ///  类的新实例。
    ///  该实例包含系统提供的描述错误的消息。
    ///</summary>
    {class} function init: DNXamlException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlException" />
    ///  类的新实例。
    ///  该实例包含指定的描述错误的消息。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNXamlException; overload;

  end;

  ///<summary>
  ///  常规 XAML 读取器或 XAML 编写器异常引发的异常。
  ///  请参阅“备注”。
  ///</summary>
  [DNTypeName('System.Xaml.XamlException')]
  DNXamlException = interface(DDN.mscorlib.DNException)
  ['{43A4DBFB-7F6B-39C5-ABBE-DC7078821B2F}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  并提供对行信息数据序列化支持。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlException = class(TDNGenericImport<DNXamlExceptionClass, DNXamlException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDuplicateMemberExceptionClass = interface(DNXamlExceptionClass)
  ['{8A5D2E4A-D513-5E4C-972A-6B3EDB2FA025}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlDuplicateMemberException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  与报表相关的成员和类型信息的类。
    ///</summary>
    ///  <param name="member">
    ///  向报表 XAML 成员标识符。
    ///</param>
    ///  <param name="type">
    ///  报告为父类型的 XAML 类型标识符。
    ///</param>
    {class} function init(member: DNXamlMember; &type: DNXamlType): DNXamlDuplicateMemberException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNXamlDuplicateMemberException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlDuplicateMemberException; overload;

  end;

  ///<summary>
  ///  当 XAML 编写器尝试将某个值重复成员写入到同一个对象节点时引发的异常。
  ///</summary>
  [DNTypeName('System.Xaml.XamlDuplicateMemberException')]
  DNXamlDuplicateMemberException = interface(DNXamlException)
  ['{83511200-1CB5-3B38-8C35-3007DE6B9F69}']
  { getters & setters } 

    function get_DuplicateMember: DNXamlMember;
    procedure set_DuplicateMember(value: DNXamlMember);
    function get_ParentType: DNXamlType;
    procedure set_ParentType(value: DNXamlType);
    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  用序列化数据初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置要报告为重复的属性的 XAML 成员标识符。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlMember" />
    ///  对象 （XAML 成员标识符） 来报告。
    ///</returns>
    property DuplicateMember: DNXamlMember read get_DuplicateMember write set_DuplicateMember;
    ///<summary>
    ///  获取或设置要作为父类型的报告的 XAML 类型标识符。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  报告为父类型的对象 （XAML 类型标识符）。
    ///</returns>
    property ParentType: DNXamlType read get_ParentType write set_ParentType;
    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlDuplicateMemberException = class(TDNGenericImport<DNXamlDuplicateMemberExceptionClass, DNXamlDuplicateMemberException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlInternalExceptionClass = interface(DNXamlExceptionClass)
  ['{35ECB897-F488-577A-B6F2-15C0F2967D8C}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlInternalException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///</param>
    {class} function init(message: string): DNXamlInternalException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlInternalException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlInternalException; overload;

  end;

  ///<summary>
  ///  在 XAML 读取和 XAML 编写过程中发生的内部不一致时引发异常。
  ///</summary>
  [DNTypeName('System.Xaml.XamlInternalException')]
  DNXamlInternalException = interface(DNXamlException)
  ['{4E0218E8-4700-3FBB-A44A-86E9E13CB429}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  并提供对行信息数据序列化支持。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlInternalException = class(TDNGenericImport<DNXamlInternalExceptionClass, DNXamlInternalException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectReaderExceptionClass = interface(DNXamlExceptionClass)
  ['{0CCD2BCC-5159-5607-B8BC-BDDCDD164395}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlObjectReaderException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNXamlObjectReaderException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectReaderException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlObjectReaderException; overload;

  end;

  ///<summary>
  ///  由若干引发的异常 <see cref="T:System.Xaml.XamlObjectReader" />
  ///  内部帮助器 Api。
  ///</summary>
  [DNTypeName('System.Xaml.XamlObjectReaderException')]
  DNXamlObjectReaderException = interface(DNXamlException)
  ['{A666A348-0184-348D-B769-0D277CFCB036}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  并提供对行信息数据序列化支持。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlObjectReaderException = class(TDNGenericImport<DNXamlObjectReaderExceptionClass, DNXamlObjectReaderException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectWriterExceptionClass = interface(DNXamlExceptionClass)
  ['{7101B890-F60E-5B51-8EAD-B5962F87444B}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlObjectWriterException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNXamlObjectWriterException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectWriterException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlObjectWriterException; overload;

  end;

  ///<summary>
  ///  当 XAML 编写器时引发的异常 (如 <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  类) 在尝试生成 XAML 节点流中的对象图时遇到错误。
  ///</summary>
  [DNTypeName('System.Xaml.XamlObjectWriterException')]
  DNXamlObjectWriterException = interface(DNXamlException)
  ['{ECC04FF2-71DB-37DA-B773-6F79805C8960}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  并提供对行信息数据序列化支持。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlObjectWriterException = class(TDNGenericImport<DNXamlObjectWriterExceptionClass, DNXamlObjectWriterException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlParseExceptionClass = interface(DNXamlExceptionClass)
  ['{CEC09144-A12E-5A74-B5C2-265506BFAF92}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlParseException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNXamlParseException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlParseException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlParseException; overload;

  end;

  ///<summary>
  ///  XAML 读取器无法处理到 XAML 节点流的 XAML 读取器源元素时，将引发异常。
  ///</summary>
  [DNTypeName('System.Xaml.XamlParseException')]
  DNXamlParseException = interface(DNXamlException)
  ['{70F42D6A-02CD-3A1C-90B2-1DF8FE2E7418}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  并提供对行信息数据序列化支持。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlParseException = class(TDNGenericImport<DNXamlParseExceptionClass, DNXamlParseException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaExceptionClass = interface(DNXamlExceptionClass)
  ['{0396F94A-BEED-5542-9CCA-9019701DD111}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlSchemaException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNXamlSchemaException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlSchemaException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlSchemaException; overload;

  end;

  ///<summary>
  ///  一个绑定系统或 XAML 的另一个架构表示形式系统报告架构上下文的一个例外时，将引发异常。
  ///</summary>
  [DNTypeName('System.Xaml.XamlSchemaException')]
  DNXamlSchemaException = interface(DNXamlException)
  ['{41395F55-98B5-362E-8F21-065EB5035409}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  并提供对行信息数据序列化支持。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlSchemaException = class(TDNGenericImport<DNXamlSchemaExceptionClass, DNXamlSchemaException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlWriterExceptionClass = interface(DNXamlExceptionClass)
  ['{5B48CC7E-FB1E-5A11-9E1D-D51642C49B6B}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlXmlWriterException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNXamlXmlWriterException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlXmlWriterException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlXmlWriterException; overload;

  end;

  ///<summary>
  ///  由某些引发的异常 <see cref="T:System.Xaml.XamlXmlWriter" />
  ///  Api。
  ///</summary>
  [DNTypeName('System.Xaml.XamlXmlWriterException')]
  DNXamlXmlWriterException = interface(DNXamlException)
  ['{4066FB76-074D-3E7B-9D72-9DA6A091CBC5}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  并提供对行信息数据序列化支持。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置异常消息和行信息可用时，如果向消息追加的行信息。
    ///</summary>
    ///<returns>
    ///  异常消息，其中包含追加的行信息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行号组合。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息行编号组件。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。
    ///</summary>
    ///<returns>
    ///  XAML 文本行信息的行位置组件。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlXmlWriterException = class(TDNGenericImport<DNXamlXmlWriterExceptionClass, DNXamlXmlWriterException>) end;

  //-------------namespace: System.Xaml.Permissions----------------
  DNXamlLoadPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{B8ECF0D4-BD7E-55C6-9AA5-0C71AE86E137}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  类，使用现有的权限。
    ///</summary>
    ///  <param name="state">
    ///  一个 <see cref="T:System.Security.Permissions.PermissionState" />
    ///  枚举值。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNXamlLoadPermission; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  类，使用单个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  值。
    ///</summary>
    ///  <param name="allowedAccess">
    ///  定义 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="allowedAccess" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(allowedAccess: DNXamlAccessLevel): DNXamlLoadPermission; overload;
    {class} function init(allowedAccess: DDN.mscorlib.DNIEnumerable<DNXamlAccessLevel>): DNXamlLoadPermission; overload;

  end;

  ///<summary>
  ///  声明从 XAML 读取器或编写器所使用的程序集加载类型的权限。
  ///</summary>
  [DNTypeName('System.Xaml.Permissions.XamlLoadPermission')]
  DNXamlLoadPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{7EBD4F09-CC8C-3859-A997-4194F90BFDF8}']
  { getters & setters } 

    function get_AllowedAccess: DDN.mscorlib.DNIList<DNXamlAccessLevel>;

  { methods } 

    ///<summary>
    ///  确定是否当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  是指定的权限的子集。
    ///</summary>
    ///  <param name="target">
    ///  将要测试子集关系的权限。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  是指定的权限的子集; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  不是 <see langword="null" />
    ///  或者不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  创建并返回当前的相同副本 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回是否这 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  包括指定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  中其 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />
    ///  列表。
    ///</summary>
    ///  <param name="requestedAccess">
    ///  特定于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  检查。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="requestedAccess" />
    ///  作为中的项存在 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />
    ///  的当前列表 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="requestedAccess" />
    ///  为 null。
    ///</exception>
    function Includes(requestedAccess: DNXamlAccessLevel): Boolean;
    ///<summary>
    ///  返回是否这 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  表示无限制的权限。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  表示无限制的权限。
    ///<see langword="false" />
    ///  如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  中具有特定访问级别限制 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />
    ///  , ，或者没有权限。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  通过 XML 编码重新构造具有指定状态的安全对象。
    ///</summary>
    ///  <param name="elem">
    ///  用于重新构造安全对象的 XML 编码。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="elem" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="elem" />
    ///  不包含的 XML 编码 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///  - 或 -
    ///  中的版本特性 <paramref name="elem" />
    ///  不受支持。
    ///</exception>
    procedure FromXml(elem: DDN.mscorlib.DNSecurityElement);
    ///<summary>
    ///  创建并返回 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  ，它是当前的交集 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  和指定的权限。
    ///</summary>
    ///  <param name="target">
    ///  一个 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  要与当前相交 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个新的权限，表示当前的交集 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///  如果交集为空，则此新权限为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  不是 <see langword="null" />
    ///  或者不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建此 XML 编码 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  及其当前状态。
    ///</summary>
    ///<returns>
    ///  此 XML 编码 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  , ，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  创建一个权限，是当前的联合整体 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  和指定的权限。
    ///</summary>
    ///  <param name="other">
    ///  一个 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  要与当前组合 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  ，它表示当前的联合 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="other" />
    ///  不是 <see langword="null" />
    ///  或者不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  。
    ///</exception>
    function Union(other: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取所有的列表 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  值指示此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  表示。
    ///</summary>
    ///<returns>
    ///  只读列表 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  值，或 <see langword="null" />
    ///  。
    ///  请参阅“备注”。
    ///</returns>
    property AllowedAccess: DDN.mscorlib.DNIList<DNXamlAccessLevel> read get_AllowedAccess;
  end;

  TDNXamlLoadPermission = class(TDNGenericImport<DNXamlLoadPermissionClass, DNXamlLoadPermission>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMarkupExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{41E50566-121C-50B1-B772-AF07E7E8A0EF}']
  end;

  ///<summary>
  ///  为可以由 .NET Framework XAML 服务及其他 XAML 读取器和 XAML 编写器支持的 XAML 标记扩展实现提供基类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.MarkupExtension')]
  DNMarkupExtension = interface(DDN.mscorlib.DNObject)
  ['{87E32420-AB32-3866-B242-57CCC12169C8}']
  { methods } 

    ///<summary>
    ///  当在派生类中实现时，返回用作此标记扩展的目标属性值的对象。
    ///</summary>
    ///  <param name="serviceProvider">
    ///  可为标记扩展提供服务的服务提供程序帮助程序。
    ///</param>
    ///<returns>
    ///  要在应用了扩展的属性上设置的对象值。
    ///</returns>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMarkupExtension = class(TDNGenericImport<DNMarkupExtensionClass, DNMarkupExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNArrayExtensionClass = interface(DNMarkupExtensionClass)
  ['{A3DF18EB-E3CE-5DA2-8A44-78CF8A0FA937}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.ArrayExtension" />
    ///  类的新实例。
    ///  这可以创建一个空数组。
    ///</summary>
    {class} function init: DNArrayExtension; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.ArrayExtension" />
    ///  类的新实例，并初始化数组的类型。
    ///</summary>
    ///  <param name="arrayType">
    ///  新数组的对象类型。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="arrayType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(arrayType: DDN.mscorlib.DNType): DNArrayExtension; overload;
    ///<summary>
    ///  基于所提供的原始数组初始化 <see cref="T:System.Windows.Markup.ArrayExtension" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="elements">
    ///  用于填充创建的数组的数组内容。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="elements" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(elements: DDN.mscorlib.DNArray): DNArrayExtension; overload;

  end;

  ///<summary>
  ///  实现对 .NET Framework XAML 服务的 <see langword="x:Array" />
  ///  支持
  ///</summary>
  [DNTypeName('System.Windows.Markup.ArrayExtension')]
  DNArrayExtension = interface(DNMarkupExtension)
  ['{CD64C2CA-8E94-341B-980A-DCD7FE37B778}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_Items: DDN.mscorlib.DNIList;

  { methods } 

    ///<summary>
    ///  返回一个数组，其大小为 <see cref="P:System.Windows.Markup.ArrayExtension.Items" />
    ///  值中提供的对象数。
    ///</summary>
    ///  <param name="serviceProvider">
    ///  可为标记扩展提供服务的对象。
    ///</param>
    ///<returns>
    ///  创建的数组，或 null。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理未提供有效 <see cref="P:System.Windows.Markup.ArrayExtension.Type" />
    ///  的数组。
    ///  - 或 -
    ///  数组的已声明 <see cref="P:System.Windows.Markup.ArrayExtension.Type" />
    ///  与其一个或多个 <see cref="P:System.Windows.Markup.ArrayExtension.Items" />
    ///  值之间存在类型不匹配。
    ///</exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将所提供的对象添加到数组末尾。
    ///</summary>
    ///  <param name="value">
    ///  要添加到数组末尾的对象。
    ///</param>
    procedure AddChild(value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将文本节点添加为新数组项。
    ///</summary>
    ///  <param name="text">
    ///  要添加到数组末尾的文本。
    ///</param>
    procedure AddText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要在调用 <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" />
    ///  时创建的数组类型。
    ///</summary>
    ///<returns>
    ///  数组的类型。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    ///<summary>
    ///  获取数组的内容。
    ///  可在 XAML 中通过 XAML 集合语法设置。
    ///</summary>
    ///<returns>
    ///  数组内容。
    ///</returns>
    property Items: DDN.mscorlib.DNIList read get_Items;
  end;

  TDNArrayExtension = class(TDNGenericImport<DNArrayExtensionClass, DNArrayExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNNullExtensionClass = interface(DNMarkupExtensionClass)
  ['{569E0884-D3F5-5A9D-94F7-BCD04F4875C7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.NullExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNullExtension;

  end;

  ///<summary>
  ///  实现 XAML 标记扩展以返回 null 对象，你可使用此对象在 XAML 中将值显式设置为 null。
  ///</summary>
  [DNTypeName('System.Windows.Markup.NullExtension')]
  DNNullExtension = interface(DNMarkupExtension)
  ['{36662D3E-87E0-3749-BC08-61E0CBD94D75}']
  { methods } 

    ///<summary>
    ///  提供 <see langword="null" />
    ///  以用作此标记扩展的输出值。
    ///</summary>
    ///  <param name="serviceProvider">
    ///  可为标记扩展实现提供服务的对象。
    ///</param>
    ///<returns>
    ///  一个空引用。
    ///</returns>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNullExtension = class(TDNGenericImport<DNNullExtensionClass, DNNullExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNReferenceClass = interface(DNMarkupExtensionClass)
  ['{7C564FB1-C7EC-54F1-B074-A786F6C83190}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.Reference" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNReference; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Markup.Reference" />
    ///  类 <paramref name="name" />
    ///  参数。
    ///</summary>
    ///  <param name="name">
    ///  XAML 的引用的元素名称。
    ///</param>
    {class} function init(name: string): DNReference; overload;

  end;

  ///<summary>
  ///  实现 {x:Reference} 标记扩展。
  ///</summary>
  [DNTypeName('System.Windows.Markup.Reference')]
  DNReference = interface(DNMarkupExtension)
  ['{B005AD8E-55B4-35BA-834C-0B95219D617E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    ///<summary>
    ///  返回一个对象，此对象为目标属性的值。
    ///  对于 <see cref="T:System.Windows.Markup.Reference" />
    ///  类型，这是提供的 <see cref="P:System.Windows.Markup.Reference.Name" />
    ///  引用的对象。
    ///</summary>
    ///  <param name="serviceProvider">
    ///  实现 <see cref="T:System.Xaml.IXamlNameResolver" />
    ///  服务的一个类。
    ///</param>
    ///<returns>
    ///  目标属性的值。
    ///  这可能是在相关支持程序集中类型映射的任何对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="serviceProvider" />
    ///  值不实现 <see cref="T:System.Xaml.IXamlNameResolver" />
    ///  服务。
    ///  - 或 -
    ///<see cref="P:System.Windows.Markup.Reference.Name" />
    ///  值尚未通过构造或位置的用法设置。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要获取其引用的 XAML 名称。
    ///</summary>
    ///<returns>
    ///  要获取其引用的元素的 XAML 名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
  end;

  TDNReference = class(TDNGenericImport<DNReferenceClass, DNReference>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNStaticExtensionClass = interface(DNMarkupExtensionClass)
  ['{20206F51-6F9F-5D5D-AD73-FC3C9A02F6AD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.StaticExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNStaticExtension; overload;
    ///<summary>
    ///  使用提供的 <paramref name="member" />
    ///  字符串初始化 <see cref="T:System.Windows.Markup.StaticExtension" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="member">
    ///  用于标识要引用的成员的字符串。
    ///  该字符串使用格式 prefix:typeName.fieldOrPropertyName。
    ///  prefix 是 XAML 命名空间的映射前缀，并且仅用于未映射到默认 XAML 命名空间的引用静态值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(member: string): DNStaticExtension; overload;

  end;

  ///<summary>
  ///  实现返回静态字段和属性引用的标记扩展。
  ///</summary>
  [DNTypeName('System.Windows.Markup.StaticExtension')]
  DNStaticExtension = interface(DNMarkupExtension)
  ['{96C5E7FD-819F-3E66-9313-B7E150A788E7}']
  { getters & setters } 

    function get_Member: string;
    procedure set_Member(value: string);
    function get_MemberType: DDN.mscorlib.DNType;
    procedure set_MemberType(value: DDN.mscorlib.DNType);

  { methods } 

    ///<summary>
    ///  返回一个要在应用此扩展的属性上设置的对象值。
    ///  对于 <see cref="T:System.Windows.Markup.StaticExtension" />
    ///  ，返回值是针对请求的静态成员所计算的静态值。
    ///</summary>
    ///  <param name="serviceProvider">
    ///  可为标记扩展提供服务的对象。
    ///  服务提供商应提供可实现类型解析程序 (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  ) 的服务。
    ///</param>
    ///<returns>
    ///  要在应用了扩展的属性上设置的静态值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  计算时，扩展的 <paramref name="member" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="member" />
    ///  字符串的某部分未进行正确分析。
    ///  - 或 -
    ///  <paramref name="serviceProvider" />
    ///  没有为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  提供服务
    ///  - 或 -
    ///  <paramref name="member" />
    ///  值未解析为静态成员。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于根据服务提供的类型解析程序解析静态字段或属性的成员名称字符串。
    ///</summary>
    ///<returns>
    ///  用于标识要引用的成员的字符串。
    ///  请参阅“备注”。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试将 <see cref="P:System.Windows.Markup.StaticExtension.Member" />
    ///  设置为 <see langword="null" />
    ///  。
    ///</exception>
    property Member: string read get_Member write set_Member;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Type" />
    ///  ，它定义要返回的静态成员。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  ，它定义要返回的静态成员。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  试图设置 <see cref="P:System.Windows.Markup.StaticExtension.MemberType" />
    ///  到 <see langword="null" />
    ///  。
    ///</exception>
    property MemberType: DDN.mscorlib.DNType read get_MemberType write set_MemberType;
  end;

  TDNStaticExtension = class(TDNGenericImport<DNStaticExtensionClass, DNStaticExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNTypeExtensionClass = interface(DNMarkupExtensionClass)
  ['{2A472BB4-DFF6-51BC-8BA9-ECF7650F0433}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeExtension; overload;
    ///<summary>
    ///  根据所提供的 <paramref name="typeName" />
    ///  字符串初始化 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" />
    ///  值，从而初始化 <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="typeName">
    ///  标识要引用的类型的字符串。
    ///  该字符串使用格式 prefix:className。
    ///  prefix 是 XAML 命名空间的映射前缀，并且仅用于未映射到默认 XAML 命名空间的引用类型。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试将 <paramref name="typeName" />
    ///  指定为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(typeName: string): DNTypeExtension; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  类的新实例，直接声明类型。
    ///</summary>
    ///  <param name="type">
    ///  将由此 <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  表示的类型。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///</exception>
    {class} function init(&type: DDN.mscorlib.DNType): DNTypeExtension; overload;

  end;

  ///<summary>
  ///  实现根据字符串输入返回 <see cref="T:System.Type" />
  ///  的标记扩展。
  ///</summary>
  [DNTypeName('System.Windows.Markup.TypeExtension')]
  DNTypeExtension = interface(DNMarkupExtension)
  ['{D751D40C-67BB-3869-BECC-7B006E7AD2B4}']
  { getters & setters } 

    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);

  { methods } 

    ///<summary>
    ///  返回一个应在应用了此扩展的属性上设置的对象。
    ///  对于 <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  ，这是为请求的类型名称计算的 <see cref="T:System.Type" />
    ///  值。
    ///</summary>
    ///  <param name="serviceProvider">
    ///  可为标记扩展提供服务的对象。
    ///  此提供程序应为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  提供服务。
    ///</param>
    ///<returns>
    ///  要在应用了扩展的属性上设置的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  扩展的 <paramref name="member" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="typeName" />
    ///  字符串的某部分未进行正确分析。
    ///  - 或 -
    ///  <paramref name="serviceProvider" />
    ///  没有为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  提供服务
    ///  - 或 -
    ///  <paramref name="typeName" />
    ///  值未解析为类型。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" />
    ///  为 <see langword="null" />
    ///</exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置此标记扩展所表示的类型名称。
    ///</summary>
    ///<returns>
    ///  用于标识类型的字符串。
    ///  此字符串使用格式 prefix:className。
    ///  （prefix 是 XML 命名空间的映射前缀，并且仅当引用未映射到 WPF 默认 XML 命名空间的类型时才需要 (http://schemas.microsoft.com/winfx/2006/xaml/presentation)。）
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  已尝试设置为 <see langword="null" />
    ///  。
    ///</exception>
    property TypeName: string read get_TypeName write set_TypeName;
    ///<summary>
    ///  获取或设置此扩展的类型信息。
    ///</summary>
    ///<returns>
    ///  建立的类型。
    ///  对于运行时而言，这可能是 get 访问的 <see langword="null" />
    ///  ，但不能设置为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  已尝试设置为 <see langword="null" />
    ///  。
    ///</exception>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
  end;

  TDNTypeExtension = class(TDNGenericImport<DNTypeExtensionClass, DNTypeExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMemberDefinitionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FF9DFBC9-A517-5F83-B0A1-146A835CF5AF}']
  end;

  ///<summary>
  ///  提供用于标记技术在声明性 XAML 中定义的类成员的基类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.MemberDefinition')]
  DNMemberDefinition = interface(DDN.mscorlib.DNObject)
  ['{7AB296A1-8AC5-3DE5-9F79-7A0E49BEE80D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  派生类中实现时，获取或设置要定义的成员的名称。
    ///</summary>
    ///<returns>
    ///  要定义的成员的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
  end;

  TDNMemberDefinition = class(TDNGenericImport<DNMemberDefinitionClass, DNMemberDefinition>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNPropertyDefinitionClass = interface(DNMemberDefinitionClass)
  ['{BA119EA4-6097-52DE-B312-751E8257BF0C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.PropertyDefinition" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPropertyDefinition;

  end;

  ///<summary>
  ///  支持在声明性 XAML 中定义类的属性标记技术。
  ///</summary>
  [DNTypeName('System.Windows.Markup.PropertyDefinition')]
  DNPropertyDefinition = interface(DNMemberDefinition)
  ['{B27F4960-CF96-3228-9B22-D0E6DD3F115D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNXamlType;
    procedure set_Type(value: DNXamlType);
    function get_Modifier: string;
    procedure set_Modifier(value: string);
    function get_Attributes: DDN.mscorlib.DNIList<DDN.mscorlib.DNAttribute>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要定义的属性的名称。
    ///</summary>
    ///<returns>
    ///  要定义的属性的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xaml.XamlType" />
    ///  要定义的属性。
    ///</summary>
    ///<returns>
    ///  要定义的属性的 XAML 类型标识符。
    ///</returns>
    property &Type: DNXamlType read get_Type write set_Type;
    ///<summary>
    ///  获取或设置为定义的属性的访问级别。
    ///</summary>
    ///<returns>
    ///  一个字符串形式的已定义属性访问级别。
    ///</returns>
    property Modifier: string read get_Modifier write set_Modifier;
    ///<summary>
    ///  获取关联的 CLR 属性的列表。
    ///</summary>
    ///<returns>
    ///  关联的特性的列表。
    ///</returns>
    property Attributes: DDN.mscorlib.DNIList<DDN.mscorlib.DNAttribute> read get_Attributes;
  end;

  TDNPropertyDefinition = class(TDNGenericImport<DNPropertyDefinitionClass, DNPropertyDefinition>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNValueSerializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{330A51B7-7BA3-53A5-B5D9-9464822AB01D}']
  { static methods } 

    ///<summary>
    ///  为指定类型获取 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  声明。
    ///</summary>
    ///  <param name="type">
    ///  要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  的类型。
    ///</param>
    ///<returns>
    ///  与指定类型相关联的序列化程序。
    ///  可能返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetSerializerFor(&type: DDN.mscorlib.DNType): DNValueSerializer; overload;
    ///<summary>
    ///  通过传递属性的 CLR 属性描述符，获取为属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  。
    ///</summary>
    ///  <param name="descriptor">
    ///  要进行序列化的属性的 CLR 属性描述符。
    ///</param>
    ///<returns>
    ///  与指定属性相关联的序列化程序。
    ///  可能返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="descriptor" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetSerializerFor(descriptor: DDN.System.DNPropertyDescriptor): DNValueSerializer; overload;
    ///<summary>
    ///  使用指定的内容，获取为指定类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  的类型。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  与指定类型相关联的序列化程序。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetSerializerFor(&type: DDN.mscorlib.DNType; context: DNIValueSerializerContext): DNValueSerializer; overload;
    ///<summary>
    ///  使用指定上下文获取为指定属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  。
    ///</summary>
    ///  <param name="descriptor">
    ///  要进行序列化的属性的描述符。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  与指定属性相关联的序列化程序。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="descriptor" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetSerializerFor(descriptor: DDN.System.DNPropertyDescriptor; context: DNIValueSerializerContext): DNValueSerializer; overload;

  end;

  ///<summary>
  ///  为从对象表示形式进行序列化定义转换行为的抽象类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.ValueSerializer')]
  DNValueSerializer = interface(DDN.mscorlib.DNObject)
  ['{40FFD90D-F735-37EA-9FB9-A1908D07CE0E}']
  { methods } 

    ///<summary>
    ///  在派生类中重写时，确定指定对象是否可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要进行计算以供转换的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false." />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  在派生类中重写时，确定指定的 <see cref="T:System.String" />
    ///  能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  的实现所支持类型的实例。
    ///</summary>
    ///  <param name="value">
    ///  要计算以进行转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果该值可以转换，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为字符串的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  指定对象的字符串表示形式。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法转换 <paramref name="value" />
    ///  。
    ///</exception>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): string;
    ///<summary>
    ///  在派生类中重写时，将 <see cref="T:System.String" />
    ///  转换为 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  的实现所支持类型的实例。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  的实现基于提供的 <paramref name="value" />
    ///  而支持的类型的新实例。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法转换 <paramref name="value" />
    ///  。
    ///</exception>
    function ConvertFromString(value: string; context: DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  引用的类型的枚举。
    ///</summary>
    ///  <param name="value">
    ///  要序列化的值。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  此序列化程序所转换的类型。
    ///</returns>
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValueSerializer = class(TDNGenericImport<DNValueSerializerClass, DNValueSerializer>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDateTimeValueSerializerClass = interface(DNValueSerializerClass)
  ['{E0B8C472-9F2E-5806-8269-30AD87B375E6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.DateTimeValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDateTimeValueSerializer;

  end;

  ///<summary>
  ///  将 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.DateTime" />
  ///  的实例进行来回转换。
  ///</summary>
  [DNTypeName('System.Windows.Markup.DateTimeValueSerializer')]
  DNDateTimeValueSerializer = interface(DNValueSerializer)
  ['{C020EC74-6C4E-3F61-9DFB-DEACCF490A6E}']
  { methods } 

    ///<summary>
    ///  确定指定的 <see cref="T:System.String" />
    ///  是否可以转换为 <see cref="T:System.DateTime" />
    ///  的实例。
    ///</summary>
    ///  <param name="value">
    ///  要计算以进行转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果该值可以转换，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定能否将指定的对象转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要进行计算以供转换的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为 <see cref="T:System.DateTime" />
    ///  的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  基于所提供的 <paramref name="value" />
    ///  的 <see cref="T:System.DateTime" />
    ///  新实例。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ConvertFromString(value: string; context: DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将 <see cref="T:System.DateTime" />
    ///  的实例转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为字符串的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.DateTime" />
    ///  的字符串表示形式。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  不是 <see cref="T:System.DateTime" />
    ///  或为 <see langword="null" />
    ///  。
    ///</exception>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): string;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  引用的类型的枚举。
    ///</summary>
    ///  <param name="value">
    ///  要序列化的值。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  此序列化程序所转换的类型。
    ///</returns>
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDateTimeValueSerializer = class(TDNGenericImport<DNDateTimeValueSerializerClass, DNDateTimeValueSerializer>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{772F29F6-525F-5E56-9AA4-D6CA843F953F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.XData" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXData;

  end;

  ///<summary>
  ///  表示可以显示为的值的文本数据 <see langword="Value" />
  ///  节点。
  ///</summary>
  [DNTypeName('System.Windows.Markup.XData')]
  DNXData = interface(DDN.mscorlib.DNObject)
  ['{C679A72D-F214-3EF5-831E-5F2EE5DE7BEF}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_XmlReader: DDN.mscorlib.DNObject;
    procedure set_XmlReader(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置文本值字符串，这 <see cref="T:System.Windows.Markup.XData" />
    ///  包装。
    ///</summary>
    ///<returns>
    ///  文字值的字符串。
    ///</returns>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  获取或设置文本的数据的读取器。
    ///</summary>
    ///<returns>
    ///  文本数据读取器。
    ///</returns>
    property XmlReader: DDN.mscorlib.DNObject read get_XmlReader write set_XmlReader;
  end;

  TDNXData = class(TDNGenericImport<DNXDataClass, DNXData>) end;

  //-------------namespace: System.Xaml----------------
  DNAmbientPropertyValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{923BFB58-74AF-5465-AA91-CDCC77148FE7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.AmbientPropertyValue" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="property">
    ///  表示环境的属性的标识符。
    ///</param>
    ///  <param name="value">
    ///  报告的值。
    ///</param>
    {class} function init(&property: DNXamlMember; value: DDN.mscorlib.DNObject): DNAmbientPropertyValue;

  end;

  ///<summary>
  ///  报告有关环境的属性，作为的一部分的信息 <see cref="T:System.Xaml.IAmbientProvider" />
  ///  实现。
  ///</summary>
  [DNTypeName('System.Xaml.AmbientPropertyValue')]
  DNAmbientPropertyValue = interface(DDN.mscorlib.DNObject)
  ['{2A7FEEE4-C30F-3242-9908-6A0EA4457C75}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    function get_RetrievedProperty: DNXamlMember;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取环境的属性的值。
    ///</summary>
    ///<returns>
    ///  环境属性的值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  获取 XAML 类型系统标识符 (<see cref="T:System.Xaml.XamlMember" />
    ///  )，它表示环境的属性。
    ///</summary>
    ///<returns>
    ///  表示环境的属性的标识符。
    ///</returns>
    property RetrievedProperty: DNXamlMember read get_RetrievedProperty;
  end;

  TDNAmbientPropertyValue = class(TDNGenericImport<DNAmbientPropertyValueClass, DNAmbientPropertyValue>) end;

  //-------------namespace: System.Xaml----------------
  DNAttachableMemberIdentifierClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DD5C379-7654-5280-8973-8A9FFCAD753C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="declaringType"><paramref name="declaringType" />
    ///  组件的标识符，它应该与声明的名称匹配 <see cref="P:System.Xaml.XamlMember.Type" />
    ///  。
    ///</param>
    ///  <param name="memberName"><paramref name="memberName" />
    ///  组件的标识符，它应与匹配 <see cref="P:System.Xaml.XamlMember.Name" />
    ///  。
    ///</param>
    {class} function init(declaringType: DDN.mscorlib.DNType; memberName: string): DNAttachableMemberIdentifier;

  end;

  ///<summary>
  ///  对于附加的成员提供 XAML 类型系统标识符表示形式。
  ///  标识符结构 parallels <paramref name="declaringType" />
  ///<see langword="." />
  ///  <paramref name="memberName" />
  ///  字符串使用可附加成员窗体。
  ///</summary>
  [DNTypeName('System.Xaml.AttachableMemberIdentifier')]
  DNAttachableMemberIdentifier = interface(DDN.mscorlib.DNObject)
  ['{C0DAF3A8-584E-3445-9766-0384339BFF45}']
  { getters & setters } 

    function get_MemberName: string;
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  确定是否的此实例 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  和指定的对象具有相同的值。
    ///</summary>
    ///  <param name="obj">
    ///  将与当前 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  以及它的值是否与此实例相同; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  确定此实例是否与另一个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  对象具有相同的值。
    ///</summary>
    ///  <param name="other">
    ///  要与当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  进行比较的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象具有相同的值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNAttachableMemberIdentifier): Boolean; overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <paramref name="memberName" />
    ///  分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  。
    ///</summary>
    ///<returns><paramref name="memberName" />
    ///  分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  。
    ///</returns>
    property MemberName: string read get_MemberName;
    ///<summary>
    ///  获取或设置 <paramref name="declaringType" />
    ///  分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  。
    ///</summary>
    ///<returns><paramref name="declaringType" />
    ///  分量值 <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNAttachableMemberIdentifier = class(TDNGenericImport<DNAttachableMemberIdentifierClass, DNAttachableMemberIdentifier>) end;

  //-------------namespace: System.Xaml----------------
  DNAttachablePropertyServicesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AE64A6CE-C4E8-5573-A219-B5C244A35C9F}']
  { static methods } 

    ///<summary>
    ///  设置指定存储中的指定可附加属性的值。
    ///</summary>
    ///  <param name="instance">
    ///  实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />
    ///  ; 或使用静态默认可附加属性存储的任何非 null 对象。
    ///</param>
    ///  <param name="name">
    ///  要为其设置一个值可附加属性项的标识符。
    ///</param>
    ///  <param name="value">
    ///  要设置的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  存储区中，无法设置一个值。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure SetProperty(instance: DDN.mscorlib.DNObject; name: DNAttachableMemberIdentifier; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回指定存储区中的可附加属性项的计数。
    ///</summary>
    ///  <param name="instance">
    ///  实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />
    ///  ; 或任何非 null 对象来访问静态默认可附加属性存储区。
    ///</param>
    ///<returns>
    ///  存储区中的条目整数计数。
    ///</returns>
    {class} function GetAttachedPropertyCount(instance: DDN.mscorlib.DNObject): Int32;
    {class} procedure CopyPropertiesTo(instance: DDN.mscorlib.DNObject; &array: TArray<DDN.mscorlib.DNKeyValuePair<DNAttachableMemberIdentifier, DDN.mscorlib.DNObject>>; index: Int32);
    ///<summary>
    ///  从指定的存储区中删除指定可附加属性的条目。
    ///</summary>
    ///  <param name="instance">
    ///  实现特定的可附加属性存储 <see cref="T:System.Xaml.IAttachedPropertyStore" />
    ///  ; 或任何非 null 对象来访问静态默认可附加属性存储区。
    ///</param>
    ///  <param name="name">
    ///  要从存储中移除的可附加属性项标识符。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果要为可附加属性条目 <paramref name="name" />
    ///  存储区中找到并移除从它; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function RemoveProperty(instance: DDN.mscorlib.DNObject; name: DNAttachableMemberIdentifier): Boolean;
    {class} function TryGetProperty(instance: DDN.mscorlib.DNObject; name: DNAttachableMemberIdentifier; out value: DDN.mscorlib.DNObject): Boolean; overload;

  end;

  ///<summary>
  ///  提供静态帮助器方法，从可附加的属性获取值和访问器方法信息并使用的附加的属性存储。
  ///</summary>
  [DNTypeName('System.Xaml.AttachablePropertyServices')]
  DNAttachablePropertyServices = interface(DDN.mscorlib.DNObject)
  ['{9C8581FE-F788-3F1E-9494-D0EC52237462}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAttachablePropertyServices = class(TDNGenericImport<DNAttachablePropertyServicesClass, DNAttachablePropertyServices>) end;

  //-------------namespace: System.Xaml----------------
  DNNamespaceDeclarationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82442CBC-3F03-5CB1-8AE8-69DD8F660A18}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  类使用的初始属性值。
    ///</summary>
    ///  <param name="ns">
    ///  XAML 命名空间标识符，以字符串形式。
    ///</param>
    ///  <param name="prefix">
    ///  为命名空间前缀映射中使用的字符串前缀。
    ///</param>
    {class} function init(ns: string; prefix: string): DNNamespaceDeclaration;

  end;

  ///<summary>
  ///  通过将这些字符串值存储为单独的属性声明的标识符和 XAML 命名空间的前缀。
  ///</summary>
  [DNTypeName('System.Xaml.NamespaceDeclaration')]
  DNNamespaceDeclaration = interface(DDN.mscorlib.DNObject)
  ['{9D436953-0ABA-3DF2-A4C6-A07578CE137D}']
  { getters & setters } 

    function get_Prefix: string;
    function get_Namespace: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用作的 XAML 命名空间映射前缀的前缀 <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  。
    ///</summary>
    ///<returns>
    ///  为此前缀字符串 <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  。
    ///</returns>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  获取的标识符部分 <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间声明的标识符。
    ///</returns>
    property Namespace: string read get_Namespace;
  end;

  TDNNamespaceDeclaration = class(TDNGenericImport<DNNamespaceDeclarationClass, DNNamespaceDeclaration>) end;

  //-------------namespace: System.Xaml.Permissions----------------
  DNXamlAccessLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DC4B356-3D0A-5828-807A-1EDB1A1036F9}']
  { static methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例基于请求的程序集 <see cref="T:System.Reflection.Assembly" />
    ///  。
    ///</summary>
    ///  <param name="assembly">
    ///  请求程序集。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例，与 <paramref name="assembly" />
    ///  值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="assembly" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function AssemblyAccessTo(assembly: DDN.mscorlib.DNAssembly): DNXamlAccessLevel; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例基于指定的特定类型 <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  来的请求访问。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例，与 <paramref name="type" />
    ///  值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />
    ///  和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  由反射到的类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function PrivateAccessTo(&type: DDN.mscorlib.DNType): DNXamlAccessLevel; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例基于请求的程序集 <see cref="T:System.Reflection.AssemblyName" />
    ///  。
    ///</summary>
    ///  <param name="assemblyName">
    ///  请求程序集名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例，与 <paramref name="assemblyName" />
    ///  值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="assemblyName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="assemblyName" />
    ///  不是有效的完全限定的程序集名称。
    ///</exception>
    {class} function AssemblyAccessTo(assemblyName: DDN.mscorlib.DNAssemblyName): DNXamlAccessLevel; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例基于由其限定名指定的特定类型。
    ///</summary>
    ///  <param name="assemblyQualifiedTypeName">
    ///  一个字符串，被分析为程序集限定类型名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  实例，与 <paramref name="assemblyQualifiedTypeName" />
    ///  值，该值用作源信息 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />
    ///  和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  由反射到的类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="assemblyQualifiedTypeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="assemblyQualifiedTypeName" />
    ///  不是有效的程序集限定类型名称。
    ///  - 或 -
    ///  中的程序集名称 <paramref name="assemblyQualifiedTypeName" />
    ///  不是有效的程序集名称。
    ///</exception>
    {class} function PrivateAccessTo(assemblyQualifiedTypeName: string): DNXamlAccessLevel; overload;

  end;

  ///<summary>
  ///  对程序集和类型为目的的加载的 XAML 定义访问控制。
  ///</summary>
  [DNTypeName('System.Xaml.Permissions.XamlAccessLevel')]
  DNXamlAccessLevel = interface(DDN.mscorlib.DNObject)
  ['{D1B913BC-E645-3A72-8357-B2A35F3173F2}']
  { getters & setters } 

    function get_AssemblyAccessToAssemblyName: DDN.mscorlib.DNAssemblyName;
    function get_PrivateAccessToTypeName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取<see cref="T:System.Reflection.AssemblyName" />
    ///  此程序集的<see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  确定权限。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.AssemblyName" />
    ///  此程序集的<see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  确定权限。
    ///</returns>
    property AssemblyAccessToAssemblyName: DDN.mscorlib.DNAssemblyName read get_AssemblyAccessToAssemblyName;
    ///<summary>
    ///  获取此类型的非限定的字符串名 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  确定权限。
    ///</summary>
    ///<returns>
    ///  此类型的非限定的字符串名 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  确定权限。
    ///</returns>
    property PrivateAccessToTypeName: string read get_PrivateAccessToTypeName;
  end;

  TDNXamlAccessLevel = class(TDNGenericImport<DNXamlAccessLevelClass, DNXamlAccessLevel>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlMemberInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08AD460A-FE67-512E-97AE-3D002D09A43F}']
  { static getter & setter } 

    {class} function get_UnknownInvoker: DNXamlMemberInvoker;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  类，基于所提供 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///  <param name="member"><see cref="T:System.Xaml.XamlMember" />
    ///  值与此相关的特定 XAML 成员 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(member: DNXamlMember): DNXamlMemberInvoker;

  { static propertys } 

    ///<summary>
    ///  提供一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  。
    ///</returns>
    {class} property UnknownInvoker: DNXamlMemberInvoker read get_UnknownInvoker;
  end;

  ///<summary>
  ///  提供了可以通过技术以外反射访问成员特征 XAML 成员的一个扩展点。
  ///</summary>
  [DNTypeName('System.Xaml.Schema.XamlMemberInvoker')]
  DNXamlMemberInvoker = interface(DDN.mscorlib.DNObject)
  ['{83F3DA3B-7461-3EFB-91FE-3A53749175A9}']
  { getters & setters } 

    function get_UnderlyingGetter: DDN.mscorlib.DNMethodInfo;
    function get_UnderlyingSetter: DDN.mscorlib.DNMethodInfo;

  { methods } 

    ///<summary>
    ///  从实例中获取相关属性的值。
    ///</summary>
    ///  <param name="instance">
    ///  该成员的所有者类型的实例。
    ///</param>
    ///<returns>
    ///  请求的属性值中。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  在调用此方法 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  基于未知 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///  - 或 -
    ///  调用此方法的只写的成员。
    ///  - 或 -
    ///<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetValue(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  实例上设置相关属性的值。
    ///</summary>
    ///  <param name="instance">
    ///  该成员的所有者类型的实例。
    ///</param>
    ///  <param name="value">
    ///  要设置的属性值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  在调用此方法 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  基于未知 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///  - 或 -
    ///  调用此方法对只读成员。
    ///  - 或 -
    ///<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SetValue(instance: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  指示是否需要通过序列化过程中保留的值。
    ///</summary>
    ///  <param name="instance">
    ///  要检查其持久性的属性具有的实例。
    ///</param>
    ///<returns>
    ///  枚举的一个值。
    ///</returns>
    function ShouldSerializeValue(instance: DDN.mscorlib.DNObject): DNShouldSerializeResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Reflection.MethodInfo" />
    ///  clr 属性获取值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MethodInfo" />
    ///  Clr 属性获取值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  , ，或 <see langword="null" />
    ///  。
    ///</returns>
    property UnderlyingGetter: DDN.mscorlib.DNMethodInfo read get_UnderlyingGetter;
    ///<summary>
    ///  获取 <see cref="T:System.Reflection.MethodInfo" />
    ///  CLR 进行设置的属性值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MethodInfo" />
    ///  CLR 进行设置的属性值的方法是适用于此的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  , ，或 <see langword="null" />
    ///  。
    ///</returns>
    property UnderlyingSetter: DDN.mscorlib.DNMethodInfo read get_UnderlyingSetter;
  end;

  TDNXamlMemberInvoker = class(TDNGenericImport<DNXamlMemberInvokerClass, DNXamlMemberInvoker>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E2E0EE1-43FF-5DB4-ACDC-519485EDB4D4}']
  { static getter & setter } 

    {class} function get_UnknownInvoker: DNXamlTypeInvoker;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  类，基于所提供 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xaml.XamlType" />
    ///  值与此相关的特定 XAML 类型 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(&type: DNXamlType): DNXamlTypeInvoker;

  { static propertys } 

    ///<summary>
    ///  提供一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个静态值，表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</returns>
    {class} property UnknownInvoker: DNXamlTypeInvoker read get_UnknownInvoker;
  end;

  ///<summary>
  ///  提供了一个扩展点，可以构造通过反射和构造函数以外的技术 XAML 类型的实例。
  ///</summary>
  [DNTypeName('System.Xaml.Schema.XamlTypeInvoker')]
  DNXamlTypeInvoker = interface(DDN.mscorlib.DNObject)
  ['{82598C63-EA8E-33B2-8EF2-9769CDCAC20D}']
  { getters & setters } 

    function get_SetMarkupExtensionHandler: DDN.mscorlib.DNEventHandler<DNXamlSetMarkupExtensionEventArgs>;
    function get_SetTypeConverterHandler: DDN.mscorlib.DNEventHandler<DNXamlSetTypeConverterEventArgs>;

  { methods } 

    ///<summary>
    ///  将所提供的项添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  相关的实例。
    ///</summary>
    ///  <param name="instance">
    ///  一个类型由 <see cref="T:System.Xaml.XamlType" />
    ///  指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</param>
    ///  <param name="item">
    ///  要添加的项。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  已在基于未知 <see cref="T:System.Xaml.XamlType" />
    ///  的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  上调用了此方法。
    ///  - 或 -
    ///  在其相关类型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  上调用此方法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xaml.XamlSchemaException">
    ///  此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
    ///  返回 <see langword="null" />
    ///  。
    ///</exception>
    procedure AddToCollection(instance: DDN.mscorlib.DNObject; item: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将所提供的密钥和项值添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  相关的实例。
    ///</summary>
    ///  <param name="instance">
    ///  一个类型由 <see cref="T:System.Xaml.XamlType" />
    ///  指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</param>
    ///  <param name="key">
    ///  要添加的项的字典键。
    ///</param>
    ///  <param name="item">
    ///  要添加的项值。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  已在基于未知 <see cref="T:System.Xaml.XamlType" />
    ///  的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  上调用了此方法。
    ///  - 或 -
    ///  已在其相关类型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  上调用了此方法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xaml.XamlSchemaException">
    ///  此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
    ///  返回 <see langword="null" />
    ///  。
    ///</exception>
    procedure AddToDictionary(instance: DDN.mscorlib.DNObject; key: DDN.mscorlib.DNObject; item: DDN.mscorlib.DNObject);
    ///<summary>
    ///  创建对象实例基于构造启动 <see cref="T:System.Xaml.XamlType" />
    ///  此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</summary>
    ///  <param name="arguments">
    ///  提供的对象的数组 <see langword="x:ConstructorArgs" />
    ///  的实例。
    ///  可能是 <see langword="null" />
    ///  的类型的不需要或不使用 <see langword="x:ConstructorArgs" />
    ///  。
    ///</param>
    ///<returns>
    ///  所创建的实例基于构造启动 <see cref="T:System.Xaml.XamlType" />
    ///  此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.MissingMethodException">
    ///  无法解析一个构造函数。
    ///</exception>
    function CreateInstance(arguments: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回一个对象，表示可以对项进行枚举的方法。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.MethodInfo" />
    ///  枚举器方法，或 <see langword="null" />
    ///  。
    ///</returns>
    function GetEnumeratorMethod: DDN.mscorlib.DNMethodInfo;
    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEnumerator" />
    ///  表示的项集的对象。
    ///</summary>
    ///  <param name="instance">
    ///  指定的类型的实例 <see cref="T:System.Xaml.XamlType" />
    ///  用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  对象，或 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  基于未知 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///  - 或 -
    ///  在调用此方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  相关的类型不是集合或字典的位置。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetItems(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  返回相关 <see langword="Add" />
    ///  方法 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  与集合或字典。
    ///</summary>
    ///  <param name="contentType"><see cref="T:System.Xaml.XamlType" />
    ///  使用的项类型 <see langword="Add" />
    ///  方法。
    ///</param>
    ///<returns>
    ///  CLR <see cref="T:System.Reflection.MethodInfo" />
    ///  信息 <see langword="Add" />
    ///  方法，则为 null。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="contentType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetAddMethod(contentType: DNXamlType): DDN.mscorlib.DNMethodInfo;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取该处理程序时要使用 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  调入所实现 <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  处理这种情况下一个处理程序实现。
    ///</returns>
    property SetMarkupExtensionHandler: DDN.mscorlib.DNEventHandler<DNXamlSetMarkupExtensionEventArgs> read get_SetMarkupExtensionHandler;
    ///<summary>
    ///  获取该处理程序时要使用 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  调入 CLR 实现 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  。
    ///</summary>
    ///<returns>
    ///  处理这种情况下一个处理程序实现。
    ///</returns>
    property SetTypeConverterHandler: DDN.mscorlib.DNEventHandler<DNXamlSetTypeConverterEventArgs> read get_SetTypeConverterHandler;
  end;

  TDNXamlTypeInvoker = class(TDNGenericImport<DNXamlTypeInvokerClass, DNXamlTypeInvoker>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{426D86FB-D101-54F1-BAF8-BBCC8D8BD4EB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlTypeName; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  类，基于名称和命名空间的字符串。
    ///</summary>
    ///  <param name="xamlNamespace">
    ///  XAML 命名空间，其中包含名称。
    ///</param>
    ///  <param name="name">
    ///  要创建的类型的名称 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  有关。
    ///</param>
    {class} function init(xamlNamespace: string; name: string): DNXamlTypeName; overload;
    {class} function init(xamlNamespace: string; name: string; typeArguments: DDN.mscorlib.DNIEnumerable<DNXamlTypeName>): DNXamlTypeName; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  类，基于现有 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///  <param name="xamlType">
    ///  现有 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xamlType: DNXamlType): DNXamlTypeName; overload;

  { static methods } 

    ///<summary>
    ///  提供了 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  值基于类型名称和一个对象，可以将标记前缀解析为命名空间。
    ///</summary>
    ///  <param name="typeName">
    ///  若要创建的类型名称 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  值。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  对象或服务提供程序实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" />
    ///  。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="typeName" />
    ///  或 <paramref name="namespaceResolver" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法分析字符串。
    ///</exception>
    {class} function Parse(typeName: string; namespaceResolver: DNIXamlNamespaceResolver): DNXamlTypeName;
    {class} function TryParse(typeName: string; namespaceResolver: DNIXamlNamespaceResolver; out result: DNXamlTypeName): Boolean;
    {class} function ToString(typeNameList: DDN.mscorlib.DNIList<DNXamlTypeName>; prefixLookup: DNINamespacePrefixLookup): string; overload;
    ///<summary>
    ///  提供了 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  值基于一个字符串，可以指定多个类型名称，并可以将标记前缀解析为命名空间的对象。
    ///</summary>
    ///  <param name="typeNameList">
    ///  一个字符串，包含多个类型。
    ///  请参阅“备注”。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  对象或服务提供程序实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" />
    ///  。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="typeNameList" />
    ///  或 <paramref name="namespaceResolver" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法分析字符串。
    ///</exception>
    {class} function ParseList(typeNameList: string; namespaceResolver: DNIXamlNamespaceResolver): DDN.mscorlib.DNIList<DNXamlTypeName>;
    {class} function TryParseList(typeNameList: string; namespaceResolver: DNIXamlNamespaceResolver; out result: DDN.mscorlib.DNIList<DNXamlTypeName>): Boolean;

  end;

  ///<summary>
  ///  提供一种指定的 XAML 类型名称和命名空间方面。
  ///</summary>
  [DNTypeName('System.Xaml.Schema.XamlTypeName')]
  DNXamlTypeName = interface(DDN.mscorlib.DNObject)
  ['{E74FA3C9-0215-3DC4-AB6B-7A5512A1E625}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeArguments: DDN.mscorlib.DNIList<DNXamlTypeName>;

  { methods } 

    ///<summary>
    ///  将此值转换 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  为其等效的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  等效字符串表示形式这 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  将此值转换 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  为其等效的字符串表示形式，这可以用于标记语法中的一种类型的对象元素用法。
    ///</summary>
    ///  <param name="prefixLookup">
    ///  前缀查找服务引用。
    ///</param>
    ///<returns>
    ///  一个前缀的用法的字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />
    ///  为此 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  是 <see langword="null" />
    ///  。
    ///  - 或 -
    ///<see cref="P:System.Xaml.Schema.XamlTypeName.Name" />
    ///  无效。
    ///  - 或 -
    ///  无法查找该前缀。
    ///</exception>
    function ToString(prefixLookup: DNINamespacePrefixLookup): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取用于构造此名称 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  。
    ///</summary>
    ///<returns>
    ///  类型的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取用于构造此的 XAML 命名空间标识符 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间标识符。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取用于构造此的类型参数 <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  。
    ///</summary>
    ///<returns>
    ///  类型参数，如果有的话。
    ///  可能为 null。
    ///</returns>
    property TypeArguments: DDN.mscorlib.DNIList<DNXamlTypeName> read get_TypeArguments;
  end;

  TDNXamlTypeName = class(TDNGenericImport<DNXamlTypeNameClass, DNXamlTypeName>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlValueConverterClass<TConverterBase> = interface(DNObjectClass)
  ['{C7EE263E-1813-5862-9C55-06D5C8C13F0D}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  类，基于转换器实现 <see cref="T:System.Type" />
    ///  和目标类型的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</summary>
    ///  <param name="converterType"><see cref="T:System.Type" />
    ///  实现转换器行为。
    ///</param>
    ///  <param name="targetType">
    ///  目标 <see cref="T:System.Xaml.XamlType" />
    ///  的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</param>
    {class} function init(converterType: DDN.mscorlib.DNType; targetType: DNXamlType): DNXamlValueConverter<TConverterBase>; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  类，基于转换器实现 <see cref="T:System.Type" />
    ///  的目标类型 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  , ，以及一个字符串值。
    ///</summary>
    ///  <param name="converterType"><see cref="T:System.Type" />
    ///  实现转换器行为。
    ///</param>
    ///  <param name="targetType">
    ///  目标 <see cref="T:System.Xaml.XamlType" />
    ///  的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</param>
    ///  <param name="name">
    ///  字符串名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  所有三个参数都是 <see langword="null" />
    ///  （至少一个需要为非 null）。
    ///</exception>
    {class} function init(converterType: DDN.mscorlib.DNType; targetType: DNXamlType; name: string): DNXamlValueConverter<TConverterBase>; overload;

  end;

  ///<summary>
  ///  提供有关为基于非最终目标类型的输入的 XAML 生成初始化或序列化值的方法的公共 API 图面。
  ///  这包括标记扩展和类型转换器。
  ///</summary>
  ///<typeparam name="TConverterBase">
  ///  CLR 基类的特定转换器此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
  ///  表示。
  ///  通常这是以下项之一︰ <see cref="T:System.ComponentModel.TypeConverter" />
  ///  ; <see cref="T:System.Windows.Markup.MarkupExtension" />
  ///  ; <see cref="T:System.Windows.Markup.ValueSerializer" />
  ///  ;
  ///</typeparam>
  [DNTypeName('System.Xaml.Schema.XamlValueConverter`1')]
  DNXamlValueConverter<TConverterBase> = interface(DNObject)
  ['{CAE37EAC-CD32-36FA-95B8-01E04F36E442}']
  { getters & setters } 

    function get_Name: string;
    function get_ConverterType: DDN.mscorlib.DNType;
    function get_TargetType: DNXamlType;
    function get_ConverterInstance: TConverterBase;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  ，表示此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  确定是否的此实例 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与指定的对象，还必须是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  对象，具有相同的值。
    ///</summary>
    ///  <param name="obj">
    ///  要比较的对象。
    ///</param>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  是一个 <paramref name="obj" />
    ///  且其值与此实例相等，则为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function Equals(other: DNXamlValueConverter<TConverterBase>): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此字符串名称 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串名称 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  实现转换器行为的类。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  实现转换器行为的类。
    ///</returns>
    property ConverterType: DDN.mscorlib.DNType read get_ConverterType;
    ///<summary>
    ///  获取目标 <see cref="T:System.Xaml.XamlType" />
    ///  的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</summary>
    ///<returns>
    ///  目标 <see cref="T:System.Xaml.XamlType" />
    ///  的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  。
    ///</returns>
    property TargetType: DNXamlType read get_TargetType;
    ///<summary>
    ///  获取转换器实现创建的实例。
    ///</summary>
    ///<returns>
    ///  转换器实现中，已创建的实例或 <see langword="null" />
    ///  。
    ///</returns>
    property ConverterInstance: TConverterBase read get_ConverterInstance;
  end;

  TDNXamlValueConverter<TConverterBase> = class(TDNGenericImport<DNXamlValueConverterClass<TConverterBase>, DNXamlValueConverter<TConverterBase>>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDeferringLoaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0572E41E-649A-56BF-AAAE-3BB70C54BBAB}']
  end;

  ///<summary>
  ///  表示一个 XAML 读取器行为的加载，并返回已推迟的内容。
  ///</summary>
  [DNTypeName('System.Xaml.XamlDeferringLoader')]
  DNXamlDeferringLoader = interface(DDN.mscorlib.DNObject)
  ['{E9306312-9761-3EAB-902B-5EB6D1E041BC}']
  { methods } 

    ///<summary>
    ///  延迟模式下，取决于在加载 XAML 内容 <see cref="T:System.Xaml.XamlReader" />
    ///  和服务提供商提供的某些所需的服务。
    ///</summary>
    ///  <param name="xamlReader">
    ///  返回到调用的起始读取 <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" />
    ///  。
    ///</param>
    ///  <param name="serviceProvider">
    ///  服务提供程序所需的服务中。
    ///</param>
    ///<returns>
    ///  由输入生成的根对象 <see cref="T:System.Xaml.XamlReader" />
    ///  。
    ///</returns>
    function Load(xamlReader: DNXamlReader; serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    ///<summary>
    ///  为延迟加载，请提交一个值。
    ///</summary>
    ///  <param name="value">
    ///  要提交为延迟加载的输入的值。
    ///</param>
    ///  <param name="serviceProvider">
    ///  服务提供程序所需的服务中。
    ///</param>
    ///<returns>
    ///  XAML 读取器，来获取作为 XAML 节点信息的延迟的值。
    ///</returns>
    function Save(value: DDN.mscorlib.DNObject; serviceProvider: DDN.mscorlib.DNIServiceProvider): DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlDeferringLoader = class(TDNGenericImport<DNXamlDeferringLoaderClass, DNXamlDeferringLoader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlLanguageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AE3AE3E-29B5-55E4-8837-DAF95F24117D}']
  { static getter & setter } 

    {class} function get_XamlNamespaces: DDN.mscorlib.DNIList<string>;
    {class} function get_XmlNamespaces: DDN.mscorlib.DNIList<string>;
    {class} function get_Array: DNXamlType;
    {class} function get_Member: DNXamlType;
    {class} function get_Null: DNXamlType;
    {class} function get_Property: DNXamlType;
    {class} function get_Reference: DNXamlType;
    {class} function get_Static: DNXamlType;
    {class} function get_Type: DNXamlType;
    {class} function get_String: DNXamlType;
    {class} function get_Double: DNXamlType;
    {class} function get_Int32: DNXamlType;
    {class} function get_Boolean: DNXamlType;
    {class} function get_XData: DNXamlType;
    {class} function get_Object: DNXamlType;
    {class} function get_Char: DNXamlType;
    {class} function get_Single: DNXamlType;
    {class} function get_Byte: DNXamlType;
    {class} function get_Int16: DNXamlType;
    {class} function get_Int64: DNXamlType;
    {class} function get_Decimal: DNXamlType;
    {class} function get_Uri: DNXamlType;
    {class} function get_TimeSpan: DNXamlType;
    {class} function get_AllTypes: DDN.mscorlib.DNReadOnlyCollection<DNXamlType>;
    {class} function get_Arguments: DNXamlDirective;
    {class} function get_AsyncRecords: DNXamlDirective;
    {class} function get_Class: DNXamlDirective;
    {class} function get_ClassModifier: DNXamlDirective;
    {class} function get_Code: DNXamlDirective;
    {class} function get_ConnectionId: DNXamlDirective;
    {class} function get_FactoryMethod: DNXamlDirective;
    {class} function get_FieldModifier: DNXamlDirective;
    {class} function get_Items: DNXamlDirective;
    {class} function get_Initialization: DNXamlDirective;
    {class} function get_Key: DNXamlDirective;
    {class} function get_Members: DNXamlDirective;
    {class} function get_ClassAttributes: DNXamlDirective;
    {class} function get_Name: DNXamlDirective;
    {class} function get_PositionalParameters: DNXamlDirective;
    {class} function get_Shared: DNXamlDirective;
    {class} function get_Subclass: DNXamlDirective;
    {class} function get_SynchronousMode: DNXamlDirective;
    {class} function get_TypeArguments: DNXamlDirective;
    {class} function get_Uid: DNXamlDirective;
    {class} function get_UnknownContent: DNXamlDirective;
    {class} function get_Base: DNXamlDirective;
    {class} function get_Lang: DNXamlDirective;
    {class} function get_Space: DNXamlDirective;
    {class} function get_AllDirectives: DDN.mscorlib.DNReadOnlyCollection<DNXamlDirective>;

  { static propertys } 

    ///<summary>
    ///  获取 XAML 命名空间标识符的集合。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间标识符的集合。
    ///</returns>
    {class} property XamlNamespaces: DDN.mscorlib.DNIList<string> read get_XamlNamespaces;
    ///<summary>
    ///  获取 XML 命名空间标识符的集合。
    ///</summary>
    ///<returns>
    ///  XML 命名空间标识符的集合。
    ///</returns>
    {class} property XmlNamespaces: DDN.mscorlib.DNIList<string> read get_XmlNamespaces;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Array" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Array" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property &Array: DNXamlType read get_Array;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  的项类型的类型为 <see cref="P:System.Xaml.XamlLanguage.Members" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  的项类型的类型为 <see cref="P:System.Xaml.XamlLanguage.Members" />
    ///  。
    ///</returns>
    {class} property Member: DNXamlType read get_Member;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Null" />
    ///  或 <see langword="NullExtension" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Null" />
    ///  /<see langword="NullExtension" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Null: DNXamlType read get_Null;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Property" />
    ///  中 XAML 的概念。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Property" />
    ///  中 XAML 的概念。
    ///</returns>
    {class} property &Property: DNXamlType read get_Property;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  表示 <see langword="Reference" />
    ///  xaml。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  表示 <see langword="Reference" />
    ///  xaml。
    ///</returns>
    {class} property Reference: DNXamlType read get_Reference;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Static" />
    ///  /<see langword="StaticExtension" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Static" />
    ///  /<see langword="StaticExtension" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property &Static: DNXamlType read get_Static;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Type" />
    ///  /<see langword="TypeExtension" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Type" />
    ///  /<see langword="TypeExtension" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property &Type: DNXamlType read get_Type;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="String" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="String" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property &String: DNXamlType read get_String;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Double" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Double" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Double: DNXamlType read get_Double;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Int32" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Int32" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Int32: DNXamlType read get_Int32;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Boolean" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Boolean" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Boolean: DNXamlType read get_Boolean;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  备份的 XAML 类型 <see langword="XData" />
    ///  中 XAML 块。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  备份的 XAML 类型 <see langword="XData" />
    ///  块。
    ///  See [MS-XAML] Section 5.2.23.
    ///</returns>
    {class} property XData: DNXamlType read get_XData;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Object" />
    ///  XAML 语言概念。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Object" />
    ///  XAML 语言概念。
    ///</returns>
    {class} property &Object: DNXamlType read get_Object;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Char" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Char" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Char: DNXamlType read get_Char;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Single" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Single" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Single: DNXamlType read get_Single;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Byte" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Byte" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Byte: DNXamlType read get_Byte;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Int16" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Int16" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Int16: DNXamlType read get_Int16;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Int64" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Int64" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Int64: DNXamlType read get_Int64;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Decimal" />
    ///  XAML 语言内部函数。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Decimal" />
    ///  XAML 语言内部函数。
    ///</returns>
    {class} property Decimal: DNXamlType read get_Decimal;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Uri" />
    ///  XAML 语言概念。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="Uri" />
    ///  XAML 语言概念。
    ///</returns>
    {class} property Uri: DNXamlType read get_Uri;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="TimeSpan" />
    ///  中 XAML 语言概念。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  为 <see langword="TimeSpan" />
    ///  XAML 语言概念。
    ///</returns>
    {class} property TimeSpan: DNXamlType read get_TimeSpan;
    ///<summary>
    ///  获取个人的只读泛型集合 <see cref="T:System.Xaml.XamlType" />
    ///  匹配的值或别名，XAML 语言内部定义的.NET Framework XAML 服务。
    ///</summary>
    ///<returns>
    ///  只读的泛型集合，每个 <see cref="T:System.Xaml.XamlType" />
    ///  与 XAML 语言内部相匹配。
    ///</returns>
    {class} property AllTypes: DDN.mscorlib.DNReadOnlyCollection<DNXamlType> read get_AllTypes;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Arguments" />
    ///  的工厂方法或泛型用法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Arguments" />
    ///  的工厂方法或泛型用法。
    ///</returns>
    {class} property Arguments: DNXamlDirective read get_Arguments;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="AsyncRecords" />
    ///  伪成员。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="AsyncRecords" />
    ///  伪成员。
    ///</returns>
    {class} property AsyncRecords: DNXamlDirective read get_AsyncRecords;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Class" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Class" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property &Class: DNXamlDirective read get_Class;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="ClassModifier" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="ClassModifier" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property ClassModifier: DNXamlDirective read get_ClassModifier;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Code" />
    ///  详见 [MS-XAML]。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Code" />
    ///  详见 [MS-XAML]。
    ///</returns>
    {class} property Code: DNXamlDirective read get_Code;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  ，它标识用于将事件写入处理程序的连接点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  ，它标识用于将事件写入处理程序的连接点。
    ///</returns>
    {class} property ConnectionId: DNXamlDirective read get_ConnectionId;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  XAML 的标识的工厂方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  XAML 的标识的工厂方法。
    ///</returns>
    {class} property FactoryMethod: DNXamlDirective read get_FactoryMethod;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="FieldModifier" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="FieldModifier" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property FieldModifier: DNXamlDirective read get_FieldModifier;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Items" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Items" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property Items: DNXamlDirective read get_Items;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Initialization" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Initialization" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property &Initialization: DNXamlDirective read get_Initialization;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Key" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Key" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property Key: DNXamlDirective read get_Key;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Members" />
    ///  中 XAML 的概念。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Members" />
    ///  中 XAML 的概念。
    ///</returns>
    {class} property Members: DNXamlDirective read get_Members;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="ClassAttributes" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="ClassAttributes" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property ClassAttributes: DNXamlDirective read get_ClassAttributes;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Name" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Name" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property Name: DNXamlDirective read get_Name;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="PositionalParameters" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="PositionalParameters" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property PositionalParameters: DNXamlDirective read get_PositionalParameters;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Shared" />
    ///  xaml 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Shared" />
    ///  xaml 指令。
    ///</returns>
    {class} property Shared: DNXamlDirective read get_Shared;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Subclass" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Subclass" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property Subclass: DNXamlDirective read get_Subclass;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  这样如果 XAML 处理器支持这种模式以异步方式加载 XAML。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  ，利用它可以以异步方式加载 XAML。
    ///</returns>
    {class} property SynchronousMode: DNXamlDirective read get_SynchronousMode;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="TypeArguments" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="TypeArguments" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property TypeArguments: DNXamlDirective read get_TypeArguments;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Uid" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="Uid" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property Uid: DNXamlDirective read get_Uid;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="UnknownContent" />
    ///  从 XAML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="UnknownContent" />
    ///  从 XAML 指令。
    ///</returns>
    {class} property UnknownContent: DNXamlDirective read get_UnknownContent;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="base" />
    ///  从 XML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="base" />
    ///  从 XML 指令。
    ///</returns>
    {class} property Base: DNXamlDirective read get_Base;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="lang" />
    ///  从 XML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="lang" />
    ///  从 XML 指令。
    ///</returns>
    {class} property Lang: DNXamlDirective read get_Lang;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="space" />
    ///  从 XML 指令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  为 <see langword="space" />
    ///  从 XML 指令。
    ///</returns>
    {class} property Space: DNXamlDirective read get_Space;
    ///<summary>
    ///  获取一个只读的泛型集合，每个 <see cref="T:System.Xaml.XamlDirective" />
    ///  由.NET Framework XAML 服务定义的标识符。
    ///</summary>
    ///<returns>
    ///  只读的泛型集合，每个 <see cref="T:System.Xaml.XamlDirective" />
    ///  由.NET Framework XAML 服务定义的标识符。
    ///</returns>
    {class} property AllDirectives: DDN.mscorlib.DNReadOnlyCollection<DNXamlDirective> read get_AllDirectives;
  end;

  ///<summary>
  ///  定义常量，以提供字符串对于 XAML 标记或使用 XAML 类型进行编程非常有用的对象。
  ///  这些字符串或对象是 XAML 语言概念，在.NET Framework XAML 服务中，XAML 语言概念的实现，或者对二者同时相关的。
  ///</summary>
  [DNTypeName('System.Xaml.XamlLanguage')]
  DNXamlLanguage = interface(DDN.mscorlib.DNObject)
  ['{B70AAB97-D391-3FD3-9CC8-8F237D25D6C2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlLanguage = class(TDNGenericImport<DNXamlLanguageClass, DNXamlLanguage>)
  public const
    ///<summary>
    ///  获取一个字符串值，用于标识 XAML (2006) 语言命名空间的字符串。
    ///  该命名空间对应于 XAML （2006 年）"x"带前缀的命名空间中定义 [MS-XAML] Section 5.1.1。
    ///</summary>
   Xaml2006Namespace = 'http://schemas.microsoft.com/winfx/2006/xaml';
    ///<summary>
    ///  获取一个字符串值，用于标识 XML (1998) 语言命名空间的字符串。
    ///  该命名空间对应的 XML 前缀"xml"命名空间中引用 [MS-XAML] Section 5.1.2。
    ///</summary>
   Xml1998Namespace = 'http://www.w3.org/XML/1998/namespace';
  end;

  //-------------namespace: System.Xaml----------------
  DNXamlMemberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EEA9FABC-D37C-56CA-A392-41F4C2BB369F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类使用的字符串名称和声明 <see cref="T:System.Xaml.XamlType" />
    ///  信息。
    ///  一个 <see cref="T:System.Xaml.XamlMember" />
    ///  构造与此签名具有明显的限制; 请参阅备注。
    ///</summary>
    ///  <param name="name">
    ///  成员的字符串名称。
    ///</param>
    ///  <param name="declaringType"><see cref="T:System.Xaml.XamlType" />
    ///  声明类型的信息。
    ///</param>
    ///  <param name="isAttachable"><see langword="true" />
    ///  若要指示该成员是可附加;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  或 <paramref name="declaringType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(name: string; declaringType: DNXamlType; isAttachable: Boolean): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类使用 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />
    ///  和 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  。
    ///</summary>
    ///  <param name="propertyInfo">
    ///  CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />
    ///  ，它表示的属性成员。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    {class} function init(propertyInfo: DDN.mscorlib.DNPropertyInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类使用反射 <see cref="T:System.Reflection.PropertyInfo" />
    ///  和 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  , ，其中包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  信息。
    ///</summary>
    ///  <param name="propertyInfo">
    ///  CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />
    ///  ，它表示的属性成员。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    ///  <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  处理运行时调用的实现调用针对 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</param>
    {class} function init(propertyInfo: DDN.mscorlib.DNPropertyInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类使用 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />
    ///  和 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  。
    ///</summary>
    ///  <param name="eventInfo">
    ///  CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />
    ///  ，它表示的事件成员。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    {class} function init(eventInfo: DDN.mscorlib.DNEventInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类使用 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />
    ///  和 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  , ，其中包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  信息。
    ///</summary>
    ///  <param name="eventInfo">
    ///  CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />
    ///  ，它表示的事件成员。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    ///  <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  处理运行时反射的实现调用针对 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</param>
    {class} function init(eventInfo: DDN.mscorlib.DNEventInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类 <see cref="T:System.Xaml.XamlMember" />
    ///  该对象表示可附加属性。
    ///</summary>
    ///  <param name="attachablePropertyName">
    ///  可附加属性的字符串名称。
    ///</param>
    ///  <param name="getter">
    ///  CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />
    ///  为 <see langword="get" />
    ///  可附加的成员的访问器的支持实现。
    ///</param>
    ///  <param name="setter">
    ///  CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />
    ///  为 <see langword="set" />
    ///  可附加的成员的访问器的支持实现。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    {class} function init(attachablePropertyName: string; getter: DDN.mscorlib.DNMethodInfo; setter: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类 <see cref="T:System.Xaml.XamlMember" />
    ///  ，它表示可附加属性，包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  信息。
    ///</summary>
    ///  <param name="attachablePropertyName">
    ///  可附加属性的字符串名称。
    ///</param>
    ///  <param name="getter">
    ///  CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />
    ///  为 <see langword="get" />
    ///  可附加的成员的访问器的支持实现。
    ///</param>
    ///  <param name="setter">
    ///  CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />
    ///  为 <see langword="set" />
    ///  可附加的成员的访问器的支持实现。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    ///  <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  处理运行时调用的实现调用针对 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</param>
    {class} function init(attachablePropertyName: string; getter: DDN.mscorlib.DNMethodInfo; setter: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类 <see cref="T:System.Xaml.XamlMember" />
    ///  表示附加事件。
    ///</summary>
    ///  <param name="attachableEventName">
    ///  可附加事件的字符串名称。
    ///</param>
    ///  <param name="adder">
    ///  CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />
    ///  的处理程序 <see langword="Add" />
    ///  可附加的成员的方法的支持实现。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    {class} function init(attachableEventName: string; adder: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlMember" />
    ///  类 <see cref="T:System.Xaml.XamlMember" />
    ///  ，它表示可附加的事件，包括 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  信息。
    ///</summary>
    ///  <param name="attachableEventName">
    ///  可附加事件的字符串名称。
    ///</param>
    ///  <param name="adder">
    ///  CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />
    ///  的处理程序 <see langword="Add" />
    ///  可附加的成员的方法的支持实现。
    ///</param>
    ///  <param name="schemaContext"><see cref="T:System.Xaml.XamlSchemaContext" />
    ///  限定成员的上下文。
    ///</param>
    ///  <param name="invoker"><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  处理运行时调用的实现调用针对 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</param>
    {class} function init(attachableEventName: string; adder: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;

  end;

  ///<summary>
  ///  有关 XAML 类型的成员提供的 XAML 类型系统标识符。
  ///  标识符由 XAML 读取器和 XAML 编写器使用的成员节点的处理期间 (当 XAML 读取器定位在 <see cref="F:System.Xaml.XamlNodeType.StartMember" />
  ///  ) 也将说明 XAML 类型系统的常规逻辑。
  ///</summary>
  [DNTypeName('System.Xaml.XamlMember')]
  DNXamlMember = interface(DDN.mscorlib.DNObject)
  ['{5D1A3423-D8C4-32EA-BA89-2DE77E98692C}']
  { getters & setters } 

    function get_DeclaringType: DNXamlType;
    function get_Invoker: DNXamlMemberInvoker;
    function get_IsUnknown: Boolean;
    function get_IsReadPublic: Boolean;
    function get_IsWritePublic: Boolean;
    function get_Name: string;
    function get_IsNameValid: Boolean;
    function get_PreferredXamlNamespace: string;
    function get_TargetType: DNXamlType;
    function get_Type: DNXamlType;
    function get_TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>;
    function get_ValueSerializer: DNXamlValueConverter<DNValueSerializer>;
    function get_DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader>;
    function get_UnderlyingMember: DDN.mscorlib.DNMemberInfo;
    function get_IsReadOnly: Boolean;
    function get_IsWriteOnly: Boolean;
    function get_IsAttachable: Boolean;
    function get_IsEvent: Boolean;
    function get_IsDirective: Boolean;
    function get_DependsOn: DDN.mscorlib.DNIList<DNXamlMember>;
    function get_IsAmbient: Boolean;
    function get_SerializationVisibility: DDN.System.DNDesignerSerializationVisibility;
    function get_MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char>;

  { methods } 

    ///<summary>
    ///  此 XAML 成员都将返回 XAML 命名空间的列表。
    ///</summary>
    ///<returns>
    ///  以字符串形式的 XAML 命名空间标识符的列表。
    ///</returns>
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    ///<summary>
    ///  指示当前对象是否等于另一个对象。
    ///</summary>
    ///  <param name="obj">
    ///  要与此对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果当前对象等于 <paramref name="obj" />
    ///  参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回该对象的哈希代码。
    ///</summary>
    ///<returns>
    ///  整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  指示当前对象是否等于同一类型的另一个对象。
    ///</summary>
    ///  <param name="other">
    ///  一个与此对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果当前对象等于 <paramref name="other" />
    ///  参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNXamlMember): Boolean; overload;
    ///<summary>
    ///  返回的字符串表示形式 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串表示形式 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  声明与此关联的成员的类型为 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  声明与此关联的成员的类型为 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</returns>
    property DeclaringType: DNXamlType read get_DeclaringType;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  与此关联的实现 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  与此关联的实现 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</returns>
    property Invoker: DNXamlMemberInvoker read get_Invoker;
    ///<summary>
    ///  获取一个值，该值指示是否该成员不是可解析用于类型和成员解析的支持系统。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该成员不是可解析; <see langword="false" />
    ///  如果成员是可解析。
    ///</returns>
    property IsUnknown: Boolean read get_IsUnknown;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示具有可调用公共成员 <see langword="get" />
    ///  取值函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示可调用公共 <see langword="get" />
    ///  访问器; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadPublic: Boolean read get_IsReadPublic;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示具有可调用公共成员 <see langword="set" />
    ///  取值函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示可调用公共 <see langword="set" />
    ///  访问器; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWritePublic: Boolean read get_IsWritePublic;
    ///<summary>
    ///  获取 <see langword="xamlName" />
    ///  name 声明此字符串 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see langword="xamlName" />
    ///  Name 声明此字符串 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  具有有效初始化 <see langword="xamlName" />
    ///  字符串作为其 <see cref="P:System.Xaml.XamlMember.Name" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  具有有效初始化 <see langword="xamlName" />
    ///  字符串; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNameValid: Boolean read get_IsNameValid;
    ///<summary>
    ///  获取单个 XAML 命名空间 URI，用于标识此主 XAML 命名空间 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns>
    ///  为此主 XAML 命名空间的标识符 <see cref="T:System.Xaml.XamlMember" />
    ///  , ，作为字符串。
    ///</returns>
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  类型的其中 <see cref="T:System.Xaml.XamlMember" />
    ///  可以存在。
    ///</summary>
    ///<returns>
    ///  类型其中 <see cref="T:System.Xaml.XamlMember" />
    ///  可以存在。
    ///  请参阅“备注”。
    ///</returns>
    property TargetType: DNXamlType read get_TargetType;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  成员使用的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  成员使用的类型。
    ///  请参阅“备注”。
    ///</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  对象，可用于 XAML 声明的对象的类型转换构造。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  值，与 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  泛型约束。
    ///  请参阅“备注”。
    ///</returns>
    property TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter> read get_TypeConverter;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  对象，用于进行 XAML 声明的对象的值序列化。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  泛型约束。
    ///</returns>
    property ValueSerializer: DNXamlValueConverter<DNValueSerializer> read get_ValueSerializer;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  对象，它用于延迟加载的 XAML 声明对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.Xaml.XamlDeferringLoader" />
    ///  泛型约束。
    ///</returns>
    property DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader> read get_DeferringLoader;
    ///<summary>
    ///  获取 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，它可用于构造的一个成员 <see cref="T:System.Reflection.PropertyInfo" />
    ///  , ，<see cref="T:System.Reflection.MethodInfo" />
    ///  , ，或 <see cref="T:System.Reflection.EventInfo" />
    ///  。
    ///</summary>
    ///<returns>
    ///  CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />
    ///  信息，作为初始构造函数参数强制转换。
    ///  一个 <see cref="T:System.Xaml.XamlMember" />
    ///  构造 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
    ///  签名返回 <see langword="null" />
    ///  。
    ///</returns>
    property UnderlyingMember: DDN.mscorlib.DNMemberInfo read get_UnderlyingMember;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示只读成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示只读成员; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个只写的成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个只写的成员; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWriteOnly: Boolean read get_IsWriteOnly;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  是附加的成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  是可附加成员; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAttachable: Boolean read get_IsAttachable;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个事件成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个事件; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEvent: Boolean read get_IsEvent;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  是否为 XAML 指令。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  是一个 XAML 指令; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDirective: Boolean read get_IsDirective;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlMember" />
    ///  对象的列表。
    ///  这些报告的依赖关系的初始化顺序所在相对于此的成员 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlMember" />
    ///  对象的列表。
    ///</returns>
    property DependsOn: DDN.mscorlib.DNIList<DNXamlMember> read get_DependsOn;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  报告作为环境属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  报告作为环境属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAmbient: Boolean read get_IsAmbient;
    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  值，该值指示可视化设计器应如何处理该成员。
    ///</summary>
    ///<returns>
    ///  值为 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  枚举。
    ///  默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />
    ///  。
    ///</returns>
    property SerializationVisibility: DDN.System.DNDesignerSerializationVisibility read get_SerializationVisibility;
    ///<summary>
    ///  定义标记扩展的开始和结束括号字符。
    ///</summary>
    ///<returns>
    ///  包含开始和结束括号字符的集合。
    ///</returns>
    property MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char> read get_MarkupExtensionBracketCharacters;
  end;

  TDNXamlMember = class(TDNGenericImport<DNXamlMemberClass, DNXamlMember>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDirectiveClass = interface(DNXamlMemberClass)
  ['{4B0CEBD8-AC7B-5AFD-8151-527105FD920B}']
  { constructors } 

    {class} function init(xamlNamespaces: DDN.mscorlib.DNIEnumerable<string>; name: string; xamlType: DNXamlType; typeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>; allowedLocation: DNAllowedMemberLocations): DNXamlDirective; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlDirective" />
    ///  类，同时指定一个名称和一个 XAML 命名空间的值。
    ///  仅当您希望或预计时，才使用此签名 <see cref="P:System.Xaml.XamlMember.IsUnknown" />
    ///  报告 <see langword="true" />
    ///  指令。
    ///</summary>
    ///  <param name="xamlNamespace">
    ///  主 XAML 命名空间，这 <see cref="T:System.Xaml.XamlDirective" />
    ///  可以存在。
    ///</param>
    ///  <param name="name">
    ///  标识名称 <see cref="T:System.Xaml.XamlDirective" />
    ///  。
    ///</param>
    {class} function init(xamlNamespace: string; name: string): DNXamlDirective; overload;

  end;

  ///<summary>
  ///  如果成员还为 XAML 指令成员提供的 XAML 类型系统标识符。
  ///  XAML 读取器和 XAML 编写器使用 <see cref="T:System.Xaml.XamlDirective" />
  ///  成员节点的处理过程中的标识符。
  ///  XAML 读取器位于上时，则使用此标识符 <see cref="F:System.Xaml.XamlNodeType.StartMember" />
  ///  和 <see cref="P:System.Xaml.XamlMember.IsDirective" />
  ///  是 <see langword="true" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xaml.XamlDirective')]
  DNXamlDirective = interface(DNXamlMember)
  ['{83725DB4-8B3E-32D2-A38A-48B51EF05432}']
  { getters & setters } 

    function get_AllowedLocation: DNAllowedMemberLocations;
    function get_DeclaringType: DNXamlType;
    function get_Invoker: DNXamlMemberInvoker;
    function get_IsUnknown: Boolean;
    function get_IsReadPublic: Boolean;
    function get_IsWritePublic: Boolean;
    function get_Name: string;
    function get_IsNameValid: Boolean;
    function get_PreferredXamlNamespace: string;
    function get_TargetType: DNXamlType;
    function get_Type: DNXamlType;
    function get_TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>;
    function get_ValueSerializer: DNXamlValueConverter<DNValueSerializer>;
    function get_DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader>;
    function get_UnderlyingMember: DDN.mscorlib.DNMemberInfo;
    function get_IsReadOnly: Boolean;
    function get_IsWriteOnly: Boolean;
    function get_IsAttachable: Boolean;
    function get_IsEvent: Boolean;
    function get_IsDirective: Boolean;
    function get_DependsOn: DDN.mscorlib.DNIList<DNXamlMember>;
    function get_IsAmbient: Boolean;
    function get_SerializationVisibility: DDN.System.DNDesignerSerializationVisibility;
    function get_MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char>;

  { methods } 

    ///<summary>
    ///  返回该对象的哈希代码。
    ///</summary>
    ///<returns>
    ///  整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  此 XAML 成员都将返回 XAML 命名空间的列表。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间标识符，以字符串形式的列表。
    ///</returns>
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    ///<summary>
    ///  返回的字符串表示形式 <see cref="T:System.Xaml.XamlDirective" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串表示形式 <see cref="T:System.Xaml.XamlDirective" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  指示当前对象是否等于另一个对象。
    ///</summary>
    ///  <param name="obj">
    ///  要与此对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果当前对象等于 <paramref name="obj" />
    ///  参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  指示当前对象是否等于同一类型的另一个对象。
    ///</summary>
    ///  <param name="other">
    ///  一个与此对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果当前对象等于 <paramref name="other" />
    ///  参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNXamlMember): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，指定的 XAML 节点类型，其中，可以指定该指令。
    ///</summary>
    ///<returns>
    ///  枚举的一个值。
    ///  默认值是枚举默认值，即 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />
    ///  。
    ///</returns>
    property AllowedLocation: DNAllowedMemberLocations read get_AllowedLocation;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  声明与此关联的成员的类型为 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  声明与此关联的成员的类型为 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</returns>
    property DeclaringType: DNXamlType read get_DeclaringType;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  与此关联的实现 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  与此关联的实现 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</returns>
    property Invoker: DNXamlMemberInvoker read get_Invoker;
    ///<summary>
    ///  获取一个值，该值指示是否该成员不是可解析用于类型和成员解析的支持系统。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该成员不是可解析; <see langword="false" />
    ///  如果成员是可解析。
    ///</returns>
    property IsUnknown: Boolean read get_IsUnknown;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示具有可调用公共成员 <see langword="get" />
    ///  取值函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示可调用公共 <see langword="get" />
    ///  访问器; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadPublic: Boolean read get_IsReadPublic;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示具有可调用公共成员 <see langword="set" />
    ///  取值函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示可调用公共 <see langword="set" />
    ///  访问器; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWritePublic: Boolean read get_IsWritePublic;
    ///<summary>
    ///  获取 <see langword="xamlName" />
    ///  name 声明此字符串 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see langword="xamlName" />
    ///  Name 声明此字符串 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  具有有效初始化 <see langword="xamlName" />
    ///  字符串作为其 <see cref="P:System.Xaml.XamlMember.Name" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  具有有效初始化 <see langword="xamlName" />
    ///  字符串; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNameValid: Boolean read get_IsNameValid;
    ///<summary>
    ///  获取单个 XAML 命名空间 URI，用于标识此主 XAML 命名空间 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns>
    ///  为此主 XAML 命名空间的标识符 <see cref="T:System.Xaml.XamlMember" />
    ///  , ，作为字符串。
    ///</returns>
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  类型的其中 <see cref="T:System.Xaml.XamlMember" />
    ///  可以存在。
    ///</summary>
    ///<returns>
    ///  类型其中 <see cref="T:System.Xaml.XamlMember" />
    ///  可以存在。
    ///  请参阅“备注”。
    ///</returns>
    property TargetType: DNXamlType read get_TargetType;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  成员使用的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  成员使用的类型。
    ///  请参阅“备注”。
    ///</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  对象，可用于 XAML 声明的对象的类型转换构造。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  值，与 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  泛型约束。
    ///  请参阅“备注”。
    ///</returns>
    property TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter> read get_TypeConverter;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  对象，用于进行 XAML 声明的对象的值序列化。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  泛型约束。
    ///</returns>
    property ValueSerializer: DNXamlValueConverter<DNValueSerializer> read get_ValueSerializer;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  对象，它用于延迟加载的 XAML 声明对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.Xaml.XamlDeferringLoader" />
    ///  泛型约束。
    ///</returns>
    property DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader> read get_DeferringLoader;
    ///<summary>
    ///  获取 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，它可用于构造的一个成员 <see cref="T:System.Reflection.PropertyInfo" />
    ///  , ，<see cref="T:System.Reflection.MethodInfo" />
    ///  , ，或 <see cref="T:System.Reflection.EventInfo" />
    ///  。
    ///</summary>
    ///<returns>
    ///  CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />
    ///  信息，作为初始构造函数参数强制转换。
    ///  一个 <see cref="T:System.Xaml.XamlMember" />
    ///  构造 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
    ///  签名返回 <see langword="null" />
    ///  。
    ///</returns>
    property UnderlyingMember: DDN.mscorlib.DNMemberInfo read get_UnderlyingMember;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示只读成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示只读成员; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个只写的成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个只写的成员; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWriteOnly: Boolean read get_IsWriteOnly;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  是附加的成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  是可附加成员; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAttachable: Boolean read get_IsAttachable;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个事件成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  表示一个事件; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEvent: Boolean read get_IsEvent;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  是否为 XAML 指令。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  是一个 XAML 指令; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDirective: Boolean read get_IsDirective;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlMember" />
    ///  对象的列表。
    ///  这些报告的依赖关系的初始化顺序所在相对于此的成员 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlMember" />
    ///  对象的列表。
    ///</returns>
    property DependsOn: DDN.mscorlib.DNIList<DNXamlMember> read get_DependsOn;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlMember" />
    ///  报告作为环境属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlMember" />
    ///  报告作为环境属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAmbient: Boolean read get_IsAmbient;
    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  值，该值指示可视化设计器应如何处理该成员。
    ///</summary>
    ///<returns>
    ///  值为 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  枚举。
    ///  默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />
    ///  。
    ///</returns>
    property SerializationVisibility: DDN.System.DNDesignerSerializationVisibility read get_SerializationVisibility;
    ///<summary>
    ///  定义标记扩展的开始和结束括号字符。
    ///</summary>
    ///<returns>
    ///  包含开始和结束括号字符的集合。
    ///</returns>
    property MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char> read get_MarkupExtensionBracketCharacters;
  end;

  TDNXamlDirective = class(TDNGenericImport<DNXamlDirectiveClass, DNXamlDirective>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlNodeListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A81007FE-5522-560C-881E-E338DF9A49C7}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlNodeList" />
    ///  类，使用提供的架构上下文。
    ///</summary>
    ///  <param name="schemaContext">
    ///  要用于节点操作的架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(schemaContext: DNXamlSchemaContext): DNXamlNodeList; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlNodeList" />
    ///  类，使用提供的架构上下文和列表大小。
    ///</summary>
    ///  <param name="schemaContext">
    ///  要用于节点操作的架构上下文。
    ///</param>
    ///  <param name="size">
    ///  目标的项的计数的列表。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(schemaContext: DNXamlSchemaContext; size: Int32): DNXamlNodeList; overload;

  end;

  ///<summary>
  ///  提供 XAML 节点，可用于方案如采用延迟方式编写 XAML 节点的列表。
  ///</summary>
  [DNTypeName('System.Xaml.XamlNodeList')]
  DNXamlNodeList = interface(DDN.mscorlib.DNObject)
  ['{57AD4E03-3C01-37D3-84FF-238445CFA5FF}']
  { getters & setters } 

    function get_Writer: DNXamlWriter;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  返回 XAML 读取器实现委托。
    ///</summary>
    ///<returns>
    ///  XAML 读取器实现委托。
    ///</returns>
    ///<exception cref="T:System.Xaml.XamlException"><see cref="T:System.Xaml.XamlNodeList" />
    ///  仍在写入模式。
    ///  - 或 -
    ///  用于节点列表是编写器已经没有架构上下文。
    ///</exception>
    function GetReader: DNXamlReader;
    ///<summary>
    ///  清除此列表中的项。
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取关联的 XAML 编写器。
    ///</summary>
    ///<returns>
    ///  关联的 XAML 编写器。
    ///</returns>
    property Writer: DNXamlWriter read get_Writer;
    ///<summary>
    ///  在此获取的节点数 <see cref="T:System.Xaml.XamlNodeList" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在此节点数 <see cref="T:System.Xaml.XamlNodeList" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXamlNodeList = class(TDNGenericImport<DNXamlNodeListClass, DNXamlNodeList>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlNodeQueueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{722489F3-B31D-5A40-8B18-38ABA7FEB53B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  类使用提供的 XAML 架构上下文。
    ///</summary>
    ///  <param name="schemaContext">
    ///  要用于节点操作的架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlSchemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(schemaContext: DNXamlSchemaContext): DNXamlNodeQueue;

  end;

  ///<summary>
  ///  用于编写节点和再次读取提供的缓冲区。
  ///</summary>
  [DNTypeName('System.Xaml.XamlNodeQueue')]
  DNXamlNodeQueue = interface(DDN.mscorlib.DNObject)
  ['{5BE541F6-77F4-34C1-AA30-714831F0CE04}']
  { getters & setters } 

    function get_Reader: DNXamlReader;
    function get_Writer: DNXamlWriter;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 XAML 读取器实现委托。
    ///</summary>
    ///<returns>
    ///  XAML 读取器实现委托。
    ///</returns>
    ///<exception cref="T:System.Xaml.XamlException">
    ///  用于节点列表是 XAML 编写器已经没有有效的 XAML 架构上下文。
    ///</exception>
    property Reader: DNXamlReader read get_Reader;
    ///<summary>
    ///  获取关联的 XAML 编写器。
    ///</summary>
    ///<returns>
    ///  关联的 XAML 编写器。
    ///</returns>
    property Writer: DNXamlWriter read get_Writer;
    ///<summary>
    ///  获取一个值，确定是否这 <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  不包含的节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  不包含节点，则 <see langword="false" />
    ///  如果此 <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  包含节点。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取中的节点数 <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的节点数 <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXamlNodeQueue = class(TDNGenericImport<DNXamlNodeQueueClass, DNXamlNodeQueue>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlReaderClass = interface(DNObjectClass)
  ['{AE9A8B7B-76ED-535F-9863-EC49E8867C9D}']
  end;

  ///<summary>
  ///  提供类，用于使用 XAML 输入以及生成 XAML 节点流的基本的定义。
  ///</summary>
  [DNTypeName('System.Xaml.XamlReader')]
  DNXamlReader = interface(DDN.mscorlib.DNIDisposable)
  ['{47C9699D-57F2-324C-B570-B6E83626FBEB}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_IsEof: Boolean;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Member: DNXamlMember;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>
    ///  将跳过当前节点并前进到下一个节点的读取器位置。
    ///</summary>
    procedure Skip;
    ///<summary>
    ///  关闭 XAML 节点流。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlReader" />
    ///  基于当前 <see cref="T:System.Xaml.XamlReader" />
    ///  , ，其中返回 <see cref="T:System.Xaml.XamlReader" />
    ///  用于遍历 XAML 节点结构的子树。
    ///</summary>
    ///<returns>
    ///  新 XAML 读取器实例的子树。
    ///</returns>
    function ReadSubtree: DNXamlReader;
    ///<summary>
    ///  派生类中实现时，提供来自源的下一步 XAML 节点，如果一个节点可用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果某个节点可用，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  派生类中实现时，获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  值为 <see cref="T:System.Xaml.XamlNodeType" />
    ///  枚举。
    ///</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>
    ///  派生类中实现时，获取一个值，报表读取器位置是否位于文件结尾。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果位置是在 XAML 节点流; 的概念-的文件结束否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>
    ///  派生类中实现时，获取当前节点中的 XAML 命名空间信息。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间的信息，如果可用，则否则为 <see langword="null" />
    ///  。
    ///</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>
    ///  派生类中实现时，获取 <see cref="T:System.Xaml.XamlType" />
    ///  当前节点。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  的当前节点; 或 <see langword="null" />
    ///  , ，如果当前的读取器位置不在对象上。
    ///</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>
    ///  派生类中实现时，获取当前节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点; 的值或 <see langword="null" />
    ///  , ，如果当前的读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  节点类型。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  派生类中实现时，获取的当前成员的读取器位置，如果读取器位置位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前成员;或 <see langword="null" />
    ///  , ，如果读取器位置不在成员上。
    ///</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>
    ///  派生类中实现时，获取一个对象，提供的信息集的 XAML 架构上下文信息。
    ///</summary>
    ///<returns>
    ///  一个对象，提供的信息的 XAML 架构上下文信息设置。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlReader = class(TDNGenericImport<DNXamlReaderClass, DNXamlReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlBackgroundReaderClass = interface(DNXamlReaderClass)
  ['{8E7B9F41-845D-5403-8DB4-E6DBAB8F399A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlBackgroundReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="wrappedReader"><see cref="T:System.Xaml.XamlReader" />
    ///  此 <see cref="T:System.Xaml.XamlBackgroundReader" />
    ///  为基础。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="wrappedReader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(wrappedReader: DNXamlReader): DNXamlBackgroundReader;

  end;

  ///<summary>
  ///  实现双缓冲 <see cref="T:System.Xaml.XamlReader" />
  ///  读取和写入不同的线程，可以将拆分。
  ///</summary>
  [DNTypeName('System.Xaml.XamlBackgroundReader')]
  DNXamlBackgroundReader = interface(DNXamlReader)
  ['{5987C369-819D-31D7-94F4-A71168467412}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_IsEof: Boolean;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Member: DNXamlMember;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_HasLineInfo: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    ///<summary>
    ///  提供来自源的下一步 XAML 节点，如果一个节点可用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果某个节点可用，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  创建并启动一个新 <see cref="T:System.Threading.Thread" />
    ///  (从构造 <see cref="T:System.Threading.ParameterizedThreadStart" />
    ///  ) 处理的命名的线程 <see cref="T:System.Xaml.XamlReader" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该线程已启动。
    ///</exception>
    procedure StartThread; overload;
    ///<summary>
    ///  创建并启动一个新 <see cref="T:System.Threading.Thread" />
    ///  (从构造 <see cref="T:System.Threading.ParameterizedThreadStart" />
    ///  ) 处理的命名的线程 <see cref="T:System.Xaml.XamlReader" />
    ///  。
    ///  您指定的线程名称作为参数。
    ///</summary>
    ///  <param name="threadName">
    ///  线程名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该线程已启动。
    ///</exception>
    procedure StartThread(threadName: string); overload;
    ///<summary>
    ///  将跳过当前节点并前进到下一个节点的读取器位置。
    ///</summary>
    procedure Skip;
    ///<summary>
    ///  关闭 XAML 节点流。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlReader" />
    ///  基于当前 <see cref="T:System.Xaml.XamlReader" />
    ///  , ，其中返回 <see cref="T:System.Xaml.XamlReader" />
    ///  用于遍历 XAML 节点结构的子树。
    ///</summary>
    ///<returns>
    ///  新 XAML 读取器实例的子树。
    ///</returns>
    function ReadSubtree: DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  值为 <see cref="T:System.Xaml.XamlNodeType" />
    ///  枚举。
    ///</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>
    ///  获取一个值，报表读取器位置是否位于文件结尾。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果位于文件末尾;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>
    ///  从当前节点中获取的 XAML 命名空间。
    ///</summary>
    ///<returns>
    ///  XAML 命名空间，如果可用，则否则为 <see langword="null" />
    ///  。
    ///</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  当前节点。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  的当前节点; 或 <see langword="null" />
    ///  , ，如果当前的读取器位置不在对象上。
    ///</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>
    ///  获取当前节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点; 的值或 <see langword="null" />
    ///  , ，如果当前的读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  节点类型。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  如果读取器位置位于在读取器位置获取的当前成员 <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前成员;或 <see langword="null" />
    ///  , ，如果位置不在成员上。
    ///</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>
    ///  获取一个对象，提供的信息集的架构上下文信息。
    ///</summary>
    ///<returns>
    ///  一个对象，提供的信息的架构上下文信息设置。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>
    ///  获取一个值，指定是否使用行信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行信息可用，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasLineInfo: Boolean read get_HasLineInfo;
    ///<summary>
    ///  获取指向报表的行号。
    ///</summary>
    ///<returns>
    ///  报告的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取报表的行位置。
    ///</summary>
    ///<returns>
    ///  报告的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXamlBackgroundReader = class(TDNGenericImport<DNXamlBackgroundReaderClass, DNXamlBackgroundReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectReaderClass = interface(DNXamlReaderClass)
  ['{F582809A-2D97-5528-B906-A029D30852A6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlObjectReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="instance">
    ///  对象树的根对象图形上以读取 /。
    ///</param>
    {class} function init(instance: DDN.mscorlib.DNObject): DNXamlObjectReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlObjectReader" />
    ///  类具有指定的读取器设置。
    ///</summary>
    ///  <param name="instance">
    ///  要读取的对象树的根。
    ///</param>
    ///  <param name="settings">
    ///  一个设置对象。
    ///</param>
    {class} function init(instance: DDN.mscorlib.DNObject; settings: DNXamlObjectReaderSettings): DNXamlObjectReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlObjectReader" />
    ///  具有指定的架构上下文类。
    ///</summary>
    ///  <param name="instance">
    ///  要读取的对象树的根。
    ///</param>
    ///  <param name="schemaContext">
    ///  要使用的读取器架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(instance: DDN.mscorlib.DNObject; schemaContext: DNXamlSchemaContext): DNXamlObjectReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlObjectReader" />
    ///  用指定的架构上下文和读取器设置的类。
    ///</summary>
    ///  <param name="instance">
    ///  要读取的对象树的根。
    ///</param>
    ///  <param name="schemaContext">
    ///  要使用的读取器架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  一个设置对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(instance: DDN.mscorlib.DNObject; schemaContext: DNXamlSchemaContext; settings: DNXamlObjectReaderSettings): DNXamlObjectReader; overload;

  end;

  ///<summary>
  ///  提供了 <see cref="T:System.Xaml.XamlReader" />
  ///  读取对象关系图，然后生成 XAML 节点流的实现。
  ///</summary>
  [DNTypeName('System.Xaml.XamlObjectReader')]
  DNXamlObjectReader = interface(DNXamlReader)
  ['{FE76E107-BD1F-343F-BE38-3376343D33F2}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_IsEof: Boolean;
    function get_Instance: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  提供源对象图中的下一步 XAML 节点，如果一个节点可用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果某个节点可用，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  将跳过当前节点并前进到下一个节点的读取器位置。
    ///</summary>
    procedure Skip;
    ///<summary>
    ///  关闭 XAML 节点流。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlReader" />
    ///  基于当前 <see cref="T:System.Xaml.XamlReader" />
    ///  , ，其中返回 <see cref="T:System.Xaml.XamlReader" />
    ///  用于遍历 XAML 节点结构的子树。
    ///</summary>
    ///<returns>
    ///  新 XAML 读取器实例的子树。
    ///</returns>
    function ReadSubtree: DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  当前节点的类型。
    ///</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>
    ///  从当前读取器位置获取 XAML 命名空间声明。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在的 XAML 命名空间声明 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" />
    ///  ; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  位于当前读取器位置的对象。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  位于当前读取器位置; 的对象或 <see langword="null" />
    ///  如果位置不在对象上。
    ///</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>
    ///  获取当前 <see cref="T:System.Xaml.XamlMember" />
    ///  在读取器位置上，如果读取器位置位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前成员;或 <see langword="null" />
    ///  如果读取器位置不在成员上。
    ///</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>
    ///  获取当前的读取器位置处的节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点; 的值或 <see langword="null" />
    ///  , ，如果读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  节点类型。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  获取一个对象，提供的信息集的架构信息。
    ///</summary>
    ///<returns>
    ///  一个对象，提供的信息集的架构信息。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>
    ///  获取一个值，报表读取器位置是否位于文件末尾。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器位于末尾的该文件;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>
    ///  获取在当前的读取器位置的对象实例。
    ///</summary>
    ///<returns>
    ///  位于当前读取器位置; 的对象实例或 <see langword="null" />
    ///  如果读取器位置不在对象上。
    ///</returns>
    property Instance: DDN.mscorlib.DNObject read get_Instance;
  end;

  TDNXamlObjectReader = class(TDNGenericImport<DNXamlObjectReaderClass, DNXamlObjectReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlReaderClass = interface(DNXamlReaderClass)
  ['{9E44B2AE-D257-5459-A870-9D5A6FE96FD2}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类使用所提供 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  要用作中间 XML 处理器。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类，使用所提供 <see cref="T:System.Xml.XmlReader" />
    ///  和读取器设置。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  要用作中间 XML 处理器。
    ///</param>
    ///  <param name="settings">
    ///  特定的 XAML 读取器设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类使用所提供 <see cref="T:System.Xml.XmlReader" />
    ///  和架构上下文。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  要用作中间 XML 处理器。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类使用所提供 <see cref="T:System.Xml.XmlReader" />
    ///  , ，架构上下文和读取器设置。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  要用作中间 XML 处理器。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  特定的 XAML 读取器设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  基于要加载到默认 XML 读取器的文件的文件名称的类。
    ///</summary>
    ///  <param name="fileName">
    ///  要加载的 XML 文件的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(fileName: string): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类，基于要加载到默认 XML 读取器的文件的文件名和使用特定于 XAML 读取器设置。
    ///</summary>
    ///  <param name="fileName">
    ///  要加载的 XML 文件的名称。
    ///</param>
    ///  <param name="settings">
    ///  特定读取器设置中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(fileName: string; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  基于要加载到默认 XML 读取器与提供的 XAML 架构上下文的文件的文件名的类。
    ///</summary>
    ///  <param name="fileName">
    ///  要加载的文件的名称。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(fileName: string; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类，基于要加载到默认 XML 读取器的文件的文件名，并使用提供的 XAML 架构上下文和特定于 XAML 读取器设置。
    ///</summary>
    ///  <param name="fileName">
    ///  要加载的 XML 文件的名称。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  特定读取器设置中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(fileName: string; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  基于流的类。
    ///</summary>
    ///  <param name="stream">
    ///  要加载到读取器的初始流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类，基于流，XAML 特定的设置。
    ///</summary>
    ///  <param name="stream">
    ///  要加载到读取器的初始流。
    ///</param>
    ///  <param name="settings">
    ///  特定读取器设置中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类，基于流，并使用提供的 XAML 架构上下文。
    ///</summary>
    ///  <param name="stream">
    ///  要加载到读取器的初始流。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  类，基于流，使用提供的 XAML 架构上下文和特定于 XAML 的设置。
    ///</summary>
    ///  <param name="stream">
    ///  要加载到读取器的初始流。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  特定读取器设置中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  а а µ <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="textReader"><see cref="T:System.IO.TextReader" />
    ///  要用于初始化。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  а а µ <see cref="T:System.IO.TextReader" />
    ///  , ，并使用 XAML 特定的设置。
    ///</summary>
    ///  <param name="textReader"><see cref="T:System.IO.TextReader" />
    ///  要用于初始化。
    ///</param>
    ///  <param name="settings">
    ///  特定读取器设置中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  а а µ <see cref="T:System.IO.TextReader" />
    ///  , 、 使用提供的架构上下文和特定于 XAML 的设置。
    ///</summary>
    ///  <param name="textReader"><see cref="T:System.IO.TextReader" />
    ///  要用于初始化。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  а а µ <see cref="T:System.IO.TextReader" />
    ///  , ，并使用提供的架构上下文和特定于 XAML 的设置。
    ///</summary>
    ///  <param name="textReader"><see cref="T:System.IO.TextReader" />
    ///  要用于初始化。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 处理 XAML 架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  特定读取器设置中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;

  end;

  ///<summary>
  ///  使用进程 XAML 标记从 XML 文件 <see cref="T:System.Xml.XmlReader" />
  ///  中间，并生成 XAML 节点流。
  ///</summary>
  [DNTypeName('System.Xaml.XamlXmlReader')]
  DNXamlXmlReader = interface(DNXamlReader)
  ['{43B26558-9486-31DD-8FD4-DAAC0C4B958A}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_IsEof: Boolean;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Member: DNXamlMember;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_HasLineInfo: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    ///<summary>
    ///  提供的加载源中的下一步 XAML 节点，如果 XAML 节点可用。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果某个节点可用，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  将跳过当前节点并前进到下一个节点的读取器位置。
    ///</summary>
    procedure Skip;
    ///<summary>
    ///  关闭 XAML 节点流。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlReader" />
    ///  基于当前 <see cref="T:System.Xaml.XamlReader" />
    ///  , ，其中返回 <see cref="T:System.Xaml.XamlReader" />
    ///  用于遍历 XAML 节点结构的子树。
    ///</summary>
    ///<returns>
    ///  新 XAML 读取器实例的子树。
    ///</returns>
    function ReadSubtree: DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  值为 <see cref="T:System.Xaml.XamlNodeType" />
    ///  枚举。
    ///</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>
    ///  获取一个值，报告 XAML 节点流中的读取器位置是否位于文件结尾。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在节点流; 概念-的文件末尾的位置否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>
    ///  从当前节点中获取的 XAML 命名空间。
    ///</summary>
    ///<returns>
    ///  从当前节点是否可用，则 XAML 命名空间否则为 <see langword="null" />
    ///  。
    ///</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  当前节点。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  的当前节点; 或 <see langword="null" />
    ///  , ，如果位置不在对象上。
    ///</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>
    ///  获取当前节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点; 的值或 <see langword="null" />
    ///  , ，如果位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  节点类型。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  如果当前的读取器位置位于在读取器位置获取的当前成员 <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前成员;或 <see langword="null" />
    ///  , ，如果当前的读取器位置不在成员上。
    ///</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>
    ///  获取一个对象，提供的信息集的架构信息。
    ///</summary>
    ///<returns>
    ///  一个对象，提供的信息集的架构信息。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>
    ///  获取一个值，指定是否使用行信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行信息可用，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasLineInfo: Boolean read get_HasLineInfo;
    ///<summary>
    ///  获取指向报表的行号。
    ///</summary>
    ///<returns>
    ///  报告的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取报表的行位置。
    ///</summary>
    ///<returns>
    ///  报告的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXamlXmlReader = class(TDNGenericImport<DNXamlXmlReaderClass, DNXamlXmlReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlReaderSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D3036E3F-D484-5D60-8A76-18A94F0BF7A5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlReaderSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  类基于在另一个的值 <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  对象。
    ///</summary>
    ///  <param name="settings">
    ///  一个现有的 <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  对象。
    ///</param>
    {class} function init(settings: DNXamlReaderSettings): DNXamlReaderSettings; overload;

  end;

  ///<summary>
  ///  指定处理规则或选项设置 <see cref="T:System.Xaml.XamlReader" />
  ///  实现。
  ///</summary>
  [DNTypeName('System.Xaml.XamlReaderSettings')]
  DNXamlReaderSettings = interface(DDN.mscorlib.DNObject)
  ['{379121B9-5032-32DC-A4CD-E0AC7EBDDD1C}']
  { getters & setters } 

    function get_AllowProtectedMembersOnRoot: Boolean;
    procedure set_AllowProtectedMembersOnRoot(value: Boolean);
    function get_ProvideLineInfo: Boolean;
    procedure set_ProvideLineInfo(value: Boolean);
    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);
    function get_LocalAssembly: DDN.mscorlib.DNAssembly;
    procedure set_LocalAssembly(value: DDN.mscorlib.DNAssembly);
    function get_IgnoreUidsOnPropertyElements: Boolean;
    procedure set_IgnoreUidsOnPropertyElements(value: Boolean);
    function get_ValuesMustBeString: Boolean;
    procedure set_ValuesMustBeString(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否根对象可能包括具有受保护的代码访问模型，当报告 XAML 类型表示形式的成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果根对象可能包括具有受保护的代码访问模型; 的成员否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowProtectedMembersOnRoot: Boolean read get_AllowProtectedMembersOnRoot write set_AllowProtectedMembersOnRoot;
    ///<summary>
    ///  获取或设置一个值，指定是否将读取器可以提供行号和位置。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器可以提供的行号和位置信息;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ProvideLineInfo: Boolean read get_ProvideLineInfo write set_ProvideLineInfo;
    ///<summary>
    ///  获取或设置用于解析相对路径的基 URI。
    ///</summary>
    ///<returns>
    ///  要使用的基 URI。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  获取或设置表示当前本地程序集进行处理的对象。
    ///  此程序集信息如用于调用帮助器 Api <see cref="M:System.Xaml.XamlType.GetAllMembers" />
    ///  。
    ///</summary>
    ///<returns>
    ///  CLR 反射 <see cref="T:System.Reflection.Assembly" />
    ///  对象。
    ///</returns>
    property LocalAssembly: DDN.mscorlib.DNAssembly read get_LocalAssembly write set_LocalAssembly;
    ///<summary>
    ///  获取或设置一个值，指定 XAML 读取器是否应忽略的值 <see langword="x:Uid" />
    ///  在属性元素存在的属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器应忽略的值 <see langword="x:Uid" />
    ///  的属性元素的属性。
    ///<see langword="false" />
    ///  如果读取器应处理 <see langword="x:Uid" />
    ///  的属性元素的属性。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreUidsOnPropertyElements: Boolean read get_IgnoreUidsOnPropertyElements write set_IgnoreUidsOnPropertyElements;
    ///<summary>
    ///  获取或设置一个值，指定是否将读取器将强制要求所有 <see langword="Value" />
    ///  节点处理为 <see langword="String" />
    ///  类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器强制仅 <see langword="String" />
    ///  中包含 <see langword="Value" />
    ///  节点; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ValuesMustBeString: Boolean read get_ValuesMustBeString write set_ValuesMustBeString;
  end;

  TDNXamlReaderSettings = class(TDNGenericImport<DNXamlReaderSettingsClass, DNXamlReaderSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectReaderSettingsClass = interface(DNXamlReaderSettingsClass)
  ['{2080708A-E06F-5DA2-B92A-21C33A3DE22F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlObjectReaderSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlObjectReaderSettings;

  end;

  ///<summary>
  ///  指定处理规则或选项设置 <see cref="T:System.Xaml.XamlObjectReader" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xaml.XamlObjectReaderSettings')]
  DNXamlObjectReaderSettings = interface(DNXamlReaderSettings)
  ['{86AFFD22-A947-3A58-874E-BBABAE6261CA}']
  { getters & setters } 

    function get_RequireExplicitContentVisibility: Boolean;
    procedure set_RequireExplicitContentVisibility(value: Boolean);
    function get_AllowProtectedMembersOnRoot: Boolean;
    procedure set_AllowProtectedMembersOnRoot(value: Boolean);
    function get_ProvideLineInfo: Boolean;
    procedure set_ProvideLineInfo(value: Boolean);
    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);
    function get_LocalAssembly: DDN.mscorlib.DNAssembly;
    procedure set_LocalAssembly(value: DDN.mscorlib.DNAssembly);
    function get_IgnoreUidsOnPropertyElements: Boolean;
    procedure set_IgnoreUidsOnPropertyElements(value: Boolean);
    function get_ValuesMustBeString: Boolean;
    procedure set_ValuesMustBeString(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，确定是否编写器，使用关联 <see cref="T:System.Xaml.XamlObjectReader" />
    ///  对于上下文应使用设计器设置来显式写入内容。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指定使用此上下文的编写器应使用设计器设置，对于写入任何输出情况 where <see cref="P:System.Xaml.XamlMember.IsWritePublic" />
    ///  报表 <see langword="false" />
    ///  ; <see langword="false" />
    ///  如果应该忽略设计器设置。
    ///</returns>
    property RequireExplicitContentVisibility: Boolean read get_RequireExplicitContentVisibility write set_RequireExplicitContentVisibility;
    ///<summary>
    ///  获取或设置一个值，该值指示是否根对象可能包括具有受保护的代码访问模型，当报告 XAML 类型表示形式的成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果根对象可能包括具有受保护的代码访问模型; 的成员否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowProtectedMembersOnRoot: Boolean read get_AllowProtectedMembersOnRoot write set_AllowProtectedMembersOnRoot;
    ///<summary>
    ///  获取或设置一个值，指定是否将读取器可以提供行号和位置。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器可以提供的行号和位置信息;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ProvideLineInfo: Boolean read get_ProvideLineInfo write set_ProvideLineInfo;
    ///<summary>
    ///  获取或设置用于解析相对路径的基 URI。
    ///</summary>
    ///<returns>
    ///  要使用的基 URI。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  获取或设置表示当前本地程序集进行处理的对象。
    ///  此程序集信息如用于调用帮助器 Api <see cref="M:System.Xaml.XamlType.GetAllMembers" />
    ///  。
    ///</summary>
    ///<returns>
    ///  CLR 反射 <see cref="T:System.Reflection.Assembly" />
    ///  对象。
    ///</returns>
    property LocalAssembly: DDN.mscorlib.DNAssembly read get_LocalAssembly write set_LocalAssembly;
    ///<summary>
    ///  获取或设置一个值，指定 XAML 读取器是否应忽略的值 <see langword="x:Uid" />
    ///  在属性元素存在的属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器应忽略的值 <see langword="x:Uid" />
    ///  的属性元素的属性。
    ///<see langword="false" />
    ///  如果读取器应处理 <see langword="x:Uid" />
    ///  的属性元素的属性。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreUidsOnPropertyElements: Boolean read get_IgnoreUidsOnPropertyElements write set_IgnoreUidsOnPropertyElements;
    ///<summary>
    ///  获取或设置一个值，指定是否将读取器将强制要求所有 <see langword="Value" />
    ///  节点处理为 <see langword="String" />
    ///  类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器强制仅 <see langword="String" />
    ///  中包含 <see langword="Value" />
    ///  节点; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ValuesMustBeString: Boolean read get_ValuesMustBeString write set_ValuesMustBeString;
  end;

  TDNXamlObjectReaderSettings = class(TDNGenericImport<DNXamlObjectReaderSettingsClass, DNXamlObjectReaderSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlReaderSettingsClass = interface(DNXamlReaderSettingsClass)
  ['{7BAA6A32-5CE0-595A-9C7D-961AF96D5165}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlXmlReaderSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  类通过将设置从现有复制 <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  对象。
    ///</summary>
    ///  <param name="settings">
    ///  现有 <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  要从中复制对象。
    ///</param>
    {class} function init(settings: DNXamlXmlReaderSettings): DNXamlXmlReaderSettings; overload;

  end;

  ///<summary>
  ///  指定处理规则或选项设置 <see cref="T:System.Xaml.XamlXmlReader" />
  ///  XAML 读取器实现。
  ///</summary>
  [DNTypeName('System.Xaml.XamlXmlReaderSettings')]
  DNXamlXmlReaderSettings = interface(DNXamlReaderSettings)
  ['{0B2C0A03-DCAE-38AB-A1A8-5A05C6EB18E2}']
  { getters & setters } 

    function get_XmlLang: string;
    procedure set_XmlLang(value: string);
    function get_XmlSpacePreserve: Boolean;
    procedure set_XmlSpacePreserve(value: Boolean);
    function get_SkipXmlCompatibilityProcessing: Boolean;
    procedure set_SkipXmlCompatibilityProcessing(value: Boolean);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_AllowProtectedMembersOnRoot: Boolean;
    procedure set_AllowProtectedMembersOnRoot(value: Boolean);
    function get_ProvideLineInfo: Boolean;
    procedure set_ProvideLineInfo(value: Boolean);
    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);
    function get_LocalAssembly: DDN.mscorlib.DNAssembly;
    procedure set_LocalAssembly(value: DDN.mscorlib.DNAssembly);
    function get_IgnoreUidsOnPropertyElements: Boolean;
    procedure set_IgnoreUidsOnPropertyElements(value: Boolean);
    function get_ValuesMustBeString: Boolean;
    procedure set_ValuesMustBeString(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置读取器可能会提升的值设置为写入的编写器的语言 <see langword="xml:lang" />
    ///  中节点的属性。
    ///</summary>
    ///<returns>
    ///  要使用的可能字符串 <see langword="xml:lang" />
    ///  取决于读取器的输出。
    ///</returns>
    property XmlLang: string read get_XmlLang write set_XmlLang;
    ///<summary>
    ///  获取或设置一个值，确定 XAML 读取器是否指示任何 XAML 编写器编写 <see langword="xml:space" />
    ///  中节点的属性。
    ///  如果需要该行为时，此信息将传递通过共享 XAML 架构上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果正在处理 XAML 节点流的编写器可以写 xml:space="preserve" 中输出; <see langword="false" />
    ///  如果 <see langword="xml:space" />
    ///  属性不能编写在节点中。
    ///</returns>
    property XmlSpacePreserve: Boolean read get_XmlSpacePreserve write set_XmlSpacePreserve;
    ///<summary>
    ///  获取或设置一个值，确定是否将读取器应不同于默认 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  如何处理标记兼容性的内容的行为。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果直接使用启动读取器，这意味着，作为主要流的一部分处理 XML 兼容性标记并不考虑兼容性问题。
    ///<see langword="false" />
    ///  如果使用的默认行为，其中分别处理 XML 兼容性。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property SkipXmlCompatibilityProcessing: Boolean read get_SkipXmlCompatibilityProcessing write set_SkipXmlCompatibilityProcessing;
    ///<summary>
    ///  获取或设置一个值，该值指示是否基础流或文本读取器应关闭时 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  已关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果基础流或读取器应关闭时 <see cref="T:System.Xaml.XamlXmlReader" />
    ///  关闭; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    ///<summary>
    ///  获取或设置一个值，该值指示是否根对象可能包括具有受保护的代码访问模型，当报告 XAML 类型表示形式的成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果根对象可能包括具有受保护的代码访问模型; 的成员否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowProtectedMembersOnRoot: Boolean read get_AllowProtectedMembersOnRoot write set_AllowProtectedMembersOnRoot;
    ///<summary>
    ///  获取或设置一个值，指定是否将读取器可以提供行号和位置。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器可以提供的行号和位置信息;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ProvideLineInfo: Boolean read get_ProvideLineInfo write set_ProvideLineInfo;
    ///<summary>
    ///  获取或设置用于解析相对路径的基 URI。
    ///</summary>
    ///<returns>
    ///  要使用的基 URI。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  获取或设置表示当前本地程序集进行处理的对象。
    ///  此程序集信息如用于调用帮助器 Api <see cref="M:System.Xaml.XamlType.GetAllMembers" />
    ///  。
    ///</summary>
    ///<returns>
    ///  CLR 反射 <see cref="T:System.Reflection.Assembly" />
    ///  对象。
    ///</returns>
    property LocalAssembly: DDN.mscorlib.DNAssembly read get_LocalAssembly write set_LocalAssembly;
    ///<summary>
    ///  获取或设置一个值，指定 XAML 读取器是否应忽略的值 <see langword="x:Uid" />
    ///  在属性元素存在的属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器应忽略的值 <see langword="x:Uid" />
    ///  的属性元素的属性。
    ///<see langword="false" />
    ///  如果读取器应处理 <see langword="x:Uid" />
    ///  的属性元素的属性。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreUidsOnPropertyElements: Boolean read get_IgnoreUidsOnPropertyElements write set_IgnoreUidsOnPropertyElements;
    ///<summary>
    ///  获取或设置一个值，指定是否将读取器将强制要求所有 <see langword="Value" />
    ///  节点处理为 <see langword="String" />
    ///  类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果读取器强制仅 <see langword="String" />
    ///  中包含 <see langword="Value" />
    ///  节点; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ValuesMustBeString: Boolean read get_ValuesMustBeString write set_ValuesMustBeString;
  end;

  TDNXamlXmlReaderSettings = class(TDNGenericImport<DNXamlXmlReaderSettingsClass, DNXamlXmlReaderSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2157F060-949B-567D-91DC-530889852589}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlSchemaContext; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  类，基于设置对象。
    ///</summary>
    ///  <param name="settings">
    ///  设置对象，用于构造 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  。
    ///</param>
    {class} function init(settings: DNXamlSchemaContextSettings): DNXamlSchemaContext; overload;
    {class} function init(referenceAssemblies: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNAssembly>): DNXamlSchemaContext; overload;
    {class} function init(referenceAssemblies: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNAssembly>; settings: DNXamlSchemaContextSettings): DNXamlSchemaContext; overload;

  end;

  ///<summary>
  ///  定义可重用的上下文，用于解释或映射 XAML 类型和支持这些程序集中的类型。
  ///</summary>
  [DNTypeName('System.Xaml.XamlSchemaContext')]
  DNXamlSchemaContext = interface(DDN.mscorlib.DNObject)
  ['{A0025357-31C0-3357-957A-ECE7D49018B7}']
  { getters & setters } 

    function get_SupportMarkupExtensionsWithDuplicateArity: Boolean;
    function get_FullyQualifyAssemblyNamesInClrNamespaces: Boolean;
    function get_ReferenceAssemblies: DDN.mscorlib.DNIList<DDN.mscorlib.DNAssembly>;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlType" />
    ///  基于 XAML 系统类型名称。
    ///</summary>
    ///  <param name="xamlTypeName">
    ///  要获取的 XAML 类型名称 <see cref="T:System.Xaml.XamlType" />
    ///  有关。
    ///</param>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  匹配输入 <paramref name="xamlTypeName" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  一个组件 <paramref name="xamlTypeName" />
    ///  (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" />
    ///  或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />
    ///  ) 是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="xamlTypeName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetXamlType(xamlTypeName: DNXamlTypeName): DNXamlType; overload;
    ///<summary>
    ///  搜索由此持有的程序集 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  和返回类型的集合，从指定的 XAML 命名空间。
    ///</summary>
    ///  <param name="xamlNamespace">
    ///  要返回的类型的 XAML 命名空间。
    ///</param>
    ///<returns>
    ///  XAML 类型的可枚举集合。
    ///  在集中的每个 XAML 类型由 <see cref="T:System.Xaml.XamlType" />
    ///  对象。
    ///</returns>
    function GetAllXamlTypes(xamlNamespace: string): DDN.mscorlib.DNICollection<DNXamlType>;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlDirective" />
    ///  值，该值表示指令，为 XAML 语言或特定的实现。
    ///</summary>
    ///  <param name="xamlNamespace">
    ///  包含命名的指令的 XAML 命名空间。
    ///</param>
    ///  <param name="name">
    ///  要获取的指令的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlDirective" />
    ///  表示请求的指令的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlNamespace" />
    ///  或 <paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetXamlDirective(xamlNamespace: string; name: string): DNXamlDirective;
    function TryGetCompatibleXamlNamespace(xamlNamespace: string; out compatibleNamespace: string): Boolean;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlType" />
    ///  基于 CLR 类型标识符。
    ///</summary>
    ///  <param name="type">
    ///  要获取的类型 <see cref="T:System.Xaml.XamlType" />
    ///  有关。
    ///</param>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  匹配输入 <paramref name="type" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetXamlType(&type: DDN.mscorlib.DNType): DNXamlType; overload;
    ///<summary>
    ///  搜索由此持有的程序集 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  ，并返回一组命名空间。
    ///</summary>
    ///<returns>
    ///  命名空间标识符可枚举集合。
    ///  这些标识符以字符串形式提供。
    ///</returns>
    function GetAllXamlNamespaces: DDN.mscorlib.DNIEnumerable<string>;
    ///<summary>
    ///  获取被报告为使用者使用这些属性映射指定的 XAML 命名空间时的首选前缀的字符串。
    ///</summary>
    ///  <param name="xmlns">
    ///  要获取的首选的前缀的 XAML 命名空间。
    ///</param>
    ///<returns>
    ///  一个字符串，它们映射为标记指定的 XAML 命名空间时，应使用使用者使用。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlns" />
    ///  为 null。
    ///</exception>
    function GetPreferredPrefix(xmlns: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，指定的 XAML 架构和它的上下文是否支持拥有带相同 arity （多个输入参数） 的两个构造函数的标记扩展。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果架构上下文允许具有重复 arity; 标记扩展否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportMarkupExtensionsWithDuplicateArity: Boolean read get_SupportMarkupExtensionsWithDuplicateArity;
    ///<summary>
    ///  获取一个值，指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XAML 架构和它的上下文查找 Api; 返回的值中使用完全限定的程序集名称否则为 <see langword="false" />
    ///  。
    ///</returns>
    property FullyQualifyAssemblyNamesInClrNamespaces: Boolean read get_FullyQualifyAssemblyNamesInClrNamespaces;
    ///<summary>
    ///  获取 XAML 架构上下文的引用程序集的可枚举集合。
    ///</summary>
    ///<returns>
    ///  架构上下文的引用程序集的可枚举集合。
    ///  指定每个程序集信息项 <see cref="T:System.Reflection.Assembly" />
    ///  值。
    ///</returns>
    property ReferenceAssemblies: DDN.mscorlib.DNIList<DDN.mscorlib.DNAssembly> read get_ReferenceAssemblies;
  end;

  TDNXamlSchemaContext = class(TDNGenericImport<DNXamlSchemaContextClass, DNXamlSchemaContext>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaContextSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99FAD804-039C-5551-84D3-DA5C5E2F1177}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlSchemaContextSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  通过复制现有的值类 <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  实例。
    ///</summary>
    ///  <param name="settings">
    ///  现有 <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  。
    ///</param>
    {class} function init(settings: DNXamlSchemaContextSettings): DNXamlSchemaContextSettings; overload;

  end;

  ///<summary>
  ///  提供的可选设置 <see cref="T:System.Xaml.XamlSchemaContext" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xaml.XamlSchemaContextSettings')]
  DNXamlSchemaContextSettings = interface(DDN.mscorlib.DNObject)
  ['{C0C0DDE8-EF5D-3975-81C0-CB7686CACC71}']
  { getters & setters } 

    function get_SupportMarkupExtensionsWithDuplicateArity: Boolean;
    procedure set_SupportMarkupExtensionsWithDuplicateArity(value: Boolean);
    function get_FullyQualifyAssemblyNamesInClrNamespaces: Boolean;
    procedure set_FullyQualifyAssemblyNamesInClrNamespaces(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，指定是否允许拥有带相同 arity （多个输入参数） 的两个构造函数的标记扩展的 XAML 架构上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果架构上下文允许具有重复 arity; 标记扩展否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportMarkupExtensionsWithDuplicateArity: Boolean read get_SupportMarkupExtensionsWithDuplicateArity write set_SupportMarkupExtensionsWithDuplicateArity;
    ///<summary>
    ///  获取或设置一个值，指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XAML 架构和它的上下文查找 Api; 返回的值中使用完全限定的程序集名称否则为 <see langword="false" />
    ///  。
    ///</returns>
    property FullyQualifyAssemblyNamesInClrNamespaces: Boolean read get_FullyQualifyAssemblyNamesInClrNamespaces write set_FullyQualifyAssemblyNamesInClrNamespaces;
  end;

  TDNXamlSchemaContextSettings = class(TDNGenericImport<DNXamlSchemaContextSettingsClass, DNXamlSchemaContextSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlServicesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61D87373-793E-5B13-966F-408DB00E571E}']
  { static methods } 

    ///<summary>
    ///  加载特定的 XAML 读取器实现，并返回一个对象关系图。
    ///</summary>
    ///  <param name="xamlReader">
    ///  要用作此读取器的 XAML 读取器实现 <see langword="Load" />
    ///  操作。
    ///</param>
    ///<returns>
    ///  返回对象关系图。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Load(xamlReader: DNXamlReader): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  连接 <see cref="T:System.Xaml.XamlReader" />
    ///  和 <see cref="T:System.Xaml.XamlWriter" />
    ///  使用常见的 XAML 节点集。
    ///  可能会转换的内容，具体取决于读取器和编写器所提供的类型。
    ///</summary>
    ///  <param name="xamlReader"><see cref="T:System.Xaml.XamlReader" />
    ///  要使用的实现。
    ///</param>
    ///  <param name="xamlWriter">
    ///  要使用的 <see cref="T:System.Xaml.XamlWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  或 <paramref name="xamlWriter" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xaml.XamlException">
    ///  之间所提供的 XAML 架构上下文不匹配 <paramref name="xamlReader" />
    ///  和 <paramref name="xamlWriter" />
    ///  。
    ///</exception>
    {class} procedure Transform(xamlReader: DNXamlReader; xamlWriter: DNXamlWriter); overload;
    ///<summary>
    ///  连接 <see cref="T:System.Xaml.XamlReader" />
    ///  和 <see cref="T:System.Xaml.XamlWriter" />
    ///  使用常见的 XAML 节点集。
    ///  可能会转换的内容，具体取决于读取器和编写器所提供的类型。
    ///  提供一个参数，指定是否在调用完成后，关闭编写器。
    ///</summary>
    ///  <param name="xamlReader"><see cref="T:System.Xaml.XamlReader" />
    ///  要使用的实现。
    ///</param>
    ///  <param name="xamlWriter">
    ///  要使用的 <see cref="T:System.Xaml.XamlWriter" />
    ///  。
    ///</param>
    ///  <param name="closeWriter"><see langword="true" />
    ///  在调用后关闭编写器已完成; <see langword="false" />
    ///  将编写器活动保留的最后一个写入位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  或 <paramref name="xamlWriter" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xaml.XamlException">
    ///  之间所提供的 XAML 架构上下文不匹配 <paramref name="xamlReader" />
    ///  和 <paramref name="xamlWriter" />
    ///  。
    ///</exception>
    {class} procedure Transform(xamlReader: DNXamlReader; xamlWriter: DNXamlWriter; closeWriter: Boolean); overload;
    ///<summary>
    ///  加载特定的 XML 读取器实现，并返回一个对象关系图。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  实现，以用作此读取器 <see langword="Load" />
    ///  操作。
    ///</param>
    ///<returns>
    ///  输出对象关系图。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Load(xmlReader: DDN.System.Xml.DNXmlReader): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  处理提供的对象图为 XAML 节点表示形式，然后将其写入提供 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  要使用的实现。
    ///</param>
    ///  <param name="instance">
    ///  要处理的对象关系图的根。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure Save(writer: DDN.System.Xml.DNXmlWriter; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的 XAML 编写器。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xaml.XamlWriter" />
    ///  要使用的实现。
    ///</param>
    ///  <param name="instance">
    ///  要处理的对象关系图的根。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure Save(writer: DNXamlWriter; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  读取作为字符串输出的 XAML 并返回一个对象关系图。
    ///</summary>
    ///  <param name="xaml">
    ///  要分析的 XAML 字符串输入。
    ///</param>
    ///<returns>
    ///  返回对象关系图。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xaml" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Parse(xaml: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  加载 <see cref="T:System.IO.Stream" />
    ///  XAML 读取器的源，并返回对象图。
    ///</summary>
    ///  <param name="fileName">
    ///  要加载，并使用作为源的文件名称。
    ///</param>
    ///<returns>
    ///  返回对象关系图。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Load(fileName: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  加载 <see cref="T:System.IO.Stream" />
    ///  XAML 读取器的源，然后将其输出为一个对象图。
    ///</summary>
    ///  <param name="stream">
    ///  要加载作为输入的流。
    ///</param>
    ///<returns>
    ///  作为输出写入对象关系图。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Load(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  创建从一个 XAML 读取器 <see cref="T:System.IO.TextReader" />
    ///  , ，并返回一个对象关系图。
    ///</summary>
    ///  <param name="textReader"><see cref="T:System.IO.TextReader" />
    ///  要用于为基础创建 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回对象关系图。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Load(textReader: DDN.mscorlib.DNTextReader): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  处理提供的对象树为 XAML 节点表示形式，并返回的字符串表示形式的输出 XAML。
    ///</summary>
    ///  <param name="instance">
    ///  要处理的对象关系图的根。
    ///</param>
    ///<returns>
    ///  将 XAML 标记输出作为一个字符串。
    ///</returns>
    {class} function Save(instance: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的位置处的输出文件。
    ///</summary>
    ///  <param name="fileName">
    ///  名称和要将输出写入到文件的位置。
    ///</param>
    ///  <param name="instance">
    ///  要处理的对象关系图的根。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="fileName" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure Save(fileName: string; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  提供的对象图处理 XAML 节点表示形式插入，然后再进行序列化的输出流。
    ///</summary>
    ///  <param name="stream">
    ///  目标流。
    ///</param>
    ///  <param name="instance">
    ///  要处理的对象关系图的根。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure Save(stream: DDN.mscorlib.DNStream; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  处理提供的对象图，为 XAML 节点表示形式，然后再将转到所提供的输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  写入输出。
    ///</param>
    ///  <param name="instance">
    ///  要处理的对象关系图的根。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  输入是 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure Save(writer: DDN.mscorlib.DNTextWriter; instance: DDN.mscorlib.DNObject); overload;

  end;

  ///<summary>
  ///  有关常见 XAML 任务读取 XAML 和写入对象图; 提供更高级别的服务 （静态方法）或读取对象图和写入用于序列化的 XAML 文件输出。
  ///</summary>
  [DNTypeName('System.Xaml.XamlServices')]
  DNXamlServices = interface(DDN.mscorlib.DNObject)
  ['{255333F4-C269-34DC-A876-95F89A228F7A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlServices = class(TDNGenericImport<DNXamlServicesClass, DNXamlServices>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DC196BB2-CAB4-5371-A9AC-83789196654A}']
  { constructors } 

    {class} function init(unknownTypeNamespace: string; unknownTypeName: string; typeArguments: DDN.mscorlib.DNIList<DNXamlType>; schemaContext: DNXamlSchemaContext): DNXamlType; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlType" />
    ///  类根据基础 CLR 类型信息。
    ///</summary>
    ///  <param name="underlyingType">
    ///  基础 CLR <see cref="T:System.Type" />
    ///  XAML 类型构造。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 读取器或 XAML 编写器的 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或多个 <paramref name="underlyingType" />
    ///  或 <paramref name="schemaContext" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(underlyingType: DDN.mscorlib.DNType; schemaContext: DNXamlSchemaContext): DNXamlType; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlType" />
    ///  类根据基础类型信息和一个 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  实现。
    ///</summary>
    ///  <param name="underlyingType">
    ///  若要构造的 XAML 类型基础类型。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 读取器的 XAML 架构上下文。
    ///</param>
    ///  <param name="invoker"><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  处理运行时反射的实现调用针对 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或多个 <paramref name="underlyingType" />
    ///  或 <paramref name="schemaContext" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(underlyingType: DDN.mscorlib.DNType; schemaContext: DNXamlSchemaContext; invoker: DNXamlTypeInvoker): DNXamlType; overload;

  end;

  ///<summary>
  ///  报告有关 XAML 类型作为整体的 XAML 系统在.NET Framework XAML 服务中实现的一部分的信息。
  ///</summary>
  [DNTypeName('System.Xaml.XamlType')]
  DNXamlType = interface(DDN.mscorlib.DNObject)
  ['{C9020E0A-FE08-3394-B87C-A15699678950}']
  { getters & setters } 

    function get_BaseType: DNXamlType;
    function get_Invoker: DNXamlTypeInvoker;
    function get_IsNameValid: Boolean;
    function get_IsUnknown: Boolean;
    function get_Name: string;
    function get_PreferredXamlNamespace: string;
    function get_TypeArguments: DDN.mscorlib.DNIList<DNXamlType>;
    function get_UnderlyingType: DDN.mscorlib.DNType;
    function get_ConstructionRequiresArguments: Boolean;
    function get_IsArray: Boolean;
    function get_IsCollection: Boolean;
    function get_IsConstructible: Boolean;
    function get_IsDictionary: Boolean;
    function get_IsGeneric: Boolean;
    function get_IsMarkupExtension: Boolean;
    function get_IsNameScope: Boolean;
    function get_IsNullable: Boolean;
    function get_IsPublic: Boolean;
    function get_IsUsableDuringInitialization: Boolean;
    function get_IsWhitespaceSignificantCollection: Boolean;
    function get_IsXData: Boolean;
    function get_TrimSurroundingWhitespace: Boolean;
    function get_IsAmbient: Boolean;
    function get_KeyType: DNXamlType;
    function get_ItemType: DNXamlType;
    function get_AllowedContentTypes: DDN.mscorlib.DNIList<DNXamlType>;
    function get_ContentWrappers: DDN.mscorlib.DNIList<DNXamlType>;
    function get_TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>;
    function get_ValueSerializer: DNXamlValueConverter<DNValueSerializer>;
    function get_ContentProperty: DNXamlMember;
    function get_DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader>;
    function get_MarkupExtensionReturnType: DNXamlType;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>
    ///  返回已经化名为由此 XAML 指令 XAML 成员 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///  <param name="directive">
    ///  为其查找别名成员指令。
    ///</param>
    ///<returns>
    ///  别名成员，如果找到，则否则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetAliasedProperty(directive: DNXamlDirective): DNXamlMember;
    ///<summary>
    ///  返回类型包含在中的 XAML 命名空间的字符串标识符的列表。
    ///</summary>
    ///<returns>
    ///  字符串值，其中每个字符串是 XAML 命名空间的 URI 标识符列表。
    ///</returns>
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    ///<summary>
    ///  返回 <see cref="T:System.Xaml.XamlMember" />
    ///  特定命名成员从此 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要获取 （以字符串形式） 的成员的名称。
    ///</param>
    ///<returns><see cref="T:System.Xaml.XamlMember" />
    ///  信息对于成员，此类成员是否找到; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetMember(name: string): DNXamlMember;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xaml.XamlMember" />
    ///  ，表示此 <see cref="T:System.Xaml.XamlType" />
    ///  的一个命名的特定可附加成员。
    ///</summary>
    ///  <param name="name">
    ///  要获取的可附加成员的名称（以 ownerTypeName.MemberName 形式）。
    ///</param>
    ///<returns>
    ///  请求的可附加成员的 <see cref="T:System.Xaml.XamlMember" />
    ///  对象；如果不存在该名称的可附加成员，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttachableMember(name: string): DNXamlMember;
    ///<summary>
    ///  对于标记扩展类型，返回此特定标记扩展用法中支持位置参数的类型 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///  <param name="parameterCount">
    ///  您要获取其信息的特定语法或构造函数模式计数 (arity)。
    ///</param>
    ///<returns>
    ///  一份 <see cref="T:System.Xaml.XamlType" />
    ///  值，其中每个 <see cref="T:System.Xaml.XamlType" />
    ///  是语法中的此位置的类型。
    ///  提供标记扩展的标记输入时，必须以相同的顺序指定的类型。
    ///</returns>
    function GetPositionalParameters(parameterCount: Int32): DDN.mscorlib.DNIList<DNXamlType>;
    ///<summary>
    ///  返回一个值，该值指示此实例是否 <see cref="T:System.Xaml.XamlType" />
    ///  具有指定 <see cref="T:System.Xaml.XamlType" />
    ///  可赋值的类型列表中。
    ///</summary>
    ///  <param name="xamlType">
    ///  要检查针对当前的类型 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="xamlType" />
    ///  位于可分配的类型列表中; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanAssignTo(xamlType: DNXamlType): Boolean;
    ///<summary>
    ///  返回的字符串表示形式 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串表示形式 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  指示当前对象是否等于另一个对象。
    ///</summary>
    ///  <param name="obj">
    ///  要与此对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果当前对象等于 <paramref name="obj" />
    ///  参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回该对象的哈希代码。
    ///</summary>
    ///<returns>
    ///  整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  指示当前对象是否等于同一类型的另一个对象。
    ///</summary>
    ///  <param name="other">
    ///  一个与此对象进行比较的对象。
    ///</param>
    ///<returns>
    ///  如果当前对象等于 <paramref name="other" />
    ///  参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNXamlType): Boolean; overload;
    ///<summary>
    ///  返回集合，其中包含由此公开的所有成员 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个集合，包含零个或多 <see cref="T:System.Xaml.XamlMember" />
    ///  值。
    ///</returns>
    function GetAllMembers: DDN.mscorlib.DNICollection<DNXamlMember>;
    ///<summary>
    ///  返回集合，其中包含由此公开的所有可附加属性 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个集合，包含零个或多 <see cref="T:System.Xaml.XamlMember" />
    ///  值。
    ///</returns>
    function GetAllAttachableMembers: DDN.mscorlib.DNICollection<DNXamlMember>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlType" />
    ///  立即此 XAML 类型的基类型。
    ///  确定此值取决于此的基础类型 <see cref="T:System.Xaml.XamlType" />
    ///  和架构上下文。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlType" />
    ///  立即此 XAML 类型的基类型。
    ///</returns>
    property BaseType: DNXamlType read get_BaseType;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  与此关联的实现 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  与此关联的实现 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</returns>
    property Invoker: DNXamlTypeInvoker read get_Invoker;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  使用有效的初始化 <see langword="xamlName" />
    ///  字符串作为其 <see cref="P:System.Xaml.XamlType.Name" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  使用有效的初始化 <see langword="xamlName" />
    ///  字符串; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNameValid: Boolean read get_IsNameValid;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示的基础类型系统中无法解析的类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示无法解析的类型; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsUnknown: Boolean read get_IsUnknown;
    ///<summary>
    ///  获取该类型的字符串名称这 <see cref="T:System.Xaml.XamlType" />
    ///  表示。
    ///</summary>
    ///<returns>
    ///  此 XAML 类型的字符串名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取是此主 XAML 命名空间的单个 XAML 命名空间 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  为此 XAML 类型的主 XAML 命名空间的字符串标识符。
    ///</returns>
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    ///<summary>
    ///  获取类型参数的情况下的列表，这 <see cref="T:System.Xaml.XamlType" />
    ///  表示泛型。
    ///</summary>
    ///<returns>
    ///  将出现的类型参数类型;否则为 <see langword="null" />
    ///  , ，如果此 <see cref="T:System.Xaml.XamlType" />
    ///  不表示泛型。
    ///</returns>
    property TypeArguments: DDN.mscorlib.DNIList<DNXamlType> read get_TypeArguments;
    ///<summary>
    ///  获取 CLR <see cref="T:System.Type" />
    ///  的基础这 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  CLR <see cref="T:System.Type" />
    ///  的基础这 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</returns>
    property UnderlyingType: DDN.mscorlib.DNType read get_UnderlyingType;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  必须具有参数 (通过泛型约束 <see langword="x:TypeArguments" />
    ///  , ，初始化文本或其他 XAML 技术) 来构造类型的有效实例。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果构造实例需要一些参数值，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ConstructionRequiresArguments: Boolean read get_ConstructionRequiresArguments;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示一个数组。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示一个数组; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsArray: Boolean read get_IsArray;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示的集合。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示的集合; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCollection: Boolean read get_IsCollection;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示构造的类型，根据 XAML 定义的信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示构造的类型; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsConstructible: Boolean read get_IsConstructible;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示字典中，根据 XAML 定义的信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示字典; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDictionary: Boolean read get_IsDictionary;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示泛型类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示泛型类型; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsGeneric: Boolean read get_IsGeneric;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示标记扩展。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示标记扩展; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsMarkupExtension: Boolean read get_IsMarkupExtension;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示 XAML 名称范围，根据 XAML 定义的信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示 XAML 名称范围; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNameScope: Boolean read get_IsNameScope;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示 null 的类型，根据 XAML 定义的信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示可以为 null 的类型; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示相关类型系统中的公共类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示的公共类型; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPublic: Boolean read get_IsPublic;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  自上而下构建 XAML 初始化过程。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  自上而下的 XAML 初始化过程中; 否则为生成 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsUsableDuringInitialization: Boolean read get_IsUsableDuringInitialization;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示空格有意义集合按照 XML 定义。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示空格有意义的集合; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsWhitespaceSignificantCollection: Boolean read get_IsWhitespaceSignificantCollection;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  代表 XML <see langword="XDATA" />
    ///  , 、 每个 XAML 定义的信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示 <see langword="XDATA" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsXData: Boolean read get_IsXData;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  具有空白处理修整周围的空白，其内容中的序列化的行为。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示一种使用空白在修剪; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property TrimSurroundingWhitespace: Boolean read get_TrimSurroundingWhitespace;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xaml.XamlType" />
    ///  表示环境类型，根据 XAML 定义的信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xaml.XamlType" />
    ///  表示环境类型; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAmbient: Boolean read get_IsAmbient;
    ///<summary>
    ///  获取一个值，提供的键属性的类型信息 <see cref="T:System.Xaml.XamlType" />
    ///  , ，如果 <see cref="T:System.Xaml.XamlType" />
    ///  表示字典。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  字典用法，否则为键的类型的对象 <see langword="null" />
    ///  , ，如果此 <see cref="T:System.Xaml.XamlType" />
    ///  不表示字典。
    ///</returns>
    property KeyType: DNXamlType read get_KeyType;
    ///<summary>
    ///  获取一个值，提供的类型信息 <see langword="Items" />
    ///  属性 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  对象的集合中的项的类型，否则为 <see langword="null" />
    ///  , ，如果此 <see cref="T:System.Xaml.XamlType" />
    ///  不表示集合。
    ///</returns>
    property ItemType: DNXamlType read get_ItemType;
    ///<summary>
    ///  获取只读集合的类型可用作 <see cref="P:System.Xaml.XamlType.ContentProperty" />
    ///  值这 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  可能的内容类型的只读集合。
    ///</returns>
    property AllowedContentTypes: DDN.mscorlib.DNIList<DNXamlType> read get_AllowedContentTypes;
    ///<summary>
    ///  获取用于包装不严格的类型匹配，如在强类型化字符串时其内容的内容属性的类型 <see langword="Collection&lt;T&gt;" />
    ///  。
    ///</summary>
    ///<returns>
    ///  可能的内容包装类型; 只读集合否则为 <see langword="null" />
    ///  。
    ///  请参阅“备注”。
    ///</returns>
    property ContentWrappers: DDN.mscorlib.DNIList<DNXamlType> read get_ContentWrappers;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  约束表示类型的值的转换行为 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  约束表示类型的值的转换行为 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</returns>
    property TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter> read get_TypeConverter;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  表示的值的值序列化行为的约束 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  表示的值的值序列化行为的约束 <see cref="T:System.Xaml.XamlType" />
    ///  ; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    property ValueSerializer: DNXamlValueConverter<DNValueSerializer> read get_ValueSerializer;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.XamlMember" />
    ///  的 content 属性的信息 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.XamlMember" />
    ///  内容属性的信息 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///  可能是 <see langword="null" />
    ///  如果不存在任何内容属性。
    ///</returns>
    property ContentProperty: DNXamlMember read get_ContentProperty;
    ///<summary>
    ///  获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  表示延迟加载此类型的转换行为。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  与 <see cref="T:System.Xaml.XamlDeferringLoader" />
    ///  表示此类型的延迟的加载行为的约束。
    ///</returns>
    property DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader> read get_DeferringLoader;
    ///<summary>
    ///  获取一个值，提供对返回的类型信息 <see langword="ProvideValue" />
    ///  此 <see cref="T:System.Xaml.XamlType" />
    ///  , ，如果它表示标记扩展。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xaml.XamlType" />
    ///  对象的返回类型为标记扩展用法; 否则为 <see langword="null" />
    ///  , ，如果此 <see cref="T:System.Xaml.XamlType" />
    ///  不表示标记扩展。
    ///</returns>
    property MarkupExtensionReturnType: DNXamlType read get_MarkupExtensionReturnType;
    ///<summary>
    ///  获取活动 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  用于处理此 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  活动 <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  用于处理此 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlType = class(TDNGenericImport<DNXamlTypeClass, DNXamlType>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlWriterClass = interface(DNObjectClass)
  ['{663F5CFE-A8F9-5878-A078-13E01A5CD08F}']
  end;

  ///<summary>
  ///  提供了默认的 XAML 编写器的实现和基类定义。
  ///  这不是使用默认 XAML 编写器;你也必须从中派生 <see cref="T:System.Xaml.XamlWriter" />
  ///  并实现其抽象成员，或使用现有 <see cref="T:System.Xaml.XamlWriter" />
  ///  派生的类。
  ///</summary>
  [DNTypeName('System.Xaml.XamlWriter')]
  DNXamlWriter = interface(DDN.mscorlib.DNIDisposable)
  ['{CFB694F7-CF05-3294-BC32-CE04F8110DA1}']
  { getters & setters } 

    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>
    ///  执行交换基于 XAML 读取器中的节点类型 (<see cref="P:System.Xaml.XamlReader.NodeType" />
    ///  ) 并调用相关 <see langword="Write" />
    ///  编写器实现的方法。
    ///</summary>
    ///  <param name="reader">
    ///  要用于确定节点的读取器。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotImplementedException">
    ///  默认实现遇到 <see cref="T:System.Xaml.XamlNodeType" />
    ///  不在默认枚举中。
    ///</exception>
    procedure WriteNode(reader: DNXamlReader);
    ///<summary>
    ///  关闭 XAML 编写器对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  派生类中实现时，生成的情况下，该对象的默认值或隐式设置，而不是指定为输入 XAML 节点集中的离散的对象值的属性值的对象。
    ///</summary>
    procedure WriteGetObject;
    ///<summary>
    ///  派生类中实现时，将启动对象节点的表示形式写入。
    ///</summary>
    ///  <param name="type">
    ///  要写入的对象的 XAML 类型。
    ///</param>
    procedure WriteStartObject(&type: DNXamlType);
    ///<summary>
    ///  派生类中实现时，将生成结束对象节点的表示形式。
    ///</summary>
    procedure WriteEndObject;
    ///<summary>
    ///  派生类中实现时，将开始成员节点的表示形式写入。
    ///</summary>
    ///  <param name="xamlMember">
    ///  要写入的成员节点。
    ///</param>
    procedure WriteStartMember(xamlMember: DNXamlMember);
    ///<summary>
    ///  派生类中实现时，将生成结束成员节点的表示形式。
    ///</summary>
    procedure WriteEndMember;
    ///<summary>
    ///  派生类中实现时，写入的值节点。
    ///</summary>
    ///  <param name="value">
    ///  要写入的值。
    ///</param>
    procedure WriteValue(value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  派生类中实现时，写入 XAML 命名空间声明节点。
    ///</summary>
    ///  <param name="namespaceDeclaration">
    ///  要写入的命名空间声明。
    ///</param>
    procedure WriteNamespace(namespaceDeclaration: DNNamespaceDeclaration);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  派生类中实现时，获取活动的 XAML 架构上下文。
    ///</summary>
    ///<returns>
    ///  活动的 XAML 架构上下文。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlWriter = class(TDNGenericImport<DNXamlWriterClass, DNXamlWriter>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectWriterClass = interface(DNXamlWriterClass)
  ['{C0EF8255-9C0C-52AF-9C93-9DF62E9B0A42}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  类使用的 XAML 架构上下文 <see cref="T:System.Xaml.XamlReader" />
    ///  。
    ///</summary>
    ///  <param name="schemaContext">
    ///  与 XAML 读取器共享的 XAML 架构上下文提供节点以进行写入。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(schemaContext: DNXamlSchemaContext): DNXamlObjectWriter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  类使用的上下文，它由 <see cref="T:System.Xaml.XamlReader" />
    ///  及其设置。
    ///</summary>
    ///  <param name="schemaContext">
    ///  与 XAML 读取器共享的 XAML 架构上下文提供节点以进行写入。
    ///</param>
    ///  <param name="settings">
    ///  指定的某些选项将设置对象 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  行为和输出。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(schemaContext: DNXamlSchemaContext; settings: DNXamlObjectWriterSettings): DNXamlObjectWriter; overload;

  end;

  ///<summary>
  ///  从源 XAML 节点流中创建的对象图。
  ///</summary>
  [DNTypeName('System.Xaml.XamlObjectWriter')]
  DNXamlObjectWriter = interface(DNXamlWriter)
  ['{0BDDD3BA-B361-336E-BEEA-1DB10B8BC6F1}']
  { getters & setters } 

    function get_RootNameScope: DNINameScope;
    function get_Result: DDN.mscorlib.DNObject;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_ShouldProvideLineInfo: Boolean;

  { methods } 

    ///<summary>
    ///  重置所有可能的框架，并清除对象图。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  写入的概念 <see langword="StartObject" />
    ///  对象关系图时指定的对象是默认值或父属性的隐式值。
    ///  隐式值来自于从 XAML 架构上下文获取的信息和后备类型信息，而不是指定为输入 XAML 节点集中的一个对象值。
    ///</summary>
    procedure WriteGetObject;
    ///<summary>
    ///  将一个对象节点写入到当前作用域，并将作用域设置为新的对象范围。
    ///</summary>
    ///  <param name="xamlType">
    ///  要写入的类型。
    ///  通常您可从 XAML 读取器获得此值。
    ///</param>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException">
    ///  处理 <see cref="P:System.Xaml.XamlType.IsUnknown" />
    ///  键入并不能创建一个对象。
    ///  - 或 -
    ///  尝试在无效的作用域中写入的起始对象。
    ///</exception><exception cref="T:System.Xaml.XamlParseException">
    ///  尝试写入根对象时设置中已提供根对象。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="xamlType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure WriteStartObject(xamlType: DNXamlType);
    ///<summary>
    ///  关闭当前编写器中的对象范围。
    ///  新的对象范围将成为父成员作用域。
    ///</summary>
    procedure WriteEndObject;
    ///<summary>
    ///  将新的成员节点写入当前对象的作用域，并且该范围将成为新的成员范围。
    ///</summary>
    ///  <param name="property">
    ///  要编写的 XAML 属性。
    ///  通常您可从 XAML 读取器通过 XAML 节点流中间获得此值。
    ///</param>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException"><paramref name="property" />
    ///  具有 <see cref="P:System.Xaml.XamlMember.IsUnknown" />
    ///  设置为 <see langword="true" />
    ///  。
    ///  - 或 -
    ///<see cref="P:System.Xaml.XamlLanguage.UnknownContent" />
    ///  传递，指示 XAML 节点流包含一个对象，不支持内容的内容。
    ///  - 或 -
    ///  尝试在无效的作用域中写入的启动成员。
    ///</exception><exception cref="T:System.Xaml.XamlDuplicateMemberException"><paramref name="property" />
    ///  指定在父对象的作用域中已显式设置的属性。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="property" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure WriteStartMember(&property: DNXamlMember);
    ///<summary>
    ///  关闭当前成员范围内，并关闭时，可以编写成员范围的值。
    ///  新范围将成为父对象作用域的成员。
    ///</summary>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException">
    ///  无法从遇到此调用和前一个之间的值节点创建成员值 <see langword="StartMember" />
    ///  。
    ///</exception>
    procedure WriteEndMember;
    ///<summary>
    ///  将值写入当前成员作用域。
    ///  如果当前作用域在内部集合、 字典或数组对象，则值应添加到集合、 字典或数组中。
    ///</summary>
    ///  <param name="value">
    ///  要写入的值。
    ///</param>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException">
    ///  尝试在无效的作用域中写入一个值。
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  定义适用于下一个对象的作用域或成员作用域的命名空间声明。
    ///</summary>
    ///  <param name="namespaceDeclaration">
    ///  要写入的命名空间声明。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="namespaceDeclaration" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个组件 <paramref name="namespaceDeclaration" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xaml.XamlObjectReaderException">
    ///  尝试编写无效的作用域中的 XAML 命名空间节点。
    ///</exception>
    procedure WriteNamespace(namespaceDeclaration: DNNamespaceDeclaration);
    ///<summary>
    ///  实现 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />
    ///  ，并提供有关异常的行信息。
    ///</summary>
    ///  <param name="lineNumber">
    ///  从读取器的行号。
    ///</param>
    ///  <param name="linePosition">
    ///  读取器中的行位置。
    ///</param>
    procedure SetLineInfo(lineNumber: Int32; linePosition: Int32);
    ///<summary>
    ///  执行交换基于 XAML 读取器中的节点类型 (<see cref="P:System.Xaml.XamlReader.NodeType" />
    ///  ) 并调用相关 <see langword="Write" />
    ///  编写器实现的方法。
    ///</summary>
    ///  <param name="reader">
    ///  要用于确定节点的读取器。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotImplementedException">
    ///  默认实现遇到 <see cref="T:System.Xaml.XamlNodeType" />
    ///  不在默认枚举中。
    ///</exception>
    procedure WriteNode(reader: DNXamlReader);
    ///<summary>
    ///  关闭 XAML 编写器对象。
    ///</summary>
    procedure Close;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Markup.INameScope" />
    ///  维护 XAML 名称范围的绝对根节点的 XAML 对象编写器的服务。
    ///</summary>
    ///<returns><see cref="T:System.Windows.Markup.INameScope" />
    ///  维护对象编写器的当前根的 XAML 名称范围的服务。
    ///</returns>
    property RootNameScope: DNINameScope read get_RootNameScope;
    ///<summary>
    ///  获取已写入的最后一个对象。
    ///  时，通常只调用节点流位于它的结尾和对象关系图已完成。
    ///</summary>
    ///<returns>
    ///  写入的最后一个对象或 <see langword="null" />
    ///  。
    ///  请参阅“备注”。
    ///</returns>
    property Result: DDN.mscorlib.DNObject read get_Result;
    ///<summary>
    ///  获取活动的 XAML 架构上下文。
    ///</summary>
    ///<returns>
    ///  XAML 架构上下文。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>
    ///  获取一个值，将进行相应报告行信息服务是否应提供值，并因此，还应调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />
    ///  方法在相关时。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行信息使用的编写器;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ShouldProvideLineInfo: Boolean read get_ShouldProvideLineInfo;
  end;

  TDNXamlObjectWriter = class(TDNGenericImport<DNXamlObjectWriterClass, DNXamlObjectWriter>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlWriterClass = interface(DNXamlWriterClass)
  ['{00B27133-C013-57B3-BCF0-ED25F404BC3E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  从流的类。
    ///</summary>
    ///  <param name="stream">
    ///  要写入的流。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 编写器 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext): DNXamlXmlWriter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  从流使用一个编写器设置对象的类。
    ///</summary>
    ///  <param name="stream">
    ///  要写入的流。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 编写器 XAML 架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  一个实例 <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  , ，后者通常具有特定的非默认设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="schemaContext" />
    ///  是 <see langword="null" />
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlWriterSettings): DNXamlXmlWriter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  类 <see cref="T:System.IO.TextWriter" />
    ///  基础。
    ///</summary>
    ///  <param name="textWriter"><see cref="T:System.IO.TextWriter" />
    ///  写入输出。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 编写器 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textWriter" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(textWriter: DDN.mscorlib.DNTextWriter; schemaContext: DNXamlSchemaContext): DNXamlXmlWriter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  类 <see cref="T:System.IO.TextWriter" />
    ///  使用设置对象的基础。
    ///</summary>
    ///  <param name="textWriter"><see cref="T:System.IO.TextWriter" />
    ///  写入输出。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 编写器 XAML 架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  一个实例 <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  , ，后者通常具有特定的非默认设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textWriter" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(textWriter: DDN.mscorlib.DNTextWriter; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlWriterSettings): DNXamlXmlWriter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  类 <see cref="T:System.Xml.XmlWriter" />
    ///  基础。
    ///</summary>
    ///  <param name="xmlWriter"><see cref="T:System.Xml.XmlWriter" />
    ///  写入输出。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 编写器 XAML 架构上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlWriter" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlWriter: DDN.System.Xml.DNXmlWriter; schemaContext: DNXamlSchemaContext): DNXamlXmlWriter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  类 <see cref="T:System.Xml.XmlWriter" />
    ///  使用设置对象的基础。
    ///</summary>
    ///  <param name="xmlWriter"><see cref="T:System.Xml.XmlWriter" />
    ///  写入输出。
    ///</param>
    ///  <param name="schemaContext">
    ///  XAML 编写器 XAML 架构上下文。
    ///</param>
    ///  <param name="settings">
    ///  一个实例 <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  , ，后者通常具有特定的非默认设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlWriter" />
    ///  或 <paramref name="schemaContext" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlWriter: DDN.System.Xml.DNXmlWriter; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlWriterSettings): DNXamlXmlWriter; overload;

  end;

  ///<summary>
  ///  使用 <see cref="T:System.IO.TextWriter" />
  ///  或 <see cref="T:System.Xml.XmlWriter" />
  ///  支持类 XAML 节点流中写入的文本或标记序列化形式。
  ///</summary>
  [DNTypeName('System.Xaml.XamlXmlWriter')]
  DNXamlXmlWriter = interface(DNXamlWriter)
  ['{274FA15D-5982-365B-BAE2-4898D9C1F225}']
  { getters & setters } 

    function get_Settings: DNXamlXmlWriterSettings;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>
    ///  写入的情况下，指定的对象的默认值或隐式值而不是指定为输入 XAML 节点集中的一个对象值，正在写入的属性的对象。
    ///</summary>
    procedure WriteGetObject;
    ///<summary>
    ///  将 XAML 结束对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" />
    ///  或 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  如果正在处理的 XAML 节点流的当前位置与写入结束对象不兼容，则引发异常。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  可以在其中写入 end 成员的作用域中不是 XAML 节点流的当前位置。
    ///</exception><exception cref="T:System.Xaml.XamlXmlWriterException">
    ///  当前的编写器状态不支持写入结束对象。
    ///</exception>
    procedure WriteEndObject;
    ///<summary>
    ///  将 XAML 结束成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" />
    ///  或 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  如果 XAML 节点流的当前位置并非在成员中，或者内部编写器状态不支持写入结束成员，则引发异常。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  XAML 节点流的当前位置不在成员中。
    ///</exception><exception cref="T:System.Xaml.XamlXmlWriterException">
    ///  当前的编写器状态不支持编写 end 成员。
    ///</exception>
    procedure WriteEndMember;
    ///<summary>
    ///  将 XAML 值节点写入到基础 <see cref="T:System.Xml.XmlWriter" />
    ///  或 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  如果 XAML 节点流的当前位置无效，无法写入值，或编写器处于不能在其中写入的值的状态，将引发异常。
    ///</summary>
    ///  <param name="value">
    ///  要写入的值信息。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  XAML 节点流的当前位置无效，不能用于写入值。
    ///</exception><exception cref="T:System.Xaml.XamlXmlWriterException">
    ///  XAML 编写器状态不支持对值节点的写入。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  指定一个值，不为 null 或一个字符串。
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  调用 <see langword="Flush" />
    ///  方法对基础 <see cref="T:System.Xml.XmlWriter" />
    ///  或 <see cref="T:System.IO.TextWriter" />
    ///  , ，其中写入任何内容，目前在缓冲区中，然后关闭编写器。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  将 XAML 起始对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" />
    ///  或 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  如果 XAML 节点流的当前位置不在作用域可以写入的起始对象的位置，或编写器未处于可写入开始对象的状态，则引发异常。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xaml.XamlType" />
    ///  （XAML 类型标识符） 为要写入的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="type" />
    ///  不是有效的 <see cref="T:System.Xaml.XamlType" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  XAML 节点流的当前位置无效，不能用于写入新的启动对象。
    ///</exception><exception cref="T:System.Xaml.XamlXmlWriterException">
    ///  XAML 编写器的状态无效，不能用于写入新的启动对象。
    ///</exception>
    procedure WriteStartObject(&type: DNXamlType);
    ///<summary>
    ///  将 XAML 起始成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" />
    ///  或 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  如果 XAML 节点流的当前位置位于另一个成员，或如果它不是可以在其中写入的启动成员的作用域或编写器状态，则引发异常。
    ///</summary>
    ///  <param name="property">
    ///  要写入的成员 XAML 成员标识符。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="property" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="property" />
    ///  不是有效的 <see cref="T:System.Xaml.XamlMember" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  XAML 节点流的当前位置是无效的写入起始成员。
    ///</exception><exception cref="T:System.Xaml.XamlXmlWriterException">
    ///  写入程序状态无效，不能用于写入开始成员。
    ///  - 或 -
    ///  XAML 编写器尝试写入一个重复的成员。
    ///  此异常可能具有更精确的内部异常。
    ///</exception>
    procedure WriteStartMember(&property: DNXamlMember);
    ///<summary>
    ///  命名空间的信息写入基础 <see cref="T:System.Xml.XmlWriter" />
    ///  或 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  可能引发异常，对于某些状态;但是，可能会改为延迟的写入编写器和正在处理的 XAML 节点流之前的命名空间信息到达 XAML 命名空间声明可以插入其中的位置。
    ///</summary>
    ///  <param name="namespaceDeclaration">
    ///  要编写的 XAML 命名空间声明。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="namespaceDeclaration" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="namespaceDeclaration" />
    ///  不是有效的 XAML 命名空间声明 （具有空前缀或 null 标识符组件）。
    ///</exception><exception cref="T:System.Xaml.XamlXmlWriterException">
    ///  当前的编写器状态不支持编写 XAML 命名空间声明。
    ///</exception>
    procedure WriteNamespace(namespaceDeclaration: DNNamespaceDeclaration);
    ///<summary>
    ///  执行交换基于 XAML 读取器中的节点类型 (<see cref="P:System.Xaml.XamlReader.NodeType" />
    ///  ) 并调用相关 <see langword="Write" />
    ///  编写器实现的方法。
    ///</summary>
    ///  <param name="reader">
    ///  要用于确定节点的读取器。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotImplementedException">
    ///  默认实现遇到 <see cref="T:System.Xaml.XamlNodeType" />
    ///  不在默认枚举中。
    ///</exception>
    procedure WriteNode(reader: DNXamlReader);
    ///<summary>
    ///  关闭 XAML 编写器对象。
    ///</summary>
    procedure Close;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取编写器设置这 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  用于 XAML 处理。
    ///</summary>
    ///<returns>
    ///  编写器设置此 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  用于 XAML 处理。
    ///</returns>
    property Settings: DNXamlXmlWriterSettings read get_Settings;
    ///<summary>
    ///  获取 XAML 架构上下文这 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  使用进行处理。
    ///</summary>
    ///<returns>
    ///  XAML 架构上下文此 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  用于 XAML 处理。
    ///</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlXmlWriter = class(TDNGenericImport<DNXamlXmlWriterClass, DNXamlXmlWriter>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlWriterSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D33BADD-D785-56B8-8C04-1B4D00F63180}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlWriterSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlWriterSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlWriterSettings" />
    ///  类使用另一个现有的设置实例。
    ///</summary>
    ///  <param name="settings">
    ///  一个现有的 <see cref="T:System.Xaml.XamlWriterSettings" />
    ///  对象。
    ///</param>
    {class} function init(settings: DNXamlWriterSettings): DNXamlWriterSettings; overload;

  end;

  ///<summary>
  ///  提供有关初始化设置 <see cref="T:System.Xaml.XamlWriter" />
  ///  实现。
  ///</summary>
  [DNTypeName('System.Xaml.XamlWriterSettings')]
  DNXamlWriterSettings = interface(DDN.mscorlib.DNObject)
  ['{6413231A-9218-3612-B923-09B825F9AEB7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlWriterSettings = class(TDNGenericImport<DNXamlWriterSettingsClass, DNXamlWriterSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectWriterSettingsClass = interface(DNXamlWriterSettingsClass)
  ['{4573DBFA-186E-5C7B-BCB4-BA8BC54B9842}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlObjectWriterSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" />
    ///  基于现有实例的副本的类。
    ///</summary>
    ///  <param name="settings">
    ///  要复制的设置实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="settings" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(settings: DNXamlObjectWriterSettings): DNXamlObjectWriterSettings; overload;

  end;

  ///<summary>
  ///  提供有关的特定 XAML 编写器设置 <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xaml.XamlObjectWriterSettings')]
  DNXamlObjectWriterSettings = interface(DNXamlWriterSettings)
  ['{221B47B2-750C-3648-9A7F-094F672D9919}']
  { getters & setters } 

    function get_AfterBeginInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_AfterBeginInitHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_BeforePropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_BeforePropertiesHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_AfterPropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_AfterPropertiesHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_AfterEndInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_AfterEndInitHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_XamlSetValueHandler: DDN.mscorlib.DNEventHandler<DNXamlSetValueEventArgs>;
    procedure set_XamlSetValueHandler(value: DDN.mscorlib.DNEventHandler<DNXamlSetValueEventArgs>);
    function get_RootObjectInstance: DDN.mscorlib.DNObject;
    procedure set_RootObjectInstance(value: DDN.mscorlib.DNObject);
    function get_IgnoreCanConvert: Boolean;
    procedure set_IgnoreCanConvert(value: Boolean);
    function get_ExternalNameScope: DNINameScope;
    procedure set_ExternalNameScope(value: DNINameScope);
    function get_SkipDuplicatePropertyCheck: Boolean;
    procedure set_SkipDuplicatePropertyCheck(value: Boolean);
    function get_RegisterNamesOnExternalNamescope: Boolean;
    procedure set_RegisterNamesOnExternalNamescope(value: Boolean);
    function get_SkipProvideValueOnRoot: Boolean;
    procedure set_SkipProvideValueOnRoot(value: Boolean);
    function get_PreferUnconvertedDictionaryKeys: Boolean;
    procedure set_PreferUnconvertedDictionaryKeys(value: Boolean);
    function get_SourceBamlUri: DDN.System.DNUri;
    procedure set_SourceBamlUri(value: DDN.System.DNUri);
    function get_AccessLevel: DNXamlAccessLevel;
    procedure set_AccessLevel(value: DNXamlAccessLevel);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置对 XAML 编写器在调用回调的引用 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />
    ///  阶段创建的每个对象的对象生存期。
    ///</summary>
    ///<returns>
    ///  通过 XAML 编写器在调用回调 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />
    ///  对象生存期阶段。
    ///</returns>
    property AfterBeginInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_AfterBeginInitHandler write set_AfterBeginInitHandler;
    ///<summary>
    ///  获取或设置对由 XAML 编写器在每个创建的对象的对象生存期的成员写入前阶段调用的回调的引用。
    ///</summary>
    ///<returns>
    ///  一个由 XAML 编写器在对象生存期的成员写入前阶段调用的回调。
    ///</returns>
    property BeforePropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_BeforePropertiesHandler write set_BeforePropertiesHandler;
    ///<summary>
    ///  获取或设置对由 XAML 编写器在每个创建的对象的对象生存期的成员写入阶段调用的回调的引用。
    ///</summary>
    ///<returns>
    ///  一个由 XAML 编写器在对象生存期的成员写入阶段调用的回调。
    ///</returns>
    property AfterPropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_AfterPropertiesHandler write set_AfterPropertiesHandler;
    ///<summary>
    ///  获取或设置对 XAML 编写器在调用回调的引用 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />
    ///  阶段创建的每个对象的对象生存期。
    ///</summary>
    ///<returns>
    ///  通过 XAML 编写器在调用回调 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />
    ///  对象生存期阶段。
    ///</returns>
    property AfterEndInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_AfterEndInitHandler write set_AfterEndInitHandler;
    ///<summary>
    ///  获取或设置用于调入 CLR 实现的对象编写器的处理程序 <see langword="SetValue" />
    ///  为依赖项属性。
    ///</summary>
    ///<returns>
    ///  处理这种情况下一个处理程序实现。
    ///</returns>
    property XamlSetValueHandler: DDN.mscorlib.DNEventHandler<DNXamlSetValueEventArgs> read get_XamlSetValueHandler write set_XamlSetValueHandler;
    ///<summary>
    ///  获取或设置为预先存在的根对象 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  操作。
    ///</summary>
    ///<returns>
    ///  预先存在的根对象 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  操作。
    ///</returns>
    property RootObjectInstance: DDN.mscorlib.DNObject read get_RootObjectInstance write set_RootObjectInstance;
    ///<summary>
    ///  获取或设置一个值，指定 XAML 编写器是否应忽略 （不调用） <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    ///  上的实现 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  在类型转换器的情况下。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 XAML 编写器将忽略 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    ///  实现; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreCanConvert: Boolean read get_IgnoreCanConvert write set_IgnoreCanConvert;
    ///<summary>
    ///  获取或设置 XAML 名称范围，用于注册从 XAML 编写器的名称，如果 <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" />
    ///  是 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XAML 名称范围用于注册名称。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property ExternalNameScope: DNINameScope read get_ExternalNameScope write set_ExternalNameScope;
    ///<summary>
    ///  获取或设置一个值，确定是否省略 XAML 编写器，以检查检查重复的属性的代码路径。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应省略重复的属性检查;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SkipDuplicatePropertyCheck: Boolean read get_SkipDuplicatePropertyCheck write set_SkipDuplicatePropertyCheck;
    ///<summary>
    ///  获取或设置一个值，确定是否针对指定应发生名称注册 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果是针对情况名称注册 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />
    ///  ; <see langword="false" />
    ///  如果名称注册发生到父 XAML 名称范围。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property RegisterNamesOnExternalNamescope: Boolean read get_RegisterNamesOnExternalNamescope write set_RegisterNamesOnExternalNamescope;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  应省略此项可调用 <see langword="ProvideValue" />
    ///  对标记扩展，即相关时标记扩展表示对象图的根。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  应省略此项可调用 <see langword="ProvideValue" />
    ///  对标记扩展; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SkipProvideValueOnRoot: Boolean read get_SkipProvideValueOnRoot write set_SkipProvideValueOnRoot;
    ///<summary>
    ///  获取或设置一个值，确定是否禁用默认 <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  运行类型转换的功能 <paramref name="K" />
    ///  组件 <see cref="T:System.Collections.Generic.Dictionary`2" />
    ///  之前编写对象图表示形式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="K" />
    ///  的类型转换 <see cref="T:System.Collections.Generic.Dictionary`2" />
    ///  对象应被禁用。
    ///<see langword="false" />
    ///  如果执行 <paramref name="K" />
    ///  的类型转换 <see cref="T:System.Collections.Generic.Dictionary`2" />
    ///  对象适用。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property PreferUnconvertedDictionaryKeys: Boolean read get_PreferUnconvertedDictionaryKeys write set_PreferUnconvertedDictionaryKeys;
    ///<summary>
    ///  用于在 <see langword="BeginInitHandler" />
    ///  中替代实际 <see langword="BaseUri" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于替代实际 <see langword="BaseUri" />
    ///  的 <see cref="T:System.Uri" />
    ///  。
    ///</returns>
    property SourceBamlUri: DDN.System.DNUri read get_SourceBamlUri write set_SourceBamlUri;
    ///<summary>
    ///  获取或设置 XAML 编写器遵守的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  权限。
    ///</summary>
    ///<returns><see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  权限。
    ///</returns>
    property AccessLevel: DNXamlAccessLevel read get_AccessLevel write set_AccessLevel;
  end;

  TDNXamlObjectWriterSettings = class(TDNGenericImport<DNXamlObjectWriterSettingsClass, DNXamlObjectWriterSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlWriterSettingsClass = interface(DNXamlWriterSettingsClass)
  ['{CC133E05-1216-56A1-85E9-3A51D4A8E89C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXamlXmlWriterSettings;

  end;

  ///<summary>
  ///  提供有关初始化设置 <see cref="T:System.Xaml.XamlXmlWriter" />
  ///  XAML 编写器实现。
  ///</summary>
  [DNTypeName('System.Xaml.XamlXmlWriterSettings')]
  DNXamlXmlWriterSettings = interface(DNXamlWriterSettings)
  ['{72A78C6A-1283-3DF5-B892-A3AF188BEAFA}']
  { getters & setters } 

    function get_AssumeValidInput: Boolean;
    procedure set_AssumeValidInput(value: Boolean);
    function get_CloseOutput: Boolean;
    procedure set_CloseOutput(value: Boolean);

  { methods } 

    ///<summary>
    ///  返回一份 <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回的副本。
    ///</returns>
    function Copy: DNXamlXmlWriterSettings;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，指定是否 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  应始终认为以用于重复解析或其他错误检查有效的 XAML 输入。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  跳过某些验证或错误的检查，如在出现重复成员引发异常。
    ///<see langword="false" />
    ///  如果 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  时遇到无效 XAML 将引发异常。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AssumeValidInput: Boolean read get_AssumeValidInput write set_AssumeValidInput;
    ///<summary>
    ///  获取或设置一个值，指定是否 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  上应立即关闭 <see langword="Dispose" />
    ///  或其他操作，或是否 XAML 编写器应改为在关闭前的缓冲区输出。
    ///  请慎用此设置。立即关闭，可能会导致无效不能再次加载的 XAML。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  立即关闭 <see langword="Dispose" />
    ///  或类似操作。
    ///<see langword="false" />
    ///  如果剩余的缓冲输出写入之前 <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  被释放。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property CloseOutput: Boolean read get_CloseOutput write set_CloseOutput;
  end;

  TDNXamlXmlWriterSettings = class(TDNGenericImport<DNXamlXmlWriterSettingsClass, DNXamlXmlWriterSettings>) end;


implementation


initialization
  LoadAssemblyModule('System.Xaml.dll', True);

finalization

end.
