//----------------------------------------------------------------------------
//  System.Private.Xml.dll: System.Private.Xml, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Private.Xml
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMPRIVATEXML}
unit DDNC.System.Private.Xml;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Private.Uri,
  DDNC.System.Collections.NonGeneric,
  DDNC.System.Collections.Specialized,
  DDNC.System.Net.Primitives;

type

{ enums }

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ConformanceLevel')]
  DNConformanceLevel = type Integer;
  DNConformanceLevelHelper = record helper for DNConformanceLevel
  public const
    Auto = 0;
    Fragment = 1;
    Document = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.DtdProcessing')]
  DNDtdProcessing = type Integer;
  DNDtdProcessingHelper = record helper for DNDtdProcessing
  public const
    Prohibit = 0;
    Ignore = 1;
    Parse = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.EntityHandling')]
  DNEntityHandling = type Integer;
  DNEntityHandlingHelper = record helper for DNEntityHandling
  public const
    ExpandEntities = 1;
    ExpandCharEntities = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.Formatting')]
  DNFormatting = type Integer;
  DNFormattingHelper = record helper for DNFormatting
  public const
    None = 0;
    Indented = 1;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NamespaceHandling')]
  DNNamespaceHandling = type Integer;
  DNNamespaceHandlingHelper = record helper for DNNamespaceHandling
  public const
    Default_ = 0;
    OmitDuplicates = 1;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NewLineHandling')]
  DNNewLineHandling = type Integer;
  DNNewLineHandlingHelper = record helper for DNNewLineHandling
  public const
    Replace = 0;
    Entitize = 1;
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ReadState')]
  DNReadState = type Integer;
  DNReadStateHelper = record helper for DNReadState
  public const
    Initial = 0;
    Interactive = 1;
    Error = 2;
    EndOfFile = 3;
    Closed = 4;
  end;


  //-------------namespace: System.Xml.Resolvers----------------
  [DNTypeName('System.Xml.Resolvers.XmlKnownDtds')]
  DNXmlKnownDtds = type Integer;
  DNXmlKnownDtdsHelper = record helper for DNXmlKnownDtds
  public const
    None = 0;
    Xhtml10 = 1;
    Rss091 = 2;
    All = 65535;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaContentProcessing')]
  DNXmlSchemaContentProcessing = type Integer;
  DNXmlSchemaContentProcessingHelper = record helper for DNXmlSchemaContentProcessing
  public const
    None = 0;
    Skip = 1;
    Lax = 2;
    Strict_ = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaContentType')]
  DNXmlSchemaContentType = type Integer;
  DNXmlSchemaContentTypeHelper = record helper for DNXmlSchemaContentType
  public const
    TextOnly = 0;
    Empty = 1;
    ElementOnly = 2;
    Mixed = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaDatatypeVariety')]
  DNXmlSchemaDatatypeVariety = type Integer;
  DNXmlSchemaDatatypeVarietyHelper = record helper for DNXmlSchemaDatatypeVariety
  public const
    Atomic = 0;
    List = 1;
    Union = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaDerivationMethod')]
  DNXmlSchemaDerivationMethod = type Integer;
  DNXmlSchemaDerivationMethodHelper = record helper for DNXmlSchemaDerivationMethod
  public const
    Empty = 0;
    Substitution = 1;
    Extension = 2;
    Restriction = 4;
    List = 8;
    Union = 16;
    All = 255;
    None = 256;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaForm')]
  DNXmlSchemaForm = type Integer;
  DNXmlSchemaFormHelper = record helper for DNXmlSchemaForm
  public const
    None = 0;
    Qualified = 1;
    Unqualified = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaInference+InferenceOption')]
  DNXmlSchemaInference_InferenceOption = type Integer;
  DNXmlSchemaInference_InferenceOptionHelper = record helper for DNXmlSchemaInference_InferenceOption
  public const
    Restricted = 0;
    Relaxed = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaUse')]
  DNXmlSchemaUse = type Integer;
  DNXmlSchemaUseHelper = record helper for DNXmlSchemaUse
  public const
    None = 0;
    Optional = 1;
    Prohibited = 2;
    Required = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidationFlags')]
  DNXmlSchemaValidationFlags = type Integer;
  DNXmlSchemaValidationFlagsHelper = record helper for DNXmlSchemaValidationFlags
  public const
    None = 0;
    ProcessInlineSchema = 1;
    ProcessSchemaLocation = 2;
    ReportValidationWarnings = 4;
    ProcessIdentityConstraints = 8;
    AllowXmlAttributes = 16;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidity')]
  DNXmlSchemaValidity = type Integer;
  DNXmlSchemaValidityHelper = record helper for DNXmlSchemaValidity
  public const
    NotKnown = 0;
    Valid = 1;
    Invalid = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSeverityType')]
  DNXmlSeverityType = type Integer;
  DNXmlSeverityTypeHelper = record helper for DNXmlSeverityType
  public const
    Error = 0;
    Warning = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlTypeCode')]
  DNXmlTypeCode = type Integer;
  DNXmlTypeCodeHelper = record helper for DNXmlTypeCode
  public const
    None = 0;
    Item = 1;
    Node = 2;
    Document = 3;
    Element = 4;
    Attribute = 5;
    Namespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Text = 9;
    AnyAtomicType = 10;
    UntypedAtomic = 11;
    String_ = 12;
    Boolean = 13;
    Decimal = 14;
    Float = 15;
    Double = 16;
    Duration = 17;
    DateTime = 18;
    Time = 19;
    Date = 20;
    GYearMonth = 21;
    GYear = 22;
    GMonthDay = 23;
    GDay = 24;
    GMonth = 25;
    HexBinary = 26;
    Base64Binary = 27;
    AnyUri = 28;
    QName = 29;
    Notation = 30;
    NormalizedString = 31;
    Token = 32;
    Language = 33;
    NmToken = 34;
    Name = 35;
    NCName = 36;
    Id = 37;
    Idref = 38;
    Entity = 39;
    Integer = 40;
    NonPositiveInteger = 41;
    NegativeInteger = 42;
    Long = 43;
    Int = 44;
    Short = 45;
    Byte = 46;
    NonNegativeInteger = 47;
    UnsignedLong = 48;
    UnsignedInt = 49;
    UnsignedShort = 50;
    UnsignedByte = 51;
    PositiveInteger = 52;
    YearMonthDuration = 53;
    DayTimeDuration = 54;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.CodeGenerationOptions')]
  DNCodeGenerationOptions = type Integer;
  DNCodeGenerationOptionsHelper = record helper for DNCodeGenerationOptions
  public const
    None = 0;
    GenerateProperties = 1;
    GenerateNewAsync = 2;
    GenerateOldAsync = 4;
    GenerateOrder = 8;
    EnableDataBinding = 16;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.XmlMappingAccess')]
  DNXmlMappingAccess = type Integer;
  DNXmlMappingAccessHelper = record helper for DNXmlMappingAccess
  public const
    None = 0;
    Read = 1;
    Write = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    None = 0;
    Auto = 1;
    DTD = 2;
    XDR = 3;
    Schema = 4;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.WhitespaceHandling')]
  DNWhitespaceHandling = type Integer;
  DNWhitespaceHandlingHelper = record helper for DNWhitespaceHandling
  public const
    All = 0;
    Significant = 1;
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.WriteState')]
  DNWriteState = type Integer;
  DNWriteStateHelper = record helper for DNWriteState
  public const
    Start = 0;
    Prolog = 1;
    Element = 2;
    Attribute = 3;
    Content = 4;
    Closed = 5;
    Error = 6;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlDateTimeSerializationMode')]
  DNXmlDateTimeSerializationMode = type Integer;
  DNXmlDateTimeSerializationModeHelper = record helper for DNXmlDateTimeSerializationMode
  public const
    Local = 0;
    Utc = 1;
    Unspecified = 2;
    RoundtripKind = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNamespaceScope')]
  DNXmlNamespaceScope = type Integer;
  DNXmlNamespaceScopeHelper = record helper for DNXmlNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeChangedAction')]
  DNXmlNodeChangedAction = type Integer;
  DNXmlNodeChangedActionHelper = record helper for DNXmlNodeChangedAction
  public const
    Insert = 0;
    Remove = 1;
    Change = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeOrder')]
  DNXmlNodeOrder = type Integer;
  DNXmlNodeOrderHelper = record helper for DNXmlNodeOrder
  public const
    Before = 0;
    After = 1;
    Same = 2;
    Unknown = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeType')]
  DNXmlNodeType = type Integer;
  DNXmlNodeTypeHelper = record helper for DNXmlNodeType
  public const
    None = 0;
    Element = 1;
    Attribute = 2;
    Text = 3;
    CDATA = 4;
    EntityReference = 5;
    Entity = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Document = 9;
    DocumentType = 10;
    DocumentFragment = 11;
    Notation = 12;
    Whitespace = 13;
    SignificantWhitespace = 14;
    EndElement = 15;
    EndEntity = 16;
    XmlDeclaration = 17;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlOutputMethod')]
  DNXmlOutputMethod = type Integer;
  DNXmlOutputMethodHelper = record helper for DNXmlOutputMethod
  public const
    Xml = 0;
    Html = 1;
    Text = 2;
    AutoDetect = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlSpace')]
  DNXmlSpace = type Integer;
  DNXmlSpaceHelper = record helper for DNXmlSpace
  public const
    None = 0;
    Default_ = 1;
    Preserve = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlTokenizedType')]
  DNXmlTokenizedType = type Integer;
  DNXmlTokenizedTypeHelper = record helper for DNXmlTokenizedType
  public const
    CDATA = 0;
    ID = 1;
    IDREF = 2;
    IDREFS = 3;
    ENTITY = 4;
    ENTITIES = 5;
    NMTOKEN = 6;
    NMTOKENS = 7;
    NOTATION = 8;
    ENUMERATION = 9;
    QName = 10;
    NCName = 11;
    None = 12;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlCaseOrder')]
  DNXmlCaseOrder = type Integer;
  DNXmlCaseOrderHelper = record helper for DNXmlCaseOrder
  public const
    None = 0;
    UpperFirst = 1;
    LowerFirst = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlDataType')]
  DNXmlDataType = type Integer;
  DNXmlDataTypeHelper = record helper for DNXmlDataType
  public const
    Text = 1;
    Number = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlSortOrder')]
  DNXmlSortOrder = type Integer;
  DNXmlSortOrderHelper = record helper for DNXmlSortOrder
  public const
    Ascending = 1;
    Descending = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNamespaceScope')]
  DNXPathNamespaceScope = type Integer;
  DNXPathNamespaceScopeHelper = record helper for DNXPathNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNodeType')]
  DNXPathNodeType = type Integer;
  DNXPathNodeTypeHelper = record helper for DNXPathNodeType
  public const
    Root = 0;
    Element = 1;
    Attribute = 2;
    Namespace = 3;
    Text = 4;
    SignificantWhitespace = 5;
    Whitespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    All = 9;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathResultType')]
  DNXPathResultType = type Integer;
  DNXPathResultTypeHelper = record helper for DNXPathResultType
  public const
    Number = 0;
    String_ = 1;
    Navigator = 1;
    Boolean = 2;
    NodeSet = 3;
    Any = 5;
    Error = 6;
  end;


  //-------------namespace: System.Xml.Xsl.Runtime----------------
  [DNTypeName('System.Xml.Xsl.Runtime.IteratorResult')]
  DNIteratorResult = type Integer;
  DNIteratorResultHelper = record helper for DNIteratorResult
  public const
    NoMoreNodes = 0;
    NeedInputNode = 1;
    HaveCurrentNode = 2;
  end;


  //-------------namespace: System.Xml.Xsl.Runtime----------------
  [DNTypeName('System.Xml.Xsl.Runtime.SetIteratorResult')]
  DNSetIteratorResult = type Integer;
  DNSetIteratorResultHelper = record helper for DNSetIteratorResult
  public const
    NoMoreNodes = 0;
    InitRightIterator = 1;
    NeedLeftNode = 2;
    NeedRightNode = 3;
    HaveCurrentNode = 4;
  end;




type


{ declares }

  DNIApplicationResourceStreamResolver = interface; // type: System.Xml.IApplicationResourceStreamResolver, namespace: System.Xml
  DNIHasXmlNode = interface; // type: System.Xml.IHasXmlNode, namespace: System.Xml
  DNIXmlLineInfo = interface; // type: System.Xml.IXmlLineInfo, namespace: System.Xml
  DNIXmlNamespaceResolver = interface; // type: System.Xml.IXmlNamespaceResolver, namespace: System.Xml
  DNIXmlSchemaInfo = interface; // type: System.Xml.Schema.IXmlSchemaInfo, namespace: System.Xml.Schema
  DNIXmlSerializable = interface; // type: System.Xml.Serialization.IXmlSerializable, namespace: System.Xml.Serialization
  DNIXmlTextParser = interface; // type: System.Xml.Serialization.IXmlTextParser, namespace: System.Xml.Serialization
  DNIXPathNavigable = interface; // type: System.Xml.XPath.IXPathNavigable, namespace: System.Xml.XPath
  DNIXsltContextFunction = interface; // type: System.Xml.Xsl.IXsltContextFunction, namespace: System.Xml.Xsl
  DNIXsltContextVariable = interface; // type: System.Xml.Xsl.IXsltContextVariable, namespace: System.Xml.Xsl
  DNSoapAttributeAttribute = interface; // type: System.Xml.Serialization.SoapAttributeAttribute, namespace: System.Xml.Serialization
  DNSoapElementAttribute = interface; // type: System.Xml.Serialization.SoapElementAttribute, namespace: System.Xml.Serialization
  DNSoapEnumAttribute = interface; // type: System.Xml.Serialization.SoapEnumAttribute, namespace: System.Xml.Serialization
  DNSoapIgnoreAttribute = interface; // type: System.Xml.Serialization.SoapIgnoreAttribute, namespace: System.Xml.Serialization
  DNSoapIncludeAttribute = interface; // type: System.Xml.Serialization.SoapIncludeAttribute, namespace: System.Xml.Serialization
  DNSoapTypeAttribute = interface; // type: System.Xml.Serialization.SoapTypeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAnyAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyElementAttribute = interface; // type: System.Xml.Serialization.XmlAnyElementAttribute, namespace: System.Xml.Serialization
  DNXmlArrayAttribute = interface; // type: System.Xml.Serialization.XmlArrayAttribute, namespace: System.Xml.Serialization
  DNXmlArrayItemAttribute = interface; // type: System.Xml.Serialization.XmlArrayItemAttribute, namespace: System.Xml.Serialization
  DNXmlAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlChoiceIdentifierAttribute = interface; // type: System.Xml.Serialization.XmlChoiceIdentifierAttribute, namespace: System.Xml.Serialization
  DNXmlElementAttribute = interface; // type: System.Xml.Serialization.XmlElementAttribute, namespace: System.Xml.Serialization
  DNXmlEnumAttribute = interface; // type: System.Xml.Serialization.XmlEnumAttribute, namespace: System.Xml.Serialization
  DNXmlIgnoreAttribute = interface; // type: System.Xml.Serialization.XmlIgnoreAttribute, namespace: System.Xml.Serialization
  DNXmlIncludeAttribute = interface; // type: System.Xml.Serialization.XmlIncludeAttribute, namespace: System.Xml.Serialization
  DNXmlNamespaceDeclarationsAttribute = interface; // type: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute, namespace: System.Xml.Serialization
  DNXmlRootAttribute = interface; // type: System.Xml.Serialization.XmlRootAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaProviderAttribute = interface; // type: System.Xml.Serialization.XmlSchemaProviderAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerAssemblyAttribute = interface; // type: System.Xml.Serialization.XmlSerializerAssemblyAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerVersionAttribute = interface; // type: System.Xml.Serialization.XmlSerializerVersionAttribute, namespace: System.Xml.Serialization
  DNXmlTextAttribute = interface; // type: System.Xml.Serialization.XmlTextAttribute, namespace: System.Xml.Serialization
  DNXmlTypeAttribute = interface; // type: System.Xml.Serialization.XmlTypeAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaObjectCollection = interface; // type: System.Xml.Schema.XmlSchemaObjectCollection, namespace: System.Xml.Schema
  DNXmlAnyElementAttributes = interface; // type: System.Xml.Serialization.XmlAnyElementAttributes, namespace: System.Xml.Serialization
  DNXmlArrayItemAttributes = interface; // type: System.Xml.Serialization.XmlArrayItemAttributes, namespace: System.Xml.Serialization
  DNXmlElementAttributes = interface; // type: System.Xml.Serialization.XmlElementAttributes, namespace: System.Xml.Serialization
  DNXmlSchemas = interface; // type: System.Xml.Serialization.XmlSchemas, namespace: System.Xml.Serialization
  DNValidationEventArgs = interface; // type: System.Xml.Schema.ValidationEventArgs, namespace: System.Xml.Schema
  DNUnreferencedObjectEventArgs = interface; // type: System.Xml.Serialization.UnreferencedObjectEventArgs, namespace: System.Xml.Serialization
  DNXmlAttributeEventArgs = interface; // type: System.Xml.Serialization.XmlAttributeEventArgs, namespace: System.Xml.Serialization
  DNXmlElementEventArgs = interface; // type: System.Xml.Serialization.XmlElementEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeEventArgs = interface; // type: System.Xml.Serialization.XmlNodeEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeChangedEventArgs = interface; // type: System.Xml.XmlNodeChangedEventArgs, namespace: System.Xml
  DNXsltMessageEncounteredEventArgs = interface; // type: System.Xml.Xsl.XsltMessageEncounteredEventArgs, namespace: System.Xml.Xsl
  DNXmlSchemaException = interface; // type: System.Xml.Schema.XmlSchemaException, namespace: System.Xml.Schema
  DNXmlSchemaInferenceException = interface; // type: System.Xml.Schema.XmlSchemaInferenceException, namespace: System.Xml.Schema
  DNXmlSchemaValidationException = interface; // type: System.Xml.Schema.XmlSchemaValidationException, namespace: System.Xml.Schema
  DNXmlException = interface; // type: System.Xml.XmlException, namespace: System.Xml
  DNXPathException = interface; // type: System.Xml.XPath.XPathException, namespace: System.Xml.XPath
  DNXsltException = interface; // type: System.Xml.Xsl.XsltException, namespace: System.Xml.Xsl
  DNXsltCompileException = interface; // type: System.Xml.Xsl.XsltCompileException, namespace: System.Xml.Xsl
  DNXmlDeserializationEvents = interface; // type: System.Xml.Serialization.XmlDeserializationEvents, namespace: System.Xml.Serialization
  DNAncestorDocOrderIterator = interface; // type: System.Xml.Xsl.Runtime.AncestorDocOrderIterator, namespace: System.Xml.Xsl.Runtime
  DNAncestorIterator = interface; // type: System.Xml.Xsl.Runtime.AncestorIterator, namespace: System.Xml.Xsl.Runtime
  DNAttributeContentIterator = interface; // type: System.Xml.Xsl.Runtime.AttributeContentIterator, namespace: System.Xml.Xsl.Runtime
  DNAttributeIterator = interface; // type: System.Xml.Xsl.Runtime.AttributeIterator, namespace: System.Xml.Xsl.Runtime
  DNContentIterator = interface; // type: System.Xml.Xsl.Runtime.ContentIterator, namespace: System.Xml.Xsl.Runtime
  DNContentMergeIterator = interface; // type: System.Xml.Xsl.Runtime.ContentMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNDecimalAggregator = interface; // type: System.Xml.Xsl.Runtime.DecimalAggregator, namespace: System.Xml.Xsl.Runtime
  DNDescendantIterator = interface; // type: System.Xml.Xsl.Runtime.DescendantIterator, namespace: System.Xml.Xsl.Runtime
  DNDescendantMergeIterator = interface; // type: System.Xml.Xsl.Runtime.DescendantMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNDifferenceIterator = interface; // type: System.Xml.Xsl.Runtime.DifferenceIterator, namespace: System.Xml.Xsl.Runtime
  DNDodSequenceMerge = interface; // type: System.Xml.Xsl.Runtime.DodSequenceMerge, namespace: System.Xml.Xsl.Runtime
  DNDoubleAggregator = interface; // type: System.Xml.Xsl.Runtime.DoubleAggregator, namespace: System.Xml.Xsl.Runtime
  DNElementContentIterator = interface; // type: System.Xml.Xsl.Runtime.ElementContentIterator, namespace: System.Xml.Xsl.Runtime
  DNFollowingSiblingIterator = interface; // type: System.Xml.Xsl.Runtime.FollowingSiblingIterator, namespace: System.Xml.Xsl.Runtime
  DNFollowingSiblingMergeIterator = interface; // type: System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNIdIterator = interface; // type: System.Xml.Xsl.Runtime.IdIterator, namespace: System.Xml.Xsl.Runtime
  DNInt32Aggregator = interface; // type: System.Xml.Xsl.Runtime.Int32Aggregator, namespace: System.Xml.Xsl.Runtime
  DNInt64Aggregator = interface; // type: System.Xml.Xsl.Runtime.Int64Aggregator, namespace: System.Xml.Xsl.Runtime
  DNIntersectIterator = interface; // type: System.Xml.Xsl.Runtime.IntersectIterator, namespace: System.Xml.Xsl.Runtime
  DNNamespaceIterator = interface; // type: System.Xml.Xsl.Runtime.NamespaceIterator, namespace: System.Xml.Xsl.Runtime
  DNNodeKindContentIterator = interface; // type: System.Xml.Xsl.Runtime.NodeKindContentIterator, namespace: System.Xml.Xsl.Runtime
  DNNodeRangeIterator = interface; // type: System.Xml.Xsl.Runtime.NodeRangeIterator, namespace: System.Xml.Xsl.Runtime
  DNParentIterator = interface; // type: System.Xml.Xsl.Runtime.ParentIterator, namespace: System.Xml.Xsl.Runtime
  DNPrecedingIterator = interface; // type: System.Xml.Xsl.Runtime.PrecedingIterator, namespace: System.Xml.Xsl.Runtime
  DNPrecedingSiblingDocOrderIterator = interface; // type: System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator, namespace: System.Xml.Xsl.Runtime
  DNPrecedingSiblingIterator = interface; // type: System.Xml.Xsl.Runtime.PrecedingSiblingIterator, namespace: System.Xml.Xsl.Runtime
  DNStringConcat = interface; // type: System.Xml.Xsl.Runtime.StringConcat, namespace: System.Xml.Xsl.Runtime
  DNUnionIterator = interface; // type: System.Xml.Xsl.Runtime.UnionIterator, namespace: System.Xml.Xsl.Runtime
  DNXmlSortKeyAccumulator = interface; // type: System.Xml.Xsl.Runtime.XmlSortKeyAccumulator, namespace: System.Xml.Xsl.Runtime
  DNXPathFollowingIterator = interface; // type: System.Xml.Xsl.Runtime.XPathFollowingIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathFollowingMergeIterator = interface; // type: System.Xml.Xsl.Runtime.XPathFollowingMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathPrecedingDocOrderIterator = interface; // type: System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathPrecedingIterator = interface; // type: System.Xml.Xsl.Runtime.XPathPrecedingIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathPrecedingMergeIterator = interface; // type: System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNXmlSchemaCollection = interface; // type: System.Xml.Schema.XmlSchemaCollection, namespace: System.Xml.Schema
  DNXmlSchemaCollectionEnumerator = interface; // type: System.Xml.Schema.XmlSchemaCollectionEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaCompilationSettings = interface; // type: System.Xml.Schema.XmlSchemaCompilationSettings, namespace: System.Xml.Schema
  DNXmlSchemaDatatype = interface; // type: System.Xml.Schema.XmlSchemaDatatype, namespace: System.Xml.Schema
  DNXmlSchemaInference = interface; // type: System.Xml.Schema.XmlSchemaInference, namespace: System.Xml.Schema
  DNXmlSchemaInfo = interface; // type: System.Xml.Schema.XmlSchemaInfo, namespace: System.Xml.Schema
  DNXmlSchemaObject = interface; // type: System.Xml.Schema.XmlSchemaObject, namespace: System.Xml.Schema
  DNXmlSchema = interface; // type: System.Xml.Schema.XmlSchema, namespace: System.Xml.Schema
  DNXmlSchemaAnnotated = interface; // type: System.Xml.Schema.XmlSchemaAnnotated, namespace: System.Xml.Schema
  DNXmlSchemaAnyAttribute = interface; // type: System.Xml.Schema.XmlSchemaAnyAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttribute = interface; // type: System.Xml.Schema.XmlSchemaAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroup = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroup, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroupRef = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaContent = interface; // type: System.Xml.Schema.XmlSchemaContent, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentExtension = interface; // type: System.Xml.Schema.XmlSchemaComplexContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaComplexContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentExtension = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaContentModel = interface; // type: System.Xml.Schema.XmlSchemaContentModel, namespace: System.Xml.Schema
  DNXmlSchemaComplexContent = interface; // type: System.Xml.Schema.XmlSchemaComplexContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleContent, namespace: System.Xml.Schema
  DNXmlSchemaFacet = interface; // type: System.Xml.Schema.XmlSchemaFacet, namespace: System.Xml.Schema
  DNXmlSchemaEnumerationFacet = interface; // type: System.Xml.Schema.XmlSchemaEnumerationFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaNumericFacet = interface; // type: System.Xml.Schema.XmlSchemaNumericFacet, namespace: System.Xml.Schema
  DNXmlSchemaFractionDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaFractionDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMinLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaTotalDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaTotalDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaPatternFacet = interface; // type: System.Xml.Schema.XmlSchemaPatternFacet, namespace: System.Xml.Schema
  DNXmlSchemaWhiteSpaceFacet = interface; // type: System.Xml.Schema.XmlSchemaWhiteSpaceFacet, namespace: System.Xml.Schema
  DNXmlSchemaGroup = interface; // type: System.Xml.Schema.XmlSchemaGroup, namespace: System.Xml.Schema
  DNXmlSchemaIdentityConstraint = interface; // type: System.Xml.Schema.XmlSchemaIdentityConstraint, namespace: System.Xml.Schema
  DNXmlSchemaKey = interface; // type: System.Xml.Schema.XmlSchemaKey, namespace: System.Xml.Schema
  DNXmlSchemaKeyref = interface; // type: System.Xml.Schema.XmlSchemaKeyref, namespace: System.Xml.Schema
  DNXmlSchemaUnique = interface; // type: System.Xml.Schema.XmlSchemaUnique, namespace: System.Xml.Schema
  DNXmlSchemaNotation = interface; // type: System.Xml.Schema.XmlSchemaNotation, namespace: System.Xml.Schema
  DNXmlSchemaParticle = interface; // type: System.Xml.Schema.XmlSchemaParticle, namespace: System.Xml.Schema
  DNXmlSchemaAny = interface; // type: System.Xml.Schema.XmlSchemaAny, namespace: System.Xml.Schema
  DNXmlSchemaElement = interface; // type: System.Xml.Schema.XmlSchemaElement, namespace: System.Xml.Schema
  DNXmlSchemaGroupBase = interface; // type: System.Xml.Schema.XmlSchemaGroupBase, namespace: System.Xml.Schema
  DNXmlSchemaAll = interface; // type: System.Xml.Schema.XmlSchemaAll, namespace: System.Xml.Schema
  DNXmlSchemaChoice = interface; // type: System.Xml.Schema.XmlSchemaChoice, namespace: System.Xml.Schema
  DNXmlSchemaSequence = interface; // type: System.Xml.Schema.XmlSchemaSequence, namespace: System.Xml.Schema
  DNXmlSchemaGroupRef = interface; // type: System.Xml.Schema.XmlSchemaGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeList = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeList, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeUnion = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeUnion, namespace: System.Xml.Schema
  DNXmlSchemaType = interface; // type: System.Xml.Schema.XmlSchemaType, namespace: System.Xml.Schema
  DNXmlSchemaComplexType = interface; // type: System.Xml.Schema.XmlSchemaComplexType, namespace: System.Xml.Schema
  DNXmlSchemaSimpleType = interface; // type: System.Xml.Schema.XmlSchemaSimpleType, namespace: System.Xml.Schema
  DNXmlSchemaXPath = interface; // type: System.Xml.Schema.XmlSchemaXPath, namespace: System.Xml.Schema
  DNXmlSchemaAnnotation = interface; // type: System.Xml.Schema.XmlSchemaAnnotation, namespace: System.Xml.Schema
  DNXmlSchemaAppInfo = interface; // type: System.Xml.Schema.XmlSchemaAppInfo, namespace: System.Xml.Schema
  DNXmlSchemaDocumentation = interface; // type: System.Xml.Schema.XmlSchemaDocumentation, namespace: System.Xml.Schema
  DNXmlSchemaExternal = interface; // type: System.Xml.Schema.XmlSchemaExternal, namespace: System.Xml.Schema
  DNXmlSchemaImport = interface; // type: System.Xml.Schema.XmlSchemaImport, namespace: System.Xml.Schema
  DNXmlSchemaInclude = interface; // type: System.Xml.Schema.XmlSchemaInclude, namespace: System.Xml.Schema
  DNXmlSchemaRedefine = interface; // type: System.Xml.Schema.XmlSchemaRedefine, namespace: System.Xml.Schema
  DNXmlSchemaObjectEnumerator = interface; // type: System.Xml.Schema.XmlSchemaObjectEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaObjectTable = interface; // type: System.Xml.Schema.XmlSchemaObjectTable, namespace: System.Xml.Schema
  DNXmlSchemaSet = interface; // type: System.Xml.Schema.XmlSchemaSet, namespace: System.Xml.Schema
  DNXmlSchemaValidator = interface; // type: System.Xml.Schema.XmlSchemaValidator, namespace: System.Xml.Schema
  DNCodeIdentifier = interface; // type: System.Xml.Serialization.CodeIdentifier, namespace: System.Xml.Serialization
  DNCodeIdentifiers = interface; // type: System.Xml.Serialization.CodeIdentifiers, namespace: System.Xml.Serialization
  DNImportContext = interface; // type: System.Xml.Serialization.ImportContext, namespace: System.Xml.Serialization
  DNSchemaImporter = interface; // type: System.Xml.Serialization.SchemaImporter, namespace: System.Xml.Serialization
  DNXmlSchemaImporter = interface; // type: System.Xml.Serialization.XmlSchemaImporter, namespace: System.Xml.Serialization
  DNSoapAttributeOverrides = interface; // type: System.Xml.Serialization.SoapAttributeOverrides, namespace: System.Xml.Serialization
  DNSoapAttributes = interface; // type: System.Xml.Serialization.SoapAttributes, namespace: System.Xml.Serialization
  DNSoapReflectionImporter = interface; // type: System.Xml.Serialization.SoapReflectionImporter, namespace: System.Xml.Serialization
  DNSoapSchemaMember = interface; // type: System.Xml.Serialization.SoapSchemaMember, namespace: System.Xml.Serialization
  DNXmlAttributeOverrides = interface; // type: System.Xml.Serialization.XmlAttributeOverrides, namespace: System.Xml.Serialization
  DNXmlAttributes = interface; // type: System.Xml.Serialization.XmlAttributes, namespace: System.Xml.Serialization
  DNXmlMapping = interface; // type: System.Xml.Serialization.XmlMapping, namespace: System.Xml.Serialization
  DNXmlMembersMapping = interface; // type: System.Xml.Serialization.XmlMembersMapping, namespace: System.Xml.Serialization
  DNXmlTypeMapping = interface; // type: System.Xml.Serialization.XmlTypeMapping, namespace: System.Xml.Serialization
  DNXmlMemberMapping = interface; // type: System.Xml.Serialization.XmlMemberMapping, namespace: System.Xml.Serialization
  DNXmlReflectionImporter = interface; // type: System.Xml.Serialization.XmlReflectionImporter, namespace: System.Xml.Serialization
  DNXmlReflectionMember = interface; // type: System.Xml.Serialization.XmlReflectionMember, namespace: System.Xml.Serialization
  DNXmlSchemaEnumerator = interface; // type: System.Xml.Serialization.XmlSchemaEnumerator, namespace: System.Xml.Serialization
  DNXmlSchemaExporter = interface; // type: System.Xml.Serialization.XmlSchemaExporter, namespace: System.Xml.Serialization
  DNXmlSerializationGeneratedCode = interface; // type: System.Xml.Serialization.XmlSerializationGeneratedCode, namespace: System.Xml.Serialization
  DNXmlSerializationReader = interface; // type: System.Xml.Serialization.XmlSerializationReader, namespace: System.Xml.Serialization
  DNXmlSerializationWriter = interface; // type: System.Xml.Serialization.XmlSerializationWriter, namespace: System.Xml.Serialization
  DNXmlSerializer = interface; // type: System.Xml.Serialization.XmlSerializer, namespace: System.Xml.Serialization
  DNXmlSerializerFactory = interface; // type: System.Xml.Serialization.XmlSerializerFactory, namespace: System.Xml.Serialization
  DNXmlSerializerImplementation = interface; // type: System.Xml.Serialization.XmlSerializerImplementation, namespace: System.Xml.Serialization
  DNXmlSerializerNamespaces = interface; // type: System.Xml.Serialization.XmlSerializerNamespaces, namespace: System.Xml.Serialization
  DNXmlConvert = interface; // type: System.Xml.XmlConvert, namespace: System.Xml
  DNXmlImplementation = interface; // type: System.Xml.XmlImplementation, namespace: System.Xml
  DNXmlNamedNodeMap = interface; // type: System.Xml.XmlNamedNodeMap, namespace: System.Xml
  DNXmlAttributeCollection = interface; // type: System.Xml.XmlAttributeCollection, namespace: System.Xml
  DNXmlNamespaceManager = interface; // type: System.Xml.XmlNamespaceManager, namespace: System.Xml
  DNXsltContext = interface; // type: System.Xml.Xsl.XsltContext, namespace: System.Xml.Xsl
  DNXmlNameTable = interface; // type: System.Xml.XmlNameTable, namespace: System.Xml
  DNNameTable = interface; // type: System.Xml.NameTable, namespace: System.Xml
  DNXmlNode = interface; // type: System.Xml.XmlNode, namespace: System.Xml
  DNXmlAttribute = interface; // type: System.Xml.XmlAttribute, namespace: System.Xml
  DNXmlDocument = interface; // type: System.Xml.XmlDocument, namespace: System.Xml
  DNXmlDocumentFragment = interface; // type: System.Xml.XmlDocumentFragment, namespace: System.Xml
  DNXmlEntity = interface; // type: System.Xml.XmlEntity, namespace: System.Xml
  DNXmlLinkedNode = interface; // type: System.Xml.XmlLinkedNode, namespace: System.Xml
  DNXmlCharacterData = interface; // type: System.Xml.XmlCharacterData, namespace: System.Xml
  DNXmlCDataSection = interface; // type: System.Xml.XmlCDataSection, namespace: System.Xml
  DNXmlComment = interface; // type: System.Xml.XmlComment, namespace: System.Xml
  DNXmlSignificantWhitespace = interface; // type: System.Xml.XmlSignificantWhitespace, namespace: System.Xml
  DNXmlText = interface; // type: System.Xml.XmlText, namespace: System.Xml
  DNXmlWhitespace = interface; // type: System.Xml.XmlWhitespace, namespace: System.Xml
  DNXmlDeclaration = interface; // type: System.Xml.XmlDeclaration, namespace: System.Xml
  DNXmlDocumentType = interface; // type: System.Xml.XmlDocumentType, namespace: System.Xml
  DNXmlElement = interface; // type: System.Xml.XmlElement, namespace: System.Xml
  DNXmlEntityReference = interface; // type: System.Xml.XmlEntityReference, namespace: System.Xml
  DNXmlProcessingInstruction = interface; // type: System.Xml.XmlProcessingInstruction, namespace: System.Xml
  DNXmlNotation = interface; // type: System.Xml.XmlNotation, namespace: System.Xml
  DNXmlNodeList = interface; // type: System.Xml.XmlNodeList, namespace: System.Xml
  DNXmlParserContext = interface; // type: System.Xml.XmlParserContext, namespace: System.Xml
  DNXmlQualifiedName = interface; // type: System.Xml.XmlQualifiedName, namespace: System.Xml
  DNXmlReader = interface; // type: System.Xml.XmlReader, namespace: System.Xml
  DNXmlNodeReader = interface; // type: System.Xml.XmlNodeReader, namespace: System.Xml
  DNXmlTextReader = interface; // type: System.Xml.XmlTextReader, namespace: System.Xml
  DNXmlValidatingReader = interface; // type: System.Xml.XmlValidatingReader, namespace: System.Xml
  DNXmlReaderSettings = interface; // type: System.Xml.XmlReaderSettings, namespace: System.Xml
  DNXmlResolver = interface; // type: System.Xml.XmlResolver, namespace: System.Xml
  DNXmlPreloadedResolver = interface; // type: System.Xml.Resolvers.XmlPreloadedResolver, namespace: System.Xml.Resolvers
  DNXmlSecureResolver = interface; // type: System.Xml.XmlSecureResolver, namespace: System.Xml
  DNXmlUrlResolver = interface; // type: System.Xml.XmlUrlResolver, namespace: System.Xml
  DNXmlWriter = interface; // type: System.Xml.XmlWriter, namespace: System.Xml
  DNXmlTextWriter = interface; // type: System.Xml.XmlTextWriter, namespace: System.Xml
  DNXmlQueryOutput = interface; // type: System.Xml.Xsl.Runtime.XmlQueryOutput, namespace: System.Xml.Xsl.Runtime
  DNXmlWriterSettings = interface; // type: System.Xml.XmlWriterSettings, namespace: System.Xml
  DNXPathDocument = interface; // type: System.Xml.XPath.XPathDocument, namespace: System.Xml.XPath
  DNXPathExpression = interface; // type: System.Xml.XPath.XPathExpression, namespace: System.Xml.XPath
  DNXPathItem = interface; // type: System.Xml.XPath.XPathItem, namespace: System.Xml.XPath
  DNXmlAtomicValue = interface; // type: System.Xml.Schema.XmlAtomicValue, namespace: System.Xml.Schema
  DNXPathNavigator = interface; // type: System.Xml.XPath.XPathNavigator, namespace: System.Xml.XPath
  DNXPathNodeIterator = interface; // type: System.Xml.XPath.XPathNodeIterator, namespace: System.Xml.XPath
  DNXmlCollation = interface; // type: System.Xml.Xsl.Runtime.XmlCollation, namespace: System.Xml.Xsl.Runtime
  DNXmlILIndex = interface; // type: System.Xml.Xsl.Runtime.XmlILIndex, namespace: System.Xml.Xsl.Runtime
  DNXmlILStorageConverter = interface; // type: System.Xml.Xsl.Runtime.XmlILStorageConverter, namespace: System.Xml.Xsl.Runtime
  DNXmlNavigatorFilter = interface; // type: System.Xml.Xsl.Runtime.XmlNavigatorFilter, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryContext = interface; // type: System.Xml.Xsl.Runtime.XmlQueryContext, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryRuntime = interface; // type: System.Xml.Xsl.Runtime.XmlQueryRuntime, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryItemSequence = interface; // type: System.Xml.Xsl.Runtime.XmlQueryItemSequence, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryNodeSequence = interface; // type: System.Xml.Xsl.Runtime.XmlQueryNodeSequence, namespace: System.Xml.Xsl.Runtime
  DNXmlQuerySequence<T> = interface; // type: System.Xml.Xsl.Runtime.XmlQuerySequence`1, namespace: System.Xml.Xsl.Runtime
  DNXsltConvert = interface; // type: System.Xml.Xsl.Runtime.XsltConvert, namespace: System.Xml.Xsl.Runtime
  DNXsltFunctions = interface; // type: System.Xml.Xsl.Runtime.XsltFunctions, namespace: System.Xml.Xsl.Runtime
  DNXsltLibrary = interface; // type: System.Xml.Xsl.Runtime.XsltLibrary, namespace: System.Xml.Xsl.Runtime
  DNXslCompiledTransform = interface; // type: System.Xml.Xsl.XslCompiledTransform, namespace: System.Xml.Xsl
  DNXsltArgumentList = interface; // type: System.Xml.Xsl.XsltArgumentList, namespace: System.Xml.Xsl
  DNXslTransform = interface; // type: System.Xml.Xsl.XslTransform, namespace: System.Xml.Xsl
  DNXsltSettings = interface; // type: System.Xml.Xsl.XsltSettings, namespace: System.Xml.Xsl

{ delegates }

  [DNTypeName('System.Xml.Schema.ValidationEventHandler')]
  DNValidationEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNValidationEventArgs) of object;

  [DNTypeName('System.Xml.Schema.XmlValueGetter')]
  DNXmlValueGetter = function: DDNC.System.Private.CoreLib.DNObject of object;

  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventHandler')]
  DNUnreferencedObjectEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNUnreferencedObjectEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlAttributeEventHandler')]
  DNXmlAttributeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlAttributeEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlElementEventHandler')]
  DNXmlElementEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlElementEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlNodeEventHandler')]
  DNXmlNodeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlNodeEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationCollectionFixupCallback')]
  DNXmlSerializationCollectionFixupCallback = procedure(collection: DDNC.System.Private.CoreLib.DNObject; collectionItems: DDNC.System.Private.CoreLib.DNObject) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationFixupCallback')]
  DNXmlSerializationFixupCallback = procedure(fixup: DDNC.System.Private.CoreLib.DNObject) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationReadCallback')]
  DNXmlSerializationReadCallback = function: DDNC.System.Private.CoreLib.DNObject of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationWriteCallback')]
  DNXmlSerializationWriteCallback = procedure(o: DDNC.System.Private.CoreLib.DNObject) of object;

  [DNTypeName('System.Xml.XmlNodeChangedEventHandler')]
  DNXmlNodeChangedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlNodeChangedEventArgs) of object;

  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventHandler')]
  DNXsltMessageEncounteredEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXsltMessageEncounteredEventArgs) of object;




{ objects }

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IApplicationResourceStreamResolver')]
  DNIApplicationResourceStreamResolver = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3E390847-46B4-3E7B-ABE8-6BABB33B8E1B}']
  { methods } 

    function GetApplicationResourceStream(relativeUri: DDNC.System.Private.Uri.DNUri): DDNC.System.Private.CoreLib.DNStream;

  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IHasXmlNode')]
  DNIHasXmlNode = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{54637763-C9DB-3D10-BEA0-E110003DDE65}']
  { methods } 

    function GetNode: DNXmlNode;

  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IXmlLineInfo')]
  DNIXmlLineInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{42FC7998-4F03-37C8-BEAA-3C23528E47CB}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function HasLineInfo: Boolean;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IXmlNamespaceResolver')]
  DNIXmlNamespaceResolver = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{963A8E22-D935-3065-ACF5-220A8350C64F}']
  { methods } 

    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceName: string): string;

  end;

  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.IXmlSchemaInfo')]
  DNIXmlSchemaInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B877D1C0-5915-310A-8B75-8937F127300C}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    function get_IsDefault: Boolean;
    function get_IsNil: Boolean;
    function get_MemberType: DNXmlSchemaSimpleType;
    function get_SchemaType: DNXmlSchemaType;
    function get_SchemaElement: DNXmlSchemaElement;
    function get_SchemaAttribute: DNXmlSchemaAttribute;

  { propertys } 

    property Validity: DNXmlSchemaValidity read get_Validity;
    property IsDefault: Boolean read get_IsDefault;
    property IsNil: Boolean read get_IsNil;
    property MemberType: DNXmlSchemaSimpleType read get_MemberType;
    property SchemaType: DNXmlSchemaType read get_SchemaType;
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement;
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.IXmlSerializable')]
  DNIXmlSerializable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{45471A9D-DC65-3A9F-8C82-7539D6BE5419}']
  { methods } 

    function GetSchema: DNXmlSchema;
    procedure ReadXml(reader: DNXmlReader);
    procedure WriteXml(writer: DNXmlWriter);

  end;

  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.IXmlTextParser')]
  DNIXmlTextParser = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{769A70FF-3974-369E-A95B-4FA2F28FDE95}']
  { getters & setters } 

    function get_Normalized: Boolean;
    procedure set_Normalized(value: Boolean);
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);

  { propertys } 

    property Normalized: Boolean read get_Normalized write set_Normalized;
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
  end;

  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.IXPathNavigable')]
  DNIXPathNavigable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{075B8C9F-B06E-3269-BEB1-8CCBF38D96FA}']
  { methods } 

    function CreateNavigator: DNXPathNavigator;

  end;

  //-------------namespace: System.Xml.Xsl----------------
  [DNTypeName('System.Xml.Xsl.IXsltContextFunction')]
  DNIXsltContextFunction = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{BC0FA391-C9DD-30BC-83AD-5CADCD9C03D3}']
  { getters & setters } 

    function get_Minargs: Int32;
    function get_Maxargs: Int32;
    function get_ReturnType: DNXPathResultType;
    function get_ArgTypes: TArray<DNXPathResultType>;

  { methods } 

    function Invoke(xsltContext: DNXsltContext; args: TArray<DDNC.System.Private.CoreLib.DNObject>; docContext: DNXPathNavigator): DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property Minargs: Int32 read get_Minargs;
    property Maxargs: Int32 read get_Maxargs;
    property ReturnType: DNXPathResultType read get_ReturnType;
    property ArgTypes: TArray<DNXPathResultType> read get_ArgTypes;
  end;

  //-------------namespace: System.Xml.Xsl----------------
  [DNTypeName('System.Xml.Xsl.IXsltContextVariable')]
  DNIXsltContextVariable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B6D7D55A-2E94-3C3B-911E-6AF424E51A0C}']
  { getters & setters } 

    function get_IsLocal: Boolean;
    function get_IsParam: Boolean;
    function get_VariableType: DNXPathResultType;

  { methods } 

    function Evaluate(xsltContext: DNXsltContext): DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property IsLocal: Boolean read get_IsLocal;
    property IsParam: Boolean read get_IsParam;
    property VariableType: DNXPathResultType read get_VariableType;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{ABD4C89A-3F3E-583E-86CF-98ED098496E9}']
  { constructors } 

    {class} function init: DNSoapAttributeAttribute; overload;
    {class} function init(attributeName: string): DNSoapAttributeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributeAttribute')]
  DNSoapAttributeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{838200F3-CDF7-30F3-B935-47C83A9FE119}']
  { getters & setters } 

    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AttributeName: string read get_AttributeName write set_AttributeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapAttributeAttribute = class(TDNGenericImport<DNSoapAttributeAttributeClass, DNSoapAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapElementAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{58E5578F-37B8-5A2D-A21E-5657A819E4E5}']
  { constructors } 

    {class} function init: DNSoapElementAttribute; overload;
    {class} function init(elementName: string): DNSoapElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapElementAttribute')]
  DNSoapElementAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{14AC5CB9-4646-3CBD-B1A1-33DCDDA83BCA}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapElementAttribute = class(TDNGenericImport<DNSoapElementAttributeClass, DNSoapElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapEnumAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{E686F8E4-7BF1-5A3E-B498-81FEFFF0217A}']
  { constructors } 

    {class} function init: DNSoapEnumAttribute; overload;
    {class} function init(name: string): DNSoapEnumAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapEnumAttribute')]
  DNSoapEnumAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{E19E42F8-E22F-37B9-8D19-D1594088BCA1}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapEnumAttribute = class(TDNGenericImport<DNSoapEnumAttributeClass, DNSoapEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIgnoreAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{CFA4A6FB-54C4-5AB8-A992-FF0DF38E8932}']
  { constructors } 

    {class} function init: DNSoapIgnoreAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.SoapIgnoreAttribute')]
  DNSoapIgnoreAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{91D09378-E9A0-33D0-A959-1B31DC5A3349}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapIgnoreAttribute = class(TDNGenericImport<DNSoapIgnoreAttributeClass, DNSoapIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIncludeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F5A7A908-2707-52E4-8DBF-771C5BDCE24E}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNSoapIncludeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.SoapIncludeAttribute')]
  DNSoapIncludeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{3BD812C7-7ECC-3C6E-B1A3-0F40FB7A30FE}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapIncludeAttribute = class(TDNGenericImport<DNSoapIncludeAttributeClass, DNSoapIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FD9596F9-CFD5-57D7-9733-80BC3D63D554}']
  { constructors } 

    {class} function init: DNSoapTypeAttribute; overload;
    {class} function init(typeName: string): DNSoapTypeAttribute; overload;
    {class} function init(typeName: string; ns: string): DNSoapTypeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapTypeAttribute')]
  DNSoapTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{201B9923-DAC5-3B19-A96F-FCFAA7099020}']
  { getters & setters } 

    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    property TypeName: string read get_TypeName write set_TypeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapTypeAttribute = class(TDNGenericImport<DNSoapTypeAttributeClass, DNSoapTypeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyAttributeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{5C6A345B-0355-5538-96FA-C1B428C8DD36}']
  { constructors } 

    {class} function init: DNXmlAnyAttributeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyAttributeAttribute')]
  DNXmlAnyAttributeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F40537B8-1683-358E-8FD3-C6325C22C52A}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlAnyAttributeAttribute = class(TDNGenericImport<DNXmlAnyAttributeAttributeClass, DNXmlAnyAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{087D9AF6-2BEA-5BB0-BE07-52F2CCED0702}']
  { constructors } 

    {class} function init: DNXmlAnyElementAttribute; overload;
    {class} function init(name: string): DNXmlAnyElementAttribute; overload;
    {class} function init(name: string; ns: string): DNXmlAnyElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttribute')]
  DNXmlAnyElementAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{CFF20216-F118-3E89-B52E-D3452AA500EE}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlAnyElementAttribute = class(TDNGenericImport<DNXmlAnyElementAttributeClass, DNXmlAnyElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{565C18C9-17E1-5E9A-8F55-C2839E17D3B9}']
  { constructors } 

    {class} function init: DNXmlArrayAttribute; overload;
    {class} function init(elementName: string): DNXmlArrayAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayAttribute')]
  DNXmlArrayAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{BF13CB29-935B-3B87-BEFA-00D0F53DEBA5}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlArrayAttribute = class(TDNGenericImport<DNXmlArrayAttributeClass, DNXmlArrayAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{EC497CDA-8910-56C1-A2A1-7681FC48E0EE}']
  { constructors } 

    {class} function init: DNXmlArrayItemAttribute; overload;
    {class} function init(elementName: string): DNXmlArrayItemAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlArrayItemAttribute; overload;
    {class} function init(elementName: string; &type: DDNC.System.Private.CoreLib.DNType): DNXmlArrayItemAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttribute')]
  DNXmlArrayItemAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{8504628F-3273-3445-A051-E253018D1F16}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_NestingLevel: Int32;
    procedure set_NestingLevel(value: Int32);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property NestingLevel: Int32 read get_NestingLevel write set_NestingLevel;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlArrayItemAttribute = class(TDNGenericImport<DNXmlArrayItemAttributeClass, DNXmlArrayItemAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{88969DB7-0395-5954-BF9A-50D8330837A9}']
  { constructors } 

    {class} function init: DNXmlAttributeAttribute; overload;
    {class} function init(attributeName: string): DNXmlAttributeAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlAttributeAttribute; overload;
    {class} function init(attributeName: string; &type: DDNC.System.Private.CoreLib.DNType): DNXmlAttributeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeAttribute')]
  DNXmlAttributeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6D62206C-4E9E-3DB9-BA76-47C50CF5F01B}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property AttributeName: string read get_AttributeName write set_AttributeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlAttributeAttribute = class(TDNGenericImport<DNXmlAttributeAttributeClass, DNXmlAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlChoiceIdentifierAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{97F069E4-5576-5789-8503-BCA02851830D}']
  { constructors } 

    {class} function init: DNXmlChoiceIdentifierAttribute; overload;
    {class} function init(name: string): DNXmlChoiceIdentifierAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlChoiceIdentifierAttribute')]
  DNXmlChoiceIdentifierAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{45AA53C8-62FB-3F9A-8160-5C9527679300}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName write set_MemberName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlChoiceIdentifierAttribute = class(TDNGenericImport<DNXmlChoiceIdentifierAttributeClass, DNXmlChoiceIdentifierAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{1CB43B23-1D6A-58DF-BB3C-8C1F00087879}']
  { constructors } 

    {class} function init: DNXmlElementAttribute; overload;
    {class} function init(elementName: string): DNXmlElementAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlElementAttribute; overload;
    {class} function init(elementName: string; &type: DDNC.System.Private.CoreLib.DNType): DNXmlElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlElementAttribute')]
  DNXmlElementAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6C51254C-0037-3837-9F2C-8B2DE7FEBE9B}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlElementAttribute = class(TDNGenericImport<DNXmlElementAttributeClass, DNXmlElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlEnumAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7F010462-AC59-5108-8C63-7CA4364EAD01}']
  { constructors } 

    {class} function init: DNXmlEnumAttribute; overload;
    {class} function init(name: string): DNXmlEnumAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlEnumAttribute')]
  DNXmlEnumAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7A148B76-EFED-364F-A135-B02BDC97A9D0}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlEnumAttribute = class(TDNGenericImport<DNXmlEnumAttributeClass, DNXmlEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIgnoreAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{62D5DD23-C819-5A06-970B-4380F81CC9D2}']
  { constructors } 

    {class} function init: DNXmlIgnoreAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlIgnoreAttribute')]
  DNXmlIgnoreAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{0E0B4111-7CC1-302C-ABAD-E9F30275C259}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlIgnoreAttribute = class(TDNGenericImport<DNXmlIgnoreAttributeClass, DNXmlIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIncludeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{827ECC79-5416-530C-B17C-783409971C23}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlIncludeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlIncludeAttribute')]
  DNXmlIncludeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{8833A788-F8A3-3ED0-B3B3-CE8B691D0042}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlIncludeAttribute = class(TDNGenericImport<DNXmlIncludeAttributeClass, DNXmlIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNamespaceDeclarationsAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{E23941B3-1890-5303-BAF5-B1A404CE6B04}']
  { constructors } 

    {class} function init: DNXmlNamespaceDeclarationsAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlNamespaceDeclarationsAttribute')]
  DNXmlNamespaceDeclarationsAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{456B8600-52B2-3535-BDD6-C2D99274B126}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlNamespaceDeclarationsAttribute = class(TDNGenericImport<DNXmlNamespaceDeclarationsAttributeClass, DNXmlNamespaceDeclarationsAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlRootAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{21E451E9-A8E1-5893-8B53-ED2321BAB70C}']
  { constructors } 

    {class} function init: DNXmlRootAttribute; overload;
    {class} function init(elementName: string): DNXmlRootAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlRootAttribute')]
  DNXmlRootAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{72B308CE-6664-34E0-8094-88D915F44C12}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlRootAttribute = class(TDNGenericImport<DNXmlRootAttributeClass, DNXmlRootAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaProviderAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{A40A0122-BDD8-57E4-BB0C-E5C7CE44E9BE}']
  { constructors } 

    {class} function init(methodName: string): DNXmlSchemaProviderAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaProviderAttribute')]
  DNXmlSchemaProviderAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{DB51E801-DEB1-376C-995D-5C6919BCB295}']
  { getters & setters } 

    function get_MethodName: string;
    function get_IsAny: Boolean;
    procedure set_IsAny(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MethodName: string read get_MethodName;
    property IsAny: Boolean read get_IsAny write set_IsAny;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlSchemaProviderAttribute = class(TDNGenericImport<DNXmlSchemaProviderAttributeClass, DNXmlSchemaProviderAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerAssemblyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{28CF6BDB-3A83-5ED7-96E1-E4D1E1977A1F}']
  { constructors } 

    {class} function init: DNXmlSerializerAssemblyAttribute; overload;
    {class} function init(assemblyName: string): DNXmlSerializerAssemblyAttribute; overload;
    {class} function init(assemblyName: string; codeBase: string): DNXmlSerializerAssemblyAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerAssemblyAttribute')]
  DNXmlSerializerAssemblyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7FAB9C2D-11AF-3A0C-AA49-B43A5AEC4447}']
  { getters & setters } 

    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property CodeBase: string read get_CodeBase write set_CodeBase;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerAssemblyAttribute = class(TDNGenericImport<DNXmlSerializerAssemblyAttributeClass, DNXmlSerializerAssemblyAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerVersionAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{34BACD2D-437B-5B50-B0CC-7B065CF19E82}']
  { constructors } 

    {class} function init: DNXmlSerializerVersionAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializerVersionAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerVersionAttribute')]
  DNXmlSerializerVersionAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{2D94C0C3-B747-3656-A1AA-2C9B7608BE4A}']
  { getters & setters } 

    function get_ParentAssemblyId: string;
    procedure set_ParentAssemblyId(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ParentAssemblyId: string read get_ParentAssemblyId write set_ParentAssemblyId;
    property Version: string read get_Version write set_Version;
    property Namespace: string read get_Namespace write set_Namespace;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerVersionAttribute = class(TDNGenericImport<DNXmlSerializerVersionAttributeClass, DNXmlSerializerVersionAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTextAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{58EDA62E-0320-5091-A48D-A0C150B0581B}']
  { constructors } 

    {class} function init: DNXmlTextAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlTextAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlTextAttribute')]
  DNXmlTextAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7AD9843B-A5C7-32E7-A335-B9F6EDC82B82}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlTextAttribute = class(TDNGenericImport<DNXmlTextAttributeClass, DNXmlTextAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FE94C851-361B-5B08-9FF2-1B55D425E41B}']
  { constructors } 

    {class} function init: DNXmlTypeAttribute; overload;
    {class} function init(typeName: string): DNXmlTypeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlTypeAttribute')]
  DNXmlTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{0BA1D159-6A85-3595-863D-3334BBF784A0}']
  { getters & setters } 

    function get_AnonymousType: Boolean;
    procedure set_AnonymousType(value: Boolean);
    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AnonymousType: Boolean read get_AnonymousType write set_AnonymousType;
    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    property TypeName: string read get_TypeName write set_TypeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlTypeAttribute = class(TDNGenericImport<DNXmlTypeAttributeClass, DNXmlTypeAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectCollectionClass = interface(DNObjectClass)
  ['{019ED4D9-55FC-5EFE-9593-87F2AD1D9A78}']
  { constructors } 

    {class} function init: DNXmlSchemaObjectCollection; overload;
    {class} function init(parent: DNXmlSchemaObject): DNXmlSchemaObjectCollection; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectCollection')]
  DNXmlSchemaObjectCollection = interface(DNObject)
  ['{605240CA-AA2A-3E9A-BB26-2AC81974925C}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchemaObject;
    procedure set_Item(index: Int32; value: DNXmlSchemaObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNXmlSchemaObjectEnumerator;
    function Add(item: DNXmlSchemaObject): Int32;
    procedure Insert(index: Int32; item: DNXmlSchemaObject);
    function IndexOf(item: DNXmlSchemaObject): Int32;
    function &Contains(item: DNXmlSchemaObject): Boolean;
    procedure Remove(item: DNXmlSchemaObject);
    procedure CopyTo(&array: TArray<DNXmlSchemaObject>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlSchemaObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemaObjectCollection = class(TDNGenericImport<DNXmlSchemaObjectCollectionClass, DNXmlSchemaObjectCollection>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributesClass = interface(DNObjectClass)
  ['{9101F94A-AA3E-5970-8D35-8622A0D5D337}']
  { constructors } 

    {class} function init: DNXmlAnyElementAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttributes')]
  DNXmlAnyElementAttributes = interface(DNObject)
  ['{E4D2AD36-52BE-3680-863E-77912CEBE00E}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlAnyElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlAnyElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlAnyElementAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlAnyElementAttribute);
    function IndexOf(attribute: DNXmlAnyElementAttribute): Int32;
    function &Contains(attribute: DNXmlAnyElementAttribute): Boolean;
    procedure Remove(attribute: DNXmlAnyElementAttribute);
    procedure CopyTo(&array: TArray<DNXmlAnyElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlAnyElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAnyElementAttributes = class(TDNGenericImport<DNXmlAnyElementAttributesClass, DNXmlAnyElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributesClass = interface(DNObjectClass)
  ['{6538E8D7-9310-5346-BF3B-FC0EDC7FC87D}']
  { constructors } 

    {class} function init: DNXmlArrayItemAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttributes')]
  DNXmlArrayItemAttributes = interface(DNObject)
  ['{6AD27507-C3A6-3346-A979-5367FE881FAC}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlArrayItemAttribute;
    procedure set_Item(index: Int32; value: DNXmlArrayItemAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlArrayItemAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlArrayItemAttribute);
    function IndexOf(attribute: DNXmlArrayItemAttribute): Int32;
    function &Contains(attribute: DNXmlArrayItemAttribute): Boolean;
    procedure Remove(attribute: DNXmlArrayItemAttribute);
    procedure CopyTo(&array: TArray<DNXmlArrayItemAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlArrayItemAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlArrayItemAttributes = class(TDNGenericImport<DNXmlArrayItemAttributesClass, DNXmlArrayItemAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributesClass = interface(DNObjectClass)
  ['{80D95E39-9DA2-5848-A71F-820E98CE7B7C}']
  { constructors } 

    {class} function init: DNXmlElementAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlElementAttributes')]
  DNXmlElementAttributes = interface(DNObject)
  ['{A5AD0E2A-D8F6-36FC-A81F-D6E650D3F6D9}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlElementAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlElementAttribute);
    function IndexOf(attribute: DNXmlElementAttribute): Int32;
    function &Contains(attribute: DNXmlElementAttribute): Boolean;
    procedure Remove(attribute: DNXmlElementAttribute);
    procedure CopyTo(&array: TArray<DNXmlElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlElementAttributes = class(TDNGenericImport<DNXmlElementAttributesClass, DNXmlElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemasClass = interface(DNObjectClass)
  ['{A247F238-2C97-5811-83C5-8A0FED53EF22}']
  { constructors } 

    {class} function init: DNXmlSchemas;

  { static methods } 

    {class} function IsDataSet(schema: DNXmlSchema): Boolean;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemas')]
  DNXmlSchemas = interface(DNObject)
  ['{4A817397-3774-37E2-975D-B2C44B519E3D}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchema; overload;
    procedure set_Item(index: Int32; value: DNXmlSchema);
    function get_Item(ns: string): DNXmlSchema; overload;
    function get_IsCompiled: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetSchemas(ns: string): DDNC.System.Private.CoreLib.DNIList;
    function Add(schema: DNXmlSchema): Int32; overload;
    function Add(schema: DNXmlSchema; baseUri: DDNC.System.Private.Uri.DNUri): Int32; overload;
    procedure Add(schemas: DNXmlSchemas); overload;
    procedure AddReference(schema: DNXmlSchema);
    procedure Insert(index: Int32; schema: DNXmlSchema);
    function IndexOf(schema: DNXmlSchema): Int32;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    function &Contains(targetNamespace: string): Boolean; overload;
    procedure Remove(schema: DNXmlSchema);
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    function Find(name: DNXmlQualifiedName; &type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    procedure Compile(handler: DNValidationEventHandler; fullCompile: Boolean);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlSchema read get_Item write set_Item; default;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
    property IsCompiled: Boolean read get_IsCompiled;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemas = class(TDNGenericImport<DNXmlSchemasClass, DNXmlSchemas>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNValidationEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{32D6A85F-F50C-59CD-8833-590BA50358A6}']
  end;

  [DNTypeName('System.Xml.Schema.ValidationEventArgs')]
  DNValidationEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{BC56BBDC-9579-32D0-ABBC-B63B81BE064E}']
  { getters & setters } 

    function get_Severity: DNXmlSeverityType;
    function get_Exception: DNXmlSchemaException;
    function get_Message: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Severity: DNXmlSeverityType read get_Severity;
    property Exception: DNXmlSchemaException read get_Exception;
    property Message: string read get_Message;
  end;

  TDNValidationEventArgs = class(TDNGenericImport<DNValidationEventArgsClass, DNValidationEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNUnreferencedObjectEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{F1342686-491B-55D8-B2F4-3DBA47ACEC14}']
  { constructors } 

    {class} function init(o: DDNC.System.Private.CoreLib.DNObject; id: string): DNUnreferencedObjectEventArgs;

  end;

  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventArgs')]
  DNUnreferencedObjectEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{10D078D8-49ED-3401-B411-B3444E376FA0}']
  { getters & setters } 

    function get_UnreferencedObject: DDNC.System.Private.CoreLib.DNObject;
    function get_UnreferencedId: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UnreferencedObject: DDNC.System.Private.CoreLib.DNObject read get_UnreferencedObject;
    property UnreferencedId: string read get_UnreferencedId;
  end;

  TDNUnreferencedObjectEventArgs = class(TDNGenericImport<DNUnreferencedObjectEventArgsClass, DNUnreferencedObjectEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{72D77745-D646-5485-AB8F-52A0625CC3D2}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeEventArgs')]
  DNXmlAttributeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{1DD0DFD6-361F-3E01-BE11-828071CB37FC}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject;
    function get_Attr: DNXmlAttribute;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedAttributes: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject read get_ObjectBeingDeserialized;
    property Attr: DNXmlAttribute read get_Attr;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property ExpectedAttributes: string read get_ExpectedAttributes;
  end;

  TDNXmlAttributeEventArgs = class(TDNGenericImport<DNXmlAttributeEventArgsClass, DNXmlAttributeEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{AA5CB357-76A4-5360-A316-0D4AD264BA5E}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlElementEventArgs')]
  DNXmlElementEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{C1289F0E-7F32-3A4A-8C6C-A518190EDA73}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject;
    function get_Element: DNXmlElement;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedElements: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject read get_ObjectBeingDeserialized;
    property Element: DNXmlElement read get_Element;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property ExpectedElements: string read get_ExpectedElements;
  end;

  TDNXmlElementEventArgs = class(TDNGenericImport<DNXmlElementEventArgsClass, DNXmlElementEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNodeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{7A657359-192D-5951-B46F-65E6B25B23DA}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlNodeEventArgs')]
  DNXmlNodeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{D937A30C-910E-3CFF-BDB3-C65227203756}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Text: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject read get_ObjectBeingDeserialized;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Text: string read get_Text;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXmlNodeEventArgs = class(TDNGenericImport<DNXmlNodeEventArgsClass, DNXmlNodeEventArgs>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeChangedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{9AAD9208-0A26-56AE-A43F-FEF34A11A252}']
  { constructors } 

    {class} function init(node: DNXmlNode; oldParent: DNXmlNode; newParent: DNXmlNode; oldValue: string; newValue: string; action: DNXmlNodeChangedAction): DNXmlNodeChangedEventArgs;

  end;

  [DNTypeName('System.Xml.XmlNodeChangedEventArgs')]
  DNXmlNodeChangedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{07B9692F-D233-39FF-BF2B-29897BBABB3F}']
  { getters & setters } 

    function get_Action: DNXmlNodeChangedAction;
    function get_Node: DNXmlNode;
    function get_OldParent: DNXmlNode;
    function get_NewParent: DNXmlNode;
    function get_OldValue: string;
    function get_NewValue: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Action: DNXmlNodeChangedAction read get_Action;
    property Node: DNXmlNode read get_Node;
    property OldParent: DNXmlNode read get_OldParent;
    property NewParent: DNXmlNode read get_NewParent;
    property OldValue: string read get_OldValue;
    property NewValue: string read get_NewValue;
  end;

  TDNXmlNodeChangedEventArgs = class(TDNGenericImport<DNXmlNodeChangedEventArgsClass, DNXmlNodeChangedEventArgs>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltMessageEncounteredEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{7A68F072-1BB4-5EA2-A7BE-0A708E72D592}']
  end;

  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventArgs')]
  DNXsltMessageEncounteredEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{2DA0CC3B-D3F7-3E53-BE82-A6D79A8D1027}']
  { getters & setters } 

    function get_Message: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
  end;

  TDNXsltMessageEncounteredEventArgs = class(TDNGenericImport<DNXsltMessageEncounteredEventArgsClass, DNXsltMessageEncounteredEventArgs>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{B421D104-C85C-5CA1-97A3-02EAADAA2AA1}']
  { constructors } 

    {class} function init: DNXmlSchemaException; overload;
    {class} function init(message: string): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaException')]
  DNXmlSchemaException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{45E52FFF-F562-39CC-82A7-DA11CD4561D3}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlSchemaException = class(TDNGenericImport<DNXmlSchemaExceptionClass, DNXmlSchemaException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{44763B0B-2545-5AC3-BF29-7CE71122A488}']
  { constructors } 

    {class} function init: DNXmlSchemaInferenceException; overload;
    {class} function init(message: string): DNXmlSchemaInferenceException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlSchemaInferenceException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaInferenceException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInferenceException')]
  DNXmlSchemaInferenceException = interface(DNXmlSchemaException)
  ['{76494845-7319-325F-9ED0-64A469D8F2B4}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlSchemaInferenceException = class(TDNGenericImport<DNXmlSchemaInferenceExceptionClass, DNXmlSchemaInferenceException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidationExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{40D0D408-AF67-557E-BB29-A4FC1B467B44}']
  { constructors } 

    {class} function init: DNXmlSchemaValidationException; overload;
    {class} function init(message: string): DNXmlSchemaValidationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlSchemaValidationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaValidationException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaValidationException')]
  DNXmlSchemaValidationException = interface(DNXmlSchemaException)
  ['{B9546FAA-6C05-3D5F-899C-1531E8F4BA46}']
  { getters & setters } 

    function get_SourceObject: DDNC.System.Private.CoreLib.DNObject;
    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceObject: DDNC.System.Private.CoreLib.DNObject read get_SourceObject;
    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlSchemaValidationException = class(TDNGenericImport<DNXmlSchemaValidationExceptionClass, DNXmlSchemaValidationException>) end;

  //-------------namespace: System.Xml----------------
  DNXmlExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{3E303F4C-ABEF-5BC1-A15F-5341B77D065E}']
  { constructors } 

    {class} function init: DNXmlException; overload;
    {class} function init(message: string): DNXmlException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlException; overload;

  end;

  [DNTypeName('System.Xml.XmlException')]
  DNXmlException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{A1ED8C54-C44B-3709-94EC-9EE4AF109609}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceUri: string;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceUri: string read get_SourceUri;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlException = class(TDNGenericImport<DNXmlExceptionClass, DNXmlException>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{655579F8-F002-5F34-AA59-C3A9041F5192}']
  { constructors } 

    {class} function init: DNXPathException; overload;
    {class} function init(message: string): DNXPathException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXPathException; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathException')]
  DNXPathException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{2B89D351-2487-3824-B1A0-212F682C8908}']
  { getters & setters } 

    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXPathException = class(TDNGenericImport<DNXPathExceptionClass, DNXPathException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{E2962C42-3797-5F8C-A4DE-7E7AFAB3DDC1}']
  { constructors } 

    {class} function init: DNXsltException; overload;
    {class} function init(message: string): DNXsltException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXsltException; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XsltException')]
  DNXsltException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{DB14C73C-2BED-35BD-9A4B-B133E8684641}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXsltException = class(TDNGenericImport<DNXsltExceptionClass, DNXsltException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltCompileExceptionClass = interface(DNXsltExceptionClass)
  ['{B2BAD08C-1114-5D3A-AC6D-A7484FAF53AE}']
  { constructors } 

    {class} function init: DNXsltCompileException; overload;
    {class} function init(message: string): DNXsltCompileException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXsltCompileException; overload;
    {class} function init(inner: DDNC.System.Private.CoreLib.DNException; sourceUri: string; lineNumber: Int32; linePosition: Int32): DNXsltCompileException; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XsltCompileException')]
  DNXsltCompileException = interface(DNXsltException)
  ['{5DF5C5D0-F07D-3E36-A511-7E2FB72E7FB9}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXsltCompileException = class(TDNGenericImport<DNXsltCompileExceptionClass, DNXsltCompileException>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlDeserializationEventsClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{206F2763-B3D2-5C34-8481-12C2859BBF4D}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlDeserializationEvents')]
  DNXmlDeserializationEvents = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3D928C76-5391-36DC-AA59-B4B123026B71}']
  { getters & setters } 

    function get_OnUnknownNode: DNXmlNodeEventHandler;
    procedure set_OnUnknownNode(value: DNXmlNodeEventHandler);
    function get_OnUnknownAttribute: DNXmlAttributeEventHandler;
    procedure set_OnUnknownAttribute(value: DNXmlAttributeEventHandler);
    function get_OnUnknownElement: DNXmlElementEventHandler;
    procedure set_OnUnknownElement(value: DNXmlElementEventHandler);
    function get_OnUnreferencedObject: DNUnreferencedObjectEventHandler;
    procedure set_OnUnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property OnUnknownNode: DNXmlNodeEventHandler read get_OnUnknownNode write set_OnUnknownNode;
    property OnUnknownAttribute: DNXmlAttributeEventHandler read get_OnUnknownAttribute write set_OnUnknownAttribute;
    property OnUnknownElement: DNXmlElementEventHandler read get_OnUnknownElement write set_OnUnknownElement;
    property OnUnreferencedObject: DNUnreferencedObjectEventHandler read get_OnUnreferencedObject write set_OnUnreferencedObject;
  end;

  TDNXmlDeserializationEvents = class(TDNGenericImport<DNXmlDeserializationEventsClass, DNXmlDeserializationEvents>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAncestorDocOrderIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{33CBBBFD-6D3E-5A1D-9EFB-9EB6D3FF784E}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AncestorDocOrderIterator')]
  DNAncestorDocOrderIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B14EF72A-4783-3DFE-80AA-3B012D18AA8D}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAncestorDocOrderIterator = class(TDNGenericImport<DNAncestorDocOrderIteratorClass, DNAncestorDocOrderIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAncestorIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{BDF0E9C6-DE57-5B40-BDDB-6F48BFCE2ABB}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AncestorIterator')]
  DNAncestorIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{297712F5-6FF1-3C69-B161-25C08851B7D3}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAncestorIterator = class(TDNGenericImport<DNAncestorIteratorClass, DNAncestorIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAttributeContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{6DFDA557-4914-5D93-908E-BB3D9B1B33D2}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AttributeContentIterator')]
  DNAttributeContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2002FADB-145E-36DC-B082-AA9804C5285B}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAttributeContentIterator = class(TDNGenericImport<DNAttributeContentIteratorClass, DNAttributeContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAttributeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{EE7FA267-71AF-5AC2-BB15-0C246B7807BB}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AttributeIterator')]
  DNAttributeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{982F5D31-BAAF-3908-AD52-D63643B2E36E}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAttributeIterator = class(TDNGenericImport<DNAttributeIteratorClass, DNAttributeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4266DE95-ABBF-5174-8206-7275FCF7D124}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ContentIterator')]
  DNContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A6AE8107-622A-3AEF-AE1D-0DDAAEF1B777}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNContentIterator = class(TDNGenericImport<DNContentIteratorClass, DNContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNContentMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1BC191C5-6D5C-5E80-9916-2F37CB42CE8D}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ContentMergeIterator')]
  DNContentMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{6A57241E-BB50-3559-832B-86404C5C4796}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNContentMergeIterator = class(TDNGenericImport<DNContentMergeIteratorClass, DNContentMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDecimalAggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FADDF448-4C43-59C2-8949-AFF5178FD3A3}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DecimalAggregator')]
  DNDecimalAggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1037387C-5AAE-3933-A7F5-B65BA04207DD}']
  { getters & setters } 

    function get_SumResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_AverageResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_MinimumResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_MaximumResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure Average(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure Minimum(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure Maximum(value: DDNC.System.Private.CoreLib.DNDecimal);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: DDNC.System.Private.CoreLib.DNDecimal read get_SumResult;
    property AverageResult: DDNC.System.Private.CoreLib.DNDecimal read get_AverageResult;
    property MinimumResult: DDNC.System.Private.CoreLib.DNDecimal read get_MinimumResult;
    property MaximumResult: DDNC.System.Private.CoreLib.DNDecimal read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNDecimalAggregator = class(TDNGenericImport<DNDecimalAggregatorClass, DNDecimalAggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDescendantIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{6544AA37-6616-5552-9009-902DE1ED8BFD}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DescendantIterator')]
  DNDescendantIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2D2354E5-361A-3091-ABD7-1CD4EE09712E}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(input: DNXPathNavigator; filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNDescendantIterator = class(TDNGenericImport<DNDescendantIteratorClass, DNDescendantIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDescendantMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C3FBFA06-1B4B-5013-B245-9326B63D86EE}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DescendantMergeIterator')]
  DNDescendantMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E9802B88-F78D-350C-A634-544179552C10}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNDescendantMergeIterator = class(TDNGenericImport<DNDescendantMergeIteratorClass, DNDescendantMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDifferenceIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{28DF24A8-8F2D-55CC-82DD-75C8006DA495}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DifferenceIterator')]
  DNDifferenceIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AB16579F-F73B-3BC7-B204-EF094D4C3A21}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    function MoveNext(nestedNavigator: DNXPathNavigator): DNSetIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNDifferenceIterator = class(TDNGenericImport<DNDifferenceIteratorClass, DNDifferenceIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDodSequenceMergeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FE494C8C-1F8E-53D7-8B6A-A73021C90B6A}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DodSequenceMerge')]
  DNDodSequenceMerge = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C52087AD-9D49-3F46-BA9E-B755679B0AF8}']
  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    procedure AddSequence(sequence: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>);
    function MergeSequences: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDodSequenceMerge = class(TDNGenericImport<DNDodSequenceMergeClass, DNDodSequenceMerge>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDoubleAggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{3189CAC6-A4FE-521B-B08D-8695F8A6164E}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DoubleAggregator')]
  DNDoubleAggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{ABBECC24-91E4-3778-BB51-EA94942DD977}']
  { getters & setters } 

    function get_SumResult: Double;
    function get_AverageResult: Double;
    function get_MinimumResult: Double;
    function get_MaximumResult: Double;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: Double);
    procedure Average(value: Double);
    procedure Minimum(value: Double);
    procedure Maximum(value: Double);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: Double read get_SumResult;
    property AverageResult: Double read get_AverageResult;
    property MinimumResult: Double read get_MinimumResult;
    property MaximumResult: Double read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNDoubleAggregator = class(TDNGenericImport<DNDoubleAggregatorClass, DNDoubleAggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNElementContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{511461A2-DAC4-545F-BC62-A2FF23CFA34D}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ElementContentIterator')]
  DNElementContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D77DE053-683C-37D5-BF40-BB892D810F93}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; localName: string; ns: string);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNElementContentIterator = class(TDNGenericImport<DNElementContentIteratorClass, DNElementContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNFollowingSiblingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1F3F7BAE-B26C-565F-AD35-F4A55F55656B}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.FollowingSiblingIterator')]
  DNFollowingSiblingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{80D188CD-81DE-325D-A8CE-803E7ED38965}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNFollowingSiblingIterator = class(TDNGenericImport<DNFollowingSiblingIteratorClass, DNFollowingSiblingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNFollowingSiblingMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FF4169CD-7D6F-5FFA-803D-EA878BEA6DE9}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator')]
  DNFollowingSiblingMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7CE69402-B7FA-3344-BE5F-D4A3299EC6EB}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(navigator: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNFollowingSiblingMergeIterator = class(TDNGenericImport<DNFollowingSiblingMergeIteratorClass, DNFollowingSiblingMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNIdIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9E31D80D-23DB-5CCB-A93F-5D6B3B7A661D}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.IdIterator')]
  DNIdIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{981317B6-D4D4-38A4-A31D-4E4421D82D71}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; value: string);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNIdIterator = class(TDNGenericImport<DNIdIteratorClass, DNIdIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNInt32AggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0461DC71-EAB6-5842-A1D0-C063793592AA}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.Int32Aggregator')]
  DNInt32Aggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{85212C4B-5D6C-3BEC-B1EA-C36A6C452BEB}']
  { getters & setters } 

    function get_SumResult: Int32;
    function get_AverageResult: Int32;
    function get_MinimumResult: Int32;
    function get_MaximumResult: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: Int32);
    procedure Average(value: Int32);
    procedure Minimum(value: Int32);
    procedure Maximum(value: Int32);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: Int32 read get_SumResult;
    property AverageResult: Int32 read get_AverageResult;
    property MinimumResult: Int32 read get_MinimumResult;
    property MaximumResult: Int32 read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNInt32Aggregator = class(TDNGenericImport<DNInt32AggregatorClass, DNInt32Aggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNInt64AggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{91865124-347B-5D3F-B3B3-DEF8BDFA2407}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.Int64Aggregator')]
  DNInt64Aggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C164A39A-7B6A-36CF-AAFF-26D10CF390B8}']
  { getters & setters } 

    function get_SumResult: Int64;
    function get_AverageResult: Int64;
    function get_MinimumResult: Int64;
    function get_MaximumResult: Int64;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: Int64);
    procedure Average(value: Int64);
    procedure Minimum(value: Int64);
    procedure Maximum(value: Int64);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: Int64 read get_SumResult;
    property AverageResult: Int64 read get_AverageResult;
    property MinimumResult: Int64 read get_MinimumResult;
    property MaximumResult: Int64 read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNInt64Aggregator = class(TDNGenericImport<DNInt64AggregatorClass, DNInt64Aggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNIntersectIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7C9A625F-7D40-5914-8CDB-D8AD417D7427}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.IntersectIterator')]
  DNIntersectIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{26238806-CFC8-3D75-97F3-44F99675B1C8}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    function MoveNext(nestedNavigator: DNXPathNavigator): DNSetIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNIntersectIterator = class(TDNGenericImport<DNIntersectIteratorClass, DNIntersectIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNNamespaceIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{AEEFCE84-9DBB-5CC4-AC44-4C28441D3880}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.NamespaceIterator')]
  DNNamespaceIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F82A69CD-93B4-3663-B02C-88B3D590B96B}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNNamespaceIterator = class(TDNGenericImport<DNNamespaceIteratorClass, DNNamespaceIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNNodeKindContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{118C0A4E-4DC8-5CB9-ACCD-CB2A6BC75A87}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.NodeKindContentIterator')]
  DNNodeKindContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{DB6D3C22-A937-33F7-9D37-D6994FAC6B1B}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; nodeType: DNXPathNodeType);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNNodeKindContentIterator = class(TDNGenericImport<DNNodeKindContentIteratorClass, DNNodeKindContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNNodeRangeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{6E508ABE-712F-5EC9-BABF-2E1468D9749E}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.NodeRangeIterator')]
  DNNodeRangeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D3DD4DD0-4AD2-3C05-9856-5E10CD563B96}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(start: DNXPathNavigator; filter: DNXmlNavigatorFilter; &end: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNNodeRangeIterator = class(TDNGenericImport<DNNodeRangeIteratorClass, DNNodeRangeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNParentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9A420F4D-6C9C-52FF-81BD-6F2D42618257}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ParentIterator')]
  DNParentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{440292ED-BECF-32F0-990D-36F83012C24A}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNParentIterator = class(TDNGenericImport<DNParentIteratorClass, DNParentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNPrecedingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9553FAC7-F015-5F2F-A3EA-B75663F4A4A6}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.PrecedingIterator')]
  DNPrecedingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E86501A4-6FD7-36F7-9BF8-A8DC61506575}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNPrecedingIterator = class(TDNGenericImport<DNPrecedingIteratorClass, DNPrecedingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNPrecedingSiblingDocOrderIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4B3573E4-6B3D-5081-BBE3-7FCF2FCA1C3C}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator')]
  DNPrecedingSiblingDocOrderIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F51B97F8-8588-3257-B8C9-841B657CA8A0}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNPrecedingSiblingDocOrderIterator = class(TDNGenericImport<DNPrecedingSiblingDocOrderIteratorClass, DNPrecedingSiblingDocOrderIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNPrecedingSiblingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{055CCE89-0ECC-55AD-B453-A2C8BD3C1D32}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.PrecedingSiblingIterator')]
  DNPrecedingSiblingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C91EBEC5-0481-3A71-B9EB-B5B757B5376B}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNPrecedingSiblingIterator = class(TDNGenericImport<DNPrecedingSiblingIteratorClass, DNPrecedingSiblingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNStringConcatClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E60389FE-3BEA-5E00-991B-893FB4E3F5A9}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.StringConcat')]
  DNStringConcat = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BEA0CA52-3D12-3CF4-9DEE-930540E6540C}']
  { getters & setters } 

    function get_Delimiter: string;
    procedure set_Delimiter(value: string);

  { methods } 

    procedure Clear;
    procedure Concat(value: string);
    function GetResult: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Delimiter: string read get_Delimiter write set_Delimiter;
  end;

  TDNStringConcat = class(TDNGenericImport<DNStringConcatClass, DNStringConcat>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNUnionIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{3CCE966F-8386-5504-BD05-8E1B534D6FF9}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.UnionIterator')]
  DNUnionIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{04A7FAA8-6F63-3D82-8D49-EC1DA9DF9AF7}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    function MoveNext(nestedNavigator: DNXPathNavigator): DNSetIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNUnionIterator = class(TDNGenericImport<DNUnionIteratorClass, DNUnionIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlSortKeyAccumulatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{043A86FB-9E10-53BC-9F90-DE27F470FBDA}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlSortKeyAccumulator')]
  DNXmlSortKeyAccumulator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2F5CB1A0-3351-30D0-AEC2-7D41AE7B51D0}']
  { getters & setters } 

    function get_Keys: DDNC.System.Private.CoreLib.DNArray;

  { methods } 

    procedure Create;
    procedure AddStringSortKey(collation: DNXmlCollation; value: string);
    procedure AddDecimalSortKey(collation: DNXmlCollation; value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure AddIntegerSortKey(collation: DNXmlCollation; value: Int64);
    procedure AddIntSortKey(collation: DNXmlCollation; value: Int32);
    procedure AddDoubleSortKey(collation: DNXmlCollation; value: Double);
    procedure AddDateTimeSortKey(collation: DNXmlCollation; value: DDNC.System.Private.CoreLib.DNDateTime);
    procedure AddEmptySortKey(collation: DNXmlCollation);
    procedure FinishSortKeys;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Keys: DDNC.System.Private.CoreLib.DNArray read get_Keys;
  end;

  TDNXmlSortKeyAccumulator = class(TDNGenericImport<DNXmlSortKeyAccumulatorClass, DNXmlSortKeyAccumulator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathFollowingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{90A20E3D-07D9-57D4-9113-0F48BF308195}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathFollowingIterator')]
  DNXPathFollowingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C0B87A1E-C8FA-386B-B6E6-D9061973871D}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(input: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathFollowingIterator = class(TDNGenericImport<DNXPathFollowingIteratorClass, DNXPathFollowingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathFollowingMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0B106EF4-1D96-53B6-9200-B1CCA9BE5885}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathFollowingMergeIterator')]
  DNXPathFollowingMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B8907338-0CEF-348B-9C34-A4CEAE7284B9}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathFollowingMergeIterator = class(TDNGenericImport<DNXPathFollowingMergeIteratorClass, DNXPathFollowingMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathPrecedingDocOrderIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DCDB51CE-023F-5BFB-878C-1885D5162387}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator')]
  DNXPathPrecedingDocOrderIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{83A2EFC5-A3D2-3C31-9E25-DB51A537EBE0}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(input: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathPrecedingDocOrderIterator = class(TDNGenericImport<DNXPathPrecedingDocOrderIteratorClass, DNXPathPrecedingDocOrderIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathPrecedingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{14B5955D-622D-5A7F-934F-6E4DFDD19A83}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathPrecedingIterator')]
  DNXPathPrecedingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A1D7C6FD-7B04-32D9-B71C-F513CF529F4D}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathPrecedingIterator = class(TDNGenericImport<DNXPathPrecedingIteratorClass, DNXPathPrecedingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathPrecedingMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4F456783-5EEB-5459-B8C5-C4E6975852D0}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator')]
  DNXPathPrecedingMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{302CD442-E3CF-303D-A155-F4361C012BCF}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathPrecedingMergeIterator = class(TDNGenericImport<DNXPathPrecedingMergeIteratorClass, DNXPathPrecedingMergeIterator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionClass = interface(DNObjectClass)
  ['{0F0004F3-6C65-55D1-8FFF-050115FB54A1}']
  { constructors } 

    {class} function init: DNXmlSchemaCollection; overload;
    {class} function init(nametable: DNXmlNameTable): DNXmlSchemaCollection; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCollection')]
  DNXmlSchemaCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{1217BF54-49C7-31E2-837E-7135B88A754C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_NameTable: DNXmlNameTable;
    function get_Item(ns: string): DNXmlSchema;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Add(ns: string; uri: string): DNXmlSchema; overload;
    function Add(ns: string; reader: DNXmlReader): DNXmlSchema; overload;
    function Add(ns: string; reader: DNXmlReader; resolver: DNXmlResolver): DNXmlSchema; overload;
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    function Add(schema: DNXmlSchema; resolver: DNXmlResolver): DNXmlSchema; overload;
    procedure Add(schema: DNXmlSchemaCollection); overload;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    function &Contains(ns: string): Boolean; overload;
    function GetEnumerator: DNXmlSchemaCollectionEnumerator;
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property NameTable: DNXmlNameTable read get_NameTable;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
  end;

  TDNXmlSchemaCollection = class(TDNGenericImport<DNXmlSchemaCollectionClass, DNXmlSchemaCollection>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionEnumeratorClass = interface(DNObjectClass)
  ['{FFC59E8C-040C-5D75-837B-0931BB03C2FF}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCollectionEnumerator')]
  DNXmlSchemaCollectionEnumerator = interface(DDNC.System.Private.CoreLib.DNIEnumerator)
  ['{E6751F90-DD3D-3870-8B9C-BBE9071B9D69}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    function MoveNext: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaCollectionEnumerator = class(TDNGenericImport<DNXmlSchemaCollectionEnumeratorClass, DNXmlSchemaCollectionEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCompilationSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{14ACDFF0-38FC-570A-87DC-EADB5824F3AA}']
  { constructors } 

    {class} function init: DNXmlSchemaCompilationSettings;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCompilationSettings')]
  DNXmlSchemaCompilationSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2D5CE834-60FE-3B71-A794-1AB71C462E71}']
  { getters & setters } 

    function get_EnableUpaCheck: Boolean;
    procedure set_EnableUpaCheck(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property EnableUpaCheck: Boolean read get_EnableUpaCheck write set_EnableUpaCheck;
  end;

  TDNXmlSchemaCompilationSettings = class(TDNGenericImport<DNXmlSchemaCompilationSettingsClass, DNXmlSchemaCompilationSettings>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDatatypeClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9CBF3597-A8AA-5510-A1B8-4D045D4C6DA4}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaDatatype')]
  DNXmlSchemaDatatype = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F2F701AE-12B9-3301-B5B0-2712EB07AE34}']
  { getters & setters } 

    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_TokenizedType: DNXmlTokenizedType;
    function get_Variety: DNXmlSchemaDatatypeVariety;
    function get_TypeCode: DNXmlTypeCode;

  { methods } 

    function ParseValue(s: string; nameTable: DNXmlNameTable; nsmgr: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ChangeType(value: DDNC.System.Private.CoreLib.DNObject; targetType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ChangeType(value: DDNC.System.Private.CoreLib.DNObject; targetType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function IsDerivedFrom(datatype: DNXmlSchemaDatatype): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property TokenizedType: DNXmlTokenizedType read get_TokenizedType;
    property Variety: DNXmlSchemaDatatypeVariety read get_Variety;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
  end;

  TDNXmlSchemaDatatype = class(TDNGenericImport<DNXmlSchemaDatatypeClass, DNXmlSchemaDatatype>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{985ECBDD-A8EE-5DF9-A2D8-006FEBCE0B82}']
  { constructors } 

    {class} function init: DNXmlSchemaInference;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInference')]
  DNXmlSchemaInference = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{896630D9-49D1-3DEA-B546-F34B724698AD}']
  { getters & setters } 

    function get_Occurrence: DNXmlSchemaInference_InferenceOption;
    procedure set_Occurrence(value: DNXmlSchemaInference_InferenceOption);
    function get_TypeInference: DNXmlSchemaInference_InferenceOption;
    procedure set_TypeInference(value: DNXmlSchemaInference_InferenceOption);

  { methods } 

    function InferSchema(instanceDocument: DNXmlReader): DNXmlSchemaSet; overload;
    function InferSchema(instanceDocument: DNXmlReader; schemas: DNXmlSchemaSet): DNXmlSchemaSet; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Occurrence: DNXmlSchemaInference_InferenceOption read get_Occurrence write set_Occurrence;
    property TypeInference: DNXmlSchemaInference_InferenceOption read get_TypeInference write set_TypeInference;
  end;

  TDNXmlSchemaInference = class(TDNGenericImport<DNXmlSchemaInferenceClass, DNXmlSchemaInference>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInfoClass = interface(DNObjectClass)
  ['{AA1AE2EC-613D-50D2-9F5F-9DD0BF32B3A1}']
  { constructors } 

    {class} function init: DNXmlSchemaInfo;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInfo')]
  DNXmlSchemaInfo = interface(DNIXmlSchemaInfo)
  ['{B5258A8C-53C0-3767-A1D8-5AC6539D54EA}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    procedure set_Validity(value: DNXmlSchemaValidity);
    function get_IsDefault: Boolean;
    procedure set_IsDefault(value: Boolean);
    function get_IsNil: Boolean;
    procedure set_IsNil(value: Boolean);
    function get_MemberType: DNXmlSchemaSimpleType;
    procedure set_MemberType(value: DNXmlSchemaSimpleType);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_SchemaElement: DNXmlSchemaElement;
    procedure set_SchemaElement(value: DNXmlSchemaElement);
    function get_SchemaAttribute: DNXmlSchemaAttribute;
    procedure set_SchemaAttribute(value: DNXmlSchemaAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    procedure set_ContentType(value: DNXmlSchemaContentType);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Validity: DNXmlSchemaValidity read get_Validity write set_Validity;
    property IsDefault: Boolean read get_IsDefault write set_IsDefault;
    property IsNil: Boolean read get_IsNil write set_IsNil;
    property MemberType: DNXmlSchemaSimpleType read get_MemberType write set_MemberType;
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement write set_SchemaElement;
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute write set_SchemaAttribute;
    property ContentType: DNXmlSchemaContentType read get_ContentType write set_ContentType;
  end;

  TDNXmlSchemaInfo = class(TDNGenericImport<DNXmlSchemaInfoClass, DNXmlSchemaInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1BF60813-2ABC-5D9C-8A79-E17682EFD920}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObject')]
  DNXmlSchemaObject = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7A221E78-BF76-38A0-BB21-389A2A94B32E}']
  { getters & setters } 

    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaObject = class(TDNGenericImport<DNXmlSchemaObjectClass, DNXmlSchemaObject>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaClass = interface(DNXmlSchemaObjectClass)
  ['{5715A7B7-63C5-5B28-AF68-E917955B60D2}']
  { constructors } 

    {class} function init: DNXmlSchema;

  { static methods } 

    {class} function Read(reader: DDNC.System.Private.CoreLib.DNTextReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(stream: DDNC.System.Private.CoreLib.DNStream; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(reader: DNXmlReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchema')]
  DNXmlSchema = interface(DNXmlSchemaObject)
  ['{F2940B7C-8FCB-3AE5-BAB3-504F975FE14D}']
  { getters & setters } 

    function get_AttributeFormDefault: DNXmlSchemaForm;
    procedure set_AttributeFormDefault(value: DNXmlSchemaForm);
    function get_BlockDefault: DNXmlSchemaDerivationMethod;
    procedure set_BlockDefault(value: DNXmlSchemaDerivationMethod);
    function get_FinalDefault: DNXmlSchemaDerivationMethod;
    procedure set_FinalDefault(value: DNXmlSchemaDerivationMethod);
    function get_ElementFormDefault: DNXmlSchemaForm;
    procedure set_ElementFormDefault(value: DNXmlSchemaForm);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Includes: DNXmlSchemaObjectCollection;
    function get_Items: DNXmlSchemaObjectCollection;
    function get_IsCompiled: Boolean;
    function get_Attributes: DNXmlSchemaObjectTable;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Elements: DNXmlSchemaObjectTable;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_Groups: DNXmlSchemaObjectTable;
    function get_Notations: DNXmlSchemaObjectTable;
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    procedure Write(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Write(stream: DDNC.System.Private.CoreLib.DNStream; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Write(writer: DDNC.System.Private.CoreLib.DNTextWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DNXmlWriter); overload;
    procedure Write(writer: DNXmlWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler; resolver: DNXmlResolver); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AttributeFormDefault: DNXmlSchemaForm read get_AttributeFormDefault write set_AttributeFormDefault;
    property BlockDefault: DNXmlSchemaDerivationMethod read get_BlockDefault write set_BlockDefault;
    property FinalDefault: DNXmlSchemaDerivationMethod read get_FinalDefault write set_FinalDefault;
    property ElementFormDefault: DNXmlSchemaForm read get_ElementFormDefault write set_ElementFormDefault;
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    property Version: string read get_Version write set_Version;
    property Includes: DNXmlSchemaObjectCollection read get_Includes;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property IsCompiled: Boolean read get_IsCompiled;
    property Attributes: DNXmlSchemaObjectTable read get_Attributes;
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    property Elements: DNXmlSchemaObjectTable read get_Elements;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    property Notations: DNXmlSchemaObjectTable read get_Notations;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchema = class(TDNGenericImport<DNXmlSchemaClass, DNXmlSchema>)
  public const
   Namespace = 'http://www.w3.org/2001/XMLSchema';
   InstanceNamespace = 'http://www.w3.org/2001/XMLSchema-instance';
  end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotatedClass = interface(DNXmlSchemaObjectClass)
  ['{19FF4ECF-17B7-5C10-AE9F-8E307D36F5E4}']
  { constructors } 

    {class} function init: DNXmlSchemaAnnotated;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotated')]
  DNXmlSchemaAnnotated = interface(DNXmlSchemaObject)
  ['{2FEF5BF6-DCF7-35F1-97A8-54FFD2E8AF88}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotated = class(TDNGenericImport<DNXmlSchemaAnnotatedClass, DNXmlSchemaAnnotated>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{8E264C24-FC0D-5231-AAB4-698F376E0D0B}']
  { constructors } 

    {class} function init: DNXmlSchemaAnyAttribute;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnyAttribute')]
  DNXmlSchemaAnyAttribute = interface(DNXmlSchemaAnnotated)
  ['{8FECC970-FBBE-306E-94D6-A878FEE0FA25}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnyAttribute = class(TDNGenericImport<DNXmlSchemaAnyAttributeClass, DNXmlSchemaAnyAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{957BDA16-E2E3-5EBD-A562-3B2E89904C2B}']
  { constructors } 

    {class} function init: DNXmlSchemaAttribute;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttribute')]
  DNXmlSchemaAttribute = interface(DNXmlSchemaAnnotated)
  ['{9764BCE1-C822-377B-ACAE-CACCF2FA1C57}']
  { getters & setters } 

    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaSimpleType;
    procedure set_SchemaType(value: DNXmlSchemaSimpleType);
    function get_Use: DNXmlSchemaUse;
    procedure set_Use(value: DNXmlSchemaUse);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_AttributeType: DDNC.System.Private.CoreLib.DNObject;
    function get_AttributeSchemaType: DNXmlSchemaSimpleType;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaSimpleType read get_SchemaType write set_SchemaType;
    property Use: DNXmlSchemaUse read get_Use write set_Use;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property AttributeType: DDNC.System.Private.CoreLib.DNObject read get_AttributeType;
    property AttributeSchemaType: DNXmlSchemaSimpleType read get_AttributeSchemaType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttribute = class(TDNGenericImport<DNXmlSchemaAttributeClass, DNXmlSchemaAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2B9E2063-5638-59AA-A453-BF64C67EC660}']
  { constructors } 

    {class} function init: DNXmlSchemaAttributeGroup;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroup')]
  DNXmlSchemaAttributeGroup = interface(DNXmlSchemaAnnotated)
  ['{4F739E21-507B-35FF-971A-D7DD5F16AA1B}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_RedefinedAttributeGroup: DNXmlSchemaAttributeGroup;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property RedefinedAttributeGroup: DNXmlSchemaAttributeGroup read get_RedefinedAttributeGroup;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroup = class(TDNGenericImport<DNXmlSchemaAttributeGroupClass, DNXmlSchemaAttributeGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupRefClass = interface(DNXmlSchemaAnnotatedClass)
  ['{58F19FD2-8308-59EA-A416-A61BD22D40DE}']
  { constructors } 

    {class} function init: DNXmlSchemaAttributeGroupRef;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroupRef')]
  DNXmlSchemaAttributeGroupRef = interface(DNXmlSchemaAnnotated)
  ['{7010C625-3120-344F-86E5-561FCB2CED75}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroupRef = class(TDNGenericImport<DNXmlSchemaAttributeGroupRefClass, DNXmlSchemaAttributeGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{4DC0F513-0F94-54E4-83D8-252D66C32698}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaContent')]
  DNXmlSchemaContent = interface(DNXmlSchemaAnnotated)
  ['{9B166157-A0EB-3D96-B012-A2977E6B14B5}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContent = class(TDNGenericImport<DNXmlSchemaContentClass, DNXmlSchemaContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{A569D118-B56B-5A7F-991E-041D783F7A47}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContentExtension;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentExtension')]
  DNXmlSchemaComplexContentExtension = interface(DNXmlSchemaContent)
  ['{DF3DEDCF-6A42-3877-960E-0CEA5D0A066C}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentExtension = class(TDNGenericImport<DNXmlSchemaComplexContentExtensionClass, DNXmlSchemaComplexContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{78ADD4EB-F9AA-51DD-8800-AC6C007C2CC4}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContentRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentRestriction')]
  DNXmlSchemaComplexContentRestriction = interface(DNXmlSchemaContent)
  ['{7E95AD88-1A5D-39BE-BB8E-1CBE0956D6AC}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentRestriction = class(TDNGenericImport<DNXmlSchemaComplexContentRestrictionClass, DNXmlSchemaComplexContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{D0AC438C-F1CE-5152-A8A6-615B7F75B465}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContentExtension;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentExtension')]
  DNXmlSchemaSimpleContentExtension = interface(DNXmlSchemaContent)
  ['{7D2486C3-12A9-3F11-9B94-968B6ED0E453}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentExtension = class(TDNGenericImport<DNXmlSchemaSimpleContentExtensionClass, DNXmlSchemaSimpleContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{0CE3E962-24FE-575C-AFB2-14934AA054FC}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContentRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentRestriction')]
  DNXmlSchemaSimpleContentRestriction = interface(DNXmlSchemaContent)
  ['{A155E18D-84DC-322B-9F92-D27DC2BDA72F}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentRestriction = class(TDNGenericImport<DNXmlSchemaSimpleContentRestrictionClass, DNXmlSchemaSimpleContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentModelClass = interface(DNXmlSchemaAnnotatedClass)
  ['{B8C0BF3F-87CF-5B83-AE08-29FDEE3E65E3}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaContentModel')]
  DNXmlSchemaContentModel = interface(DNXmlSchemaAnnotated)
  ['{34E4B41A-9FB0-3A29-A764-1B5CC3827775}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContentModel = class(TDNGenericImport<DNXmlSchemaContentModelClass, DNXmlSchemaContentModel>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentClass = interface(DNXmlSchemaContentModelClass)
  ['{6DCDC609-E6C9-5B3F-A3B4-11BAF499E99C}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContent;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContent')]
  DNXmlSchemaComplexContent = interface(DNXmlSchemaContentModel)
  ['{B8F1D2B9-E2E9-314C-BC4C-6FFE6FF325D6}']
  { getters & setters } 

    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContent = class(TDNGenericImport<DNXmlSchemaComplexContentClass, DNXmlSchemaComplexContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentClass = interface(DNXmlSchemaContentModelClass)
  ['{1522A96E-F437-5FD7-86A1-849A88AF0211}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContent;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContent')]
  DNXmlSchemaSimpleContent = interface(DNXmlSchemaContentModel)
  ['{3308381F-EFFE-3147-9148-6A135D684A6E}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContent = class(TDNGenericImport<DNXmlSchemaSimpleContentClass, DNXmlSchemaSimpleContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFacetClass = interface(DNXmlSchemaAnnotatedClass)
  ['{B7C7DB0F-9FE6-5EBE-9AFC-3A83C1DA76B4}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaFacet')]
  DNXmlSchemaFacet = interface(DNXmlSchemaAnnotated)
  ['{597EE6F9-31CD-3DA3-989F-D4E13CC18061}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFacet = class(TDNGenericImport<DNXmlSchemaFacetClass, DNXmlSchemaFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaEnumerationFacetClass = interface(DNXmlSchemaFacetClass)
  ['{C12C8212-75CB-5435-AAAF-141EB8A6AED0}']
  { constructors } 

    {class} function init: DNXmlSchemaEnumerationFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaEnumerationFacet')]
  DNXmlSchemaEnumerationFacet = interface(DNXmlSchemaFacet)
  ['{6A5576F9-6FF7-3F4A-BAE0-8E5D9DD62FDE}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaEnumerationFacet = class(TDNGenericImport<DNXmlSchemaEnumerationFacetClass, DNXmlSchemaEnumerationFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{209FE29D-0763-5741-90A3-1A279B3ED001}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxExclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxExclusiveFacet')]
  DNXmlSchemaMaxExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{5C9191D3-4E00-3C3B-96AF-8E6BF2EFD8A7}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxExclusiveFacetClass, DNXmlSchemaMaxExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{7E7BFD8D-3CA1-5C3B-AB5F-8418FED1A1DD}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxInclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxInclusiveFacet')]
  DNXmlSchemaMaxInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{9F3DB64C-7E55-3BAB-A110-C97E42A77EAA}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxInclusiveFacetClass, DNXmlSchemaMaxInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{B328E4F1-2909-59C1-A3AE-AF5515B9770D}']
  { constructors } 

    {class} function init: DNXmlSchemaMinExclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinExclusiveFacet')]
  DNXmlSchemaMinExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{B24941E0-E38E-3B23-A27E-768CFC4BD429}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinExclusiveFacetClass, DNXmlSchemaMinExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{10555E67-B9F4-5466-9229-EDD4DC4C01EF}']
  { constructors } 

    {class} function init: DNXmlSchemaMinInclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinInclusiveFacet')]
  DNXmlSchemaMinInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{D445BB63-C7DC-3162-8CCF-517F7A20F423}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinInclusiveFacetClass, DNXmlSchemaMinInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNumericFacetClass = interface(DNXmlSchemaFacetClass)
  ['{E9C662C5-4C3D-5067-95C4-74CBC1C2F88A}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaNumericFacet')]
  DNXmlSchemaNumericFacet = interface(DNXmlSchemaFacet)
  ['{E85A88AA-1E2C-3513-9BA0-0EE2FF465226}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNumericFacet = class(TDNGenericImport<DNXmlSchemaNumericFacetClass, DNXmlSchemaNumericFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFractionDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{207699C5-16C4-582B-BC07-D275CDB44E22}']
  { constructors } 

    {class} function init: DNXmlSchemaFractionDigitsFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaFractionDigitsFacet')]
  DNXmlSchemaFractionDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{A4D56F8F-40DD-37DE-B256-31092B54726B}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFractionDigitsFacet = class(TDNGenericImport<DNXmlSchemaFractionDigitsFacetClass, DNXmlSchemaFractionDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{E27EF7DD-52ED-5D34-9DF0-3D8C393F29A8}']
  { constructors } 

    {class} function init: DNXmlSchemaLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaLengthFacet')]
  DNXmlSchemaLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{A9CAC82D-AB8B-33BE-9D33-97F92DBB0D71}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaLengthFacet = class(TDNGenericImport<DNXmlSchemaLengthFacetClass, DNXmlSchemaLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{65D4A701-A74B-5668-B951-6F49B7F1EB61}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxLengthFacet')]
  DNXmlSchemaMaxLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{9F996181-DF3C-3BE6-AD64-A42D1ED71A38}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxLengthFacet = class(TDNGenericImport<DNXmlSchemaMaxLengthFacetClass, DNXmlSchemaMaxLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{57797C8A-B075-51A0-815A-62A3BB58533B}']
  { constructors } 

    {class} function init: DNXmlSchemaMinLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinLengthFacet')]
  DNXmlSchemaMinLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{7BA2BB93-183E-39C6-9664-9CBB10B7744E}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinLengthFacet = class(TDNGenericImport<DNXmlSchemaMinLengthFacetClass, DNXmlSchemaMinLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTotalDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{67563DF7-167A-5A31-9D7E-E84CA26EAB7B}']
  { constructors } 

    {class} function init: DNXmlSchemaTotalDigitsFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaTotalDigitsFacet')]
  DNXmlSchemaTotalDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{B09FBD43-E5A9-36D6-8C36-6141AA6E4BDB}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaTotalDigitsFacet = class(TDNGenericImport<DNXmlSchemaTotalDigitsFacetClass, DNXmlSchemaTotalDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaPatternFacetClass = interface(DNXmlSchemaFacetClass)
  ['{3113E374-77EB-553E-A0E4-1CB26E84B9A9}']
  { constructors } 

    {class} function init: DNXmlSchemaPatternFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaPatternFacet')]
  DNXmlSchemaPatternFacet = interface(DNXmlSchemaFacet)
  ['{20F035F6-39BC-340F-9C58-5F179E621AD7}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaPatternFacet = class(TDNGenericImport<DNXmlSchemaPatternFacetClass, DNXmlSchemaPatternFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaWhiteSpaceFacetClass = interface(DNXmlSchemaFacetClass)
  ['{8266DCB8-B1FA-5149-A5A0-5CC957CB3809}']
  { constructors } 

    {class} function init: DNXmlSchemaWhiteSpaceFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaWhiteSpaceFacet')]
  DNXmlSchemaWhiteSpaceFacet = interface(DNXmlSchemaFacet)
  ['{D3EC2050-4527-3587-8ADE-3408FACBE67B}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaWhiteSpaceFacet = class(TDNGenericImport<DNXmlSchemaWhiteSpaceFacetClass, DNXmlSchemaWhiteSpaceFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{C5D9CBDB-2142-578A-873B-F92EF08AAF81}']
  { constructors } 

    {class} function init: DNXmlSchemaGroup;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroup')]
  DNXmlSchemaGroup = interface(DNXmlSchemaAnnotated)
  ['{50600083-F643-3C60-ADE6-E811D36A6032}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Particle: DNXmlSchemaGroupBase;
    procedure set_Particle(value: DNXmlSchemaGroupBase);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Particle: DNXmlSchemaGroupBase read get_Particle write set_Particle;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroup = class(TDNGenericImport<DNXmlSchemaGroupClass, DNXmlSchemaGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIdentityConstraintClass = interface(DNXmlSchemaAnnotatedClass)
  ['{21040BC0-F2B1-53DE-B004-17C17AD3C363}']
  { constructors } 

    {class} function init: DNXmlSchemaIdentityConstraint;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaIdentityConstraint')]
  DNXmlSchemaIdentityConstraint = interface(DNXmlSchemaAnnotated)
  ['{80A0A9FD-7D60-39B1-B367-7404D7950BE5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaIdentityConstraint = class(TDNGenericImport<DNXmlSchemaIdentityConstraintClass, DNXmlSchemaIdentityConstraint>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{413AF89A-8888-5654-BAC2-C8762AFC028A}']
  { constructors } 

    {class} function init: DNXmlSchemaKey;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaKey')]
  DNXmlSchemaKey = interface(DNXmlSchemaIdentityConstraint)
  ['{AF8B1C26-0630-3A27-B8AC-5BE1B9FEE420}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKey = class(TDNGenericImport<DNXmlSchemaKeyClass, DNXmlSchemaKey>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyrefClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{DE2BF797-1A7E-55EE-B284-DA2B52D57971}']
  { constructors } 

    {class} function init: DNXmlSchemaKeyref;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaKeyref')]
  DNXmlSchemaKeyref = interface(DNXmlSchemaIdentityConstraint)
  ['{99E5D6C1-B6D3-3DBF-861C-85E8B050B1E7}']
  { getters & setters } 

    function get_Refer: DNXmlQualifiedName;
    procedure set_Refer(value: DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Refer: DNXmlQualifiedName read get_Refer write set_Refer;
    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKeyref = class(TDNGenericImport<DNXmlSchemaKeyrefClass, DNXmlSchemaKeyref>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaUniqueClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{C2125A61-6BF4-5F9A-BED8-322E4029C1A3}']
  { constructors } 

    {class} function init: DNXmlSchemaUnique;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaUnique')]
  DNXmlSchemaUnique = interface(DNXmlSchemaIdentityConstraint)
  ['{9E5743D5-C925-3F4C-A612-9B0848436027}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaUnique = class(TDNGenericImport<DNXmlSchemaUniqueClass, DNXmlSchemaUnique>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNotationClass = interface(DNXmlSchemaAnnotatedClass)
  ['{7B8AF816-04C0-5A6F-90F1-7FAA16FCC70A}']
  { constructors } 

    {class} function init: DNXmlSchemaNotation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaNotation')]
  DNXmlSchemaNotation = interface(DNXmlSchemaAnnotated)
  ['{72992119-F40D-3128-944B-4E734BD7F75C}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Public: string;
    procedure set_Public(value: string);
    function get_System: string;
    procedure set_System(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Public: string read get_Public write set_Public;
    property System: string read get_System write set_System;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNotation = class(TDNGenericImport<DNXmlSchemaNotationClass, DNXmlSchemaNotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaParticleClass = interface(DNXmlSchemaAnnotatedClass)
  ['{4367547D-5A49-507B-ACDF-C2E2A2D6EB12}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaParticle')]
  DNXmlSchemaParticle = interface(DNXmlSchemaAnnotated)
  ['{0708A4B4-476C-39DD-BA76-EBB56933BFE2}']
  { getters & setters } 

    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaParticle = class(TDNGenericImport<DNXmlSchemaParticleClass, DNXmlSchemaParticle>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyClass = interface(DNXmlSchemaParticleClass)
  ['{E4ED68CB-B9F4-5F20-A66D-D70977B318B2}']
  { constructors } 

    {class} function init: DNXmlSchemaAny;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAny')]
  DNXmlSchemaAny = interface(DNXmlSchemaParticle)
  ['{8045C49F-3299-31A0-A275-31D02299E454}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAny = class(TDNGenericImport<DNXmlSchemaAnyClass, DNXmlSchemaAny>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaElementClass = interface(DNXmlSchemaParticleClass)
  ['{8004040C-5D21-526C-80D8-3F2D9F14C5AE}']
  { constructors } 

    {class} function init: DNXmlSchemaElement;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaElement')]
  DNXmlSchemaElement = interface(DNXmlSchemaParticle)
  ['{3C59F5C2-BFD6-3593-A32A-F437C0403B4D}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsNillable: Boolean;
    procedure set_IsNillable(value: Boolean);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SubstitutionGroup: DNXmlQualifiedName;
    procedure set_SubstitutionGroup(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_Constraints: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_ElementType: DDNC.System.Private.CoreLib.DNObject;
    function get_ElementSchemaType: DNXmlSchemaType;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property IsNillable: Boolean read get_IsNillable write set_IsNillable;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SubstitutionGroup: DNXmlQualifiedName read get_SubstitutionGroup write set_SubstitutionGroup;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    property Constraints: DNXmlSchemaObjectCollection read get_Constraints;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property ElementType: DDNC.System.Private.CoreLib.DNObject read get_ElementType;
    property ElementSchemaType: DNXmlSchemaType read get_ElementSchemaType;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaElement = class(TDNGenericImport<DNXmlSchemaElementClass, DNXmlSchemaElement>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupBaseClass = interface(DNXmlSchemaParticleClass)
  ['{717E6B80-0EE7-5F06-A65B-65F5DFD67D26}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroupBase')]
  DNXmlSchemaGroupBase = interface(DNXmlSchemaParticle)
  ['{0BC5528E-7917-390F-B34F-4F0D4E7CABCB}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupBase = class(TDNGenericImport<DNXmlSchemaGroupBaseClass, DNXmlSchemaGroupBase>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAllClass = interface(DNXmlSchemaGroupBaseClass)
  ['{497A86B2-E18F-5762-8997-A4FFF1E25A2D}']
  { constructors } 

    {class} function init: DNXmlSchemaAll;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAll')]
  DNXmlSchemaAll = interface(DNXmlSchemaGroupBase)
  ['{09F06F8A-C0C7-32B6-9B75-05A49D2420AE}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAll = class(TDNGenericImport<DNXmlSchemaAllClass, DNXmlSchemaAll>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaChoiceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{01A3AD83-9FDA-54A4-B3DF-78971EA35E17}']
  { constructors } 

    {class} function init: DNXmlSchemaChoice;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaChoice')]
  DNXmlSchemaChoice = interface(DNXmlSchemaGroupBase)
  ['{B8D82B9F-6D28-342D-8367-700AEACB9383}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaChoice = class(TDNGenericImport<DNXmlSchemaChoiceClass, DNXmlSchemaChoice>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSequenceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{B26082C6-2304-5AD6-9C6E-DF85D7C76CC0}']
  { constructors } 

    {class} function init: DNXmlSchemaSequence;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSequence')]
  DNXmlSchemaSequence = interface(DNXmlSchemaGroupBase)
  ['{26116808-7697-3771-9569-D294E82F250C}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSequence = class(TDNGenericImport<DNXmlSchemaSequenceClass, DNXmlSchemaSequence>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupRefClass = interface(DNXmlSchemaParticleClass)
  ['{8F6A4A6F-95D9-537C-9620-DD930941826A}']
  { constructors } 

    {class} function init: DNXmlSchemaGroupRef;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroupRef')]
  DNXmlSchemaGroupRef = interface(DNXmlSchemaParticle)
  ['{F4D4A5D6-0FD0-3AA8-B24C-6F1FA9E43D20}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaGroupBase;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property Particle: DNXmlSchemaGroupBase read get_Particle;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupRef = class(TDNGenericImport<DNXmlSchemaGroupRefClass, DNXmlSchemaGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2000D764-8F1C-5B80-BA88-50A3B0B9C95B}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeContent')]
  DNXmlSchemaSimpleTypeContent = interface(DNXmlSchemaAnnotated)
  ['{C98FBA6D-04F4-398C-AB5B-F0692633E228}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeContent = class(TDNGenericImport<DNXmlSchemaSimpleTypeContentClass, DNXmlSchemaSimpleTypeContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeListClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{31C329F9-A644-59D4-BA55-5CAF1184A286}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeList;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeList')]
  DNXmlSchemaSimpleTypeList = interface(DNXmlSchemaSimpleTypeContent)
  ['{CB6C2AAB-41B8-3746-A2AA-50B12EAE28A8}']
  { getters & setters } 

    function get_ItemTypeName: DNXmlQualifiedName;
    procedure set_ItemTypeName(value: DNXmlQualifiedName);
    function get_ItemType: DNXmlSchemaSimpleType;
    procedure set_ItemType(value: DNXmlSchemaSimpleType);
    function get_BaseItemType: DNXmlSchemaSimpleType;
    procedure set_BaseItemType(value: DNXmlSchemaSimpleType);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ItemTypeName: DNXmlQualifiedName read get_ItemTypeName write set_ItemTypeName;
    property ItemType: DNXmlSchemaSimpleType read get_ItemType write set_ItemType;
    property BaseItemType: DNXmlSchemaSimpleType read get_BaseItemType write set_BaseItemType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeList = class(TDNGenericImport<DNXmlSchemaSimpleTypeListClass, DNXmlSchemaSimpleTypeList>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeRestrictionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{1158AB26-8F22-5E9A-ACC4-087D85EC0D67}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeRestriction')]
  DNXmlSchemaSimpleTypeRestriction = interface(DNXmlSchemaSimpleTypeContent)
  ['{BAA759E8-394C-3FB7-9079-11D2E296E191}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeRestriction = class(TDNGenericImport<DNXmlSchemaSimpleTypeRestrictionClass, DNXmlSchemaSimpleTypeRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeUnionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{97FC2FD9-FA60-5DC2-B395-19F183B1231E}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeUnion;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeUnion')]
  DNXmlSchemaSimpleTypeUnion = interface(DNXmlSchemaSimpleTypeContent)
  ['{EBE435ED-22CF-3F99-9594-1F32E43E6D10}']
  { getters & setters } 

    function get_BaseTypes: DNXmlSchemaObjectCollection;
    function get_MemberTypes: TArray<DNXmlQualifiedName>;
    procedure set_MemberTypes(value: TArray<DNXmlQualifiedName>);
    function get_BaseMemberTypes: TArray<DNXmlSchemaSimpleType>;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypes: DNXmlSchemaObjectCollection read get_BaseTypes;
    property MemberTypes: TArray<DNXmlQualifiedName> read get_MemberTypes write set_MemberTypes;
    property BaseMemberTypes: TArray<DNXmlSchemaSimpleType> read get_BaseMemberTypes;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeUnion = class(TDNGenericImport<DNXmlSchemaSimpleTypeUnionClass, DNXmlSchemaSimpleTypeUnion>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTypeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{00380FEF-F20D-55FF-B032-2E9BF32D81B2}']
  { constructors } 

    {class} function init: DNXmlSchemaType;

  { static methods } 

    {class} function GetBuiltInSimpleType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInSimpleType(typeCode: DNXmlTypeCode): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInComplexType(typeCode: DNXmlTypeCode): DNXmlSchemaComplexType; overload;
    {class} function GetBuiltInComplexType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaComplexType; overload;
    {class} function IsDerivedFrom(derivedType: DNXmlSchemaType; baseType: DNXmlSchemaType; &except: DNXmlSchemaDerivationMethod): Boolean;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaType')]
  DNXmlSchemaType = interface(DNXmlSchemaAnnotated)
  ['{5778818C-694A-318D-93BE-41D6B5BD108A}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDNC.System.Private.CoreLib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaType = class(TDNGenericImport<DNXmlSchemaTypeClass, DNXmlSchemaType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexTypeClass = interface(DNXmlSchemaTypeClass)
  ['{1B32BF92-01EB-5183-8805-5E4E6D48EAC4}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexType')]
  DNXmlSchemaComplexType = interface(DNXmlSchemaType)
  ['{82C6E387-4946-31E6-86BD-E8C33C372326}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_ContentModel: DNXmlSchemaContentModel;
    procedure set_ContentModel(value: DNXmlSchemaContentModel);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    function get_ContentTypeParticle: DNXmlSchemaParticle;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_AttributeUses: DNXmlSchemaObjectTable;
    function get_AttributeWildcard: DNXmlSchemaAnyAttribute;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property ContentModel: DNXmlSchemaContentModel read get_ContentModel write set_ContentModel;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property ContentType: DNXmlSchemaContentType read get_ContentType;
    property ContentTypeParticle: DNXmlSchemaParticle read get_ContentTypeParticle;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property AttributeUses: DNXmlSchemaObjectTable read get_AttributeUses;
    property AttributeWildcard: DNXmlSchemaAnyAttribute read get_AttributeWildcard;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDNC.System.Private.CoreLib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexType = class(TDNGenericImport<DNXmlSchemaComplexTypeClass, DNXmlSchemaComplexType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeClass = interface(DNXmlSchemaTypeClass)
  ['{AB2474B9-24D6-5BC4-9005-F7F79F109AC7}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleType')]
  DNXmlSchemaSimpleType = interface(DNXmlSchemaType)
  ['{12FA2023-435D-3F70-B8DC-194488133CA6}']
  { getters & setters } 

    function get_Content: DNXmlSchemaSimpleTypeContent;
    procedure set_Content(value: DNXmlSchemaSimpleTypeContent);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Content: DNXmlSchemaSimpleTypeContent read get_Content write set_Content;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDNC.System.Private.CoreLib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleType = class(TDNGenericImport<DNXmlSchemaSimpleTypeClass, DNXmlSchemaSimpleType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaXPathClass = interface(DNXmlSchemaAnnotatedClass)
  ['{CA9439E5-7739-5A6F-8F17-F6080CABAEFB}']
  { constructors } 

    {class} function init: DNXmlSchemaXPath;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaXPath')]
  DNXmlSchemaXPath = interface(DNXmlSchemaAnnotated)
  ['{780C5933-674A-36B7-96C2-978D8A68CAF1}']
  { getters & setters } 

    function get_XPath: string;
    procedure set_XPath(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XPath: string read get_XPath write set_XPath;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaXPath = class(TDNGenericImport<DNXmlSchemaXPathClass, DNXmlSchemaXPath>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotationClass = interface(DNXmlSchemaObjectClass)
  ['{C0544D65-9EC5-50D4-B05B-07CFFA5DD2A2}']
  { constructors } 

    {class} function init: DNXmlSchemaAnnotation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotation')]
  DNXmlSchemaAnnotation = interface(DNXmlSchemaObject)
  ['{3864F233-423F-38DB-92B4-13CD2C6ABBAD}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Items: DNXmlSchemaObjectCollection;
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotation = class(TDNGenericImport<DNXmlSchemaAnnotationClass, DNXmlSchemaAnnotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAppInfoClass = interface(DNXmlSchemaObjectClass)
  ['{117DFE07-A19C-5451-A135-ECEBB43983B3}']
  { constructors } 

    {class} function init: DNXmlSchemaAppInfo;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAppInfo')]
  DNXmlSchemaAppInfo = interface(DNXmlSchemaObject)
  ['{EC4DF933-1C01-33F5-B2F2-D53E2E0B2FF6}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Source: string read get_Source write set_Source;
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAppInfo = class(TDNGenericImport<DNXmlSchemaAppInfoClass, DNXmlSchemaAppInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDocumentationClass = interface(DNXmlSchemaObjectClass)
  ['{EE5F1A9D-021E-5FB0-AE73-5D8BDEB32C27}']
  { constructors } 

    {class} function init: DNXmlSchemaDocumentation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaDocumentation')]
  DNXmlSchemaDocumentation = interface(DNXmlSchemaObject)
  ['{A672BF8C-E365-31F9-91C0-9014326BA8CA}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Source: string read get_Source write set_Source;
    property Language: string read get_Language write set_Language;
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaDocumentation = class(TDNGenericImport<DNXmlSchemaDocumentationClass, DNXmlSchemaDocumentation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExternalClass = interface(DNXmlSchemaObjectClass)
  ['{2AF93599-621B-5394-82D7-3516D1E420A6}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaExternal')]
  DNXmlSchemaExternal = interface(DNXmlSchemaObject)
  ['{3F80A3AE-C025-3103-8DA5-A9E9B0AE7167}']
  { getters & setters } 

    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaExternal = class(TDNGenericImport<DNXmlSchemaExternalClass, DNXmlSchemaExternal>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaImportClass = interface(DNXmlSchemaExternalClass)
  ['{E4F8531D-F290-5A9E-B047-32EC267FFA76}']
  { constructors } 

    {class} function init: DNXmlSchemaImport;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaImport')]
  DNXmlSchemaImport = interface(DNXmlSchemaExternal)
  ['{A507BB93-9E1D-3E80-8551-97C282E6AD70}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaImport = class(TDNGenericImport<DNXmlSchemaImportClass, DNXmlSchemaImport>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIncludeClass = interface(DNXmlSchemaExternalClass)
  ['{2292F809-EFD2-5CF9-A6EF-170C9E5BD7E9}']
  { constructors } 

    {class} function init: DNXmlSchemaInclude;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInclude')]
  DNXmlSchemaInclude = interface(DNXmlSchemaExternal)
  ['{AD7B59FD-7E9F-36FD-A417-78C877DF8841}']
  { getters & setters } 

    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaInclude = class(TDNGenericImport<DNXmlSchemaIncludeClass, DNXmlSchemaInclude>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaRedefineClass = interface(DNXmlSchemaExternalClass)
  ['{B612BE3F-C4E2-5A2A-A0E9-8F874E5FF508}']
  { constructors } 

    {class} function init: DNXmlSchemaRedefine;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaRedefine')]
  DNXmlSchemaRedefine = interface(DNXmlSchemaExternal)
  ['{049E38F0-3737-3DB1-A467-654562F2A13F}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Groups: DNXmlSchemaObjectTable;
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaRedefine = class(TDNGenericImport<DNXmlSchemaRedefineClass, DNXmlSchemaRedefine>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectEnumeratorClass = interface(DNObjectClass)
  ['{37AEB251-72C5-5964-9A17-B23BE9D6292D}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectEnumerator')]
  DNXmlSchemaObjectEnumerator = interface(DDNC.System.Private.CoreLib.DNIEnumerator)
  ['{E07E6F53-8D77-3760-960A-B6280126766F}']
  { getters & setters } 

    function get_Current: DNXmlSchemaObject;

  { methods } 

    procedure Reset;
    function MoveNext: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXmlSchemaObject read get_Current;
  end;

  TDNXmlSchemaObjectEnumerator = class(TDNGenericImport<DNXmlSchemaObjectEnumeratorClass, DNXmlSchemaObjectEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectTableClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BFECF904-35AF-56A2-8BC9-298B5CBB27AD}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectTable')]
  DNXmlSchemaObjectTable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{41A87474-F78C-31A0-A3E1-218544896346}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: DNXmlQualifiedName): DNXmlSchemaObject;
    function get_Names: DDNC.System.Private.CoreLib.DNICollection;
    function get_Values: DDNC.System.Private.CoreLib.DNICollection;

  { methods } 

    function &Contains(name: DNXmlQualifiedName): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIDictionaryEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: DNXmlQualifiedName]: DNXmlSchemaObject read get_Item; default;
    property Names: DDNC.System.Private.CoreLib.DNICollection read get_Names;
    property Values: DDNC.System.Private.CoreLib.DNICollection read get_Values;
  end;

  TDNXmlSchemaObjectTable = class(TDNGenericImport<DNXmlSchemaObjectTableClass, DNXmlSchemaObjectTable>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BBF6D4DF-4970-507E-879A-0F76BA928ABF}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlSchemaSet; overload;
    {class} function init(nameTable: DNXmlNameTable): DNXmlSchemaSet; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSet')]
  DNXmlSchemaSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8FE210CA-07BD-3AC8-B73F-4D37B70B1F6C}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_IsCompiled: Boolean;
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_CompilationSettings: DNXmlSchemaCompilationSettings;
    procedure set_CompilationSettings(value: DNXmlSchemaCompilationSettings);
    function get_Count: Int32;
    function get_GlobalElements: DNXmlSchemaObjectTable;
    function get_GlobalAttributes: DNXmlSchemaObjectTable;
    function get_GlobalTypes: DNXmlSchemaObjectTable;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Add(targetNamespace: string; schemaUri: string): DNXmlSchema; overload;
    function Add(targetNamespace: string; schemaDocument: DNXmlReader): DNXmlSchema; overload;
    procedure Add(schemas: DNXmlSchemaSet); overload;
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    function Remove(schema: DNXmlSchema): DNXmlSchema;
    function RemoveRecursive(schemaToRemove: DNXmlSchema): Boolean;
    function &Contains(targetNamespace: string): Boolean; overload;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    procedure Compile;
    function Reprocess(schema: DNXmlSchema): DNXmlSchema;
    procedure CopyTo(schemas: TArray<DNXmlSchema>; index: Int32);
    function Schemas: DDNC.System.Private.CoreLib.DNICollection; overload;
    function Schemas(targetNamespace: string): DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property IsCompiled: Boolean read get_IsCompiled;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property CompilationSettings: DNXmlSchemaCompilationSettings read get_CompilationSettings write set_CompilationSettings;
    property Count: Int32 read get_Count;
    property GlobalElements: DNXmlSchemaObjectTable read get_GlobalElements;
    property GlobalAttributes: DNXmlSchemaObjectTable read get_GlobalAttributes;
    property GlobalTypes: DNXmlSchemaObjectTable read get_GlobalTypes;
  end;

  TDNXmlSchemaSet = class(TDNGenericImport<DNXmlSchemaSetClass, DNXmlSchemaSet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidatorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D00E8C46-ED5C-5FF6-B212-8A9399665AA0}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(nameTable: DNXmlNameTable; schemas: DNXmlSchemaSet; namespaceResolver: DNIXmlNamespaceResolver; validationFlags: DNXmlSchemaValidationFlags): DNXmlSchemaValidator;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaValidator')]
  DNXmlSchemaValidator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{89A6D729-EF18-35FB-BC98-F3474A48198B}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineInfoProvider: DNIXmlLineInfo;
    procedure set_LineInfoProvider(value: DNIXmlLineInfo);
    function get_SourceUri: DDNC.System.Private.Uri.DNUri;
    procedure set_SourceUri(value: DDNC.System.Private.Uri.DNUri);
    function get_ValidationEventSender: DDNC.System.Private.CoreLib.DNObject;
    procedure set_ValidationEventSender(value: DDNC.System.Private.CoreLib.DNObject);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    procedure AddSchema(schema: DNXmlSchema);
    procedure Initialize; overload;
    procedure Initialize(partialValidationType: DNXmlSchemaObject); overload;
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo); overload;
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo; xsiType: string; xsiNil: string; xsiSchemaLocation: string; xsiNoNamespaceSchemaLocation: string); overload;
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: string; schemaInfo: DNXmlSchemaInfo): DDNC.System.Private.CoreLib.DNObject; overload;
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: DNXmlValueGetter; schemaInfo: DNXmlSchemaInfo): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure GetUnspecifiedDefaultAttributes(defaultAttributes: DDNC.System.Private.CoreLib.DNArrayList);
    procedure ValidateEndOfAttributes(schemaInfo: DNXmlSchemaInfo);
    procedure ValidateText(elementValue: string); overload;
    procedure ValidateText(elementValue: DNXmlValueGetter); overload;
    procedure ValidateWhitespace(elementValue: string); overload;
    procedure ValidateWhitespace(elementValue: DNXmlValueGetter); overload;
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo): DDNC.System.Private.CoreLib.DNObject; overload;
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo; typedValue: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure SkipToEndElement(schemaInfo: DNXmlSchemaInfo);
    procedure EndValidation;
    function GetExpectedParticles: TArray<DNXmlSchemaParticle>;
    function GetExpectedAttributes: TArray<DNXmlSchemaAttribute>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property LineInfoProvider: DNIXmlLineInfo read get_LineInfoProvider write set_LineInfoProvider;
    property SourceUri: DDNC.System.Private.Uri.DNUri read get_SourceUri write set_SourceUri;
    property ValidationEventSender: DDNC.System.Private.CoreLib.DNObject read get_ValidationEventSender write set_ValidationEventSender;
  end;

  TDNXmlSchemaValidator = class(TDNGenericImport<DNXmlSchemaValidatorClass, DNXmlSchemaValidator>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifierClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{0D704EC9-74B6-5908-B3DD-56C42A47E13D}']
  { constructors } 

    {class} function init: DNCodeIdentifier;

  { static methods } 

    {class} function MakePascal(identifier: string): string;
    {class} function MakeCamel(identifier: string): string;
    {class} function MakeValid(identifier: string): string;

  end;

  [DNTypeName('System.Xml.Serialization.CodeIdentifier')]
  DNCodeIdentifier = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2F98357A-082C-333E-B586-CB7B10B8DF47}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCodeIdentifier = class(TDNGenericImport<DNCodeIdentifierClass, DNCodeIdentifier>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifiersClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{754BF04E-BD78-518F-9883-B7F51426366B}']
  { constructors } 

    {class} function init: DNCodeIdentifiers; overload;
    {class} function init(caseSensitive: Boolean): DNCodeIdentifiers; overload;

  end;

  [DNTypeName('System.Xml.Serialization.CodeIdentifiers')]
  DNCodeIdentifiers = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{ECDBBBCD-C5A6-3C1E-B216-19C56165F959}']
  { getters & setters } 

    function get_UseCamelCasing: Boolean;
    procedure set_UseCamelCasing(value: Boolean);

  { methods } 

    procedure Clear;
    function MakeRightCase(identifier: string): string;
    function MakeUnique(identifier: string): string;
    procedure AddReserved(identifier: string);
    procedure RemoveReserved(identifier: string);
    function AddUnique(identifier: string; value: DDNC.System.Private.CoreLib.DNObject): string;
    function IsInUse(identifier: string): Boolean;
    procedure Add(identifier: string; value: DDNC.System.Private.CoreLib.DNObject);
    procedure Remove(identifier: string);
    function ToArray(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UseCamelCasing: Boolean read get_UseCamelCasing write set_UseCamelCasing;
  end;

  TDNCodeIdentifiers = class(TDNGenericImport<DNCodeIdentifiersClass, DNCodeIdentifiers>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNImportContextClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2ABA1DF8-2928-5639-8155-7235EE7400E5}']
  { constructors } 

    {class} function init(identifiers: DNCodeIdentifiers; shareTypes: Boolean): DNImportContext;

  end;

  [DNTypeName('System.Xml.Serialization.ImportContext')]
  DNImportContext = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7DB64459-6CCE-328B-BFD4-F27C8CE4A84F}']
  { getters & setters } 

    function get_TypeIdentifiers: DNCodeIdentifiers;
    function get_ShareTypes: Boolean;
    function get_Warnings: DDNC.System.Collections.Specialized.DNStringCollection;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeIdentifiers: DNCodeIdentifiers read get_TypeIdentifiers;
    property ShareTypes: Boolean read get_ShareTypes;
    property Warnings: DDNC.System.Collections.Specialized.DNStringCollection read get_Warnings;
  end;

  TDNImportContext = class(TDNGenericImport<DNImportContextClass, DNImportContext>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSchemaImporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{91C97CCD-3B13-52BA-B236-CB8E3C854BA8}']
  end;

  [DNTypeName('System.Xml.Serialization.SchemaImporter')]
  DNSchemaImporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B79D1973-31F7-325D-BAF7-2AD7765896F3}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSchemaImporter = class(TDNGenericImport<DNSchemaImporterClass, DNSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaImporterClass = interface(DNSchemaImporterClass)
  ['{94EF28A2-3308-5017-A6D9-F7AF8294A0F1}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers): DNXmlSchemaImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaImporter')]
  DNXmlSchemaImporter = interface(DNSchemaImporter)
  ['{8B4B36BC-767E-33A9-91ED-3C2D2DC4823D}']
  { methods } 

    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    function ImportTypeMapping(name: DNXmlQualifiedName): DNXmlTypeMapping;
    function ImportMembersMapping(name: DNXmlQualifiedName): DNXmlMembersMapping; overload;
    function ImportAnyType(typeName: DNXmlQualifiedName; elementName: string): DNXmlMembersMapping;
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>): DNXmlMembersMapping; overload;
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>; baseType: DDNC.System.Private.CoreLib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>): DNXmlMembersMapping; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSchemaImporter = class(TDNGenericImport<DNXmlSchemaImporterClass, DNXmlSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeOverridesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4CE0E391-057C-5C56-9AC2-D4FE55E2CBFB}']
  { constructors } 

    {class} function init: DNSoapAttributeOverrides;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributeOverrides')]
  DNSoapAttributeOverrides = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{635245BB-477D-3121-82B6-1C02B763459E}']
  { getters & setters } 

    function get_Item(&type: DDNC.System.Private.CoreLib.DNType): DNSoapAttributes; overload;
    function get_Item(&type: DDNC.System.Private.CoreLib.DNType; member: string): DNSoapAttributes; overload;

  { methods } 

    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; attributes: DNSoapAttributes); overload;
    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; member: string; attributes: DNSoapAttributes); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[&type: DDNC.System.Private.CoreLib.DNType]: DNSoapAttributes read get_Item; default;
    property Item[&type: DDNC.System.Private.CoreLib.DNType; member: string]: DNSoapAttributes read get_Item; default;
  end;

  TDNSoapAttributeOverrides = class(TDNGenericImport<DNSoapAttributeOverridesClass, DNSoapAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CBB86E9E-1EF8-5030-9872-DE94CE22F925}']
  { constructors } 

    {class} function init: DNSoapAttributes; overload;
    {class} function init(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider): DNSoapAttributes; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributes')]
  DNSoapAttributes = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E0318626-CEF0-3C4E-A12E-651AAB8F4E94}']
  { getters & setters } 

    function get_SoapType: DNSoapTypeAttribute;
    procedure set_SoapType(value: DNSoapTypeAttribute);
    function get_SoapEnum: DNSoapEnumAttribute;
    procedure set_SoapEnum(value: DNSoapEnumAttribute);
    function get_SoapIgnore: Boolean;
    procedure set_SoapIgnore(value: Boolean);
    function get_SoapElement: DNSoapElementAttribute;
    procedure set_SoapElement(value: DNSoapElementAttribute);
    function get_SoapAttribute: DNSoapAttributeAttribute;
    procedure set_SoapAttribute(value: DNSoapAttributeAttribute);
    function get_SoapDefaultValue: DDNC.System.Private.CoreLib.DNObject;
    procedure set_SoapDefaultValue(value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SoapType: DNSoapTypeAttribute read get_SoapType write set_SoapType;
    property SoapEnum: DNSoapEnumAttribute read get_SoapEnum write set_SoapEnum;
    property SoapIgnore: Boolean read get_SoapIgnore write set_SoapIgnore;
    property SoapElement: DNSoapElementAttribute read get_SoapElement write set_SoapElement;
    property SoapAttribute: DNSoapAttributeAttribute read get_SoapAttribute write set_SoapAttribute;
    property SoapDefaultValue: DDNC.System.Private.CoreLib.DNObject read get_SoapDefaultValue write set_SoapDefaultValue;
  end;

  TDNSoapAttributes = class(TDNGenericImport<DNSoapAttributesClass, DNSoapAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapReflectionImporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{843F0926-3158-5221-B19B-1E31339481C4}']
  { constructors } 

    {class} function init: DNSoapReflectionImporter; overload;
    {class} function init(defaultNamespace: string): DNSoapReflectionImporter; overload;
    {class} function init(attributeOverrides: DNSoapAttributeOverrides): DNSoapReflectionImporter; overload;
    {class} function init(attributeOverrides: DNSoapAttributeOverrides; defaultNamespace: string): DNSoapReflectionImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapReflectionImporter')]
  DNSoapReflectionImporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CB970A5B-8C4E-3C52-A775-CBAA15EA4E38}']
  { methods } 

    procedure IncludeTypes(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider);
    procedure IncludeType(&type: DDNC.System.Private.CoreLib.DNType);
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSoapReflectionImporter = class(TDNGenericImport<DNSoapReflectionImporterClass, DNSoapReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaMemberClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{795F89D8-E3A3-5E1A-B471-57E15159C9D3}']
  { constructors } 

    {class} function init: DNSoapSchemaMember;

  end;

  [DNTypeName('System.Xml.Serialization.SoapSchemaMember')]
  DNSoapSchemaMember = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0BCB4584-8823-3DDE-BDDA-DB13B4E75653}']
  { getters & setters } 

    function get_MemberType: DNXmlQualifiedName;
    procedure set_MemberType(value: DNXmlQualifiedName);
    function get_MemberName: string;
    procedure set_MemberName(value: string);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MemberType: DNXmlQualifiedName read get_MemberType write set_MemberType;
    property MemberName: string read get_MemberName write set_MemberName;
  end;

  TDNSoapSchemaMember = class(TDNGenericImport<DNSoapSchemaMemberClass, DNSoapSchemaMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeOverridesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5669B824-7CD5-5683-8A2D-06D26D94083A}']
  { constructors } 

    {class} function init: DNXmlAttributeOverrides;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeOverrides')]
  DNXmlAttributeOverrides = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{67CF98E1-B387-3434-954A-7D62B65DE16B}']
  { getters & setters } 

    function get_Item(&type: DDNC.System.Private.CoreLib.DNType): DNXmlAttributes; overload;
    function get_Item(&type: DDNC.System.Private.CoreLib.DNType; member: string): DNXmlAttributes; overload;

  { methods } 

    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; attributes: DNXmlAttributes); overload;
    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; member: string; attributes: DNXmlAttributes); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[&type: DDNC.System.Private.CoreLib.DNType]: DNXmlAttributes read get_Item; default;
    property Item[&type: DDNC.System.Private.CoreLib.DNType; member: string]: DNXmlAttributes read get_Item; default;
  end;

  TDNXmlAttributeOverrides = class(TDNGenericImport<DNXmlAttributeOverridesClass, DNXmlAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{86C1B2E6-A90E-5643-B3C6-A5C6835F36E7}']
  { constructors } 

    {class} function init: DNXmlAttributes; overload;
    {class} function init(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider): DNXmlAttributes; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributes')]
  DNXmlAttributes = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5E15F212-8DEC-37DD-B4BE-DA6ECCC40579}']
  { getters & setters } 

    function get_XmlElements: DNXmlElementAttributes;
    function get_XmlAttribute: DNXmlAttributeAttribute;
    procedure set_XmlAttribute(value: DNXmlAttributeAttribute);
    function get_XmlEnum: DNXmlEnumAttribute;
    procedure set_XmlEnum(value: DNXmlEnumAttribute);
    function get_XmlText: DNXmlTextAttribute;
    procedure set_XmlText(value: DNXmlTextAttribute);
    function get_XmlArray: DNXmlArrayAttribute;
    procedure set_XmlArray(value: DNXmlArrayAttribute);
    function get_XmlArrayItems: DNXmlArrayItemAttributes;
    function get_XmlDefaultValue: DDNC.System.Private.CoreLib.DNObject;
    procedure set_XmlDefaultValue(value: DDNC.System.Private.CoreLib.DNObject);
    function get_XmlIgnore: Boolean;
    procedure set_XmlIgnore(value: Boolean);
    function get_XmlType: DNXmlTypeAttribute;
    procedure set_XmlType(value: DNXmlTypeAttribute);
    function get_XmlRoot: DNXmlRootAttribute;
    procedure set_XmlRoot(value: DNXmlRootAttribute);
    function get_XmlAnyElements: DNXmlAnyElementAttributes;
    function get_XmlAnyAttribute: DNXmlAnyAttributeAttribute;
    procedure set_XmlAnyAttribute(value: DNXmlAnyAttributeAttribute);
    function get_XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute;
    function get_Xmlns: Boolean;
    procedure set_Xmlns(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XmlElements: DNXmlElementAttributes read get_XmlElements;
    property XmlAttribute: DNXmlAttributeAttribute read get_XmlAttribute write set_XmlAttribute;
    property XmlEnum: DNXmlEnumAttribute read get_XmlEnum write set_XmlEnum;
    property XmlText: DNXmlTextAttribute read get_XmlText write set_XmlText;
    property XmlArray: DNXmlArrayAttribute read get_XmlArray write set_XmlArray;
    property XmlArrayItems: DNXmlArrayItemAttributes read get_XmlArrayItems;
    property XmlDefaultValue: DDNC.System.Private.CoreLib.DNObject read get_XmlDefaultValue write set_XmlDefaultValue;
    property XmlIgnore: Boolean read get_XmlIgnore write set_XmlIgnore;
    property XmlType: DNXmlTypeAttribute read get_XmlType write set_XmlType;
    property XmlRoot: DNXmlRootAttribute read get_XmlRoot write set_XmlRoot;
    property XmlAnyElements: DNXmlAnyElementAttributes read get_XmlAnyElements;
    property XmlAnyAttribute: DNXmlAnyAttributeAttribute read get_XmlAnyAttribute write set_XmlAnyAttribute;
    property XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute read get_XmlChoiceIdentifier;
    property Xmlns: Boolean read get_Xmlns write set_Xmlns;
  end;

  TDNXmlAttributes = class(TDNGenericImport<DNXmlAttributesClass, DNXmlAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMappingClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F5354E65-1A48-5313-99B7-0908561DF129}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMapping')]
  DNXmlMapping = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{EBEBD59D-3A9F-3BF3-959C-10FF3664E085}']
  { getters & setters } 

    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMapping = class(TDNGenericImport<DNXmlMappingClass, DNXmlMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMembersMappingClass = interface(DNXmlMappingClass)
  ['{2C883EFE-99FE-53A1-9A9E-359D8BE94FF7}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMembersMapping')]
  DNXmlMembersMapping = interface(DNXmlMapping)
  ['{EBFA8DC9-2B97-3957-9D54-D895EF79997E}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_Item(index: Int32): DNXmlMemberMapping;
    function get_Count: Int32;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeNamespace: string read get_TypeNamespace;
    property Item[index: Int32]: DNXmlMemberMapping read get_Item; default;
    property Count: Int32 read get_Count;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMembersMapping = class(TDNGenericImport<DNXmlMembersMappingClass, DNXmlMembersMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeMappingClass = interface(DNXmlMappingClass)
  ['{5B262679-1D47-57F6-BAFD-8A533B27C7C3}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlTypeMapping')]
  DNXmlTypeMapping = interface(DNXmlMapping)
  ['{B648B06A-1198-3EFF-8AC3-3B4BAA544647}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeFullName: string;
    function get_XsdTypeName: string;
    function get_XsdTypeNamespace: string;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeFullName: string read get_TypeFullName;
    property XsdTypeName: string read get_XsdTypeName;
    property XsdTypeNamespace: string read get_XsdTypeNamespace;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlTypeMapping = class(TDNGenericImport<DNXmlTypeMappingClass, DNXmlTypeMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMemberMappingClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D0C3EA4E-AA2E-5A5C-A5FF-67F078B5E397}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMemberMapping')]
  DNXmlMemberMapping = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{93607354-F253-3343-864B-ECB3154708B0}']
  { getters & setters } 

    function get_Any: Boolean;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;
    function get_MemberName: string;
    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_TypeFullName: string;
    function get_CheckSpecified: Boolean;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Any: Boolean read get_Any;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
    property MemberName: string read get_MemberName;
    property TypeName: string read get_TypeName;
    property TypeNamespace: string read get_TypeNamespace;
    property TypeFullName: string read get_TypeFullName;
    property CheckSpecified: Boolean read get_CheckSpecified;
  end;

  TDNXmlMemberMapping = class(TDNGenericImport<DNXmlMemberMappingClass, DNXmlMemberMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionImporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C0ACEFEC-9A9B-5BA4-B5AA-95B089501D13}']
  { constructors } 

    {class} function init: DNXmlReflectionImporter; overload;
    {class} function init(defaultNamespace: string): DNXmlReflectionImporter; overload;
    {class} function init(attributeOverrides: DNXmlAttributeOverrides): DNXmlReflectionImporter; overload;
    {class} function init(attributeOverrides: DNXmlAttributeOverrides; defaultNamespace: string): DNXmlReflectionImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlReflectionImporter')]
  DNXmlReflectionImporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8BCA7E24-A5E8-3CD0-9A09-2964B58EAF7C}']
  { methods } 

    procedure IncludeTypes(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider);
    procedure IncludeType(&type: DDNC.System.Private.CoreLib.DNType);
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlReflectionImporter = class(TDNGenericImport<DNXmlReflectionImporterClass, DNXmlReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionMemberClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{78694B67-DC57-5E31-A78A-C2CC0019F9AC}']
  { constructors } 

    {class} function init: DNXmlReflectionMember;

  end;

  [DNTypeName('System.Xml.Serialization.XmlReflectionMember')]
  DNXmlReflectionMember = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D97F4CAE-0F79-38A5-B0F0-4D9B2B6B7B58}']
  { getters & setters } 

    function get_MemberType: DDNC.System.Private.CoreLib.DNType;
    procedure set_MemberType(value: DDNC.System.Private.CoreLib.DNType);
    function get_XmlAttributes: DNXmlAttributes;
    procedure set_XmlAttributes(value: DNXmlAttributes);
    function get_SoapAttributes: DNSoapAttributes;
    procedure set_SoapAttributes(value: DNSoapAttributes);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_IsReturnValue: Boolean;
    procedure set_IsReturnValue(value: Boolean);
    function get_OverrideIsNullable: Boolean;
    procedure set_OverrideIsNullable(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MemberType: DDNC.System.Private.CoreLib.DNType read get_MemberType write set_MemberType;
    property XmlAttributes: DNXmlAttributes read get_XmlAttributes write set_XmlAttributes;
    property SoapAttributes: DNSoapAttributes read get_SoapAttributes write set_SoapAttributes;
    property MemberName: string read get_MemberName write set_MemberName;
    property IsReturnValue: Boolean read get_IsReturnValue write set_IsReturnValue;
    property OverrideIsNullable: Boolean read get_OverrideIsNullable write set_OverrideIsNullable;
  end;

  TDNXmlReflectionMember = class(TDNGenericImport<DNXmlReflectionMemberClass, DNXmlReflectionMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaEnumeratorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B866E59E-E2A9-5AE4-BC56-7255337A46CA}']
  { constructors } 

    {class} function init(list: DNXmlSchemas): DNXmlSchemaEnumerator;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaEnumerator')]
  DNXmlSchemaEnumerator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{79EC60E9-68AE-38DA-9027-BFB3ABC5C939}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaEnumerator = class(TDNGenericImport<DNXmlSchemaEnumeratorClass, DNXmlSchemaEnumerator>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaExporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{80AAF79F-E7EE-5F65-9748-84C7A62DE09F}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaExporter;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaExporter')]
  DNXmlSchemaExporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{ED2E9E7F-CED3-3D19-9E61-BE6FD23B744E}']
  { methods } 

    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping); overload;
    function ExportTypeMapping(xmlMembersMapping: DNXmlMembersMapping): DNXmlQualifiedName; overload;
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping); overload;
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping; exportEnclosingType: Boolean); overload;
    function ExportAnyType(ns: string): string; overload;
    function ExportAnyType(members: DNXmlMembersMapping): string; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSchemaExporter = class(TDNGenericImport<DNXmlSchemaExporterClass, DNXmlSchemaExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationGeneratedCodeClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{10ADEB42-3E11-5F15-B844-EE19CDA5F7F8}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationGeneratedCode')]
  DNXmlSerializationGeneratedCode = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0CDEA458-5655-31B1-B41C-A7B4C0C6023A}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializationGeneratedCode = class(TDNGenericImport<DNXmlSerializationGeneratedCodeClass, DNXmlSerializationGeneratedCode>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationReaderClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{D4F1D07A-8CA4-5B10-A008-389F4123C78B}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationReader')]
  DNXmlSerializationReader = interface(DNXmlSerializationGeneratedCode)
  ['{3E28E6C1-A3EA-3B19-8B60-E69DB1E7B2E2}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializationReader = class(TDNGenericImport<DNXmlSerializationReaderClass, DNXmlSerializationReader>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationWriterClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{118820F5-19AB-5CCD-807B-1C9B1F41AD02}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationWriter')]
  DNXmlSerializationWriter = interface(DNXmlSerializationGeneratedCode)
  ['{B155CE70-2A3A-3336-9408-F66D0C244E19}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializationWriter = class(TDNGenericImport<DNXmlSerializationWriterClass, DNXmlSerializationWriter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C23B1BBF-C0FD-569B-BE69-F0E2948A63BF}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    {class} function init(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;

  { static methods } 

    {class} function FromMappings(mappings: TArray<DNXmlMapping>): TArray<DNXmlSerializer>; overload;
    {class} function FromMappings(mappings: TArray<DNXmlMapping>; &type: DDNC.System.Private.CoreLib.DNType): TArray<DNXmlSerializer>; overload;
    {class} function FromTypes(types: TArray<DDNC.System.Private.CoreLib.DNType>): TArray<DNXmlSerializer>;
    {class} function GetXmlSerializerAssemblyName(&type: DDNC.System.Private.CoreLib.DNType): string; overload;
    {class} function GetXmlSerializerAssemblyName(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): string; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializer')]
  DNXmlSerializer = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0D03A430-C945-3716-8F0D-9103A926A3F7}']
  { events } 

    procedure add_UnknownNode(value: DNXmlNodeEventHandler);
    procedure remove_UnknownNode(value: DNXmlNodeEventHandler);
    procedure add_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure remove_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure add_UnknownElement(value: DNXmlElementEventHandler);
    procedure remove_UnknownElement(value: DNXmlElementEventHandler);
    procedure add_UnreferencedObject(value: DNUnreferencedObjectEventHandler);
    procedure remove_UnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    procedure Serialize(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Serialize(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(stream: DDNC.System.Private.CoreLib.DNStream; o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Serialize(stream: DDNC.System.Private.CoreLib.DNStream; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string; id: string); overload;
    function Deserialize(stream: DDNC.System.Private.CoreLib.DNStream): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(textReader: DDNC.System.Private.CoreLib.DNTextReader): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; events: DNXmlDeserializationEvents): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string; events: DNXmlDeserializationEvents): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanDeserialize(xmlReader: DNXmlReader): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializer = class(TDNGenericImport<DNXmlSerializerClass, DNXmlSerializer>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerFactoryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4A9076F6-3FCA-5F0C-877C-86CE406900F9}']
  { constructors } 

    {class} function init: DNXmlSerializerFactory;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerFactory')]
  DNXmlSerializerFactory = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{33FDD1AA-81D0-358E-A088-183C3484923E}']
  { methods } 

    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    function CreateSerializer(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializerFactory = class(TDNGenericImport<DNXmlSerializerFactoryClass, DNXmlSerializerFactory>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerImplementationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{22B930FB-AF2F-531E-AC6B-0C77000AD0CB}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerImplementation')]
  DNXmlSerializerImplementation = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A32A0734-11EC-315B-93E9-3FDD028B4986}']
  { getters & setters } 

    function get_Reader: DNXmlSerializationReader;
    function get_Writer: DNXmlSerializationWriter;
    function get_ReadMethods: DDNC.System.Private.CoreLib.DNHashtable;
    function get_WriteMethods: DDNC.System.Private.CoreLib.DNHashtable;
    function get_TypedSerializers: DDNC.System.Private.CoreLib.DNHashtable;

  { methods } 

    function CanSerialize(&type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetSerializer(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializer;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Reader: DNXmlSerializationReader read get_Reader;
    property Writer: DNXmlSerializationWriter read get_Writer;
    property ReadMethods: DDNC.System.Private.CoreLib.DNHashtable read get_ReadMethods;
    property WriteMethods: DDNC.System.Private.CoreLib.DNHashtable read get_WriteMethods;
    property TypedSerializers: DDNC.System.Private.CoreLib.DNHashtable read get_TypedSerializers;
  end;

  TDNXmlSerializerImplementation = class(TDNGenericImport<DNXmlSerializerImplementationClass, DNXmlSerializerImplementation>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerNamespacesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E1A5B37D-6A90-5307-AA73-DF3A618ECF4D}']
  { constructors } 

    {class} function init: DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: DNXmlSerializerNamespaces): DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: TArray<DNXmlQualifiedName>): DNXmlSerializerNamespaces; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerNamespaces')]
  DNXmlSerializerNamespaces = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E52E5D94-EED3-3BF4-84C8-256034B75D8B}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(prefix: string; ns: string);
    function ToArray: TArray<DNXmlQualifiedName>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlSerializerNamespaces = class(TDNGenericImport<DNXmlSerializerNamespacesClass, DNXmlSerializerNamespaces>) end;

  //-------------namespace: System.Xml----------------
  DNXmlConvertClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D52DC6C3-7BA7-56A5-8DCE-5485477E6A67}']
  { constructors } 

    {class} function init: DNXmlConvert;

  { static methods } 

    {class} function ToDateTime(s: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTime(s: string; format: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTime(s: string; formats: TArray<string>): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTime(s: string; dateTimeOption: DNXmlDateTimeSerializationMode): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTimeOffset(s: string): DDNC.System.Private.CoreLib.DNDateTimeOffset; overload;
    {class} function ToDateTimeOffset(s: string; format: string): DDNC.System.Private.CoreLib.DNDateTimeOffset; overload;
    {class} function ToDateTimeOffset(s: string; formats: TArray<string>): DDNC.System.Private.CoreLib.DNDateTimeOffset; overload;
    {class} function ToGuid(s: string): DDNC.System.Private.CoreLib.DNGuid;
    {class} function EncodeName(name: string): string;
    {class} function EncodeNmToken(name: string): string;
    {class} function EncodeLocalName(name: string): string;
    {class} function DecodeName(name: string): string;
    {class} function VerifyName(name: string): string;
    {class} function VerifyNCName(name: string): string;
    {class} function VerifyTOKEN(token: string): string;
    {class} function VerifyNMTOKEN(name: string): string;
    {class} function VerifyXmlChars(content: string): string;
    {class} function VerifyPublicId(publicId: string): string;
    {class} function VerifyWhitespace(content: string): string;
    {class} function IsStartNCNameChar(ch: Char): Boolean;
    {class} function IsNCNameChar(ch: Char): Boolean;
    {class} function IsXmlChar(ch: Char): Boolean;
    {class} function IsXmlSurrogatePair(lowChar: Char; highChar: Char): Boolean;
    {class} function IsPublicIdChar(ch: Char): Boolean;
    {class} function IsWhitespaceChar(ch: Char): Boolean;
    {class} function ToString(value: Boolean): string; overload;
    {class} function ToString(value: Char): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDecimal): string; overload;
    {class} function ToString(value: SByte): string; overload;
    {class} function ToString(value: Int16): string; overload;
    {class} function ToString(value: Int32): string; overload;
    {class} function ToString(value: Int64): string; overload;
    {class} function ToString(value: Byte): string; overload;
    {class} function ToString(value: UInt16): string; overload;
    {class} function ToString(value: UInt32): string; overload;
    {class} function ToString(value: UInt64): string; overload;
    {class} function ToString(value: Single): string; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNTimeSpan): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime; format: string): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime; dateTimeOption: DNXmlDateTimeSerializationMode): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTimeOffset): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTimeOffset; format: string): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNGuid): string; overload;
    {class} function ToBoolean(s: string): Boolean;
    {class} function ToChar(s: string): Char;
    {class} function ToDecimal(s: string): DDNC.System.Private.CoreLib.DNDecimal;
    {class} function ToSByte(s: string): SByte;
    {class} function ToInt16(s: string): Int16;
    {class} function ToInt32(s: string): Int32;
    {class} function ToInt64(s: string): Int64;
    {class} function ToByte(s: string): Byte;
    {class} function ToUInt16(s: string): UInt16;
    {class} function ToUInt32(s: string): UInt32;
    {class} function ToUInt64(s: string): UInt64;
    {class} function ToSingle(s: string): Single;
    {class} function ToDouble(s: string): Double;
    {class} function ToTimeSpan(s: string): DDNC.System.Private.CoreLib.DNTimeSpan;

  end;

  [DNTypeName('System.Xml.XmlConvert')]
  DNXmlConvert = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{28AE37A3-A655-3303-8D34-FD175176EECF}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlConvert = class(TDNGenericImport<DNXmlConvertClass, DNXmlConvert>) end;

  //-------------namespace: System.Xml----------------
  DNXmlImplementationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{57AFC1E4-A8A3-5D84-96E1-90D26F533222}']
  { constructors } 

    {class} function init: DNXmlImplementation; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlImplementation; overload;

  end;

  [DNTypeName('System.Xml.XmlImplementation')]
  DNXmlImplementation = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{96B9A48D-C0B1-3A25-ACFA-41159E51D68B}']
  { methods } 

    function HasFeature(strFeature: string; strVersion: string): Boolean;
    function CreateDocument: DNXmlDocument;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlImplementation = class(TDNGenericImport<DNXmlImplementationClass, DNXmlImplementation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamedNodeMapClass = interface(DNObjectClass)
  ['{92F02A60-03D7-5E32-A057-FF6FA2F1A8E5}']
  end;

  [DNTypeName('System.Xml.XmlNamedNodeMap')]
  DNXmlNamedNodeMap = interface(DDNC.System.Private.CoreLib.DNIEnumerable)
  ['{C1754B48-20A3-3E63-BE33-3D61C3126FE2}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetNamedItem(name: string): DNXmlNode; overload;
    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlNamedNodeMap = class(TDNGenericImport<DNXmlNamedNodeMapClass, DNXmlNamedNodeMap>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeCollectionClass = interface(DNXmlNamedNodeMapClass)
  ['{4813D486-E527-50AC-9F78-B8824C76D442}']
  end;

  [DNTypeName('System.Xml.XmlAttributeCollection')]
  DNXmlAttributeCollection = interface(DNXmlNamedNodeMap)
  ['{82CC0606-7FA9-3E06-BDAF-90E8E638EDEB}']
  { getters & setters } 

    function get_ItemOf(i: Int32): DNXmlAttribute; overload;
    function get_ItemOf(name: string): DNXmlAttribute; overload;
    function get_ItemOf(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function get_Count: Int32;

  { methods } 

    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function Prepend(node: DNXmlAttribute): DNXmlAttribute;
    function Append(node: DNXmlAttribute): DNXmlAttribute;
    function InsertBefore(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function InsertAfter(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function Remove(node: DNXmlAttribute): DNXmlAttribute;
    function RemoveAt(i: Int32): DNXmlAttribute;
    procedure RemoveAll;
    procedure CopyTo(&array: TArray<DNXmlAttribute>; index: Int32);
    function GetNamedItem(name: string): DNXmlNode; overload;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ItemOf[i: Int32]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[name: string]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[localName: string; namespaceURI: string]: DNXmlAttribute read get_ItemOf; default;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAttributeCollection = class(TDNGenericImport<DNXmlAttributeCollectionClass, DNXmlAttributeCollection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamespaceManagerClass = interface(DNObjectClass)
  ['{4C229AF8-B6B9-5D46-88F3-4E94B9B76CD1}']
  { constructors } 

    {class} function init(nameTable: DNXmlNameTable): DNXmlNamespaceManager;

  end;

  [DNTypeName('System.Xml.XmlNamespaceManager')]
  DNXmlNamespaceManager = interface(DNIXmlNamespaceResolver)
  ['{68403AA2-44C3-3A8C-A1AA-D220618760A0}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    procedure PushScope;
    function PopScope: Boolean;
    procedure AddNamespace(prefix: string; uri: string);
    procedure RemoveNamespace(prefix: string; uri: string);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(uri: string): string;
    function HasNamespace(prefix: string): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXmlNamespaceManager = class(TDNGenericImport<DNXmlNamespaceManagerClass, DNXmlNamespaceManager>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltContextClass = interface(DNXmlNamespaceManagerClass)
  ['{C5286FC0-D017-55B1-AC00-CE5FF3E1B4D5}']
  end;

  [DNTypeName('System.Xml.Xsl.XsltContext')]
  DNXsltContext = interface(DNXmlNamespaceManager)
  ['{C2CDBAB1-1EC1-31C8-9F14-466EDE05B60A}']
  { getters & setters } 

    function get_Whitespace: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    function ResolveVariable(prefix: string; name: string): DNIXsltContextVariable;
    function ResolveFunction(prefix: string; name: string; ArgTypes: TArray<DNXPathResultType>): DNIXsltContextFunction;
    function PreserveWhitespace(node: DNXPathNavigator): Boolean;
    function CompareDocument(baseUri: string; nextbaseUri: string): Int32;
    procedure PushScope;
    function PopScope: Boolean;
    procedure AddNamespace(prefix: string; uri: string);
    procedure RemoveNamespace(prefix: string; uri: string);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(uri: string): string;
    function HasNamespace(prefix: string): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Whitespace: Boolean read get_Whitespace;
    property NameTable: DNXmlNameTable read get_NameTable;
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXsltContext = class(TDNGenericImport<DNXsltContextClass, DNXsltContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNameTableClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{565F84F7-50AD-5D57-8969-118679CFAAC5}']
  end;

  [DNTypeName('System.Xml.XmlNameTable')]
  DNXmlNameTable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E43593C3-63F0-3A66-AE90-F0338D3FC5C5}']
  { methods } 

    function Get(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Get(&array: string): string; overload;
    function Add(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Add(&array: string): string; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlNameTable = class(TDNGenericImport<DNXmlNameTableClass, DNXmlNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNNameTableClass = interface(DNXmlNameTableClass)
  ['{E948720E-9F0B-5A9B-87A6-66E229FEE464}']
  { constructors } 

    {class} function init: DNNameTable;

  end;

  [DNTypeName('System.Xml.NameTable')]
  DNNameTable = interface(DNXmlNameTable)
  ['{92E25221-F870-3624-887D-0C509A1F6F1A}']
  { methods } 

    function Add(key: string): string; overload;
    function Add(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    function Get(value: string): string; overload;
    function Get(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNNameTable = class(TDNGenericImport<DNNameTableClass, DNNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeClass = interface(DNObjectClass)
  ['{7DF89BA7-8C6C-5B53-9048-CC430094A05F}']
  end;

  [DNTypeName('System.Xml.XmlNode')]
  DNXmlNode = interface(DDNC.System.Private.CoreLib.DNICloneable)
  ['{E46E9271-99A8-3411-BB2A-E290230EE2F3}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    function CloneNode(deep: Boolean): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNode = class(TDNGenericImport<DNXmlNodeClass, DNXmlNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeClass = interface(DNXmlNodeClass)
  ['{2B14077B-4ECF-5FCB-B87A-75E5A1BB44F8}']
  { static getter & setter } 

    procedure set_InnerText(value: string);
    procedure set_InnerXml(value: string);

  { static propertys } 

    {class} property InnerText: string write set_InnerText;
    {class} property InnerXml: string write set_InnerXml;
  end;

  [DNTypeName('System.Xml.XmlAttribute')]
  DNXmlAttribute = interface(DNXmlNode)
  ['{1098A13E-299A-3986-BEAA-5928E76E589F}']
  { getters & setters } 

    function get_ParentNode: DNXmlNode;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_OwnerDocument: DNXmlDocument;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    procedure set_InnerText(value: string);
    function get_Specified: Boolean;
    function get_OwnerElement: DNXmlElement;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ParentNode: DNXmlNode read get_ParentNode;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Value: string read get_Value write set_Value;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerText: string write set_InnerText;
    property Specified: Boolean read get_Specified;
    property OwnerElement: DNXmlElement read get_OwnerElement;
    property InnerXml: string write set_InnerXml;
    property BaseURI: string read get_BaseURI;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlAttribute = class(TDNGenericImport<DNXmlAttributeClass, DNXmlAttribute>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentClass = interface(DNXmlNodeClass)
  ['{19482996-2668-5281-A3D3-02C058648B4F}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    {class} function init: DNXmlDocument; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlDocument; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  [DNTypeName('System.Xml.XmlDocument')]
  DNXmlDocument = interface(DNXmlNode)
  ['{2BA21BFB-72B8-3134-9FAD-09F1227DF5F6}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_DocumentType: DNXmlDocumentType;
    function get_Implementation: DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DNXmlElement;
    function get_OwnerDocument: DNXmlDocument;
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_NameTable: DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DNXmlNodeChangedEventHandler);

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function CreateAttribute(name: string): DNXmlAttribute; overload;
    function CreateCDataSection(data: string): DNXmlCDataSection;
    function CreateComment(data: string): DNXmlComment;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DNXmlDocumentType;
    function CreateDocumentFragment: DNXmlDocumentFragment;
    function CreateElement(name: string): DNXmlElement; overload;
    function CreateEntityReference(name: string): DNXmlEntityReference;
    function CreateProcessingInstruction(target: string; data: string): DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DNXmlDeclaration;
    function CreateTextNode(text: string): DNXmlText;
    function CreateSignificantWhitespace(text: string): DNXmlSignificantWhitespace;
    function CreateNavigator: DNXPathNavigator;
    function CreateWhitespace(text: string): DNXmlWhitespace;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function GetElementById(elementId: string): DNXmlElement;
    function ImportNode(node: DNXmlNode; deep: Boolean): DNXmlNode;
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DNXmlElement; overload;
    function CreateNode(&type: DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DNXmlNode; overload;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DNXmlNode; overload;
    function CreateNode(&type: DNXmlNodeType; name: string; namespaceURI: string): DNXmlNode; overload;
    function ReadNode(reader: DNXmlReader): DNXmlNode;
    procedure Load(filename: string); overload;
    procedure Load(inStream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Load(txtReader: DDNC.System.Private.CoreLib.DNTextReader); overload;
    procedure Load(reader: DNXmlReader); overload;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Save(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Save(w: DNXmlWriter); overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(xw: DNXmlWriter);
    procedure Validate(validationEventHandler: DNValidationEventHandler); overload;
    procedure Validate(validationEventHandler: DNValidationEventHandler; nodeToValidate: DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property DocumentType: DNXmlDocumentType read get_DocumentType;
    property &Implementation: DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DNXmlElement read get_DocumentElement;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property NameTable: DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocument = class(TDNGenericImport<DNXmlDocumentClass, DNXmlDocument>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentFragmentClass = interface(DNXmlNodeClass)
  ['{6FED65EC-1E99-5BB7-93B8-C143B1B65E12}']
  end;

  [DNTypeName('System.Xml.XmlDocumentFragment')]
  DNXmlDocumentFragment = interface(DNXmlNode)
  ['{6BA31230-B3A2-319D-A3B1-D7BB0E4FE125}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentFragment = class(TDNGenericImport<DNXmlDocumentFragmentClass, DNXmlDocumentFragment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityClass = interface(DNXmlNodeClass)
  ['{64A6E6AE-B5C9-512F-9076-B71E7649B5F5}']
  end;

  [DNTypeName('System.Xml.XmlEntity')]
  DNXmlEntity = interface(DNXmlNode)
  ['{DF1366EA-9C77-3806-B77A-F413130B85BD}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Name: string;
    function get_LocalName: string;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_NotationName: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property InnerText: string read get_InnerText write set_InnerText;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property NotationName: string read get_NotationName;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntity = class(TDNGenericImport<DNXmlEntityClass, DNXmlEntity>) end;

  //-------------namespace: System.Xml----------------
  DNXmlLinkedNodeClass = interface(DNXmlNodeClass)
  ['{E5E44404-14E4-5E89-AD9A-5D0B6C0131B3}']
  end;

  [DNTypeName('System.Xml.XmlLinkedNode')]
  DNXmlLinkedNode = interface(DNXmlNode)
  ['{2B4E6F60-2F28-36DD-B064-553C3F22D579}']
  { getters & setters } 

    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    function CloneNode(deep: Boolean): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlLinkedNode = class(TDNGenericImport<DNXmlLinkedNodeClass, DNXmlLinkedNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCharacterDataClass = interface(DNXmlLinkedNodeClass)
  ['{3986EF67-3E99-53ED-A243-9DE214F49197}']
  end;

  [DNTypeName('System.Xml.XmlCharacterData')]
  DNXmlCharacterData = interface(DNXmlLinkedNode)
  ['{E1DF8379-934B-32D1-B969-7D86C9AFBFDE}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    function CloneNode(deep: Boolean): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Name: string read get_Name;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlCharacterData = class(TDNGenericImport<DNXmlCharacterDataClass, DNXmlCharacterData>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCDataSectionClass = interface(DNXmlCharacterDataClass)
  ['{A2606E3A-AD58-5ADA-AF10-D29FAF2ECC57}']
  end;

  [DNTypeName('System.Xml.XmlCDataSection')]
  DNXmlCDataSection = interface(DNXmlCharacterData)
  ['{FD509AA3-E20A-3F2F-9E76-1E649F8233B4}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_PreviousText: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property PreviousText: DNXmlNode read get_PreviousText;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlCDataSection = class(TDNGenericImport<DNXmlCDataSectionClass, DNXmlCDataSection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCommentClass = interface(DNXmlCharacterDataClass)
  ['{53FD347D-0C36-5D42-AC9D-10C71046BF6F}']
  end;

  [DNTypeName('System.Xml.XmlComment')]
  DNXmlComment = interface(DNXmlCharacterData)
  ['{384ECD2E-721B-310F-9F42-7D428B192E3C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlComment = class(TDNGenericImport<DNXmlCommentClass, DNXmlComment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSignificantWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{EE542439-2B76-5422-80F4-C54275FF4275}']
  end;

  [DNTypeName('System.Xml.XmlSignificantWhitespace')]
  DNXmlSignificantWhitespace = interface(DNXmlCharacterData)
  ['{E71C6003-1372-3C2F-A998-A4B89D19918F}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlSignificantWhitespace = class(TDNGenericImport<DNXmlSignificantWhitespaceClass, DNXmlSignificantWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextClass = interface(DNXmlCharacterDataClass)
  ['{E88A88AB-DACF-565F-96C8-406B4452F96F}']
  end;

  [DNTypeName('System.Xml.XmlText')]
  DNXmlText = interface(DNXmlCharacterData)
  ['{8539190A-1DA9-39CD-8D53-3749E358382B}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function SplitText(offset: Int32): DNXmlText;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlText = class(TDNGenericImport<DNXmlTextClass, DNXmlText>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{EFF76153-4656-54DE-8793-641EB407E9D9}']
  end;

  [DNTypeName('System.Xml.XmlWhitespace')]
  DNXmlWhitespace = interface(DNXmlCharacterData)
  ['{317E7225-AD9C-3B61-86BE-DF89B444468F}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlWhitespace = class(TDNGenericImport<DNXmlWhitespaceClass, DNXmlWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDeclarationClass = interface(DNXmlLinkedNodeClass)
  ['{F1A70659-3F33-5EC9-9AB7-7F86850D590B}']
  end;

  [DNTypeName('System.Xml.XmlDeclaration')]
  DNXmlDeclaration = interface(DNXmlLinkedNode)
  ['{61F3EE01-4EE3-338B-8841-BB7DE7010074}']
  { getters & setters } 

    function get_Version: string;
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Standalone: string;
    procedure set_Standalone(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Version: string read get_Version;
    property Encoding: string read get_Encoding write set_Encoding;
    property Standalone: string read get_Standalone write set_Standalone;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDeclaration = class(TDNGenericImport<DNXmlDeclarationClass, DNXmlDeclaration>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentTypeClass = interface(DNXmlLinkedNodeClass)
  ['{5801536A-E512-5824-B00F-9F682EA22A82}']
  end;

  [DNTypeName('System.Xml.XmlDocumentType')]
  DNXmlDocumentType = interface(DNXmlLinkedNode)
  ['{F21807CA-CF1E-31FD-987C-345CA02365CF}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_Entities: DNXmlNamedNodeMap;
    function get_Notations: DNXmlNamedNodeMap;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_InternalSubset: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Entities: DNXmlNamedNodeMap read get_Entities;
    property Notations: DNXmlNamedNodeMap read get_Notations;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property InternalSubset: string read get_InternalSubset;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentType = class(TDNGenericImport<DNXmlDocumentTypeClass, DNXmlDocumentType>) end;

  //-------------namespace: System.Xml----------------
  DNXmlElementClass = interface(DNXmlLinkedNodeClass)
  ['{F993CD72-7E3B-5970-85E4-C16820F8F1E1}']
  end;

  [DNTypeName('System.Xml.XmlElement')]
  DNXmlElement = interface(DNXmlLinkedNode)
  ['{C9160A07-E4C1-30CF-99EC-3CDF2A3F4265}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_IsEmpty: Boolean;
    procedure set_IsEmpty(value: Boolean);
    function get_Attributes: DNXmlAttributeCollection;
    function get_HasAttributes: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NextSibling: DNXmlNode;
    function get_PreviousSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function GetAttribute(name: string): string; overload;
    procedure SetAttribute(name: string; value: string); overload;
    procedure RemoveAttribute(name: string); overload;
    function GetAttributeNode(name: string): DNXmlAttribute; overload;
    function SetAttributeNode(newAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function RemoveAttributeNode(oldAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function SetAttribute(localName: string; namespaceURI: string; value: string): string; overload;
    procedure RemoveAttribute(localName: string; namespaceURI: string); overload;
    function GetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function SetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function RemoveAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function HasAttribute(name: string): Boolean; overload;
    function HasAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function RemoveAttributeAt(i: Int32): DNXmlNode;
    procedure RemoveAllAttributes;
    procedure RemoveAll;
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property IsEmpty: Boolean read get_IsEmpty write set_IsEmpty;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property HasAttributes: Boolean read get_HasAttributes;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property InnerText: string read get_InnerText write set_InnerText;
    property NextSibling: DNXmlNode read get_NextSibling;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlElement = class(TDNGenericImport<DNXmlElementClass, DNXmlElement>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityReferenceClass = interface(DNXmlLinkedNodeClass)
  ['{314B146F-F8DE-5A39-9349-D48C23BEF8F2}']
  end;

  [DNTypeName('System.Xml.XmlEntityReference')]
  DNXmlEntityReference = interface(DNXmlLinkedNode)
  ['{86307D18-E1D3-3CEF-A1BD-CD012EE87CD8}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_BaseURI: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property BaseURI: string read get_BaseURI;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntityReference = class(TDNGenericImport<DNXmlEntityReferenceClass, DNXmlEntityReference>) end;

  //-------------namespace: System.Xml----------------
  DNXmlProcessingInstructionClass = interface(DNXmlLinkedNodeClass)
  ['{3BA32868-7775-5F05-8157-A1EA0F57F5F5}']
  end;

  [DNTypeName('System.Xml.XmlProcessingInstruction')]
  DNXmlProcessingInstruction = interface(DNXmlLinkedNode)
  ['{180CE57A-754B-3E98-BE8F-D11FF1F1F2DC}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Target: string;
    function get_Data: string;
    procedure set_Data(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property Target: string read get_Target;
    property Data: string read get_Data write set_Data;
    property InnerText: string read get_InnerText write set_InnerText;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlProcessingInstruction = class(TDNGenericImport<DNXmlProcessingInstructionClass, DNXmlProcessingInstruction>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNotationClass = interface(DNXmlNodeClass)
  ['{2F912F00-28F1-5B57-BC92-8FA860C7A451}']
  end;

  [DNTypeName('System.Xml.XmlNotation')]
  DNXmlNotation = interface(DNXmlNode)
  ['{BA2FE95E-8EFB-3B3D-BC51-4FA7C7B7388D}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNotation = class(TDNGenericImport<DNXmlNotationClass, DNXmlNotation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeListClass = interface(DNObjectClass)
  ['{B5162EB6-6882-56F1-A0EA-E5F5D94234FF}']
  end;

  [DNTypeName('System.Xml.XmlNodeList')]
  DNXmlNodeList = interface(DDNC.System.Private.CoreLib.DNIEnumerable)
  ['{8A546D68-8D22-35DF-B291-088202A2B5D5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ItemOf(i: Int32): DNXmlNode;

  { methods } 

    function Item(index: Int32): DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property ItemOf[i: Int32]: DNXmlNode read get_ItemOf; default;
  end;

  TDNXmlNodeList = class(TDNGenericImport<DNXmlNodeListClass, DNXmlNodeList>) end;

  //-------------namespace: System.Xml----------------
  DNXmlParserContextClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2684A2A6-6240-5D0F-8C3D-D1942F1983BC}']
  { constructors } 

    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDNC.System.Private.CoreLib.DNEncoding): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDNC.System.Private.CoreLib.DNEncoding): DNXmlParserContext; overload;

  end;

  [DNTypeName('System.Xml.XmlParserContext')]
  DNXmlParserContext = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{10912961-3570-33AE-9403-89730BC6CC2C}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    function get_NamespaceManager: DNXmlNamespaceManager;
    procedure set_NamespaceManager(value: DNXmlNamespaceManager);
    function get_DocTypeName: string;
    procedure set_DocTypeName(value: string);
    function get_PublicId: string;
    procedure set_PublicId(value: string);
    function get_SystemId: string;
    procedure set_SystemId(value: string);
    function get_BaseURI: string;
    procedure set_BaseURI(value: string);
    function get_InternalSubset: string;
    procedure set_InternalSubset(value: string);
    function get_XmlLang: string;
    procedure set_XmlLang(value: string);
    function get_XmlSpace: DNXmlSpace;
    procedure set_XmlSpace(value: DNXmlSpace);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_Encoding(value: DDNC.System.Private.CoreLib.DNEncoding);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property NamespaceManager: DNXmlNamespaceManager read get_NamespaceManager write set_NamespaceManager;
    property DocTypeName: string read get_DocTypeName write set_DocTypeName;
    property PublicId: string read get_PublicId write set_PublicId;
    property SystemId: string read get_SystemId write set_SystemId;
    property BaseURI: string read get_BaseURI write set_BaseURI;
    property InternalSubset: string read get_InternalSubset write set_InternalSubset;
    property XmlLang: string read get_XmlLang write set_XmlLang;
    property XmlSpace: DNXmlSpace read get_XmlSpace write set_XmlSpace;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding write set_Encoding;
  end;

  TDNXmlParserContext = class(TDNGenericImport<DNXmlParserContextClass, DNXmlParserContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlQualifiedNameClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2BA95A2C-FA30-5C8E-A89D-618FE706D93F}']
  { constructors } 

    {class} function init: DNXmlQualifiedName; overload;
    {class} function init(name: string): DNXmlQualifiedName; overload;
    {class} function init(name: string; ns: string): DNXmlQualifiedName; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQualifiedName;

  { static fields } 

    {class} property Empty: DNXmlQualifiedName read __fakeFieldGet_Empty;

  { static methods } 

    {class} function ToString(name: string; ns: string): string; overload;

  end;

  [DNTypeName('System.Xml.XmlQualifiedName')]
  DNXmlQualifiedName = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2FB2F106-EEBA-366A-B8D4-AB9203A45C4E}']
  { getters & setters } 

    function get_Namespace: string;
    function get_Name: string;
    function get_IsEmpty: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function ToString: string; overload;
    function Equals(other: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Namespace: string read get_Namespace;
    property Name: string read get_Name;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNXmlQualifiedName = class(TDNGenericImport<DNXmlQualifiedNameClass, DNXmlQualifiedName>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderClass = interface(DNObjectClass)
  ['{F1825936-0C8E-5201-A4E3-FE581B15B576}']
  { static methods } 

    {class} function Create(inputUri: string): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(reader: DNXmlReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function IsName(str: string): Boolean;
    {class} function IsNameToken(str: string): Boolean;

  end;

  [DNTypeName('System.Xml.XmlReader')]
  DNXmlReader = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{062FAC46-B840-326C-AD02-69B6937D857B}']
  { getters & setters } 

    function get_Settings: DNXmlReaderSettings;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_AttributeCount: Int32;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { methods } 

    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetAttribute(name: string): string; overload;
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(name: string; ns: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Settings: DNXmlReaderSettings read get_Settings;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property AttributeCount: Int32 read get_AttributeCount;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlReader = class(TDNGenericImport<DNXmlReaderClass, DNXmlReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeReaderClass = interface(DNXmlReaderClass)
  ['{2071FFC6-0CEC-5DF4-A1E3-C3EAF8A3B650}']
  { constructors } 

    {class} function init(node: DNXmlNode): DNXmlNodeReader;

  end;

  [DNTypeName('System.Xml.XmlNodeReader')]
  DNXmlNodeReader = interface(DNXmlReader)
  ['{934260B7-60C4-3844-B4A5-AA0F364C015A}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_CanResolveEntity: Boolean;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_HasAttributes: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_CanReadBinaryContent: Boolean;
    function get_Settings: DNXmlReaderSettings;
    function get_QuoteChar: Char;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    function GetAttribute(attributeIndex: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(name: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(attributeIndex: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function ReadString: string;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadAttributeValue: Boolean;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property HasAttributes: Boolean read get_HasAttributes;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property Settings: DNXmlReaderSettings read get_Settings;
    property QuoteChar: Char read get_QuoteChar;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
  end;

  TDNXmlNodeReader = class(TDNGenericImport<DNXmlNodeReaderClass, DNXmlNodeReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextReaderClass = interface(DNXmlReaderClass)
  ['{E67C186B-76CE-56EE-AA2D-FE8C219DDCEE}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(input: DDNC.System.Private.CoreLib.DNStream): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNStream): DNXmlTextReader; overload;
    {class} function init(input: DDNC.System.Private.CoreLib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(input: DDNC.System.Private.CoreLib.DNTextReader): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNTextReader): DNXmlTextReader; overload;
    {class} function init(input: DDNC.System.Private.CoreLib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(xmlFragment: DDNC.System.Private.CoreLib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    {class} function init(url: string): DNXmlTextReader; overload;
    {class} function init(url: string; nt: DNXmlNameTable): DNXmlTextReader; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlTextReader')]
  DNXmlTextReader = interface(DNXmlReader)
  ['{88D5EAB0-CA3D-38F3-9132-8F6A9A8AA990}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Normalization: Boolean;
    procedure set_Normalization(value: Boolean);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_HasAttributes: Boolean;

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function HasLineInfo: Boolean;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    procedure ResetState;
    function GetRemainder: DDNC.System.Private.CoreLib.DNTextReader;
    function ReadChars(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadBase64(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    function ReadBinHex(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Normalization: Boolean read get_Normalization write set_Normalization;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property Settings: DNXmlReaderSettings read get_Settings;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlTextReader = class(TDNGenericImport<DNXmlTextReaderClass, DNXmlTextReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlValidatingReaderClass = interface(DNXmlReaderClass)
  ['{EEC1F13C-5DEB-5060-8419-2FACA765D440}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(reader: DNXmlReader): DNXmlValidatingReader; overload;
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;
    {class} function init(xmlFragment: DDNC.System.Private.CoreLib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlValidatingReader')]
  DNXmlValidatingReader = interface(DNXmlReader)
  ['{E612EE13-3508-3CA8-B10C-4F05EDEF5406}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_Reader: DNXmlReader;
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_Schemas: DNXmlSchemaCollection;
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function HasLineInfo: Boolean;
    function ReadTypedValue: DDNC.System.Private.CoreLib.DNObject;
    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure Skip;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SchemaType: DDNC.System.Private.CoreLib.DNObject read get_SchemaType;
    property Reader: DNXmlReader read get_Reader;
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    property Schemas: DNXmlSchemaCollection read get_Schemas;
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property Settings: DNXmlReaderSettings read get_Settings;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlValidatingReader = class(TDNGenericImport<DNXmlValidatingReaderClass, DNXmlValidatingReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DD5BA8DF-7298-5D1F-8B00-89D4616488EB}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlReaderSettings;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlReaderSettings')]
  DNXmlReaderSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{9286A4B7-DE93-3E80-8744-1E25AA72B964}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineNumberOffset: Int32;
    procedure set_LineNumberOffset(value: Int32);
    function get_LinePositionOffset: Int32;
    procedure set_LinePositionOffset(value: Int32);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_MaxCharactersInDocument: Int64;
    procedure set_MaxCharactersInDocument(value: Int64);
    function get_MaxCharactersFromEntities: Int64;
    procedure set_MaxCharactersFromEntities(value: Int64);
    function get_IgnoreWhitespace: Boolean;
    procedure set_IgnoreWhitespace(value: Boolean);
    function get_IgnoreProcessingInstructions: Boolean;
    procedure set_IgnoreProcessingInstructions(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_ValidationFlags: DNXmlSchemaValidationFlags;
    procedure set_ValidationFlags(value: DNXmlSchemaValidationFlags);
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    procedure Reset;
    function Clone: DNXmlReaderSettings;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property LineNumberOffset: Int32 read get_LineNumberOffset write set_LineNumberOffset;
    property LinePositionOffset: Int32 read get_LinePositionOffset write set_LinePositionOffset;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property MaxCharactersInDocument: Int64 read get_MaxCharactersInDocument write set_MaxCharactersInDocument;
    property MaxCharactersFromEntities: Int64 read get_MaxCharactersFromEntities write set_MaxCharactersFromEntities;
    property IgnoreWhitespace: Boolean read get_IgnoreWhitespace write set_IgnoreWhitespace;
    property IgnoreProcessingInstructions: Boolean read get_IgnoreProcessingInstructions write set_IgnoreProcessingInstructions;
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    property ValidationFlags: DNXmlSchemaValidationFlags read get_ValidationFlags write set_ValidationFlags;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
  end;

  TDNXmlReaderSettings = class(TDNGenericImport<DNXmlReaderSettingsClass, DNXmlReaderSettings>) end;

  //-------------namespace: System.Xml----------------
  DNXmlResolverClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2408F4C6-DF49-5FFC-932A-691B9068FCF0}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlResolver')]
  DNXmlResolver = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{19C2DAA7-F46A-3AFC-A4E8-EE9B225676D0}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { methods } 

    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  TDNXmlResolver = class(TDNGenericImport<DNXmlResolverClass, DNXmlResolver>) end;

  //-------------namespace: System.Xml.Resolvers----------------
  DNXmlPreloadedResolverClass = interface(DNXmlResolverClass)
  ['{538AE2C6-8606-58A9-933B-9645CBEED59A}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { constructors } 

    {class} function init: DNXmlPreloadedResolver; overload;
    {class} function init(preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds; uriComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<DDNC.System.Private.Uri.DNUri>): DNXmlPreloadedResolver; overload;

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.Resolvers.XmlPreloadedResolver')]
  DNXmlPreloadedResolver = interface(DNXmlResolver)
  ['{BDE1E842-F57E-38CE-95D4-928A5D954ADE}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);
    function get_PreloadedUris: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.Uri.DNUri>;

  { methods } 

    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: TArray<Byte>); overload;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: string); overload;
    procedure Remove(uri: DDNC.System.Private.Uri.DNUri);
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
    property PreloadedUris: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.Uri.DNUri> read get_PreloadedUris;
  end;

  TDNXmlPreloadedResolver = class(TDNGenericImport<DNXmlPreloadedResolverClass, DNXmlPreloadedResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSecureResolverClass = interface(DNXmlResolverClass)
  ['{DB911332-6F1A-5E4C-9F9B-452EF79302E5}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { constructors } 

    {class} function init(resolver: DNXmlResolver; securityUrl: string): DNXmlSecureResolver;

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlSecureResolver')]
  DNXmlSecureResolver = interface(DNXmlResolver)
  ['{1EC80F07-60FE-3602-A620-69812B6E4F98}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { methods } 

    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  TDNXmlSecureResolver = class(TDNGenericImport<DNXmlSecureResolverClass, DNXmlSecureResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlUrlResolverClass = interface(DNXmlResolverClass)
  ['{D1EF98BC-576F-5BB5-B9D3-C9844D1D84C7}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);
    procedure set_Proxy(value: DDNC.System.Net.Primitives.DNIWebProxy);
    procedure set_CachePolicy(value: DDNC.System.Net.Primitives.DNRequestCachePolicy);

  { constructors } 

    {class} function init: DNXmlUrlResolver;

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
    {class} property Proxy: DDNC.System.Net.Primitives.DNIWebProxy write set_Proxy;
    {class} property CachePolicy: DDNC.System.Net.Primitives.DNRequestCachePolicy write set_CachePolicy;
  end;

  [DNTypeName('System.Xml.XmlUrlResolver')]
  DNXmlUrlResolver = interface(DNXmlResolver)
  ['{79CE1202-1172-327E-A0ED-4E01B47D1C49}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);
    procedure set_Proxy(value: DDNC.System.Net.Primitives.DNIWebProxy);
    procedure set_CachePolicy(value: DDNC.System.Net.Primitives.DNRequestCachePolicy);

  { methods } 

    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
    property Proxy: DDNC.System.Net.Primitives.DNIWebProxy write set_Proxy;
    property CachePolicy: DDNC.System.Net.Primitives.DNRequestCachePolicy write set_CachePolicy;
  end;

  TDNXmlUrlResolver = class(TDNGenericImport<DNXmlUrlResolverClass, DNXmlUrlResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterClass = interface(DNObjectClass)
  ['{39095D7D-962D-5F8F-B074-C6E5CE7ACCBF}']
  { static methods } 

    {class} function Create(outputFileName: string): DNXmlWriter; overload;
    {class} function Create(outputFileName: string; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStream): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNTextWriter): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNTextWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStringBuilder): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStringBuilder; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;

  end;

  [DNTypeName('System.Xml.XmlWriter')]
  DNXmlWriter = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{78F6CF9C-1E88-3991-BA6F-D433ABC4234F}']
  { getters & setters } 

    function get_Settings: DNXmlWriterSettings;
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;

  { methods } 

    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteEndAttribute;
    procedure WriteCData(text: string);
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(name: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure Flush;
    function LookupPrefix(ns: string): string;
    procedure WriteNmToken(name: string);
    procedure WriteName(name: string);
    procedure WriteQualifiedName(localName: string; ns: string);
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: Boolean); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTime); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteEndDocumentAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteFullEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCDataAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCommentAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEntityRefAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStringAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteRawAsync(data: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteNmTokenAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteNameAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Settings: DNXmlWriterSettings read get_Settings;
    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
  end;

  TDNXmlWriter = class(TDNGenericImport<DNXmlWriterClass, DNXmlWriter>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextWriterClass = interface(DNXmlWriterClass)
  ['{3FD7F6E2-8F4E-5DB3-95A9-7C60C501EECB}']
  { constructors } 

    {class} function init(w: DDNC.System.Private.CoreLib.DNStream; encoding: DDNC.System.Private.CoreLib.DNEncoding): DNXmlTextWriter; overload;
    {class} function init(filename: string; encoding: DDNC.System.Private.CoreLib.DNEncoding): DNXmlTextWriter; overload;
    {class} function init(w: DDNC.System.Private.CoreLib.DNTextWriter): DNXmlTextWriter; overload;

  end;

  [DNTypeName('System.Xml.XmlTextWriter')]
  DNXmlTextWriter = interface(DNXmlWriter)
  ['{32EE2E0F-C23D-3D59-B7D1-2B453B637D83}']
  { getters & setters } 

    function get_BaseStream: DDNC.System.Private.CoreLib.DNStream;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Formatting: DNFormatting;
    procedure set_Formatting(value: DNFormatting);
    function get_Indentation: Int32;
    procedure set_Indentation(value: Int32);
    function get_IndentChar: Char;
    procedure set_IndentChar(value: Char);
    function get_QuoteChar: Char;
    procedure set_QuoteChar(value: Char);
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_Settings: DNXmlWriterSettings;

  { methods } 

    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndAttribute;
    procedure WriteCData(text: string);
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(name: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure Flush;
    procedure WriteName(name: string);
    procedure WriteQualifiedName(localName: string; ns: string);
    function LookupPrefix(ns: string): string;
    procedure WriteNmToken(name: string);
    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: Boolean); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTime); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteEndDocumentAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteFullEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCDataAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCommentAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEntityRefAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStringAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteRawAsync(data: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteNmTokenAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteNameAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseStream: DDNC.System.Private.CoreLib.DNStream read get_BaseStream;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Formatting: DNFormatting read get_Formatting write set_Formatting;
    property Indentation: Int32 read get_Indentation write set_Indentation;
    property IndentChar: Char read get_IndentChar write set_IndentChar;
    property QuoteChar: Char read get_QuoteChar write set_QuoteChar;
    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property Settings: DNXmlWriterSettings read get_Settings;
  end;

  TDNXmlTextWriter = class(TDNGenericImport<DNXmlTextWriterClass, DNXmlTextWriter>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryOutputClass = interface(DNXmlWriterClass)
  ['{3BE251B2-E261-505C-A462-95331BAB7B25}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryOutput')]
  DNXmlQueryOutput = interface(DNXmlWriter)
  ['{94D6BE0F-72B4-3199-863A-64A1468C5991}']
  { getters & setters } 

    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_Settings: DNXmlWriterSettings;

  { methods } 

    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndAttribute;
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(target: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteCData(text: string);
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure Flush;
    function LookupPrefix(ns: string): string;
    procedure StartTree(rootType: DNXPathNodeType);
    procedure EndTree;
    procedure WriteStartElementUnchecked(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartElementUnchecked(localName: string); overload;
    procedure StartElementContentUnchecked;
    procedure WriteEndElementUnchecked(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElementUnchecked(localName: string); overload;
    procedure WriteStartAttributeUnchecked(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartAttributeUnchecked(localName: string); overload;
    procedure WriteEndAttributeUnchecked;
    procedure WriteNamespaceDeclarationUnchecked(prefix: string; ns: string);
    procedure WriteStringUnchecked(text: string);
    procedure WriteRawUnchecked(text: string);
    procedure WriteStartRoot;
    procedure WriteEndRoot;
    procedure WriteStartElementLocalName(localName: string);
    procedure WriteStartAttributeLocalName(localName: string);
    procedure WriteStartElementComputed(tagName: string; prefixMappingsIndex: Int32); overload;
    procedure WriteStartElementComputed(tagName: string; ns: string); overload;
    procedure WriteStartElementComputed(navigator: DNXPathNavigator); overload;
    procedure WriteStartElementComputed(name: DNXmlQualifiedName); overload;
    procedure WriteStartAttributeComputed(tagName: string; prefixMappingsIndex: Int32); overload;
    procedure WriteStartAttributeComputed(tagName: string; ns: string); overload;
    procedure WriteStartAttributeComputed(navigator: DNXPathNavigator); overload;
    procedure WriteStartAttributeComputed(name: DNXmlQualifiedName); overload;
    procedure WriteNamespaceDeclaration(prefix: string; ns: string);
    procedure WriteStartNamespace(prefix: string);
    procedure WriteNamespaceString(text: string);
    procedure WriteEndNamespace;
    procedure WriteStartComment;
    procedure WriteCommentString(text: string);
    procedure WriteEndComment;
    procedure WriteStartProcessingInstruction(target: string);
    procedure WriteProcessingInstructionString(text: string);
    procedure WriteEndProcessingInstruction;
    procedure WriteItem(item: DNXPathItem);
    procedure XsltCopyOf(navigator: DNXPathNavigator);
    function StartCopy(navigator: DNXPathNavigator): Boolean;
    procedure EndCopy(navigator: DNXPathNavigator);
    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure WriteNmToken(name: string);
    procedure WriteName(name: string);
    procedure WriteQualifiedName(localName: string; ns: string);
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: Boolean); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTime); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteEndDocumentAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteFullEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCDataAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCommentAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEntityRefAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStringAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteRawAsync(data: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteNmTokenAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteNameAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property Settings: DNXmlWriterSettings read get_Settings;
  end;

  TDNXmlQueryOutput = class(TDNGenericImport<DNXmlQueryOutputClass, DNXmlQueryOutput>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CE135AAC-8BA3-501E-8FDF-BEED1EBDE49E}']
  { constructors } 

    {class} function init: DNXmlWriterSettings;

  end;

  [DNTypeName('System.Xml.XmlWriterSettings')]
  DNXmlWriterSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A8F2A0DE-25B8-3487-BC9E-777FB0512040}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_Encoding(value: DDNC.System.Private.CoreLib.DNEncoding);
    function get_OmitXmlDeclaration: Boolean;
    procedure set_OmitXmlDeclaration(value: Boolean);
    function get_NewLineHandling: DNNewLineHandling;
    procedure set_NewLineHandling(value: DNNewLineHandling);
    function get_NewLineChars: string;
    procedure set_NewLineChars(value: string);
    function get_Indent: Boolean;
    procedure set_Indent(value: Boolean);
    function get_IndentChars: string;
    procedure set_IndentChars(value: string);
    function get_NewLineOnAttributes: Boolean;
    procedure set_NewLineOnAttributes(value: Boolean);
    function get_CloseOutput: Boolean;
    procedure set_CloseOutput(value: Boolean);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_NamespaceHandling: DNNamespaceHandling;
    procedure set_NamespaceHandling(value: DNNamespaceHandling);
    function get_WriteEndDocumentOnClose: Boolean;
    procedure set_WriteEndDocumentOnClose(value: Boolean);
    function get_OutputMethod: DNXmlOutputMethod;
    function get_DoNotEscapeUriAttributes: Boolean;
    procedure set_DoNotEscapeUriAttributes(value: Boolean);

  { methods } 

    procedure Reset;
    function Clone: DNXmlWriterSettings;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding write set_Encoding;
    property OmitXmlDeclaration: Boolean read get_OmitXmlDeclaration write set_OmitXmlDeclaration;
    property NewLineHandling: DNNewLineHandling read get_NewLineHandling write set_NewLineHandling;
    property NewLineChars: string read get_NewLineChars write set_NewLineChars;
    property Indent: Boolean read get_Indent write set_Indent;
    property IndentChars: string read get_IndentChars write set_IndentChars;
    property NewLineOnAttributes: Boolean read get_NewLineOnAttributes write set_NewLineOnAttributes;
    property CloseOutput: Boolean read get_CloseOutput write set_CloseOutput;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property NamespaceHandling: DNNamespaceHandling read get_NamespaceHandling write set_NamespaceHandling;
    property WriteEndDocumentOnClose: Boolean read get_WriteEndDocumentOnClose write set_WriteEndDocumentOnClose;
    property OutputMethod: DNXmlOutputMethod read get_OutputMethod;
    property DoNotEscapeUriAttributes: Boolean read get_DoNotEscapeUriAttributes write set_DoNotEscapeUriAttributes;
  end;

  TDNXmlWriterSettings = class(TDNGenericImport<DNXmlWriterSettingsClass, DNXmlWriterSettings>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathDocumentClass = interface(DNObjectClass)
  ['{E7C60230-EB28-5DBD-8CA6-28DB74640178}']
  { constructors } 

    {class} function init(reader: DNXmlReader): DNXPathDocument; overload;
    {class} function init(reader: DNXmlReader; space: DNXmlSpace): DNXPathDocument; overload;
    {class} function init(textReader: DDNC.System.Private.CoreLib.DNTextReader): DNXPathDocument; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNXPathDocument; overload;
    {class} function init(uri: string): DNXPathDocument; overload;
    {class} function init(uri: string; space: DNXmlSpace): DNXPathDocument; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathDocument')]
  DNXPathDocument = interface(DNIXPathNavigable)
  ['{417A0A54-2D41-33C7-9EF4-CDD9C4408BE1}']
  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXPathDocument = class(TDNGenericImport<DNXPathDocumentClass, DNXPathDocument>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExpressionClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9ABB973A-5F16-5B48-BF74-ADFA9AA6773B}']
  { static methods } 

    {class} function Compile(xpath: string): DNXPathExpression; overload;
    {class} function Compile(xpath: string; nsResolver: DNIXmlNamespaceResolver): DNXPathExpression; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathExpression')]
  DNXPathExpression = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D61B64F4-1E4E-3CEA-8CBF-1345244048A6}']
  { getters & setters } 

    function get_Expression: string;
    function get_ReturnType: DNXPathResultType;

  { methods } 

    procedure AddSort(expr: DDNC.System.Private.CoreLib.DNObject; comparer: DDNC.System.Private.CoreLib.DNIComparer); overload;
    procedure AddSort(expr: DDNC.System.Private.CoreLib.DNObject; order: DNXmlSortOrder; caseOrder: DNXmlCaseOrder; lang: string; dataType: DNXmlDataType); overload;
    function Clone: DNXPathExpression;
    procedure SetContext(nsManager: DNXmlNamespaceManager); overload;
    procedure SetContext(nsResolver: DNIXmlNamespaceResolver); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Expression: string read get_Expression;
    property ReturnType: DNXPathResultType read get_ReturnType;
  end;

  TDNXPathExpression = class(TDNGenericImport<DNXPathExpressionClass, DNXPathExpression>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathItemClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{FEED5E5E-AF20-59C0-AA7A-224B2BF12D9A}']
  end;

  [DNTypeName('System.Xml.XPath.XPathItem')]
  DNXPathItem = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{16B340A5-7A2D-385D-B8B7-68D3B034FE80}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_Value: string;
    function get_TypedValue: DDNC.System.Private.CoreLib.DNObject;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;

  { methods } 

    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType; nsResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property Value: string read get_Value;
    property TypedValue: DDNC.System.Private.CoreLib.DNObject read get_TypedValue;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
  end;

  TDNXPathItem = class(TDNGenericImport<DNXPathItemClass, DNXPathItem>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlAtomicValueClass = interface(DNXPathItemClass)
  ['{5EA942E7-FC51-56AC-A4BF-4B6FEE88B15B}']
  end;

  [DNTypeName('System.Xml.Schema.XmlAtomicValue')]
  DNXmlAtomicValue = interface(DNXPathItem)
  ['{A397FA0C-9F5D-3F03-B923-64EC8EA26482}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_TypedValue: DDNC.System.Private.CoreLib.DNObject;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_Value: string;

  { methods } 

    function Clone: DNXmlAtomicValue;
    function ValueAs(&type: DDNC.System.Private.CoreLib.DNType; nsResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ToString: string;
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property TypedValue: DDNC.System.Private.CoreLib.DNObject read get_TypedValue;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
    property Value: string read get_Value;
  end;

  TDNXmlAtomicValue = class(TDNGenericImport<DNXmlAtomicValueClass, DNXmlAtomicValue>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNavigatorClass = interface(DNXPathItemClass)
  ['{E684BD98-8CD4-55FE-BCDB-48A32EE85168}']
  { static getter & setter } 

    {class} function get_NavigatorComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer;

  { static propertys } 

    {class} property NavigatorComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer read get_NavigatorComparer;
  end;

  [DNTypeName('System.Xml.XPath.XPathNavigator')]
  DNXPathNavigator = interface(DNXPathItem)
  ['{F698B1F2-0B9F-3B21-8284-83C370767262}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_TypedValue: DDNC.System.Private.CoreLib.DNObject;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_NameTable: DNXmlNameTable;
    function get_NodeType: DNXPathNodeType;
    function get_LocalName: string;
    function get_Name: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_XmlLang: string;
    function get_UnderlyingObject: DDNC.System.Private.CoreLib.DNObject;
    function get_HasAttributes: Boolean;
    function get_HasChildren: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_CanEdit: Boolean;
    function get_OuterXml: string;
    procedure set_OuterXml(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;

  { methods } 

    function ToString: string;
    procedure SetValue(value: string);
    procedure SetTypedValue(typedValue: DDNC.System.Private.CoreLib.DNObject);
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType; nsResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateNavigator: DNXPathNavigator;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceURI: string): string;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function Clone: DNXPathNavigator;
    function ReadSubtree: DNXmlReader;
    procedure WriteSubtree(writer: DNXmlWriter);
    function GetAttribute(localName: string; namespaceURI: string): string;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function GetNamespace(name: string): string;
    function MoveToNamespace(name: string): Boolean;
    function MoveToFirstNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToNextNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToFirstNamespace: Boolean; overload;
    function MoveToNextNamespace: Boolean; overload;
    function MoveToNext: Boolean; overload;
    function MoveToPrevious: Boolean;
    function MoveToFirst: Boolean;
    function MoveToFirstChild: Boolean;
    function MoveToParent: Boolean;
    procedure MoveToRoot;
    function MoveTo(other: DNXPathNavigator): Boolean;
    function MoveToId(id: string): Boolean;
    function MoveToChild(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToChild(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string; &end: DNXPathNavigator): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType; &end: DNXPathNavigator): Boolean; overload;
    function MoveToNext(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToNext(&type: DNXPathNodeType): Boolean; overload;
    function IsSamePosition(other: DNXPathNavigator): Boolean;
    function IsDescendant(nav: DNXPathNavigator): Boolean;
    function ComparePosition(nav: DNXPathNavigator): DNXmlNodeOrder;
    function CheckValidity(schemas: DNXmlSchemaSet; validationEventHandler: DNValidationEventHandler): Boolean;
    function Compile(xpath: string): DNXPathExpression;
    function SelectSingleNode(xpath: string): DNXPathNavigator; overload;
    function SelectSingleNode(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNavigator; overload;
    function SelectSingleNode(expression: DNXPathExpression): DNXPathNavigator; overload;
    function Select(xpath: string): DNXPathNodeIterator; overload;
    function Select(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNodeIterator; overload;
    function Select(expr: DNXPathExpression): DNXPathNodeIterator; overload;
    function Evaluate(xpath: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function Evaluate(xpath: string; resolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression): DDNC.System.Private.CoreLib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression; context: DNXPathNodeIterator): DDNC.System.Private.CoreLib.DNObject; overload;
    function Matches(expr: DNXPathExpression): Boolean; overload;
    function Matches(xpath: string): Boolean; overload;
    function SelectChildren(&type: DNXPathNodeType): DNXPathNodeIterator; overload;
    function SelectChildren(name: string; namespaceURI: string): DNXPathNodeIterator; overload;
    function SelectAncestors(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectAncestors(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function PrependChild: DNXmlWriter; overload;
    function AppendChild: DNXmlWriter; overload;
    function InsertAfter: DNXmlWriter; overload;
    function InsertBefore: DNXmlWriter; overload;
    function CreateAttributes: DNXmlWriter;
    function ReplaceRange(lastSiblingToReplace: DNXPathNavigator): DNXmlWriter;
    procedure ReplaceSelf(newNode: string); overload;
    procedure ReplaceSelf(newNode: DNXmlReader); overload;
    procedure ReplaceSelf(newNode: DNXPathNavigator); overload;
    procedure AppendChild(newChild: string); overload;
    procedure AppendChild(newChild: DNXmlReader); overload;
    procedure AppendChild(newChild: DNXPathNavigator); overload;
    procedure PrependChild(newChild: string); overload;
    procedure PrependChild(newChild: DNXmlReader); overload;
    procedure PrependChild(newChild: DNXPathNavigator); overload;
    procedure InsertBefore(newSibling: string); overload;
    procedure InsertBefore(newSibling: DNXmlReader); overload;
    procedure InsertBefore(newSibling: DNXPathNavigator); overload;
    procedure InsertAfter(newSibling: string); overload;
    procedure InsertAfter(newSibling: DNXmlReader); overload;
    procedure InsertAfter(newSibling: DNXPathNavigator); overload;
    procedure DeleteRange(lastSiblingToDelete: DNXPathNavigator);
    procedure DeleteSelf;
    procedure PrependChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure AppendChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementBefore(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementAfter(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure CreateAttribute(prefix: string; localName: string; namespaceURI: string; value: string);
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property TypedValue: DDNC.System.Private.CoreLib.DNObject read get_TypedValue;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
    property NameTable: DNXmlNameTable read get_NameTable;
    property NodeType: DNXPathNodeType read get_NodeType;
    property LocalName: string read get_LocalName;
    property Name: string read get_Name;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property XmlLang: string read get_XmlLang;
    property UnderlyingObject: DDNC.System.Private.CoreLib.DNObject read get_UnderlyingObject;
    property HasAttributes: Boolean read get_HasAttributes;
    property HasChildren: Boolean read get_HasChildren;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property CanEdit: Boolean read get_CanEdit;
    property OuterXml: string read get_OuterXml write set_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value;
  end;

  TDNXPathNavigator = class(TDNGenericImport<DNXPathNavigatorClass, DNXPathNavigator>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNodeIteratorClass = interface(DNObjectClass)
  ['{9AA18071-B3EF-50CE-BB11-96F2919227E7}']
  end;

  [DNTypeName('System.Xml.XPath.XPathNodeIterator')]
  DNXPathNodeIterator = interface(DDNC.System.Private.CoreLib.DNICloneable)
  ['{59263486-908F-3388-A1D2-936D34A2A5C5}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;
    function get_CurrentPosition: Int32;
    function get_Count: Int32;

  { methods } 

    function Clone: DNXPathNodeIterator;
    function MoveNext: Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
    property CurrentPosition: Int32 read get_CurrentPosition;
    property Count: Int32 read get_Count;
  end;

  TDNXPathNodeIterator = class(TDNGenericImport<DNXPathNodeIteratorClass, DNXPathNodeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlCollationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1F88266F-DF8E-54DB-974D-23AB4EB59726}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlCollation')]
  DNXmlCollation = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A0AE6E39-EC57-3063-AA23-DEC86CBA2E22}']
  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  end;

  TDNXmlCollation = class(TDNGenericImport<DNXmlCollationClass, DNXmlCollation>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlILIndexClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F8DD3537-FA8E-5A3D-A7EE-6AD3DD4EE962}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlILIndex')]
  DNXmlILIndex = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{79D93392-F5F7-3E27-9B47-D088A294361E}']
  { methods } 

    procedure Add(key: string; navigator: DNXPathNavigator);
    function Lookup(key: string): DNXmlQueryNodeSequence;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlILIndex = class(TDNGenericImport<DNXmlILIndexClass, DNXmlILIndex>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlILStorageConverterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4466D6B6-AC8D-537D-A8A8-520C0E734B4A}']
  { static methods } 

    {class} function StringToAtomicValue(value: string; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function DecimalToAtomicValue(value: DDNC.System.Private.CoreLib.DNDecimal; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function Int64ToAtomicValue(value: Int64; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function Int32ToAtomicValue(value: Int32; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function BooleanToAtomicValue(value: Boolean; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function DoubleToAtomicValue(value: Double; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function SingleToAtomicValue(value: Single; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function DateTimeToAtomicValue(value: DDNC.System.Private.CoreLib.DNDateTime; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function XmlQualifiedNameToAtomicValue(value: DNXmlQualifiedName; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function TimeSpanToAtomicValue(value: DDNC.System.Private.CoreLib.DNTimeSpan; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function BytesToAtomicValue(value: TArray<Byte>; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function NavigatorsToItems(listNavigators: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>): DDNC.System.Private.CoreLib.DNIList<DNXPathItem>;
    {class} function ItemsToNavigators(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlILStorageConverter')]
  DNXmlILStorageConverter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5FA1A5A4-C333-3432-BC93-FB96AACF8548}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlILStorageConverter = class(TDNGenericImport<DNXmlILStorageConverterClass, DNXmlILStorageConverter>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlNavigatorFilterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{0A85E511-3C85-574B-8C16-CACB559AAC28}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlNavigatorFilter')]
  DNXmlNavigatorFilter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A6BCE0B2-617A-37B9-949A-84128F05BC78}']
  { methods } 

    function MoveToContent(navigator: DNXPathNavigator): Boolean;
    function MoveToNextContent(navigator: DNXPathNavigator): Boolean;
    function MoveToFollowingSibling(navigator: DNXPathNavigator): Boolean;
    function MoveToPreviousSibling(navigator: DNXPathNavigator): Boolean;
    function MoveToFollowing(navigator: DNXPathNavigator; navigatorEnd: DNXPathNavigator): Boolean;
    function IsFiltered(navigator: DNXPathNavigator): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlNavigatorFilter = class(TDNGenericImport<DNXmlNavigatorFilterClass, DNXmlNavigatorFilter>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryContextClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{89F72282-557F-5ADB-B5FA-342447A15461}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryContext')]
  DNXmlQueryContext = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{AAA3F3CE-8412-346F-A18A-6AA39C86BF58}']
  { getters & setters } 

    function get_QueryNameTable: DNXmlNameTable;
    function get_DefaultNameTable: DNXmlNameTable;
    function get_DefaultDataSource: DNXPathNavigator;

  { methods } 

    function GetDataSource(uriRelative: string; uriBase: string): DNXPathNavigator;
    function GetParameter(localName: string; namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function GetLateBoundObject(namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function LateBoundFunctionExists(name: string; namespaceUri: string): Boolean;
    function InvokeXsltLateBoundFunction(name: string; namespaceUri: string; args: TArray<DDNC.System.Private.CoreLib.DNIList<DNXPathItem>>): DDNC.System.Private.CoreLib.DNIList<DNXPathItem>;
    procedure OnXsltMessageEncountered(message: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property QueryNameTable: DNXmlNameTable read get_QueryNameTable;
    property DefaultNameTable: DNXmlNameTable read get_DefaultNameTable;
    property DefaultDataSource: DNXPathNavigator read get_DefaultDataSource;
  end;

  TDNXmlQueryContext = class(TDNGenericImport<DNXmlQueryContextClass, DNXmlQueryContext>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryRuntimeClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4180B183-635F-5F2D-BD04-EE5E5C771341}']
  { static methods } 

    {class} function OnCurrentNodeChanged(currentNode: DNXPathNavigator): Int32;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryRuntime')]
  DNXmlQueryRuntime = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0C514696-95B6-3284-990B-755995CA77F0}']
  { getters & setters } 

    function get_ExternalContext: DNXmlQueryContext;
    function get_XsltFunctions: DNXsltLibrary;
    function get_NameTable: DNXmlNameTable;
    function get_Output: DNXmlQueryOutput;

  { methods } 

    function DebugGetGlobalNames: TArray<string>;
    function DebugGetGlobalValue(name: string): DDNC.System.Private.CoreLib.DNIList;
    procedure DebugSetGlobalValue(name: string; value: DDNC.System.Private.CoreLib.DNObject);
    function DebugGetXsltValue(seq: DDNC.System.Private.CoreLib.DNIList): DDNC.System.Private.CoreLib.DNObject;
    function GetEarlyBoundObject(index: Int32): DDNC.System.Private.CoreLib.DNObject;
    function EarlyBoundFunctionExists(name: string; namespaceUri: string): Boolean;
    function IsGlobalComputed(index: Int32): Boolean;
    function GetGlobalValue(index: Int32): DDNC.System.Private.CoreLib.DNObject;
    procedure SetGlobalValue(index: Int32; value: DDNC.System.Private.CoreLib.DNObject);
    function GetAtomizedName(index: Int32): string;
    function GetNameFilter(index: Int32): DNXmlNavigatorFilter;
    function GetTypeFilter(nodeType: DNXPathNodeType): DNXmlNavigatorFilter;
    function ParseTagName(tagName: string; indexPrefixMappings: Int32): DNXmlQualifiedName; overload;
    function ParseTagName(tagName: string; ns: string): DNXmlQualifiedName; overload;
    function IsQNameEqual(n1: DNXPathNavigator; n2: DNXPathNavigator): Boolean; overload;
    function IsQNameEqual(navigator: DNXPathNavigator; indexLocalName: Int32; indexNamespaceUri: Int32): Boolean; overload;
    function ChangeTypeXsltArgument(indexType: Int32; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ChangeTypeXsltResult(indexType: Int32; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    function MatchesXmlType(seq: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; indexType: Int32): Boolean; overload;
    function MatchesXmlType(item: DNXPathItem; indexType: Int32): Boolean; overload;
    function MatchesXmlType(seq: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; code: DNXmlTypeCode): Boolean; overload;
    function MatchesXmlType(item: DNXPathItem; code: DNXmlTypeCode): Boolean; overload;
    function GetCollation(index: Int32): DNXmlCollation;
    function CreateCollation(collation: string): DNXmlCollation;
    function ComparePosition(navigatorThis: DNXPathNavigator; navigatorThat: DNXPathNavigator): Int32;
    function DocOrderDistinct(seq: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;
    function GenerateId(navigator: DNXPathNavigator): string;
    function FindIndex(context: DNXPathNavigator; indexId: Int32; out index: DNXmlILIndex): Boolean;
    procedure AddNewIndex(context: DNXPathNavigator; indexId: Int32; index: DNXmlILIndex);
    procedure StartSequenceConstruction(out output: DNXmlQueryOutput);
    function EndSequenceConstruction(out output: DNXmlQueryOutput): DDNC.System.Private.CoreLib.DNIList<DNXPathItem>;
    procedure StartRtfConstruction(baseUri: string; out output: DNXmlQueryOutput);
    function EndRtfConstruction(out output: DNXmlQueryOutput): DNXPathNavigator;
    function TextRtfConstruction(text: string; baseUri: string): DNXPathNavigator;
    procedure SendMessage(message: string);
    procedure ThrowException(text: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ExternalContext: DNXmlQueryContext read get_ExternalContext;
    property XsltFunctions: DNXsltLibrary read get_XsltFunctions;
    property NameTable: DNXmlNameTable read get_NameTable;
    property Output: DNXmlQueryOutput read get_Output;
  end;

  TDNXmlQueryRuntime = class(TDNGenericImport<DNXmlQueryRuntimeClass, DNXmlQueryRuntime>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryItemSequenceClass = interface(DNObjectClass)
  ['{66CB03CE-D27E-5458-B899-B44C05076D87}']
  { constructors } 

    {class} function init: DNXmlQueryItemSequence; overload;
    {class} function init(capacity: Int32): DNXmlQueryItemSequence; overload;
    {class} function init(item: DNXPathItem): DNXmlQueryItemSequence; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQueryItemSequence;

  { static fields } 

    {class} property Empty: DNXmlQueryItemSequence read __fakeFieldGet_Empty;

  { static methods } 

    {class} function CreateOrReuse(seq: DNXmlQueryItemSequence): DNXmlQueryItemSequence; overload;
    {class} function CreateOrReuse(seq: DNXmlQueryItemSequence; item: DNXPathItem): DNXmlQueryItemSequence; overload;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryItemSequence')]
  DNXmlQueryItemSequence = interface(DNObject)
  ['{D924F97A-79FF-3CB8-94F0-D4C86AC47D0C}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure AddClone(item: DNXPathItem);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNXPathItem>;
    function &Contains(value: DNXPathItem): Boolean;
    procedure CopyTo(&array: TArray<DNXPathItem>; index: Int32);
    function IndexOf(value: DNXPathItem): Int32;
    procedure Clear;
    procedure Add(value: DNXPathItem);
    procedure SortByKeys(keys: DDNC.System.Private.CoreLib.DNArray);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlQueryItemSequence = class(TDNGenericImport<DNXmlQueryItemSequenceClass, DNXmlQueryItemSequence>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryNodeSequenceClass = interface(DNObjectClass)
  ['{1422B97B-E2D7-5BEB-B51F-D14F686E8F18}']
  { constructors } 

    {class} function init: DNXmlQueryNodeSequence; overload;
    {class} function init(capacity: Int32): DNXmlQueryNodeSequence; overload;
    {class} function init(list: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>): DNXmlQueryNodeSequence; overload;
    {class} function init(&array: TArray<DNXPathNavigator>; size: Int32): DNXmlQueryNodeSequence; overload;
    {class} function init(navigator: DNXPathNavigator): DNXmlQueryNodeSequence; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQueryNodeSequence;

  { static fields } 

    {class} property Empty: DNXmlQueryNodeSequence read __fakeFieldGet_Empty;

  { static methods } 

    {class} function CreateOrReuse(seq: DNXmlQueryNodeSequence): DNXmlQueryNodeSequence; overload;
    {class} function CreateOrReuse(seq: DNXmlQueryNodeSequence; navigator: DNXPathNavigator): DNXmlQueryNodeSequence; overload;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryNodeSequence')]
  DNXmlQueryNodeSequence = interface(DNObject)
  ['{0E4AADC3-0284-38B4-B520-64357A6A641E}']
  { getters & setters } 

    function get_IsDocOrderDistinct: Boolean;
    procedure set_IsDocOrderDistinct(value: Boolean);
    function get_Count: Int32;

  { methods } 

    function DocOrderDistinct(comparer: DDNC.System.Private.CoreLib.DNIComparer<DNXPathNavigator>): DNXmlQueryNodeSequence;
    procedure AddClone(navigator: DNXPathNavigator);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNXPathNavigator>;
    function &Contains(value: DNXPathNavigator): Boolean;
    procedure CopyTo(&array: TArray<DNXPathNavigator>; index: Int32);
    function IndexOf(value: DNXPathNavigator): Int32;
    procedure Clear;
    procedure Add(value: DNXPathNavigator);
    procedure SortByKeys(keys: DDNC.System.Private.CoreLib.DNArray);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsDocOrderDistinct: Boolean read get_IsDocOrderDistinct write set_IsDocOrderDistinct;
    property Count: Int32 read get_Count;
  end;

  TDNXmlQueryNodeSequence = class(TDNGenericImport<DNXmlQueryNodeSequenceClass, DNXmlQueryNodeSequence>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQuerySequenceClass<T> = interface(DNObjectClass)
  ['{E41CDB75-9437-59ED-8162-10CA08EE63B9}']
  { constructors } 

    {class} function init: DNXmlQuerySequence<T>; overload;
    {class} function init(capacity: Int32): DNXmlQuerySequence<T>; overload;
    {class} function init(&array: TArray<T>; size: Int32): DNXmlQuerySequence<T>; overload;
    {class} function init(value: T): DNXmlQuerySequence<T>; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQuerySequence<T>;

  { static fields } 

    {class} property Empty: DNXmlQuerySequence<T> read __fakeFieldGet_Empty;

  { static methods } 

    {class} function CreateOrReuse(seq: DNXmlQuerySequence<T>): DNXmlQuerySequence<T>; overload;
    {class} function CreateOrReuse(seq: DNXmlQuerySequence<T>; item: T): DNXmlQuerySequence<T>; overload;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQuerySequence`1')]
  DNXmlQuerySequence<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{30E400D7-110F-3B32-A928-28B6E8845172}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function IndexOf(value: T): Int32;
    procedure Clear;
    procedure Add(value: T);
    procedure SortByKeys(keys: DDNC.System.Private.CoreLib.DNArray);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlQuerySequence<T> = class(TDNGenericImport<DNXmlQuerySequenceClass<T>, DNXmlQuerySequence<T>>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXsltConvertClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{99404A81-438A-5BBB-AF4C-EEF9654D20EF}']
  { static methods } 

    {class} function ToBoolean(item: DNXPathItem): Boolean; overload;
    {class} function ToBoolean(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Boolean; overload;
    {class} function ToDouble(value: string): Double; overload;
    {class} function ToDouble(item: DNXPathItem): Double; overload;
    {class} function ToDouble(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Double; overload;
    {class} function ToNode(item: DNXPathItem): DNXPathNavigator; overload;
    {class} function ToNode(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DNXPathNavigator; overload;
    {class} function ToNodeSet(item: DNXPathItem): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>; overload;
    {class} function ToNodeSet(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(item: DNXPathItem): string; overload;
    {class} function ToString(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime): string; overload;
    {class} function ToDouble(value: DDNC.System.Private.CoreLib.DNDecimal): Double; overload;
    {class} function ToDouble(value: Int32): Double; overload;
    {class} function ToDouble(value: Int64): Double; overload;
    {class} function ToDecimal(value: Double): DDNC.System.Private.CoreLib.DNDecimal;
    {class} function ToInt(value: Double): Int32;
    {class} function ToLong(value: Double): Int64;
    {class} function ToDateTime(value: string): DDNC.System.Private.CoreLib.DNDateTime;
    {class} function EnsureNodeSet(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XsltConvert')]
  DNXsltConvert = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B9B1A811-6C92-3EA8-A6BC-F39195596A2F}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltConvert = class(TDNGenericImport<DNXsltConvertClass, DNXsltConvert>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXsltFunctionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{625824EF-A20F-5C38-BA59-5B275A904D37}']
  { static methods } 

    {class} function StartsWith(s1: string; s2: string): Boolean;
    {class} function &Contains(s1: string; s2: string): Boolean;
    {class} function SubstringBefore(s1: string; s2: string): string;
    {class} function SubstringAfter(s1: string; s2: string): string;
    {class} function Substring(value: string; startIndex: Double): string; overload;
    {class} function Substring(value: string; startIndex: Double; length: Double): string; overload;
    {class} function NormalizeSpace(value: string): string;
    {class} function Translate(arg: string; mapString: string; transString: string): string;
    {class} function Lang(value: string; context: DNXPathNavigator): Boolean;
    {class} function Round(value: Double): Double;
    {class} function SystemProperty(name: DNXmlQualifiedName): DNXPathItem;
    {class} function BaseUri(navigator: DNXPathNavigator): string;
    {class} function OuterXml(navigator: DNXPathNavigator): string;
    {class} function EXslObjectType(value: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): string;
    {class} function MSNumber(value: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Double;
    {class} function MSFormatDateTime(dateTime: string; format: string; lang: string; isDate: Boolean): string;
    {class} function MSStringCompare(s1: string; s2: string; lang: string; options: string): Double;
    {class} function MSUtc(dateTime: string): string;
    {class} function MSLocalName(name: string): string;
    {class} function MSNamespaceUri(name: string; currentNode: DNXPathNavigator): string;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XsltFunctions')]
  DNXsltFunctions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{76AE3E7F-288B-3221-A84C-905134CF3ECC}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltFunctions = class(TDNGenericImport<DNXsltFunctionsClass, DNXsltFunctions>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXsltLibraryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{43B56D8B-1137-5243-B33B-9ACA120474C0}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XsltLibrary')]
  DNXsltLibrary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{813FB701-BB56-35AF-BC74-580162097FAA}']
  { methods } 

    function FormatMessage(res: string; args: DDNC.System.Private.CoreLib.DNIList<string>): string;
    function CheckScriptNamespace(nsUri: string): Int32;
    function ElementAvailable(name: DNXmlQualifiedName): Boolean;
    function FunctionAvailable(name: DNXmlQualifiedName): Boolean;
    function RegisterDecimalFormat(name: DNXmlQualifiedName; infinitySymbol: string; nanSymbol: string; characters: string): Int32;
    function RegisterDecimalFormatter(formatPicture: string; infinitySymbol: string; nanSymbol: string; characters: string): Double;
    function FormatNumberStatic(value: Double; decimalFormatterIndex: Double): string;
    function FormatNumberDynamic(value: Double; formatPicture: string; decimalFormatName: DNXmlQualifiedName; errorMessageName: string): string;
    function NumberFormat(value: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; formatString: string; lang: Double; letterValue: string; groupingSeparator: string; groupingSize: Double): string;
    function LangToLcid(lang: string; forwardCompatibility: Boolean): Int32;
    function EqualityOperator(opCode: Double; left: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; right: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Boolean;
    function RelationalOperator(opCode: Double; left: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; right: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Boolean;
    function IsSameNodeSort(nav1: DNXPathNavigator; nav2: DNXPathNavigator): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltLibrary = class(TDNGenericImport<DNXsltLibraryClass, DNXsltLibrary>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslCompiledTransformClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E033822C-0D83-50BE-B686-D12EA4D1A159}']
  { constructors } 

    {class} function init: DNXslCompiledTransform; overload;
    {class} function init(enableDebug: Boolean): DNXslCompiledTransform; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XslCompiledTransform')]
  DNXslCompiledTransform = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{612FA3D5-9429-37D0-959D-67036BF55BF4}']
  { getters & setters } 

    function get_OutputSettings: DNXmlWriterSettings;

  { methods } 

    procedure Load(stylesheet: DNXmlReader); overload;
    procedure Load(stylesheet: DNXmlReader; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    procedure Load(stylesheet: DNIXPathNavigable; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(stylesheetUri: string); overload;
    procedure Load(stylesheetUri: string; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(compiledStylesheet: DDNC.System.Private.CoreLib.DNType); overload;
    procedure Load(executeMethod: DDNC.System.Private.CoreLib.DNMethodInfo; queryData: TArray<Byte>; earlyBoundTypes: TArray<DDNC.System.Private.CoreLib.DNType>); overload;
    procedure Transform(input: DNIXPathNavigable; results: DNXmlWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(input: DNXmlReader; results: DNXmlWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(inputUri: string; results: DNXmlWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(inputUri: string; resultsFile: string); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property OutputSettings: DNXmlWriterSettings read get_OutputSettings;
  end;

  TDNXslCompiledTransform = class(TDNGenericImport<DNXslCompiledTransformClass, DNXslCompiledTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltArgumentListClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A63E683F-423F-5130-9446-CC33F090CD42}']
  { constructors } 

    {class} function init: DNXsltArgumentList;

  end;

  [DNTypeName('System.Xml.Xsl.XsltArgumentList')]
  DNXsltArgumentList = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{00A08A27-58C9-30FD-BF5F-C400788FF985}']
  { events } 

    procedure add_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);
    procedure remove_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);

  { methods } 

    function GetParam(name: string; namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function GetExtensionObject(namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    procedure AddParam(name: string; namespaceUri: string; parameter: DDNC.System.Private.CoreLib.DNObject);
    procedure AddExtensionObject(namespaceUri: string; extension: DDNC.System.Private.CoreLib.DNObject);
    function RemoveParam(name: string; namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function RemoveExtensionObject(namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    procedure Clear;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltArgumentList = class(TDNGenericImport<DNXsltArgumentListClass, DNXsltArgumentList>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslTransformClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B7121F27-D593-59EE-AE86-1C9A386C6A6D}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXslTransform;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Xsl.XslTransform')]
  DNXslTransform = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{87D57F9C-D4DF-337D-8482-06667D9CB51E}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { methods } 

    procedure Load(stylesheet: DNXmlReader); overload;
    procedure Load(stylesheet: DNXmlReader; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    procedure Load(stylesheet: DNIXPathNavigable; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNXPathNavigator); overload;
    procedure Load(stylesheet: DNXPathNavigator; resolver: DNXmlResolver); overload;
    procedure Load(url: string); overload;
    procedure Load(url: string; resolver: DNXmlResolver); overload;
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList): DNXmlReader; overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList): DNXmlReader; overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    procedure Transform(inputfile: string; outputfile: string; resolver: DNXmlResolver); overload;
    procedure Transform(inputfile: string; outputfile: string); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  TDNXslTransform = class(TDNGenericImport<DNXslTransformClass, DNXslTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3556AD32-C229-5CC1-9A8B-D207186DF700}']
  { static getter & setter } 

    {class} function get_Default: DNXsltSettings;
    {class} function get_TrustedXslt: DNXsltSettings;

  { constructors } 

    {class} function init: DNXsltSettings; overload;
    {class} function init(enableDocumentFunction: Boolean; enableScript: Boolean): DNXsltSettings; overload;

  { static propertys } 

    {class} property &Default: DNXsltSettings read get_Default;
    {class} property TrustedXslt: DNXsltSettings read get_TrustedXslt;
  end;

  [DNTypeName('System.Xml.Xsl.XsltSettings')]
  DNXsltSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{54DC4505-DEB7-3780-8D84-55EBFD2D9009}']
  { getters & setters } 

    function get_EnableDocumentFunction: Boolean;
    procedure set_EnableDocumentFunction(value: Boolean);
    function get_EnableScript: Boolean;
    procedure set_EnableScript(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property EnableDocumentFunction: Boolean read get_EnableDocumentFunction write set_EnableDocumentFunction;
    property EnableScript: Boolean read get_EnableScript write set_EnableScript;
  end;

  TDNXsltSettings = class(TDNGenericImport<DNXsltSettingsClass, DNXsltSettings>) end;


implementation


initialization
  LoadAssemblyModule('System.Private.Xml.dll', True, 'System.Private.Xml, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51');

finalization

end.
