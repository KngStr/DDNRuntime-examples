//----------------------------------------------------------------------------
//  System.Xml.dll: System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Xml
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Xml;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ConformanceLevel')]
  DNConformanceLevel = type Integer;
  DNConformanceLevelHelper = record helper for DNConformanceLevel
  public const
    Auto = 0;
    Fragment = 1;
    Document = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.DtdProcessing')]
  DNDtdProcessing = type Integer;
  DNDtdProcessingHelper = record helper for DNDtdProcessing
  public const
    Prohibit = 0;
    Ignore = 1;
    Parse = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.EntityHandling')]
  DNEntityHandling = type Integer;
  DNEntityHandlingHelper = record helper for DNEntityHandling
  public const
    ExpandEntities = 1;
    ExpandCharEntities = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.Formatting')]
  DNFormatting = type Integer;
  DNFormattingHelper = record helper for DNFormatting
  public const
    None = 0;
    Indented = 1;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NamespaceHandling')]
  DNNamespaceHandling = type Integer;
  DNNamespaceHandlingHelper = record helper for DNNamespaceHandling
  public const
    Default_ = 0;
    OmitDuplicates = 1;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NewLineHandling')]
  DNNewLineHandling = type Integer;
  DNNewLineHandlingHelper = record helper for DNNewLineHandling
  public const
    Replace = 0;
    Entitize = 1;
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ReadState')]
  DNReadState = type Integer;
  DNReadStateHelper = record helper for DNReadState
  public const
    Initial = 0;
    Interactive = 1;
    Error = 2;
    EndOfFile = 3;
    Closed = 4;
  end;


  //-------------namespace: System.Xml.Resolvers----------------
  [DNTypeName('System.Xml.Resolvers.XmlKnownDtds')]
  DNXmlKnownDtds = type Integer;
  DNXmlKnownDtdsHelper = record helper for DNXmlKnownDtds
  public const
    None = 0;
    Xhtml10 = 1;
    Rss091 = 2;
    All = 65535;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaContentProcessing')]
  DNXmlSchemaContentProcessing = type Integer;
  DNXmlSchemaContentProcessingHelper = record helper for DNXmlSchemaContentProcessing
  public const
    None = 0;
    Skip = 1;
    Lax = 2;
    Strict_ = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaContentType')]
  DNXmlSchemaContentType = type Integer;
  DNXmlSchemaContentTypeHelper = record helper for DNXmlSchemaContentType
  public const
    TextOnly = 0;
    Empty = 1;
    ElementOnly = 2;
    Mixed = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaDatatypeVariety')]
  DNXmlSchemaDatatypeVariety = type Integer;
  DNXmlSchemaDatatypeVarietyHelper = record helper for DNXmlSchemaDatatypeVariety
  public const
    Atomic = 0;
    List = 1;
    Union = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaDerivationMethod')]
  DNXmlSchemaDerivationMethod = type Integer;
  DNXmlSchemaDerivationMethodHelper = record helper for DNXmlSchemaDerivationMethod
  public const
    Empty = 0;
    Substitution = 1;
    Extension = 2;
    Restriction = 4;
    List = 8;
    Union = 16;
    All = 255;
    None = 256;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaForm')]
  DNXmlSchemaForm = type Integer;
  DNXmlSchemaFormHelper = record helper for DNXmlSchemaForm
  public const
    None = 0;
    Qualified = 1;
    Unqualified = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaInference+InferenceOption')]
  DNXmlSchemaInference_InferenceOption = type Integer;
  DNXmlSchemaInference_InferenceOptionHelper = record helper for DNXmlSchemaInference_InferenceOption
  public const
    Restricted = 0;
    Relaxed = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaUse')]
  DNXmlSchemaUse = type Integer;
  DNXmlSchemaUseHelper = record helper for DNXmlSchemaUse
  public const
    None = 0;
    Optional = 1;
    Prohibited = 2;
    Required = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidationFlags')]
  DNXmlSchemaValidationFlags = type Integer;
  DNXmlSchemaValidationFlagsHelper = record helper for DNXmlSchemaValidationFlags
  public const
    None = 0;
    ProcessInlineSchema = 1;
    ProcessSchemaLocation = 2;
    ReportValidationWarnings = 4;
    ProcessIdentityConstraints = 8;
    AllowXmlAttributes = 16;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidity')]
  DNXmlSchemaValidity = type Integer;
  DNXmlSchemaValidityHelper = record helper for DNXmlSchemaValidity
  public const
    NotKnown = 0;
    Valid = 1;
    Invalid = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSeverityType')]
  DNXmlSeverityType = type Integer;
  DNXmlSeverityTypeHelper = record helper for DNXmlSeverityType
  public const
    Error = 0;
    Warning = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlTypeCode')]
  DNXmlTypeCode = type Integer;
  DNXmlTypeCodeHelper = record helper for DNXmlTypeCode
  public const
    None = 0;
    Item = 1;
    Node = 2;
    Document = 3;
    Element = 4;
    Attribute = 5;
    Namespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Text = 9;
    AnyAtomicType = 10;
    UntypedAtomic = 11;
    String_ = 12;
    Boolean = 13;
    Decimal = 14;
    Float = 15;
    Double = 16;
    Duration = 17;
    DateTime = 18;
    Time = 19;
    Date = 20;
    GYearMonth = 21;
    GYear = 22;
    GMonthDay = 23;
    GDay = 24;
    GMonth = 25;
    HexBinary = 26;
    Base64Binary = 27;
    AnyUri = 28;
    QName = 29;
    Notation = 30;
    NormalizedString = 31;
    Token = 32;
    Language = 33;
    NmToken = 34;
    Name = 35;
    NCName = 36;
    Id = 37;
    Idref = 38;
    Entity = 39;
    Integer = 40;
    NonPositiveInteger = 41;
    NegativeInteger = 42;
    Long = 43;
    Int = 44;
    Short = 45;
    Byte = 46;
    NonNegativeInteger = 47;
    UnsignedLong = 48;
    UnsignedInt = 49;
    UnsignedShort = 50;
    UnsignedByte = 51;
    PositiveInteger = 52;
    YearMonthDuration = 53;
    DayTimeDuration = 54;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.CodeGenerationOptions')]
  DNCodeGenerationOptions = type Integer;
  DNCodeGenerationOptionsHelper = record helper for DNCodeGenerationOptions
  public const
    None = 0;
    GenerateProperties = 1;
    GenerateNewAsync = 2;
    GenerateOldAsync = 4;
    GenerateOrder = 8;
    EnableDataBinding = 16;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.XmlMappingAccess')]
  DNXmlMappingAccess = type Integer;
  DNXmlMappingAccessHelper = record helper for DNXmlMappingAccess
  public const
    None = 0;
    Read = 1;
    Write = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    None = 0;
    Auto = 1;
    DTD = 2;
    XDR = 3;
    Schema = 4;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.WhitespaceHandling')]
  DNWhitespaceHandling = type Integer;
  DNWhitespaceHandlingHelper = record helper for DNWhitespaceHandling
  public const
    All = 0;
    Significant = 1;
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.WriteState')]
  DNWriteState = type Integer;
  DNWriteStateHelper = record helper for DNWriteState
  public const
    Start = 0;
    Prolog = 1;
    Element = 2;
    Attribute = 3;
    Content = 4;
    Closed = 5;
    Error = 6;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlDateTimeSerializationMode')]
  DNXmlDateTimeSerializationMode = type Integer;
  DNXmlDateTimeSerializationModeHelper = record helper for DNXmlDateTimeSerializationMode
  public const
    Local = 0;
    Utc = 1;
    Unspecified = 2;
    RoundtripKind = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNamespaceScope')]
  DNXmlNamespaceScope = type Integer;
  DNXmlNamespaceScopeHelper = record helper for DNXmlNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeChangedAction')]
  DNXmlNodeChangedAction = type Integer;
  DNXmlNodeChangedActionHelper = record helper for DNXmlNodeChangedAction
  public const
    Insert = 0;
    Remove = 1;
    Change = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeOrder')]
  DNXmlNodeOrder = type Integer;
  DNXmlNodeOrderHelper = record helper for DNXmlNodeOrder
  public const
    Before = 0;
    After = 1;
    Same = 2;
    Unknown = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeType')]
  DNXmlNodeType = type Integer;
  DNXmlNodeTypeHelper = record helper for DNXmlNodeType
  public const
    None = 0;
    Element = 1;
    Attribute = 2;
    Text = 3;
    CDATA = 4;
    EntityReference = 5;
    Entity = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Document = 9;
    DocumentType = 10;
    DocumentFragment = 11;
    Notation = 12;
    Whitespace = 13;
    SignificantWhitespace = 14;
    EndElement = 15;
    EndEntity = 16;
    XmlDeclaration = 17;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlOutputMethod')]
  DNXmlOutputMethod = type Integer;
  DNXmlOutputMethodHelper = record helper for DNXmlOutputMethod
  public const
    Xml = 0;
    Html = 1;
    Text = 2;
    AutoDetect = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlSpace')]
  DNXmlSpace = type Integer;
  DNXmlSpaceHelper = record helper for DNXmlSpace
  public const
    None = 0;
    Default_ = 1;
    Preserve = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlTokenizedType')]
  DNXmlTokenizedType = type Integer;
  DNXmlTokenizedTypeHelper = record helper for DNXmlTokenizedType
  public const
    CDATA = 0;
    ID = 1;
    IDREF = 2;
    IDREFS = 3;
    ENTITY = 4;
    ENTITIES = 5;
    NMTOKEN = 6;
    NMTOKENS = 7;
    NOTATION = 8;
    ENUMERATION = 9;
    QName = 10;
    NCName = 11;
    None = 12;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlCaseOrder')]
  DNXmlCaseOrder = type Integer;
  DNXmlCaseOrderHelper = record helper for DNXmlCaseOrder
  public const
    None = 0;
    UpperFirst = 1;
    LowerFirst = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlDataType')]
  DNXmlDataType = type Integer;
  DNXmlDataTypeHelper = record helper for DNXmlDataType
  public const
    Text = 1;
    Number = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlSortOrder')]
  DNXmlSortOrder = type Integer;
  DNXmlSortOrderHelper = record helper for DNXmlSortOrder
  public const
    Ascending = 1;
    Descending = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNamespaceScope')]
  DNXPathNamespaceScope = type Integer;
  DNXPathNamespaceScopeHelper = record helper for DNXPathNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNodeType')]
  DNXPathNodeType = type Integer;
  DNXPathNodeTypeHelper = record helper for DNXPathNodeType
  public const
    Root = 0;
    Element = 1;
    Attribute = 2;
    Namespace = 3;
    Text = 4;
    SignificantWhitespace = 5;
    Whitespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    All = 9;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathResultType')]
  DNXPathResultType = type Integer;
  DNXPathResultTypeHelper = record helper for DNXPathResultType
  public const
    Number = 0;
    String_ = 1;
    Navigator = 1;
    Boolean = 2;
    NodeSet = 3;
    Any = 5;
    Error = 6;
  end;




type


{ declares }

  DNIApplicationResourceStreamResolver = interface; // type: System.Xml.IApplicationResourceStreamResolver, namespace: System.Xml
  DNIHasXmlNode = interface; // type: System.Xml.IHasXmlNode, namespace: System.Xml
  DNIXmlLineInfo = interface; // type: System.Xml.IXmlLineInfo, namespace: System.Xml
  DNIXmlNamespaceResolver = interface; // type: System.Xml.IXmlNamespaceResolver, namespace: System.Xml
  DNIXmlSchemaInfo = interface; // type: System.Xml.Schema.IXmlSchemaInfo, namespace: System.Xml.Schema
  DNIXmlSerializable = interface; // type: System.Xml.Serialization.IXmlSerializable, namespace: System.Xml.Serialization
  DNIXmlTextParser = interface; // type: System.Xml.Serialization.IXmlTextParser, namespace: System.Xml.Serialization
  DNIXPathNavigable = interface; // type: System.Xml.XPath.IXPathNavigable, namespace: System.Xml.XPath
  DNIXsltContextFunction = interface; // type: System.Xml.Xsl.IXsltContextFunction, namespace: System.Xml.Xsl
  DNIXsltContextVariable = interface; // type: System.Xml.Xsl.IXsltContextVariable, namespace: System.Xml.Xsl
  DNSoapAttributeAttribute = interface; // type: System.Xml.Serialization.SoapAttributeAttribute, namespace: System.Xml.Serialization
  DNSoapElementAttribute = interface; // type: System.Xml.Serialization.SoapElementAttribute, namespace: System.Xml.Serialization
  DNSoapEnumAttribute = interface; // type: System.Xml.Serialization.SoapEnumAttribute, namespace: System.Xml.Serialization
  DNSoapIgnoreAttribute = interface; // type: System.Xml.Serialization.SoapIgnoreAttribute, namespace: System.Xml.Serialization
  DNSoapIncludeAttribute = interface; // type: System.Xml.Serialization.SoapIncludeAttribute, namespace: System.Xml.Serialization
  DNSoapTypeAttribute = interface; // type: System.Xml.Serialization.SoapTypeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAnyAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyElementAttribute = interface; // type: System.Xml.Serialization.XmlAnyElementAttribute, namespace: System.Xml.Serialization
  DNXmlArrayAttribute = interface; // type: System.Xml.Serialization.XmlArrayAttribute, namespace: System.Xml.Serialization
  DNXmlArrayItemAttribute = interface; // type: System.Xml.Serialization.XmlArrayItemAttribute, namespace: System.Xml.Serialization
  DNXmlAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlChoiceIdentifierAttribute = interface; // type: System.Xml.Serialization.XmlChoiceIdentifierAttribute, namespace: System.Xml.Serialization
  DNXmlElementAttribute = interface; // type: System.Xml.Serialization.XmlElementAttribute, namespace: System.Xml.Serialization
  DNXmlEnumAttribute = interface; // type: System.Xml.Serialization.XmlEnumAttribute, namespace: System.Xml.Serialization
  DNXmlIgnoreAttribute = interface; // type: System.Xml.Serialization.XmlIgnoreAttribute, namespace: System.Xml.Serialization
  DNXmlIncludeAttribute = interface; // type: System.Xml.Serialization.XmlIncludeAttribute, namespace: System.Xml.Serialization
  DNXmlNamespaceDeclarationsAttribute = interface; // type: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute, namespace: System.Xml.Serialization
  DNXmlRootAttribute = interface; // type: System.Xml.Serialization.XmlRootAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaProviderAttribute = interface; // type: System.Xml.Serialization.XmlSchemaProviderAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerAssemblyAttribute = interface; // type: System.Xml.Serialization.XmlSerializerAssemblyAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerVersionAttribute = interface; // type: System.Xml.Serialization.XmlSerializerVersionAttribute, namespace: System.Xml.Serialization
  DNXmlTextAttribute = interface; // type: System.Xml.Serialization.XmlTextAttribute, namespace: System.Xml.Serialization
  DNXmlTypeAttribute = interface; // type: System.Xml.Serialization.XmlTypeAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaObjectCollection = interface; // type: System.Xml.Schema.XmlSchemaObjectCollection, namespace: System.Xml.Schema
  DNSchemaImporterExtensionCollection = interface; // type: System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection, namespace: System.Xml.Serialization.Advanced
  DNXmlAnyElementAttributes = interface; // type: System.Xml.Serialization.XmlAnyElementAttributes, namespace: System.Xml.Serialization
  DNXmlArrayItemAttributes = interface; // type: System.Xml.Serialization.XmlArrayItemAttributes, namespace: System.Xml.Serialization
  DNXmlElementAttributes = interface; // type: System.Xml.Serialization.XmlElementAttributes, namespace: System.Xml.Serialization
  DNXmlSchemas = interface; // type: System.Xml.Serialization.XmlSchemas, namespace: System.Xml.Serialization
  DNValidationEventArgs = interface; // type: System.Xml.Schema.ValidationEventArgs, namespace: System.Xml.Schema
  DNUnreferencedObjectEventArgs = interface; // type: System.Xml.Serialization.UnreferencedObjectEventArgs, namespace: System.Xml.Serialization
  DNXmlAttributeEventArgs = interface; // type: System.Xml.Serialization.XmlAttributeEventArgs, namespace: System.Xml.Serialization
  DNXmlElementEventArgs = interface; // type: System.Xml.Serialization.XmlElementEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeEventArgs = interface; // type: System.Xml.Serialization.XmlNodeEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeChangedEventArgs = interface; // type: System.Xml.XmlNodeChangedEventArgs, namespace: System.Xml
  DNXsltMessageEncounteredEventArgs = interface; // type: System.Xml.Xsl.XsltMessageEncounteredEventArgs, namespace: System.Xml.Xsl
  DNXmlSchemaException = interface; // type: System.Xml.Schema.XmlSchemaException, namespace: System.Xml.Schema
  DNXmlSchemaInferenceException = interface; // type: System.Xml.Schema.XmlSchemaInferenceException, namespace: System.Xml.Schema
  DNXmlSchemaValidationException = interface; // type: System.Xml.Schema.XmlSchemaValidationException, namespace: System.Xml.Schema
  DNXmlException = interface; // type: System.Xml.XmlException, namespace: System.Xml
  DNXPathException = interface; // type: System.Xml.XPath.XPathException, namespace: System.Xml.XPath
  DNXsltException = interface; // type: System.Xml.Xsl.XsltException, namespace: System.Xml.Xsl
  DNXsltCompileException = interface; // type: System.Xml.Xsl.XsltCompileException, namespace: System.Xml.Xsl
  DNXmlDeserializationEvents = interface; // type: System.Xml.Serialization.XmlDeserializationEvents, namespace: System.Xml.Serialization
  DNXmlSchemaCollection = interface; // type: System.Xml.Schema.XmlSchemaCollection, namespace: System.Xml.Schema
  DNXmlSchemaCollectionEnumerator = interface; // type: System.Xml.Schema.XmlSchemaCollectionEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaCompilationSettings = interface; // type: System.Xml.Schema.XmlSchemaCompilationSettings, namespace: System.Xml.Schema
  DNXmlSchemaDatatype = interface; // type: System.Xml.Schema.XmlSchemaDatatype, namespace: System.Xml.Schema
  DNXmlSchemaInference = interface; // type: System.Xml.Schema.XmlSchemaInference, namespace: System.Xml.Schema
  DNXmlSchemaInfo = interface; // type: System.Xml.Schema.XmlSchemaInfo, namespace: System.Xml.Schema
  DNXmlSchemaObject = interface; // type: System.Xml.Schema.XmlSchemaObject, namespace: System.Xml.Schema
  DNXmlSchema = interface; // type: System.Xml.Schema.XmlSchema, namespace: System.Xml.Schema
  DNXmlSchemaAnnotated = interface; // type: System.Xml.Schema.XmlSchemaAnnotated, namespace: System.Xml.Schema
  DNXmlSchemaAnyAttribute = interface; // type: System.Xml.Schema.XmlSchemaAnyAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttribute = interface; // type: System.Xml.Schema.XmlSchemaAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroup = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroup, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroupRef = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaContent = interface; // type: System.Xml.Schema.XmlSchemaContent, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentExtension = interface; // type: System.Xml.Schema.XmlSchemaComplexContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaComplexContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentExtension = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaContentModel = interface; // type: System.Xml.Schema.XmlSchemaContentModel, namespace: System.Xml.Schema
  DNXmlSchemaComplexContent = interface; // type: System.Xml.Schema.XmlSchemaComplexContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleContent, namespace: System.Xml.Schema
  DNXmlSchemaFacet = interface; // type: System.Xml.Schema.XmlSchemaFacet, namespace: System.Xml.Schema
  DNXmlSchemaEnumerationFacet = interface; // type: System.Xml.Schema.XmlSchemaEnumerationFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaNumericFacet = interface; // type: System.Xml.Schema.XmlSchemaNumericFacet, namespace: System.Xml.Schema
  DNXmlSchemaFractionDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaFractionDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMinLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaTotalDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaTotalDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaPatternFacet = interface; // type: System.Xml.Schema.XmlSchemaPatternFacet, namespace: System.Xml.Schema
  DNXmlSchemaWhiteSpaceFacet = interface; // type: System.Xml.Schema.XmlSchemaWhiteSpaceFacet, namespace: System.Xml.Schema
  DNXmlSchemaGroup = interface; // type: System.Xml.Schema.XmlSchemaGroup, namespace: System.Xml.Schema
  DNXmlSchemaIdentityConstraint = interface; // type: System.Xml.Schema.XmlSchemaIdentityConstraint, namespace: System.Xml.Schema
  DNXmlSchemaKey = interface; // type: System.Xml.Schema.XmlSchemaKey, namespace: System.Xml.Schema
  DNXmlSchemaKeyref = interface; // type: System.Xml.Schema.XmlSchemaKeyref, namespace: System.Xml.Schema
  DNXmlSchemaUnique = interface; // type: System.Xml.Schema.XmlSchemaUnique, namespace: System.Xml.Schema
  DNXmlSchemaNotation = interface; // type: System.Xml.Schema.XmlSchemaNotation, namespace: System.Xml.Schema
  DNXmlSchemaParticle = interface; // type: System.Xml.Schema.XmlSchemaParticle, namespace: System.Xml.Schema
  DNXmlSchemaAny = interface; // type: System.Xml.Schema.XmlSchemaAny, namespace: System.Xml.Schema
  DNXmlSchemaElement = interface; // type: System.Xml.Schema.XmlSchemaElement, namespace: System.Xml.Schema
  DNXmlSchemaGroupBase = interface; // type: System.Xml.Schema.XmlSchemaGroupBase, namespace: System.Xml.Schema
  DNXmlSchemaAll = interface; // type: System.Xml.Schema.XmlSchemaAll, namespace: System.Xml.Schema
  DNXmlSchemaChoice = interface; // type: System.Xml.Schema.XmlSchemaChoice, namespace: System.Xml.Schema
  DNXmlSchemaSequence = interface; // type: System.Xml.Schema.XmlSchemaSequence, namespace: System.Xml.Schema
  DNXmlSchemaGroupRef = interface; // type: System.Xml.Schema.XmlSchemaGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeList = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeList, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeUnion = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeUnion, namespace: System.Xml.Schema
  DNXmlSchemaType = interface; // type: System.Xml.Schema.XmlSchemaType, namespace: System.Xml.Schema
  DNXmlSchemaComplexType = interface; // type: System.Xml.Schema.XmlSchemaComplexType, namespace: System.Xml.Schema
  DNXmlSchemaSimpleType = interface; // type: System.Xml.Schema.XmlSchemaSimpleType, namespace: System.Xml.Schema
  DNXmlSchemaXPath = interface; // type: System.Xml.Schema.XmlSchemaXPath, namespace: System.Xml.Schema
  DNXmlSchemaAnnotation = interface; // type: System.Xml.Schema.XmlSchemaAnnotation, namespace: System.Xml.Schema
  DNXmlSchemaAppInfo = interface; // type: System.Xml.Schema.XmlSchemaAppInfo, namespace: System.Xml.Schema
  DNXmlSchemaDocumentation = interface; // type: System.Xml.Schema.XmlSchemaDocumentation, namespace: System.Xml.Schema
  DNXmlSchemaExternal = interface; // type: System.Xml.Schema.XmlSchemaExternal, namespace: System.Xml.Schema
  DNXmlSchemaImport = interface; // type: System.Xml.Schema.XmlSchemaImport, namespace: System.Xml.Schema
  DNXmlSchemaInclude = interface; // type: System.Xml.Schema.XmlSchemaInclude, namespace: System.Xml.Schema
  DNXmlSchemaRedefine = interface; // type: System.Xml.Schema.XmlSchemaRedefine, namespace: System.Xml.Schema
  DNXmlSchemaObjectEnumerator = interface; // type: System.Xml.Schema.XmlSchemaObjectEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaObjectTable = interface; // type: System.Xml.Schema.XmlSchemaObjectTable, namespace: System.Xml.Schema
  DNXmlSchemaSet = interface; // type: System.Xml.Schema.XmlSchemaSet, namespace: System.Xml.Schema
  DNXmlSchemaValidator = interface; // type: System.Xml.Schema.XmlSchemaValidator, namespace: System.Xml.Schema
  DNSchemaImporterExtension = interface; // type: System.Xml.Serialization.Advanced.SchemaImporterExtension, namespace: System.Xml.Serialization.Advanced
  DNCodeExporter = interface; // type: System.Xml.Serialization.CodeExporter, namespace: System.Xml.Serialization
  DNSoapCodeExporter = interface; // type: System.Xml.Serialization.SoapCodeExporter, namespace: System.Xml.Serialization
  DNXmlCodeExporter = interface; // type: System.Xml.Serialization.XmlCodeExporter, namespace: System.Xml.Serialization
  DNCodeIdentifier = interface; // type: System.Xml.Serialization.CodeIdentifier, namespace: System.Xml.Serialization
  DNCodeIdentifiers = interface; // type: System.Xml.Serialization.CodeIdentifiers, namespace: System.Xml.Serialization
  DNImportContext = interface; // type: System.Xml.Serialization.ImportContext, namespace: System.Xml.Serialization
  DNSchemaImporter = interface; // type: System.Xml.Serialization.SchemaImporter, namespace: System.Xml.Serialization
  DNSoapSchemaImporter = interface; // type: System.Xml.Serialization.SoapSchemaImporter, namespace: System.Xml.Serialization
  DNXmlSchemaImporter = interface; // type: System.Xml.Serialization.XmlSchemaImporter, namespace: System.Xml.Serialization
  DNSoapAttributeOverrides = interface; // type: System.Xml.Serialization.SoapAttributeOverrides, namespace: System.Xml.Serialization
  DNSoapAttributes = interface; // type: System.Xml.Serialization.SoapAttributes, namespace: System.Xml.Serialization
  DNSoapReflectionImporter = interface; // type: System.Xml.Serialization.SoapReflectionImporter, namespace: System.Xml.Serialization
  DNSoapSchemaExporter = interface; // type: System.Xml.Serialization.SoapSchemaExporter, namespace: System.Xml.Serialization
  DNSoapSchemaMember = interface; // type: System.Xml.Serialization.SoapSchemaMember, namespace: System.Xml.Serialization
  DNXmlAttributeOverrides = interface; // type: System.Xml.Serialization.XmlAttributeOverrides, namespace: System.Xml.Serialization
  DNXmlAttributes = interface; // type: System.Xml.Serialization.XmlAttributes, namespace: System.Xml.Serialization
  DNXmlMapping = interface; // type: System.Xml.Serialization.XmlMapping, namespace: System.Xml.Serialization
  DNXmlMembersMapping = interface; // type: System.Xml.Serialization.XmlMembersMapping, namespace: System.Xml.Serialization
  DNXmlTypeMapping = interface; // type: System.Xml.Serialization.XmlTypeMapping, namespace: System.Xml.Serialization
  DNXmlMemberMapping = interface; // type: System.Xml.Serialization.XmlMemberMapping, namespace: System.Xml.Serialization
  DNXmlReflectionImporter = interface; // type: System.Xml.Serialization.XmlReflectionImporter, namespace: System.Xml.Serialization
  DNXmlReflectionMember = interface; // type: System.Xml.Serialization.XmlReflectionMember, namespace: System.Xml.Serialization
  DNXmlSchemaEnumerator = interface; // type: System.Xml.Serialization.XmlSchemaEnumerator, namespace: System.Xml.Serialization
  DNXmlSchemaExporter = interface; // type: System.Xml.Serialization.XmlSchemaExporter, namespace: System.Xml.Serialization
  DNXmlSerializationGeneratedCode = interface; // type: System.Xml.Serialization.XmlSerializationGeneratedCode, namespace: System.Xml.Serialization
  DNXmlSerializationReader = interface; // type: System.Xml.Serialization.XmlSerializationReader, namespace: System.Xml.Serialization
  DNXmlSerializationWriter = interface; // type: System.Xml.Serialization.XmlSerializationWriter, namespace: System.Xml.Serialization
  DNXmlSerializer = interface; // type: System.Xml.Serialization.XmlSerializer, namespace: System.Xml.Serialization
  DNXmlSerializerFactory = interface; // type: System.Xml.Serialization.XmlSerializerFactory, namespace: System.Xml.Serialization
  DNXmlSerializerImplementation = interface; // type: System.Xml.Serialization.XmlSerializerImplementation, namespace: System.Xml.Serialization
  DNXmlSerializerNamespaces = interface; // type: System.Xml.Serialization.XmlSerializerNamespaces, namespace: System.Xml.Serialization
  DNXmlConvert = interface; // type: System.Xml.XmlConvert, namespace: System.Xml
  DNXmlImplementation = interface; // type: System.Xml.XmlImplementation, namespace: System.Xml
  DNXmlNamedNodeMap = interface; // type: System.Xml.XmlNamedNodeMap, namespace: System.Xml
  DNXmlAttributeCollection = interface; // type: System.Xml.XmlAttributeCollection, namespace: System.Xml
  DNXmlNamespaceManager = interface; // type: System.Xml.XmlNamespaceManager, namespace: System.Xml
  DNXsltContext = interface; // type: System.Xml.Xsl.XsltContext, namespace: System.Xml.Xsl
  DNXmlNameTable = interface; // type: System.Xml.XmlNameTable, namespace: System.Xml
  DNNameTable = interface; // type: System.Xml.NameTable, namespace: System.Xml
  DNXmlNode = interface; // type: System.Xml.XmlNode, namespace: System.Xml
  DNXmlAttribute = interface; // type: System.Xml.XmlAttribute, namespace: System.Xml
  DNXmlDocument = interface; // type: System.Xml.XmlDocument, namespace: System.Xml
  DNXmlDocumentFragment = interface; // type: System.Xml.XmlDocumentFragment, namespace: System.Xml
  DNXmlEntity = interface; // type: System.Xml.XmlEntity, namespace: System.Xml
  DNXmlLinkedNode = interface; // type: System.Xml.XmlLinkedNode, namespace: System.Xml
  DNXmlCharacterData = interface; // type: System.Xml.XmlCharacterData, namespace: System.Xml
  DNXmlCDataSection = interface; // type: System.Xml.XmlCDataSection, namespace: System.Xml
  DNXmlComment = interface; // type: System.Xml.XmlComment, namespace: System.Xml
  DNXmlSignificantWhitespace = interface; // type: System.Xml.XmlSignificantWhitespace, namespace: System.Xml
  DNXmlText = interface; // type: System.Xml.XmlText, namespace: System.Xml
  DNXmlWhitespace = interface; // type: System.Xml.XmlWhitespace, namespace: System.Xml
  DNXmlDeclaration = interface; // type: System.Xml.XmlDeclaration, namespace: System.Xml
  DNXmlDocumentType = interface; // type: System.Xml.XmlDocumentType, namespace: System.Xml
  DNXmlElement = interface; // type: System.Xml.XmlElement, namespace: System.Xml
  DNXmlEntityReference = interface; // type: System.Xml.XmlEntityReference, namespace: System.Xml
  DNXmlProcessingInstruction = interface; // type: System.Xml.XmlProcessingInstruction, namespace: System.Xml
  DNXmlNotation = interface; // type: System.Xml.XmlNotation, namespace: System.Xml
  DNXmlNodeList = interface; // type: System.Xml.XmlNodeList, namespace: System.Xml
  DNXmlParserContext = interface; // type: System.Xml.XmlParserContext, namespace: System.Xml
  DNXmlQualifiedName = interface; // type: System.Xml.XmlQualifiedName, namespace: System.Xml
  DNXmlReader = interface; // type: System.Xml.XmlReader, namespace: System.Xml
  DNXmlNodeReader = interface; // type: System.Xml.XmlNodeReader, namespace: System.Xml
  DNXmlTextReader = interface; // type: System.Xml.XmlTextReader, namespace: System.Xml
  DNXmlValidatingReader = interface; // type: System.Xml.XmlValidatingReader, namespace: System.Xml
  DNXmlReaderSettings = interface; // type: System.Xml.XmlReaderSettings, namespace: System.Xml
  DNXmlResolver = interface; // type: System.Xml.XmlResolver, namespace: System.Xml
  DNXmlPreloadedResolver = interface; // type: System.Xml.Resolvers.XmlPreloadedResolver, namespace: System.Xml.Resolvers
  DNXmlSecureResolver = interface; // type: System.Xml.XmlSecureResolver, namespace: System.Xml
  DNXmlUrlResolver = interface; // type: System.Xml.XmlUrlResolver, namespace: System.Xml
  DNXmlXapResolver = interface; // type: System.Xml.XmlXapResolver, namespace: System.Xml
  DNXmlWriter = interface; // type: System.Xml.XmlWriter, namespace: System.Xml
  DNXmlTextWriter = interface; // type: System.Xml.XmlTextWriter, namespace: System.Xml
  DNXmlWriterSettings = interface; // type: System.Xml.XmlWriterSettings, namespace: System.Xml
  DNXPathDocument = interface; // type: System.Xml.XPath.XPathDocument, namespace: System.Xml.XPath
  DNXPathExpression = interface; // type: System.Xml.XPath.XPathExpression, namespace: System.Xml.XPath
  DNXPathItem = interface; // type: System.Xml.XPath.XPathItem, namespace: System.Xml.XPath
  DNXmlAtomicValue = interface; // type: System.Xml.Schema.XmlAtomicValue, namespace: System.Xml.Schema
  DNXPathNavigator = interface; // type: System.Xml.XPath.XPathNavigator, namespace: System.Xml.XPath
  DNXPathNodeIterator = interface; // type: System.Xml.XPath.XPathNodeIterator, namespace: System.Xml.XPath
  DNXslCompiledTransform = interface; // type: System.Xml.Xsl.XslCompiledTransform, namespace: System.Xml.Xsl
  DNXsltArgumentList = interface; // type: System.Xml.Xsl.XsltArgumentList, namespace: System.Xml.Xsl
  DNXslTransform = interface; // type: System.Xml.Xsl.XslTransform, namespace: System.Xml.Xsl
  DNXsltSettings = interface; // type: System.Xml.Xsl.XsltSettings, namespace: System.Xml.Xsl

{ delegates }

  [DNTypeName('System.Xml.Schema.ValidationEventHandler')]
  DNValidationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNValidationEventArgs) of object;

  [DNTypeName('System.Xml.Schema.XmlValueGetter')]
  DNXmlValueGetter = function: DDN.mscorlib.DNObject of object;

  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventHandler')]
  DNUnreferencedObjectEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUnreferencedObjectEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlAttributeEventHandler')]
  DNXmlAttributeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlAttributeEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlElementEventHandler')]
  DNXmlElementEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlElementEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlNodeEventHandler')]
  DNXmlNodeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlNodeEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationCollectionFixupCallback')]
  DNXmlSerializationCollectionFixupCallback = procedure(collection: DDN.mscorlib.DNObject; collectionItems: DDN.mscorlib.DNObject) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationFixupCallback')]
  DNXmlSerializationFixupCallback = procedure(fixup: DDN.mscorlib.DNObject) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationReadCallback')]
  DNXmlSerializationReadCallback = function: DDN.mscorlib.DNObject of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationWriteCallback')]
  DNXmlSerializationWriteCallback = procedure(o: DDN.mscorlib.DNObject) of object;

  [DNTypeName('System.Xml.XmlNodeChangedEventHandler')]
  DNXmlNodeChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlNodeChangedEventArgs) of object;

  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventHandler')]
  DNXsltMessageEncounteredEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXsltMessageEncounteredEventArgs) of object;




{ objects }

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IApplicationResourceStreamResolver')]
  DNIApplicationResourceStreamResolver = interface(DDN.mscorlib.DNObject)
  ['{3E390847-46B4-3E7B-ABE8-6BABB33B8E1B}']
  { methods } 

    function GetApplicationResourceStream(relativeUri: DDN.System.DNUri): DDN.mscorlib.DNStream;

  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IHasXmlNode')]
  DNIHasXmlNode = interface(DDN.mscorlib.DNObject)
  ['{54637763-C9DB-3D10-BEA0-E110003DDE65}']
  { methods } 

    function GetNode: DNXmlNode;

  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IXmlLineInfo')]
  DNIXmlLineInfo = interface(DDN.mscorlib.DNObject)
  ['{42FC7998-4F03-37C8-BEAA-3C23528E47CB}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function HasLineInfo: Boolean;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IXmlNamespaceResolver')]
  DNIXmlNamespaceResolver = interface(DDN.mscorlib.DNObject)
  ['{963A8E22-D935-3065-ACF5-220A8350C64F}']
  { methods } 

    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceName: string): string;

  end;

  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.IXmlSchemaInfo')]
  DNIXmlSchemaInfo = interface(DDN.mscorlib.DNObject)
  ['{B877D1C0-5915-310A-8B75-8937F127300C}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    function get_IsDefault: Boolean;
    function get_IsNil: Boolean;
    function get_MemberType: DNXmlSchemaSimpleType;
    function get_SchemaType: DNXmlSchemaType;
    function get_SchemaElement: DNXmlSchemaElement;
    function get_SchemaAttribute: DNXmlSchemaAttribute;

  { propertys } 

    property Validity: DNXmlSchemaValidity read get_Validity;
    property IsDefault: Boolean read get_IsDefault;
    property IsNil: Boolean read get_IsNil;
    property MemberType: DNXmlSchemaSimpleType read get_MemberType;
    property SchemaType: DNXmlSchemaType read get_SchemaType;
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement;
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.IXmlSerializable')]
  DNIXmlSerializable = interface(DDN.mscorlib.DNObject)
  ['{45471A9D-DC65-3A9F-8C82-7539D6BE5419}']
  { methods } 

    function GetSchema: DNXmlSchema;
    procedure ReadXml(reader: DNXmlReader);
    procedure WriteXml(writer: DNXmlWriter);

  end;

  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.IXmlTextParser')]
  DNIXmlTextParser = interface(DDN.mscorlib.DNObject)
  ['{769A70FF-3974-369E-A95B-4FA2F28FDE95}']
  { getters & setters } 

    function get_Normalized: Boolean;
    procedure set_Normalized(value: Boolean);
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);

  { propertys } 

    property Normalized: Boolean read get_Normalized write set_Normalized;
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
  end;

  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.IXPathNavigable')]
  DNIXPathNavigable = interface(DDN.mscorlib.DNObject)
  ['{075B8C9F-B06E-3269-BEB1-8CCBF38D96FA}']
  { methods } 

    function CreateNavigator: DNXPathNavigator;

  end;

  //-------------namespace: System.Xml.Xsl----------------
  [DNTypeName('System.Xml.Xsl.IXsltContextFunction')]
  DNIXsltContextFunction = interface(DDN.mscorlib.DNObject)
  ['{BC0FA391-C9DD-30BC-83AD-5CADCD9C03D3}']
  { getters & setters } 

    function get_Minargs: Int32;
    function get_Maxargs: Int32;
    function get_ReturnType: DNXPathResultType;
    function get_ArgTypes: TArray<DNXPathResultType>;

  { methods } 

    function Invoke(xsltContext: DNXsltContext; args: TArray<DDN.mscorlib.DNObject>; docContext: DNXPathNavigator): DDN.mscorlib.DNObject;

  { propertys } 

    property Minargs: Int32 read get_Minargs;
    property Maxargs: Int32 read get_Maxargs;
    property ReturnType: DNXPathResultType read get_ReturnType;
    property ArgTypes: TArray<DNXPathResultType> read get_ArgTypes;
  end;

  //-------------namespace: System.Xml.Xsl----------------
  [DNTypeName('System.Xml.Xsl.IXsltContextVariable')]
  DNIXsltContextVariable = interface(DDN.mscorlib.DNObject)
  ['{B6D7D55A-2E94-3C3B-911E-6AF424E51A0C}']
  { getters & setters } 

    function get_IsLocal: Boolean;
    function get_IsParam: Boolean;
    function get_VariableType: DNXPathResultType;

  { methods } 

    function Evaluate(xsltContext: DNXsltContext): DDN.mscorlib.DNObject;

  { propertys } 

    property IsLocal: Boolean read get_IsLocal;
    property IsParam: Boolean read get_IsParam;
    property VariableType: DNXPathResultType read get_VariableType;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{49DAF45A-402E-5EBB-B073-F39AA4C56D7B}']
  { constructors } 

    {class} function init: DNSoapAttributeAttribute; overload;
    {class} function init(attributeName: string): DNSoapAttributeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributeAttribute')]
  DNSoapAttributeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4504B32E-EB22-3F27-BCA7-DB3B07F37237}']
  { getters & setters } 

    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AttributeName: string read get_AttributeName write set_AttributeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapAttributeAttribute = class(TDNGenericImport<DNSoapAttributeAttributeClass, DNSoapAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapElementAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{38E0F882-BE78-5D68-8BA7-550B81B6F109}']
  { constructors } 

    {class} function init: DNSoapElementAttribute; overload;
    {class} function init(elementName: string): DNSoapElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapElementAttribute')]
  DNSoapElementAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E57CD296-C34A-30C1-8317-75493E4CDF1D}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapElementAttribute = class(TDNGenericImport<DNSoapElementAttributeClass, DNSoapElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapEnumAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{253B998A-D5F1-5173-A4D2-58E4CB6511DF}']
  { constructors } 

    {class} function init: DNSoapEnumAttribute; overload;
    {class} function init(name: string): DNSoapEnumAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapEnumAttribute')]
  DNSoapEnumAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{2B8628BC-D759-3440-A773-B56DAA1A5344}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapEnumAttribute = class(TDNGenericImport<DNSoapEnumAttributeClass, DNSoapEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIgnoreAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{73F35492-D08D-5416-8F3C-D7F03ECFCD27}']
  { constructors } 

    {class} function init: DNSoapIgnoreAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.SoapIgnoreAttribute')]
  DNSoapIgnoreAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6EBBAEDA-51B8-3E37-8F26-671A153211F3}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapIgnoreAttribute = class(TDNGenericImport<DNSoapIgnoreAttributeClass, DNSoapIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIncludeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8D640C9D-2585-5990-BE8D-2630815B4451}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNSoapIncludeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.SoapIncludeAttribute')]
  DNSoapIncludeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{27FF1ADB-F484-3584-AD4D-CD449974379C}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapIncludeAttribute = class(TDNGenericImport<DNSoapIncludeAttributeClass, DNSoapIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9A73D6E1-E3D1-5B0E-BE49-C6A577656D8D}']
  { constructors } 

    {class} function init: DNSoapTypeAttribute; overload;
    {class} function init(typeName: string): DNSoapTypeAttribute; overload;
    {class} function init(typeName: string; ns: string): DNSoapTypeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapTypeAttribute')]
  DNSoapTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9DC8944D-EDC6-34C8-8C55-C0970B79BAC2}']
  { getters & setters } 

    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    property TypeName: string read get_TypeName write set_TypeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapTypeAttribute = class(TDNGenericImport<DNSoapTypeAttributeClass, DNSoapTypeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyAttributeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{206F38EB-5C44-5294-A560-97878A664B28}']
  { constructors } 

    {class} function init: DNXmlAnyAttributeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyAttributeAttribute')]
  DNXmlAnyAttributeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1E962A37-A8A9-3189-9889-71B66F4DD5DA}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlAnyAttributeAttribute = class(TDNGenericImport<DNXmlAnyAttributeAttributeClass, DNXmlAnyAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{44BC4220-12AA-5AF7-A933-22EB33B52BDF}']
  { constructors } 

    {class} function init: DNXmlAnyElementAttribute; overload;
    {class} function init(name: string): DNXmlAnyElementAttribute; overload;
    {class} function init(name: string; ns: string): DNXmlAnyElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttribute')]
  DNXmlAnyElementAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{2C60A4E7-A0D0-3833-99EA-9A3E974A9A8E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlAnyElementAttribute = class(TDNGenericImport<DNXmlAnyElementAttributeClass, DNXmlAnyElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BECF040A-64C7-52F8-9BC3-03FA292F92CB}']
  { constructors } 

    {class} function init: DNXmlArrayAttribute; overload;
    {class} function init(elementName: string): DNXmlArrayAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayAttribute')]
  DNXmlArrayAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DA6F4C82-1E35-3CEA-9E37-25239ACB4C00}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlArrayAttribute = class(TDNGenericImport<DNXmlArrayAttributeClass, DNXmlArrayAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8D6F874C-B256-5E7B-A6B5-86933C305ADD}']
  { constructors } 

    {class} function init: DNXmlArrayItemAttribute; overload;
    {class} function init(elementName: string): DNXmlArrayItemAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlArrayItemAttribute; overload;
    {class} function init(elementName: string; &type: DDN.mscorlib.DNType): DNXmlArrayItemAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttribute')]
  DNXmlArrayItemAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{51B3D87B-3CDC-3B38-A4A4-EE8A8417BC10}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_NestingLevel: Int32;
    procedure set_NestingLevel(value: Int32);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property NestingLevel: Int32 read get_NestingLevel write set_NestingLevel;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlArrayItemAttribute = class(TDNGenericImport<DNXmlArrayItemAttributeClass, DNXmlArrayItemAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6E618193-817A-5AC8-9D7E-D24A29109089}']
  { constructors } 

    {class} function init: DNXmlAttributeAttribute; overload;
    {class} function init(attributeName: string): DNXmlAttributeAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlAttributeAttribute; overload;
    {class} function init(attributeName: string; &type: DDN.mscorlib.DNType): DNXmlAttributeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeAttribute')]
  DNXmlAttributeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{88BCD0FE-C31B-3F59-ABF7-15216A462445}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property AttributeName: string read get_AttributeName write set_AttributeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlAttributeAttribute = class(TDNGenericImport<DNXmlAttributeAttributeClass, DNXmlAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlChoiceIdentifierAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9773F923-FD71-5DCD-BB10-91B0A399E9D9}']
  { constructors } 

    {class} function init: DNXmlChoiceIdentifierAttribute; overload;
    {class} function init(name: string): DNXmlChoiceIdentifierAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlChoiceIdentifierAttribute')]
  DNXmlChoiceIdentifierAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CAA8D190-572C-3A95-8180-1CC75EDC0BFD}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName write set_MemberName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlChoiceIdentifierAttribute = class(TDNGenericImport<DNXmlChoiceIdentifierAttributeClass, DNXmlChoiceIdentifierAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C557DA8B-3C09-57EF-9A22-5E2E243D3CD0}']
  { constructors } 

    {class} function init: DNXmlElementAttribute; overload;
    {class} function init(elementName: string): DNXmlElementAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlElementAttribute; overload;
    {class} function init(elementName: string; &type: DDN.mscorlib.DNType): DNXmlElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlElementAttribute')]
  DNXmlElementAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5366E73D-B2AB-37EC-B1C4-8DA06442BF63}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlElementAttribute = class(TDNGenericImport<DNXmlElementAttributeClass, DNXmlElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlEnumAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1DD057D0-F133-5177-833E-F283C33629F1}']
  { constructors } 

    {class} function init: DNXmlEnumAttribute; overload;
    {class} function init(name: string): DNXmlEnumAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlEnumAttribute')]
  DNXmlEnumAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{90499D2E-9FB9-3642-8C14-49FD94B021EF}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlEnumAttribute = class(TDNGenericImport<DNXmlEnumAttributeClass, DNXmlEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIgnoreAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4DEA8B18-9646-5BC2-AEA0-19AF6ED2DD01}']
  { constructors } 

    {class} function init: DNXmlIgnoreAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlIgnoreAttribute')]
  DNXmlIgnoreAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{54F4CE31-7920-32B4-8238-B75CA0A27504}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlIgnoreAttribute = class(TDNGenericImport<DNXmlIgnoreAttributeClass, DNXmlIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIncludeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C0846CA8-CD27-537F-ADCC-BF658F6FC6D8}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNXmlIncludeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlIncludeAttribute')]
  DNXmlIncludeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{AC1C99CC-6252-3C09-9A52-A7A38D118C20}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlIncludeAttribute = class(TDNGenericImport<DNXmlIncludeAttributeClass, DNXmlIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNamespaceDeclarationsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{67B91508-5788-547F-920B-541A9D68AA41}']
  { constructors } 

    {class} function init: DNXmlNamespaceDeclarationsAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlNamespaceDeclarationsAttribute')]
  DNXmlNamespaceDeclarationsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6CDE0118-0B6E-3BE8-AD16-CDC5E9B3A5E6}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlNamespaceDeclarationsAttribute = class(TDNGenericImport<DNXmlNamespaceDeclarationsAttributeClass, DNXmlNamespaceDeclarationsAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlRootAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FE12BAB6-1A85-587C-9D37-6804D0A96DAF}']
  { constructors } 

    {class} function init: DNXmlRootAttribute; overload;
    {class} function init(elementName: string): DNXmlRootAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlRootAttribute')]
  DNXmlRootAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{33F71924-FE4F-3AD0-A002-8B5573576CC4}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlRootAttribute = class(TDNGenericImport<DNXmlRootAttributeClass, DNXmlRootAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{717D97CA-7345-52C6-A396-B6B44D2F8036}']
  { constructors } 

    {class} function init(methodName: string): DNXmlSchemaProviderAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaProviderAttribute')]
  DNXmlSchemaProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{204D72A2-7500-31FC-A821-4468DF082FD0}']
  { getters & setters } 

    function get_MethodName: string;
    function get_IsAny: Boolean;
    procedure set_IsAny(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MethodName: string read get_MethodName;
    property IsAny: Boolean read get_IsAny write set_IsAny;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlSchemaProviderAttribute = class(TDNGenericImport<DNXmlSchemaProviderAttributeClass, DNXmlSchemaProviderAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{88CB88A1-0530-5FCA-8EEE-E69EE246679B}']
  { constructors } 

    {class} function init: DNXmlSerializerAssemblyAttribute; overload;
    {class} function init(assemblyName: string): DNXmlSerializerAssemblyAttribute; overload;
    {class} function init(assemblyName: string; codeBase: string): DNXmlSerializerAssemblyAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerAssemblyAttribute')]
  DNXmlSerializerAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B00E3011-10AE-3FEB-A5D9-244D5A098F97}']
  { getters & setters } 

    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodeBase: string read get_CodeBase write set_CodeBase;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerAssemblyAttribute = class(TDNGenericImport<DNXmlSerializerAssemblyAttributeClass, DNXmlSerializerAssemblyAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerVersionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3402FBB1-BFBD-59C6-8F91-2816F1EACEF9}']
  { constructors } 

    {class} function init: DNXmlSerializerVersionAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlSerializerVersionAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerVersionAttribute')]
  DNXmlSerializerVersionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C6CC4642-93E7-384A-BF52-BB899D0EA879}']
  { getters & setters } 

    function get_ParentAssemblyId: string;
    procedure set_ParentAssemblyId(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParentAssemblyId: string read get_ParentAssemblyId write set_ParentAssemblyId;
    property Version: string read get_Version write set_Version;
    property Namespace: string read get_Namespace write set_Namespace;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerVersionAttribute = class(TDNGenericImport<DNXmlSerializerVersionAttributeClass, DNXmlSerializerVersionAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTextAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{80F995E0-F5A9-55A8-B4EE-C352D10CAD6F}']
  { constructors } 

    {class} function init: DNXmlTextAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlTextAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlTextAttribute')]
  DNXmlTextAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{27A1026B-067E-387B-8334-BDA5FD2753C8}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlTextAttribute = class(TDNGenericImport<DNXmlTextAttributeClass, DNXmlTextAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{63CD88E5-BB13-59C2-BB8E-01B59BCC1A18}']
  { constructors } 

    {class} function init: DNXmlTypeAttribute; overload;
    {class} function init(typeName: string): DNXmlTypeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlTypeAttribute')]
  DNXmlTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C309FF1D-96BE-3811-B0CD-391ACC257CEF}']
  { getters & setters } 

    function get_AnonymousType: Boolean;
    procedure set_AnonymousType(value: Boolean);
    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnonymousType: Boolean read get_AnonymousType write set_AnonymousType;
    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    property TypeName: string read get_TypeName write set_TypeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlTypeAttribute = class(TDNGenericImport<DNXmlTypeAttributeClass, DNXmlTypeAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D5C3C4A3-9DFD-54C7-AD9D-4639E2276E59}']
  { constructors } 

    {class} function init: DNXmlSchemaObjectCollection; overload;
    {class} function init(parent: DNXmlSchemaObject): DNXmlSchemaObjectCollection; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectCollection')]
  DNXmlSchemaObjectCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{596E0E99-AE45-3841-A593-3BC7DF11D333}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchemaObject;
    procedure set_Item(index: Int32; value: DNXmlSchemaObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNXmlSchemaObjectEnumerator;
    function Add(item: DNXmlSchemaObject): Int32;
    procedure Insert(index: Int32; item: DNXmlSchemaObject);
    function IndexOf(item: DNXmlSchemaObject): Int32;
    function &Contains(item: DNXmlSchemaObject): Boolean;
    procedure Remove(item: DNXmlSchemaObject);
    procedure CopyTo(&array: TArray<DNXmlSchemaObject>; index: Int32);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlSchemaObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemaObjectCollection = class(TDNGenericImport<DNXmlSchemaObjectCollectionClass, DNXmlSchemaObjectCollection>) end;

  //-------------namespace: System.Xml.Serialization.Advanced----------------
  DNSchemaImporterExtensionCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{7799DB0A-F760-5ED0-A35F-2DFB8ECF2F26}']
  { constructors } 

    {class} function init: DNSchemaImporterExtensionCollection;

  end;

  [DNTypeName('System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection')]
  DNSchemaImporterExtensionCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{91A8EB3D-084B-359D-B02C-2EAA9E5C3B20}']
  { getters & setters } 

    function get_Item(index: Int32): DNSchemaImporterExtension;
    procedure set_Item(index: Int32; value: DNSchemaImporterExtension);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(extension: DNSchemaImporterExtension): Int32; overload;
    procedure Remove(name: string); overload;
    procedure Clear;
    procedure Insert(index: Int32; extension: DNSchemaImporterExtension);
    function IndexOf(extension: DNSchemaImporterExtension): Int32;
    function &Contains(extension: DNSchemaImporterExtension): Boolean;
    procedure Remove(extension: DNSchemaImporterExtension); overload;
    procedure CopyTo(&array: TArray<DNSchemaImporterExtension>; index: Int32);
    function Add(name: string; &type: DDN.mscorlib.DNType): Int32; overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSchemaImporterExtension read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSchemaImporterExtensionCollection = class(TDNGenericImport<DNSchemaImporterExtensionCollectionClass, DNSchemaImporterExtensionCollection>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributesClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{9B8E8740-3F89-54AB-8C57-AA3D2861CB2F}']
  { constructors } 

    {class} function init: DNXmlAnyElementAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttributes')]
  DNXmlAnyElementAttributes = interface(DDN.mscorlib.DNCollectionBase)
  ['{7573313D-5C10-3E5A-A8DC-1552B0605CE5}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlAnyElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlAnyElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlAnyElementAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlAnyElementAttribute);
    function IndexOf(attribute: DNXmlAnyElementAttribute): Int32;
    function &Contains(attribute: DNXmlAnyElementAttribute): Boolean;
    procedure Remove(attribute: DNXmlAnyElementAttribute);
    procedure CopyTo(&array: TArray<DNXmlAnyElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlAnyElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAnyElementAttributes = class(TDNGenericImport<DNXmlAnyElementAttributesClass, DNXmlAnyElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributesClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{1502C14A-1A8E-5E6B-9DEF-B11AAA64421A}']
  { constructors } 

    {class} function init: DNXmlArrayItemAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttributes')]
  DNXmlArrayItemAttributes = interface(DDN.mscorlib.DNCollectionBase)
  ['{38B4E5B9-F563-311F-B7F9-59C041092790}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlArrayItemAttribute;
    procedure set_Item(index: Int32; value: DNXmlArrayItemAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlArrayItemAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlArrayItemAttribute);
    function IndexOf(attribute: DNXmlArrayItemAttribute): Int32;
    function &Contains(attribute: DNXmlArrayItemAttribute): Boolean;
    procedure Remove(attribute: DNXmlArrayItemAttribute);
    procedure CopyTo(&array: TArray<DNXmlArrayItemAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlArrayItemAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlArrayItemAttributes = class(TDNGenericImport<DNXmlArrayItemAttributesClass, DNXmlArrayItemAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributesClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{F8F22478-879B-5627-B9C6-0A1F51F290C2}']
  { constructors } 

    {class} function init: DNXmlElementAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlElementAttributes')]
  DNXmlElementAttributes = interface(DDN.mscorlib.DNCollectionBase)
  ['{5928E3D2-6501-3262-BC01-7B36866FDF37}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlElementAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlElementAttribute);
    function IndexOf(attribute: DNXmlElementAttribute): Int32;
    function &Contains(attribute: DNXmlElementAttribute): Boolean;
    procedure Remove(attribute: DNXmlElementAttribute);
    procedure CopyTo(&array: TArray<DNXmlElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlElementAttributes = class(TDNGenericImport<DNXmlElementAttributesClass, DNXmlElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemasClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{1F11517E-6391-5280-AA42-0F31A3AE13AB}']
  { constructors } 

    {class} function init: DNXmlSchemas;

  { static methods } 

    {class} function IsDataSet(schema: DNXmlSchema): Boolean;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemas')]
  DNXmlSchemas = interface(DDN.mscorlib.DNCollectionBase)
  ['{CAA46B12-3C51-3B6B-9832-0F9E5372C47C}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchema; overload;
    procedure set_Item(index: Int32; value: DNXmlSchema);
    function get_Item(ns: string): DNXmlSchema; overload;
    function get_IsCompiled: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetSchemas(ns: string): DDN.mscorlib.DNIList;
    function Add(schema: DNXmlSchema): Int32; overload;
    function Add(schema: DNXmlSchema; baseUri: DDN.System.DNUri): Int32; overload;
    procedure Add(schemas: DNXmlSchemas); overload;
    procedure AddReference(schema: DNXmlSchema);
    procedure Insert(index: Int32; schema: DNXmlSchema);
    function IndexOf(schema: DNXmlSchema): Int32;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    function &Contains(targetNamespace: string): Boolean; overload;
    procedure Remove(schema: DNXmlSchema);
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    function Find(name: DNXmlQualifiedName; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    procedure Compile(handler: DNValidationEventHandler; fullCompile: Boolean);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlSchema read get_Item write set_Item; default;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
    property IsCompiled: Boolean read get_IsCompiled;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemas = class(TDNGenericImport<DNXmlSchemasClass, DNXmlSchemas>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNValidationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FD89FE6F-3039-5078-BA46-B00CE55AACA1}']
  end;

  [DNTypeName('System.Xml.Schema.ValidationEventArgs')]
  DNValidationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{49138DCC-3D4B-3D96-AF44-350EF4295AB3}']
  { getters & setters } 

    function get_Severity: DNXmlSeverityType;
    function get_Exception: DNXmlSchemaException;
    function get_Message: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Severity: DNXmlSeverityType read get_Severity;
    property Exception: DNXmlSchemaException read get_Exception;
    property Message: string read get_Message;
  end;

  TDNValidationEventArgs = class(TDNGenericImport<DNValidationEventArgsClass, DNValidationEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNUnreferencedObjectEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7617BC02-6B99-5146-A719-F16FDE6B486F}']
  { constructors } 

    {class} function init(o: DDN.mscorlib.DNObject; id: string): DNUnreferencedObjectEventArgs;

  end;

  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventArgs')]
  DNUnreferencedObjectEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{CFC824D5-B349-3ADE-9231-EB95E797D4F2}']
  { getters & setters } 

    function get_UnreferencedObject: DDN.mscorlib.DNObject;
    function get_UnreferencedId: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UnreferencedObject: DDN.mscorlib.DNObject read get_UnreferencedObject;
    property UnreferencedId: string read get_UnreferencedId;
  end;

  TDNUnreferencedObjectEventArgs = class(TDNGenericImport<DNUnreferencedObjectEventArgsClass, DNUnreferencedObjectEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{997820B5-29F5-571C-9886-4457238350D8}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeEventArgs')]
  DNXmlAttributeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{651D1E7C-E0A0-390F-8AD9-FDDE2A67ECAC}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDN.mscorlib.DNObject;
    function get_Attr: DNXmlAttribute;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedAttributes: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ObjectBeingDeserialized: DDN.mscorlib.DNObject read get_ObjectBeingDeserialized;
    property Attr: DNXmlAttribute read get_Attr;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property ExpectedAttributes: string read get_ExpectedAttributes;
  end;

  TDNXmlAttributeEventArgs = class(TDNGenericImport<DNXmlAttributeEventArgsClass, DNXmlAttributeEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D95F4725-AEF4-5C6D-BE60-62E075E231D2}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlElementEventArgs')]
  DNXmlElementEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{61E0F174-1182-374D-9E3A-8D9866B8561D}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDN.mscorlib.DNObject;
    function get_Element: DNXmlElement;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedElements: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ObjectBeingDeserialized: DDN.mscorlib.DNObject read get_ObjectBeingDeserialized;
    property Element: DNXmlElement read get_Element;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property ExpectedElements: string read get_ExpectedElements;
  end;

  TDNXmlElementEventArgs = class(TDNGenericImport<DNXmlElementEventArgsClass, DNXmlElementEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNodeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FC43EE19-62C8-59F5-8D96-F5D73A9B02BE}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlNodeEventArgs')]
  DNXmlNodeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6015482F-C16B-3157-9314-1EC423F32215}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDN.mscorlib.DNObject;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Text: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ObjectBeingDeserialized: DDN.mscorlib.DNObject read get_ObjectBeingDeserialized;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Text: string read get_Text;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXmlNodeEventArgs = class(TDNGenericImport<DNXmlNodeEventArgsClass, DNXmlNodeEventArgs>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A5830A41-9A45-5E8D-BC73-144AE5DF513F}']
  { constructors } 

    {class} function init(node: DNXmlNode; oldParent: DNXmlNode; newParent: DNXmlNode; oldValue: string; newValue: string; action: DNXmlNodeChangedAction): DNXmlNodeChangedEventArgs;

  end;

  [DNTypeName('System.Xml.XmlNodeChangedEventArgs')]
  DNXmlNodeChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6F33740C-B2E1-3A44-A063-8F78C5C6CD1B}']
  { getters & setters } 

    function get_Action: DNXmlNodeChangedAction;
    function get_Node: DNXmlNode;
    function get_OldParent: DNXmlNode;
    function get_NewParent: DNXmlNode;
    function get_OldValue: string;
    function get_NewValue: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNXmlNodeChangedAction read get_Action;
    property Node: DNXmlNode read get_Node;
    property OldParent: DNXmlNode read get_OldParent;
    property NewParent: DNXmlNode read get_NewParent;
    property OldValue: string read get_OldValue;
    property NewValue: string read get_NewValue;
  end;

  TDNXmlNodeChangedEventArgs = class(TDNGenericImport<DNXmlNodeChangedEventArgsClass, DNXmlNodeChangedEventArgs>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltMessageEncounteredEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5EAFE3C8-A99D-586C-A368-212AB818D2E4}']
  end;

  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventArgs')]
  DNXsltMessageEncounteredEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D64C2CC0-AC0D-3BED-8304-F97565C2AC47}']
  { getters & setters } 

    function get_Message: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Message: string read get_Message;
  end;

  TDNXsltMessageEncounteredEventArgs = class(TDNGenericImport<DNXsltMessageEncounteredEventArgsClass, DNXsltMessageEncounteredEventArgs>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{4B8E330C-085D-5126-AF56-589AA8D96746}']
  { constructors } 

    {class} function init: DNXmlSchemaException; overload;
    {class} function init(message: string): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaException')]
  DNXmlSchemaException = interface(DDN.mscorlib.DNSystemException)
  ['{8AABB69F-6F59-302E-86A1-437E6B0CA7EC}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSchemaException = class(TDNGenericImport<DNXmlSchemaExceptionClass, DNXmlSchemaException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{E355BADA-A926-59B3-A686-91612EC07F77}']
  { constructors } 

    {class} function init: DNXmlSchemaInferenceException; overload;
    {class} function init(message: string): DNXmlSchemaInferenceException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlSchemaInferenceException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaInferenceException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInferenceException')]
  DNXmlSchemaInferenceException = interface(DNXmlSchemaException)
  ['{305ED301-6C6D-3D89-9A24-680D177D7152}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSchemaInferenceException = class(TDNGenericImport<DNXmlSchemaInferenceExceptionClass, DNXmlSchemaInferenceException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidationExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{24E28276-CCFA-5DAD-87F7-F068F084D0F6}']
  { constructors } 

    {class} function init: DNXmlSchemaValidationException; overload;
    {class} function init(message: string): DNXmlSchemaValidationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlSchemaValidationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaValidationException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaValidationException')]
  DNXmlSchemaValidationException = interface(DNXmlSchemaException)
  ['{8E6EF0C5-0160-3931-B20C-576F8CC26C01}']
  { getters & setters } 

    function get_SourceObject: DDN.mscorlib.DNObject;
    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SourceObject: DDN.mscorlib.DNObject read get_SourceObject;
    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSchemaValidationException = class(TDNGenericImport<DNXmlSchemaValidationExceptionClass, DNXmlSchemaValidationException>) end;

  //-------------namespace: System.Xml----------------
  DNXmlExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{C3490C0B-EFEB-50A4-9DF8-B40B0CBD5FB4}']
  { constructors } 

    {class} function init: DNXmlException; overload;
    {class} function init(message: string): DNXmlException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlException; overload;

  end;

  [DNTypeName('System.Xml.XmlException')]
  DNXmlException = interface(DDN.mscorlib.DNSystemException)
  ['{30F748F0-C290-3CA0-98B6-E8F24430EB9F}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceUri: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceUri: string read get_SourceUri;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlException = class(TDNGenericImport<DNXmlExceptionClass, DNXmlException>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{5C4D129F-CBDD-5B69-A9C0-1AFDDD429D3B}']
  { constructors } 

    {class} function init: DNXPathException; overload;
    {class} function init(message: string): DNXPathException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXPathException; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathException')]
  DNXPathException = interface(DDN.mscorlib.DNSystemException)
  ['{6004C074-5837-3698-9136-E2C7D87699E0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXPathException = class(TDNGenericImport<DNXPathExceptionClass, DNXPathException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{0383D815-3766-5C40-86C0-57F7522614CD}']
  { constructors } 

    {class} function init: DNXsltException; overload;
    {class} function init(message: string): DNXsltException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXsltException; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XsltException')]
  DNXsltException = interface(DDN.mscorlib.DNSystemException)
  ['{12D02992-1EAD-31E9-8AC8-3F6D034A0BEC}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXsltException = class(TDNGenericImport<DNXsltExceptionClass, DNXsltException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltCompileExceptionClass = interface(DNXsltExceptionClass)
  ['{8DB20846-5093-53A4-948B-B06CBC38CE68}']
  { constructors } 

    {class} function init: DNXsltCompileException; overload;
    {class} function init(message: string): DNXsltCompileException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXsltCompileException; overload;
    {class} function init(inner: DDN.mscorlib.DNException; sourceUri: string; lineNumber: Int32; linePosition: Int32): DNXsltCompileException; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XsltCompileException')]
  DNXsltCompileException = interface(DNXsltException)
  ['{707BE9AA-4FED-3490-8C33-EF4FE145ED64}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXsltCompileException = class(TDNGenericImport<DNXsltCompileExceptionClass, DNXsltCompileException>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlDeserializationEventsClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1E3AD3F0-8C17-5012-B8B6-8083974C1A6D}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlDeserializationEvents')]
  DNXmlDeserializationEvents = interface(DDN.mscorlib.DNValueType)
  ['{F43B6678-EEDE-3EC6-9E8D-54F7ABE697FF}']
  { getters & setters } 

    function get_OnUnknownNode: DNXmlNodeEventHandler;
    procedure set_OnUnknownNode(value: DNXmlNodeEventHandler);
    function get_OnUnknownAttribute: DNXmlAttributeEventHandler;
    procedure set_OnUnknownAttribute(value: DNXmlAttributeEventHandler);
    function get_OnUnknownElement: DNXmlElementEventHandler;
    procedure set_OnUnknownElement(value: DNXmlElementEventHandler);
    function get_OnUnreferencedObject: DNUnreferencedObjectEventHandler;
    procedure set_OnUnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property OnUnknownNode: DNXmlNodeEventHandler read get_OnUnknownNode write set_OnUnknownNode;
    property OnUnknownAttribute: DNXmlAttributeEventHandler read get_OnUnknownAttribute write set_OnUnknownAttribute;
    property OnUnknownElement: DNXmlElementEventHandler read get_OnUnknownElement write set_OnUnknownElement;
    property OnUnreferencedObject: DNUnreferencedObjectEventHandler read get_OnUnreferencedObject write set_OnUnreferencedObject;
  end;

  TDNXmlDeserializationEvents = class(TDNGenericImport<DNXmlDeserializationEventsClass, DNXmlDeserializationEvents>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionClass = interface(DNObjectClass)
  ['{B466F60F-7412-5C08-98BC-E0DEF0883D89}']
  { constructors } 

    {class} function init: DNXmlSchemaCollection; overload;
    {class} function init(nametable: DNXmlNameTable): DNXmlSchemaCollection; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCollection')]
  DNXmlSchemaCollection = interface(DDN.mscorlib.DNICollection)
  ['{07C2EA08-5030-372B-8B74-B250123E74E4}']
  { getters & setters } 

    function get_Count: Int32;
    function get_NameTable: DNXmlNameTable;
    function get_Item(ns: string): DNXmlSchema;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Add(ns: string; uri: string): DNXmlSchema; overload;
    function Add(ns: string; reader: DNXmlReader): DNXmlSchema; overload;
    function Add(ns: string; reader: DNXmlReader; resolver: DNXmlResolver): DNXmlSchema; overload;
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    function Add(schema: DNXmlSchema; resolver: DNXmlResolver): DNXmlSchema; overload;
    procedure Add(schema: DNXmlSchemaCollection); overload;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    function &Contains(ns: string): Boolean; overload;
    function GetEnumerator: DNXmlSchemaCollectionEnumerator;
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property NameTable: DNXmlNameTable read get_NameTable;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
  end;

  TDNXmlSchemaCollection = class(TDNGenericImport<DNXmlSchemaCollectionClass, DNXmlSchemaCollection>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionEnumeratorClass = interface(DNObjectClass)
  ['{9CFC4530-B83B-5D91-B879-039B03C1C6B7}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCollectionEnumerator')]
  DNXmlSchemaCollectionEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{67511776-E360-33B6-B6CF-F5D50EDD940F}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaCollectionEnumerator = class(TDNGenericImport<DNXmlSchemaCollectionEnumeratorClass, DNXmlSchemaCollectionEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCompilationSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC03EB50-C5AF-5D01-B23B-153DCDBC4324}']
  { constructors } 

    {class} function init: DNXmlSchemaCompilationSettings;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCompilationSettings')]
  DNXmlSchemaCompilationSettings = interface(DDN.mscorlib.DNObject)
  ['{97EE4B70-692A-3087-8C45-C10098A42C8A}']
  { getters & setters } 

    function get_EnableUpaCheck: Boolean;
    procedure set_EnableUpaCheck(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableUpaCheck: Boolean read get_EnableUpaCheck write set_EnableUpaCheck;
  end;

  TDNXmlSchemaCompilationSettings = class(TDNGenericImport<DNXmlSchemaCompilationSettingsClass, DNXmlSchemaCompilationSettings>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDatatypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{69D9537D-424E-5F19-8DA5-EDBFCB8ED738}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaDatatype')]
  DNXmlSchemaDatatype = interface(DDN.mscorlib.DNObject)
  ['{8EE63134-3EA0-3773-A886-3AB9AEF07C8B}']
  { getters & setters } 

    function get_ValueType: DDN.mscorlib.DNType;
    function get_TokenizedType: DNXmlTokenizedType;
    function get_Variety: DNXmlSchemaDatatypeVariety;
    function get_TypeCode: DNXmlTypeCode;

  { methods } 

    function ChangeType(value: DDN.mscorlib.DNObject; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ChangeType(value: DDN.mscorlib.DNObject; targetType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function IsDerivedFrom(datatype: DNXmlSchemaDatatype): Boolean;
    function ParseValue(s: string; nameTable: DNXmlNameTable; nsmgr: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property TokenizedType: DNXmlTokenizedType read get_TokenizedType;
    property Variety: DNXmlSchemaDatatypeVariety read get_Variety;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
  end;

  TDNXmlSchemaDatatype = class(TDNGenericImport<DNXmlSchemaDatatypeClass, DNXmlSchemaDatatype>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A85A5E3-6630-5B85-AF7F-3E2E27BD183C}']
  { constructors } 

    {class} function init: DNXmlSchemaInference;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInference')]
  DNXmlSchemaInference = interface(DDN.mscorlib.DNObject)
  ['{0D32CCEE-AA40-3A11-A8B2-DE2E4B9632F3}']
  { getters & setters } 

    function get_Occurrence: DNXmlSchemaInference_InferenceOption;
    procedure set_Occurrence(value: DNXmlSchemaInference_InferenceOption);
    function get_TypeInference: DNXmlSchemaInference_InferenceOption;
    procedure set_TypeInference(value: DNXmlSchemaInference_InferenceOption);

  { methods } 

    function InferSchema(instanceDocument: DNXmlReader): DNXmlSchemaSet; overload;
    function InferSchema(instanceDocument: DNXmlReader; schemas: DNXmlSchemaSet): DNXmlSchemaSet; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Occurrence: DNXmlSchemaInference_InferenceOption read get_Occurrence write set_Occurrence;
    property TypeInference: DNXmlSchemaInference_InferenceOption read get_TypeInference write set_TypeInference;
  end;

  TDNXmlSchemaInference = class(TDNGenericImport<DNXmlSchemaInferenceClass, DNXmlSchemaInference>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInfoClass = interface(DNObjectClass)
  ['{80FF2DD1-35AC-5A22-B795-D99E466BCF96}']
  { constructors } 

    {class} function init: DNXmlSchemaInfo;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInfo')]
  DNXmlSchemaInfo = interface(DNIXmlSchemaInfo)
  ['{7D360325-9956-3DD6-A123-74B4772BDB4E}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    procedure set_Validity(value: DNXmlSchemaValidity);
    function get_IsDefault: Boolean;
    procedure set_IsDefault(value: Boolean);
    function get_IsNil: Boolean;
    procedure set_IsNil(value: Boolean);
    function get_MemberType: DNXmlSchemaSimpleType;
    procedure set_MemberType(value: DNXmlSchemaSimpleType);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_SchemaElement: DNXmlSchemaElement;
    procedure set_SchemaElement(value: DNXmlSchemaElement);
    function get_SchemaAttribute: DNXmlSchemaAttribute;
    procedure set_SchemaAttribute(value: DNXmlSchemaAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    procedure set_ContentType(value: DNXmlSchemaContentType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Validity: DNXmlSchemaValidity read get_Validity write set_Validity;
    property IsDefault: Boolean read get_IsDefault write set_IsDefault;
    property IsNil: Boolean read get_IsNil write set_IsNil;
    property MemberType: DNXmlSchemaSimpleType read get_MemberType write set_MemberType;
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement write set_SchemaElement;
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute write set_SchemaAttribute;
    property ContentType: DNXmlSchemaContentType read get_ContentType write set_ContentType;
  end;

  TDNXmlSchemaInfo = class(TDNGenericImport<DNXmlSchemaInfoClass, DNXmlSchemaInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0250456E-EBEA-5583-AA0A-B9F54DAB734E}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObject')]
  DNXmlSchemaObject = interface(DDN.mscorlib.DNObject)
  ['{83E9E35E-8F9E-3F9F-A9E9-B1999304E6FD}']
  { getters & setters } 

    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaObject = class(TDNGenericImport<DNXmlSchemaObjectClass, DNXmlSchemaObject>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaClass = interface(DNXmlSchemaObjectClass)
  ['{7248DFD9-39DA-5D4C-8B98-25C3608AEEE2}']
  { constructors } 

    {class} function init: DNXmlSchema;

  { static methods } 

    {class} function Read(reader: DDN.mscorlib.DNTextReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(stream: DDN.mscorlib.DNStream; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(reader: DNXmlReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchema')]
  DNXmlSchema = interface(DNXmlSchemaObject)
  ['{C6EC789B-76E3-3FC4-B6C0-383D1AB66E1E}']
  { getters & setters } 

    function get_AttributeFormDefault: DNXmlSchemaForm;
    procedure set_AttributeFormDefault(value: DNXmlSchemaForm);
    function get_BlockDefault: DNXmlSchemaDerivationMethod;
    procedure set_BlockDefault(value: DNXmlSchemaDerivationMethod);
    function get_FinalDefault: DNXmlSchemaDerivationMethod;
    procedure set_FinalDefault(value: DNXmlSchemaDerivationMethod);
    function get_ElementFormDefault: DNXmlSchemaForm;
    procedure set_ElementFormDefault(value: DNXmlSchemaForm);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Includes: DNXmlSchemaObjectCollection;
    function get_Items: DNXmlSchemaObjectCollection;
    function get_IsCompiled: Boolean;
    function get_Attributes: DNXmlSchemaObjectTable;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Elements: DNXmlSchemaObjectTable;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_Groups: DNXmlSchemaObjectTable;
    function get_Notations: DNXmlSchemaObjectTable;
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    procedure Write(stream: DDN.mscorlib.DNStream; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure Write(writer: DDN.mscorlib.DNTextWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DNXmlWriter); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler; resolver: DNXmlResolver); overload;
    procedure Write(writer: DNXmlWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AttributeFormDefault: DNXmlSchemaForm read get_AttributeFormDefault write set_AttributeFormDefault;
    property BlockDefault: DNXmlSchemaDerivationMethod read get_BlockDefault write set_BlockDefault;
    property FinalDefault: DNXmlSchemaDerivationMethod read get_FinalDefault write set_FinalDefault;
    property ElementFormDefault: DNXmlSchemaForm read get_ElementFormDefault write set_ElementFormDefault;
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    property Version: string read get_Version write set_Version;
    property Includes: DNXmlSchemaObjectCollection read get_Includes;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property IsCompiled: Boolean read get_IsCompiled;
    property Attributes: DNXmlSchemaObjectTable read get_Attributes;
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    property Elements: DNXmlSchemaObjectTable read get_Elements;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    property Notations: DNXmlSchemaObjectTable read get_Notations;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchema = class(TDNGenericImport<DNXmlSchemaClass, DNXmlSchema>)
  public const
   Namespace = 'http://www.w3.org/2001/XMLSchema';
   InstanceNamespace = 'http://www.w3.org/2001/XMLSchema-instance';
  end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotatedClass = interface(DNXmlSchemaObjectClass)
  ['{3216C5BF-5913-56B8-B0B0-5FB3E3A227A4}']
  { constructors } 

    {class} function init: DNXmlSchemaAnnotated;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotated')]
  DNXmlSchemaAnnotated = interface(DNXmlSchemaObject)
  ['{0DF3E834-EAC2-3865-A25E-59688BA0D688}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotated = class(TDNGenericImport<DNXmlSchemaAnnotatedClass, DNXmlSchemaAnnotated>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{9CFB6250-AF0C-5AA0-B7D8-350EB7F732AE}']
  { constructors } 

    {class} function init: DNXmlSchemaAnyAttribute;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnyAttribute')]
  DNXmlSchemaAnyAttribute = interface(DNXmlSchemaAnnotated)
  ['{40C424F4-9190-3790-8AD0-55CC187B217F}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnyAttribute = class(TDNGenericImport<DNXmlSchemaAnyAttributeClass, DNXmlSchemaAnyAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{047C3279-9803-5740-9BDD-5599B358884C}']
  { constructors } 

    {class} function init: DNXmlSchemaAttribute;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttribute')]
  DNXmlSchemaAttribute = interface(DNXmlSchemaAnnotated)
  ['{BC3ECB9B-06CE-3009-88C0-4148FBB2D47C}']
  { getters & setters } 

    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaSimpleType;
    procedure set_SchemaType(value: DNXmlSchemaSimpleType);
    function get_Use: DNXmlSchemaUse;
    procedure set_Use(value: DNXmlSchemaUse);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_AttributeType: DDN.mscorlib.DNObject;
    function get_AttributeSchemaType: DNXmlSchemaSimpleType;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaSimpleType read get_SchemaType write set_SchemaType;
    property Use: DNXmlSchemaUse read get_Use write set_Use;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property AttributeType: DDN.mscorlib.DNObject read get_AttributeType;
    property AttributeSchemaType: DNXmlSchemaSimpleType read get_AttributeSchemaType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttribute = class(TDNGenericImport<DNXmlSchemaAttributeClass, DNXmlSchemaAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2B7C70A0-EF92-5693-9746-5BF2129C1B94}']
  { constructors } 

    {class} function init: DNXmlSchemaAttributeGroup;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroup')]
  DNXmlSchemaAttributeGroup = interface(DNXmlSchemaAnnotated)
  ['{35B10603-0991-3646-B2F1-9D2A3A9A0279}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_RedefinedAttributeGroup: DNXmlSchemaAttributeGroup;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property RedefinedAttributeGroup: DNXmlSchemaAttributeGroup read get_RedefinedAttributeGroup;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroup = class(TDNGenericImport<DNXmlSchemaAttributeGroupClass, DNXmlSchemaAttributeGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupRefClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2E998C9E-B501-52C3-B5D9-6A3063D5B21D}']
  { constructors } 

    {class} function init: DNXmlSchemaAttributeGroupRef;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroupRef')]
  DNXmlSchemaAttributeGroupRef = interface(DNXmlSchemaAnnotated)
  ['{D6A224F8-7695-307E-9DDA-6B5A883A296B}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroupRef = class(TDNGenericImport<DNXmlSchemaAttributeGroupRefClass, DNXmlSchemaAttributeGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{CF8C2974-33B2-52C5-948F-35C36CF72365}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaContent')]
  DNXmlSchemaContent = interface(DNXmlSchemaAnnotated)
  ['{9D9EE977-A3C6-3D61-8BB9-7336C0BF3836}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContent = class(TDNGenericImport<DNXmlSchemaContentClass, DNXmlSchemaContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{B07D050A-73F9-579D-BCD4-6E9D6CB66A78}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContentExtension;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentExtension')]
  DNXmlSchemaComplexContentExtension = interface(DNXmlSchemaContent)
  ['{1526A89A-1CF2-393F-8C0D-8000E9588437}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentExtension = class(TDNGenericImport<DNXmlSchemaComplexContentExtensionClass, DNXmlSchemaComplexContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{E30FF509-608C-500A-9A4F-981E166F4D69}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContentRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentRestriction')]
  DNXmlSchemaComplexContentRestriction = interface(DNXmlSchemaContent)
  ['{4D19595C-ED72-346B-BBE6-38891A212A81}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentRestriction = class(TDNGenericImport<DNXmlSchemaComplexContentRestrictionClass, DNXmlSchemaComplexContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{CD975048-4D1D-5D13-B885-410BB0826C11}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContentExtension;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentExtension')]
  DNXmlSchemaSimpleContentExtension = interface(DNXmlSchemaContent)
  ['{32708983-B0FF-3520-A8A3-30E534FADEFD}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentExtension = class(TDNGenericImport<DNXmlSchemaSimpleContentExtensionClass, DNXmlSchemaSimpleContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{46661E34-4839-5148-8C2A-8B1C449105EB}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContentRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentRestriction')]
  DNXmlSchemaSimpleContentRestriction = interface(DNXmlSchemaContent)
  ['{7243265D-820F-34F6-B86A-3B230DC16D26}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentRestriction = class(TDNGenericImport<DNXmlSchemaSimpleContentRestrictionClass, DNXmlSchemaSimpleContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentModelClass = interface(DNXmlSchemaAnnotatedClass)
  ['{7FF05E65-54A1-5211-9A79-87BB9D514331}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaContentModel')]
  DNXmlSchemaContentModel = interface(DNXmlSchemaAnnotated)
  ['{5321123C-01D3-39A8-A7BC-148F19620BAF}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContentModel = class(TDNGenericImport<DNXmlSchemaContentModelClass, DNXmlSchemaContentModel>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentClass = interface(DNXmlSchemaContentModelClass)
  ['{0F0CC3A3-21A6-57D0-B0A7-B0169ED2330F}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContent;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContent')]
  DNXmlSchemaComplexContent = interface(DNXmlSchemaContentModel)
  ['{4874A15E-EBD1-3EC1-BDD1-08FE68A8DA0C}']
  { getters & setters } 

    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContent = class(TDNGenericImport<DNXmlSchemaComplexContentClass, DNXmlSchemaComplexContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentClass = interface(DNXmlSchemaContentModelClass)
  ['{F03ED66F-2E54-5AEB-8501-75008EE78C23}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContent;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContent')]
  DNXmlSchemaSimpleContent = interface(DNXmlSchemaContentModel)
  ['{9BCC3332-0A57-38C7-A257-C818878F3092}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContent = class(TDNGenericImport<DNXmlSchemaSimpleContentClass, DNXmlSchemaSimpleContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFacetClass = interface(DNXmlSchemaAnnotatedClass)
  ['{6EC693F0-E527-5444-92E7-11DBFCF15054}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaFacet')]
  DNXmlSchemaFacet = interface(DNXmlSchemaAnnotated)
  ['{C7945853-D4C4-3A37-B593-BF9E57357120}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFacet = class(TDNGenericImport<DNXmlSchemaFacetClass, DNXmlSchemaFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaEnumerationFacetClass = interface(DNXmlSchemaFacetClass)
  ['{7360714B-151E-5C94-8A30-AF9E976E3A67}']
  { constructors } 

    {class} function init: DNXmlSchemaEnumerationFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaEnumerationFacet')]
  DNXmlSchemaEnumerationFacet = interface(DNXmlSchemaFacet)
  ['{4AB63A76-2A1E-3158-ABA4-BFC3C7F29CFD}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaEnumerationFacet = class(TDNGenericImport<DNXmlSchemaEnumerationFacetClass, DNXmlSchemaEnumerationFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{4BEB63B0-14ED-5D93-9D70-8EBE60BE438F}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxExclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxExclusiveFacet')]
  DNXmlSchemaMaxExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{8C49E438-F8DB-331F-8A7C-3E7442A9ADD5}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxExclusiveFacetClass, DNXmlSchemaMaxExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{3BBFBCF7-ACF4-57A3-8FFF-3E50BDEF1393}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxInclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxInclusiveFacet')]
  DNXmlSchemaMaxInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{C3B09BA9-9A27-3126-B14A-FEEF00BA736D}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxInclusiveFacetClass, DNXmlSchemaMaxInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{5F818AA6-71A5-5091-99F5-5E92C2646F21}']
  { constructors } 

    {class} function init: DNXmlSchemaMinExclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinExclusiveFacet')]
  DNXmlSchemaMinExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{624F30E4-C184-3CD7-980A-CC392785C99F}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinExclusiveFacetClass, DNXmlSchemaMinExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{2FF63ADB-93CF-5C45-B30E-83F433390EFB}']
  { constructors } 

    {class} function init: DNXmlSchemaMinInclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinInclusiveFacet')]
  DNXmlSchemaMinInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{63A6C351-761E-3B86-BF7F-C181FF120141}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinInclusiveFacetClass, DNXmlSchemaMinInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNumericFacetClass = interface(DNXmlSchemaFacetClass)
  ['{404E0174-F7B5-57A7-AA36-3541B4498BBF}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaNumericFacet')]
  DNXmlSchemaNumericFacet = interface(DNXmlSchemaFacet)
  ['{DDF0F6BF-DDD5-30E8-AE2A-1091BCB7BAD1}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNumericFacet = class(TDNGenericImport<DNXmlSchemaNumericFacetClass, DNXmlSchemaNumericFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFractionDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{A2A61D2D-52DA-5377-94FA-2BC942D9087A}']
  { constructors } 

    {class} function init: DNXmlSchemaFractionDigitsFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaFractionDigitsFacet')]
  DNXmlSchemaFractionDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{98DFB338-5ED5-32E4-B2D9-4FB82AB7077F}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFractionDigitsFacet = class(TDNGenericImport<DNXmlSchemaFractionDigitsFacetClass, DNXmlSchemaFractionDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{4F42A3F7-D411-534B-93C1-ACBA6548E307}']
  { constructors } 

    {class} function init: DNXmlSchemaLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaLengthFacet')]
  DNXmlSchemaLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{82F8CF4C-2EE5-3E49-A6C9-6892EB860CAB}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaLengthFacet = class(TDNGenericImport<DNXmlSchemaLengthFacetClass, DNXmlSchemaLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{4730E68C-4448-5F95-A232-A6F5EBA9FB53}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxLengthFacet')]
  DNXmlSchemaMaxLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{EE630C3F-C9F2-3302-95F5-91A294AE75ED}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxLengthFacet = class(TDNGenericImport<DNXmlSchemaMaxLengthFacetClass, DNXmlSchemaMaxLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{AD79CD3D-EF0B-577B-B54D-2E123601B335}']
  { constructors } 

    {class} function init: DNXmlSchemaMinLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinLengthFacet')]
  DNXmlSchemaMinLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{45DF0D38-9318-3B30-B625-8B774F90743F}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinLengthFacet = class(TDNGenericImport<DNXmlSchemaMinLengthFacetClass, DNXmlSchemaMinLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTotalDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{9E85B48F-7159-56D9-8889-F1963CD59C42}']
  { constructors } 

    {class} function init: DNXmlSchemaTotalDigitsFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaTotalDigitsFacet')]
  DNXmlSchemaTotalDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{354C6187-1002-31B3-8143-454E7553941D}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaTotalDigitsFacet = class(TDNGenericImport<DNXmlSchemaTotalDigitsFacetClass, DNXmlSchemaTotalDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaPatternFacetClass = interface(DNXmlSchemaFacetClass)
  ['{0FA5195F-1E87-56E6-BEF4-0184363FBF55}']
  { constructors } 

    {class} function init: DNXmlSchemaPatternFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaPatternFacet')]
  DNXmlSchemaPatternFacet = interface(DNXmlSchemaFacet)
  ['{1C329F10-F38E-3E4B-BD59-86DEE8AA38FF}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaPatternFacet = class(TDNGenericImport<DNXmlSchemaPatternFacetClass, DNXmlSchemaPatternFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaWhiteSpaceFacetClass = interface(DNXmlSchemaFacetClass)
  ['{C4C5C955-1540-5607-A12A-650029950E8A}']
  { constructors } 

    {class} function init: DNXmlSchemaWhiteSpaceFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaWhiteSpaceFacet')]
  DNXmlSchemaWhiteSpaceFacet = interface(DNXmlSchemaFacet)
  ['{0E8BA914-FBF4-3A48-B892-88F9990256E8}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaWhiteSpaceFacet = class(TDNGenericImport<DNXmlSchemaWhiteSpaceFacetClass, DNXmlSchemaWhiteSpaceFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{74CECBC7-1950-5F00-979A-32AA2E901552}']
  { constructors } 

    {class} function init: DNXmlSchemaGroup;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroup')]
  DNXmlSchemaGroup = interface(DNXmlSchemaAnnotated)
  ['{BC37FBFA-BA80-30DA-A6BC-6BBA7BD2485F}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Particle: DNXmlSchemaGroupBase;
    procedure set_Particle(value: DNXmlSchemaGroupBase);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Particle: DNXmlSchemaGroupBase read get_Particle write set_Particle;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroup = class(TDNGenericImport<DNXmlSchemaGroupClass, DNXmlSchemaGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIdentityConstraintClass = interface(DNXmlSchemaAnnotatedClass)
  ['{5E67FC03-677B-5EA1-84E4-DD9E170BE074}']
  { constructors } 

    {class} function init: DNXmlSchemaIdentityConstraint;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaIdentityConstraint')]
  DNXmlSchemaIdentityConstraint = interface(DNXmlSchemaAnnotated)
  ['{D4582488-78CA-342A-A924-BB041FD5A8DF}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaIdentityConstraint = class(TDNGenericImport<DNXmlSchemaIdentityConstraintClass, DNXmlSchemaIdentityConstraint>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{C31CADFC-9A68-586E-8AC2-F46B334A0B6D}']
  { constructors } 

    {class} function init: DNXmlSchemaKey;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaKey')]
  DNXmlSchemaKey = interface(DNXmlSchemaIdentityConstraint)
  ['{C3753BE0-3939-3C14-9628-62B3D820CC40}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKey = class(TDNGenericImport<DNXmlSchemaKeyClass, DNXmlSchemaKey>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyrefClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{4E7CB961-D760-5695-9604-F34662A2AC75}']
  { constructors } 

    {class} function init: DNXmlSchemaKeyref;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaKeyref')]
  DNXmlSchemaKeyref = interface(DNXmlSchemaIdentityConstraint)
  ['{23E040BC-B402-358A-A5E3-0FEDF28EFA51}']
  { getters & setters } 

    function get_Refer: DNXmlQualifiedName;
    procedure set_Refer(value: DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Refer: DNXmlQualifiedName read get_Refer write set_Refer;
    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKeyref = class(TDNGenericImport<DNXmlSchemaKeyrefClass, DNXmlSchemaKeyref>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaUniqueClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{446C4C18-8272-553F-8605-1A4F5E9827D8}']
  { constructors } 

    {class} function init: DNXmlSchemaUnique;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaUnique')]
  DNXmlSchemaUnique = interface(DNXmlSchemaIdentityConstraint)
  ['{03224C6D-7D3A-3B02-9BEF-668F59E225E0}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaUnique = class(TDNGenericImport<DNXmlSchemaUniqueClass, DNXmlSchemaUnique>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNotationClass = interface(DNXmlSchemaAnnotatedClass)
  ['{935CBA95-F902-50A4-B3B9-B74C91F18512}']
  { constructors } 

    {class} function init: DNXmlSchemaNotation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaNotation')]
  DNXmlSchemaNotation = interface(DNXmlSchemaAnnotated)
  ['{55DAB099-DD0C-3BF5-A900-38AF16885B54}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Public: string;
    procedure set_Public(value: string);
    function get_System: string;
    procedure set_System(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Public: string read get_Public write set_Public;
    property System: string read get_System write set_System;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNotation = class(TDNGenericImport<DNXmlSchemaNotationClass, DNXmlSchemaNotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaParticleClass = interface(DNXmlSchemaAnnotatedClass)
  ['{A0461EC1-C4D9-5D09-8FEF-1F69A8DAA165}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaParticle')]
  DNXmlSchemaParticle = interface(DNXmlSchemaAnnotated)
  ['{BBC2F95A-DB28-37A0-9714-4EEE0ECE12F8}']
  { getters & setters } 

    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaParticle = class(TDNGenericImport<DNXmlSchemaParticleClass, DNXmlSchemaParticle>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyClass = interface(DNXmlSchemaParticleClass)
  ['{E9B28038-819A-54F4-BE4A-250C53F0248A}']
  { constructors } 

    {class} function init: DNXmlSchemaAny;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAny')]
  DNXmlSchemaAny = interface(DNXmlSchemaParticle)
  ['{E2229971-F3A3-35BC-9FBD-4A8BA8973D8E}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAny = class(TDNGenericImport<DNXmlSchemaAnyClass, DNXmlSchemaAny>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaElementClass = interface(DNXmlSchemaParticleClass)
  ['{E37C444F-795F-54AD-9180-ABBA3F64F30C}']
  { constructors } 

    {class} function init: DNXmlSchemaElement;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaElement')]
  DNXmlSchemaElement = interface(DNXmlSchemaParticle)
  ['{2FB0DA90-49F6-32E3-9B5F-C95E831179C8}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsNillable: Boolean;
    procedure set_IsNillable(value: Boolean);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SubstitutionGroup: DNXmlQualifiedName;
    procedure set_SubstitutionGroup(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_Constraints: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_ElementType: DDN.mscorlib.DNObject;
    function get_ElementSchemaType: DNXmlSchemaType;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property IsNillable: Boolean read get_IsNillable write set_IsNillable;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SubstitutionGroup: DNXmlQualifiedName read get_SubstitutionGroup write set_SubstitutionGroup;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    property Constraints: DNXmlSchemaObjectCollection read get_Constraints;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property ElementType: DDN.mscorlib.DNObject read get_ElementType;
    property ElementSchemaType: DNXmlSchemaType read get_ElementSchemaType;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaElement = class(TDNGenericImport<DNXmlSchemaElementClass, DNXmlSchemaElement>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupBaseClass = interface(DNXmlSchemaParticleClass)
  ['{A0D8D24D-ADCE-5941-92ED-A7F661EDAD53}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroupBase')]
  DNXmlSchemaGroupBase = interface(DNXmlSchemaParticle)
  ['{22B8F5D4-1EBA-37C2-A125-7E2D33D48968}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupBase = class(TDNGenericImport<DNXmlSchemaGroupBaseClass, DNXmlSchemaGroupBase>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAllClass = interface(DNXmlSchemaGroupBaseClass)
  ['{C028B505-5AD5-52B4-8ED1-E7DFC9C99DE7}']
  { constructors } 

    {class} function init: DNXmlSchemaAll;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAll')]
  DNXmlSchemaAll = interface(DNXmlSchemaGroupBase)
  ['{FA8F492E-9886-344C-8E89-3524C27667A1}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAll = class(TDNGenericImport<DNXmlSchemaAllClass, DNXmlSchemaAll>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaChoiceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{66E5EA3A-5E2E-59EA-AC80-8E57177B02D4}']
  { constructors } 

    {class} function init: DNXmlSchemaChoice;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaChoice')]
  DNXmlSchemaChoice = interface(DNXmlSchemaGroupBase)
  ['{58A72699-53C7-37FA-9629-07F42F7C8159}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaChoice = class(TDNGenericImport<DNXmlSchemaChoiceClass, DNXmlSchemaChoice>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSequenceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{72B50BA4-FFD8-5115-A1F5-DC4C85C0C3BB}']
  { constructors } 

    {class} function init: DNXmlSchemaSequence;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSequence')]
  DNXmlSchemaSequence = interface(DNXmlSchemaGroupBase)
  ['{7AD5F37A-8B74-35EF-B491-09F500C63CF1}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSequence = class(TDNGenericImport<DNXmlSchemaSequenceClass, DNXmlSchemaSequence>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupRefClass = interface(DNXmlSchemaParticleClass)
  ['{97E4CE92-BFD7-5C96-87E7-C9012E98A721}']
  { constructors } 

    {class} function init: DNXmlSchemaGroupRef;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroupRef')]
  DNXmlSchemaGroupRef = interface(DNXmlSchemaParticle)
  ['{1D89F049-7E99-338D-9FEB-3A2895F35236}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaGroupBase;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property Particle: DNXmlSchemaGroupBase read get_Particle;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupRef = class(TDNGenericImport<DNXmlSchemaGroupRefClass, DNXmlSchemaGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{1A6AC03E-72DE-5469-8B66-C7E332D5B386}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeContent')]
  DNXmlSchemaSimpleTypeContent = interface(DNXmlSchemaAnnotated)
  ['{EA6621EC-B0D8-3069-A30C-B2595361BDD1}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeContent = class(TDNGenericImport<DNXmlSchemaSimpleTypeContentClass, DNXmlSchemaSimpleTypeContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeListClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{EFCAF439-EA35-53F2-9947-F65992082320}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeList;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeList')]
  DNXmlSchemaSimpleTypeList = interface(DNXmlSchemaSimpleTypeContent)
  ['{245AF784-4B0F-3F7A-A46F-17C4E92DC411}']
  { getters & setters } 

    function get_ItemTypeName: DNXmlQualifiedName;
    procedure set_ItemTypeName(value: DNXmlQualifiedName);
    function get_ItemType: DNXmlSchemaSimpleType;
    procedure set_ItemType(value: DNXmlSchemaSimpleType);
    function get_BaseItemType: DNXmlSchemaSimpleType;
    procedure set_BaseItemType(value: DNXmlSchemaSimpleType);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemTypeName: DNXmlQualifiedName read get_ItemTypeName write set_ItemTypeName;
    property ItemType: DNXmlSchemaSimpleType read get_ItemType write set_ItemType;
    property BaseItemType: DNXmlSchemaSimpleType read get_BaseItemType write set_BaseItemType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeList = class(TDNGenericImport<DNXmlSchemaSimpleTypeListClass, DNXmlSchemaSimpleTypeList>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeRestrictionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{4F0D69FE-2705-5657-AC29-82BA27EFC86D}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeRestriction')]
  DNXmlSchemaSimpleTypeRestriction = interface(DNXmlSchemaSimpleTypeContent)
  ['{932C904B-6D2C-3EA8-9B68-76B0653D0907}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeRestriction = class(TDNGenericImport<DNXmlSchemaSimpleTypeRestrictionClass, DNXmlSchemaSimpleTypeRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeUnionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{F6EBE348-DFCA-59AD-9E7E-6C1C3E27CFAC}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeUnion;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeUnion')]
  DNXmlSchemaSimpleTypeUnion = interface(DNXmlSchemaSimpleTypeContent)
  ['{12FEEBF7-E17C-300D-98AB-E4B5A71B1332}']
  { getters & setters } 

    function get_BaseTypes: DNXmlSchemaObjectCollection;
    function get_MemberTypes: TArray<DNXmlQualifiedName>;
    procedure set_MemberTypes(value: TArray<DNXmlQualifiedName>);
    function get_BaseMemberTypes: TArray<DNXmlSchemaSimpleType>;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseTypes: DNXmlSchemaObjectCollection read get_BaseTypes;
    property MemberTypes: TArray<DNXmlQualifiedName> read get_MemberTypes write set_MemberTypes;
    property BaseMemberTypes: TArray<DNXmlSchemaSimpleType> read get_BaseMemberTypes;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeUnion = class(TDNGenericImport<DNXmlSchemaSimpleTypeUnionClass, DNXmlSchemaSimpleTypeUnion>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTypeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{8FDF1377-B093-5013-822E-311F8771F20E}']
  { constructors } 

    {class} function init: DNXmlSchemaType;

  { static methods } 

    {class} function GetBuiltInSimpleType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInSimpleType(typeCode: DNXmlTypeCode): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInComplexType(typeCode: DNXmlTypeCode): DNXmlSchemaComplexType; overload;
    {class} function GetBuiltInComplexType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaComplexType; overload;
    {class} function IsDerivedFrom(derivedType: DNXmlSchemaType; baseType: DNXmlSchemaType; &except: DNXmlSchemaDerivationMethod): Boolean;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaType')]
  DNXmlSchemaType = interface(DNXmlSchemaAnnotated)
  ['{034C6617-1C55-3EA2-8010-DFB0CD9A8FFE}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaType = class(TDNGenericImport<DNXmlSchemaTypeClass, DNXmlSchemaType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexTypeClass = interface(DNXmlSchemaTypeClass)
  ['{672EAADE-3AD2-5F7E-9611-4C1E00A4F003}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexType')]
  DNXmlSchemaComplexType = interface(DNXmlSchemaType)
  ['{DD5B141E-1C22-39F2-9F27-2A12947759A9}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_ContentModel: DNXmlSchemaContentModel;
    procedure set_ContentModel(value: DNXmlSchemaContentModel);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    function get_ContentTypeParticle: DNXmlSchemaParticle;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_AttributeUses: DNXmlSchemaObjectTable;
    function get_AttributeWildcard: DNXmlSchemaAnyAttribute;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property ContentModel: DNXmlSchemaContentModel read get_ContentModel write set_ContentModel;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property ContentType: DNXmlSchemaContentType read get_ContentType;
    property ContentTypeParticle: DNXmlSchemaParticle read get_ContentTypeParticle;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property AttributeUses: DNXmlSchemaObjectTable read get_AttributeUses;
    property AttributeWildcard: DNXmlSchemaAnyAttribute read get_AttributeWildcard;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexType = class(TDNGenericImport<DNXmlSchemaComplexTypeClass, DNXmlSchemaComplexType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeClass = interface(DNXmlSchemaTypeClass)
  ['{C2B52D2F-718D-53B4-8C9A-186C5A646571}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleType')]
  DNXmlSchemaSimpleType = interface(DNXmlSchemaType)
  ['{5CF951C1-5287-3510-9277-FD30287ECB0F}']
  { getters & setters } 

    function get_Content: DNXmlSchemaSimpleTypeContent;
    procedure set_Content(value: DNXmlSchemaSimpleTypeContent);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Content: DNXmlSchemaSimpleTypeContent read get_Content write set_Content;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleType = class(TDNGenericImport<DNXmlSchemaSimpleTypeClass, DNXmlSchemaSimpleType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaXPathClass = interface(DNXmlSchemaAnnotatedClass)
  ['{A37BC35E-9B84-536D-8BB7-DB84FA0C41E8}']
  { constructors } 

    {class} function init: DNXmlSchemaXPath;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaXPath')]
  DNXmlSchemaXPath = interface(DNXmlSchemaAnnotated)
  ['{FD9FF2B1-928E-33F7-915C-ED9AB1AB7D50}']
  { getters & setters } 

    function get_XPath: string;
    procedure set_XPath(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XPath: string read get_XPath write set_XPath;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaXPath = class(TDNGenericImport<DNXmlSchemaXPathClass, DNXmlSchemaXPath>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotationClass = interface(DNXmlSchemaObjectClass)
  ['{2FE9A18A-1D68-5848-904C-F390D137E1F4}']
  { constructors } 

    {class} function init: DNXmlSchemaAnnotation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotation')]
  DNXmlSchemaAnnotation = interface(DNXmlSchemaObject)
  ['{49BDD231-79E7-3A56-B297-A343DF715747}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Items: DNXmlSchemaObjectCollection;
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotation = class(TDNGenericImport<DNXmlSchemaAnnotationClass, DNXmlSchemaAnnotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAppInfoClass = interface(DNXmlSchemaObjectClass)
  ['{CA13D1DE-A448-5039-8B57-0FC60DEBFB28}']
  { constructors } 

    {class} function init: DNXmlSchemaAppInfo;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAppInfo')]
  DNXmlSchemaAppInfo = interface(DNXmlSchemaObject)
  ['{8683860B-0619-30F9-BCDE-A4CB7E4F61E7}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Source: string read get_Source write set_Source;
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAppInfo = class(TDNGenericImport<DNXmlSchemaAppInfoClass, DNXmlSchemaAppInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDocumentationClass = interface(DNXmlSchemaObjectClass)
  ['{80679780-E56A-5917-96C0-0AF891D68E5C}']
  { constructors } 

    {class} function init: DNXmlSchemaDocumentation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaDocumentation')]
  DNXmlSchemaDocumentation = interface(DNXmlSchemaObject)
  ['{D43BD4BE-569F-3D2B-9966-FD07F6231581}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Source: string read get_Source write set_Source;
    property Language: string read get_Language write set_Language;
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaDocumentation = class(TDNGenericImport<DNXmlSchemaDocumentationClass, DNXmlSchemaDocumentation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExternalClass = interface(DNXmlSchemaObjectClass)
  ['{042C852D-45F1-5226-BE62-CAC2FF74BF8D}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaExternal')]
  DNXmlSchemaExternal = interface(DNXmlSchemaObject)
  ['{2140C659-30AF-305C-AE76-DA8E408DDBD0}']
  { getters & setters } 

    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaExternal = class(TDNGenericImport<DNXmlSchemaExternalClass, DNXmlSchemaExternal>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaImportClass = interface(DNXmlSchemaExternalClass)
  ['{5C57ACBD-AD2B-5EDF-BE09-3ABFC46D13CE}']
  { constructors } 

    {class} function init: DNXmlSchemaImport;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaImport')]
  DNXmlSchemaImport = interface(DNXmlSchemaExternal)
  ['{FF7FC38A-2EC5-3322-BB85-238380171C5A}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaImport = class(TDNGenericImport<DNXmlSchemaImportClass, DNXmlSchemaImport>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIncludeClass = interface(DNXmlSchemaExternalClass)
  ['{83DA6F85-D5C2-593E-A755-349F81E1AA93}']
  { constructors } 

    {class} function init: DNXmlSchemaInclude;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInclude')]
  DNXmlSchemaInclude = interface(DNXmlSchemaExternal)
  ['{8D0930C2-FF47-35B0-A7D5-73D42206502A}']
  { getters & setters } 

    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaInclude = class(TDNGenericImport<DNXmlSchemaIncludeClass, DNXmlSchemaInclude>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaRedefineClass = interface(DNXmlSchemaExternalClass)
  ['{B4182246-8C70-50E1-9170-3D51E38EE322}']
  { constructors } 

    {class} function init: DNXmlSchemaRedefine;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaRedefine')]
  DNXmlSchemaRedefine = interface(DNXmlSchemaExternal)
  ['{10563095-EB2F-3F5C-B4E8-12F6338EC5D5}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Groups: DNXmlSchemaObjectTable;
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaRedefine = class(TDNGenericImport<DNXmlSchemaRedefineClass, DNXmlSchemaRedefine>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectEnumeratorClass = interface(DNObjectClass)
  ['{4B2DAAD9-F874-58AE-B3B1-70298168859C}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectEnumerator')]
  DNXmlSchemaObjectEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{C3B71B25-84A5-3735-A28D-8ED030EAB9B9}']
  { getters & setters } 

    function get_Current: DNXmlSchemaObject;

  { methods } 

    procedure Reset;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNXmlSchemaObject read get_Current;
  end;

  TDNXmlSchemaObjectEnumerator = class(TDNGenericImport<DNXmlSchemaObjectEnumeratorClass, DNXmlSchemaObjectEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{07F2185B-B6D2-58A1-B8D9-F2C0C4DF0645}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectTable')]
  DNXmlSchemaObjectTable = interface(DDN.mscorlib.DNObject)
  ['{46B8059C-7719-33A6-AA9C-070DB3D6F7F5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: DNXmlQualifiedName): DNXmlSchemaObject;
    function get_Names: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    function &Contains(name: DNXmlQualifiedName): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: DNXmlQualifiedName]: DNXmlSchemaObject read get_Item; default;
    property Names: DDN.mscorlib.DNICollection read get_Names;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNXmlSchemaObjectTable = class(TDNGenericImport<DNXmlSchemaObjectTableClass, DNXmlSchemaObjectTable>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80051FF8-3AEB-56C0-919B-ECBEFDC42875}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlSchemaSet; overload;
    {class} function init(nameTable: DNXmlNameTable): DNXmlSchemaSet; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSet')]
  DNXmlSchemaSet = interface(DDN.mscorlib.DNObject)
  ['{2EECF1F1-E906-338D-AA1A-21E3F90E6E8D}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_IsCompiled: Boolean;
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_CompilationSettings: DNXmlSchemaCompilationSettings;
    procedure set_CompilationSettings(value: DNXmlSchemaCompilationSettings);
    function get_Count: Int32;
    function get_GlobalElements: DNXmlSchemaObjectTable;
    function get_GlobalAttributes: DNXmlSchemaObjectTable;
    function get_GlobalTypes: DNXmlSchemaObjectTable;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Add(targetNamespace: string; schemaUri: string): DNXmlSchema; overload;
    function Add(targetNamespace: string; schemaDocument: DNXmlReader): DNXmlSchema; overload;
    procedure Add(schemas: DNXmlSchemaSet); overload;
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    function Remove(schema: DNXmlSchema): DNXmlSchema;
    function &Contains(targetNamespace: string): Boolean; overload;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    procedure CopyTo(schemas: TArray<DNXmlSchema>; index: Int32);
    function Schemas: DDN.mscorlib.DNICollection; overload;
    function Schemas(targetNamespace: string): DDN.mscorlib.DNICollection; overload;
    function RemoveRecursive(schemaToRemove: DNXmlSchema): Boolean;
    function Reprocess(schema: DNXmlSchema): DNXmlSchema;
    procedure Compile;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property IsCompiled: Boolean read get_IsCompiled;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property CompilationSettings: DNXmlSchemaCompilationSettings read get_CompilationSettings write set_CompilationSettings;
    property Count: Int32 read get_Count;
    property GlobalElements: DNXmlSchemaObjectTable read get_GlobalElements;
    property GlobalAttributes: DNXmlSchemaObjectTable read get_GlobalAttributes;
    property GlobalTypes: DNXmlSchemaObjectTable read get_GlobalTypes;
  end;

  TDNXmlSchemaSet = class(TDNGenericImport<DNXmlSchemaSetClass, DNXmlSchemaSet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D720AA83-BC50-5E48-B2C0-5C56EB18CB1B}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(nameTable: DNXmlNameTable; schemas: DNXmlSchemaSet; namespaceResolver: DNIXmlNamespaceResolver; validationFlags: DNXmlSchemaValidationFlags): DNXmlSchemaValidator;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaValidator')]
  DNXmlSchemaValidator = interface(DDN.mscorlib.DNObject)
  ['{43A9070E-DD35-317A-914B-8055C37FA049}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineInfoProvider: DNIXmlLineInfo;
    procedure set_LineInfoProvider(value: DNIXmlLineInfo);
    function get_SourceUri: DDN.System.DNUri;
    procedure set_SourceUri(value: DDN.System.DNUri);
    function get_ValidationEventSender: DDN.mscorlib.DNObject;
    procedure set_ValidationEventSender(value: DDN.mscorlib.DNObject);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    procedure Initialize; overload;
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo); overload;
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo; xsiType: string; xsiNil: string; xsiSchemaLocation: string; xsiNoNamespaceSchemaLocation: string); overload;
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: string; schemaInfo: DNXmlSchemaInfo): DDN.mscorlib.DNObject; overload;
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: DNXmlValueGetter; schemaInfo: DNXmlSchemaInfo): DDN.mscorlib.DNObject; overload;
    procedure ValidateEndOfAttributes(schemaInfo: DNXmlSchemaInfo);
    procedure ValidateText(elementValue: string); overload;
    procedure ValidateText(elementValue: DNXmlValueGetter); overload;
    procedure ValidateWhitespace(elementValue: string); overload;
    procedure ValidateWhitespace(elementValue: DNXmlValueGetter); overload;
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo): DDN.mscorlib.DNObject; overload;
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo; typedValue: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    procedure EndValidation;
    procedure AddSchema(schema: DNXmlSchema);
    procedure Initialize(partialValidationType: DNXmlSchemaObject); overload;
    procedure GetUnspecifiedDefaultAttributes(defaultAttributes: DDN.mscorlib.DNArrayList);
    procedure SkipToEndElement(schemaInfo: DNXmlSchemaInfo);
    function GetExpectedParticles: TArray<DNXmlSchemaParticle>;
    function GetExpectedAttributes: TArray<DNXmlSchemaAttribute>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property LineInfoProvider: DNIXmlLineInfo read get_LineInfoProvider write set_LineInfoProvider;
    property SourceUri: DDN.System.DNUri read get_SourceUri write set_SourceUri;
    property ValidationEventSender: DDN.mscorlib.DNObject read get_ValidationEventSender write set_ValidationEventSender;
  end;

  TDNXmlSchemaValidator = class(TDNGenericImport<DNXmlSchemaValidatorClass, DNXmlSchemaValidator>) end;

  //-------------namespace: System.Xml.Serialization.Advanced----------------
  DNSchemaImporterExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{84B1B8C7-363E-519C-81DA-A2D00C6A6D87}']
  end;

  [DNTypeName('System.Xml.Serialization.Advanced.SchemaImporterExtension')]
  DNSchemaImporterExtension = interface(DDN.mscorlib.DNObject)
  ['{39527C14-C3E3-31E1-AE79-C8C7E4093F42}']
  { methods } 

    function ImportSchemaType(name: string; ns: string; context: DNXmlSchemaObject; schemas: DNXmlSchemas; importer: DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DNXmlSchemaType; context: DNXmlSchemaObject; schemas: DNXmlSchemas; importer: DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DNXmlSchemaAny; mixed: Boolean; schemas: DNXmlSchemas; importer: DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSchemaImporterExtension = class(TDNGenericImport<DNSchemaImporterExtensionClass, DNSchemaImporterExtension>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeExporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0335C91D-2A31-522C-8305-7A3FF61597AB}']
  end;

  [DNTypeName('System.Xml.Serialization.CodeExporter')]
  DNCodeExporter = interface(DDN.mscorlib.DNObject)
  ['{58980885-AB07-3408-B0DA-A1F804A75F85}']
  { getters & setters } 

    function get_IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection read get_IncludeMetadata;
  end;

  TDNCodeExporter = class(TDNGenericImport<DNCodeExporterClass, DNCodeExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapCodeExporterClass = interface(DNCodeExporterClass)
  ['{C399D90E-DA52-5466-A82B-CFB56D8D7BE0}']
  { constructors } 

    {class} function init(codeNamespace: DDN.System.DNCodeNamespace): DNSoapCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit): DNSoapCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions): DNSoapCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNSoapCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; codeProvider: DDN.System.DNCodeDomProvider; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNSoapCodeExporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapCodeExporter')]
  DNSoapCodeExporter = interface(DNCodeExporter)
  ['{8ED80F9A-1628-3366-8861-5316E25A64F8}']
  { getters & setters } 

    function get_IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection;

  { methods } 

    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping);
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping);
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping; forceUseMemberName: Boolean); overload;
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection read get_IncludeMetadata;
  end;

  TDNSoapCodeExporter = class(TDNGenericImport<DNSoapCodeExporterClass, DNSoapCodeExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlCodeExporterClass = interface(DNCodeExporterClass)
  ['{373D545C-1597-5E22-8691-E47BBFC8768C}']
  { constructors } 

    {class} function init(codeNamespace: DDN.System.DNCodeNamespace): DNXmlCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit): DNXmlCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions): DNXmlCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNXmlCodeExporter; overload;
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; codeProvider: DDN.System.DNCodeDomProvider; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNXmlCodeExporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlCodeExporter')]
  DNXmlCodeExporter = interface(DNCodeExporter)
  ['{9AF1261D-D0F6-3C58-A06A-2957418A2C43}']
  { getters & setters } 

    function get_IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection;

  { methods } 

    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping);
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping);
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; mapping: DNXmlTypeMapping; ns: string); overload;
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping; ns: string; forceUseMemberName: Boolean); overload;
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping; ns: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection read get_IncludeMetadata;
  end;

  TDNXmlCodeExporter = class(TDNGenericImport<DNXmlCodeExporterClass, DNXmlCodeExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifierClass = interface(DDN.mscorlib.DNObjectClass)
  ['{16C095AA-4C2C-5EAA-88E4-F5A7BBA06269}']
  { constructors } 

    {class} function init: DNCodeIdentifier;

  { static methods } 

    {class} function MakeValid(identifier: string): string;
    {class} function MakePascal(identifier: string): string;
    {class} function MakeCamel(identifier: string): string;

  end;

  [DNTypeName('System.Xml.Serialization.CodeIdentifier')]
  DNCodeIdentifier = interface(DDN.mscorlib.DNObject)
  ['{BA6E74E4-6403-3B14-BE73-3C2B1A094495}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCodeIdentifier = class(TDNGenericImport<DNCodeIdentifierClass, DNCodeIdentifier>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7469FE37-04CC-5E5F-876A-03DAE7F55B9F}']
  { constructors } 

    {class} function init: DNCodeIdentifiers; overload;
    {class} function init(caseSensitive: Boolean): DNCodeIdentifiers; overload;

  end;

  [DNTypeName('System.Xml.Serialization.CodeIdentifiers')]
  DNCodeIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{664CA9B6-046C-3A37-BA89-44B11A5F015A}']
  { getters & setters } 

    function get_UseCamelCasing: Boolean;
    procedure set_UseCamelCasing(value: Boolean);

  { methods } 

    function MakeUnique(identifier: string): string;
    procedure Clear;
    function MakeRightCase(identifier: string): string;
    procedure AddReserved(identifier: string);
    procedure RemoveReserved(identifier: string);
    function AddUnique(identifier: string; value: DDN.mscorlib.DNObject): string;
    function IsInUse(identifier: string): Boolean;
    procedure Add(identifier: string; value: DDN.mscorlib.DNObject);
    procedure Remove(identifier: string);
    function ToArray(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseCamelCasing: Boolean read get_UseCamelCasing write set_UseCamelCasing;
  end;

  TDNCodeIdentifiers = class(TDNGenericImport<DNCodeIdentifiersClass, DNCodeIdentifiers>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNImportContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{425D69F8-37B6-59DC-8C75-22F4DC87AAA4}']
  { constructors } 

    {class} function init(identifiers: DNCodeIdentifiers; shareTypes: Boolean): DNImportContext;

  end;

  [DNTypeName('System.Xml.Serialization.ImportContext')]
  DNImportContext = interface(DDN.mscorlib.DNObject)
  ['{95274F7A-0A71-3D35-AF1F-E44F3A3686F6}']
  { getters & setters } 

    function get_TypeIdentifiers: DNCodeIdentifiers;
    function get_ShareTypes: Boolean;
    function get_Warnings: DDN.System.DNStringCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeIdentifiers: DNCodeIdentifiers read get_TypeIdentifiers;
    property ShareTypes: Boolean read get_ShareTypes;
    property Warnings: DDN.System.DNStringCollection read get_Warnings;
  end;

  TDNImportContext = class(TDNGenericImport<DNImportContextClass, DNImportContext>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSchemaImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C35753F-FEAE-5CD2-997F-017AEEED8B11}']
  end;

  [DNTypeName('System.Xml.Serialization.SchemaImporter')]
  DNSchemaImporter = interface(DDN.mscorlib.DNObject)
  ['{07185328-8ECA-34AA-AC0A-513BD857677A}']
  { getters & setters } 

    function get_Extensions: DNSchemaImporterExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNSchemaImporterExtensionCollection read get_Extensions;
  end;

  TDNSchemaImporter = class(TDNGenericImport<DNSchemaImporterClass, DNSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaImporterClass = interface(DNSchemaImporterClass)
  ['{B5D1E8AB-12D7-56CA-96AA-9096EB8726D7}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNSoapSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers): DNSoapSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers; options: DNCodeGenerationOptions): DNSoapSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; context: DNImportContext): DNSoapSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider; context: DNImportContext): DNSoapSchemaImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapSchemaImporter')]
  DNSoapSchemaImporter = interface(DNSchemaImporter)
  ['{1D6EE53D-B4EC-3832-A0CC-B401E2150E58}']
  { getters & setters } 

    function get_Extensions: DNSchemaImporterExtensionCollection;

  { methods } 

    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>): DNXmlMembersMapping; overload;
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>; hasWrapperElement: Boolean): DNXmlMembersMapping; overload;
    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping;
    function ImportMembersMapping(name: string; ns: string; member: DNSoapSchemaMember): DNXmlMembersMapping; overload;
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>; hasWrapperElement: Boolean; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNSchemaImporterExtensionCollection read get_Extensions;
  end;

  TDNSoapSchemaImporter = class(TDNGenericImport<DNSoapSchemaImporterClass, DNSoapSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaImporterClass = interface(DNSchemaImporterClass)
  ['{66095863-7C38-583E-96E6-09E5FF901035}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers): DNXmlSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers; options: DNCodeGenerationOptions): DNXmlSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; context: DNImportContext): DNXmlSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider; context: DNImportContext): DNXmlSchemaImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaImporter')]
  DNXmlSchemaImporter = interface(DNSchemaImporter)
  ['{C97E7E2E-AC97-35E4-918A-6057F2957031}']
  { getters & setters } 

    function get_Extensions: DNSchemaImporterExtensionCollection;

  { methods } 

    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    function ImportTypeMapping(name: DNXmlQualifiedName): DNXmlTypeMapping;
    function ImportMembersMapping(name: DNXmlQualifiedName): DNXmlMembersMapping; overload;
    function ImportAnyType(typeName: DNXmlQualifiedName; elementName: string): DNXmlMembersMapping;
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>): DNXmlMembersMapping; overload;
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>): DNXmlMembersMapping; overload;
    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNSchemaImporterExtensionCollection read get_Extensions;
  end;

  TDNXmlSchemaImporter = class(TDNGenericImport<DNXmlSchemaImporterClass, DNXmlSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeOverridesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C242A9E6-FE8C-55F7-8049-4DA2CC71A393}']
  { constructors } 

    {class} function init: DNSoapAttributeOverrides;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributeOverrides')]
  DNSoapAttributeOverrides = interface(DDN.mscorlib.DNObject)
  ['{6F45712D-36F9-3F4B-8859-636CC8C3A7BB}']
  { getters & setters } 

    function get_Item(&type: DDN.mscorlib.DNType): DNSoapAttributes; overload;
    function get_Item(&type: DDN.mscorlib.DNType; member: string): DNSoapAttributes; overload;

  { methods } 

    procedure Add(&type: DDN.mscorlib.DNType; attributes: DNSoapAttributes); overload;
    procedure Add(&type: DDN.mscorlib.DNType; member: string; attributes: DNSoapAttributes); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[&type: DDN.mscorlib.DNType]: DNSoapAttributes read get_Item; default;
    property Item[&type: DDN.mscorlib.DNType; member: string]: DNSoapAttributes read get_Item; default;
  end;

  TDNSoapAttributeOverrides = class(TDNGenericImport<DNSoapAttributeOverridesClass, DNSoapAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBF2589C-3D4F-506D-B9E6-B218017B166A}']
  { constructors } 

    {class} function init: DNSoapAttributes; overload;
    {class} function init(provider: DDN.mscorlib.DNICustomAttributeProvider): DNSoapAttributes; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributes')]
  DNSoapAttributes = interface(DDN.mscorlib.DNObject)
  ['{A7C91ED3-8A88-3EC0-A7B9-3B3C2FCAB71D}']
  { getters & setters } 

    function get_SoapType: DNSoapTypeAttribute;
    procedure set_SoapType(value: DNSoapTypeAttribute);
    function get_SoapEnum: DNSoapEnumAttribute;
    procedure set_SoapEnum(value: DNSoapEnumAttribute);
    function get_SoapIgnore: Boolean;
    procedure set_SoapIgnore(value: Boolean);
    function get_SoapElement: DNSoapElementAttribute;
    procedure set_SoapElement(value: DNSoapElementAttribute);
    function get_SoapAttribute: DNSoapAttributeAttribute;
    procedure set_SoapAttribute(value: DNSoapAttributeAttribute);
    function get_SoapDefaultValue: DDN.mscorlib.DNObject;
    procedure set_SoapDefaultValue(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SoapType: DNSoapTypeAttribute read get_SoapType write set_SoapType;
    property SoapEnum: DNSoapEnumAttribute read get_SoapEnum write set_SoapEnum;
    property SoapIgnore: Boolean read get_SoapIgnore write set_SoapIgnore;
    property SoapElement: DNSoapElementAttribute read get_SoapElement write set_SoapElement;
    property SoapAttribute: DNSoapAttributeAttribute read get_SoapAttribute write set_SoapAttribute;
    property SoapDefaultValue: DDN.mscorlib.DNObject read get_SoapDefaultValue write set_SoapDefaultValue;
  end;

  TDNSoapAttributes = class(TDNGenericImport<DNSoapAttributesClass, DNSoapAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapReflectionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5E3AF124-3EBD-54E2-8270-A5704886C48A}']
  { constructors } 

    {class} function init: DNSoapReflectionImporter; overload;
    {class} function init(defaultNamespace: string): DNSoapReflectionImporter; overload;
    {class} function init(attributeOverrides: DNSoapAttributeOverrides): DNSoapReflectionImporter; overload;
    {class} function init(attributeOverrides: DNSoapAttributeOverrides; defaultNamespace: string): DNSoapReflectionImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapReflectionImporter')]
  DNSoapReflectionImporter = interface(DDN.mscorlib.DNObject)
  ['{B73DB4BF-E6EA-36ED-BAB0-DBFFA646E0BA}']
  { methods } 

    procedure IncludeTypes(provider: DDN.mscorlib.DNICustomAttributeProvider);
    procedure IncludeType(&type: DDN.mscorlib.DNType);
    function ImportTypeMapping(&type: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapReflectionImporter = class(TDNGenericImport<DNSoapReflectionImporterClass, DNSoapReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaExporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5248EBF8-BFA2-5A66-8222-4A01DF423522}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNSoapSchemaExporter;

  end;

  [DNTypeName('System.Xml.Serialization.SoapSchemaExporter')]
  DNSoapSchemaExporter = interface(DDN.mscorlib.DNObject)
  ['{61AD9AC2-5DD4-35EB-A765-E8EF2E2A2A90}']
  { methods } 

    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping);
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping); overload;
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping; exportEnclosingType: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapSchemaExporter = class(TDNGenericImport<DNSoapSchemaExporterClass, DNSoapSchemaExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaMemberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D5B7FD1-A279-58A0-85B0-065A36B010D4}']
  { constructors } 

    {class} function init: DNSoapSchemaMember;

  end;

  [DNTypeName('System.Xml.Serialization.SoapSchemaMember')]
  DNSoapSchemaMember = interface(DDN.mscorlib.DNObject)
  ['{338F0B4E-16CB-301A-8A9F-7164C76D50D7}']
  { getters & setters } 

    function get_MemberType: DNXmlQualifiedName;
    procedure set_MemberType(value: DNXmlQualifiedName);
    function get_MemberName: string;
    procedure set_MemberName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNXmlQualifiedName read get_MemberType write set_MemberType;
    property MemberName: string read get_MemberName write set_MemberName;
  end;

  TDNSoapSchemaMember = class(TDNGenericImport<DNSoapSchemaMemberClass, DNSoapSchemaMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeOverridesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C2F6EF2-C5F8-5B3C-9728-DBA72A837F78}']
  { constructors } 

    {class} function init: DNXmlAttributeOverrides;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeOverrides')]
  DNXmlAttributeOverrides = interface(DDN.mscorlib.DNObject)
  ['{A058A976-DF7D-3F5E-9145-E972A8A17A85}']
  { getters & setters } 

    function get_Item(&type: DDN.mscorlib.DNType): DNXmlAttributes; overload;
    function get_Item(&type: DDN.mscorlib.DNType; member: string): DNXmlAttributes; overload;

  { methods } 

    procedure Add(&type: DDN.mscorlib.DNType; attributes: DNXmlAttributes); overload;
    procedure Add(&type: DDN.mscorlib.DNType; member: string; attributes: DNXmlAttributes); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[&type: DDN.mscorlib.DNType]: DNXmlAttributes read get_Item; default;
    property Item[&type: DDN.mscorlib.DNType; member: string]: DNXmlAttributes read get_Item; default;
  end;

  TDNXmlAttributeOverrides = class(TDNGenericImport<DNXmlAttributeOverridesClass, DNXmlAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{077C1F76-9043-5E7B-825D-0973EBF07720}']
  { constructors } 

    {class} function init: DNXmlAttributes; overload;
    {class} function init(provider: DDN.mscorlib.DNICustomAttributeProvider): DNXmlAttributes; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributes')]
  DNXmlAttributes = interface(DDN.mscorlib.DNObject)
  ['{12195E33-E0FC-38E3-8303-BE44201719E9}']
  { getters & setters } 

    function get_XmlElements: DNXmlElementAttributes;
    function get_XmlAttribute: DNXmlAttributeAttribute;
    procedure set_XmlAttribute(value: DNXmlAttributeAttribute);
    function get_XmlEnum: DNXmlEnumAttribute;
    procedure set_XmlEnum(value: DNXmlEnumAttribute);
    function get_XmlText: DNXmlTextAttribute;
    procedure set_XmlText(value: DNXmlTextAttribute);
    function get_XmlArray: DNXmlArrayAttribute;
    procedure set_XmlArray(value: DNXmlArrayAttribute);
    function get_XmlArrayItems: DNXmlArrayItemAttributes;
    function get_XmlDefaultValue: DDN.mscorlib.DNObject;
    procedure set_XmlDefaultValue(value: DDN.mscorlib.DNObject);
    function get_XmlIgnore: Boolean;
    procedure set_XmlIgnore(value: Boolean);
    function get_XmlType: DNXmlTypeAttribute;
    procedure set_XmlType(value: DNXmlTypeAttribute);
    function get_XmlRoot: DNXmlRootAttribute;
    procedure set_XmlRoot(value: DNXmlRootAttribute);
    function get_XmlAnyElements: DNXmlAnyElementAttributes;
    function get_XmlAnyAttribute: DNXmlAnyAttributeAttribute;
    procedure set_XmlAnyAttribute(value: DNXmlAnyAttributeAttribute);
    function get_XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute;
    function get_Xmlns: Boolean;
    procedure set_Xmlns(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XmlElements: DNXmlElementAttributes read get_XmlElements;
    property XmlAttribute: DNXmlAttributeAttribute read get_XmlAttribute write set_XmlAttribute;
    property XmlEnum: DNXmlEnumAttribute read get_XmlEnum write set_XmlEnum;
    property XmlText: DNXmlTextAttribute read get_XmlText write set_XmlText;
    property XmlArray: DNXmlArrayAttribute read get_XmlArray write set_XmlArray;
    property XmlArrayItems: DNXmlArrayItemAttributes read get_XmlArrayItems;
    property XmlDefaultValue: DDN.mscorlib.DNObject read get_XmlDefaultValue write set_XmlDefaultValue;
    property XmlIgnore: Boolean read get_XmlIgnore write set_XmlIgnore;
    property XmlType: DNXmlTypeAttribute read get_XmlType write set_XmlType;
    property XmlRoot: DNXmlRootAttribute read get_XmlRoot write set_XmlRoot;
    property XmlAnyElements: DNXmlAnyElementAttributes read get_XmlAnyElements;
    property XmlAnyAttribute: DNXmlAnyAttributeAttribute read get_XmlAnyAttribute write set_XmlAnyAttribute;
    property XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute read get_XmlChoiceIdentifier;
    property Xmlns: Boolean read get_Xmlns write set_Xmlns;
  end;

  TDNXmlAttributes = class(TDNGenericImport<DNXmlAttributesClass, DNXmlAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{94C75695-6656-509B-AA6F-42E1BB20DB48}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMapping')]
  DNXmlMapping = interface(DDN.mscorlib.DNObject)
  ['{237EB3E9-153B-3AD5-8AB2-5B2D4A13ACAE}']
  { getters & setters } 

    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMapping = class(TDNGenericImport<DNXmlMappingClass, DNXmlMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMembersMappingClass = interface(DNXmlMappingClass)
  ['{E979AC34-5732-5CD6-B668-10CE467B7B05}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMembersMapping')]
  DNXmlMembersMapping = interface(DNXmlMapping)
  ['{CF624D8C-2146-3393-9F95-60738B91180D}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_Item(index: Int32): DNXmlMemberMapping;
    function get_Count: Int32;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeNamespace: string read get_TypeNamespace;
    property Item[index: Int32]: DNXmlMemberMapping read get_Item; default;
    property Count: Int32 read get_Count;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMembersMapping = class(TDNGenericImport<DNXmlMembersMappingClass, DNXmlMembersMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeMappingClass = interface(DNXmlMappingClass)
  ['{3C8A32B7-6A53-5383-A850-CB3AA65FBFEA}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlTypeMapping')]
  DNXmlTypeMapping = interface(DNXmlMapping)
  ['{B3188B0A-C0E1-33C2-B929-8BE861DB96DC}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeFullName: string;
    function get_XsdTypeName: string;
    function get_XsdTypeNamespace: string;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeFullName: string read get_TypeFullName;
    property XsdTypeName: string read get_XsdTypeName;
    property XsdTypeNamespace: string read get_XsdTypeNamespace;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlTypeMapping = class(TDNGenericImport<DNXmlTypeMappingClass, DNXmlTypeMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMemberMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8CC3CBE-3B43-540A-B242-403D1198DDB6}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMemberMapping')]
  DNXmlMemberMapping = interface(DDN.mscorlib.DNObject)
  ['{9BA5211C-C504-3CBD-9A74-F9640FC44F05}']
  { getters & setters } 

    function get_Any: Boolean;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;
    function get_MemberName: string;
    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_TypeFullName: string;
    function get_CheckSpecified: Boolean;

  { methods } 

    function GenerateTypeName(codeProvider: DDN.System.DNCodeDomProvider): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Any: Boolean read get_Any;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
    property MemberName: string read get_MemberName;
    property TypeName: string read get_TypeName;
    property TypeNamespace: string read get_TypeNamespace;
    property TypeFullName: string read get_TypeFullName;
    property CheckSpecified: Boolean read get_CheckSpecified;
  end;

  TDNXmlMemberMapping = class(TDNGenericImport<DNXmlMemberMappingClass, DNXmlMemberMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6646D5B5-B944-5060-91A4-566AA86DEEC0}']
  { constructors } 

    {class} function init: DNXmlReflectionImporter; overload;
    {class} function init(defaultNamespace: string): DNXmlReflectionImporter; overload;
    {class} function init(attributeOverrides: DNXmlAttributeOverrides): DNXmlReflectionImporter; overload;
    {class} function init(attributeOverrides: DNXmlAttributeOverrides; defaultNamespace: string): DNXmlReflectionImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlReflectionImporter')]
  DNXmlReflectionImporter = interface(DDN.mscorlib.DNObject)
  ['{D94A52A1-034A-325B-B5FF-B0B6778B6231}']
  { methods } 

    procedure IncludeTypes(provider: DDN.mscorlib.DNICustomAttributeProvider);
    procedure IncludeType(&type: DDN.mscorlib.DNType);
    function ImportTypeMapping(&type: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlReflectionImporter = class(TDNGenericImport<DNXmlReflectionImporterClass, DNXmlReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionMemberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8728B6C5-0901-586D-8E72-B14A45774490}']
  { constructors } 

    {class} function init: DNXmlReflectionMember;

  end;

  [DNTypeName('System.Xml.Serialization.XmlReflectionMember')]
  DNXmlReflectionMember = interface(DDN.mscorlib.DNObject)
  ['{601D7460-4E98-3B98-81FC-36655E98A587}']
  { getters & setters } 

    function get_MemberType: DDN.mscorlib.DNType;
    procedure set_MemberType(value: DDN.mscorlib.DNType);
    function get_XmlAttributes: DNXmlAttributes;
    procedure set_XmlAttributes(value: DNXmlAttributes);
    function get_SoapAttributes: DNSoapAttributes;
    procedure set_SoapAttributes(value: DNSoapAttributes);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_IsReturnValue: Boolean;
    procedure set_IsReturnValue(value: Boolean);
    function get_OverrideIsNullable: Boolean;
    procedure set_OverrideIsNullable(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DDN.mscorlib.DNType read get_MemberType write set_MemberType;
    property XmlAttributes: DNXmlAttributes read get_XmlAttributes write set_XmlAttributes;
    property SoapAttributes: DNSoapAttributes read get_SoapAttributes write set_SoapAttributes;
    property MemberName: string read get_MemberName write set_MemberName;
    property IsReturnValue: Boolean read get_IsReturnValue write set_IsReturnValue;
    property OverrideIsNullable: Boolean read get_OverrideIsNullable write set_OverrideIsNullable;
  end;

  TDNXmlReflectionMember = class(TDNGenericImport<DNXmlReflectionMemberClass, DNXmlReflectionMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D418A3CC-F8AF-5180-B026-2EEB20120977}']
  { constructors } 

    {class} function init(list: DNXmlSchemas): DNXmlSchemaEnumerator;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaEnumerator')]
  DNXmlSchemaEnumerator = interface(DDN.mscorlib.DNObject)
  ['{FA59412D-209D-3972-B5AC-C213B9814A82}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaEnumerator = class(TDNGenericImport<DNXmlSchemaEnumeratorClass, DNXmlSchemaEnumerator>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaExporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{38494AC2-69F7-51D5-B570-804573527920}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaExporter;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaExporter')]
  DNXmlSchemaExporter = interface(DDN.mscorlib.DNObject)
  ['{C1FFC767-8FA6-3E14-BBC0-705E6C078AC2}']
  { methods } 

    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping); overload;
    function ExportTypeMapping(xmlMembersMapping: DNXmlMembersMapping): DNXmlQualifiedName; overload;
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping); overload;
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping; exportEnclosingType: Boolean); overload;
    function ExportAnyType(ns: string): string; overload;
    function ExportAnyType(members: DNXmlMembersMapping): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSchemaExporter = class(TDNGenericImport<DNXmlSchemaExporterClass, DNXmlSchemaExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationGeneratedCodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DC76D1D9-DB22-5575-BFBB-C28D81A28A5D}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationGeneratedCode')]
  DNXmlSerializationGeneratedCode = interface(DDN.mscorlib.DNObject)
  ['{B8663396-B740-365E-8443-9B06F3FCB665}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializationGeneratedCode = class(TDNGenericImport<DNXmlSerializationGeneratedCodeClass, DNXmlSerializationGeneratedCode>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationReaderClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{1A9F3E1B-7E94-549D-893A-DDF9D6E7112A}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationReader')]
  DNXmlSerializationReader = interface(DNXmlSerializationGeneratedCode)
  ['{2793BAB3-2B3F-3703-AE19-2E0377C2123A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializationReader = class(TDNGenericImport<DNXmlSerializationReaderClass, DNXmlSerializationReader>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationWriterClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{439D2195-1061-514B-9ABC-AEFAB77FB890}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationWriter')]
  DNXmlSerializationWriter = interface(DNXmlSerializationGeneratedCode)
  ['{582828C1-EC93-3AE4-9465-3D06C109DD33}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializationWriter = class(TDNGenericImport<DNXmlSerializationWriterClass, DNXmlSerializationWriter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9F4A9DB4-304F-51CA-A18A-BE77F9D1321F}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    {class} function init(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    {class} function init(&type: DDN.mscorlib.DNType; extraTypes: TArray<DDN.mscorlib.DNType>): DNXmlSerializer; overload;
    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    {class} function init(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlSerializer; overload;
    {class} function init(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;
    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string; evidence: DDN.mscorlib.DNEvidence): DNXmlSerializer; overload;

  { static methods } 

    {class} function FromMappings(mappings: TArray<DNXmlMapping>): TArray<DNXmlSerializer>; overload;
    {class} function GenerateSerializer(types: TArray<DDN.mscorlib.DNType>; mappings: TArray<DNXmlMapping>): DDN.mscorlib.DNAssembly; overload;
    {class} function GetXmlSerializerAssemblyName(&type: DDN.mscorlib.DNType): string; overload;
    {class} function GetXmlSerializerAssemblyName(&type: DDN.mscorlib.DNType; defaultNamespace: string): string; overload;
    {class} function FromMappings(mappings: TArray<DNXmlMapping>; &type: DDN.mscorlib.DNType): TArray<DNXmlSerializer>; overload;
    {class} function FromMappings(mappings: TArray<DNXmlMapping>; evidence: DDN.mscorlib.DNEvidence): TArray<DNXmlSerializer>; overload;
    {class} function GenerateSerializer(types: TArray<DDN.mscorlib.DNType>; mappings: TArray<DNXmlMapping>; parameters: DDN.System.DNCompilerParameters): DDN.mscorlib.DNAssembly; overload;
    {class} function FromTypes(types: TArray<DDN.mscorlib.DNType>): TArray<DNXmlSerializer>;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializer')]
  DNXmlSerializer = interface(DDN.mscorlib.DNObject)
  ['{EBD11B66-2F03-34DA-85F9-E3E1E9B67175}']
  { events } 

    procedure add_UnknownNode(value: DNXmlNodeEventHandler);
    procedure remove_UnknownNode(value: DNXmlNodeEventHandler);
    procedure add_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure remove_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure add_UnknownElement(value: DNXmlElementEventHandler);
    procedure remove_UnknownElement(value: DNXmlElementEventHandler);
    procedure add_UnreferencedObject(value: DNUnreferencedObjectEventHandler);
    procedure remove_UnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    procedure Serialize(textWriter: DDN.mscorlib.DNTextWriter; o: DDN.mscorlib.DNObject); overload;
    procedure Serialize(textWriter: DDN.mscorlib.DNTextWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(stream: DDN.mscorlib.DNStream; o: DDN.mscorlib.DNObject); overload;
    procedure Serialize(stream: DDN.mscorlib.DNStream; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string); overload;
    function Deserialize(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject; overload;
    function Deserialize(textReader: DDN.mscorlib.DNTextReader): DDN.mscorlib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader): DDN.mscorlib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; events: DNXmlDeserializationEvents): DDN.mscorlib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string): DDN.mscorlib.DNObject; overload;
    function CanDeserialize(xmlReader: DNXmlReader): Boolean;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string; id: string); overload;
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string; events: DNXmlDeserializationEvents): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializer = class(TDNGenericImport<DNXmlSerializerClass, DNXmlSerializer>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3AD3F7C9-18B9-569F-B723-8717A92228A3}']
  { constructors } 

    {class} function init: DNXmlSerializerFactory;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerFactory')]
  DNXmlSerializerFactory = interface(DDN.mscorlib.DNObject)
  ['{D07FA41E-7200-3A84-BBAF-DEB64D2BD7BF}']
  { methods } 

    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDN.mscorlib.DNType; extraTypes: TArray<DDN.mscorlib.DNType>): DNXmlSerializer; overload;
    function CreateSerializer(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDN.mscorlib.DNType): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string; evidence: DDN.mscorlib.DNEvidence): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializerFactory = class(TDNGenericImport<DNXmlSerializerFactoryClass, DNXmlSerializerFactory>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerImplementationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB600CF3-BA29-5EF2-B169-14E47174AFB6}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerImplementation')]
  DNXmlSerializerImplementation = interface(DDN.mscorlib.DNObject)
  ['{AFB9069E-5170-39EA-9FD6-7DA3B4F519AA}']
  { getters & setters } 

    function get_Reader: DNXmlSerializationReader;
    function get_Writer: DNXmlSerializationWriter;
    function get_ReadMethods: DDN.mscorlib.DNHashtable;
    function get_WriteMethods: DDN.mscorlib.DNHashtable;
    function get_TypedSerializers: DDN.mscorlib.DNHashtable;

  { methods } 

    function CanSerialize(&type: DDN.mscorlib.DNType): Boolean;
    function GetSerializer(&type: DDN.mscorlib.DNType): DNXmlSerializer;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Reader: DNXmlSerializationReader read get_Reader;
    property Writer: DNXmlSerializationWriter read get_Writer;
    property ReadMethods: DDN.mscorlib.DNHashtable read get_ReadMethods;
    property WriteMethods: DDN.mscorlib.DNHashtable read get_WriteMethods;
    property TypedSerializers: DDN.mscorlib.DNHashtable read get_TypedSerializers;
  end;

  TDNXmlSerializerImplementation = class(TDNGenericImport<DNXmlSerializerImplementationClass, DNXmlSerializerImplementation>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerNamespacesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02202380-E072-5AFC-8069-9984588C88B4}']
  { constructors } 

    {class} function init: DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: DNXmlSerializerNamespaces): DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: TArray<DNXmlQualifiedName>): DNXmlSerializerNamespaces; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerNamespaces')]
  DNXmlSerializerNamespaces = interface(DDN.mscorlib.DNObject)
  ['{9BD7B184-9480-3EF7-B0D2-DC3B5BB21447}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(prefix: string; ns: string);
    function ToArray: TArray<DNXmlQualifiedName>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlSerializerNamespaces = class(TDNGenericImport<DNXmlSerializerNamespacesClass, DNXmlSerializerNamespaces>) end;

  //-------------namespace: System.Xml----------------
  DNXmlConvertClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D7987C8-2E38-54B3-B6C4-5F0A9579B7A4}']
  { constructors } 

    {class} function init: DNXmlConvert;

  { static methods } 

    {class} function EncodeName(name: string): string;
    {class} function EncodeNmToken(name: string): string;
    {class} function EncodeLocalName(name: string): string;
    {class} function VerifyName(name: string): string;
    {class} function VerifyNCName(name: string): string;
    {class} function VerifyNMTOKEN(name: string): string;
    {class} function VerifyXmlChars(content: string): string;
    {class} function VerifyPublicId(publicId: string): string;
    {class} function VerifyWhitespace(content: string): string;
    {class} function IsStartNCNameChar(ch: Char): Boolean;
    {class} function IsNCNameChar(ch: Char): Boolean;
    {class} function IsXmlChar(ch: Char): Boolean;
    {class} function IsXmlSurrogatePair(lowChar: Char; highChar: Char): Boolean;
    {class} function IsWhitespaceChar(ch: Char): Boolean;
    {class} function ToString(value: Char): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNDecimal): string; overload;
    {class} function ToString(value: SByte): string; overload;
    {class} function ToString(value: Int16): string; overload;
    {class} function ToString(value: Int32): string; overload;
    {class} function ToString(value: Int64): string; overload;
    {class} function ToString(value: Byte): string; overload;
    {class} function ToString(value: UInt16): string; overload;
    {class} function ToString(value: UInt32): string; overload;
    {class} function ToString(value: UInt64): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNTimeSpan): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNDateTime; format: string): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNDateTimeOffset): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNDateTimeOffset; format: string): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNGuid): string; overload;
    {class} function ToChar(s: string): Char;
    {class} function ToDecimal(s: string): DDN.mscorlib.DNDecimal;
    {class} function ToSByte(s: string): SByte;
    {class} function ToInt16(s: string): Int16;
    {class} function ToInt32(s: string): Int32;
    {class} function ToInt64(s: string): Int64;
    {class} function ToByte(s: string): Byte;
    {class} function ToUInt16(s: string): UInt16;
    {class} function ToUInt32(s: string): UInt32;
    {class} function ToUInt64(s: string): UInt64;
    {class} function ToDateTime(s: string): DDN.mscorlib.DNDateTime; overload;
    {class} function ToDateTime(s: string; format: string): DDN.mscorlib.DNDateTime; overload;
    {class} function ToDateTime(s: string; formats: TArray<string>): DDN.mscorlib.DNDateTime; overload;
    {class} function ToDateTimeOffset(s: string): DDN.mscorlib.DNDateTimeOffset; overload;
    {class} function ToDateTimeOffset(s: string; format: string): DDN.mscorlib.DNDateTimeOffset; overload;
    {class} function ToDateTimeOffset(s: string; formats: TArray<string>): DDN.mscorlib.DNDateTimeOffset; overload;
    {class} function ToGuid(s: string): DDN.mscorlib.DNGuid;
    {class} function VerifyTOKEN(token: string): string;
    {class} function IsPublicIdChar(ch: Char): Boolean;
    {class} function ToString(value: Single): string; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNDateTime): string; overload;
    {class} function ToSingle(s: string): Single;
    {class} function ToTimeSpan(s: string): DDN.mscorlib.DNTimeSpan;
    {class} function ToDateTime(s: string; dateTimeOption: DNXmlDateTimeSerializationMode): DDN.mscorlib.DNDateTime; overload;
    {class} function DecodeName(name: string): string;
    {class} function ToString(value: Boolean): string; overload;
    {class} function ToString(value: DDN.mscorlib.DNDateTime; dateTimeOption: DNXmlDateTimeSerializationMode): string; overload;
    {class} function ToBoolean(s: string): Boolean;
    {class} function ToDouble(s: string): Double;

  end;

  [DNTypeName('System.Xml.XmlConvert')]
  DNXmlConvert = interface(DDN.mscorlib.DNObject)
  ['{B3F984D5-ADCA-3752-990B-4347693F5B74}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  end;

  TDNXmlConvert = class(TDNGenericImport<DNXmlConvertClass, DNXmlConvert>) end;

  //-------------namespace: System.Xml----------------
  DNXmlImplementationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{616B9815-E140-5278-AE6F-7D21CF454BB0}']
  { constructors } 

    {class} function init: DNXmlImplementation; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlImplementation; overload;

  end;

  [DNTypeName('System.Xml.XmlImplementation')]
  DNXmlImplementation = interface(DDN.mscorlib.DNObject)
  ['{B742D53C-E509-34DC-BAD5-2B37A1AFC661}']
  { methods } 

    function CreateDocument: DNXmlDocument;
    function HasFeature(strFeature: string; strVersion: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlImplementation = class(TDNGenericImport<DNXmlImplementationClass, DNXmlImplementation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamedNodeMapClass = interface(DNObjectClass)
  ['{B74D75C0-1E64-5FD7-9BB2-52B25E3AB6A3}']
  end;

  [DNTypeName('System.Xml.XmlNamedNodeMap')]
  DNXmlNamedNodeMap = interface(DDN.mscorlib.DNIEnumerable)
  ['{291396F7-2B76-36E2-8E89-0C2BAB420F83}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetNamedItem(name: string): DNXmlNode; overload;
    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlNamedNodeMap = class(TDNGenericImport<DNXmlNamedNodeMapClass, DNXmlNamedNodeMap>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeCollectionClass = interface(DNXmlNamedNodeMapClass)
  ['{7D8D432B-42C5-5DD1-81AC-C7E940F30448}']
  end;

  [DNTypeName('System.Xml.XmlAttributeCollection')]
  DNXmlAttributeCollection = interface(DNXmlNamedNodeMap)
  ['{AFF15495-0AAB-3C7F-A744-CB752611089E}']
  { getters & setters } 

    function get_ItemOf(i: Int32): DNXmlAttribute; overload;
    function get_ItemOf(name: string): DNXmlAttribute; overload;
    function get_ItemOf(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function get_Count: Int32;

  { methods } 

    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function Prepend(node: DNXmlAttribute): DNXmlAttribute;
    function Append(node: DNXmlAttribute): DNXmlAttribute;
    function InsertBefore(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function InsertAfter(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function Remove(node: DNXmlAttribute): DNXmlAttribute;
    function RemoveAt(i: Int32): DNXmlAttribute;
    procedure RemoveAll;
    procedure CopyTo(&array: TArray<DNXmlAttribute>; index: Int32);
    function GetNamedItem(name: string): DNXmlNode; overload;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemOf[i: Int32]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[name: string]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[localName: string; namespaceURI: string]: DNXmlAttribute read get_ItemOf; default;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAttributeCollection = class(TDNGenericImport<DNXmlAttributeCollectionClass, DNXmlAttributeCollection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamespaceManagerClass = interface(DNObjectClass)
  ['{B8483CCF-B8DD-5A89-B0AB-9F9015775557}']
  { constructors } 

    {class} function init(nameTable: DNXmlNameTable): DNXmlNamespaceManager;

  end;

  [DNTypeName('System.Xml.XmlNamespaceManager')]
  DNXmlNamespaceManager = interface(DNIXmlNamespaceResolver)
  ['{C5338A3B-B457-3C22-9CD2-4786DF44090F}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    procedure PushScope;
    function PopScope: Boolean;
    procedure RemoveNamespace(prefix: string; uri: string);
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(uri: string): string;
    function HasNamespace(prefix: string): Boolean;
    procedure AddNamespace(prefix: string; uri: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXmlNamespaceManager = class(TDNGenericImport<DNXmlNamespaceManagerClass, DNXmlNamespaceManager>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltContextClass = interface(DNXmlNamespaceManagerClass)
  ['{E4CAE55E-6F3A-5F42-8DAA-CBED5B921C26}']
  end;

  [DNTypeName('System.Xml.Xsl.XsltContext')]
  DNXsltContext = interface(DNXmlNamespaceManager)
  ['{59A37C60-EAB8-31A2-BF26-C2C67285426B}']
  { getters & setters } 

    function get_Whitespace: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    function ResolveVariable(prefix: string; name: string): DNIXsltContextVariable;
    function ResolveFunction(prefix: string; name: string; ArgTypes: TArray<DNXPathResultType>): DNIXsltContextFunction;
    function PreserveWhitespace(node: DNXPathNavigator): Boolean;
    function CompareDocument(baseUri: string; nextbaseUri: string): Int32;
    procedure PushScope;
    function PopScope: Boolean;
    procedure RemoveNamespace(prefix: string; uri: string);
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(uri: string): string;
    function HasNamespace(prefix: string): Boolean;
    procedure AddNamespace(prefix: string; uri: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Whitespace: Boolean read get_Whitespace;
    property NameTable: DNXmlNameTable read get_NameTable;
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXsltContext = class(TDNGenericImport<DNXsltContextClass, DNXsltContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNameTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{77150595-D80A-50B6-8E01-202CC752528A}']
  end;

  [DNTypeName('System.Xml.XmlNameTable')]
  DNXmlNameTable = interface(DDN.mscorlib.DNObject)
  ['{14B8B8DB-2F35-39C8-A2F8-9BC1E9834472}']
  { methods } 

    function Get(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Get(&array: string): string; overload;
    function Add(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Add(&array: string): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlNameTable = class(TDNGenericImport<DNXmlNameTableClass, DNXmlNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNNameTableClass = interface(DNXmlNameTableClass)
  ['{E8743B09-46E8-5553-8DFA-1124B6A93420}']
  { constructors } 

    {class} function init: DNNameTable;

  end;

  [DNTypeName('System.Xml.NameTable')]
  DNNameTable = interface(DNXmlNameTable)
  ['{A1C619FD-4BBD-32AC-B386-1EA2575A039B}']
  { methods } 

    function Add(key: string): string; overload;
    function Add(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    function Get(value: string): string; overload;
    function Get(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNameTable = class(TDNGenericImport<DNNameTableClass, DNNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeClass = interface(DNObjectClass)
  ['{67ED459D-701F-5264-948A-65FB8009A866}']
  end;

  [DNTypeName('System.Xml.XmlNode')]
  DNXmlNode = interface(DDN.mscorlib.DNICloneable)
  ['{1E11AFE9-F059-35CC-A0C3-B9AA38701C21}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function CloneNode(deep: Boolean): DNXmlNode;
    function Supports(feature: string; version: string): Boolean;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNode = class(TDNGenericImport<DNXmlNodeClass, DNXmlNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeClass = interface(DNXmlNodeClass)
  ['{568F5F75-91DF-5716-991A-DE584FED5846}']
  { static getter & setter } 

    procedure set_InnerText(value: string);
    procedure set_InnerXml(value: string);

  { static propertys } 

    {class} property InnerText: string write set_InnerText;
    {class} property InnerXml: string write set_InnerXml;
  end;

  [DNTypeName('System.Xml.XmlAttribute')]
  DNXmlAttribute = interface(DNXmlNode)
  ['{D53A0503-137B-30F4-8409-E7299C90A5C8}']
  { getters & setters } 

    function get_ParentNode: DNXmlNode;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_OwnerDocument: DNXmlDocument;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    procedure set_InnerText(value: string);
    function get_Specified: Boolean;
    function get_OwnerElement: DNXmlElement;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParentNode: DNXmlNode read get_ParentNode;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Value: string read get_Value write set_Value;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerText: string write set_InnerText;
    property Specified: Boolean read get_Specified;
    property OwnerElement: DNXmlElement read get_OwnerElement;
    property InnerXml: string write set_InnerXml;
    property BaseURI: string read get_BaseURI;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlAttribute = class(TDNGenericImport<DNXmlAttributeClass, DNXmlAttribute>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentClass = interface(DNXmlNodeClass)
  ['{72ECC820-5D8B-5542-9F37-BD21B3B1CDF4}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    {class} function init: DNXmlDocument; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlDocument; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  [DNTypeName('System.Xml.XmlDocument')]
  DNXmlDocument = interface(DNXmlNode)
  ['{25C48904-3F45-36CE-9DAC-C679105D5308}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_DocumentType: DNXmlDocumentType;
    function get_Implementation: DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DNXmlElement;
    function get_OwnerDocument: DNXmlDocument;
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_NameTable: DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DNXmlNodeChangedEventHandler);

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function CreateAttribute(name: string): DNXmlAttribute; overload;
    function CreateCDataSection(data: string): DNXmlCDataSection;
    function CreateComment(data: string): DNXmlComment;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DNXmlDocumentType;
    function CreateDocumentFragment: DNXmlDocumentFragment;
    function CreateElement(name: string): DNXmlElement; overload;
    function CreateEntityReference(name: string): DNXmlEntityReference;
    function CreateProcessingInstruction(target: string; data: string): DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DNXmlDeclaration;
    function CreateTextNode(text: string): DNXmlText;
    function CreateSignificantWhitespace(text: string): DNXmlSignificantWhitespace;
    function CreateNavigator: DNXPathNavigator;
    function CreateWhitespace(text: string): DNXmlWhitespace;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function GetElementById(elementId: string): DNXmlElement;
    function ImportNode(node: DNXmlNode; deep: Boolean): DNXmlNode;
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DNXmlElement; overload;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DNXmlNode; overload;
    function CreateNode(&type: DNXmlNodeType; name: string; namespaceURI: string): DNXmlNode; overload;
    function ReadNode(reader: DNXmlReader): DNXmlNode;
    procedure Load(filename: string); overload;
    procedure Load(inStream: DDN.mscorlib.DNStream); overload;
    procedure Load(txtReader: DDN.mscorlib.DNTextReader); overload;
    procedure Load(reader: DNXmlReader); overload;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDN.mscorlib.DNStream); overload;
    procedure Save(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(xw: DNXmlWriter);
    procedure Validate(validationEventHandler: DNValidationEventHandler); overload;
    function CreateNode(&type: DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DNXmlNode; overload;
    procedure Save(w: DNXmlWriter); overload;
    procedure Validate(validationEventHandler: DNValidationEventHandler; nodeToValidate: DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property DocumentType: DNXmlDocumentType read get_DocumentType;
    property &Implementation: DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DNXmlElement read get_DocumentElement;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property NameTable: DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocument = class(TDNGenericImport<DNXmlDocumentClass, DNXmlDocument>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentFragmentClass = interface(DNXmlNodeClass)
  ['{6E0EA61D-9BC6-5CA3-BBB9-2C261777C15D}']
  end;

  [DNTypeName('System.Xml.XmlDocumentFragment')]
  DNXmlDocumentFragment = interface(DNXmlNode)
  ['{495A1294-FF3E-3F56-A99F-A1AA85127036}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentFragment = class(TDNGenericImport<DNXmlDocumentFragmentClass, DNXmlDocumentFragment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityClass = interface(DNXmlNodeClass)
  ['{58105CFA-A4B1-5776-8C52-FC78B1A05533}']
  end;

  [DNTypeName('System.Xml.XmlEntity')]
  DNXmlEntity = interface(DNXmlNode)
  ['{BBF8E184-152C-3140-917E-A6A3030C164E}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Name: string;
    function get_LocalName: string;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_NotationName: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property InnerText: string read get_InnerText write set_InnerText;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property NotationName: string read get_NotationName;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntity = class(TDNGenericImport<DNXmlEntityClass, DNXmlEntity>) end;

  //-------------namespace: System.Xml----------------
  DNXmlLinkedNodeClass = interface(DNXmlNodeClass)
  ['{91F2964A-C0B9-50C3-A29B-A15A2597FEC1}']
  end;

  [DNTypeName('System.Xml.XmlLinkedNode')]
  DNXmlLinkedNode = interface(DNXmlNode)
  ['{E1A8457C-7DBB-37D9-95EF-B132116B2C67}']
  { getters & setters } 

    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function CloneNode(deep: Boolean): DNXmlNode;
    function Supports(feature: string; version: string): Boolean;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlLinkedNode = class(TDNGenericImport<DNXmlLinkedNodeClass, DNXmlLinkedNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCharacterDataClass = interface(DNXmlLinkedNodeClass)
  ['{42D10EF7-A1BE-5E21-BD42-86ECD3B911FD}']
  end;

  [DNTypeName('System.Xml.XmlCharacterData')]
  DNXmlCharacterData = interface(DNXmlLinkedNode)
  ['{6DDDB0FA-19BB-3660-ABC7-A8E351F02593}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function CloneNode(deep: Boolean): DNXmlNode;
    function Supports(feature: string; version: string): Boolean;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Name: string read get_Name;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlCharacterData = class(TDNGenericImport<DNXmlCharacterDataClass, DNXmlCharacterData>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCDataSectionClass = interface(DNXmlCharacterDataClass)
  ['{97FBAC7B-CA59-5B48-A7E2-B077AF8D1A99}']
  end;

  [DNTypeName('System.Xml.XmlCDataSection')]
  DNXmlCDataSection = interface(DNXmlCharacterData)
  ['{1810EA9B-175D-3CDC-8921-290FD122D830}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_PreviousText: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property PreviousText: DNXmlNode read get_PreviousText;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlCDataSection = class(TDNGenericImport<DNXmlCDataSectionClass, DNXmlCDataSection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCommentClass = interface(DNXmlCharacterDataClass)
  ['{BB4F609E-8620-50D3-BD93-A5228DAAD94E}']
  end;

  [DNTypeName('System.Xml.XmlComment')]
  DNXmlComment = interface(DNXmlCharacterData)
  ['{CC1B4DB8-000C-375C-85B6-C4F457CA604C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlComment = class(TDNGenericImport<DNXmlCommentClass, DNXmlComment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSignificantWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{D3D69425-089C-5BEC-8B98-2869CBCD58BA}']
  end;

  [DNTypeName('System.Xml.XmlSignificantWhitespace')]
  DNXmlSignificantWhitespace = interface(DNXmlCharacterData)
  ['{0B172DBB-0D28-360D-B6DA-C98B3EC1449A}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlSignificantWhitespace = class(TDNGenericImport<DNXmlSignificantWhitespaceClass, DNXmlSignificantWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextClass = interface(DNXmlCharacterDataClass)
  ['{0651B7EA-6BE9-59ED-A83D-2E5F61F97A05}']
  end;

  [DNTypeName('System.Xml.XmlText')]
  DNXmlText = interface(DNXmlCharacterData)
  ['{C23B6FD2-1BB3-3560-8729-8F78B16B5B5C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function SplitText(offset: Int32): DNXmlText;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlText = class(TDNGenericImport<DNXmlTextClass, DNXmlText>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{2A70CCA8-A245-5913-A121-09B607B6A137}']
  end;

  [DNTypeName('System.Xml.XmlWhitespace')]
  DNXmlWhitespace = interface(DNXmlCharacterData)
  ['{7665AD2A-852F-30AD-8E7A-09633B25E173}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlWhitespace = class(TDNGenericImport<DNXmlWhitespaceClass, DNXmlWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDeclarationClass = interface(DNXmlLinkedNodeClass)
  ['{A6529FEA-8312-512A-987C-49BDDB60B87F}']
  end;

  [DNTypeName('System.Xml.XmlDeclaration')]
  DNXmlDeclaration = interface(DNXmlLinkedNode)
  ['{E98CE747-E1FC-355C-8454-95C884B8FB04}']
  { getters & setters } 

    function get_Version: string;
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Standalone: string;
    procedure set_Standalone(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property Encoding: string read get_Encoding write set_Encoding;
    property Standalone: string read get_Standalone write set_Standalone;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDeclaration = class(TDNGenericImport<DNXmlDeclarationClass, DNXmlDeclaration>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentTypeClass = interface(DNXmlLinkedNodeClass)
  ['{BEC420DE-802C-5F38-95F7-CA44F66DB28E}']
  end;

  [DNTypeName('System.Xml.XmlDocumentType')]
  DNXmlDocumentType = interface(DNXmlLinkedNode)
  ['{7AF5641A-36C3-3113-83DA-937C8D756FC0}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_Entities: DNXmlNamedNodeMap;
    function get_Notations: DNXmlNamedNodeMap;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_InternalSubset: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Entities: DNXmlNamedNodeMap read get_Entities;
    property Notations: DNXmlNamedNodeMap read get_Notations;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property InternalSubset: string read get_InternalSubset;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentType = class(TDNGenericImport<DNXmlDocumentTypeClass, DNXmlDocumentType>) end;

  //-------------namespace: System.Xml----------------
  DNXmlElementClass = interface(DNXmlLinkedNodeClass)
  ['{95FBF49A-C7B8-52DE-9824-77FC0B51F4A3}']
  end;

  [DNTypeName('System.Xml.XmlElement')]
  DNXmlElement = interface(DNXmlLinkedNode)
  ['{4F4034C5-F0F2-3631-965C-95B3A6E74446}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_IsEmpty: Boolean;
    procedure set_IsEmpty(value: Boolean);
    function get_Attributes: DNXmlAttributeCollection;
    function get_HasAttributes: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NextSibling: DNXmlNode;
    function get_PreviousSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function GetAttribute(name: string): string; overload;
    procedure SetAttribute(name: string; value: string); overload;
    procedure RemoveAttribute(name: string); overload;
    function GetAttributeNode(name: string): DNXmlAttribute; overload;
    function SetAttributeNode(newAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function RemoveAttributeNode(oldAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function SetAttribute(localName: string; namespaceURI: string; value: string): string; overload;
    procedure RemoveAttribute(localName: string; namespaceURI: string); overload;
    function GetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function SetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function RemoveAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function HasAttribute(name: string): Boolean; overload;
    function HasAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function RemoveAttributeAt(i: Int32): DNXmlNode;
    procedure RemoveAllAttributes;
    procedure RemoveAll;
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property IsEmpty: Boolean read get_IsEmpty write set_IsEmpty;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property HasAttributes: Boolean read get_HasAttributes;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property InnerText: string read get_InnerText write set_InnerText;
    property NextSibling: DNXmlNode read get_NextSibling;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlElement = class(TDNGenericImport<DNXmlElementClass, DNXmlElement>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityReferenceClass = interface(DNXmlLinkedNodeClass)
  ['{90401A09-6381-574B-823A-E3F8F43DAFCD}']
  end;

  [DNTypeName('System.Xml.XmlEntityReference')]
  DNXmlEntityReference = interface(DNXmlLinkedNode)
  ['{A49C5C6E-C1A3-30E6-AED4-6AB2D32BA301}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_BaseURI: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property BaseURI: string read get_BaseURI;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntityReference = class(TDNGenericImport<DNXmlEntityReferenceClass, DNXmlEntityReference>) end;

  //-------------namespace: System.Xml----------------
  DNXmlProcessingInstructionClass = interface(DNXmlLinkedNodeClass)
  ['{A00F64E7-9C95-55E8-BE6E-9B41100EE844}']
  end;

  [DNTypeName('System.Xml.XmlProcessingInstruction')]
  DNXmlProcessingInstruction = interface(DNXmlLinkedNode)
  ['{2550041F-0896-38C3-9876-092B4D27211E}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Target: string;
    function get_Data: string;
    procedure set_Data(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property Target: string read get_Target;
    property Data: string read get_Data write set_Data;
    property InnerText: string read get_InnerText write set_InnerText;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlProcessingInstruction = class(TDNGenericImport<DNXmlProcessingInstructionClass, DNXmlProcessingInstruction>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNotationClass = interface(DNXmlNodeClass)
  ['{B4568DBC-491D-59E9-AC4E-B505B14EA8BF}']
  end;

  [DNTypeName('System.Xml.XmlNotation')]
  DNXmlNotation = interface(DNXmlNode)
  ['{E0331AF9-CC77-3962-9CAF-E24976945240}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNotation = class(TDNGenericImport<DNXmlNotationClass, DNXmlNotation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeListClass = interface(DNObjectClass)
  ['{CD04361B-0A59-52B5-8AD4-CB82A6CB6425}']
  end;

  [DNTypeName('System.Xml.XmlNodeList')]
  DNXmlNodeList = interface(DDN.mscorlib.DNIEnumerable)
  ['{A82A4A5B-6914-3CC4-B7C3-EBB1D009992C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ItemOf(i: Int32): DNXmlNode;

  { methods } 

    function Item(index: Int32): DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property ItemOf[i: Int32]: DNXmlNode read get_ItemOf; default;
  end;

  TDNXmlNodeList = class(TDNGenericImport<DNXmlNodeListClass, DNXmlNodeList>) end;

  //-------------namespace: System.Xml----------------
  DNXmlParserContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E6B1786-198D-5A8F-8792-DB639A99D507}']
  { constructors } 

    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDN.mscorlib.DNEncoding): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDN.mscorlib.DNEncoding): DNXmlParserContext; overload;

  end;

  [DNTypeName('System.Xml.XmlParserContext')]
  DNXmlParserContext = interface(DDN.mscorlib.DNObject)
  ['{406E8126-3D39-3708-BBD1-E5414D1C792F}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    function get_NamespaceManager: DNXmlNamespaceManager;
    procedure set_NamespaceManager(value: DNXmlNamespaceManager);
    function get_DocTypeName: string;
    procedure set_DocTypeName(value: string);
    function get_PublicId: string;
    procedure set_PublicId(value: string);
    function get_SystemId: string;
    procedure set_SystemId(value: string);
    function get_BaseURI: string;
    procedure set_BaseURI(value: string);
    function get_InternalSubset: string;
    procedure set_InternalSubset(value: string);
    function get_XmlLang: string;
    procedure set_XmlLang(value: string);
    function get_XmlSpace: DNXmlSpace;
    procedure set_XmlSpace(value: DNXmlSpace);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property NamespaceManager: DNXmlNamespaceManager read get_NamespaceManager write set_NamespaceManager;
    property DocTypeName: string read get_DocTypeName write set_DocTypeName;
    property PublicId: string read get_PublicId write set_PublicId;
    property SystemId: string read get_SystemId write set_SystemId;
    property BaseURI: string read get_BaseURI write set_BaseURI;
    property InternalSubset: string read get_InternalSubset write set_InternalSubset;
    property XmlLang: string read get_XmlLang write set_XmlLang;
    property XmlSpace: DNXmlSpace read get_XmlSpace write set_XmlSpace;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
  end;

  TDNXmlParserContext = class(TDNGenericImport<DNXmlParserContextClass, DNXmlParserContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlQualifiedNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{990D471B-E959-556A-AFED-5552CA20D4A4}']
  { constructors } 

    {class} function init: DNXmlQualifiedName; overload;
    {class} function init(name: string): DNXmlQualifiedName; overload;
    {class} function init(name: string; ns: string): DNXmlQualifiedName; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQualifiedName;

  { static fields } 

    {class} property Empty: DNXmlQualifiedName read __fakeFieldGet_Empty;

  { static methods } 

    {class} function ToString(name: string; ns: string): string; overload;

  end;

  [DNTypeName('System.Xml.XmlQualifiedName')]
  DNXmlQualifiedName = interface(DDN.mscorlib.DNObject)
  ['{74BB3238-7944-3CD8-8790-E945BBE5866E}']
  { getters & setters } 

    function get_Namespace: string;
    function get_Name: string;
    function get_IsEmpty: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function Equals(other: DDN.mscorlib.DNObject): Boolean;
    function ToString: string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Namespace: string read get_Namespace;
    property Name: string read get_Name;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNXmlQualifiedName = class(TDNGenericImport<DNXmlQualifiedNameClass, DNXmlQualifiedName>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderClass = interface(DNObjectClass)
  ['{BED71FF4-9350-5FA7-AEB4-E4B0CBD7BE7A}']
  { static methods } 

    {class} function IsName(str: string): Boolean;
    {class} function IsNameToken(str: string): Boolean;
    {class} function Create(inputUri: string): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(reader: DNXmlReader; settings: DNXmlReaderSettings): DNXmlReader; overload;

  end;

  [DNTypeName('System.Xml.XmlReader')]
  DNXmlReader = interface(DDN.mscorlib.DNIDisposable)
  ['{E265CBE9-7445-3F96-8618-DA44B4ECEF45}']
  { getters & setters } 

    function get_Settings: DNXmlReaderSettings;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_AttributeCount: Int32;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { methods } 

    function ReadContentAsObject: DDN.mscorlib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    procedure MoveToAttribute(i: Int32); overload;
    procedure Close;
    procedure Skip;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    function ReadElementString(name: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    function SkipAsync: DDN.mscorlib.DNTask;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function GetAttribute(name: string): string; overload;
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(name: string; ns: string): Boolean; overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Settings: DNXmlReaderSettings read get_Settings;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property AttributeCount: Int32 read get_AttributeCount;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlReader = class(TDNGenericImport<DNXmlReaderClass, DNXmlReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeReaderClass = interface(DNXmlReaderClass)
  ['{FB9EB325-C8B4-5A7C-839D-2BD7311CA461}']
  { constructors } 

    {class} function init(node: DNXmlNode): DNXmlNodeReader;

  end;

  [DNTypeName('System.Xml.XmlNodeReader')]
  DNXmlNodeReader = interface(DNXmlReader)
  ['{A91FE415-7469-3E8F-9EBD-318B69E0DDEE}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_CanResolveEntity: Boolean;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_HasAttributes: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_CanReadBinaryContent: Boolean;
    function get_Settings: DNXmlReaderSettings;
    function get_QuoteChar: Char;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    function GetAttribute(attributeIndex: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(name: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(attributeIndex: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function ReadString: string;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadAttributeValue: Boolean;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    function ReadElementString(name: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    function SkipAsync: DDN.mscorlib.DNTask;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property HasAttributes: Boolean read get_HasAttributes;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property Settings: DNXmlReaderSettings read get_Settings;
    property QuoteChar: Char read get_QuoteChar;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
  end;

  TDNXmlNodeReader = class(TDNGenericImport<DNXmlNodeReaderClass, DNXmlNodeReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextReaderClass = interface(DNXmlReaderClass)
  ['{9248CA7D-8AA7-55A3-AB75-E3083B9C90D6}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(input: DDN.mscorlib.DNStream): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDN.mscorlib.DNStream): DNXmlTextReader; overload;
    {class} function init(input: DDN.mscorlib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDN.mscorlib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(input: DDN.mscorlib.DNTextReader): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDN.mscorlib.DNTextReader): DNXmlTextReader; overload;
    {class} function init(input: DDN.mscorlib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDN.mscorlib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(xmlFragment: DDN.mscorlib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    {class} function init(url: string): DNXmlTextReader; overload;
    {class} function init(url: string; nt: DNXmlNameTable): DNXmlTextReader; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlTextReader')]
  DNXmlTextReader = interface(DNXmlReader)
  ['{9C42EB13-F238-3F97-81B9-9C1B73D5A449}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Normalization: Boolean;
    procedure set_Normalization(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_HasAttributes: Boolean;

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function HasLineInfo: Boolean;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    procedure ResetState;
    function GetRemainder: DDN.mscorlib.DNTextReader;
    function ReadChars(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadBase64(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    function ReadBinHex(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    function ReadElementString(name: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    function SkipAsync: DDN.mscorlib.DNTask;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Normalization: Boolean read get_Normalization write set_Normalization;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property Settings: DNXmlReaderSettings read get_Settings;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlTextReader = class(TDNGenericImport<DNXmlTextReaderClass, DNXmlTextReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlValidatingReaderClass = interface(DNXmlReaderClass)
  ['{1645BEFA-C34C-52E2-B176-909DD78E25CF}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(reader: DNXmlReader): DNXmlValidatingReader; overload;
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;
    {class} function init(xmlFragment: DDN.mscorlib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlValidatingReader')]
  DNXmlValidatingReader = interface(DNXmlReader)
  ['{08C23F4D-44D8-3B08-A427-06D6802DDAB0}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SchemaType: DDN.mscorlib.DNObject;
    function get_Reader: DNXmlReader;
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_Schemas: DNXmlSchemaCollection;
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function HasLineInfo: Boolean;
    function ReadTypedValue: DDN.mscorlib.DNObject;
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    procedure Skip;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    function ReadElementString(name: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    function SkipAsync: DDN.mscorlib.DNTask;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SchemaType: DDN.mscorlib.DNObject read get_SchemaType;
    property Reader: DNXmlReader read get_Reader;
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    property Schemas: DNXmlSchemaCollection read get_Schemas;
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property Settings: DNXmlReaderSettings read get_Settings;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlValidatingReader = class(TDNGenericImport<DNXmlValidatingReaderClass, DNXmlValidatingReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{333069D0-1337-5A1D-988D-3D92D51A0162}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlReaderSettings; overload;
    {class} function init(resolver: DNXmlResolver): DNXmlReaderSettings; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlReaderSettings')]
  DNXmlReaderSettings = interface(DDN.mscorlib.DNObject)
  ['{A34E9932-0279-3945-87FC-037F0B86F4F9}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineNumberOffset: Int32;
    procedure set_LineNumberOffset(value: Int32);
    function get_LinePositionOffset: Int32;
    procedure set_LinePositionOffset(value: Int32);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_MaxCharactersInDocument: Int64;
    procedure set_MaxCharactersInDocument(value: Int64);
    function get_MaxCharactersFromEntities: Int64;
    procedure set_MaxCharactersFromEntities(value: Int64);
    function get_IgnoreWhitespace: Boolean;
    procedure set_IgnoreWhitespace(value: Boolean);
    function get_IgnoreProcessingInstructions: Boolean;
    procedure set_IgnoreProcessingInstructions(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_ValidationFlags: DNXmlSchemaValidationFlags;
    procedure set_ValidationFlags(value: DNXmlSchemaValidationFlags);
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Clone: DNXmlReaderSettings;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property LineNumberOffset: Int32 read get_LineNumberOffset write set_LineNumberOffset;
    property LinePositionOffset: Int32 read get_LinePositionOffset write set_LinePositionOffset;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property MaxCharactersInDocument: Int64 read get_MaxCharactersInDocument write set_MaxCharactersInDocument;
    property MaxCharactersFromEntities: Int64 read get_MaxCharactersFromEntities write set_MaxCharactersFromEntities;
    property IgnoreWhitespace: Boolean read get_IgnoreWhitespace write set_IgnoreWhitespace;
    property IgnoreProcessingInstructions: Boolean read get_IgnoreProcessingInstructions write set_IgnoreProcessingInstructions;
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    property ValidationFlags: DNXmlSchemaValidationFlags read get_ValidationFlags write set_ValidationFlags;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
  end;

  TDNXmlReaderSettings = class(TDNGenericImport<DNXmlReaderSettingsClass, DNXmlReaderSettings>) end;

  //-------------namespace: System.Xml----------------
  DNXmlResolverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDE29340-6461-5FEC-9331-2E67780C1D99}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { static propertys } 

    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlResolver')]
  DNXmlResolver = interface(DDN.mscorlib.DNObject)
  ['{F2DEB691-8A4B-36EE-9262-ED43949B7CC1}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { methods } 

    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  TDNXmlResolver = class(TDNGenericImport<DNXmlResolverClass, DNXmlResolver>) end;

  //-------------namespace: System.Xml.Resolvers----------------
  DNXmlPreloadedResolverClass = interface(DNXmlResolverClass)
  ['{D6792A31-45EC-5D74-9A1A-53860DAB4F1A}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { constructors } 

    {class} function init: DNXmlPreloadedResolver; overload;
    {class} function init(preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds; uriComparer: DDN.mscorlib.DNIEqualityComparer<DDN.System.DNUri>): DNXmlPreloadedResolver; overload;

  { static propertys } 

    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.Resolvers.XmlPreloadedResolver')]
  DNXmlPreloadedResolver = interface(DNXmlResolver)
  ['{25F71FE6-DA1F-37E0-8D82-9E600E6214DA}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_PreloadedUris: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>;

  { methods } 

    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    procedure Add(uri: DDN.System.DNUri; value: TArray<Byte>); overload;
    procedure Add(uri: DDN.System.DNUri; value: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Add(uri: DDN.System.DNUri; value: string); overload;
    procedure Remove(uri: DDN.System.DNUri);
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    procedure Add(uri: DDN.System.DNUri; value: DDN.mscorlib.DNStream); overload;
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Credentials: DDN.System.DNICredentials write set_Credentials;
    property PreloadedUris: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri> read get_PreloadedUris;
  end;

  TDNXmlPreloadedResolver = class(TDNGenericImport<DNXmlPreloadedResolverClass, DNXmlPreloadedResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSecureResolverClass = interface(DNXmlResolverClass)
  ['{11A292E9-5293-562F-95D8-41BDF87FA727}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { constructors } 

    {class} function init(resolver: DNXmlResolver; securityUrl: string): DNXmlSecureResolver; overload;
    {class} function init(resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence): DNXmlSecureResolver; overload;
    {class} function init(resolver: DNXmlResolver; permissionSet: DDN.mscorlib.DNPermissionSet): DNXmlSecureResolver; overload;

  { static methods } 

    {class} function CreateEvidenceForUrl(securityUrl: string): DDN.mscorlib.DNEvidence;

  { static propertys } 

    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlSecureResolver')]
  DNXmlSecureResolver = interface(DNXmlResolver)
  ['{2D1232D7-9DBC-35AD-A3B6-98F6CA04D053}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { methods } 

    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  TDNXmlSecureResolver = class(TDNGenericImport<DNXmlSecureResolverClass, DNXmlSecureResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlUrlResolverClass = interface(DNXmlResolverClass)
  ['{4ACC9404-F37B-52C5-9DFA-2B613A70A8A1}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    procedure set_CachePolicy(value: DDN.System.DNRequestCachePolicy);

  { constructors } 

    {class} function init: DNXmlUrlResolver;

  { static propertys } 

    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
    {class} property Proxy: DDN.System.DNIWebProxy write set_Proxy;
    {class} property CachePolicy: DDN.System.DNRequestCachePolicy write set_CachePolicy;
  end;

  [DNTypeName('System.Xml.XmlUrlResolver')]
  DNXmlUrlResolver = interface(DNXmlResolver)
  ['{7D359CC5-1CE8-3E77-9758-AF340B8CBE01}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    procedure set_CachePolicy(value: DDN.System.DNRequestCachePolicy);

  { methods } 

    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Credentials: DDN.System.DNICredentials write set_Credentials;
    property Proxy: DDN.System.DNIWebProxy write set_Proxy;
    property CachePolicy: DDN.System.DNRequestCachePolicy write set_CachePolicy;
  end;

  TDNXmlUrlResolver = class(TDNGenericImport<DNXmlUrlResolverClass, DNXmlUrlResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlXapResolverClass = interface(DNXmlResolverClass)
  ['{94880A7B-7E64-56C6-8C7E-9DFFB432FCD4}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { constructors } 

    {class} function init: DNXmlXapResolver;

  { static methods } 

    {class} procedure RegisterApplicationResourceStreamResolver(appStreamResolver: DNIApplicationResourceStreamResolver);

  { static propertys } 

    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlXapResolver')]
  DNXmlXapResolver = interface(DNXmlResolver)
  ['{3CDE9F32-B3FA-3958-83FF-AE0C317F169B}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { methods } 

    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  TDNXmlXapResolver = class(TDNGenericImport<DNXmlXapResolverClass, DNXmlXapResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterClass = interface(DNObjectClass)
  ['{387BD4BD-B278-52F4-B752-3F6A5A361BA4}']
  { static methods } 

    {class} function Create(outputFileName: string): DNXmlWriter; overload;
    {class} function Create(outputFileName: string; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStream): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStream; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNTextWriter): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNTextWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStringBuilder): DNXmlWriter; overload;
    {class} function Create(output: DDN.mscorlib.DNStringBuilder; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;

  end;

  [DNTypeName('System.Xml.XmlWriter')]
  DNXmlWriter = interface(DDN.mscorlib.DNIDisposable)
  ['{DEE5DBC9-DE85-3F72-8CA7-9B3A0951D0DB}']
  { getters & setters } 

    function get_Settings: DNXmlWriterSettings;
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;

  { methods } 

    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure WriteNmToken(name: string);
    procedure WriteName(name: string);
    procedure WriteValue(value: DDN.mscorlib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDateTime); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDN.mscorlib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteEndDocumentAsync: DDN.mscorlib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDN.mscorlib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDN.mscorlib.DNTask;
    function WriteEndElementAsync: DDN.mscorlib.DNTask;
    function WriteFullEndElementAsync: DDN.mscorlib.DNTask;
    function WriteCDataAsync(text: string): DDN.mscorlib.DNTask;
    function WriteCommentAsync(text: string): DDN.mscorlib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDN.mscorlib.DNTask;
    function WriteEntityRefAsync(name: string): DDN.mscorlib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDN.mscorlib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDN.mscorlib.DNTask;
    function WriteStringAsync(text: string): DDN.mscorlib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDN.mscorlib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteRawAsync(data: string): DDN.mscorlib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteNmTokenAsync(name: string): DDN.mscorlib.DNTask;
    function WriteNameAsync(name: string): DDN.mscorlib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDN.mscorlib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndAttribute;
    procedure WriteCData(text: string);
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(name: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Flush;
    function LookupPrefix(ns: string): string;
    procedure WriteQualifiedName(localName: string; ns: string);
    procedure WriteValue(value: Boolean); overload;
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Settings: DNXmlWriterSettings read get_Settings;
    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
  end;

  TDNXmlWriter = class(TDNGenericImport<DNXmlWriterClass, DNXmlWriter>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextWriterClass = interface(DNXmlWriterClass)
  ['{1C2628BB-023E-55A7-AA2F-1172CF62087D}']
  { constructors } 

    {class} function init(w: DDN.mscorlib.DNStream; encoding: DDN.mscorlib.DNEncoding): DNXmlTextWriter; overload;
    {class} function init(filename: string; encoding: DDN.mscorlib.DNEncoding): DNXmlTextWriter; overload;
    {class} function init(w: DDN.mscorlib.DNTextWriter): DNXmlTextWriter; overload;

  end;

  [DNTypeName('System.Xml.XmlTextWriter')]
  DNXmlTextWriter = interface(DNXmlWriter)
  ['{CA18874F-214A-3FE7-BF32-7C2EE1E49E0E}']
  { getters & setters } 

    function get_BaseStream: DDN.mscorlib.DNStream;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Formatting: DNFormatting;
    procedure set_Formatting(value: DNFormatting);
    function get_Indentation: Int32;
    procedure set_Indentation(value: Int32);
    function get_IndentChar: Char;
    procedure set_IndentChar(value: Char);
    function get_QuoteChar: Char;
    procedure set_QuoteChar(value: Char);
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_Settings: DNXmlWriterSettings;

  { methods } 

    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteCData(text: string);
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(name: string; text: string);
    procedure WriteQualifiedName(localName: string; ns: string);
    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteEndAttribute;
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure Flush;
    procedure WriteName(name: string);
    function LookupPrefix(ns: string): string;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure WriteNmToken(name: string);
    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteValue(value: DDN.mscorlib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDateTime); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDN.mscorlib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteEndDocumentAsync: DDN.mscorlib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDN.mscorlib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDN.mscorlib.DNTask;
    function WriteEndElementAsync: DDN.mscorlib.DNTask;
    function WriteFullEndElementAsync: DDN.mscorlib.DNTask;
    function WriteCDataAsync(text: string): DDN.mscorlib.DNTask;
    function WriteCommentAsync(text: string): DDN.mscorlib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDN.mscorlib.DNTask;
    function WriteEntityRefAsync(name: string): DDN.mscorlib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDN.mscorlib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDN.mscorlib.DNTask;
    function WriteStringAsync(text: string): DDN.mscorlib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDN.mscorlib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteRawAsync(data: string): DDN.mscorlib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteNmTokenAsync(name: string): DDN.mscorlib.DNTask;
    function WriteNameAsync(name: string): DDN.mscorlib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDN.mscorlib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    procedure WriteValue(value: Boolean); overload;
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseStream: DDN.mscorlib.DNStream read get_BaseStream;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Formatting: DNFormatting read get_Formatting write set_Formatting;
    property Indentation: Int32 read get_Indentation write set_Indentation;
    property IndentChar: Char read get_IndentChar write set_IndentChar;
    property QuoteChar: Char read get_QuoteChar write set_QuoteChar;
    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property Settings: DNXmlWriterSettings read get_Settings;
  end;

  TDNXmlTextWriter = class(TDNGenericImport<DNXmlTextWriterClass, DNXmlTextWriter>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8666F90C-F5C9-5F87-910D-1BD914FBFB3C}']
  { constructors } 

    {class} function init: DNXmlWriterSettings;

  end;

  [DNTypeName('System.Xml.XmlWriterSettings')]
  DNXmlWriterSettings = interface(DDN.mscorlib.DNObject)
  ['{FF4A400D-DA06-355E-86B7-9B296810A674}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_OmitXmlDeclaration: Boolean;
    procedure set_OmitXmlDeclaration(value: Boolean);
    function get_NewLineHandling: DNNewLineHandling;
    procedure set_NewLineHandling(value: DNNewLineHandling);
    function get_NewLineChars: string;
    procedure set_NewLineChars(value: string);
    function get_Indent: Boolean;
    procedure set_Indent(value: Boolean);
    function get_IndentChars: string;
    procedure set_IndentChars(value: string);
    function get_NewLineOnAttributes: Boolean;
    procedure set_NewLineOnAttributes(value: Boolean);
    function get_CloseOutput: Boolean;
    procedure set_CloseOutput(value: Boolean);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_NamespaceHandling: DNNamespaceHandling;
    procedure set_NamespaceHandling(value: DNNamespaceHandling);
    function get_WriteEndDocumentOnClose: Boolean;
    procedure set_WriteEndDocumentOnClose(value: Boolean);
    function get_OutputMethod: DNXmlOutputMethod;
    function get_DoNotEscapeUriAttributes: Boolean;
    procedure set_DoNotEscapeUriAttributes(value: Boolean);

  { methods } 

    function Clone: DNXmlWriterSettings;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property OmitXmlDeclaration: Boolean read get_OmitXmlDeclaration write set_OmitXmlDeclaration;
    property NewLineHandling: DNNewLineHandling read get_NewLineHandling write set_NewLineHandling;
    property NewLineChars: string read get_NewLineChars write set_NewLineChars;
    property Indent: Boolean read get_Indent write set_Indent;
    property IndentChars: string read get_IndentChars write set_IndentChars;
    property NewLineOnAttributes: Boolean read get_NewLineOnAttributes write set_NewLineOnAttributes;
    property CloseOutput: Boolean read get_CloseOutput write set_CloseOutput;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property NamespaceHandling: DNNamespaceHandling read get_NamespaceHandling write set_NamespaceHandling;
    property WriteEndDocumentOnClose: Boolean read get_WriteEndDocumentOnClose write set_WriteEndDocumentOnClose;
    property OutputMethod: DNXmlOutputMethod read get_OutputMethod;
    property DoNotEscapeUriAttributes: Boolean read get_DoNotEscapeUriAttributes write set_DoNotEscapeUriAttributes;
  end;

  TDNXmlWriterSettings = class(TDNGenericImport<DNXmlWriterSettingsClass, DNXmlWriterSettings>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathDocumentClass = interface(DNObjectClass)
  ['{8C1F535F-E646-5B7F-A23D-656BCDCACC7F}']
  { constructors } 

    {class} function init(reader: DNXmlReader): DNXPathDocument; overload;
    {class} function init(reader: DNXmlReader; space: DNXmlSpace): DNXPathDocument; overload;
    {class} function init(textReader: DDN.mscorlib.DNTextReader): DNXPathDocument; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNXPathDocument; overload;
    {class} function init(uri: string): DNXPathDocument; overload;
    {class} function init(uri: string; space: DNXmlSpace): DNXPathDocument; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathDocument')]
  DNXPathDocument = interface(DNIXPathNavigable)
  ['{B6446D0E-E67F-3271-B8DA-BF8BBBA19466}']
  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXPathDocument = class(TDNGenericImport<DNXPathDocumentClass, DNXPathDocument>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F66C6659-D159-5BE6-A5CE-CAA051FE3D65}']
  { static methods } 

    {class} function Compile(xpath: string): DNXPathExpression; overload;
    {class} function Compile(xpath: string; nsResolver: DNIXmlNamespaceResolver): DNXPathExpression; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathExpression')]
  DNXPathExpression = interface(DDN.mscorlib.DNObject)
  ['{B2D5CCCE-B400-3DC6-B310-EB894C049E94}']
  { getters & setters } 

    function get_Expression: string;
    function get_ReturnType: DNXPathResultType;

  { methods } 

    procedure AddSort(expr: DDN.mscorlib.DNObject; comparer: DDN.mscorlib.DNIComparer); overload;
    procedure AddSort(expr: DDN.mscorlib.DNObject; order: DNXmlSortOrder; caseOrder: DNXmlCaseOrder; lang: string; dataType: DNXmlDataType); overload;
    function Clone: DNXPathExpression;
    procedure SetContext(nsManager: DNXmlNamespaceManager); overload;
    procedure SetContext(nsResolver: DNIXmlNamespaceResolver); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: string read get_Expression;
    property ReturnType: DNXPathResultType read get_ReturnType;
  end;

  TDNXPathExpression = class(TDNGenericImport<DNXPathExpressionClass, DNXPathExpression>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{690D9F07-5437-59CB-A7C4-9C8A860A77A8}']
  end;

  [DNTypeName('System.Xml.XPath.XPathItem')]
  DNXPathItem = interface(DDN.mscorlib.DNObject)
  ['{A44B4227-A179-337E-8392-7DCF1267E90E}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_Value: string;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;

  { methods } 

    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ValueAs(returnType: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property Value: string read get_Value;
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
  end;

  TDNXPathItem = class(TDNGenericImport<DNXPathItemClass, DNXPathItem>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlAtomicValueClass = interface(DNXPathItemClass)
  ['{5C156F4B-59C5-5CBC-BC46-1F5637A16EBE}']
  end;

  [DNTypeName('System.Xml.Schema.XmlAtomicValue')]
  DNXmlAtomicValue = interface(DNXPathItem)
  ['{18D064C4-771A-3DB5-9B38-A0D84B778768}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_Value: string;

  { methods } 

    function Clone: DNXmlAtomicValue;
    function ValueAs(&type: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function ToString: string;
    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
    property Value: string read get_Value;
  end;

  TDNXmlAtomicValue = class(TDNGenericImport<DNXmlAtomicValueClass, DNXmlAtomicValue>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNavigatorClass = interface(DNXPathItemClass)
  ['{ED2BA7FB-0878-504B-988D-16D04F1775E3}']
  { static getter & setter } 

    {class} function get_NavigatorComparer: DDN.mscorlib.DNIEqualityComparer;

  { static propertys } 

    {class} property NavigatorComparer: DDN.mscorlib.DNIEqualityComparer read get_NavigatorComparer;
  end;

  [DNTypeName('System.Xml.XPath.XPathNavigator')]
  DNXPathNavigator = interface(DNXPathItem)
  ['{BE86B874-6C3C-3FC2-A6B3-4DA73CA20540}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_NameTable: DNXmlNameTable;
    function get_NodeType: DNXPathNodeType;
    function get_LocalName: string;
    function get_Name: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_XmlLang: string;
    function get_UnderlyingObject: DDN.mscorlib.DNObject;
    function get_HasAttributes: Boolean;
    function get_HasChildren: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_CanEdit: Boolean;
    function get_OuterXml: string;
    procedure set_OuterXml(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;

  { methods } 

    function ToString: string;
    procedure SetValue(value: string);
    procedure SetTypedValue(typedValue: DDN.mscorlib.DNObject);
    function ValueAs(returnType: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function CreateNavigator: DNXPathNavigator;
    function ReadSubtree: DNXmlReader;
    procedure WriteSubtree(writer: DNXmlWriter);
    function GetAttribute(localName: string; namespaceURI: string): string;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean;
    function MoveToNamespace(name: string): Boolean;
    function MoveToFirstNamespace: Boolean; overload;
    function MoveToNextNamespace: Boolean; overload;
    function MoveToFirst: Boolean;
    procedure MoveToRoot;
    function MoveToChild(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToChild(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string; &end: DNXPathNavigator): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType; &end: DNXPathNavigator): Boolean; overload;
    function MoveToNext(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToNext(&type: DNXPathNodeType): Boolean; overload;
    function IsDescendant(nav: DNXPathNavigator): Boolean;
    function Compile(xpath: string): DNXPathExpression;
    function SelectSingleNode(xpath: string): DNXPathNavigator; overload;
    function SelectSingleNode(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNavigator; overload;
    function SelectSingleNode(expression: DNXPathExpression): DNXPathNavigator; overload;
    function Select(xpath: string): DNXPathNodeIterator; overload;
    function Select(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNodeIterator; overload;
    function Select(expr: DNXPathExpression): DNXPathNodeIterator; overload;
    function Evaluate(xpath: string): DDN.mscorlib.DNObject; overload;
    function Evaluate(xpath: string; resolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression): DDN.mscorlib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression; context: DNXPathNodeIterator): DDN.mscorlib.DNObject; overload;
    function Matches(expr: DNXPathExpression): Boolean; overload;
    function Matches(xpath: string): Boolean; overload;
    function SelectChildren(&type: DNXPathNodeType): DNXPathNodeIterator; overload;
    function SelectChildren(name: string; namespaceURI: string): DNXPathNodeIterator; overload;
    function SelectAncestors(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectAncestors(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function PrependChild: DNXmlWriter; overload;
    function AppendChild: DNXmlWriter; overload;
    function InsertAfter: DNXmlWriter; overload;
    function InsertBefore: DNXmlWriter; overload;
    function CreateAttributes: DNXmlWriter;
    function ReplaceRange(lastSiblingToReplace: DNXPathNavigator): DNXmlWriter;
    procedure ReplaceSelf(newNode: string); overload;
    procedure ReplaceSelf(newNode: DNXmlReader); overload;
    procedure ReplaceSelf(newNode: DNXPathNavigator); overload;
    procedure AppendChild(newChild: string); overload;
    procedure AppendChild(newChild: DNXmlReader); overload;
    procedure AppendChild(newChild: DNXPathNavigator); overload;
    procedure PrependChild(newChild: string); overload;
    procedure PrependChild(newChild: DNXmlReader); overload;
    procedure PrependChild(newChild: DNXPathNavigator); overload;
    procedure InsertBefore(newSibling: string); overload;
    procedure InsertBefore(newSibling: DNXmlReader); overload;
    procedure InsertBefore(newSibling: DNXPathNavigator); overload;
    procedure InsertAfter(newSibling: string); overload;
    procedure InsertAfter(newSibling: DNXmlReader); overload;
    procedure InsertAfter(newSibling: DNXPathNavigator); overload;
    procedure DeleteRange(lastSiblingToDelete: DNXPathNavigator);
    procedure DeleteSelf;
    procedure PrependChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure AppendChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementBefore(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementAfter(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure CreateAttribute(prefix: string; localName: string; namespaceURI: string; value: string);
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceURI: string): string;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Clone: DNXPathNavigator;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function GetNamespace(name: string): string;
    function MoveToFirstNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToNextNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToNext: Boolean; overload;
    function MoveToPrevious: Boolean;
    function MoveToFirstChild: Boolean;
    function MoveToParent: Boolean;
    function MoveTo(other: DNXPathNavigator): Boolean;
    function MoveToId(id: string): Boolean;
    function IsSamePosition(other: DNXPathNavigator): Boolean;
    function ComparePosition(nav: DNXPathNavigator): DNXmlNodeOrder;
    function CheckValidity(schemas: DNXmlSchemaSet; validationEventHandler: DNValidationEventHandler): Boolean;
    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
    property NameTable: DNXmlNameTable read get_NameTable;
    property NodeType: DNXPathNodeType read get_NodeType;
    property LocalName: string read get_LocalName;
    property Name: string read get_Name;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property XmlLang: string read get_XmlLang;
    property UnderlyingObject: DDN.mscorlib.DNObject read get_UnderlyingObject;
    property HasAttributes: Boolean read get_HasAttributes;
    property HasChildren: Boolean read get_HasChildren;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property CanEdit: Boolean read get_CanEdit;
    property OuterXml: string read get_OuterXml write set_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value;
  end;

  TDNXPathNavigator = class(TDNGenericImport<DNXPathNavigatorClass, DNXPathNavigator>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNodeIteratorClass = interface(DNObjectClass)
  ['{D5B45F05-6AFE-58F0-9E23-31308022884E}']
  end;

  [DNTypeName('System.Xml.XPath.XPathNodeIterator')]
  DNXPathNodeIterator = interface(DDN.mscorlib.DNICloneable)
  ['{181EDCFA-EB65-387B-9544-B953DD6A55D0}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;
    function get_CurrentPosition: Int32;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Clone: DNXPathNodeIterator;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
    property CurrentPosition: Int32 read get_CurrentPosition;
    property Count: Int32 read get_Count;
  end;

  TDNXPathNodeIterator = class(TDNGenericImport<DNXPathNodeIteratorClass, DNXPathNodeIterator>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslCompiledTransformClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3595CC68-E00B-51D8-94EE-1BD2B8168423}']
  { constructors } 

    {class} function init: DNXslCompiledTransform; overload;
    {class} function init(enableDebug: Boolean): DNXslCompiledTransform; overload;

  { static methods } 

    {class} function CompileToType(stylesheet: DNXmlReader; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver; debug: Boolean; typeBuilder: DDN.mscorlib.DNTypeBuilder; scriptAssemblyPath: string): DDN.System.DNCompilerErrorCollection;

  end;

  [DNTypeName('System.Xml.Xsl.XslCompiledTransform')]
  DNXslCompiledTransform = interface(DDN.mscorlib.DNObject)
  ['{EE5E8118-D533-33D7-84AE-F1AB3D9651EB}']
  { getters & setters } 

    function get_OutputSettings: DNXmlWriterSettings;
    function get_TemporaryFiles: DDN.System.DNTempFileCollection;

  { methods } 

    procedure Load(stylesheet: DNXmlReader; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNIXPathNavigable; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(stylesheetUri: string; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNXmlReader); overload;
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    procedure Load(stylesheetUri: string); overload;
    procedure Load(compiledStylesheet: DDN.mscorlib.DNType); overload;
    procedure Load(executeMethod: DDN.mscorlib.DNMethodInfo; queryData: TArray<Byte>; earlyBoundTypes: TArray<DDN.mscorlib.DNType>); overload;
    procedure Transform(input: DNIXPathNavigable; results: DNXmlWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNTextWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNStream); overload;
    procedure Transform(input: DNXmlReader; results: DNXmlWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNTextWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNStream); overload;
    procedure Transform(inputUri: string; results: DNXmlWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNTextWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNStream); overload;
    procedure Transform(inputUri: string; resultsFile: string); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OutputSettings: DNXmlWriterSettings read get_OutputSettings;
    property TemporaryFiles: DDN.System.DNTempFileCollection read get_TemporaryFiles;
  end;

  TDNXslCompiledTransform = class(TDNGenericImport<DNXslCompiledTransformClass, DNXslCompiledTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltArgumentListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A43B04C-2118-58C2-AB4B-93CA9511484E}']
  { constructors } 

    {class} function init: DNXsltArgumentList;

  end;

  [DNTypeName('System.Xml.Xsl.XsltArgumentList')]
  DNXsltArgumentList = interface(DDN.mscorlib.DNObject)
  ['{F8EECF4E-8DCE-3B76-9CB2-AE1C08538E80}']
  { events } 

    procedure add_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);
    procedure remove_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);

  { methods } 

    function GetParam(name: string; namespaceUri: string): DDN.mscorlib.DNObject;
    function GetExtensionObject(namespaceUri: string): DDN.mscorlib.DNObject;
    procedure AddParam(name: string; namespaceUri: string; parameter: DDN.mscorlib.DNObject);
    procedure AddExtensionObject(namespaceUri: string; extension: DDN.mscorlib.DNObject);
    function RemoveParam(name: string; namespaceUri: string): DDN.mscorlib.DNObject;
    function RemoveExtensionObject(namespaceUri: string): DDN.mscorlib.DNObject;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXsltArgumentList = class(TDNGenericImport<DNXsltArgumentListClass, DNXsltArgumentList>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslTransformClass = interface(DDN.mscorlib.DNObjectClass)
  ['{97CBD512-0F76-5137-AAA8-2E7AEFC8DCD2}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXslTransform;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Xsl.XslTransform')]
  DNXslTransform = interface(DDN.mscorlib.DNObject)
  ['{3B026707-8328-336A-BE86-9EA3E93B088C}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { methods } 

    procedure Load(url: string); overload;
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList): DNXmlReader; overload;
    procedure Load(stylesheet: DNXmlReader; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNIXPathNavigable; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNXPathNavigator; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNIXPathNavigable; resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence); overload;
    procedure Load(stylesheet: DNXmlReader; resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence); overload;
    procedure Load(stylesheet: DNXPathNavigator; resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence); overload;
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    procedure Transform(inputfile: string; outputfile: string; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNXmlReader); overload;
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    procedure Load(stylesheet: DNXPathNavigator); overload;
    procedure Load(url: string; resolver: DNXmlResolver); overload;
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList): DNXmlReader; overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    procedure Transform(inputfile: string; outputfile: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  TDNXslTransform = class(TDNGenericImport<DNXslTransformClass, DNXslTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6642EC2D-6E5E-5FB5-B919-9D63D7F11804}']
  { static getter & setter } 

    {class} function get_Default: DNXsltSettings;
    {class} function get_TrustedXslt: DNXsltSettings;

  { constructors } 

    {class} function init: DNXsltSettings; overload;
    {class} function init(enableDocumentFunction: Boolean; enableScript: Boolean): DNXsltSettings; overload;

  { static propertys } 

    {class} property &Default: DNXsltSettings read get_Default;
    {class} property TrustedXslt: DNXsltSettings read get_TrustedXslt;
  end;

  [DNTypeName('System.Xml.Xsl.XsltSettings')]
  DNXsltSettings = interface(DDN.mscorlib.DNObject)
  ['{84B60F08-1D49-339A-8375-25B1572C81E1}']
  { getters & setters } 

    function get_EnableDocumentFunction: Boolean;
    procedure set_EnableDocumentFunction(value: Boolean);
    function get_EnableScript: Boolean;
    procedure set_EnableScript(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableDocumentFunction: Boolean read get_EnableDocumentFunction write set_EnableDocumentFunction;
    property EnableScript: Boolean read get_EnableScript write set_EnableScript;
  end;

  TDNXsltSettings = class(TDNGenericImport<DNXsltSettingsClass, DNXsltSettings>) end;


implementation


initialization
  LoadAssemblyModule('System.Xml.dll', True, 'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089');

finalization

end.
