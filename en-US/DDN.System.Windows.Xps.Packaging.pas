//----------------------------------------------------------------------------
//  ReachFramework.dll: ReachFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Windows.Xps.Packaging
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Windows.Xps.Packaging;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.ReachFramework,
  DDN.System,
  DDN.System.Xml,
  DDN.WindowsBase,
  DDN.PresentationFramework,
  DDN.System.Windows.Xps;

type

{ enums }

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Provides values that specify the order in which the major parts of a package are streamed.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.PackageInterleavingOrder')]
  DNPackageInterleavingOrder = type Integer;
  DNPackageInterleavingOrderHelper = record helper for DNPackageInterleavingOrder
  public const
    ///<summary>The streaming order is specified by the packaging system.</summary>
    None = 0;
    ///<summary>The streaming order is: resource, page, document, and document sequence. </summary>
    ResourceFirst = 1;
    ///<summary>The streaming order is: document sequence, document, page, and resource.</summary>
    ResourceLast = 2;
    ///<summary>The streaming order is: resource (other than images), page, document, document sequence, and images.</summary>
    ImagesLast = 3;
  end;


  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Identifies the types of events that occur during the serialization of a package.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.PackagingAction')]
  DNPackagingAction = type Integer;
  DNPackagingActionHelper = record helper for DNPackagingAction
  public const
    ///<summary>No action has been taken.</summary>
    None = 0;
    ///<summary>A document sequence is being added.</summary>
    AddingDocumentSequence = 1;
    ///<summary>A document sequence has been added, but not necessarily committed.</summary>
    DocumentSequenceCompleted = 2;
    ///<summary>A document is being added.</summary>
    AddingFixedDocument = 3;
    ///<summary>A document has been added, but not necessarily committed.</summary>
    FixedDocumentCompleted = 4;
    ///<summary>A page is being added.</summary>
    AddingFixedPage = 5;
    ///<summary>A page has been added, but not necessarily committed.</summary>
    FixedPageCompleted = 6;
    ///<summary>A resource has been added, but not necessarily committed.</summary>
    ResourceAdded = 7;
    ///<summary>A font has been added, but not necessarily committed.</summary>
    FontAdded = 8;
    ///<summary>An image has been added, but not necessarily committed.</summary>
    ImageAdded = 9;
    ///<summary>The document is committed.</summary>
    XpsDocumentCommitted = 10;
  end;


  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Specifies the parts of the XPS <see cref="T:System.IO.Packaging.Package" />
  ///  that are excluded from the range of a digital signature.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions')]
  DNXpsDigSigPartAlteringRestrictions = type Integer;
  DNXpsDigSigPartAlteringRestrictionsHelper = record helper for DNXpsDigSigPartAlteringRestrictions
  public const
    ///<summary>No parts are excluded.</summary>
    None = 0;
    ///<summary>The Core Properties part is excluded.</summary>
    CoreMetadata = 1;
    ///<summary>The Annotations part is excluded.</summary>
    Annotations = 2;
    ///<summary>The Signature Origin part is excluded.</summary>
    SignatureOrigin = 4;
  end;


  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Specifies graphical formats for images that can be included in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsImageType')]
  DNXpsImageType = type Integer;
  DNXpsImageTypeHelper = record helper for DNXpsImageType
  public const
    ///<summary>PNG</summary>
    PngImageType = 0;
    ///<summary>JPEG</summary>
    JpegImageType = 1;
    ///<summary>TIFF</summary>
    TiffImageType = 2;
    ///<summary>WDP</summary>
    WdpImageType = 3;
  end;


  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Specifies whether resources can be shared between pages and documents in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  . </summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsResourceSharing')]
  DNXpsResourceSharing = type Integer;
  DNXpsResourceSharingHelper = record helper for DNXpsResourceSharing
  public const
    ///<summary>The resources can be shared. </summary>
    ShareResources = 0;
    ///<summary>The resources can not be shared. </summary>
    NoResourceSharing = 1;
  end;




type


{ declares }

  DNIDocumentStructureProvider = interface; // type: System.Windows.Xps.Packaging.IDocumentStructureProvider, namespace: System.Windows.Xps.Packaging
  DNIXpsFixedDocumentReader = interface; // type: System.Windows.Xps.Packaging.IXpsFixedDocumentReader, namespace: System.Windows.Xps.Packaging
  DNIXpsFixedDocumentWriter = interface; // type: System.Windows.Xps.Packaging.IXpsFixedDocumentWriter, namespace: System.Windows.Xps.Packaging
  DNIStoryFragmentProvider = interface; // type: System.Windows.Xps.Packaging.IStoryFragmentProvider, namespace: System.Windows.Xps.Packaging
  DNIXpsFixedPageReader = interface; // type: System.Windows.Xps.Packaging.IXpsFixedPageReader, namespace: System.Windows.Xps.Packaging
  DNIXpsFixedPageWriter = interface; // type: System.Windows.Xps.Packaging.IXpsFixedPageWriter, namespace: System.Windows.Xps.Packaging
  DNIXpsFixedDocumentSequenceReader = interface; // type: System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader, namespace: System.Windows.Xps.Packaging
  DNIXpsFixedDocumentSequenceWriter = interface; // type: System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter, namespace: System.Windows.Xps.Packaging
  DNPackagingProgressEventArgs = interface; // type: System.Windows.Xps.Packaging.PackagingProgressEventArgs, namespace: System.Windows.Xps.Packaging
  DNSpotLocation = interface; // type: System.Windows.Xps.Packaging.SpotLocation, namespace: System.Windows.Xps.Packaging
  DNXpsDigitalSignature = interface; // type: System.Windows.Xps.Packaging.XpsDigitalSignature, namespace: System.Windows.Xps.Packaging
  DNXpsPartBase = interface; // type: System.Windows.Xps.Packaging.XpsPartBase, namespace: System.Windows.Xps.Packaging
  DNXpsDocument = interface; // type: System.Windows.Xps.Packaging.XpsDocument, namespace: System.Windows.Xps.Packaging
  DNXpsResource = interface; // type: System.Windows.Xps.Packaging.XpsResource, namespace: System.Windows.Xps.Packaging
  DNXpsColorContext = interface; // type: System.Windows.Xps.Packaging.XpsColorContext, namespace: System.Windows.Xps.Packaging
  DNXpsFont = interface; // type: System.Windows.Xps.Packaging.XpsFont, namespace: System.Windows.Xps.Packaging
  DNXpsImage = interface; // type: System.Windows.Xps.Packaging.XpsImage, namespace: System.Windows.Xps.Packaging
  DNXpsResourceDictionary = interface; // type: System.Windows.Xps.Packaging.XpsResourceDictionary, namespace: System.Windows.Xps.Packaging
  DNXpsStructure = interface; // type: System.Windows.Xps.Packaging.XpsStructure, namespace: System.Windows.Xps.Packaging
  DNXpsThumbnail = interface; // type: System.Windows.Xps.Packaging.XpsThumbnail, namespace: System.Windows.Xps.Packaging
  DNXpsSignatureDefinition = interface; // type: System.Windows.Xps.Packaging.XpsSignatureDefinition, namespace: System.Windows.Xps.Packaging

{ delegates }

  ///<summary>Represents the method that handles the <see cref="E:System.Windows.Xps.Serialization.XpsPackagingPolicy.PackagingProgressEvent" />
  ///  .</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Xps.Packaging.PackagingProgressEventHandler')]
  DNPackagingProgressEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPackagingProgressEventArgs) of object;




{ objects }

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines a method for adding the <see langword="DocumentStructure" />
  ///  part of XML Paper Specification (XPS) to an XPS package.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IDocumentStructureProvider')]
  DNIDocumentStructureProvider = interface(DDN.mscorlib.DNObject)
  ['{203FA96F-CD89-32A0-9DD9-6256F030AFEB}']
  { methods } 

    ///<summary>Adds the<see langword="DocumentStructure" />
    ///  part of XML Paper Specification (XPS) to an XPS package.</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" />
    ///  that represents the <see langword="DocumentStructure" />
    ///  part of an XPS package.</returns>
    function AddDocumentStructure: DNXpsStructure;

  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines methods for reading the parts of a <see cref="T:System.Windows.Documents.FixedDocument" />
  ///  and also for limited types of writing to the document.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IXpsFixedDocumentReader')]
  DNIXpsFixedDocumentReader = interface(DNIDocumentStructureProvider)
  ['{7F79497F-681A-3927-A194-5D182BAA497C}']
  { getters & setters } 

    function get_PrintTicket: DNPrintTicket;
    function get_Uri: DDN.System.DNUri;
    function get_FixedPages: DDN.mscorlib.DNReadOnlyCollection<DNIXpsFixedPageReader>;
    function get_DocumentNumber: Int32;
    function get_SignatureDefinitions: DDN.mscorlib.DNICollection<DNXpsSignatureDefinition>;
    function get_Thumbnail: DNXpsThumbnail;
    function get_DocumentStructure: DNXpsStructure;

  { methods } 

    ///<summary>Gets a reader for the <see cref="T:System.Windows.Documents.FixedPage" />
    ///  with the specified uniform resource identifier (URI). </summary>
    ///  <param name="pageSource">The URI of the page.</param>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.IXpsFixedPageReader" />
    ///  for the page. </returns>
    function GetFixedPage(pageSource: DDN.System.DNUri): DNIXpsFixedPageReader;
    ///<summary>Adds the specified <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" />
    ///  to the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///  <param name="signatureDefinition">The definition that is added.</param>
    procedure AddSignatureDefinition(signatureDefinition: DNXpsSignatureDefinition);
    ///<summary>Removes the specified <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" />
    ///  from the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///  <param name="signatureDefinition">The definition that is removed.</param>
    procedure RemoveSignatureDefinition(signatureDefinition: DNXpsSignatureDefinition);
    ///<summary>Flushes the package <see cref="T:System.IO.Stream" />
    ///  and also commits an <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" />
    ///  to the package.</summary>
    procedure CommitSignatureDefinition;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Printing.PrintTicket" />
    ///  , if one exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Printing.PrintTicket" />
    ///  that contains the default printing options for the document; or <see langword="null" />
    ///  if no print ticket exists for the document. </returns>
    property PrintTicket: DNPrintTicket read get_PrintTicket;
    ///<summary>Gets the uniform resource identifier (URI) of the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  that represents the URI for the document. </returns>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>Gets a collection of <see cref="T:System.Windows.Documents.FixedPage" />
    ///  readers, one reader for each page in the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>A collection of fixed page readers, one reader for each page in the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</returns>
    property FixedPages: DDN.mscorlib.DNReadOnlyCollection<DNIXpsFixedPageReader> read get_FixedPages;
    ///<summary>Gets the zero-based position of the document in the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that represents the document location in the sequence.</returns>
    property DocumentNumber: Int32 read get_DocumentNumber;
    ///<summary>Gets a collection of all the signature definitions that are associated with the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  . </summary>
    ///<returns>An <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  of signature definitions, typically one for every person who signed or will sign the document.</returns>
    property SignatureDefinitions: DDN.mscorlib.DNICollection<DNXpsSignatureDefinition> read get_SignatureDefinitions;
    ///<summary>Gets the thumbnail image, if a thumbnail exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  that represents the image. </returns>
    property Thumbnail: DNXpsThumbnail read get_Thumbnail;
    ///<summary>Gets the <see langword="DocumentStructure" />
    ///  part, if one exists, of the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" />
    ///  that represents the <see langword="DocumentStructure" />
    ///  element, if one exists, and its child elements. </returns>
    property DocumentStructure: DNXpsStructure read get_DocumentStructure;
  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines methods and properties for writing a <see cref="T:System.Windows.Documents.FixedDocument" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IXpsFixedDocumentWriter')]
  DNIXpsFixedDocumentWriter = interface(DNIDocumentStructureProvider)
  ['{8C18E1DE-C862-378E-9271-FA74A0C0EC62}']
  { getters & setters } 

    procedure set_PrintTicket(value: DNPrintTicket);
    function get_Uri: DDN.System.DNUri;
    function get_DocumentNumber: Int32;

  { methods } 

    ///<summary>Adds a new <see cref="T:System.Windows.Documents.FixedPage" />
    ///  to the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>A writer for outputting the new <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</returns>
    function AddFixedPage: DNIXpsFixedPageWriter;
    ///<summary>Adds an <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  image for the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///  <param name="imageType">The image type of the thumbnail to add.</param>
    ///<returns>The new <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  for the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</returns>
    function AddThumbnail(imageType: DNXpsImageType): DNXpsThumbnail;
    ///<summary>Flushes and closes the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  writer.</summary>
    procedure Commit;

  { propertys } 

    ///<summary>Sets default print options for the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    property PrintTicket: DNPrintTicket write set_PrintTicket;
    ///<summary>Gets the URI of the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>The URI of the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</returns>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>Gets the zero-based position of the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  in the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///<returns>The zero-based position of the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  in the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</returns>
    property DocumentNumber: Int32 read get_DocumentNumber;
  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines a method for adding the <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" />
  ///  part of the markup to an XPS package.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IStoryFragmentProvider')]
  DNIStoryFragmentProvider = interface(DDN.mscorlib.DNObject)
  ['{D2A191FE-8A51-3E0A-A47D-6721A2A7B627}']
  { methods } 

    ///<summary>Adds a <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" />
    ///  element to an XPS package.</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" />
    ///  that represents a <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" />
    ///  element in an XPS package.</returns>
    function AddStoryFragment: DNXpsStructure;

  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines methods for reading the parts of a <see cref="T:System.Windows.Documents.FixedPage" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IXpsFixedPageReader')]
  DNIXpsFixedPageReader = interface(DNIStoryFragmentProvider)
  ['{73DF6B41-E629-3D6C-8ECD-6478C63E3350}']
  { getters & setters } 

    function get_PrintTicket: DNPrintTicket;
    function get_Uri: DDN.System.DNUri;
    function get_XmlReader: DDN.System.Xml.DNXmlReader;
    function get_PageNumber: Int32;
    function get_Fonts: DDN.mscorlib.DNICollection<DNXpsFont>;
    function get_ColorContexts: DDN.mscorlib.DNICollection<DNXpsColorContext>;
    function get_ResourceDictionaries: DDN.mscorlib.DNICollection<DNXpsResourceDictionary>;
    function get_Images: DDN.mscorlib.DNICollection<DNXpsImage>;
    function get_Thumbnail: DNXpsThumbnail;
    function get_StoryFragment: DNXpsStructure;

  { methods } 

    ///<summary>Gets the resource that has the specified uniform resource identifier (URI).</summary>
    ///  <param name="resourceUri">The URI of the resource.</param>
    ///<returns>The resource that has the specified Uri.</returns>
    function GetResource(resourceUri: DDN.System.DNUri): DNXpsResource;
    ///<summary>Gets the font that has the specified uniform resource identifier (URI).</summary>
    ///  <param name="uri">The URI of the font.</param>
    ///<returns>The font that has the specified Uri.</returns>
    function GetFont(uri: DDN.System.DNUri): DNXpsFont;
    ///<summary>Gets the color context for the resource that has the specified uniform resource identifier (URI).</summary>
    ///  <param name="uri">The URI of the resource.</param>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />
    ///  .</returns>
    function GetColorContext(uri: DDN.System.DNUri): DNXpsColorContext;
    ///<summary>Gets the resource dictionary that has the specified uniform resource identifier (URI).</summary>
    ///  <param name="uri">The URI of the resource dictionary.</param>
    ///<returns>The resource dictionary that has the specified Uri.</returns>
    function GetResourceDictionary(uri: DDN.System.DNUri): DNXpsResourceDictionary;
    ///<summary>Gets the image that has the specified uniform resource identifier (URI).</summary>
    ///  <param name="uri">The URI of the image.</param>
    ///<returns>The image that has the specified Uri.</returns>
    function GetImage(uri: DDN.System.DNUri): DNXpsImage;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Printing.PrintTicket" />
    ///  , if a ticket exists, that is associated with the <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Printing.PrintTicket" />
    ///  that contains the default printing options for the page; or <see langword="null" />
    ///  if no <see cref="T:System.Printing.PrintTicket" />
    ///  exists for the page.</returns>
    property PrintTicket: DNPrintTicket read get_PrintTicket;
    ///<summary>Gets the uniform resource identifier (URI) of the <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  that represents the URI for the page.</returns>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>Gets an <see cref="T:System.Xml.XmlReader" />
    ///  for the page.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlReader" />
    ///  for the page.</returns>
    property XmlReader: DDN.System.Xml.DNXmlReader read get_XmlReader;
    ///<summary>Gets the page number.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that represents the page number.</returns>
    property PageNumber: Int32 read get_PageNumber;
    ///<summary>Gets a collection of all the fonts that are used on the page.</summary>
    ///<returns>An <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  that includes every <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  that is on the page.</returns>
    property Fonts: DDN.mscorlib.DNICollection<DNXpsFont> read get_Fonts;
    ///<summary>Gets a collection of all the color contexts on the page. </summary>
    ///<returns>An <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  that includes every <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />
    ///  that is on the page.</returns>
    property ColorContexts: DDN.mscorlib.DNICollection<DNXpsColorContext> read get_ColorContexts;
    ///<summary>Gets a collection of all the resource dictionaries for the page.</summary>
    ///<returns>An <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  of <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  objects.</returns>
    property ResourceDictionaries: DDN.mscorlib.DNICollection<DNXpsResourceDictionary> read get_ResourceDictionaries;
    ///<summary>Gets a collection of all the images on the page.</summary>
    ///<returns>An <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  that includes every <see cref="T:System.Windows.Xps.Packaging.XpsImage" />
    ///  that is on the page.</returns>
    property Images: DDN.mscorlib.DNICollection<DNXpsImage> read get_Images;
    ///<summary>Gets the thumbnail image, if a thumbnail exists, that is associated with the <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  that represents the image.</returns>
    property Thumbnail: DNXpsThumbnail read get_Thumbnail;
    ///<summary>Gets the <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" />
    ///  part of the markup of an XPS package.</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsStructure" />
    ///  that represents a <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" />
    ///  element in an XPS package.</returns>
    property StoryFragment: DNXpsStructure read get_StoryFragment;
  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines methods for writing <see cref="T:System.Windows.Documents.FixedPage" />
  ///  parts to an XPS document.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IXpsFixedPageWriter')]
  DNIXpsFixedPageWriter = interface(DNIStoryFragmentProvider)
  ['{EB5C89C5-4FD3-3B85-A1BF-75C51A6683A8}']
  { getters & setters } 

    procedure set_PrintTicket(value: DNPrintTicket);
    function get_Uri: DDN.System.DNUri;
    function get_XmlWriter: DDN.System.Xml.DNXmlWriter;
    function get_PageNumber: Int32;
    function get_LinkTargetStream: DDN.mscorlib.DNIList<string>;

  { methods } 

    ///<summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsResource" />
    ///  to the current page.</summary>
    ///  <param name="resourceType">The type of resource to add.</param>
    ///  <param name="resourceUri">The absolute path of the resource to add, or <see langword="null" />
    ///  .</param>
    ///<returns>The new XML Paper Specification (XPS) resource that was added.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="resourceType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception><exception cref="T:System.ArgumentException"><paramref name="resourceType" />
    ///  is an empty string.</exception>
    function AddResource(resourceType: DDN.mscorlib.DNType; resourceUri: DDN.System.DNUri): DNXpsResource;
    ///<summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  to the current page.</summary>
    ///<returns>The new font resource that was added.</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception>
    function AddFont: DNXpsFont; overload;
    ///<summary>Adds a new obfuscated <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  to the current page.</summary>
    ///  <param name="obfuscate"><see langword="true" />
    ///  to obfuscate the font; otherwise, <see langword="false" />
    ///  .</param>
    ///<returns>The new font resource that was added.</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception>
    function AddFont(obfuscate: Boolean): DNXpsFont; overload;
    ///<summary>Adds a new obfuscated or restricted <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  to the current page.</summary>
    ///  <param name="obfuscate"><see langword="true" />
    ///  to obfuscate the font; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="addRestrictedRelationship"><see langword="true" />
    ///  to prevent modification of any text that uses the font; otherwise, <see langword="false" />
    ///  .</param>
    ///<returns>The new font resource that was added.</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception>
    function AddFont(obfuscate: Boolean; addRestrictedRelationship: Boolean): DNXpsFont; overload;
    ///<summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />
    ///  to the current page.</summary>
    ///<returns>The new color context resource that was added.</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception>
    function AddColorContext: DNXpsColorContext;
    ///<summary>Adds a <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  to the page.</summary>
    ///<returns>The <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  that was added to the page.</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception>
    function AddResourceDictionary: DNXpsResourceDictionary;
    ///<summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsImage" />
    ///  with a specified MIME type to the current page.</summary>
    ///  <param name="mimeType">The MIME type of the image to add.</param>
    ///<returns>The new image resource that was added to the page</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception><exception cref="T:System.ArgumentNullException"><paramref name="mimeType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="mimeType" />
    ///  is an empty string.</exception>
    function AddImage(mimeType: string): DNXpsImage; overload;
    ///<summary>Adds a new <see cref="T:System.Windows.Xps.Packaging.XpsImage" />
    ///  with a specified <see cref="T:System.Windows.Xps.Packaging.XpsImageType" />
    ///  to the current page.</summary>
    ///  <param name="imageType">The type of image to add to the page.</param>
    ///<returns>The new image resource that was added to the page</returns>
    ///<exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception>
    function AddImage(imageType: DNXpsImageType): DNXpsImage; overload;
    ///<summary>Adds a thumbnail image of a specified <see cref="T:System.Windows.Xps.Packaging.XpsImageType" />
    ///  to the current page.</summary>
    ///  <param name="imageType">The image type of the thumbnail image to add to the page.</param>
    ///<returns>The new thumbnail image resource that was added.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="M:System.Windows.Xps.Packaging.IXpsFixedPageWriter.AddThumbnail(System.Windows.Xps.Packaging.XpsImageType)" />
    ///  has already been called to add an image thumbnail for this page.</exception><exception cref="T:System.ObjectDisposedException"><see cref="M:System.IDisposable.Dispose" />
    ///  has been called.</exception>
    function AddThumbnail(imageType: DNXpsImageType): DNXpsThumbnail;
    ///<summary>Flushes and closes the fixed-page writer.</summary>
    procedure Commit;

  { propertys } 

    ///<summary>Sets the default printing options for the page.</summary>
    property PrintTicket: DNPrintTicket write set_PrintTicket;
    ///<summary>Gets the URI of the fixed page.</summary>
    ///<returns>The URI of the fixed page.</returns>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>Gets an <see cref="T:System.Xml.XmlWriter" />
    ///  for writing XML markup to the page. </summary>
    ///<returns>The <see cref="T:System.Xml.XmlWriter" />
    ///  for writing XML markup to the page.</returns>
    property XmlWriter: DDN.System.Xml.DNXmlWriter read get_XmlWriter;
    ///<summary>Gets the zero-based page number of this page.</summary>
    ///<returns>The zero-based page number of this page.</returns>
    property PageNumber: Int32 read get_PageNumber;
    ///<summary>Gets a list of strings that identify the <see cref="T:System.Windows.Documents.LinkTarget" />
    ///  hyperlink points that are contained in the current page.</summary>
    ///<returns>A list of strings that identify the <see cref="T:System.Windows.Documents.LinkTarget" />
    ///  hyperlink points that are contained in the page.</returns>
    property LinkTargetStream: DDN.mscorlib.DNIList<string> read get_LinkTargetStream;
  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines methods for reading the parts of a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader')]
  DNIXpsFixedDocumentSequenceReader = interface(DDN.mscorlib.DNObject)
  ['{B50B7DD3-9AFA-3D8E-9D5A-9FC8F966A01E}']
  { getters & setters } 

    function get_PrintTicket: DNPrintTicket;
    function get_Uri: DDN.System.DNUri;
    function get_FixedDocuments: DDN.mscorlib.DNReadOnlyCollection<DNIXpsFixedDocumentReader>;
    function get_Thumbnail: DNXpsThumbnail;

  { methods } 

    ///<summary>Gets a reader for the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  with the specified uniform resource identifier (URI). </summary>
    ///  <param name="documentSource">The URI of the fixed document.</param>
    function GetFixedDocument(documentSource: DDN.System.DNUri): DNIXpsFixedDocumentReader;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Printing.PrintTicket" />
    ///  , if one exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  . </summary>
    ///<returns>A <see cref="T:System.Printing.PrintTicket" />
    ///  that contains the default printing options for the sequence; or <see langword="null" />
    ///  , if no print ticket exists for the document. </returns>
    property PrintTicket: DNPrintTicket read get_PrintTicket;
    ///<summary>Gets the uniform resource identifier (URI) of the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  that represents the URI for the sequence.</returns>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>Gets a collection of <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  readers for each document in a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///<returns>A collection of <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  readers, one for each document in a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</returns>
    property FixedDocuments: DDN.mscorlib.DNReadOnlyCollection<DNIXpsFixedDocumentReader> read get_FixedDocuments;
    ///<summary>Gets the thumbnail image, if one exists, that is associated with the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  that represents the image. </returns>
    property Thumbnail: DNXpsThumbnail read get_Thumbnail;
  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  ///<summary>Defines methods and properties for writing a <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter')]
  DNIXpsFixedDocumentSequenceWriter = interface(DDN.mscorlib.DNObject)
  ['{F7FC1CBE-CB1C-359C-A1C2-320A3C4CF193}']
  { getters & setters } 

    procedure set_PrintTicket(value: DNPrintTicket);
    function get_Uri: DDN.System.DNUri;

  { methods } 

    ///<summary>Adds a new <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  to the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///<returns>A writer for outputting the new <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</returns>
    function AddFixedDocument: DNIXpsFixedDocumentWriter;
    ///<summary>Adds an <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  image for the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///  <param name="imageType">The image type to write. See Remarks for examples.</param>
    ///<returns>The new <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  for the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</returns>
    function AddThumbnail(imageType: DNXpsImageType): DNXpsThumbnail;
    ///<summary>Flushes and closes the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  writer.</summary>
    procedure Commit;

  { propertys } 

    ///<summary>Sets a <see cref="T:System.Printing.PrintTicket" />
    ///  for the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  that is being written.</summary>
    ///<returns>A <see cref="T:System.Printing.PrintTicket" />
    ///  that represents a default printing configuration for the sequence.</returns>
    property PrintTicket: DNPrintTicket write set_PrintTicket;
    ///<summary>Gets the URI of the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  that is being written.</summary>
    ///<returns>The URI of the <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  that is being written.</returns>
    property Uri: DDN.System.DNUri read get_Uri;
  end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNPackagingProgressEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{0A8EAD63-8814-5673-90CE-B820D43F5BAD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.PackagingProgressEventArgs" />
    ///  class. </summary>
    ///  <param name="action">The action that the packaging process is currently performing.</param>
    ///  <param name="numberCompleted">The number of simultaneous times that the specified <paramref name="action" />
    ///  occurred. </param>
    {class} function init(action: DNPackagingAction; numberCompleted: Int32): DNPackagingProgressEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Windows.Xps.Serialization.XpsPackagingPolicy.PackagingProgressEvent" />
  ///  event. </summary>
  [DNTypeName('System.Windows.Xps.Packaging.PackagingProgressEventArgs')]
  DNPackagingProgressEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{233B9183-19E2-313B-A5FD-B74E5EA79939}']
  { getters & setters } 

    function get_NumberCompleted: Int32;
    function get_Action: DNPackagingAction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of simultaneous times that the action that is identified in <see cref="P:System.Windows.Xps.Packaging.PackagingProgressEventArgs.Action" />
    ///  has occurred. </summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that represents the number of simultaneous times that the action that is identified in <see cref="P:System.Windows.Xps.Packaging.PackagingProgressEventArgs.Action" />
    ///  has occurred. </returns>
    property NumberCompleted: Int32 read get_NumberCompleted;
    ///<summary>Gets a value that indicates what action is currently occurring in the packaging process. </summary>
    ///<returns>A <see cref="T:System.Windows.Xps.Packaging.PackagingAction" />
    ///  that represents the part of the packaging process that is currently occurring.</returns>
    property Action: DNPackagingAction read get_Action;
  end;

  TDNPackagingProgressEventArgs = class(TDNGenericImport<DNPackagingProgressEventArgsClass, DNPackagingProgressEventArgs>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNSpotLocationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CBED954D-DB52-5D7E-A1FE-F9CE2BA0E416}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.SpotLocation" />
    ///  class. </summary>
    {class} function init: DNSpotLocation;

  end;

  ///<summary>Represents the location to display a digital signature on an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.SpotLocation')]
  DNSpotLocation = interface(DDN.mscorlib.DNObject)
  ['{B9426D34-FBA6-313A-A277-89D928073EEF}']
  { getters & setters } 

    function get_PageUri: DDN.System.DNUri;
    procedure set_PageUri(value: DDN.System.DNUri);
    function get_StartX: Double;
    procedure set_StartX(value: Double);
    function get_StartY: Double;
    procedure set_StartY(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URI of the page on which to display the digital signature.</summary>
    ///<returns>The URI of the page on which to display the signature.</returns>
    property PageUri: DDN.System.DNUri read get_PageUri write set_PageUri;
    ///<summary>Gets or sets the X page coordinate for the digital signature.</summary>
    ///<returns>The X page coordinate for the digital signature.</returns>
    property StartX: Double read get_StartX write set_StartX;
    ///<summary>Gets or sets the Y page coordinate for the digital signature.</summary>
    ///<returns>The Y page coordinate for the digital signature.</returns>
    property StartY: Double read get_StartY write set_StartY;
  end;

  TDNSpotLocation = class(TDNGenericImport<DNSpotLocationClass, DNSpotLocation>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EA68D8B-DA78-576F-A927-7B71389C5580}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" />
    ///  class.</summary>
    ///  <param name="packageSignature">The associated digital signature for the package.</param>
    ///  <param name="package">The associated package.</param>
    {class} function init(packageSignature: DDN.WindowsBase.DNPackageDigitalSignature; &package: DNXpsDocument): DNXpsDigitalSignature;

  { static methods } 

    ///<summary>Verifies the specified X.509 certificate.</summary>
    ///  <param name="certificate">A certificate of authenticity.</param>
    ///<returns>A bitwise combination of the enumeration values that specify the result of the verification attempt.</returns>
    {class} function VerifyCertificate(certificate: DDN.mscorlib.DNX509Certificate): DDN.System.DNX509ChainStatusFlags; overload;

  end;

  ///<summary>Represents a digital signature for an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  . </summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsDigitalSignature')]
  DNXpsDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{FDAC0C74-79B6-3D77-ABCF-0E1023C2B7E6}']
  { getters & setters } 

    function get_SignedDocumentSequence: DNIXpsFixedDocumentSequenceReader;
    function get_SignatureOriginRestricted: Boolean;
    function get_DocumentPropertiesRestricted: Boolean;
    function get_Id: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_SignerCertificate: DDN.mscorlib.DNX509Certificate;
    function get_SigningTime: DDN.mscorlib.DNDateTime;
    function get_SignatureValue: TArray<Byte>;
    function get_SignatureType: string;
    function get_IsCertificateAvailable: Boolean;

  { methods } 

    ///<summary>Verifies the document digital signature against the X.509 certificate embedded in the XPS <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.IO.Packaging.VerifyResult" />
    ///  enumeration values that specify the result of the verification attempt.</returns>
    function Verify: DDN.WindowsBase.DNVerifyResult; overload;
    ///<summary>Verifies the document digital signature against a specified X.509 certificate.</summary>
    ///  <param name="certificate">The certificate of authenticity for the signer.</param>
    ///<returns>One of the <see cref="T:System.IO.Packaging.VerifyResult" />
    ///  enumeration values that specify the result of the verification attempt.</returns>
    function Verify(certificate: DDN.mscorlib.DNX509Certificate): DDN.WindowsBase.DNVerifyResult; overload;
    ///<summary>Verifies the X.509 certificate embedded in the package.</summary>
    ///<returns>A bitwise combination of the enumeration values that specify the result of the verification attempt.</returns>
    function VerifyCertificate: DDN.System.DNX509ChainStatusFlags; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the document sequence reader for the signed document sequence.</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader" />
    ///  ; or <see langword="null" />
    ///  if not all valid XPS parts have been signed in the document.</returns>
    property SignedDocumentSequence: DNIXpsFixedDocumentSequenceReader read get_SignedDocumentSequence;
    ///<summary>Gets a value that indicates whether the digital signature is invalidated if someone else signs the package.</summary>
    ///<returns><see langword="true" />
    ///  if the signature is invalidated if an additional digital signature is applied; otherwise, <see langword="false" />
    ///  . </returns>
    property SignatureOriginRestricted: Boolean read get_SignatureOriginRestricted;
    ///<summary>Gets a value that indicates whether changing the properties of the document invalidates the digital signature. </summary>
    ///<returns><see langword="true" />
    ///  if changing the properties of the document invalidates the signature; otherwise, <see langword="false" />
    ///  . </returns>
    property DocumentPropertiesRestricted: Boolean read get_DocumentPropertiesRestricted;
    ///<summary>Gets the GUID of the signature.</summary>
    ///<returns>The globally unique identifier (GUID) of the signature.</returns>
    property Id: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_Id;
    ///<summary>Gets the X.509 certificate of the signer.</summary>
    ///<returns>The X.509 certificate of the signer; or <see langword="null" />
    ///  when there is no certificate embedded in the document package.</returns>
    property SignerCertificate: DDN.mscorlib.DNX509Certificate read get_SignerCertificate;
    ///<summary>Gets the date and time when the signature was created.</summary>
    ///<returns>The date and time when the pages, document, or document sequence was signed.</returns>
    property SigningTime: DDN.mscorlib.DNDateTime read get_SigningTime;
    ///<summary>Gets the encrypted hash value of the signature.</summary>
    ///<returns>A <see cref="T:System.Byte" />
    ///  array that contains the encrypted hash value of the signature.</returns>
    property SignatureValue: TArray<Byte> read get_SignatureValue;
    ///<summary>Gets a URL string that identifies the signature type.</summary>
    ///<returns>A URL string that identifies the signature type. The default signature type is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
    ///  .</returns>
    property SignatureType: string read get_SignatureType;
    ///<summary>Gets a value that indicates whether the signer's X.509 certificate is contained in the document <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the X.509 certificate of the signer is embedded in the document <see cref="T:System.IO.Packaging.Package" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    property IsCertificateAvailable: Boolean read get_IsCertificateAvailable;
  end;

  TDNXpsDigitalSignature = class(TDNGenericImport<DNXpsDigitalSignatureClass, DNXpsDigitalSignature>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsPartBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{271EB636-AC0B-5D60-AA6B-A93290DCBDEE}']
  end;

  ///<summary>Defines the abstract class that is the parent for all part classes that can be contained in an XPS package. </summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsPartBase')]
  DNXpsPartBase = interface(DDN.mscorlib.DNObject)
  ['{A09C3D55-811B-3431-A499-3104C5975EEC}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the uniform resource identifier (URI) of the part.</summary>
    ///<returns>The <see cref="T:System.Uri" />
    ///  for the part.</returns>
    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsPartBase = class(TDNGenericImport<DNXpsPartBaseClass, DNXpsPartBase>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsDocumentClass = interface(DNXpsPartBaseClass)
  ['{28014FA0-1901-5714-86DA-CB6C9CD482C2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  class with access to a specified XML Paper Specification (XPS) <see cref="T:System.IO.Packaging.Package" />
    ///  and default interleaving, resource, and compression options. </summary>
    ///  <param name="package">The target XPS package for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</param>
    {class} function init(&package: DDN.WindowsBase.DNPackage): DNXpsDocument; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  class that is contained in a specified <see cref="T:System.IO.Packaging.Package" />
    ///  with specified default interleaving, resource, and compression options. </summary>
    ///  <param name="package">The target package for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</param>
    ///  <param name="compressionOption">The package compression option.</param>
    {class} function init(&package: DDN.WindowsBase.DNPackage; compressionOption: DDN.WindowsBase.DNCompressionOption): DNXpsDocument; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  class that is contained in a specified <see cref="T:System.IO.Packaging.Package" />
    ///  with the specified default interleaving, resource, and compression options. </summary>
    ///  <param name="package">The target package for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</param>
    ///  <param name="compressionOption">The package compression option.</param>
    ///  <param name="path">The uniform resource identifier (URI) for the document as a string.</param>
    {class} function init(&package: DDN.WindowsBase.DNPackage; compressionOption: DDN.WindowsBase.DNCompressionOption; path: string): DNXpsDocument; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  class that is contained in a specified <see cref="T:System.IO.Packaging.Package" />
    ///  file with default interleaving, resource, and compression options. </summary>
    ///  <param name="path">The path and file name of the target <see cref="T:System.IO.Packaging.Package" />
    ///  for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</param>
    ///  <param name="packageAccess">The file I/O mode in which to open the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</param>
    {class} function init(path: string; packageAccess: DDN.mscorlib.DNFileAccess): DNXpsDocument; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  class that is contained in a specified <see cref="T:System.IO.Packaging.Package" />
    ///  file with default interleaving, resource, and compression options. </summary>
    ///  <param name="path">The path and file name of the target <see cref="T:System.IO.Packaging.Package" />
    ///  for the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</param>
    ///  <param name="packageAccess">The file I/O mode in which to open the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</param>
    ///  <param name="compressionOption">The package compression option.</param>
    {class} function init(path: string; packageAccess: DDN.mscorlib.DNFileAccess; compressionOption: DDN.WindowsBase.DNCompressionOption): DNXpsDocument; overload;

  { static methods } 

    ///<summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" />
    ///  for writing an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</summary>
    ///  <param name="xpsDocument">The XPS document to write. </param>
    ///<returns>The <see cref="T:System.Windows.Xps.XpsDocumentWriter" />
    ///  to use for writing the XML Paper Specification (XPS) document.</returns>
    {class} function CreateXpsDocumentWriter(xpsDocument: DNXpsDocument): DDN.System.Windows.Xps.DNXpsDocumentWriter;

  end;

  ///<summary>Provides a <see cref="T:System.IO.Packaging.Package" />
  ///  that holds the content of an XPS document.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsDocument')]
  DNXpsDocument = interface(DNXpsPartBase)
  ['{9219AAF4-C8B9-33B2-8D20-23F062C34EE6}']
  { getters & setters } 

    function get_IsWriter: Boolean;
    function get_IsReader: Boolean;
    function get_FixedDocumentSequenceReader: DNIXpsFixedDocumentSequenceReader;
    function get_Signatures: DDN.mscorlib.DNReadOnlyCollection<DNXpsDigitalSignature>;
    function get_CoreDocumentProperties: DDN.WindowsBase.DNPackageProperties;
    function get_Thumbnail: DNXpsThumbnail;
    procedure set_Thumbnail(value: DNXpsThumbnail);
    function get_IsSignable: Boolean;
    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Signs a collection of package parts with a specified X.509 certificate.</summary>
    ///  <param name="certificate">The X.509 certificate to use in signing each part; or <see langword="null" />
    ///  to prompt the user to select an installed certificate.</param>
    ///  <param name="embedCertificate"><see langword="true" />
    ///  to store the certificate in the package; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="restrictions">Flags that indicate what dependent parts must be excluded from the signing.</param>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" />
    ///  that contains information about the signature.</returns>
    function SignDigitally(certificate: DDN.mscorlib.DNX509Certificate; embedCertificate: Boolean; restrictions: DNXpsDigSigPartAlteringRestrictions): DNXpsDigitalSignature; overload;
    ///<summary>Adds a root <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  to the package and returns a writer.</summary>
    ///<returns>The XML Paper Specification (XPS) fixed-document sequence writer for this <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</returns>
    function AddFixedDocumentSequence: DNIXpsFixedDocumentSequenceWriter;
    ///<summary>Closes the XPS document <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    procedure Close;
    ///<summary>Signs a collection of package parts by using a specified X.509 certificate.</summary>
    ///  <param name="certificate">The X.509 certificate to use in signing each part; or <see langword="null" />
    ///  to prompt the user to select an installed certificate.</param>
    ///  <param name="embedCertificate"><see langword="true" />
    ///  to store the certificate in the package; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="restrictions">Flags that indicate what dependent parts are excluded from the signing.</param>
    ///  <param name="id">The ID to assign to the signature.</param>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" />
    ///  that contains information about the signature.</returns>
    function SignDigitally(certificate: DDN.mscorlib.DNX509Certificate; embedCertificate: Boolean; restrictions: DNXpsDigSigPartAlteringRestrictions; id: DDN.mscorlib.DNGuid): DNXpsDigitalSignature; overload;
    ///<summary>Signs a collection of package parts with a specified X.509 certificate.</summary>
    ///  <param name="certificate">The X.509 certificate to use in signing each part; or <see langword="null" />
    ///  to prompt the user to select an installed certificate.</param>
    ///  <param name="embedCertificate"><see langword="true" />
    ///  to store the certificate in the package; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="restrictions">Flags that indicate what dependent parts to exclude from the signing.</param>
    ///  <param name="id">The ID to assign to the signature.</param>
    ///  <param name="testIsSignable"><see langword="true" />
    ///  to verify that <see cref="P:System.Windows.Xps.Packaging.XpsDocument.IsSignable" />
    ///  is <see langword="true" />
    ///  before signing; otherwise, <see langword="false" />
    ///  .</param>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" />
    ///  that contains information about the signature.</returns>
    function SignDigitally(certificate: DDN.mscorlib.DNX509Certificate; embedCertificate: Boolean; restrictions: DNXpsDigSigPartAlteringRestrictions; id: DDN.mscorlib.DNGuid; testIsSignable: Boolean): DNXpsDigitalSignature; overload;
    ///<summary>Deletes a signature from the package.</summary>
    ///  <param name="signature">The signature that is deleted.</param>
    procedure RemoveSignature(signature: DNXpsDigitalSignature);
    ///<summary>Adds a thumbnail image to the package. </summary>
    ///  <param name="imageType">The format of the image.</param>
    ///<returns>The newly added <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  . </returns>
    function AddThumbnail(imageType: DNXpsImageType): DNXpsThumbnail;
    ///<summary>Returns the fixed-document sequence at the root of the package.</summary>
    ///<returns>The <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  of the package. </returns>
    function GetFixedDocumentSequence: DDN.PresentationFramework.DNFixedDocumentSequence;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the package is writable. </summary>
    ///<returns><see langword="true" />
    ///  if the package is writable; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWriter: Boolean read get_IsWriter;
    ///<summary>Gets a value that indicates whether the package is readable.</summary>
    ///<returns><see langword="true" />
    ///  if the package is readable; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReader: Boolean read get_IsReader;
    ///<summary>Gets an <see cref="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader" />
    ///  for reading the document.</summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader" />
    ///  for reading the document.</returns>
    property FixedDocumentSequenceReader: DNIXpsFixedDocumentSequenceReader read get_FixedDocumentSequenceReader;
    ///<summary>Gets a collection of XML Paper Specification (XPS) signatures that are associated with the package. </summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" />
    ///  objects that represent the signatures that are associated with the package.</returns>
    property Signatures: DDN.mscorlib.DNReadOnlyCollection<DNXpsDigitalSignature> read get_Signatures;
    ///<summary>Gets the core <see cref="T:System.IO.Packaging.PackageProperties" />
    ///  of the XPS document.</summary>
    ///<returns>The core properties of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///<see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    property CoreDocumentProperties: DDN.WindowsBase.DNPackageProperties read get_CoreDocumentProperties;
    ///<summary>Gets or sets the XML Paper Specification (XPS) thumbnail image that is associated with the document. </summary>
    ///<returns>An <see cref="T:System.Windows.Xps.Packaging.XpsThumbnail" />
    ///  that represents the thumbnail image that is associated with the document. </returns>
    property Thumbnail: DNXpsThumbnail read get_Thumbnail write set_Thumbnail;
    ///<summary>Gets a value that indicates whether the package can be digitally signed.</summary>
    ///<returns><see langword="true" />
    ///  if the package can be signed; otherwise, <see langword="false" />
    ///  . </returns>
    property IsSignable: Boolean read get_IsSignable;
    ///<summary>Gets or sets the uniform resource identifier (URI) of the part.</summary>
    ///<returns>The <see cref="T:System.Uri" />
    ///  for the part.</returns>
    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsDocument = class(TDNGenericImport<DNXpsDocumentClass, DNXpsDocument>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsResourceClass = interface(DNXpsPartBaseClass)
  ['{07BC8B1C-2187-5196-BE0B-8A4F46155E3F}']
  end;

  ///<summary>Defines the base class for resources that can be added to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  . </summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsResource')]
  DNXpsResource = interface(DNXpsPartBase)
  ['{65F817DC-0365-3181-A0F9-EC8B61269E00}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
    ///  <param name="inUri">A starting absolute URI.</param>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the resource that is relative to the specified absolute <paramref name="inUri" />
    ///  .</returns>
    function RelativeUri(inUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
    ///<returns>The <see cref="T:System.IO.Stream" />
    ///  for reading or writing the resource.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    ///<summary>Commits all changes and flushes the resource to the document package.</summary>
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the uniform resource identifier (URI) of the part.</summary>
    ///<returns>The <see cref="T:System.Uri" />
    ///  for the part.</returns>
    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsResource = class(TDNGenericImport<DNXpsResourceClass, DNXpsResource>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsColorContextClass = interface(DNXpsResourceClass)
  ['{41586173-F915-5A14-863B-A4A8D3737485}']
  end;

  ///<summary>Represents the color context for a bitmap image. </summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsColorContext')]
  DNXpsColorContext = interface(DNXpsResource)
  ['{E3FB4321-8845-341E-A481-8F558F468F1E}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
    ///  <param name="inUri">A starting absolute URI.</param>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the resource that is relative to the specified absolute <paramref name="inUri" />
    ///  .</returns>
    function RelativeUri(inUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
    ///<returns>The <see cref="T:System.IO.Stream" />
    ///  for reading or writing the resource.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    ///<summary>Commits all changes and flushes the resource to the document package.</summary>
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsColorContext = class(TDNGenericImport<DNXpsColorContextClass, DNXpsColorContext>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsFontClass = interface(DNXpsResourceClass)
  ['{EE0DE445-06E4-5A07-9970-14F20DDB48AC}']
  { static methods } 

    ///<summary>Obfuscates the font typeface data.</summary>
    ///  <param name="fontData">The typeface data to obfuscate.</param>
    ///  <param name="guid">The globally unique identifier (GUID) to use to obfuscate the <paramref name="fontdata" />
    ///  .</param>
    {class} procedure ObfuscateFontData(fontData: TArray<Byte>; guid: DDN.mscorlib.DNGuid);

  end;

  ///<summary>Represents a font in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsFont')]
  DNXpsFont = interface(DNXpsResource)
  ['{B808A2F1-17CF-3886-92E6-06C07BB28B36}']
  { getters & setters } 

    function get_IsObfuscated: Boolean;
    function get_IsRestricted: Boolean;
    procedure set_IsRestricted(value: Boolean);
    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
    ///  <param name="inUri">A starting absolute URI.</param>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the resource that is relative to the specified absolute <paramref name="inUri" />
    ///  .</returns>
    function RelativeUri(inUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
    ///<returns>The <see cref="T:System.IO.Stream" />
    ///  for reading or writing the resource.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    ///<summary>Commits all changes and flushes the resource to the document package.</summary>
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the font is obfuscated.</summary>
    ///<returns><see langword="true" />
    ///  if the font is obfuscated; otherwise, <see langword="false" />
    ///  .</returns>
    property IsObfuscated: Boolean read get_IsObfuscated;
    ///<summary>Gets or sets a value that indicates whether text that uses this font can be modified.</summary>
    ///<returns><see langword="true" />
    ///  if text that uses this font can be changed or edited; otherwise, <see langword="false" />
    ///  .</returns>
    property IsRestricted: Boolean read get_IsRestricted write set_IsRestricted;
    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsFont = class(TDNGenericImport<DNXpsFontClass, DNXpsFont>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsImageClass = interface(DNXpsResourceClass)
  ['{5E64BB29-16CC-5875-81D2-46A49398309A}']
  end;

  ///<summary>Represents an image in an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsImage')]
  DNXpsImage = interface(DNXpsResource)
  ['{6A1E8953-3031-30D9-AA72-9E37CE3DFCE9}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
    ///  <param name="inUri">A starting absolute URI.</param>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the resource that is relative to the specified absolute <paramref name="inUri" />
    ///  .</returns>
    function RelativeUri(inUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
    ///<returns>The <see cref="T:System.IO.Stream" />
    ///  for reading or writing the resource.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    ///<summary>Commits all changes and flushes the resource to the document package.</summary>
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsImage = class(TDNGenericImport<DNXpsImageClass, DNXpsImage>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsResourceDictionaryClass = interface(DNXpsResourceClass)
  ['{9777BAFC-A0B7-5200-8250-63D64A76695D}']
  end;

  ///<summary>Represents a dictionary of <see cref="T:System.Windows.Xps.Packaging.XpsResource" />
  ///  elements that are usable across pages of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  . </summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsResourceDictionary')]
  DNXpsResourceDictionary = interface(DNXpsResource)
  ['{C0E9A3BA-E97B-32B1-8013-19547F723D45}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
    ///  <param name="inUri">A starting absolute URI.</param>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the resource that is relative to the specified absolute <paramref name="inUri" />
    ///  .</returns>
    function RelativeUri(inUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
    ///<returns>The <see cref="T:System.IO.Stream" />
    ///  for reading or writing the resource.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    ///<summary>Commits all changes and flushes the resource to the document package.</summary>
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsResourceDictionary = class(TDNGenericImport<DNXpsResourceDictionaryClass, DNXpsResourceDictionary>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsStructureClass = interface(DNXpsResourceClass)
  ['{9A89B904-6B9C-57A8-B18D-2BBC38132C11}']
  end;

  ///<summary>Represents the <see cref="N:System.Windows.Documents.DocumentStructures" />
  ///  or <see cref="T:System.Windows.Documents.DocumentStructures.StoryFragments" />
  ///  element of an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  .</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsStructure')]
  DNXpsStructure = interface(DNXpsResource)
  ['{98E1FE76-366E-38A8-B7EC-074C2F54EC45}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
    ///  <param name="inUri">A starting absolute URI.</param>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the resource that is relative to the specified absolute <paramref name="inUri" />
    ///  .</returns>
    function RelativeUri(inUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
    ///<returns>The <see cref="T:System.IO.Stream" />
    ///  for reading or writing the resource.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    ///<summary>Commits all changes and flushes the resource to the document package.</summary>
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsStructure = class(TDNGenericImport<DNXpsStructureClass, DNXpsStructure>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsThumbnailClass = interface(DNXpsResourceClass)
  ['{43B0BE5C-873C-590B-A5A1-C230AA5BE77A}']
  end;

  ///<summary>Represents a thumbnail image of a document sequence, single document, or single page.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsThumbnail')]
  DNXpsThumbnail = interface(DNXpsResource)
  ['{61BBC71B-A57A-39C8-BF74-EE0C3F991891}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    procedure set_Uri(value: DDN.System.DNUri);

  { methods } 

    ///<summary>Returns the URI of the resource that is relative to a specified absolute URI.</summary>
    ///  <param name="inUri">A starting absolute URI.</param>
    ///<returns>The <see cref="T:System.Uri" />
    ///  of the resource that is relative to the specified absolute <paramref name="inUri" />
    ///  .</returns>
    function RelativeUri(inUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>When overridden in a derived class, returns the I/O stream for reading or writing the resource.  </summary>
    ///<returns>The <see cref="T:System.IO.Stream" />
    ///  for reading or writing the resource.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    ///<summary>Commits all changes and flushes the resource to the document package.</summary>
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Uri: DDN.System.DNUri read get_Uri write set_Uri;
  end;

  TDNXpsThumbnail = class(TDNGenericImport<DNXpsThumbnailClass, DNXpsThumbnail>) end;

  //-------------namespace: System.Windows.Xps.Packaging----------------
  DNXpsSignatureDefinitionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8DF911BB-34EB-5D1E-A608-A585190F92E7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" />
    ///  class. </summary>
    {class} function init: DNXpsSignatureDefinition;

  end;

  ///<summary>Represents an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  digital signature.</summary>
  [DNTypeName('System.Windows.Xps.Packaging.XpsSignatureDefinition')]
  DNXpsSignatureDefinition = interface(DDN.mscorlib.DNObject)
  ['{C2A02D80-ED50-3A17-B4A3-CFECFE9864E3}']
  { getters & setters } 

    function get_RequestedSigner: string;
    procedure set_RequestedSigner(value: string);
    function get_SpotLocation: DNSpotLocation;
    procedure set_SpotLocation(value: DNSpotLocation);
    function get_Intent: string;
    procedure set_Intent(value: string);
    function get_SignBy: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    procedure set_SignBy(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>);
    function get_SigningLocale: string;
    procedure set_SigningLocale(value: string);
    function get_SpotId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    procedure set_SpotId(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>);
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);
    function get_HasBeenModified: Boolean;
    procedure set_HasBeenModified(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the identity of the person who is requested to sign (or has signed) the package. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the signer, for example, "Mary Jones, Marketing Dept." The default value is <see langword="null" />
    ///  .</returns>
    property RequestedSigner: string read get_RequestedSigner write set_RequestedSigner;
    ///<summary>Gets or sets the location that specifies where to display the visible digital signature in an XML Paper Specification (XPS) document.</summary>
    ///<returns>A <see cref="T:System.Windows.Xps.Packaging.SpotLocation" />
    ///  that represents the location in the package where a visible request for a signature appears. The default value is <see langword="null" />
    ///  .</returns>
    property SpotLocation: DNSpotLocation read get_SpotLocation write set_SpotLocation;
    ///<summary>Gets or sets the string value of the signature intention agreement that the signer is signing against. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the intention agreement; for example, "I have read and agree." The default value is <see langword="null" />
    ///  .</returns>
    property Intent: string read get_Intent write set_Intent;
    ///<summary>Gets or sets the date and time by which the requested signer must sign the parts of the specified document. </summary>
    ///<returns>A (<see cref="T:System.Nullable" />
    ///  ) <see cref="T:System.DateTime" />
    ///  that represents the deadline by which the signer must sign the package. The default value is <see langword="null" />
    ///  .</returns>
    property SignBy: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_SignBy write set_SignBy;
    ///<summary>Gets or sets the legal jurisdiction where the package is signed. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the jurisdiction, for example, "State of Utah, United States." The default value is <see langword="null" />
    ///  .</returns>
    property SigningLocale: string read get_SigningLocale write set_SigningLocale;
    ///<summary>Gets or sets a unique identifier for this <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" />
    ///  . </summary>
    ///<returns>A (<see cref="T:System.Nullable" />
    ///  ) <see cref="T:System.Guid" />
    ///  that represents the ID of the signature definition. The default value is <see langword="null" />
    ///  .</returns>
    property SpotId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_SpotId write set_SpotId;
    ///<summary>Gets or sets the <see cref="T:System.Globalization.CultureInfo" />
    ///  of the signature.</summary>
    ///<returns>The cultural information of the signature.</returns>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
    ///<summary>Gets or sets a value that indicates whether unwritten property changes exist for the <see cref="T:System.Windows.Xps.Packaging.XpsSignatureDefinition" />
    ///  class and must be written to the package's stream. </summary>
    ///<returns><see langword="true" />
    ///  if uncommitted changes exist; otherwise, <see langword="false" />
    ///  . </returns>
    property HasBeenModified: Boolean read get_HasBeenModified write set_HasBeenModified;
  end;

  TDNXpsSignatureDefinition = class(TDNGenericImport<DNXpsSignatureDefinitionClass, DNXpsSignatureDefinition>) end;


implementation

end.
