//----------------------------------------------------------------------------
//  System.Drawing.Primitives.dll: System.Drawing.Primitives, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Drawing.Primitives
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMDRAWINGPRIMITIVES}
unit DDNC.System.Drawing.Primitives;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type

{ enums }

  //-------------namespace: System.Drawing----------------
  [DNTypeName('System.Drawing.KnownColor')]
  DNKnownColor = type Integer;
  DNKnownColorHelper = record helper for DNKnownColor
  public const
    ActiveBorder = 1;
    ActiveCaption = 2;
    ActiveCaptionText = 3;
    AppWorkspace = 4;
    Control = 5;
    ControlDark = 6;
    ControlDarkDark = 7;
    ControlLight = 8;
    ControlLightLight = 9;
    ControlText = 10;
    Desktop = 11;
    GrayText = 12;
    Highlight = 13;
    HighlightText = 14;
    HotTrack = 15;
    InactiveBorder = 16;
    InactiveCaption = 17;
    InactiveCaptionText = 18;
    Info = 19;
    InfoText = 20;
    Menu = 21;
    MenuText = 22;
    ScrollBar = 23;
    Window = 24;
    WindowFrame = 25;
    WindowText = 26;
    Transparent = 27;
    AliceBlue = 28;
    AntiqueWhite = 29;
    Aqua = 30;
    Aquamarine = 31;
    Azure = 32;
    Beige = 33;
    Bisque = 34;
    Black = 35;
    BlanchedAlmond = 36;
    Blue = 37;
    BlueViolet = 38;
    Brown = 39;
    BurlyWood = 40;
    CadetBlue = 41;
    Chartreuse = 42;
    Chocolate = 43;
    Coral = 44;
    CornflowerBlue = 45;
    Cornsilk = 46;
    Crimson = 47;
    Cyan = 48;
    DarkBlue = 49;
    DarkCyan = 50;
    DarkGoldenrod = 51;
    DarkGray = 52;
    DarkGreen = 53;
    DarkKhaki = 54;
    DarkMagenta = 55;
    DarkOliveGreen = 56;
    DarkOrange = 57;
    DarkOrchid = 58;
    DarkRed = 59;
    DarkSalmon = 60;
    DarkSeaGreen = 61;
    DarkSlateBlue = 62;
    DarkSlateGray = 63;
    DarkTurquoise = 64;
    DarkViolet = 65;
    DeepPink = 66;
    DeepSkyBlue = 67;
    DimGray = 68;
    DodgerBlue = 69;
    Firebrick = 70;
    FloralWhite = 71;
    ForestGreen = 72;
    Fuchsia = 73;
    Gainsboro = 74;
    GhostWhite = 75;
    Gold = 76;
    Goldenrod = 77;
    Gray = 78;
    Green = 79;
    GreenYellow = 80;
    Honeydew = 81;
    HotPink = 82;
    IndianRed = 83;
    Indigo = 84;
    Ivory = 85;
    Khaki = 86;
    Lavender = 87;
    LavenderBlush = 88;
    LawnGreen = 89;
    LemonChiffon = 90;
    LightBlue = 91;
    LightCoral = 92;
    LightCyan = 93;
    LightGoldenrodYellow = 94;
    LightGray = 95;
    LightGreen = 96;
    LightPink = 97;
    LightSalmon = 98;
    LightSeaGreen = 99;
    LightSkyBlue = 100;
    LightSlateGray = 101;
    LightSteelBlue = 102;
    LightYellow = 103;
    Lime = 104;
    LimeGreen = 105;
    Linen = 106;
    Magenta = 107;
    Maroon = 108;
    MediumAquamarine = 109;
    MediumBlue = 110;
    MediumOrchid = 111;
    MediumPurple = 112;
    MediumSeaGreen = 113;
    MediumSlateBlue = 114;
    MediumSpringGreen = 115;
    MediumTurquoise = 116;
    MediumVioletRed = 117;
    MidnightBlue = 118;
    MintCream = 119;
    MistyRose = 120;
    Moccasin = 121;
    NavajoWhite = 122;
    Navy = 123;
    OldLace = 124;
    Olive = 125;
    OliveDrab = 126;
    Orange = 127;
    OrangeRed = 128;
    Orchid = 129;
    PaleGoldenrod = 130;
    PaleGreen = 131;
    PaleTurquoise = 132;
    PaleVioletRed = 133;
    PapayaWhip = 134;
    PeachPuff = 135;
    Peru = 136;
    Pink = 137;
    Plum = 138;
    PowderBlue = 139;
    Purple = 140;
    Red = 141;
    RosyBrown = 142;
    RoyalBlue = 143;
    SaddleBrown = 144;
    Salmon = 145;
    SandyBrown = 146;
    SeaGreen = 147;
    SeaShell = 148;
    Sienna = 149;
    Silver = 150;
    SkyBlue = 151;
    SlateBlue = 152;
    SlateGray = 153;
    Snow = 154;
    SpringGreen = 155;
    SteelBlue = 156;
    Tan = 157;
    Teal = 158;
    Thistle = 159;
    Tomato = 160;
    Turquoise = 161;
    Violet = 162;
    Wheat = 163;
    White = 164;
    WhiteSmoke = 165;
    Yellow = 166;
    YellowGreen = 167;
    ButtonFace = 168;
    ButtonHighlight = 169;
    ButtonShadow = 170;
    GradientActiveCaption = 171;
    GradientInactiveCaption = 172;
    MenuBar = 173;
    MenuHighlight = 174;
  end;




type


{ declares }

  DNColor = interface; // type: System.Drawing.Color, namespace: System.Drawing
  DNPoint = interface; // type: System.Drawing.Point, namespace: System.Drawing
  DNPointF = interface; // type: System.Drawing.PointF, namespace: System.Drawing
  DNRectangle = interface; // type: System.Drawing.Rectangle, namespace: System.Drawing
  DNRectangleF = interface; // type: System.Drawing.RectangleF, namespace: System.Drawing
  DNSize = interface; // type: System.Drawing.Size, namespace: System.Drawing
  DNSizeF = interface; // type: System.Drawing.SizeF, namespace: System.Drawing


{ objects }

  //-------------namespace: System.Drawing----------------
  DNColorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CB2E9510-7CF8-5396-B843-6168A8F8CE57}']
  { static getter & setter } 

    {class} function get_Transparent: DNColor;
    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNColor;

  { static fields } 

    {class} property Empty: DNColor read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromArgb(argb: Int32): DNColor; overload;
    {class} function FromArgb(alpha: Int32; red: Int32; green: Int32; blue: Int32): DNColor; overload;
    {class} function FromArgb(alpha: Int32; baseColor: DNColor): DNColor; overload;
    {class} function FromArgb(red: Int32; green: Int32; blue: Int32): DNColor; overload;
    {class} function FromKnownColor(color: DNKnownColor): DNColor;
    {class} function FromName(name: string): DNColor;

  { static propertys } 

    {class} property Transparent: DNColor read get_Transparent;
    {class} property AliceBlue: DNColor read get_AliceBlue;
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    {class} property Aqua: DNColor read get_Aqua;
    {class} property Aquamarine: DNColor read get_Aquamarine;
    {class} property Azure: DNColor read get_Azure;
    {class} property Beige: DNColor read get_Beige;
    {class} property Bisque: DNColor read get_Bisque;
    {class} property Black: DNColor read get_Black;
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    {class} property Blue: DNColor read get_Blue;
    {class} property BlueViolet: DNColor read get_BlueViolet;
    {class} property Brown: DNColor read get_Brown;
    {class} property BurlyWood: DNColor read get_BurlyWood;
    {class} property CadetBlue: DNColor read get_CadetBlue;
    {class} property Chartreuse: DNColor read get_Chartreuse;
    {class} property Chocolate: DNColor read get_Chocolate;
    {class} property Coral: DNColor read get_Coral;
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    {class} property Cornsilk: DNColor read get_Cornsilk;
    {class} property Crimson: DNColor read get_Crimson;
    {class} property Cyan: DNColor read get_Cyan;
    {class} property DarkBlue: DNColor read get_DarkBlue;
    {class} property DarkCyan: DNColor read get_DarkCyan;
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    {class} property DarkGray: DNColor read get_DarkGray;
    {class} property DarkGreen: DNColor read get_DarkGreen;
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    {class} property DarkOrange: DNColor read get_DarkOrange;
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    {class} property DarkRed: DNColor read get_DarkRed;
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    {class} property DarkViolet: DNColor read get_DarkViolet;
    {class} property DeepPink: DNColor read get_DeepPink;
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    {class} property DimGray: DNColor read get_DimGray;
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    {class} property Firebrick: DNColor read get_Firebrick;
    {class} property FloralWhite: DNColor read get_FloralWhite;
    {class} property ForestGreen: DNColor read get_ForestGreen;
    {class} property Fuchsia: DNColor read get_Fuchsia;
    {class} property Gainsboro: DNColor read get_Gainsboro;
    {class} property GhostWhite: DNColor read get_GhostWhite;
    {class} property Gold: DNColor read get_Gold;
    {class} property Goldenrod: DNColor read get_Goldenrod;
    {class} property Gray: DNColor read get_Gray;
    {class} property Green: DNColor read get_Green;
    {class} property GreenYellow: DNColor read get_GreenYellow;
    {class} property Honeydew: DNColor read get_Honeydew;
    {class} property HotPink: DNColor read get_HotPink;
    {class} property IndianRed: DNColor read get_IndianRed;
    {class} property Indigo: DNColor read get_Indigo;
    {class} property Ivory: DNColor read get_Ivory;
    {class} property Khaki: DNColor read get_Khaki;
    {class} property Lavender: DNColor read get_Lavender;
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    {class} property LawnGreen: DNColor read get_LawnGreen;
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    {class} property LightBlue: DNColor read get_LightBlue;
    {class} property LightCoral: DNColor read get_LightCoral;
    {class} property LightCyan: DNColor read get_LightCyan;
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    {class} property LightGreen: DNColor read get_LightGreen;
    {class} property LightGray: DNColor read get_LightGray;
    {class} property LightPink: DNColor read get_LightPink;
    {class} property LightSalmon: DNColor read get_LightSalmon;
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    {class} property LightYellow: DNColor read get_LightYellow;
    {class} property Lime: DNColor read get_Lime;
    {class} property LimeGreen: DNColor read get_LimeGreen;
    {class} property Linen: DNColor read get_Linen;
    {class} property Magenta: DNColor read get_Magenta;
    {class} property Maroon: DNColor read get_Maroon;
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    {class} property MediumBlue: DNColor read get_MediumBlue;
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    {class} property MediumPurple: DNColor read get_MediumPurple;
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    {class} property MintCream: DNColor read get_MintCream;
    {class} property MistyRose: DNColor read get_MistyRose;
    {class} property Moccasin: DNColor read get_Moccasin;
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    {class} property Navy: DNColor read get_Navy;
    {class} property OldLace: DNColor read get_OldLace;
    {class} property Olive: DNColor read get_Olive;
    {class} property OliveDrab: DNColor read get_OliveDrab;
    {class} property Orange: DNColor read get_Orange;
    {class} property OrangeRed: DNColor read get_OrangeRed;
    {class} property Orchid: DNColor read get_Orchid;
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    {class} property PaleGreen: DNColor read get_PaleGreen;
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    {class} property PeachPuff: DNColor read get_PeachPuff;
    {class} property Peru: DNColor read get_Peru;
    {class} property Pink: DNColor read get_Pink;
    {class} property Plum: DNColor read get_Plum;
    {class} property PowderBlue: DNColor read get_PowderBlue;
    {class} property Purple: DNColor read get_Purple;
    {class} property Red: DNColor read get_Red;
    {class} property RosyBrown: DNColor read get_RosyBrown;
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    {class} property Salmon: DNColor read get_Salmon;
    {class} property SandyBrown: DNColor read get_SandyBrown;
    {class} property SeaGreen: DNColor read get_SeaGreen;
    {class} property SeaShell: DNColor read get_SeaShell;
    {class} property Sienna: DNColor read get_Sienna;
    {class} property Silver: DNColor read get_Silver;
    {class} property SkyBlue: DNColor read get_SkyBlue;
    {class} property SlateBlue: DNColor read get_SlateBlue;
    {class} property SlateGray: DNColor read get_SlateGray;
    {class} property Snow: DNColor read get_Snow;
    {class} property SpringGreen: DNColor read get_SpringGreen;
    {class} property SteelBlue: DNColor read get_SteelBlue;
    {class} property Tan: DNColor read get_Tan;
    {class} property Teal: DNColor read get_Teal;
    {class} property Thistle: DNColor read get_Thistle;
    {class} property Tomato: DNColor read get_Tomato;
    {class} property Turquoise: DNColor read get_Turquoise;
    {class} property Violet: DNColor read get_Violet;
    {class} property Wheat: DNColor read get_Wheat;
    {class} property White: DNColor read get_White;
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    {class} property Yellow: DNColor read get_Yellow;
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  [DNTypeName('System.Drawing.Color')]
  DNColor = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{66BDF6F9-B992-3288-8685-4E8A458B092C}']
  { getters & setters } 

    function get_R: Byte;
    function get_G: Byte;
    function get_B: Byte;
    function get_A: Byte;
    function get_IsKnownColor: Boolean;
    function get_IsEmpty: Boolean;
    function get_IsNamedColor: Boolean;
    function get_IsSystemColor: Boolean;
    function get_Name: string;

  { methods } 

    function GetBrightness: Single;
    function GetHue: Single;
    function GetSaturation: Single;
    function ToArgb: Int32;
    function ToKnownColor: DNKnownColor;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNColor): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property R: Byte read get_R;
    property G: Byte read get_G;
    property B: Byte read get_B;
    property A: Byte read get_A;
    property IsKnownColor: Boolean read get_IsKnownColor;
    property IsEmpty: Boolean read get_IsEmpty;
    property IsNamedColor: Boolean read get_IsNamedColor;
    property IsSystemColor: Boolean read get_IsSystemColor;
    property Name: string read get_Name;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: System.Drawing----------------
  DNPointClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CFFA3846-F3F5-5749-88B0-B979AE675E50}']
  { constructors } 

    {class} function init(x: Int32; y: Int32): DNPoint; overload;
    {class} function init(sz: DNSize): DNPoint; overload;
    {class} function init(dw: Int32): DNPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPoint;

  { static fields } 

    {class} property Empty: DNPoint read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(pt: DNPoint; sz: DNSize): DNPoint;
    {class} function Subtract(pt: DNPoint; sz: DNSize): DNPoint;
    {class} function Ceiling(value: DNPointF): DNPoint;
    {class} function Truncate(value: DNPointF): DNPoint;
    {class} function Round(value: DNPointF): DNPoint;

  end;

  [DNTypeName('System.Drawing.Point')]
  DNPoint = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3FFA46DD-2041-3279-B10E-1AF5C94A6B1F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNPoint): Boolean; overload;
    function GetHashCode: Int32;
    procedure Offset(dx: Int32; dy: Int32); overload;
    procedure Offset(p: DNPoint); overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Drawing----------------
  DNPointFClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A15EBAF2-B709-5888-AE31-75125E97E750}']
  { constructors } 

    {class} function init(x: Single; y: Single): DNPointF;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPointF;

  { static fields } 

    {class} property Empty: DNPointF read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(pt: DNPointF; sz: DNSize): DNPointF; overload;
    {class} function Subtract(pt: DNPointF; sz: DNSize): DNPointF; overload;
    {class} function Add(pt: DNPointF; sz: DNSizeF): DNPointF; overload;
    {class} function Subtract(pt: DNPointF; sz: DNSizeF): DNPointF; overload;

  end;

  [DNTypeName('System.Drawing.PointF')]
  DNPointF = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BAE6D0F3-4737-3017-A1EE-2A7CB5A1F5B5}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNPointF): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
  end;

  TDNPointF = class(TDNGenericImport<DNPointFClass, DNPointF>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4FCC3C1E-C10C-55B7-B96E-6F74456091D8}']
  { constructors } 

    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNRectangle; overload;
    {class} function init(location: DNPoint; size: DNSize): DNRectangle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangle;

  { static fields } 

    {class} property Empty: DNRectangle read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromLTRB(left: Int32; top: Int32; right: Int32; bottom: Int32): DNRectangle;
    {class} function Ceiling(value: DNRectangleF): DNRectangle;
    {class} function Truncate(value: DNRectangleF): DNRectangle;
    {class} function Round(value: DNRectangleF): DNRectangle;
    {class} function Inflate(rect: DNRectangle; x: Int32; y: Int32): DNRectangle; overload;
    {class} function Intersect(a: DNRectangle; b: DNRectangle): DNRectangle; overload;
    {class} function Union(a: DNRectangle; b: DNRectangle): DNRectangle;

  end;

  [DNTypeName('System.Drawing.Rectangle')]
  DNRectangle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B744E63F-377A-3303-8967-B67D09A91F81}']
  { getters & setters } 

    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Left: Int32;
    function get_Top: Int32;
    function get_Right: Int32;
    function get_Bottom: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNRectangle): Boolean; overload;
    function &Contains(x: Int32; y: Int32): Boolean; overload;
    function &Contains(pt: DNPoint): Boolean; overload;
    function &Contains(rect: DNRectangle): Boolean; overload;
    function GetHashCode: Int32;
    procedure Inflate(width: Int32; height: Int32); overload;
    procedure Inflate(size: DNSize); overload;
    procedure Intersect(rect: DNRectangle); overload;
    function IntersectsWith(rect: DNRectangle): Boolean;
    procedure Offset(pos: DNPoint); overload;
    procedure Offset(x: Int32; y: Int32); overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Location: DNPoint read get_Location write set_Location;
    property Size: DNSize read get_Size write set_Size;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
    property Left: Int32 read get_Left;
    property Top: Int32 read get_Top;
    property Right: Int32 read get_Right;
    property Bottom: Int32 read get_Bottom;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangle = class(TDNGenericImport<DNRectangleClass, DNRectangle>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleFClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DC157BA5-0C28-587F-B994-54E843022714}']
  { constructors } 

    {class} function init(x: Single; y: Single; width: Single; height: Single): DNRectangleF; overload;
    {class} function init(location: DNPointF; size: DNSizeF): DNRectangleF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangleF;

  { static fields } 

    {class} property Empty: DNRectangleF read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromLTRB(left: Single; top: Single; right: Single; bottom: Single): DNRectangleF;
    {class} function Inflate(rect: DNRectangleF; x: Single; y: Single): DNRectangleF; overload;
    {class} function Intersect(a: DNRectangleF; b: DNRectangleF): DNRectangleF; overload;
    {class} function Union(a: DNRectangleF; b: DNRectangleF): DNRectangleF;

  end;

  [DNTypeName('System.Drawing.RectangleF')]
  DNRectangleF = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BE497D4B-CA08-33FC-B14B-B4483F61B4C1}']
  { getters & setters } 

    function get_Location: DNPointF;
    procedure set_Location(value: DNPointF);
    function get_Size: DNSizeF;
    procedure set_Size(value: DNSizeF);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Left: Single;
    function get_Top: Single;
    function get_Right: Single;
    function get_Bottom: Single;
    function get_IsEmpty: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNRectangleF): Boolean; overload;
    function &Contains(x: Single; y: Single): Boolean; overload;
    function &Contains(pt: DNPointF): Boolean; overload;
    function &Contains(rect: DNRectangleF): Boolean; overload;
    function GetHashCode: Int32;
    procedure Inflate(x: Single; y: Single); overload;
    procedure Inflate(size: DNSizeF); overload;
    procedure Intersect(rect: DNRectangleF); overload;
    function IntersectsWith(rect: DNRectangleF): Boolean;
    procedure Offset(pos: DNPointF); overload;
    procedure Offset(x: Single; y: Single); overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Location: DNPointF read get_Location write set_Location;
    property Size: DNSizeF read get_Size write set_Size;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property Left: Single read get_Left;
    property Top: Single read get_Top;
    property Right: Single read get_Right;
    property Bottom: Single read get_Bottom;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangleF = class(TDNGenericImport<DNRectangleFClass, DNRectangleF>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9ADEA1D0-EAD2-5481-B4F6-D97DA52F3B2C}']
  { constructors } 

    {class} function init(pt: DNPoint): DNSize; overload;
    {class} function init(width: Int32; height: Int32): DNSize; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSize;

  { static fields } 

    {class} property Empty: DNSize read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(sz1: DNSize; sz2: DNSize): DNSize;
    {class} function Ceiling(value: DNSizeF): DNSize;
    {class} function Subtract(sz1: DNSize; sz2: DNSize): DNSize;
    {class} function Truncate(value: DNSizeF): DNSize;
    {class} function Round(value: DNSizeF): DNSize;

  end;

  [DNTypeName('System.Drawing.Size')]
  DNSize = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{01FBB3FF-363C-3CFA-B2B2-10F945560CF5}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNSize): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{37315CF0-1313-528F-8F2C-80DB97C2AAB8}']
  { constructors } 

    {class} function init(size: DNSizeF): DNSizeF; overload;
    {class} function init(pt: DNPointF): DNSizeF; overload;
    {class} function init(width: Single; height: Single): DNSizeF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSizeF;

  { static fields } 

    {class} property Empty: DNSizeF read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Add(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;
    {class} function Subtract(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;

  end;

  [DNTypeName('System.Drawing.SizeF')]
  DNSizeF = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8DA95E18-D998-3C6B-A285-1AF9CD9327DD}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNSizeF): Boolean; overload;
    function GetHashCode: Int32;
    function ToPointF: DNPointF;
    function ToSize: DNSize;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
  end;

  TDNSizeF = class(TDNGenericImport<DNSizeFClass, DNSizeF>) end;


implementation


initialization
  LoadAssemblyModule('System.Drawing.Primitives.dll', True, 'System.Drawing.Primitives, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
