//----------------------------------------------------------------------------
//  ReachFramework.dll: ReachFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Windows.Xps.Serialization
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Windows.Xps.Serialization;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.PresentationCore,
  DDN.System.Xml,
  DDN.PresentationFramework,
  DDN.System.Windows.Xps.Packaging;

type

{ enums }

  //-------------namespace: System.Windows.Xps.Serialization----------------
  ///<summary>Specifies the granularity at which font glyph subsets are saved in an XPS document.</summary>
  [DNTypeName('System.Windows.Xps.Serialization.FontSubsetterCommitPolicies')]
  DNFontSubsetterCommitPolicies = type Integer;
  DNFontSubsetterCommitPoliciesHelper = record helper for DNFontSubsetterCommitPolicies
  public const
    ///<summary>No subsetting.  Store all glyphs for all fonts used in the document.</summary>
    None = 0;
    ///<summary>Store all glyphs that are used in the text by each page.</summary>
    CommitPerPage = 1;
    ///<summary>Store all glyphs that are used in the text by each document.</summary>
    CommitPerDocument = 2;
    ///<summary>Store all glyphs that are used in the text by each document sequence.</summary>
    CommitEntireSequence = 3;
  end;


  //-------------namespace: System.Windows.Xps.Serialization----------------
  ///<summary>Specifies whether a <see cref="T:System.Printing.PrintTicket" />
  ///  applies to an entire sequence of documents, to just one document, or to just one page. </summary>
  [DNTypeName('System.Windows.Xps.Serialization.PrintTicketLevel')]
  DNPrintTicketLevel = type Integer;
  DNPrintTicketLevelHelper = record helper for DNPrintTicketLevel
  public const
    ///<summary>An unknown or unspecified level.</summary>
    None = 0;
    ///<summary>A sequence of documents.</summary>
    FixedDocumentSequencePrintTicket = 1;
    ///<summary>A document.</summary>
    FixedDocumentPrintTicket = 2;
    ///<summary>A page.</summary>
    FixedPagePrintTicket = 3;
  end;


  //-------------namespace: System.Windows.Xps.Serialization----------------
  ///<summary>Do not use. </summary>
  [DNTypeName('System.Windows.Xps.Serialization.SerializationState')]
  DNSerializationState = type Integer;
  DNSerializationStateHelper = record helper for DNSerializationState
  public const
    ///<summary>Do not use.</summary>
    Normal = 0;
    ///<summary>Do not use.</summary>
    Stop = 1;
  end;


  //-------------namespace: System.Windows.Xps.Serialization----------------
  ///<summary>Specifies the scope of a writing progress indicator for XML Paper Specification (XPS) content. </summary>
  [DNTypeName('System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel')]
  DNXpsWritingProgressChangeLevel = type Integer;
  DNXpsWritingProgressChangeLevelHelper = record helper for DNXpsWritingProgressChangeLevel
  public const
    ///<summary>There is no interpretation for the progress value.</summary>
    None = 0;
    ///<summary>An entire sequence of one or more documents.</summary>
    FixedDocumentSequenceWritingProgress = 1;
    ///<summary>A single document.</summary>
    FixedDocumentWritingProgress = 2;
    ///<summary>A single page.</summary>
    FixedPageWritingProgress = 3;
  end;




type


{ declares }

  DNColorTypeConverter = interface; // type: System.Windows.Xps.Serialization.ColorTypeConverter, namespace: System.Windows.Xps.Serialization
  DNFontTypeConverter = interface; // type: System.Windows.Xps.Serialization.FontTypeConverter, namespace: System.Windows.Xps.Serialization
  DNImageSourceTypeConverter = interface; // type: System.Windows.Xps.Serialization.ImageSourceTypeConverter, namespace: System.Windows.Xps.Serialization
  DNXpsSerializationCompletedEventArgs = interface; // type: System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs, namespace: System.Windows.Xps.Serialization
  DNXpsSerializationProgressChangedEventArgs = interface; // type: System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs, namespace: System.Windows.Xps.Serialization
  DNXpsPackagingPolicy = interface; // type: System.Windows.Xps.Serialization.XpsPackagingPolicy, namespace: System.Windows.Xps.Serialization
  DNPackageSerializationManager = interface; // type: System.Windows.Xps.Serialization.PackageSerializationManager, namespace: System.Windows.Xps.Serialization
  DNXpsSerializationManager = interface; // type: System.Windows.Xps.Serialization.XpsSerializationManager, namespace: System.Windows.Xps.Serialization
  DNXpsResourceStream = interface; // type: System.Windows.Xps.Serialization.XpsResourceStream, namespace: System.Windows.Xps.Serialization
  DNXpsSerializerFactory = interface; // type: System.Windows.Xps.Serialization.XpsSerializerFactory, namespace: System.Windows.Xps.Serialization

{ delegates }

  ///<summary>Represents the method that handles the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.XpsSerializationCompleted" />
  ///  event of an <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManagerAsync" />
  ///  . </summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="e">The event data. </param>
  [DNTypeName('System.Windows.Xps.Serialization.XpsSerializationCompletedEventHandler')]
  DNXpsSerializationCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXpsSerializationCompletedEventArgs) of object;

  ///<summary>Represents the method that handles the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationProgressChanged" />
  ///  event of an <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManager" />
  ///  . </summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="e">The event data. </param>
  [DNTypeName('System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventHandler')]
  DNXpsSerializationProgressChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXpsSerializationProgressChangedEventArgs) of object;




{ objects }

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNColorTypeConverterClass = interface(DNObjectClass)
  ['{B3D13AC3-2449-54C6-B5E6-53D04151D105}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.ColorTypeConverter" />
    ///  class.</summary>
    {class} function init: DNColorTypeConverter;

  { static methods } 

    ///<summary>Serializes a <see cref="T:System.Windows.Media.ColorContext" />
    ///  to the XML Paper Specification (XPS) package and returns its uniform resource identifier (URI) as a string.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="colorContext">The object to be serialized.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the URI of the color context.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="colorContext" />
    ///  is <see langword="null" />
    ///  . </exception>
    {class} function SerializeColorContext(context: DDN.mscorlib.DNIServiceProvider; colorContext: DDN.PresentationCore.DNColorContext): string;

  end;

  ///<summary>Provides type converters for converting <see cref="T:System.Windows.Media.Color" />
  ///  objects to and from objects of other types.</summary>
  [DNTypeName('System.Windows.Xps.Serialization.ColorTypeConverter')]
  DNColorTypeConverter = interface(DNObject)
  ['{14C9AAC9-3CD4-3649-B1DD-C1FE174CE0D0}']
  { methods } 

    ///<summary>Returns a value that indicates whether this converter can convert an instance of a specified type to a <see cref="T:System.Windows.Media.Color" />
    ///  .</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="sourceType">The type of object that is a candidate for conversion.</param>
    ///<returns><see langword="true" />
    ///  if objects of the specified type can be converted; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns a value that indicates whether this <see cref="T:System.Windows.Xps.Serialization.ColorTypeConverter" />
    ///  can convert a <see cref="T:System.Windows.Media.Color" />
    ///  to an instance of a specified type.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="destinationType">The type of object that you want to convert a color to.</param>
    ///<returns><see langword="true" />
    ///  if conversion is possible; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts a specified object to a <see cref="T:System.Windows.Media.Color" />
    ///  .</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="culture">The language and culture that are used during the conversion.</param>
    ///  <param name="value">The object that is converted.</param>
    ///<returns>The new <see cref="T:System.Windows.Media.Color" />
    ///  object. </returns>
    ///<exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException">The <paramref name="value" />
    ///  is not a type that can be converted.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Gets a collection of property descriptions for the specified type.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="value">An object of the type for which you need property descriptions.</param>
    ///  <param name="attributes">An array of attributes that filter the returned collection to exclude irrelevant properties.</param>
    ///<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  that contains the property descriptions that are exposed for the component; or <see langword="null" />
    ///  if no property descriptions are returned.</returns>
    ///<exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    ///<summary>Converts a <see cref="T:System.Windows.Media.Color" />
    ///  to an object of the specified type.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="culture">The language and culture that are used during the conversion. </param>
    ///  <param name="value">The object you want to convert.</param>
    ///  <param name="destinationType">The type that <paramref name="value" />
    ///  is converted to.</param>
    ///<returns>The new <see cref="T:System.Object" />
    ///  of the designated type.</returns>
    ///<exception cref="T:System.NotSupportedException">The <paramref name="destinationType" />
    ///  is not a type that <paramref name="value" />
    ///  can be converted to.-or-The <paramref name="culture" />
    ///  is a neutral culture.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorTypeConverter = class(TDNGenericImport<DNColorTypeConverterClass, DNColorTypeConverter>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNFontTypeConverterClass = interface(DNObjectClass)
  ['{02074361-050F-55B7-A19B-EB7BFD5C443A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" />
    ///  class. </summary>
    {class} function init: DNFontTypeConverter;

  end;

  ///<summary>Provides type converters for converting <see cref="T:System.Windows.Media.GlyphRun" />
  ///  objects to and from objects of other types.</summary>
  [DNTypeName('System.Windows.Xps.Serialization.FontTypeConverter')]
  DNFontTypeConverter = interface(DNObject)
  ['{C11E98EF-B5CC-35E7-8046-B02C311B6CB3}']
  { methods } 

    ///<summary>Returns a value that indicates whether this converter can convert an instance of a specified type to a <see cref="T:System.Windows.Media.GlyphRun" />
    ///  .</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="sourceType">The type of object to convert.</param>
    ///<returns><see langword="true" />
    ///  if objects of the specified type can be converted; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns a value that indicates whether this <see cref="T:System.Windows.Xps.Serialization.FontTypeConverter" />
    ///  can convert a <see cref="T:System.Windows.Media.GlyphRun" />
    ///  to an instance of a specified type. </summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="destinationType">The type of object that you want to convert a glyph run to.</param>
    ///<returns><see langword="true" />
    ///  if conversion is possible; otherwise, <see langword="false" />
    ///  .  </returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts a specified object to a <see cref="T:System.Windows.Media.GlyphRun" />
    ///  .</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="culture">The language and culture that are used during the conversion.</param>
    ///  <param name="value">The object that is converted.</param>
    ///<returns>The new <see cref="T:System.Windows.Media.GlyphRun" />
    ///  object. </returns>
    ///<exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException">The <paramref name="value" />
    ///  is not a type that can be converted.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Gets a collection of property descriptions for the specified type.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="value">An object that you need property descriptions for.</param>
    ///  <param name="attributes">An array of attributes that filter the returned collection in order to exclude irrelevant properties.</param>
    ///<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  that contains the property descriptions that are exposed for the component; or <see langword="null" />
    ///  if no property descriptions are returned.</returns>
    ///<exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    ///<summary>Converts a <see cref="T:System.Windows.Media.GlyphRun" />
    ///  to an object of the specified type.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="culture">The language and culture that are used during the conversion. </param>
    ///  <param name="value">The object you want to convert.</param>
    ///  <param name="destinationType">The type that you want <paramref name="value" />
    ///  converted to.</param>
    ///<returns>The new <see cref="T:System.Object" />
    ///  of the designated type. As implemented in this class, this must be a <see cref="T:System.Uri" />
    ///  . It expresses the uniform resource identifier (URI) of the font subset that is used by the <paramref name="value" />
    ///  parameter.</returns>
    ///<exception cref="T:System.NotSupportedException">The <paramref name="destinationType" />
    ///  is not a type that <paramref name="value" />
    ///  can be converted to.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="context" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <paramref name="value" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Windows.Xps.XpsSerializationException">An error occurs when serializing the glyph run.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontTypeConverter = class(TDNGenericImport<DNFontTypeConverterClass, DNFontTypeConverter>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNImageSourceTypeConverterClass = interface(DNObjectClass)
  ['{AA613B50-4599-5C89-87C3-40772B9C0B93}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.ImageSourceTypeConverter" />
    ///  class. </summary>
    {class} function init: DNImageSourceTypeConverter;

  end;

  ///<summary>Provides type converters for converting <see cref="T:System.Windows.Media.Imaging.BitmapSource" />
  ///  objects to and from objects of other types.</summary>
  [DNTypeName('System.Windows.Xps.Serialization.ImageSourceTypeConverter')]
  DNImageSourceTypeConverter = interface(DNObject)
  ['{42592F26-3F39-3DEA-9A7D-EDCC62EB4695}']
  { methods } 

    ///<summary>Returns a value that indicates whether this converter can convert an instance of a specified type to a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />
    ///  .</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="sourceType">The type of object to convert.</param>
    ///<returns><see langword="true" />
    ///  if objects of the specified type can be converted; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns a value that indicates whether this <see cref="T:System.Windows.Xps.Serialization.ImageSourceTypeConverter" />
    ///  can convert a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />
    ///  to an instance of a specified type. </summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="destinationType">The type of object that you want to convert to a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the conversion is possible; otherwise, <see langword="false" />
    ///  .  </returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts a specified object to a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />
    ///  . </summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="culture">The language and culture that are used during the conversion.</param>
    ///  <param name="value">The object that is converted.</param>
    ///<returns>The new <see cref="T:System.Windows.Media.Imaging.BitmapSource" />
    ///  object. </returns>
    ///<exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="value" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException">The <paramref name="value" />
    ///  is not a type that can be converted.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Gets a collection of property descriptions for the specified type.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="value">An object that you need property descriptions for.</param>
    ///  <param name="attributes">An array of attributes that are used to filter the returned collection in order to exclude irrelevant properties.</param>
    ///<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  that contains the property descriptions that are exposed for the component; or <see langword="null" />
    ///  if no property descriptions are returned.</returns>
    ///<exception cref="T:System.NotImplementedException">This method is called from this class instead of from a derived class. </exception>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    ///<summary>Converts a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />
    ///  to an object of the specified type.</summary>
    ///  <param name="context">An object that provides contextual information.</param>
    ///  <param name="culture">The language and culture that are used during the conversion. </param>
    ///  <param name="value">The object that you want to convert.</param>
    ///  <param name="destinationType">The type that you want <paramref name="value" />
    ///  converted to.</param>
    ///<returns>The new <see cref="T:System.Object" />
    ///  of the designated type. As implemented in this class, the object must be a <see cref="T:System.Uri" />
    ///  . The object expresses the uniform resource identifier (URI) of the serialized image. </returns>
    ///<exception cref="T:System.NotSupportedException">The <paramref name="destinationType" />
    ///  is not a type that <paramref name="value" />
    ///  can be converted to.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="context" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <paramref name="value" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Windows.Xps.XpsSerializationException">An error occurs when serializing the image.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageSourceTypeConverter = class(TDNGenericImport<DNImageSourceTypeConverterClass, DNImageSourceTypeConverter>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNXpsSerializationCompletedEventArgsClass = interface(DNObjectClass)
  ['{FC082012-F6EC-50E6-A030-A7CC1C1D829A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs" />
    ///  class. </summary>
    ///  <param name="canceled"><see langword="true" />
    ///  to indicate that the serialization was canceled before completion; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="state">A user-supplied object that provides additional data to the event handler. </param>
    ///  <param name="exception">An exception, if any, that interrupted the serialization operation.</param>
    {class} function init(canceled: Boolean; state: DDN.mscorlib.DNObject; exception: DDN.mscorlib.DNException): DNXpsSerializationCompletedEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManagerAsync.XpsSerializationCompleted" />
  ///  event of an <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManagerAsync" />
  ///  . </summary>
  [DNTypeName('System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs')]
  DNXpsSerializationCompletedEventArgs = interface(DNObject)
  ['{5A25F1C9-4C6F-3FBF-82F7-8357F185739A}']
  { getters & setters } 

    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNXpsSerializationCompletedEventArgs = class(TDNGenericImport<DNXpsSerializationCompletedEventArgsClass, DNXpsSerializationCompletedEventArgs>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNXpsSerializationProgressChangedEventArgsClass = interface(DNObjectClass)
  ['{4B682BD3-1387-5A78-897E-008AED34D5FB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs" />
    ///  class.</summary>
    ///  <param name="writingLevel">A value that specifies whether the change in progress is an additional page completed or an additional document completed.</param>
    ///  <param name="pageNumber">A value that specifies the total number of pages or the number of documents that are serialized at the time of the event.</param>
    ///  <param name="progressPercentage">A value that specifies the percentage of the total serialization job that is complete.</param>
    ///  <param name="userToken">A user-supplied object that provides additional information for the event handler.</param>
    {class} function init(writingLevel: DNXpsWritingProgressChangeLevel; pageNumber: Int32; progressPercentage: Int32; userToken: DDN.mscorlib.DNObject): DNXpsSerializationProgressChangedEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Windows.Xps.Serialization.XpsSerializationManager.XpsSerializationProgressChanged" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs')]
  DNXpsSerializationProgressChangedEventArgs = interface(DNObject)
  ['{95CBDE84-ABCC-38CD-9341-70B7F3BA6602}']
  { getters & setters } 

    function get_WritingLevel: DNXpsWritingProgressChangeLevel;
    function get_PageNumber: Int32;
    function get_ProgressPercentage: Int32;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates the scope of the progress indicator.</summary>
    ///<returns>The scope of the progress indicator.</returns>
    property WritingLevel: DNXpsWritingProgressChangeLevel read get_WritingLevel;
    ///<summary>Gets the number of pages or documents that have been serialized. </summary>
    ///<returns>The total pages or documents have been serialized at the point when the event occurred.</returns>
    property PageNumber: Int32 read get_PageNumber;
    property ProgressPercentage: Int32 read get_ProgressPercentage;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNXpsSerializationProgressChangedEventArgs = class(TDNGenericImport<DNXpsSerializationProgressChangedEventArgsClass, DNXpsSerializationProgressChangedEventArgs>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNXpsPackagingPolicyClass = interface(DNObjectClass)
  ['{CDBA95A1-CA7A-5FE1-9134-6745C551B795}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsPackagingPolicy" />
    ///  class for a specified <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</summary>
    ///  <param name="xpsPackage">The <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  that is associated with this <see cref="T:System.Windows.Xps.Serialization.XpsPackagingPolicy" />
    ///  .</param>
    {class} function init(xpsPackage: DNXpsDocument): DNXpsPackagingPolicy; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsPackagingPolicy" />
    ///  class with a specified <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  and specified interleave order.</summary>
    ///  <param name="xpsPackage">The XML Paper Specification (XPS) document that the packaging policy applies to.</param>
    ///  <param name="interleavingType">The order in which to interleave document elements.</param>
    {class} function init(xpsPackage: DNXpsDocument; interleavingType: DNPackageInterleavingOrder): DNXpsPackagingPolicy; overload;

  end;

  ///<summary>Defines the writer, resource, print ticket, and package relationship settings that are associated with a specified <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  .    </summary>
  [DNTypeName('System.Windows.Xps.Serialization.XpsPackagingPolicy')]
  DNXpsPackagingPolicy = interface(DNObject)
  ['{90CA25D6-E6A0-302A-ADF0-DBDEB52AA61B}']
  { getters & setters } 

    function get_CurrentFixedDocumentUri: DDN.System.DNUri;
    function get_CurrentFixedPageUri: DDN.System.DNUri;

  { events } 

    procedure add_PackagingProgressEvent(value: DNPackagingProgressEventHandler);
    procedure remove_PackagingProgressEvent(value: DNPackagingProgressEventHandler);

  { methods } 

    ///<summary>Acquires the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    ///<returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</returns>
    function AcquireXmlWriterForFixedDocumentSequence: DDN.System.Xml.DNXmlWriter;
    ///<summary>Releases the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  .</summary>
    procedure ReleaseXmlWriterForFixedDocumentSequence;
    ///<summary>Acquires the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    ///<returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</returns>
    function AcquireXmlWriterForFixedDocument: DDN.System.Xml.DNXmlWriter;
    ///<summary>Releases the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  .</summary>
    procedure ReleaseXmlWriterForFixedDocument;
    ///<summary>Acquires the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</summary>
    ///<returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</returns>
    function AcquireXmlWriterForFixedPage: DDN.System.Xml.DNXmlWriter;
    ///<summary>Releases the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</summary>
    procedure ReleaseXmlWriterForFixedPage;
    ///<summary>Acquires the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  for the current <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  .</summary>
    ///<returns>The resource stream for the current <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  .</returns>
    function AcquireResourceStreamForXpsFont: DNXpsResourceStream; overload;
    ///<summary>Acquires the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  for a specified <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  .</summary>
    ///  <param name="resourceId">The identifier of the XML Paper Specification (XPS) font.</param>
    ///<returns>The resource stream for the XML Paper Specification (XPS) font that has the specified <paramref name="resourceId" />
    ///  .</returns>
    function AcquireResourceStreamForXpsFont(resourceId: string): DNXpsResourceStream; overload;
    ///<summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  for the current <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  .</summary>
    procedure ReleaseResourceStreamForXpsFont; overload;
    ///<summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  for a specified <see cref="T:System.Windows.Xps.Packaging.XpsFont" />
    ///  .</summary>
    ///  <param name="resourceId">The identifier of the XML Paper Specification (XPS) font that you want to release.</param>
    procedure ReleaseResourceStreamForXpsFont(resourceId: string); overload;
    ///<summary>Acquires the resource stream for a specified <see cref="T:System.Windows.Xps.Packaging.XpsImage" />
    ///  .</summary>
    ///  <param name="resourceId">The resource identifier of the XML Paper Specification (XPS) image.</param>
    ///<returns>The resource stream for the <see cref="T:System.Windows.Xps.Packaging.XpsImage" />
    ///  that has the specified <paramref name="resourceId" />
    ///  .</returns>
    function AcquireResourceStreamForXpsImage(resourceId: string): DNXpsResourceStream;
    ///<summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  for the current <see cref="T:System.Windows.Xps.Packaging.XpsImage" />
    ///  .</summary>
    procedure ReleaseResourceStreamForXpsImage;
    ///<summary>Acquires the resource stream for a specified <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />
    ///  .</summary>
    ///  <param name="resourceId">The resource identifier of the color context.</param>
    ///<returns>The resource stream for the <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />
    ///  that has the specified <paramref name="resourceId" />
    ///  .</returns>
    function AcquireResourceStreamForXpsColorContext(resourceId: string): DNXpsResourceStream;
    ///<summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  for the current <see cref="T:System.Windows.Xps.Packaging.XpsColorContext" />
    ///  .</summary>
    procedure ReleaseResourceStreamForXpsColorContext;
    ///<summary>Acquires the resource stream for a specified <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  .</summary>
    ///  <param name="resourceId">The identifier of the resource dictionary.</param>
    ///<returns>The XML Paper Specification (XPS) resource stream for the <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  that has the specified <paramref name="resourceId" />
    ///  .</returns>
    function AcquireResourceStreamForXpsResourceDictionary(resourceId: string): DNXpsResourceStream;
    ///<summary>Releases the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  .</summary>
    procedure ReleaseResourceStreamForXpsResourceDictionary;
    ///<summary>Adds a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  with a specified name that associates a specified resource with the current page.</summary>
    ///  <param name="targetUri">The uniform resource identifier (URI) of the resource to associate with the current page.</param>
    ///  <param name="relationshipName">The identifying name of the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  that associates the current page with the specified resource.</param>
    procedure RelateResourceToCurrentPage(targetUri: DDN.System.DNUri; relationshipName: string);
    ///<summary>Stores a specified <see cref="T:System.Printing.PrintTicket" />
    ///  as part of the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    ///  .</summary>
    ///  <param name="printTicket">The print ticket to store as part of the XML Paper Specification (XPS) document.</param>
    procedure PersistPrintTicket(printTicket: DNPrintTicket);
    ///<summary>Acquires the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current page.</summary>
    ///<returns>The XML writer for the current <see cref="T:System.Windows.Documents.FixedPage" />
    ///  .</returns>
    function AcquireXmlWriterForPage: DDN.System.Xml.DNXmlWriter;
    ///<summary>Prepares to commit the current page to the output store.</summary>
    procedure PreCommitCurrentPage;
    ///<summary>Acquires the <see cref="T:System.Xml.XmlWriter" />
    ///  for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  .</summary>
    ///<returns>The XML writer for the current <see cref="T:System.Windows.Xps.Packaging.XpsResourceDictionary" />
    ///  .</returns>
    function AcquireXmlWriterForResourceDictionary: DDN.System.Xml.DNXmlWriter;
    ///<summary>Returns a list of <see cref="P:System.Windows.Documents.PageContent.LinkTargets" />
    ///  for the current page content.</summary>
    ///<returns>The list of <see cref="P:System.Windows.Documents.PageContent.LinkTargets" />
    ///  for the current page content.</returns>
    function AcquireStreamForLinkTargets: DDN.mscorlib.DNIList<string>;
    ///<summary>Adds a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  that associates a restricted font with the current document.</summary>
    ///  <param name="targetUri">The uniform resource identifier (URI) of the restricted font to associate with the current document.</param>
    procedure RelateRestrictedFontToCurrentDocument(targetUri: DDN.System.DNUri);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the uniform resource identifier (URI) of the current fixed document.</summary>
    ///<returns>The URI of the current fixed document.</returns>
    property CurrentFixedDocumentUri: DDN.System.DNUri read get_CurrentFixedDocumentUri;
    ///<summary>Gets the uniform resource identifier (URI) of the current fixed page.</summary>
    ///<returns>The URI of the current fixed page.</returns>
    property CurrentFixedPageUri: DDN.System.DNUri read get_CurrentFixedPageUri;
  end;

  TDNXpsPackagingPolicy = class(TDNGenericImport<DNXpsPackagingPolicyClass, DNXpsPackagingPolicy>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNPackageSerializationManagerClass = interface(DNObjectClass)
  ['{BC389407-9A95-54DB-AF55-DD42520BAA61}']
  end;

  ///<summary>Provides a base class to manage the serializers and type converters that insert Windows Presentation Foundation (WPF) root objects into an XML Paper Specification (XPS) package. </summary>
  [DNTypeName('System.Windows.Xps.Serialization.PackageSerializationManager')]
  DNPackageSerializationManager = interface(DDN.mscorlib.DNIDisposable)
  ['{E433BF8A-D188-3326-B3DA-D72632E40932}']
  { methods } 

    ///<summary>When overridden in a derived class, saves the specified serialized object to an XML Paper Specification (XPS) package.</summary>
    ///  <param name="serializedObject">The object to save.</param>
    procedure SaveAsXaml(serializedObject: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackageSerializationManager = class(TDNGenericImport<DNPackageSerializationManagerClass, DNPackageSerializationManager>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNXpsSerializationManagerClass = interface(DNPackageSerializationManagerClass)
  ['{13CB7F68-157A-5842-9ED4-2FF5D2A26234}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializationManager" />
    ///  class. </summary>
    ///  <param name="packagingPolicy">An object that provides methods for acquiring serialization readers and writers for different parts of an XML Paper Specification (XPS) document.</param>
    ///  <param name="batchMode"><see langword="true" />
    ///  to specify batch mode; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(packagingPolicy: DNBasePackagingPolicy; batchMode: Boolean): DNXpsSerializationManager;

  end;

  ///<summary>Manages synchronous XML Paper Specification (XPS) serializers and type converters. </summary>
  [DNTypeName('System.Windows.Xps.Serialization.XpsSerializationManager')]
  DNXpsSerializationManager = interface(DNPackageSerializationManager)
  ['{D31AC8AA-3FDE-3CDC-8349-52BC476D96C0}']
  { getters & setters } 

    function get_IsBatchMode: Boolean;

  { events } 

    procedure add_XpsSerializationPrintTicketRequired(value: DNXpsSerializationPrintTicketRequiredEventHandler);
    procedure remove_XpsSerializationPrintTicketRequired(value: DNXpsSerializationPrintTicketRequiredEventHandler);
    procedure add_XpsSerializationProgressChanged(value: DNXpsSerializationProgressChangedEventHandler);
    procedure remove_XpsSerializationProgressChanged(value: DNXpsSerializationProgressChangedEventHandler);

  { methods } 

    ///<summary>Commits all changes and writes all buffered data.</summary>
    procedure Commit;
    ///<summary>Sets the granularity at which font-subsetting is performed.</summary>
    ///  <param name="policy">One of the enumeration values that specifies the font-subsetting policy.</param>
    procedure SetFontSubsettingPolicy(policy: DNFontSubsetterCommitPolicies);
    ///<summary>Sets the number of pages or documents to process for font-subsetting.</summary>
    ///  <param name="countPolicy">The number of pages or documents to process at a time for font subsetting.</param>
    procedure SetFontSubsettingCountPolicy(countPolicy: Int32);
    ///<summary>Saves a specified XAML serialized object to the document package.</summary>
    ///  <param name="serializedObject">The XAML serialized object to save.</param>
    procedure SaveAsXaml(serializedObject: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the serialization manager is in batch mode.</summary>
    ///<returns><see langword="true" />
    ///  if the manager is in batch mode; otherwise, <see langword="false" />
    ///  .</returns>
    property IsBatchMode: Boolean read get_IsBatchMode;
  end;

  TDNXpsSerializationManager = class(TDNGenericImport<DNXpsSerializationManagerClass, DNXpsSerializationManager>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNXpsResourceStreamClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE61A2DD-C77F-5DC1-8081-49D37B143364}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  class by using the specified stream and uniform resource identifier (URI).</summary>
    ///  <param name="stream">The stream that contains the resource.</param>
    ///  <param name="uri">The URI of the resource.</param>
    {class} function init(stream: DDN.mscorlib.DNStream; uri: DDN.System.DNUri): DNXpsResourceStream;

  end;

  ///<summary>Represents the stream and uniform resource identifier (URI)  of an XML Paper Specification (XPS) resource. </summary>
  [DNTypeName('System.Windows.Xps.Serialization.XpsResourceStream')]
  DNXpsResourceStream = interface(DDN.mscorlib.DNObject)
  ['{636D76E7-ED06-3584-88AB-09C9A4565D27}']
  { getters & setters } 

    function get_Stream: DDN.mscorlib.DNStream;
    function get_Uri: DDN.System.DNUri;

  { methods } 

    ///<summary>Initializes the <see cref="T:System.IO.Stream" />
    ///  in the <see cref="T:System.Windows.Xps.Serialization.XpsResourceStream" />
    ///  .</summary>
    procedure Initialize;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.IO.Stream" />
    ///  of the resource.</summary>
    ///<returns>A <see cref="T:System.IO.Stream" />
    ///  that contains the XML Paper Specification (XPS) resource. </returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>Gets the <see cref="T:System.Uri" />
    ///  of the resource.</summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  that contains the XML Paper Specification (XPS) resource. </returns>
    property Uri: DDN.System.DNUri read get_Uri;
  end;

  TDNXpsResourceStream = class(TDNGenericImport<DNXpsResourceStreamClass, DNXpsResourceStream>) end;

  //-------------namespace: System.Windows.Xps.Serialization----------------
  DNXpsSerializerFactoryClass = interface(DNObjectClass)
  ['{D458711B-1DBA-59C0-8A9B-D61BDF107D2C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.Serialization.XpsSerializerFactory" />
    ///  class.</summary>
    {class} function init: DNXpsSerializerFactory;

  end;

  ///<summary>Creates and provides information about XML Paper Specification (XPS) serializers.</summary>
  [DNTypeName('System.Windows.Xps.Serialization.XpsSerializerFactory')]
  DNXpsSerializerFactory = interface(DDN.System.Windows.Documents.Serialization.ISerializerFactory.DNISerializerFactory)
  ['{9FC40D44-A3DA-35B1-B05D-D10514FDAB50}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_ManufacturerName: string;
    function get_ManufacturerWebsite: DDN.System.DNUri;
    function get_DefaultFileExtension: string;

  { methods } 

    ///<summary>Creates a <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" />
    ///  that outputs XPS content to a specified <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="stream">The output stream that the returned serializer is to write to.</param>
    ///<returns>An output writer that serializes XPS content to the specified <paramref name="stream" />
    ///  .</returns>
    function CreateSerializerWriter(stream: DDN.mscorlib.DNStream): DDN.PresentationFramework.DNSerializerWriter;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the public name for the serializers that the factory produces.</summary>
    ///<returns>The public name for serializers that the factory produces.</returns>
    property DisplayName: string read get_DisplayName;
    ///<summary>Gets the manufacturer's name for serializers that the factory produces.</summary>
    ///<returns>The manufacturer's name.</returns>
    property ManufacturerName: string read get_ManufacturerName;
    ///<summary>Gets the manufacturer's Web address for serializers that the factory produces.</summary>
    ///<returns>The manufacturer's Web site.</returns>
    property ManufacturerWebsite: DDN.System.DNUri read get_ManufacturerWebsite;
    ///<summary>Gets the standard file name extension for XPS documents.</summary>
    ///<returns>The standard file name extension (including the leading period) for XPS documents.</returns>
    property DefaultFileExtension: string read get_DefaultFileExtension;
  end;

  TDNXpsSerializerFactory = class(TDNGenericImport<DNXpsSerializerFactoryClass, DNXpsSerializerFactory>) end;


implementation

end.
