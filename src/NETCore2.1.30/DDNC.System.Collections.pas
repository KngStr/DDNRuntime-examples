//----------------------------------------------------------------------------
//  System.Collections.dll: System.Collections, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Collections
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMCOLLECTIONS}
unit DDNC.System.Collections;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Runtime;

type


{ declares }

  DNBitArray = interface; // type: System.Collections.BitArray, namespace: System.Collections
  DNCollectionExtensions = interface; // type: System.Collections.Generic.CollectionExtensions, namespace: System.Collections.Generic
  DNSortedDictionary_KeyValuePairComparer<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer, namespace: System.Collections.Generic
  DNHashSet<T> = interface; // type: System.Collections.Generic.HashSet`1, namespace: System.Collections.Generic
  DNLinkedList<T> = interface; // type: System.Collections.Generic.LinkedList`1, namespace: System.Collections.Generic
  DNLinkedListNode<T> = interface; // type: System.Collections.Generic.LinkedListNode`1, namespace: System.Collections.Generic
  DNQueue<T> = interface; // type: System.Collections.Generic.Queue`1, namespace: System.Collections.Generic
  DNSortedDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection, namespace: System.Collections.Generic
  DNSortedList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2, namespace: System.Collections.Generic
  DNSortedList_KeyList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2+KeyList, namespace: System.Collections.Generic
  DNSortedList_ValueList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2+ValueList, namespace: System.Collections.Generic
  DNSortedSet<T> = interface; // type: System.Collections.Generic.SortedSet`1, namespace: System.Collections.Generic
  DNTreeSet<T> = interface; // type: System.Collections.Generic.TreeSet`1, namespace: System.Collections.Generic
  DNStack<T> = interface; // type: System.Collections.Generic.Stack`1, namespace: System.Collections.Generic
  DNStructuralComparisons = interface; // type: System.Collections.StructuralComparisons, namespace: System.Collections
  DNHashSet_Enumerator<T> = interface; // type: System.Collections.Generic.HashSet`1+Enumerator, namespace: System.Collections.Generic
  DNLinkedList_Enumerator<T> = interface; // type: System.Collections.Generic.LinkedList`1+Enumerator, namespace: System.Collections.Generic
  DNQueue_Enumerator<T> = interface; // type: System.Collections.Generic.Queue`1+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedSet_Enumerator<T> = interface; // type: System.Collections.Generic.SortedSet`1+Enumerator, namespace: System.Collections.Generic
  DNStack_Enumerator<T> = interface; // type: System.Collections.Generic.Stack`1+Enumerator, namespace: System.Collections.Generic


{ objects }

  //-------------namespace: System.Collections----------------
  DNBitArrayClass = interface(DNObjectClass)
  ['{4526E747-1648-52A0-B741-3ED53C95B966}']
  { constructors } 

    {class} function init(length: Int32): DNBitArray; overload;
    {class} function init(length: Int32; defaultValue: Boolean): DNBitArray; overload;
    {class} function init(bytes: TArray<Byte>): DNBitArray; overload;
    {class} function init(values: TArray<Boolean>): DNBitArray; overload;
    {class} function init(values: TArray<Int32>): DNBitArray; overload;
    {class} function init(bits: DNBitArray): DNBitArray; overload;

  end;

  [DNTypeName('System.Collections.BitArray')]
  DNBitArray = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{3F241975-4F3B-3480-84FF-A1302683C169}']
  { getters & setters } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Count: Int32;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Get(index: Int32): Boolean;
    procedure &Set(index: Int32; value: Boolean);
    procedure SetAll(value: Boolean);
    function &And(value: DNBitArray): DNBitArray;
    function &Or(value: DNBitArray): DNBitArray;
    function &Xor(value: DNBitArray): DNBitArray;
    function &Not: DNBitArray;
    function RightShift(count: Int32): DNBitArray;
    function LeftShift(count: Int32): DNBitArray;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function Clone: DDNC.System.Private.CoreLib.DNObject;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
    property Length: Int32 read get_Length write set_Length;
    property Count: Int32 read get_Count;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNBitArray = class(TDNGenericImport<DNBitArrayClass, DNBitArray>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNCollectionExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{31659E86-0760-5B3E-A14A-7EE1EA7C92F5}']
  end;

  [DNTypeName('System.Collections.Generic.CollectionExtensions')]
  DNCollectionExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CB226D91-587A-3876-B548-DB39FE42CDCE}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNCollectionExtensions = class(TDNGenericImport<DNCollectionExtensionsClass, DNCollectionExtensions>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyValuePairComparerClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNComparerClass<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>)
  ['{0BCB8C09-6A5B-526A-B629-7C36236FAECF}']
  { constructors } 

    {class} function init(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary_KeyValuePairComparer<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer')]
  DNSortedDictionary_KeyValuePairComparer<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNComparer<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>)
  ['{F66667CD-869F-3EB5-8E1B-402A0C4B1791}']
  { methods } 

    function Compare(x: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>; y: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Int32;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNSortedDictionary_KeyValuePairComparer<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyValuePairComparerClass<TKey, TValue>, DNSortedDictionary_KeyValuePairComparer<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSetClass<T> = interface(DNObjectClass)
  ['{356BE2EF-084F-5C3B-A2A2-5CEADBEF1EF9}']
  { constructors } 

    {class} function init: DNHashSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32): DNHashSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNHashSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>; comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32; comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNHashSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<DNHashSet<T>>;

  end;

  [DNTypeName('System.Collections.Generic.HashSet`1')]
  DNHashSet<T> = interface(DDNC.System.Private.CoreLib.DNICollection<T>)
  ['{D43D894F-D2EE-3B1F-A115-C454ACDE2696}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;

  { methods } 

    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    function GetEnumerator: DNHashSet_Enumerator<T>;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure OnDeserialization(sender: DDNC.System.Private.CoreLib.DNObject);
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function EnsureCapacity(capacity: Int32): Int32;
    procedure TrimExcess;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_Comparer;
  end;

  TDNHashSet<T> = class(TDNGenericImport<DNHashSetClass<T>, DNHashSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListClass<T> = interface(DNObjectClass)
  ['{EF4836D7-8DB9-5533-87DB-E904A47AE909}']
  { constructors } 

    {class} function init: DNLinkedList<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNLinkedList<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1')]
  DNLinkedList<T> = interface(DDNC.System.Private.CoreLib.DNICollection<T>)
  ['{39E4EBC9-EF95-3B14-8002-426D67A9F460}']
  { getters & setters } 

    function get_Count: Int32;
    function get_First: DNLinkedListNode<T>;
    function get_Last: DNLinkedListNode<T>;

  { methods } 

    function AddAfter(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    procedure AddAfter(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    function AddBefore(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    procedure AddBefore(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    function AddFirst(value: T): DNLinkedListNode<T>; overload;
    procedure AddFirst(node: DNLinkedListNode<T>); overload;
    function AddLast(value: T): DNLinkedListNode<T>; overload;
    procedure AddLast(node: DNLinkedListNode<T>); overload;
    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function Find(value: T): DNLinkedListNode<T>;
    function FindLast(value: T): DNLinkedListNode<T>;
    function GetEnumerator: DNLinkedList_Enumerator<T>;
    procedure Remove(node: DNLinkedListNode<T>);
    procedure RemoveFirst;
    procedure RemoveLast;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure OnDeserialization(sender: DDNC.System.Private.CoreLib.DNObject);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property First: DNLinkedListNode<T> read get_First;
    property Last: DNLinkedListNode<T> read get_Last;
  end;

  TDNLinkedList<T> = class(TDNGenericImport<DNLinkedListClass<T>, DNLinkedList<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListNodeClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9C4EE044-E5FA-5288-9BEE-EECD4AAFA173}']
  { constructors } 

    {class} function init(value: T): DNLinkedListNode<T>;

  end;

  [DNTypeName('System.Collections.Generic.LinkedListNode`1')]
  DNLinkedListNode<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A241329E-96F1-35E7-807D-4A65498FC048}']
  { getters & setters } 

    function get_List: DNLinkedList<T>;
    function get_Next: DNLinkedListNode<T>;
    function get_Previous: DNLinkedListNode<T>;
    function get_Value: T;
    procedure set_Value(value: T);

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property List: DNLinkedList<T> read get_List;
    property Next: DNLinkedListNode<T> read get_Next;
    property Previous: DNLinkedListNode<T> read get_Previous;
    property Value: T read get_Value write set_Value;
  end;

  TDNLinkedListNode<T> = class(TDNGenericImport<DNLinkedListNodeClass<T>, DNLinkedListNode<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueueClass<T> = interface(DNObjectClass)
  ['{ED298B52-CB21-5566-9D60-D5D5EBD68F95}']
  { constructors } 

    {class} function init: DNQueue<T>; overload;
    {class} function init(capacity: Int32): DNQueue<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNQueue<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Queue`1')]
  DNQueue<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{24418F5B-4275-3FC2-997A-349FF72D5DC3}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    procedure Enqueue(item: T);
    function GetEnumerator: DNQueue_Enumerator<T>;
    function Dequeue: T;
    function TryDequeue(out result: T): Boolean;
    function Peek: T;
    function TryPeek(out result: T): Boolean;
    function &Contains(item: T): Boolean;
    function ToArray: TArray<T>;
    procedure TrimExcess;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNQueue<T> = class(TDNGenericImport<DNQueueClass<T>, DNQueue<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{E94624EC-769F-540B-B597-AC4F3B445D24}']
  { constructors } 

    {class} function init: DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2')]
  DNSortedDictionary<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{E8D9D51E-3047-3AFC-95C4-FD0961D7C211}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    function get_Keys: DNSortedDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNSortedDictionary_ValueCollection<TKey, TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    procedure CopyTo(&array: TArray<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>; index: Int32);
    function GetEnumerator: DNSortedDictionary_Enumerator<TKey, TValue>;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_Comparer;
    property Keys: DNSortedDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNSortedDictionary_ValueCollection<TKey, TValue> read get_Values;
  end;

  TDNSortedDictionary<TKey, TValue> = class(TDNGenericImport<DNSortedDictionaryClass<TKey, TValue>, DNSortedDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{0F5B5496-2E34-55D5-9A0A-AF9DCA290EDB}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_KeyCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection')]
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TKey>)
  ['{4EA4AB64-0EBC-30ED-AD87-DCD45000CB76}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TKey>; index: Int32);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollectionClass<TKey, TValue>, DNSortedDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{3C689348-C266-5525-840A-5F3D92150A6A}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_ValueCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection')]
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TValue>)
  ['{5AD58A61-E930-31A5-BA4E-54056E866CEF}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TValue>; index: Int32);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollectionClass<TKey, TValue>, DNSortedDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedListClass<TKey, TValue> = interface(DNObjectClass)
  ['{F916BA8F-AD41-5BBC-ABBD-1CFE11F354ED}']
  { constructors } 

    {class} function init: DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32): DNSortedList<TKey, TValue>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedList`2')]
  DNSortedList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{228E97D7-7F15-30FB-B536-F1930FB871C2}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIList<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIList<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>;
    function IndexOfKey(key: TKey): Int32;
    function IndexOfValue(value: TValue): Int32;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    procedure RemoveAt(index: Int32);
    procedure TrimExcess;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIList<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIList<TValue> read get_Values;
  end;

  TDNSortedList<TKey, TValue> = class(TDNGenericImport<DNSortedListClass<TKey, TValue>, DNSortedList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedList_KeyListClass<TKey, TValue> = interface(DNObjectClass)
  ['{EC483EB4-9BEB-50F7-9319-173B677B4A8C}']
  end;

  [DNTypeName('System.Collections.Generic.SortedList`2+KeyList')]
  DNSortedList_KeyList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIList<TKey>)
  ['{5D9F596B-475A-3E26-B3D2-40B87B9EEBF4}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(key: TKey): Boolean;
    procedure CopyTo(&array: TArray<TKey>; arrayIndex: Int32);
    procedure Insert(index: Int32; value: TKey);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TKey>;
    function IndexOf(key: TKey): Int32;
    procedure RemoveAt(index: Int32);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSortedList_KeyList<TKey, TValue> = class(TDNGenericImport<DNSortedList_KeyListClass<TKey, TValue>, DNSortedList_KeyList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedList_ValueListClass<TKey, TValue> = interface(DNObjectClass)
  ['{759AE17E-AA97-5874-AAAB-68AD0CA4CD51}']
  end;

  [DNTypeName('System.Collections.Generic.SortedList`2+ValueList')]
  DNSortedList_ValueList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIList<TValue>)
  ['{6C7872DD-C0A4-326A-99B8-02090A85449C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(value: TValue): Boolean;
    procedure CopyTo(&array: TArray<TValue>; arrayIndex: Int32);
    procedure Insert(index: Int32; value: TValue);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TValue>;
    function IndexOf(value: TValue): Int32;
    procedure RemoveAt(index: Int32);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSortedList_ValueList<TKey, TValue> = class(TDNGenericImport<DNSortedList_ValueListClass<TKey, TValue>, DNSortedList_ValueList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSetClass<T> = interface(DNObjectClass)
  ['{956FDAA9-0303-5AB6-B8AF-FD17727D3042}']
  { constructors } 

    {class} function init: DNSortedSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNSortedSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<DNSortedSet<T>>; overload;
    {class} function CreateSetComparer(memberEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DDNC.System.Private.CoreLib.DNIEqualityComparer<DNSortedSet<T>>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1')]
  DNSortedSet<T> = interface(DDNC.System.Runtime.DNISet<T>)
  ['{476803A2-1095-361A-9265-6C19282DCEEC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    function get_Min: T;
    function get_Max: T;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32; count: Int32); overload;
    function GetEnumerator: DNSortedSet_Enumerator<T>;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function GetViewBetween(lowerValue: T; upperValue: T): DNSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_Comparer;
    property Min: T read get_Min;
    property Max: T read get_Max;
  end;

  TDNSortedSet<T> = class(TDNGenericImport<DNSortedSetClass<T>, DNSortedSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNTreeSetClass<T> = interface(DNSortedSetClass<T>)
  ['{9DC00033-BF9D-5638-B238-465F3FFE30A7}']
  { constructors } 

    {class} function init: DNTreeSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNTreeSet<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.TreeSet`1')]
  DNTreeSet<T> = interface(DNSortedSet<T>)
  ['{05EF1F99-21DA-3C73-BB4B-586B58B4FAE0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    function get_Min: T;
    function get_Max: T;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32; count: Int32); overload;
    function GetEnumerator: DNSortedSet_Enumerator<T>;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function GetViewBetween(lowerValue: T; upperValue: T): DNSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_Comparer;
    property Min: T read get_Min;
    property Max: T read get_Max;
  end;

  TDNTreeSet<T> = class(TDNGenericImport<DNTreeSetClass<T>, DNTreeSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStackClass<T> = interface(DNObjectClass)
  ['{C22BE3E9-782D-5A70-B2C5-1A70DA08E7CE}']
  { constructors } 

    {class} function init: DNStack<T>; overload;
    {class} function init(capacity: Int32): DNStack<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNStack<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Stack`1')]
  DNStack<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{595015CF-1BB4-32D0-902B-7789DCF6B5E7}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function GetEnumerator: DNStack_Enumerator<T>;
    procedure TrimExcess;
    function Peek: T;
    function TryPeek(out result: T): Boolean;
    function Pop: T;
    function TryPop(out result: T): Boolean;
    procedure Push(item: T);
    function ToArray: TArray<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStack<T> = class(TDNGenericImport<DNStackClass<T>, DNStack<T>>) end;

  //-------------namespace: System.Collections----------------
  DNStructuralComparisonsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{49E43CB4-CD67-53A7-A1ED-821063FDD9A4}']
  { static getter & setter } 

    {class} function get_StructuralComparer: DDNC.System.Private.CoreLib.DNIComparer;
    {class} function get_StructuralEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer;

  { static propertys } 

    {class} property StructuralComparer: DDNC.System.Private.CoreLib.DNIComparer read get_StructuralComparer;
    {class} property StructuralEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer read get_StructuralEqualityComparer;
  end;

  [DNTypeName('System.Collections.StructuralComparisons')]
  DNStructuralComparisons = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{18F4749A-700C-3EA4-B425-C337F0523682}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNStructuralComparisons = class(TDNGenericImport<DNStructuralComparisonsClass, DNStructuralComparisons>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{22CCF9C6-C60A-5573-857E-3F9B8653EC75}']
  end;

  [DNTypeName('System.Collections.Generic.HashSet`1+Enumerator')]
  DNHashSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AD698BA4-7D33-3AD7-8DE4-4F11F21926D7}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNHashSet_Enumerator<T> = class(TDNGenericImport<DNHashSet_EnumeratorClass<T>, DNHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedList_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{23EA7796-E170-5CFC-91DE-23E3AAE21094}']
  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1+Enumerator')]
  DNLinkedList_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2277AE21-F7A1-356B-A971-492372829FE6}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNLinkedList_Enumerator<T> = class(TDNGenericImport<DNLinkedList_EnumeratorClass<T>, DNLinkedList_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueue_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DBD96B20-41F9-52D9-A058-BF196260299D}']
  end;

  [DNTypeName('System.Collections.Generic.Queue`1+Enumerator')]
  DNQueue_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{36668BB2-FD36-3288-B46C-FA31BC91B4E9}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNQueue_Enumerator<T> = class(TDNGenericImport<DNQueue_EnumeratorClass<T>, DNQueue_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{BFA2B543-A038-5A8A-A0A1-5E0C1C47114A}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+Enumerator')]
  DNSortedDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2004B7C4-C712-3C59-8F68-9FAC7464CA47}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNSortedDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_EnumeratorClass<TKey, TValue>, DNSortedDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{6F1581B7-FBED-501D-9330-616B5AC8E00C}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator')]
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{43579656-1AB5-3A72-93CF-FA161C646F17}']
  { getters & setters } 

    function get_Current: TKey;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: TKey read get_Current;
  end;

  TDNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{ED7CB824-4F14-505E-8D3E-4F13AFA1172C}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator')]
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7A19D703-5D38-394B-A4B5-A1DA079B2FF0}']
  { getters & setters } 

    function get_Current: TValue;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: TValue read get_Current;
  end;

  TDNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1CADDDDB-E6E4-5647-8294-F687B8C9FD78}']
  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1+Enumerator')]
  DNSortedSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0F4988C9-FE1D-3353-AF78-2321765FCF5E}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNSortedSet_Enumerator<T> = class(TDNGenericImport<DNSortedSet_EnumeratorClass<T>, DNSortedSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStack_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{56A4714A-C40D-5212-AD22-8D3E03194B9B}']
  end;

  [DNTypeName('System.Collections.Generic.Stack`1+Enumerator')]
  DNStack_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BAB6C549-A27C-3DE8-8D0F-DF51971BD393}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNStack_Enumerator<T> = class(TDNGenericImport<DNStack_EnumeratorClass<T>, DNStack_Enumerator<T>>) end;


implementation


initialization
  LoadAssemblyModule('System.Collections.dll', True);

finalization

end.
