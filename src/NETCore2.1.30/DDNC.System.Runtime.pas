//----------------------------------------------------------------------------
//  System.Runtime.dll: System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Runtime
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Runtime;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type

{ enums }

  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileAttributes')]
  DNFileAttributes = type Integer;
  DNFileAttributesHelper = record helper for DNFileAttributes
  public const
    ReadOnly = 1;
    Hidden = 2;
    System = 4;
    Directory = 16;
    Archive = 32;
    Device = 64;
    Normal = 128;
    Temporary = 256;
    SparseFile = 512;
    ReparsePoint = 1024;
    Compressed = 2048;
    Offline = 4096;
    NotContentIndexed = 8192;
    Encrypted = 16384;
    IntegrityStream = 32768;
    NoScrubData = 131072;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.HandleInheritability')]
  DNHandleInheritability = type Integer;
  DNHandleInheritabilityHelper = record helper for DNHandleInheritability
  public const
    None = 0;
    Inheritable = 1;
  end;




type


{ declares }

  DNISet<T> = interface; // type: System.Collections.Generic.ISet`1, namespace: System.Collections.Generic
  DNAssemblyTargetedPatchBandAttribute = interface; // type: System.Runtime.AssemblyTargetedPatchBandAttribute, namespace: System.Runtime
  DNPrePrepareMethodAttribute = interface; // type: System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute, namespace: System.Runtime.ConstrainedExecution
  DNTargetedPatchingOptOutAttribute = interface; // type: System.Runtime.TargetedPatchingOptOutAttribute, namespace: System.Runtime
  DNLazy<T, TMetadata> = interface; // type: System.Lazy`2, namespace: System
  DNRuntimeReflectionExtensions = interface; // type: System.Reflection.RuntimeReflectionExtensions, namespace: System.Reflection
  DNWaitHandleExtensions = interface; // type: System.Threading.WaitHandleExtensions, namespace: System.Threading

{ delegates }

  [DNTypeName('System.Action`10')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10) of object;

  [DNTypeName('System.Action`11')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11) of object;

  [DNTypeName('System.Action`12')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12) of object;

  [DNTypeName('System.Action`13')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13) of object;

  [DNTypeName('System.Action`14')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14) of object;

  [DNTypeName('System.Action`15')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15) of object;

  [DNTypeName('System.Action`16')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16) of object;

  [DNTypeName('System.Action`9')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9) of object;

  [DNTypeName('System.Func`10')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9): TResult of object;

  [DNTypeName('System.Func`11')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10): TResult of object;

  [DNTypeName('System.Func`12')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11): TResult of object;

  [DNTypeName('System.Func`13')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12): TResult of object;

  [DNTypeName('System.Func`14')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13): TResult of object;

  [DNTypeName('System.Func`15')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14): TResult of object;

  [DNTypeName('System.Func`16')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15): TResult of object;

  [DNTypeName('System.Func`17')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16): TResult of object;




{ objects }

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.ISet`1')]
  DNISet<T> = interface(DDNC.System.Private.CoreLib.DNICollection<T>)
  ['{17A06585-6615-3D19-8DFF-5443FB19804F}']
  { methods } 

    function Add(item: T): Boolean;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;

  end;

  //-------------namespace: System.Runtime----------------
  DNAssemblyTargetedPatchBandAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{12903146-034C-5D7B-9E37-7EC2E2C63940}']
  { constructors } 

    {class} function init(targetedPatchBand: string): DNAssemblyTargetedPatchBandAttribute;

  end;

  [DNTypeName('System.Runtime.AssemblyTargetedPatchBandAttribute')]
  DNAssemblyTargetedPatchBandAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{B2798437-9E3D-38C3-9E4B-D9435F325165}']
  { getters & setters } 

    function get_TargetedPatchBand: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TargetedPatchBand: string read get_TargetedPatchBand;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNAssemblyTargetedPatchBandAttribute = class(TDNGenericImport<DNAssemblyTargetedPatchBandAttributeClass, DNAssemblyTargetedPatchBandAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNPrePrepareMethodAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{31DF78A7-AEE8-5B50-8C10-6CE859FD7A53}']
  { constructors } 

    {class} function init: DNPrePrepareMethodAttribute;

  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute')]
  DNPrePrepareMethodAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{4D51F83A-6510-353F-820D-A632DA6A9157}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNPrePrepareMethodAttribute = class(TDNGenericImport<DNPrePrepareMethodAttributeClass, DNPrePrepareMethodAttribute>) end;

  //-------------namespace: System.Runtime----------------
  DNTargetedPatchingOptOutAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{13F74E9C-553A-5EE8-B567-67548EE2240C}']
  { constructors } 

    {class} function init(reason: string): DNTargetedPatchingOptOutAttribute;

  end;

  [DNTypeName('System.Runtime.TargetedPatchingOptOutAttribute')]
  DNTargetedPatchingOptOutAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{26FF2A91-2371-326D-B532-0E163DAEAC37}']
  { getters & setters } 

    function get_Reason: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Reason: string read get_Reason;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTargetedPatchingOptOutAttribute = class(TDNGenericImport<DNTargetedPatchingOptOutAttributeClass, DNTargetedPatchingOptOutAttribute>) end;

  //-------------namespace: System----------------
  DNLazyClass<T, TMetadata> = interface(DDNC.System.Private.CoreLib.DNLazyClass<T>)
  ['{E7B7F428-07D1-5631-84A7-62AC4161F42F}']
  { constructors } 

    {class} function init(valueFactory: DDNC.System.Private.CoreLib.DNFunc<T>; metadata: TMetadata): DNLazy<T, TMetadata>; overload;
    {class} function init(metadata: TMetadata): DNLazy<T, TMetadata>; overload;
    {class} function init(metadata: TMetadata; isThreadSafe: Boolean): DNLazy<T, TMetadata>; overload;
    {class} function init(valueFactory: DDNC.System.Private.CoreLib.DNFunc<T>; metadata: TMetadata; isThreadSafe: Boolean): DNLazy<T, TMetadata>; overload;
    {class} function init(metadata: TMetadata; mode: DDNC.System.Private.CoreLib.DNLazyThreadSafetyMode): DNLazy<T, TMetadata>; overload;
    {class} function init(valueFactory: DDNC.System.Private.CoreLib.DNFunc<T>; metadata: TMetadata; mode: DDNC.System.Private.CoreLib.DNLazyThreadSafetyMode): DNLazy<T, TMetadata>; overload;

  end;

  [DNTypeName('System.Lazy`2')]
  DNLazy<T, TMetadata> = interface(DDNC.System.Private.CoreLib.DNLazy<T>)
  ['{DFCDDEB7-6B05-3515-BD38-C387CFBCAD56}']
  { getters & setters } 

    function get_Metadata: TMetadata;
    function get_IsValueCreated: Boolean;
    function get_Value: T;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Metadata: TMetadata read get_Metadata;
    property IsValueCreated: Boolean read get_IsValueCreated;
    property Value: T read get_Value;
  end;

  TDNLazy<T, TMetadata> = class(TDNGenericImport<DNLazyClass<T, TMetadata>, DNLazy<T, TMetadata>>) end;

  //-------------namespace: System.Reflection----------------
  DNRuntimeReflectionExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{129ED20A-2133-5BBA-BFF4-73F21FF26303}']
  { static methods } 

    {class} function GetRuntimeFields(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNFieldInfo>;
    {class} function GetRuntimeMethods(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNMethodInfo>;
    {class} function GetRuntimeProperties(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNPropertyInfo>;
    {class} function GetRuntimeEvents(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNEventInfo>;
    {class} function GetRuntimeField(&type: DDNC.System.Private.CoreLib.DNType; name: string): DDNC.System.Private.CoreLib.DNFieldInfo;
    {class} function GetRuntimeMethod(&type: DDNC.System.Private.CoreLib.DNType; name: string; parameters: TArray<DDNC.System.Private.CoreLib.DNType>): DDNC.System.Private.CoreLib.DNMethodInfo;
    {class} function GetRuntimeProperty(&type: DDNC.System.Private.CoreLib.DNType; name: string): DDNC.System.Private.CoreLib.DNPropertyInfo;
    {class} function GetRuntimeEvent(&type: DDNC.System.Private.CoreLib.DNType; name: string): DDNC.System.Private.CoreLib.DNEventInfo;
    {class} function GetRuntimeBaseDefinition(method: DDNC.System.Private.CoreLib.DNMethodInfo): DDNC.System.Private.CoreLib.DNMethodInfo;
    {class} function GetRuntimeInterfaceMap(typeInfo: DDNC.System.Private.CoreLib.DNTypeInfo; interfaceType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNInterfaceMapping;
    {class} function GetMethodInfo(del: DDNC.System.Private.CoreLib.DNDelegate): DDNC.System.Private.CoreLib.DNMethodInfo;

  end;

  [DNTypeName('System.Reflection.RuntimeReflectionExtensions')]
  DNRuntimeReflectionExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{715A28A0-5D70-37EB-B146-13A70B73CB26}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNRuntimeReflectionExtensions = class(TDNGenericImport<DNRuntimeReflectionExtensionsClass, DNRuntimeReflectionExtensions>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{37912427-4E0F-5AB3-9897-6B0C0D99FD6A}']
  { static methods } 

    {class} function GetSafeWaitHandle(waitHandle: DDNC.System.Private.CoreLib.DNWaitHandle): DDNC.System.Private.CoreLib.DNSafeWaitHandle;
    {class} procedure SetSafeWaitHandle(waitHandle: DDNC.System.Private.CoreLib.DNWaitHandle; value: DDNC.System.Private.CoreLib.DNSafeWaitHandle);

  end;

  [DNTypeName('System.Threading.WaitHandleExtensions')]
  DNWaitHandleExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FCB2593F-4B65-3C57-B891-C4D0D6D1CFCA}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNWaitHandleExtensions = class(TDNGenericImport<DNWaitHandleExtensionsClass, DNWaitHandleExtensions>) end;


implementation


initialization
  LoadAssemblyModule('System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
