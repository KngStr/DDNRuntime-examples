//----------------------------------------------------------------------------
//  System.Web.Services.dll: System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Web.Services
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Web.Services;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.EnterpriseServices,
  DDN.System.Xml,
  DDN.System,
  DDN.System.Web,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Web.Services.Configuration----------------
  ///<summary>Specifies the values that can be used to set the priority and group attributes for a SOAP extension in the Web Services configuration file.</summary>
  [DNTypeName('System.Web.Services.Configuration.PriorityGroup')]
  DNPriorityGroup = type Integer;
  DNPriorityGroupHelper = record helper for DNPriorityGroup
  public const
    ///<summary>Represents the value 1. Indicates that the SOAP extension executes in the group of SOAP extensions with the highest priority.</summary>
    High = 0;
    ///<summary>Represents the value 0. Indicates that the SOAP extension executes in the group of SOAP extensions with the lowest priority.</summary>
    Low = 1;
  end;


  //-------------namespace: System.Web.Services.Configuration----------------
  ///<summary>Specifies the transmission protocols that are used to decrypt data sent from a client browser in the HTTP request.</summary>
  [DNTypeName('System.Web.Services.Configuration.WebServiceProtocols')]
  DNWebServiceProtocols = type Integer;
  DNWebServiceProtocolsHelper = record helper for DNWebServiceProtocols
  public const
    ///<summary>Unknown protocol.</summary>
    Unknown = 0;
    ///<summary>The HTTP SOAP protocol.</summary>
    HttpSoap = 1;
    ///<summary>The HTTP GET protocol.</summary>
    HttpGet = 2;
    ///<summary>The HTTP POST protocol.</summary>
    HttpPost = 4;
    ///<summary>The Web Services Documentation protocol.</summary>
    Documentation = 8;
    ///<summary>The HTTP POST LOCALHOST protocol.</summary>
    HttpPostLocalhost = 16;
    ///<summary>The HTTP SOAP version 1.2 protocol.</summary>
    HttpSoap12 = 32;
    ///<summary>Any version of the HTTP SOAP protocol.</summary>
    AnyHttpSoap = 33;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>Specifies the type of transmission an endpoint of the XML Web service can support.</summary>
  [DNTypeName('System.Web.Services.Description.OperationFlow')]
  DNOperationFlow = type Integer;
  DNOperationFlowHelper = record helper for DNOperationFlow
  public const
    ///<summary>Indicates that the endpoint of the XML Web service receives no transmissions.</summary>
    None = 0;
    ///<summary>Indicates that the endpoint of the XML Web service receives a message.</summary>
    OneWay = 1;
    ///<summary>Indicates that the endpoint of the XML Web service sends a message.</summary>
    Notification = 2;
    ///<summary>Indicates that the endpoint of the XML Web service receives a message, then sends a correlated message.</summary>
    RequestResponse = 3;
    ///<summary>Indicates that the endpoint of the XML Web service sends a message, then receives a correlated message.</summary>
    SolicitResponse = 4;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>Specifies whether the import is made to the server or to the client computer.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImportStyle')]
  DNServiceDescriptionImportStyle = type Integer;
  DNServiceDescriptionImportStyleHelper = record helper for DNServiceDescriptionImportStyle
  public const
    ///<summary>Specifies that the import should be made to the client computer.</summary>
    Client = 0;
    ///<summary>Specifies that the import should be made to the server.</summary>
    Server = 1;
    ///<summary>Specifies that the import should be made to a server interface.</summary>
    ServerInterface = 2;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>Specifies the type of warnings produced by <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.Import(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)" />
  ///  .</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImportWarnings')]
  DNServiceDescriptionImportWarnings = type Integer;
  DNServiceDescriptionImportWarningsHelper = record helper for DNServiceDescriptionImportWarnings
  public const
    ///<summary>Specifies that no proxy class was generated by the <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.Import(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)" />
    ///  method.</summary>
    NoCodeGenerated = 1;
    ///<summary>Specifies that at least one optional <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  for the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to be imported has been ignored.</summary>
    OptionalExtensionsIgnored = 2;
    ///<summary>Specifies that at least one required <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  for the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to be imported has been ignored.</summary>
    RequiredExtensionsIgnored = 4;
    ///<summary>Specifies that at least one <see cref="T:System.Web.Services.Description.Operation" />
    ///  for the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to be imported is of an unsupported type and has been ignored.</summary>
    UnsupportedOperationsIgnored = 8;
    ///<summary>Specifies that at least one <see cref="T:System.Web.Services.Description.Binding" />
    ///  for the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to be imported is of an unsupported type and has been ignored.</summary>
    UnsupportedBindingsIgnored = 16;
    ///<summary>Specifies that the proxy class generated by the <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.Import(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)" />
    ///  method includes no methods.</summary>
    NoMethodsGenerated = 32;
    ///<summary>Specifies that the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  schema is invalid.</summary>
    SchemaValidation = 64;
    ///<summary>Specifies that the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to be imported does not conform to the WS-I Basic Profile.</summary>
    WsiConformance = 128;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>Specifies the type of action that occurs in the XML Web service at the level of the class hierarchy to which this enumeration is applied.</summary>
  [DNTypeName('System.Web.Services.Description.SoapBindingStyle')]
  DNSoapBindingStyle = type Integer;
  DNSoapBindingStyleHelper = record helper for DNSoapBindingStyle
  public const
    ///<summary>The default type of action for the current hierarchical level of the Web Services Description Language (WSDL) file.</summary>
    Default_ = 0;
    ///<summary>The message being transmitted is document-oriented.</summary>
    Document = 1;
    ///<summary>The message being transmitted contains the parameters to call a procedure or the return values from that procedure. RPC is an acronym for "remote procedure call." </summary>
    Rpc = 2;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  ///<summary>Specifies whether the message parts are encoded as abstract type definitions or concrete schema definitions.</summary>
  [DNTypeName('System.Web.Services.Description.SoapBindingUse')]
  DNSoapBindingUse = type Integer;
  DNSoapBindingUseHelper = record helper for DNSoapBindingUse
  public const
    ///<summary>Specifies an empty string ("") value for the corresponding XML <see langword="use" />
    ///  attribute.</summary>
    Default_ = 0;
    ///<summary>The message parts are encoded using given encoding rules.</summary>
    Encoded = 1;
    ///<summary>The message parts represent a concrete schema.</summary>
    Literal = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>Specifies how the XML Web service method was invoked.</summary>
  [DNTypeName('System.Web.Services.Protocols.LogicalMethodTypes')]
  DNLogicalMethodTypes = type Integer;
  DNLogicalMethodTypesHelper = record helper for DNLogicalMethodTypes
  public const
    ///<summary>The XML Web service method is invoked synchronously.</summary>
    Sync = 1;
    ///<summary>The XML Web service method is invoked asynchronously.</summary>
    Async = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>Specifies whether the recipient of the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
  ///  is the XML Web service, the XML Web service client, or both.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderDirection')]
  DNSoapHeaderDirection = type Integer;
  DNSoapHeaderDirectionHelper = record helper for DNSoapHeaderDirection
  public const
    ///<summary>Specifies the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  is sent to the XML Web service.</summary>
    In_ = 1;
    ///<summary>Specifies the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  is sent to the XML Web service client.</summary>
    Out_ = 2;
    ///<summary>Specifies the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  is sent to both the XML Web service and the XML Web service client.</summary>
    InOut = 3;
    ///<summary>Specifies the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  is sent to the XML Web service client when an exception is thrown by the XML Web service method.</summary>
    Fault = 4;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>Specifies the processing stage of a SOAP message.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapMessageStage')]
  DNSoapMessageStage = type Integer;
  DNSoapMessageStageHelper = record helper for DNSoapMessageStage
  public const
    ///<summary>The stage just prior to a <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  being serialized.</summary>
    BeforeSerialize = 1;
    ///<summary>The stage just after a <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  is serialized, but before the SOAP message is sent over the wire.</summary>
    AfterSerialize = 2;
    ///<summary>The stage just before a <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  is deserialized from the SOAP message sent across the network into an object.</summary>
    BeforeDeserialize = 4;
    ///<summary>The stage just after a <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  is deserialized from a SOAP message into an object.</summary>
    AfterDeserialize = 8;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>Specifies how parameters are formatted in a SOAP message.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapParameterStyle')]
  DNSoapParameterStyle = type Integer;
  DNSoapParameterStyleHelper = record helper for DNSoapParameterStyle
  public const
    ///<summary>Specifies using the default <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  for the XML Web service. The default for an XML Web service can be set by applying a <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  to the class implementing the XML Web service. If a <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  is not applied to the class implementing the XML Web service, the default is <see cref="F:System.Web.Services.Protocols.SoapParameterStyle.Wrapped" />
    ///  .</summary>
    Default_ = 0;
    ///<summary>Parameters sent to and from an XML Web service method are placed in XML elements directly following the <see langword="Body" />
    ///  element of a SOAP request or SOAP response.</summary>
    Bare = 1;
    ///<summary>Parameters sent to and from an XML Web service method are encapsulated within a single XML element followig the <see langword="Body" />
    ///  element of the XML portion of a SOAP request or SOAP response.</summary>
    Wrapped = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>Specifies the version of the SOAP protocol used to communicate with an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapProtocolVersion')]
  DNSoapProtocolVersion = type Integer;
  DNSoapProtocolVersionHelper = record helper for DNSoapProtocolVersion
  public const
    ///<summary>The default value for this enumeration.</summary>
    Default_ = 0;
    ///<summary>SOAP protocol version 1.1.</summary>
    Soap11 = 1;
    ///<summary>SOAP protocol version 1.2.</summary>
    Soap12 = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  ///<summary>Specifies how a SOAP message is routed to the Web server hosting the XML Web service.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServiceRoutingStyle')]
  DNSoapServiceRoutingStyle = type Integer;
  DNSoapServiceRoutingStyleHelper = record helper for DNSoapServiceRoutingStyle
  public const
    ///<summary>The SOAP message is routed based on the <see langword="SOAPAction" />
    ///  HTTP header.</summary>
    SoapAction = 0;
    ///<summary>The SOAP Message is routed based on the first child element following the <see langword="&lt;Body&gt;" />
    ///  XML element of the SOAP message.</summary>
    RequestElement = 1;
  end;


  //-------------namespace: System.Web.Services----------------
  ///<summary>Describes the Web services interoperability (WSI) specification to which a Web service claims to conform.</summary>
  [DNTypeName('System.Web.Services.WsiProfiles')]
  DNWsiProfiles = type Integer;
  DNWsiProfilesHelper = record helper for DNWsiProfiles
  public const
    ///<summary>The web service makes no conformance claims.</summary>
    None = 0;
    ///<summary>The web service claims to conform to the WSI Basic Profile version 1.1.</summary>
    BasicProfile1_1 = 1;
  end;




type


{ declares }

  DNXmlFormatExtensionAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionAttribute, namespace: System.Web.Services.Configuration
  DNXmlFormatExtensionPointAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionPointAttribute, namespace: System.Web.Services.Configuration
  DNXmlFormatExtensionPrefixAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute, namespace: System.Web.Services.Configuration
  DNHttpMethodAttribute = interface; // type: System.Web.Services.Protocols.HttpMethodAttribute, namespace: System.Web.Services.Protocols
  DNMatchAttribute = interface; // type: System.Web.Services.Protocols.MatchAttribute, namespace: System.Web.Services.Protocols
  DNSoapDocumentMethodAttribute = interface; // type: System.Web.Services.Protocols.SoapDocumentMethodAttribute, namespace: System.Web.Services.Protocols
  DNSoapDocumentServiceAttribute = interface; // type: System.Web.Services.Protocols.SoapDocumentServiceAttribute, namespace: System.Web.Services.Protocols
  DNSoapExtensionAttribute = interface; // type: System.Web.Services.Protocols.SoapExtensionAttribute, namespace: System.Web.Services.Protocols
  DNSoapHeaderAttribute = interface; // type: System.Web.Services.Protocols.SoapHeaderAttribute, namespace: System.Web.Services.Protocols
  DNSoapRpcMethodAttribute = interface; // type: System.Web.Services.Protocols.SoapRpcMethodAttribute, namespace: System.Web.Services.Protocols
  DNSoapRpcServiceAttribute = interface; // type: System.Web.Services.Protocols.SoapRpcServiceAttribute, namespace: System.Web.Services.Protocols
  DNWebMethodAttribute = interface; // type: System.Web.Services.WebMethodAttribute, namespace: System.Web.Services
  DNWebServiceAttribute = interface; // type: System.Web.Services.WebServiceAttribute, namespace: System.Web.Services
  DNWebServiceBindingAttribute = interface; // type: System.Web.Services.WebServiceBindingAttribute, namespace: System.Web.Services
  DNBasicProfileViolationCollection = interface; // type: System.Web.Services.Description.BasicProfileViolationCollection, namespace: System.Web.Services.Description
  DNMimePartCollection = interface; // type: System.Web.Services.Description.MimePartCollection, namespace: System.Web.Services.Description
  DNMimeTextMatchCollection = interface; // type: System.Web.Services.Description.MimeTextMatchCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionBaseCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionBaseCollection, namespace: System.Web.Services.Description
  DNBindingCollection = interface; // type: System.Web.Services.Description.BindingCollection, namespace: System.Web.Services.Description
  DNFaultBindingCollection = interface; // type: System.Web.Services.Description.FaultBindingCollection, namespace: System.Web.Services.Description
  DNImportCollection = interface; // type: System.Web.Services.Description.ImportCollection, namespace: System.Web.Services.Description
  DNMessageCollection = interface; // type: System.Web.Services.Description.MessageCollection, namespace: System.Web.Services.Description
  DNMessagePartCollection = interface; // type: System.Web.Services.Description.MessagePartCollection, namespace: System.Web.Services.Description
  DNOperationBindingCollection = interface; // type: System.Web.Services.Description.OperationBindingCollection, namespace: System.Web.Services.Description
  DNOperationCollection = interface; // type: System.Web.Services.Description.OperationCollection, namespace: System.Web.Services.Description
  DNOperationFaultCollection = interface; // type: System.Web.Services.Description.OperationFaultCollection, namespace: System.Web.Services.Description
  DNOperationMessageCollection = interface; // type: System.Web.Services.Description.OperationMessageCollection, namespace: System.Web.Services.Description
  DNPortCollection = interface; // type: System.Web.Services.Description.PortCollection, namespace: System.Web.Services.Description
  DNPortTypeCollection = interface; // type: System.Web.Services.Description.PortTypeCollection, namespace: System.Web.Services.Description
  DNServiceCollection = interface; // type: System.Web.Services.Description.ServiceCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionFormatExtensionCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection, namespace: System.Web.Services.Description
  DNWebReferenceCollection = interface; // type: System.Web.Services.Description.WebReferenceCollection, namespace: System.Web.Services.Description
  DNDiscoveryClientResultCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientResultCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryReferenceCollection = interface; // type: System.Web.Services.Discovery.DiscoveryReferenceCollection, namespace: System.Web.Services.Discovery
  DNSoapHeaderCollection = interface; // type: System.Web.Services.Protocols.SoapHeaderCollection, namespace: System.Web.Services.Protocols
  DNDiscoveryClientDocumentCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientDocumentCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryClientReferenceCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientReferenceCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryExceptionDictionary = interface; // type: System.Web.Services.Discovery.DiscoveryExceptionDictionary, namespace: System.Web.Services.Discovery
  DNWebService = interface; // type: System.Web.Services.WebService, namespace: System.Web.Services
  DNProtocolElementCollection = interface; // type: System.Web.Services.Configuration.ProtocolElementCollection, namespace: System.Web.Services.Configuration
  DNSoapExtensionTypeElementCollection = interface; // type: System.Web.Services.Configuration.SoapExtensionTypeElementCollection, namespace: System.Web.Services.Configuration
  DNTypeElementCollection = interface; // type: System.Web.Services.Configuration.TypeElementCollection, namespace: System.Web.Services.Configuration
  DNWsiProfilesElementCollection = interface; // type: System.Web.Services.Configuration.WsiProfilesElementCollection, namespace: System.Web.Services.Configuration
  DNWebServicesSection = interface; // type: System.Web.Services.Configuration.WebServicesSection, namespace: System.Web.Services.Configuration
  DNDiagnosticsElement = interface; // type: System.Web.Services.Configuration.DiagnosticsElement, namespace: System.Web.Services.Configuration
  DNProtocolElement = interface; // type: System.Web.Services.Configuration.ProtocolElement, namespace: System.Web.Services.Configuration
  DNSoapEnvelopeProcessingElement = interface; // type: System.Web.Services.Configuration.SoapEnvelopeProcessingElement, namespace: System.Web.Services.Configuration
  DNSoapExtensionTypeElement = interface; // type: System.Web.Services.Configuration.SoapExtensionTypeElement, namespace: System.Web.Services.Configuration
  DNTypeElement = interface; // type: System.Web.Services.Configuration.TypeElement, namespace: System.Web.Services.Configuration
  DNWsdlHelpGeneratorElement = interface; // type: System.Web.Services.Configuration.WsdlHelpGeneratorElement, namespace: System.Web.Services.Configuration
  DNWsiProfilesElement = interface; // type: System.Web.Services.Configuration.WsiProfilesElement, namespace: System.Web.Services.Configuration
  DNInvokeCompletedEventArgs = interface; // type: System.Web.Services.Protocols.InvokeCompletedEventArgs, namespace: System.Web.Services.Protocols
  DNSoapException = interface; // type: System.Web.Services.Protocols.SoapException, namespace: System.Web.Services.Protocols
  DNSoapHeaderException = interface; // type: System.Web.Services.Protocols.SoapHeaderException, namespace: System.Web.Services.Protocols
  DNWebClientProtocol = interface; // type: System.Web.Services.Protocols.WebClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpWebClientProtocol = interface; // type: System.Web.Services.Protocols.HttpWebClientProtocol, namespace: System.Web.Services.Protocols
  DNDiscoveryClientProtocol = interface; // type: System.Web.Services.Discovery.DiscoveryClientProtocol, namespace: System.Web.Services.Discovery
  DNHttpSimpleClientProtocol = interface; // type: System.Web.Services.Protocols.HttpSimpleClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpGetClientProtocol = interface; // type: System.Web.Services.Protocols.HttpGetClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpPostClientProtocol = interface; // type: System.Web.Services.Protocols.HttpPostClientProtocol, namespace: System.Web.Services.Protocols
  DNSoapHttpClientProtocol = interface; // type: System.Web.Services.Protocols.SoapHttpClientProtocol, namespace: System.Web.Services.Protocols
  DNBasicProfileViolation = interface; // type: System.Web.Services.Description.BasicProfileViolation, namespace: System.Web.Services.Description
  DNBasicProfileViolationEnumerator = interface; // type: System.Web.Services.Description.BasicProfileViolationEnumerator, namespace: System.Web.Services.Description
  DNDocumentableItem = interface; // type: System.Web.Services.Description.DocumentableItem, namespace: System.Web.Services.Description
  DNImport = interface; // type: System.Web.Services.Description.Import, namespace: System.Web.Services.Description
  DNNamedItem = interface; // type: System.Web.Services.Description.NamedItem, namespace: System.Web.Services.Description
  DNBinding = interface; // type: System.Web.Services.Description.Binding, namespace: System.Web.Services.Description
  DNMessage = interface; // type: System.Web.Services.Description.Message, namespace: System.Web.Services.Description
  DNMessageBinding = interface; // type: System.Web.Services.Description.MessageBinding, namespace: System.Web.Services.Description
  DNFaultBinding = interface; // type: System.Web.Services.Description.FaultBinding, namespace: System.Web.Services.Description
  DNInputBinding = interface; // type: System.Web.Services.Description.InputBinding, namespace: System.Web.Services.Description
  DNOutputBinding = interface; // type: System.Web.Services.Description.OutputBinding, namespace: System.Web.Services.Description
  DNMessagePart = interface; // type: System.Web.Services.Description.MessagePart, namespace: System.Web.Services.Description
  DNOperation = interface; // type: System.Web.Services.Description.Operation, namespace: System.Web.Services.Description
  DNOperationBinding = interface; // type: System.Web.Services.Description.OperationBinding, namespace: System.Web.Services.Description
  DNOperationMessage = interface; // type: System.Web.Services.Description.OperationMessage, namespace: System.Web.Services.Description
  DNOperationFault = interface; // type: System.Web.Services.Description.OperationFault, namespace: System.Web.Services.Description
  DNOperationInput = interface; // type: System.Web.Services.Description.OperationInput, namespace: System.Web.Services.Description
  DNOperationOutput = interface; // type: System.Web.Services.Description.OperationOutput, namespace: System.Web.Services.Description
  DNPort = interface; // type: System.Web.Services.Description.Port, namespace: System.Web.Services.Description
  DNPortType = interface; // type: System.Web.Services.Description.PortType, namespace: System.Web.Services.Description
  DNService = interface; // type: System.Web.Services.Description.Service, namespace: System.Web.Services.Description
  DNServiceDescription = interface; // type: System.Web.Services.Description.ServiceDescription, namespace: System.Web.Services.Description
  DNTypes = interface; // type: System.Web.Services.Description.Types, namespace: System.Web.Services.Description
  DNMimeTextMatch = interface; // type: System.Web.Services.Description.MimeTextMatch, namespace: System.Web.Services.Description
  DNProtocolImporter = interface; // type: System.Web.Services.Description.ProtocolImporter, namespace: System.Web.Services.Description
  DNSoapProtocolImporter = interface; // type: System.Web.Services.Description.SoapProtocolImporter, namespace: System.Web.Services.Description
  DNProtocolReflector = interface; // type: System.Web.Services.Description.ProtocolReflector, namespace: System.Web.Services.Description
  DNServiceDescriptionFormatExtension = interface; // type: System.Web.Services.Description.ServiceDescriptionFormatExtension, namespace: System.Web.Services.Description
  DNHttpAddressBinding = interface; // type: System.Web.Services.Description.HttpAddressBinding, namespace: System.Web.Services.Description
  DNHttpBinding = interface; // type: System.Web.Services.Description.HttpBinding, namespace: System.Web.Services.Description
  DNHttpOperationBinding = interface; // type: System.Web.Services.Description.HttpOperationBinding, namespace: System.Web.Services.Description
  DNHttpUrlEncodedBinding = interface; // type: System.Web.Services.Description.HttpUrlEncodedBinding, namespace: System.Web.Services.Description
  DNHttpUrlReplacementBinding = interface; // type: System.Web.Services.Description.HttpUrlReplacementBinding, namespace: System.Web.Services.Description
  DNMimeContentBinding = interface; // type: System.Web.Services.Description.MimeContentBinding, namespace: System.Web.Services.Description
  DNMimeMultipartRelatedBinding = interface; // type: System.Web.Services.Description.MimeMultipartRelatedBinding, namespace: System.Web.Services.Description
  DNMimePart = interface; // type: System.Web.Services.Description.MimePart, namespace: System.Web.Services.Description
  DNMimeTextBinding = interface; // type: System.Web.Services.Description.MimeTextBinding, namespace: System.Web.Services.Description
  DNMimeXmlBinding = interface; // type: System.Web.Services.Description.MimeXmlBinding, namespace: System.Web.Services.Description
  DNSoapAddressBinding = interface; // type: System.Web.Services.Description.SoapAddressBinding, namespace: System.Web.Services.Description
  DNSoap12AddressBinding = interface; // type: System.Web.Services.Description.Soap12AddressBinding, namespace: System.Web.Services.Description
  DNDescription_SoapBinding = interface; // type: System.Web.Services.Description.SoapBinding, namespace: System.Web.Services.Description
  DNSoap12Binding = interface; // type: System.Web.Services.Description.Soap12Binding, namespace: System.Web.Services.Description
  DNSoapBodyBinding = interface; // type: System.Web.Services.Description.SoapBodyBinding, namespace: System.Web.Services.Description
  DNSoap12BodyBinding = interface; // type: System.Web.Services.Description.Soap12BodyBinding, namespace: System.Web.Services.Description
  DNSoapFaultBinding = interface; // type: System.Web.Services.Description.SoapFaultBinding, namespace: System.Web.Services.Description
  DNSoap12FaultBinding = interface; // type: System.Web.Services.Description.Soap12FaultBinding, namespace: System.Web.Services.Description
  DNSoapHeaderBinding = interface; // type: System.Web.Services.Description.SoapHeaderBinding, namespace: System.Web.Services.Description
  DNSoap12HeaderBinding = interface; // type: System.Web.Services.Description.Soap12HeaderBinding, namespace: System.Web.Services.Description
  DNSoapHeaderFaultBinding = interface; // type: System.Web.Services.Description.SoapHeaderFaultBinding, namespace: System.Web.Services.Description
  DNSoapOperationBinding = interface; // type: System.Web.Services.Description.SoapOperationBinding, namespace: System.Web.Services.Description
  DNSoap12OperationBinding = interface; // type: System.Web.Services.Description.Soap12OperationBinding, namespace: System.Web.Services.Description
  DNServiceDescriptionImporter = interface; // type: System.Web.Services.Description.ServiceDescriptionImporter, namespace: System.Web.Services.Description
  DNServiceDescriptionReflector = interface; // type: System.Web.Services.Description.ServiceDescriptionReflector, namespace: System.Web.Services.Description
  DNSoapExtensionImporter = interface; // type: System.Web.Services.Description.SoapExtensionImporter, namespace: System.Web.Services.Description
  DNSoapExtensionReflector = interface; // type: System.Web.Services.Description.SoapExtensionReflector, namespace: System.Web.Services.Description
  DNSoapTransportImporter = interface; // type: System.Web.Services.Description.SoapTransportImporter, namespace: System.Web.Services.Description
  DNWebReference = interface; // type: System.Web.Services.Description.WebReference, namespace: System.Web.Services.Description
  DNWebReferenceOptions = interface; // type: System.Web.Services.Description.WebReferenceOptions, namespace: System.Web.Services.Description
  DNWebServicesInteroperability = interface; // type: System.Web.Services.Description.WebServicesInteroperability, namespace: System.Web.Services.Description
  DNDiscoveryClientProtocol_DiscoveryClientResultsFile = interface; // type: System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile, namespace: System.Web.Services.Discovery
  DNDiscoveryClientResult = interface; // type: System.Web.Services.Discovery.DiscoveryClientResult, namespace: System.Web.Services.Discovery
  DNDiscoveryDocument = interface; // type: System.Web.Services.Discovery.DiscoveryDocument, namespace: System.Web.Services.Discovery
  DNDiscoveryReference = interface; // type: System.Web.Services.Discovery.DiscoveryReference, namespace: System.Web.Services.Discovery
  DNContractReference = interface; // type: System.Web.Services.Discovery.ContractReference, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentReference = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentReference, namespace: System.Web.Services.Discovery
  DNSchemaReference = interface; // type: System.Web.Services.Discovery.SchemaReference, namespace: System.Web.Services.Discovery
  DNDiscoveryRequestHandler = interface; // type: System.Web.Services.Discovery.DiscoveryRequestHandler, namespace: System.Web.Services.Discovery
  DNDiscoverySearchPattern = interface; // type: System.Web.Services.Discovery.DiscoverySearchPattern, namespace: System.Web.Services.Discovery
  DNContractSearchPattern = interface; // type: System.Web.Services.Discovery.ContractSearchPattern, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentLinksPattern = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentLinksPattern, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentSearchPattern = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentSearchPattern, namespace: System.Web.Services.Discovery
  DNXmlSchemaSearchPattern = interface; // type: System.Web.Services.Discovery.XmlSchemaSearchPattern, namespace: System.Web.Services.Discovery
  DNDynamicDiscoveryDocument = interface; // type: System.Web.Services.Discovery.DynamicDiscoveryDocument, namespace: System.Web.Services.Discovery
  DNExcludePathInfo = interface; // type: System.Web.Services.Discovery.ExcludePathInfo, namespace: System.Web.Services.Discovery
  DNDiscovery_SoapBinding = interface; // type: System.Web.Services.Discovery.SoapBinding, namespace: System.Web.Services.Discovery
  DNLogicalMethodInfo = interface; // type: System.Web.Services.Protocols.LogicalMethodInfo, namespace: System.Web.Services.Protocols
  DNMimeFormatter = interface; // type: System.Web.Services.Protocols.MimeFormatter, namespace: System.Web.Services.Protocols
  DNMimeParameterReader = interface; // type: System.Web.Services.Protocols.MimeParameterReader, namespace: System.Web.Services.Protocols
  DNValueCollectionParameterReader = interface; // type: System.Web.Services.Protocols.ValueCollectionParameterReader, namespace: System.Web.Services.Protocols
  DNHtmlFormParameterReader = interface; // type: System.Web.Services.Protocols.HtmlFormParameterReader, namespace: System.Web.Services.Protocols
  DNUrlParameterReader = interface; // type: System.Web.Services.Protocols.UrlParameterReader, namespace: System.Web.Services.Protocols
  DNMimeParameterWriter = interface; // type: System.Web.Services.Protocols.MimeParameterWriter, namespace: System.Web.Services.Protocols
  DNUrlEncodedParameterWriter = interface; // type: System.Web.Services.Protocols.UrlEncodedParameterWriter, namespace: System.Web.Services.Protocols
  DNHtmlFormParameterWriter = interface; // type: System.Web.Services.Protocols.HtmlFormParameterWriter, namespace: System.Web.Services.Protocols
  DNUrlParameterWriter = interface; // type: System.Web.Services.Protocols.UrlParameterWriter, namespace: System.Web.Services.Protocols
  DNMimeReturnReader = interface; // type: System.Web.Services.Protocols.MimeReturnReader, namespace: System.Web.Services.Protocols
  DNAnyReturnReader = interface; // type: System.Web.Services.Protocols.AnyReturnReader, namespace: System.Web.Services.Protocols
  DNNopReturnReader = interface; // type: System.Web.Services.Protocols.NopReturnReader, namespace: System.Web.Services.Protocols
  DNTextReturnReader = interface; // type: System.Web.Services.Protocols.TextReturnReader, namespace: System.Web.Services.Protocols
  DNXmlReturnReader = interface; // type: System.Web.Services.Protocols.XmlReturnReader, namespace: System.Web.Services.Protocols
  DNPatternMatcher = interface; // type: System.Web.Services.Protocols.PatternMatcher, namespace: System.Web.Services.Protocols
  DNServerProtocol = interface; // type: System.Web.Services.Protocols.ServerProtocol, namespace: System.Web.Services.Protocols
  DNSoapServerProtocol = interface; // type: System.Web.Services.Protocols.SoapServerProtocol, namespace: System.Web.Services.Protocols
  DNServerProtocolFactory = interface; // type: System.Web.Services.Protocols.ServerProtocolFactory, namespace: System.Web.Services.Protocols
  DNSoapServerProtocolFactory = interface; // type: System.Web.Services.Protocols.SoapServerProtocolFactory, namespace: System.Web.Services.Protocols
  DNServerType = interface; // type: System.Web.Services.Protocols.ServerType, namespace: System.Web.Services.Protocols
  DNSoapServerType = interface; // type: System.Web.Services.Protocols.SoapServerType, namespace: System.Web.Services.Protocols
  DNSoap12FaultCodes = interface; // type: System.Web.Services.Protocols.Soap12FaultCodes, namespace: System.Web.Services.Protocols
  DNSoapExtension = interface; // type: System.Web.Services.Protocols.SoapExtension, namespace: System.Web.Services.Protocols
  DNSoapFaultSubCode = interface; // type: System.Web.Services.Protocols.SoapFaultSubCode, namespace: System.Web.Services.Protocols
  DNSoapHeader = interface; // type: System.Web.Services.Protocols.SoapHeader, namespace: System.Web.Services.Protocols
  DNSoapUnknownHeader = interface; // type: System.Web.Services.Protocols.SoapUnknownHeader, namespace: System.Web.Services.Protocols
  DNSoapHeaderHandling = interface; // type: System.Web.Services.Protocols.SoapHeaderHandling, namespace: System.Web.Services.Protocols
  DNSoapHeaderMapping = interface; // type: System.Web.Services.Protocols.SoapHeaderMapping, namespace: System.Web.Services.Protocols
  DNSoapMessage = interface; // type: System.Web.Services.Protocols.SoapMessage, namespace: System.Web.Services.Protocols
  DNSoapClientMessage = interface; // type: System.Web.Services.Protocols.SoapClientMessage, namespace: System.Web.Services.Protocols
  DNSoapServerMessage = interface; // type: System.Web.Services.Protocols.SoapServerMessage, namespace: System.Web.Services.Protocols
  DNSoapServerMethod = interface; // type: System.Web.Services.Protocols.SoapServerMethod, namespace: System.Web.Services.Protocols
  DNWebClientAsyncResult = interface; // type: System.Web.Services.Protocols.WebClientAsyncResult, namespace: System.Web.Services.Protocols
  DNWebServiceHandlerFactory = interface; // type: System.Web.Services.Protocols.WebServiceHandlerFactory, namespace: System.Web.Services.Protocols

{ delegates }

  ///<summary>Represents an event handler that accepts the results of asynchronously invoked Web methods. This class cannot be inherited.</summary>
  ///  <param name="sender">A reference to the Web service proxy.</param>
  ///  <param name="e">An <see cref="T:System.Web.Services.Protocols.InvokeCompletedEventArgs" />
  ///  containing the results of the method invocation.</param>
  [DNTypeName('System.Web.Services.Protocols.InvokeCompletedEventHandler')]
  DNInvokeCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNInvokeCompletedEventArgs) of object;




{ objects }

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D8F70425-9869-57D3-B301-B54D916F5E77}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  class.</summary>
    {class} function init: DNXmlFormatExtensionAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  class that specifies the XML element and namespace to add when running at the specified extension point.</summary>
    ///  <param name="elementName">The XML element added to the service description by the service description format extension.</param>
    ///  <param name="ns">The XML namespace for the XML element added to the service description by the service description format extension.</param>
    ///  <param name="extensionPoint1">The extension point at which to run the service description format extension.</param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  class that specifies the XML element and namespace to add when running at the specified extension points.</summary>
    ///  <param name="elementName">The XML element added to the service description by the service description format extension.</param>
    ///  <param name="ns">The XML namespace for the XML element added to the service description by the service description format extension.</param>
    ///  <param name="extensionPoint1">An extension point at which to run the service description format extension.</param>
    ///  <param name="extensionPoint2">An extension point at which to run the service description format extension.</param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  class that specifies the XML element and namespace to add when running at the specified extension points.</summary>
    ///  <param name="elementName">The XML element added to the service description by the service description format extension.</param>
    ///  <param name="ns">The XML namespace for the XML element added to the service description by the service description format extension.</param>
    ///  <param name="extensionPoint1">An extension point at which to run the service description format extension.</param>
    ///  <param name="extensionPoint2">An extension point at which to run the service description format extension.</param>
    ///  <param name="extensionPoint3">An extension point at which to run the service description format extension.</param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType; extensionPoint3: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  class that specifies the XML element and namespace to add when running at the specified extension points.</summary>
    ///  <param name="elementName">The XML element added to the service description by the service description format extension.</param>
    ///  <param name="ns">The XML namespace for the XML element added to the service description by the service description format extension.</param>
    ///  <param name="extensionPoint1">An extension point at which to run the service description format extension.</param>
    ///  <param name="extensionPoint2">An extension point at which to run the service description format extension.</param>
    ///  <param name="extensionPoint3">An extension point at which to run the service description format extension.</param>
    ///  <param name="extensionPoint4">An extension point at which to run the service description format extension. </param>
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType; extensionPoint3: DDN.mscorlib.DNType; extensionPoint4: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionAttribute" />
    ///  class that specifies the XML element and namespace to add when running at the specified extension points.</summary>
    ///  <param name="elementName">The XML element added to the service description by the service description format extension. </param>
    ///  <param name="ns">The XML namespace for the XML element added to the service description by the service description format extension. </param>
    ///  <param name="extensionPoints">An array of extension points at which to run the service description format extension. </param>
    {class} function init(elementName: string; ns: string; extensionPoints: TArray<DDN.mscorlib.DNType>): DNXmlFormatExtensionAttribute; overload;

  end;

  ///<summary>Specifies that a service description format extension runs at one or more extension points. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionAttribute')]
  DNXmlFormatExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6774FB3A-8F83-34F9-852D-2DB2D8C29A84}']
  { getters & setters } 

    function get_ExtensionPoints: TArray<DDN.mscorlib.DNType>;
    procedure set_ExtensionPoints(value: TArray<DDN.mscorlib.DNType>);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The stages at which the service description format extension is to run.</summary>
    ///<returns>An array of <see cref="T:System.Type" />
    ///  that specifies the stage at which the service description format extension is to run.</returns>
    property ExtensionPoints: TArray<DDN.mscorlib.DNType> read get_ExtensionPoints write set_ExtensionPoints;
    ///<summary>Gets or sets the XML namespace for the XML element added to the service description by the service description format extension.</summary>
    ///<returns>The XML namespace for the XML element added to the service description by the service description format extension.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets the XML element added to the service description by the service description format extension.</summary>
    ///<returns>The XML element added to the service description by the service description format extension.</returns>
    property ElementName: string read get_ElementName write set_ElementName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionAttribute = class(TDNGenericImport<DNXmlFormatExtensionAttributeClass, DNXmlFormatExtensionAttribute>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionPointAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{65917D03-8A16-50D7-BD67-C94F07D86170}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionPointAttribute" />
    ///  class.</summary>
    ///  <param name="memberName">The member of the class that implements the service description format extension that can have a service description format extension associated with it.</param>
    {class} function init(memberName: string): DNXmlFormatExtensionPointAttribute;

  end;

  ///<summary>Specifies the XML namespace and XML namespace prefix to use for a service description format extension within a service description. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionPointAttribute')]
  DNXmlFormatExtensionPointAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F491878B-5101-3DA0-A124-BD84B2A35F98}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_AllowElements: Boolean;
    procedure set_AllowElements(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Specifies that the member of the class that implements the service description format extension can have a service description format extension associated with it.</summary>
    ///<returns>The member of the class that implements the service description format extension that can have a service description format extension associated with it.</returns>
    property MemberName: string read get_MemberName write set_MemberName;
    ///<summary>Gets or sets a value that indicates whether the member of the class that implements the service description format extension specified in the <see cref="P:System.Web.Services.Configuration.XmlFormatExtensionPointAttribute.MemberName" />
    ///  property can accept raw XML elements.</summary>
    ///<returns><see langword="true" />
    ///  if the member of the class that implements the service description format extension specified in the <see cref="P:System.Web.Services.Configuration.XmlFormatExtensionPointAttribute.MemberName" />
    ///  property can accept raw XML elements; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property AllowElements: Boolean read get_AllowElements write set_AllowElements;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionPointAttribute = class(TDNGenericImport<DNXmlFormatExtensionPointAttributeClass, DNXmlFormatExtensionPointAttribute>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionPrefixAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{DFFCB22C-D4B9-5488-8D5C-6278C0A2559B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute" />
    ///  class.</summary>
    {class} function init: DNXmlFormatExtensionPrefixAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute" />
    ///  class, setting the XML namespace and XML namespace prefix for a service description format extension.</summary>
    ///  <param name="prefix">The XML namespace prefix associated with a service description format extension.</param>
    ///  <param name="ns">The XML namespace associated with a service description format extension.</param>
    {class} function init(prefix: string; ns: string): DNXmlFormatExtensionPrefixAttribute; overload;

  end;

  ///<summary>Specifies the XML namespace and XML namespace prefix to use for a service description format extension within a service description. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute')]
  DNXmlFormatExtensionPrefixAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{75AB7299-DF38-33D4-926A-6B22255CB9F8}']
  { getters & setters } 

    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the XML namespace prefix associated with a service description format extension.</summary>
    ///<returns>The XML namespace prefix associated with a service description format extension.</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>Gets or sets the XML namespace associated with a service description format extension.</summary>
    ///<returns>The XML namespace associated with a service description format extension.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionPrefixAttribute = class(TDNGenericImport<DNXmlFormatExtensionPrefixAttributeClass, DNXmlFormatExtensionPrefixAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4EFF01D8-7CCB-5902-8EBA-7BB33BE9574A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HttpMethodAttribute" />
    ///  class.</summary>
    {class} function init: DNHttpMethodAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HttpMethodAttribute" />
    ///  .</summary>
    ///  <param name="returnFormatter">Initializes the <see cref="P:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter" />
    ///  property to a <see cref="T:System.Type" />
    ///  that deserializes the response from an XML Web service method. </param>
    ///  <param name="parameterFormatter">Initializes the <see cref="P:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter" />
    ///  property to a <see cref="T:System.Type" />
    ///  that serializes parameters sent from an XML Web service client to an XML Web service method. </param>
    {class} function init(returnFormatter: DDN.mscorlib.DNType; parameterFormatter: DDN.mscorlib.DNType): DNHttpMethodAttribute; overload;

  end;

  ///<summary>Applying this attribute to an XML Web service client using HTTP-GET or HTTP-POST, sets the types that serialize the parameters sent to an XML Web service method and read the response from the XML Web service method. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpMethodAttribute')]
  DNHttpMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F9700E71-4145-3C50-93EB-1E66801792F0}']
  { getters & setters } 

    function get_ReturnFormatter: DDN.mscorlib.DNType;
    procedure set_ReturnFormatter(value: DDN.mscorlib.DNType);
    function get_ParameterFormatter: DDN.mscorlib.DNType;
    procedure set_ParameterFormatter(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a <see cref="T:System.Type" />
    ///  that deserializes the response from an XML Web service method.</summary>
    ///<returns>A <see cref="T:System.Type" />
    ///  that deserializes the response from an XML Web service method. There is no default.</returns>
    property ReturnFormatter: DDN.mscorlib.DNType read get_ReturnFormatter write set_ReturnFormatter;
    ///<summary>Gets or sets a <see cref="T:System.Type" />
    ///  that serializes parameters sent from an XML Web service client to the XML Web service method.</summary>
    ///<returns>A <see cref="T:System.Type" />
    ///  that serializes parameters sent from an XML Web service client to an XML Web service method. There is no default.</returns>
    property ParameterFormatter: DDN.mscorlib.DNType read get_ParameterFormatter write set_ParameterFormatter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNHttpMethodAttribute = class(TDNGenericImport<DNHttpMethodAttributeClass, DNHttpMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMatchAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BA40C50C-E4F8-5DED-8574-3F0C136D632F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.MatchAttribute" />
    ///  class with the specified pattern.</summary>
    ///  <param name="pattern">A string that represents the pattern to match. </param>
    {class} function init(pattern: string): DNMatchAttribute;

  end;

  ///<summary>Represents the attributes of a match made using text pattern matching. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.MatchAttribute')]
  DNMatchAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DA520CF3-3A02-37A4-911A-E1F744921457}']
  { getters & setters } 

    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_Group: Int32;
    procedure set_Group(value: Int32);
    function get_Capture: Int32;
    procedure set_Capture(value: Int32);
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_MaxRepeats: Int32;
    procedure set_MaxRepeats(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a regular expression that represents the pattern to match.</summary>
    ///<returns>A regular expression that represents the pattern to match.</returns>
    property Pattern: string read get_Pattern write set_Pattern;
    ///<summary>Gets or sets a value that represents a grouping of related matches.</summary>
    ///<returns>A value that represents a grouping of related matches </returns>
    property Group: Int32 read get_Group write set_Group;
    ///<summary>Gets or sets a value that represents the index of a match within a grouping.</summary>
    ///<returns>A value that represents the index of a match within a grouping.</returns>
    property Capture: Int32 read get_Capture write set_Capture;
    ///<summary>Gets or sets a value that indicates whether the pattern to match is case insensitive.</summary>
    ///<returns><see langword="true" />
    ///  if matching is case insensitive; otherwise, <see langword="false" />
    ///  . The default value is <see langword="false" />
    ///  .</returns>
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    ///<summary>Gets or sets the maximum number of values to return from the match.</summary>
    ///<returns>The maximum number of values to return from the match. The default value is -1, which refers to returning all values.</returns>
    property MaxRepeats: Int32 read get_MaxRepeats write set_MaxRepeats;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMatchAttribute = class(TDNGenericImport<DNMatchAttributeClass, DNMatchAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapDocumentMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4509BFBC-019F-5F2C-BD15-DCDA890A695D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  class.</summary>
    {class} function init: DNSoapDocumentMethodAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  class, setting the <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.Action" />
    ///  property to the value of the <paramref name="action" />
    ///  parameter.</summary>
    ///  <param name="action">The <see langword="SOAPAction" />
    ///  HTTP header field of the SOAP request. Sets the <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.Action" />
    ///  property. </param>
    {class} function init(action: string): DNSoapDocumentMethodAttribute; overload;

  end;

  ///<summary>Applying the <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
  ///  to a method specifies that SOAP messages to and from the method use <see langword="Document" />
  ///  formatting.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapDocumentMethodAttribute')]
  DNSoapDocumentMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BF3FE395-DBD5-305B-8AE8-775F175DCDD4}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_OneWay: Boolean;
    procedure set_OneWay(value: Boolean);
    function get_RequestNamespace: string;
    procedure set_RequestNamespace(value: string);
    function get_ResponseNamespace: string;
    procedure set_ResponseNamespace(value: string);
    function get_RequestElementName: string;
    procedure set_RequestElementName(value: string);
    function get_ResponseElementName: string;
    procedure set_ResponseElementName(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_ParameterStyle: DNSoapParameterStyle;
    procedure set_ParameterStyle(value: DNSoapParameterStyle);
    function get_Binding: string;
    procedure set_Binding(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see langword="SOAPAction" />
    ///  HTTP header field of the SOAP request.</summary>
    ///<returns>The <see langword="SOAPAction" />
    ///  HTTP header field of the SOAP request. The default is http://tempuri.org/MethodName, where MethodName is the name of the XML Web service method.</returns>
    property Action: string read get_Action write set_Action;
    ///<summary>Gets or sets whether an XML Web service client waits for the Web server to finish processing an XML Web service method.</summary>
    ///<returns><see langword="true" />
    ///  if the XML Web service client does not wait for the Web server to completely process an XML Web service method. The default value is <see langword="false" />
    ///  .</returns>
    property OneWay: Boolean read get_OneWay write set_OneWay;
    ///<summary>Gets or sets the namespace associated with the SOAP request for an XML Web service method.</summary>
    ///<returns>The XML namespace associated with the SOAP request for an XML Web service method. The default is http://tempuri.org/.</returns>
    property RequestNamespace: string read get_RequestNamespace write set_RequestNamespace;
    ///<summary>Gets or sets the XML namespace associated with the SOAP response for an XML Web service method.</summary>
    ///<returns>The XML namespace associated with the SOAP response for an XML Web service method. The default is http://tempuri.org/.</returns>
    property ResponseNamespace: string read get_ResponseNamespace write set_ResponseNamespace;
    ///<summary>Gets or sets the XML element associated with the SOAP request for an XML Web service method, which is defined in a service description as an operation.</summary>
    ///<returns>The XML element associated with the SOAP request for an XML Web service method, which is defined in an service description as an operation. The default value is the name of the XML Web service method.</returns>
    property RequestElementName: string read get_RequestElementName write set_RequestElementName;
    ///<summary>Gets or sets the XML element associated with the SOAP response for an XML Web service method.</summary>
    ///<returns>The XML element associated with the SOAP request for an XML Web service method. The default value is WebServiceNameResult, where WebServiceName is the name of the XML Web service method.</returns>
    property ResponseElementName: string read get_ResponseElementName write set_ResponseElementName;
    ///<summary>Gets or sets the parameter formatting for an XML Web service method within the XML portion of a SOAP message.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  for the XML Web service method. The default is <see cref="F:System.Web.Services.Description.SoapBindingUse.Literal" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Gets or sets whether parameters are encapsulated within a single XML element beneath the <see langword="Body" />
    ///  element in the XML portion of a SOAP message.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  for SOAP messages sent to and from an XML Web service method. The default value is <see cref="F:System.Web.Services.Protocols.SoapParameterStyle.Wrapped" />
    ///  .</returns>
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle write set_ParameterStyle;
    ///<summary>Gets or sets the binding an XML Web service method is implementing an operation for.</summary>
    ///<returns>The binding an XML Web service method is implementing an operation for. The default is the name of the XML Web service with "Soap" appended.</returns>
    property Binding: string read get_Binding write set_Binding;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapDocumentMethodAttribute = class(TDNGenericImport<DNSoapDocumentMethodAttributeClass, DNSoapDocumentMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapDocumentServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9E5CEB54-04C7-5B34-A760-0FB33510E88A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  class setting all properties to their default values.</summary>
    {class} function init: DNSoapDocumentServiceAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  class setting the parameter formatting.</summary>
    ///  <param name="use">The parameter formatting of the XML Web service. Sets the <see cref="P:System.Web.Services.Protocols.SoapDocumentServiceAttribute.Use" />
    ///  property. </param>
    {class} function init(use: DNSoapBindingUse): DNSoapDocumentServiceAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
    ///  class that sets the parameter formatting and sets whether parameters are encapsulated within a single XML element, under the <see langword="Body" />
    ///  element, in SOAP messages.</summary>
    ///  <param name="use">The parameter formatting style. Sets the <see cref="P:System.Web.Services.Protocols.SoapDocumentServiceAttribute.Use" />
    ///  property. </param>
    ///  <param name="paramStyle">Sets whether parameters are encapsulated within a single XML element, under the <see langword="Body" />
    ///  element, in SOAP messages sent to and from XML Web service methods within the XML Web service. Sets the <see cref="P:System.Web.Services.Protocols.SoapDocumentServiceAttribute.ParameterStyle" />
    ///  property. </param>
    {class} function init(use: DNSoapBindingUse; paramStyle: DNSoapParameterStyle): DNSoapDocumentServiceAttribute; overload;

  end;

  ///<summary>Applying the optional <see cref="T:System.Web.Services.Protocols.SoapDocumentServiceAttribute" />
  ///  to an XML Web service sets the default format of SOAP requests and responses sent to and from XML Web service methods within the XML Web service.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapDocumentServiceAttribute')]
  DNSoapDocumentServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{97184EBC-78AC-36EB-904B-34CD02661283}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_ParameterStyle: DNSoapParameterStyle;
    procedure set_ParameterStyle(value: DNSoapParameterStyle);
    function get_RoutingStyle: DNSoapServiceRoutingStyle;
    procedure set_RoutingStyle(value: DNSoapServiceRoutingStyle);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the default parameter formatting for an XML Web service.</summary>
    ///<returns>The default <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  for the XML Web service. If not set, the default is <see cref="F:System.Web.Services.Description.SoapBindingUse.Literal" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Gets or sets the default setting that controls whether parameters are encapsulated within a single element following the <see langword="&lt;Body&gt;" />
    ///  element in the XML portion of a SOAP message for XML Web service methods of the XML Web service.</summary>
    ///<returns>The default <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  for SOAP requests and SOAP responses to and from XML Web service methods within the XML Web service. If not set, the default is <see cref="F:System.Web.Services.Protocols.SoapParameterStyle.Wrapped" />
    ///  .</returns>
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle write set_ParameterStyle;
    ///<summary>Gets or sets how SOAP messages are routed to the XML Web service.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapServiceRoutingStyle" />
    ///  that represents how SOAP messages are routed to the XML Web service. The default value is <see cref="F:System.Web.Services.Protocols.SoapServiceRoutingStyle.SoapAction" />
    ///  .</returns>
    property RoutingStyle: DNSoapServiceRoutingStyle read get_RoutingStyle write set_RoutingStyle;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapDocumentServiceAttribute = class(TDNGenericImport<DNSoapDocumentServiceAttributeClass, DNSoapDocumentServiceAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{67F431F0-3A07-5DC7-B422-4ADBAB7F0A31}']
  end;

  ///<summary>When overridden in a derived class, specifies a SOAP extension should run with an XML Web service method.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapExtensionAttribute')]
  DNSoapExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{177794D8-EA63-3982-8296-67AD5FB185A5}']
  { getters & setters } 

    function get_ExtensionType: DDN.mscorlib.DNType;
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When overridden in a derived class, gets the <see cref="T:System.Type" />
    ///  of the SOAP extension.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the SOAP extension.</returns>
    property ExtensionType: DDN.mscorlib.DNType read get_ExtensionType;
    ///<summary>When overridden in a derived class, gets or set the priority of the SOAP extension.</summary>
    ///<returns>The priority of the SOAP extension.</returns>
    property Priority: Int32 read get_Priority write set_Priority;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapExtensionAttribute = class(TDNGenericImport<DNSoapExtensionAttributeClass, DNSoapExtensionAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BEC94F14-BCD3-599C-9E4A-BF712FC6DEB6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderAttribute" />
    ///  class, setting the member of the XML Web service class representing the SOAP header contents.</summary>
    ///  <param name="memberName">The member of the XML Web service class representing the SOAP header contents. The <see cref="P:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName" />
    ///  property will be set to the value of this parameter. </param>
    {class} function init(memberName: string): DNSoapHeaderAttribute;

  end;

  ///<summary>This attribute is applied to an XML Web service method or an XML Web service client to specify a SOAP header that the XML Web service method or XML Web service client can process. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderAttribute')]
  DNSoapHeaderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{45D22740-EAD6-3F99-ADCB-7E9B0404EB0D}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Direction: DNSoapHeaderDirection;
    procedure set_Direction(value: DNSoapHeaderDirection);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the member of the XML Web service class representing the SOAP header contents.</summary>
    ///<returns>The member of the XML Web service class representing the SOAP header contents. There is no default.</returns>
    property MemberName: string read get_MemberName write set_MemberName;
    ///<summary>Gets or sets whether the SOAP header is intended for the XML Web service or the XML Web service client or both.</summary>
    ///<returns>The intended recipient of the SOAP header. The default is <see cref="F:System.Web.Services.Protocols.SoapHeaderDirection.In" />
    ///  , which means the intended recipient is just the XML Web service.</returns>
    property Direction: DNSoapHeaderDirection read get_Direction write set_Direction;
    ///<summary>This member is obsolete and has no functionality.</summary>
    ///<returns>A <see cref="T:System.Boolean" />
    ///  value.</returns>
    property Required: Boolean read get_Required write set_Required;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapHeaderAttribute = class(TDNGenericImport<DNSoapHeaderAttributeClass, DNSoapHeaderAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapRpcMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C595ED6F-698D-53A0-82E9-81E2CDD42D57}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  class, setting all properties to their default values.</summary>
    {class} function init: DNSoapRpcMethodAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  class, setting the <see cref="P:System.Web.Services.Protocols.SoapRpcMethodAttribute.Action" />
    ///  property to the value of the <paramref name="action" />
    ///  parameter.</summary>
    ///  <param name="action">The intent of the SOAP request. Sets the <see cref="P:System.Web.Services.Protocols.SoapRpcMethodAttribute.Action" />
    ///  property. </param>
    {class} function init(action: string): DNSoapRpcMethodAttribute; overload;

  end;

  ///<summary>Specifies that SOAP messages sent to and from the method use <see langword="RPC" />
  ///  formatting.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapRpcMethodAttribute')]
  DNSoapRpcMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1B104B44-0A90-3023-94C4-20DE54408AD2}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_Binding: string;
    procedure set_Binding(value: string);
    function get_OneWay: Boolean;
    procedure set_OneWay(value: Boolean);
    function get_RequestNamespace: string;
    procedure set_RequestNamespace(value: string);
    function get_ResponseNamespace: string;
    procedure set_ResponseNamespace(value: string);
    function get_RequestElementName: string;
    procedure set_RequestElementName(value: string);
    function get_ResponseElementName: string;
    procedure set_ResponseElementName(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see langword="SOAPAction" />
    ///  HTTP header field of the SOAP request.</summary>
    ///<returns>The <see langword="SOAPAction" />
    ///  HTTP header field of the SOAP request. The default is http://tempuri.org/MethodName where MethodName is the name of the XML Web service method.</returns>
    property Action: string read get_Action write set_Action;
    ///<summary>Gets or sets the binding that an XML Web service method implements an operation for.</summary>
    ///<returns>The binding an XML Web service method implements an operation for. The default is the name of the XML Web service with "Soap" appended.</returns>
    property Binding: string read get_Binding write set_Binding;
    ///<summary>Gets or sets whether an XML Web service client waits for the Web server to finish processing an XML Web service method.</summary>
    ///<returns><see langword="true" />
    ///  if the XML Web service client does not wait for the Web server to completely process an XML Web service method; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property OneWay: Boolean read get_OneWay write set_OneWay;
    ///<summary>Gets or sets the XML namespace associated with the SOAP request for an XML Web service method.</summary>
    ///<returns>The XML namespace associated with the SOAP request for an XML Web service method. The default is http://tempuri.org/.</returns>
    property RequestNamespace: string read get_RequestNamespace write set_RequestNamespace;
    ///<summary>Gets or sets the XML namespace associated with the SOAP response for an XML Web service method.</summary>
    ///<returns>The XML namespace associated with the SOAP response for an XML Web service method. The default is http://tempuri.org/.</returns>
    property ResponseNamespace: string read get_ResponseNamespace write set_ResponseNamespace;
    ///<summary>Gets or sets the XML element associated with the SOAP request for an XML Web service method.</summary>
    ///<returns>The XML element associated with the SOAP request for an XML Web service method. The default value is the name of the XML Web service method.</returns>
    property RequestElementName: string read get_RequestElementName write set_RequestElementName;
    ///<summary>Gets or sets the XML element associated with the SOAP response for an XML Web service method.</summary>
    ///<returns>The XML element associated with the SOAP request for an XML Web service method. The default value is WebServiceNameResult, where WebServiceName is the name of the XML Web service method.</returns>
    property ResponseElementName: string read get_ResponseElementName write set_ResponseElementName;
    ///<summary>Gets or sets the binding used when invoking the method.</summary>
    ///<returns>A member of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  enumeration specifying the binding used when invoking the method.</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapRpcMethodAttribute = class(TDNGenericImport<DNSoapRpcMethodAttributeClass, DNSoapRpcMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapRpcServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A5F23360-FB26-536A-B06E-2AD0019E5B3E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapRpcServiceAttribute" />
    ///  class.</summary>
    {class} function init: DNSoapRpcServiceAttribute;

  end;

  ///<summary>Sets the default format of SOAP requests and responses sent to and from XML Web service methods within the XML Web service.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapRpcServiceAttribute')]
  DNSoapRpcServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5DFE0DCA-3B64-3F13-81DE-10A317608568}']
  { getters & setters } 

    function get_RoutingStyle: DNSoapServiceRoutingStyle;
    procedure set_RoutingStyle(value: DNSoapServiceRoutingStyle);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets how SOAP messages are routed to the XML Web service.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapServiceRoutingStyle" />
    ///  that represents how SOAP messages are routed to the XML Web service. The default value is <see cref="F:System.Web.Services.Protocols.SoapServiceRoutingStyle.SoapAction" />
    ///  .</returns>
    property RoutingStyle: DNSoapServiceRoutingStyle read get_RoutingStyle write set_RoutingStyle;
    ///<summary>Gets or sets the binding used when invoking the Web service's methods.</summary>
    ///<returns>A member of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  enumeration specifying the binding used when invoking the Web service's methods.</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapRpcServiceAttribute = class(TDNGenericImport<DNSoapRpcServiceAttributeClass, DNSoapRpcServiceAttribute>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A4C76320-1067-5B55-96CE-CFA0F284F936}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  class.</summary>
    {class} function init: DNWebMethodAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  class.</summary>
    ///  <param name="enableSession">Initializes whether session state is enabled for the XML Web service method. </param>
    {class} function init(enableSession: Boolean): DNWebMethodAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  class.</summary>
    ///  <param name="enableSession">Initializes whether session state is enabled for the XML Web service method. </param>
    ///  <param name="transactionOption">Initializes the transaction support of an XML Web service method. </param>
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption): DNWebMethodAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  class.</summary>
    ///  <param name="enableSession">Initializes whether session state is enabled for the XML Web service method. </param>
    ///  <param name="transactionOption">Initializes the transaction support of an XML Web service method. </param>
    ///  <param name="cacheDuration">Initializes the number of seconds the response is cached. </param>
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption; cacheDuration: Int32): DNWebMethodAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  class.</summary>
    ///  <param name="enableSession">Initializes whether session state is enabled for the XML Web service method. </param>
    ///  <param name="transactionOption">Initializes the transaction support of an XML Web service method. </param>
    ///  <param name="cacheDuration">Initializes the number of seconds the response is cached. </param>
    ///  <param name="bufferResponse">Initializes whether the response for this request is buffered. </param>
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption; cacheDuration: Int32; bufferResponse: Boolean): DNWebMethodAttribute; overload;

  end;

  ///<summary>Adding this attribute to a method within an XML Web service created using ASP.NET makes the method callable from remote Web clients. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.WebMethodAttribute')]
  DNWebMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E13D617E-4DD7-3166-A6FF-C05E9A19C53B}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_EnableSession: Boolean;
    procedure set_EnableSession(value: Boolean);
    function get_CacheDuration: Int32;
    procedure set_CacheDuration(value: Int32);
    function get_BufferResponse: Boolean;
    procedure set_BufferResponse(value: Boolean);
    function get_TransactionOption: DDN.System.EnterpriseServices.DNTransactionOption;
    procedure set_TransactionOption(value: DDN.System.EnterpriseServices.DNTransactionOption);
    function get_MessageName: string;
    procedure set_MessageName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>A descriptive message describing the XML Web service method.</summary>
    ///<returns>A descriptive message describing the XML Web service method. The default value is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>Indicates whether session state is enabled for an XML Web service method.</summary>
    ///<returns><see langword="true" />
    ///  if session state is enabled for an XML Web service method. The default is <see langword="false" />
    ///  .</returns>
    property EnableSession: Boolean read get_EnableSession write set_EnableSession;
    ///<summary>Gets or sets the number of seconds the response should be held in the cache.</summary>
    ///<returns>The number of seconds the response should be held in the cache. The default is 0, which means the response is not cached.</returns>
    property CacheDuration: Int32 read get_CacheDuration write set_CacheDuration;
    ///<summary>Gets or sets whether the response for this request is buffered.</summary>
    ///<returns><see langword="true" />
    ///  if the response for this request is buffered; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property BufferResponse: Boolean read get_BufferResponse write set_BufferResponse;
    ///<summary>Indicates the transaction support of an XML Web service method.</summary>
    ///<returns>The transaction support of an XML Web service method. The default is <see cref="F:System.EnterpriseServices.TransactionOption.Disabled" />
    ///  .</returns>
    property TransactionOption: DDN.System.EnterpriseServices.DNTransactionOption read get_TransactionOption write set_TransactionOption;
    ///<summary>The name used for the XML Web service method in the data passed to and returned from an XML Web service method.</summary>
    ///<returns>The name used for the XML Web service method in the data passed to and from an XML Web service method. The default is the name of the XML Web service method.</returns>
    property MessageName: string read get_MessageName write set_MessageName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebMethodAttribute = class(TDNGenericImport<DNWebMethodAttributeClass, DNWebMethodAttribute>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{96FA1B76-25D8-5530-8EE6-6DCF9CD4F4BD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebServiceAttribute" />
    ///  class.</summary>
    {class} function init: DNWebServiceAttribute;

  end;

  ///<summary>Used to add additional information to an XML Web service, such as a string describing its functionality.</summary>
  [DNTypeName('System.Web.Services.WebServiceAttribute')]
  DNWebServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{7986D9D3-2B67-3D0A-A674-27FC7A009600}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>A descriptive message for the XML Web service.</summary>
    ///<returns>The text describing the functionality of the XML Web service.</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>Gets or sets the default XML namespace to use for the XML Web service.</summary>
    ///<returns>The default XML namespace to use for the XML Web service. The default is specified in the <see cref="F:System.Web.Services.WebServiceAttribute.DefaultNamespace" />
    ///  property.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets the name of the XML Web service.</summary>
    ///<returns>The name for the XML Web service. Default value is the name of the class implementing the XML Web service.</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebServiceAttribute = class(TDNGenericImport<DNWebServiceAttributeClass, DNWebServiceAttribute>)
  public const
    ///<summary>The default value for the <see cref="P:System.Web.Services.WebServiceAttribute.Namespace" />
    ///  property. This field is constant.</summary>
   DefaultNamespace = 'http://tempuri.org/';
  end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceBindingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B99651D7-502C-54A3-B518-02B864EE4137}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  class.</summary>
    {class} function init: DNWebServiceBindingAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  class setting the name of the binding the XML Web service method is implementing.</summary>
    ///  <param name="name">The name of the binding an XML Web service method is implementing an operation for. Sets the <see cref="P:System.Web.Services.WebServiceBindingAttribute.Name" />
    ///  property. </param>
    {class} function init(name: string): DNWebServiceBindingAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the binding an XML Web service method is implementing an operation for. Sets the <see cref="P:System.Web.Services.WebServiceBindingAttribute.Name" />
    ///  property. </param>
    ///  <param name="ns">The namespace associated with the binding. Sets the <see cref="P:System.Web.Services.WebServiceBindingAttribute.Namespace" />
    ///  property. </param>
    {class} function init(name: string; ns: string): DNWebServiceBindingAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebServiceBindingAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the binding an XML Web service method is implementing an operation for. Sets the <see cref="P:System.Web.Services.WebServiceBindingAttribute.Name" />
    ///  property. </param>
    ///  <param name="ns">The namespace associated with the binding. Sets the <see cref="P:System.Web.Services.WebServiceBindingAttribute.Namespace" />
    ///  property. </param>
    ///  <param name="location">The location where the binding is defined. </param>
    {class} function init(name: string; ns: string; location: string): DNWebServiceBindingAttribute; overload;

  end;

  ///<summary>Declares a binding that defines one or more XML Web service methods. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.WebServiceBindingAttribute')]
  DNWebServiceBindingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0A8A2DAB-197E-3961-9795-4622CD2A626E}']
  { getters & setters } 

    function get_ConformsTo: DNWsiProfiles;
    procedure set_ConformsTo(value: DNWsiProfiles);
    function get_EmitConformanceClaims: Boolean;
    procedure set_EmitConformanceClaims(value: Boolean);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the Web Services Interoperability (WSI) specification to which the binding claims to conform.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.WsiProfiles" />
    ///  values, indicating a WSI specification.</returns>
    property ConformsTo: DNWsiProfiles read get_ConformsTo write set_ConformsTo;
    ///<summary>Gets or sets a value that indicates whether the binding emits conformance claims.</summary>
    ///<returns><see langword="true" />
    ///  if the binding emits conformance claims; otherwise, <see langword="false" />
    ///  .</returns>
    property EmitConformanceClaims: Boolean read get_EmitConformanceClaims write set_EmitConformanceClaims;
    ///<summary>Gets or sets the location where the binding is defined.</summary>
    ///<returns>The location where the binding is defined. The default is the URL of the XML Web service to which the attribute is applied.</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>Gets or sets the name of the binding.</summary>
    ///<returns>The name of the binding. The default is the name of the XML Web service with "Soap" appended.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the namespace associated with the binding.</summary>
    ///<returns>The namespace for the binding. The default is http://tempuri.org/.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebServiceBindingAttribute = class(TDNGenericImport<DNWebServiceBindingAttributeClass, DNWebServiceBindingAttribute>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{63ABA720-5224-524B-AE8C-1966645DF889}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  class.</summary>
    {class} function init: DNBasicProfileViolationCollection;

  end;

  ///<summary>Contains a strongly typed collection of <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
  ///  objects.</summary>
  [DNTypeName('System.Web.Services.Description.BasicProfileViolationCollection')]
  DNBasicProfileViolationCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{86B87E3A-8624-330A-9689-E1BD24FC6FDA}']
  { getters & setters } 

    function get_Item(index: Int32): DNBasicProfileViolation;
    procedure set_Item(index: Int32; value: DNBasicProfileViolation);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Inserts a <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  to the collection at the specified location.</summary>
    ///  <param name="index">The zero-based index in the collection at which to insert the <paramref name="violation" />
    ///  .</param>
    ///  <param name="violation">The <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  to insert.</param>
    procedure Insert(index: Int32; violation: DNBasicProfileViolation);
    ///<summary>Returns the zero-based index of a specified <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  in the collection.</summary>
    ///  <param name="violation">The <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  to find in the collection.</param>
    ///<returns>The zero-based index of the specified <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  , or -1 if the element was not found in the collection.</returns>
    function IndexOf(violation: DNBasicProfileViolation): Int32;
    ///<summary>Checks whether the collection contains the specified <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  object.</summary>
    ///  <param name="violation">The <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  object to locate in the collection.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  object exists in the collection; otherwise <see langword="false" />
    ///  .</returns>
    function &Contains(violation: DNBasicProfileViolation): Boolean;
    ///<summary>Removes a specified <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  from the collection.</summary>
    ///  <param name="violation">The <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  to remove from the collection.</param>
    procedure Remove(violation: DNBasicProfileViolation);
    ///<summary>Copies the elements from the collection to an array, starting at a specified index of the array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  to which to copy the contents of the collection.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNBasicProfileViolation>; index: Int32);
    ///<summary>Returns a <see cref="T:System.String" />
    ///  representation of the <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  objects in the collection.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  representation of the <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  objects in the collection.</returns>
    function ToString: string;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Int32]: DNBasicProfileViolation read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBasicProfileViolationCollection = class(TDNGenericImport<DNBasicProfileViolationCollectionClass, DNBasicProfileViolationCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimePartCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{973FA0FA-7618-520B-B0FF-3218C4A09ED0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  class. </summary>
    {class} function init: DNMimePartCollection;

  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.MimePart" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimePartCollection')]
  DNMimePartCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{0B454C50-010C-3774-8F73-216BABB06416}']
  { getters & setters } 

    function get_Item(index: Int32): DNMimePart;
    procedure set_Item(index: Int32; value: DNMimePart);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.MimePart" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  .</summary>
    ///  <param name="mimePart">The <see cref="T:System.Web.Services.Description.MimePart" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="mimePart" />
    ///  parameter has been added.</returns>
    function Add(mimePart: DNMimePart): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.MimePart" />
    ///  to the <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  at the specified index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="mimePart" />
    ///  parameter. </param>
    ///  <param name="mimePart">The <see cref="T:System.Web.Services.Description.MimePart" />
    ///  to add to the collection. </param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; mimePart: DNMimePart);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.MimePart" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="mimePart">The <see cref="T:System.Web.Services.Description.MimePart" />
    ///  for which to search the <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  . </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(mimePart: DNMimePart): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.MimePart" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  .</summary>
    ///  <param name="mimePart">The <see cref="T:System.Web.Services.Description.MimePart" />
    ///  to check for collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="mimePart" />
    ///  parameter is a member of the <see langword="MimePartCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(mimePart: DNMimePart): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.MimePart" />
    ///  from the <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  .</summary>
    ///  <param name="mimePart">The <see cref="T:System.Web.Services.Description.MimePart" />
    ///  to remove from the collection. </param>
    procedure Remove(mimePart: DNMimePart);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.MimePart" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.MimePart" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNMimePart>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMimePart read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMimePartCollection = class(TDNGenericImport<DNMimePartCollectionClass, DNMimePartCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextMatchCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{52D4D7AB-3B34-52F9-A829-F8B6D45327B1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  class. </summary>
    {class} function init: DNMimeTextMatchCollection;

  end;

  ///<summary>Provides a collection of instances of the <see cref="T:System.Web.Services.Description.MimeTextMatch" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimeTextMatchCollection')]
  DNMimeTextMatchCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{6BDD8926-90C4-3AE9-B98D-C67D99EE6D20}']
  { getters & setters } 

    function get_Item(index: Int32): DNMimeTextMatch;
    procedure set_Item(index: Int32; value: DNMimeTextMatch);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  .</summary>
    ///  <param name="match">The <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="match" />
    ///  parameter has been added.</returns>
    function Add(match: DNMimeTextMatch): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  to the <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  at the specified index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="match" />
    ///  parameter. </param>
    ///  <param name="match">The <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  to add to the collection. </param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; match: DNMimeTextMatch);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="match">The <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(match: DNMimeTextMatch): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  .</summary>
    ///  <param name="match">The <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="match" />
    ///  parameter is a member of the <see langword="MimeTextMatchCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(match: DNMimeTextMatch): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  from the <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  .</summary>
    ///  <param name="match">The <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  to remove from the collection. </param>
    procedure Remove(match: DNMimeTextMatch);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">The array of type <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNMimeTextMatch>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMimeTextMatch read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMimeTextMatchCollection = class(TDNGenericImport<DNMimeTextMatchCollectionClass, DNMimeTextMatchCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionBaseCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{4AC8E72D-88D1-54CB-B874-9DE9E925522C}']
  end;

  ///<summary>Forms the basis for the strongly typed collections that are members of the <see cref="N:System.Web.Services.Description" />
  ///  namespace.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionBaseCollection')]
  DNServiceDescriptionBaseCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{7DA9E46B-0948-3A11-85DE-31963662B8C1}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionBaseCollection = class(TDNGenericImport<DNServiceDescriptionBaseCollectionClass, DNServiceDescriptionBaseCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{E245DCED-1E9F-5B2C-9A6E-6C4629A1A42F}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.Binding" />
  ///  class supported by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.BindingCollection')]
  DNBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{8C68ECA6-C3B7-3034-8C06-39A90BA373BB}']
  { getters & setters } 

    function get_Item(index: Int32): DNBinding; overload;
    procedure set_Item(index: Int32; value: DNBinding);
    function get_Item(name: string): DNBinding; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Binding" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  .</summary>
    ///  <param name="binding">The <see cref="T:System.Web.Services.Description.Binding" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="binding" />
    ///  parameter has been added.</returns>
    function Add(binding: DNBinding): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Binding" />
    ///  to the <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="binding" />
    ///  parameter. </param>
    ///  <param name="binding">The <see cref="T:System.Web.Services.Description.Binding" />
    ///  to be added to the collection. </param>
    procedure Insert(index: Int32; binding: DNBinding);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.Binding" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="binding">The <see cref="T:System.Web.Services.Description.Binding" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(binding: DNBinding): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.Binding" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  .</summary>
    ///  <param name="binding">A <see cref="T:System.Web.Services.Description.Binding" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="binding" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(binding: DNBinding): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.Binding" />
    ///  from the <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  .</summary>
    ///  <param name="binding">The <see cref="T:System.Web.Services.Description.Binding" />
    ///  to remove from the collection. </param>
    procedure Remove(binding: DNBinding);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.BindingCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.Binding" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.Binding" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNBinding read get_Item write set_Item; default;
    property Item[name: string]: DNBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBindingCollection = class(TDNGenericImport<DNBindingCollectionClass, DNBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNFaultBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{6148FA8B-3259-5672-9043-1FDA7BF74A2B}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.FaultBinding" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.FaultBindingCollection')]
  DNFaultBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{B99D3470-2A5C-3E49-BC7F-D8437FB9D1EF}']
  { getters & setters } 

    function get_Item(index: Int32): DNFaultBinding; overload;
    procedure set_Item(index: Int32; value: DNFaultBinding);
    function get_Item(name: string): DNFaultBinding; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  .</summary>
    ///  <param name="bindingOperationFault">The <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="bindingOperationFault" />
    ///  parameter has been added.</returns>
    function Add(bindingOperationFault: DNFaultBinding): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  to the <see langword="FaultBindingCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="bindingOperationFault" />
    ///  parameter. </param>
    ///  <param name="bindingOperationFault">The <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  to add to the collection. </param>
    procedure Insert(index: Int32; bindingOperationFault: DNFaultBinding);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="bindingOperationFault">The <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(bindingOperationFault: DNFaultBinding): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  .</summary>
    ///  <param name="bindingOperationFault">The <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="bindingOperationFault" />
    ///  parameter is a member of the <see langword="FaultBindingCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(bindingOperationFault: DNFaultBinding): Boolean;
    ///<summary>Removes the first occurrence the specified <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  from the <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  .</summary>
    ///  <param name="bindingOperationFault">The <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  to remove from the collection. </param>
    procedure Remove(bindingOperationFault: DNFaultBinding);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNFaultBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNFaultBinding read get_Item write set_Item; default;
    property Item[name: string]: DNFaultBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNFaultBindingCollection = class(TDNGenericImport<DNFaultBindingCollectionClass, DNFaultBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNImportCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{47CC628D-820B-544A-9F3A-86394354AF79}']
  end;

  ///<summary>Provides a collection of instances of the <see cref="T:System.Web.Services.Description.Import" />
  ///  class representing documents to be imported into the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.ImportCollection')]
  DNImportCollection = interface(DNServiceDescriptionBaseCollection)
  ['{7CCAD7FE-9CE1-3CDA-B03C-89810FB1569B}']
  { getters & setters } 

    function get_Item(index: Int32): DNImport;
    procedure set_Item(index: Int32; value: DNImport);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Import" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  .</summary>
    ///  <param name="import">The <see cref="T:System.Web.Services.Description.Import" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="import" />
    ///  parameter has been added.</returns>
    function Add(import: DNImport): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Import" />
    ///  instance to the <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="import" />
    ///  parameter. </param>
    ///  <param name="import">The <see cref="T:System.Web.Services.Description.Import" />
    ///  to add to the collection. </param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; import: DNImport);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.Import" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="import">The <see cref="T:System.Web.Services.Description.Import" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(import: DNImport): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.Import" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  .</summary>
    ///  <param name="import">The <see cref="T:System.Web.Services.Description.Import" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="import" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(import: DNImport): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.Import" />
    ///  from the <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  .</summary>
    ///  <param name="import">The <see cref="T:System.Web.Services.Description.Import" />
    ///  to remove from the collection. </param>
    procedure Remove(import: DNImport);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.ImportCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.Import" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.Import" />
    ///  serving as the destination of the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNImport>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNImport read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNImportCollection = class(TDNGenericImport<DNImportCollectionClass, DNImportCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{4FACAE3D-EEFC-5F3E-85A4-0C617046DE1F}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.Message" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MessageCollection')]
  DNMessageCollection = interface(DNServiceDescriptionBaseCollection)
  ['{42003B6D-71EB-3EAC-B117-5729E10AB7EE}']
  { getters & setters } 

    function get_Item(index: Int32): DNMessage; overload;
    procedure set_Item(index: Int32; value: DNMessage);
    function get_Item(name: string): DNMessage; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Message" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  .</summary>
    ///  <param name="message">The <see cref="T:System.Web.Services.Description.Message" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="message" />
    ///  parameter has been added.</returns>
    function Add(message: DNMessage): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Message" />
    ///  to the <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="message" />
    ///  parameter. </param>
    ///  <param name="message">The <see cref="T:System.Web.Services.Description.Message" />
    ///  to add to the collection. </param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; message: DNMessage);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.Message" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="message">The <see cref="T:System.Web.Services.Description.Message" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(message: DNMessage): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.Message" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  .</summary>
    ///  <param name="message">The <see cref="T:System.Web.Services.Description.Message" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="message" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(message: DNMessage): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.Message" />
    ///  from the <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  .</summary>
    ///  <param name="message">The <see cref="T:System.Web.Services.Description.Message" />
    ///  to remove from the collection. </param>
    procedure Remove(message: DNMessage);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.MessageCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.Message" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.Message" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNMessage>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMessage read get_Item write set_Item; default;
    property Item[name: string]: DNMessage read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMessageCollection = class(TDNGenericImport<DNMessageCollectionClass, DNMessageCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessagePartCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{2B802EFB-88B9-531D-ADDC-3C9A237ED86C}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.MessagePart" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MessagePartCollection')]
  DNMessagePartCollection = interface(DNServiceDescriptionBaseCollection)
  ['{928087D1-7AF0-3265-9C59-EB140C05D423}']
  { getters & setters } 

    function get_Item(index: Int32): DNMessagePart; overload;
    procedure set_Item(index: Int32; value: DNMessagePart);
    function get_Item(name: string): DNMessagePart; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  .</summary>
    ///  <param name="messagePart">The <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="messagePart" />
    ///  parameter has been added.</returns>
    function Add(messagePart: DNMessagePart): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to the <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="messagePart" />
    ///  parameter. </param>
    ///  <param name="messagePart">The <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to add to the collection. </param>
    procedure Insert(index: Int32; messagePart: DNMessagePart);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="messagePart">The <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(messagePart: DNMessagePart): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  is a member of the <see langword="MessagePartCollection" />
    ///  .</summary>
    ///  <param name="messagePart">The <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="messagePart" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(messagePart: DNMessagePart): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  from the <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  .</summary>
    ///  <param name="messagePart">The <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to remove from the collection. </param>
    procedure Remove(messagePart: DNMessagePart);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  serving as the destination of the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNMessagePart>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMessagePart read get_Item write set_Item; default;
    property Item[name: string]: DNMessagePart read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMessagePartCollection = class(TDNGenericImport<DNMessagePartCollectionClass, DNMessagePartCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{192B8812-765F-5EED-BAED-31502E539658}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationBindingCollection')]
  DNOperationBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{FE6D8463-D80C-387B-8126-7FCFB2AE1A68}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationBinding;
    procedure set_Item(index: Int32; value: DNOperationBinding);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  .</summary>
    ///  <param name="bindingOperation">The <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="bindingOperation" />
    ///  parameter has been added.</returns>
    function Add(bindingOperation: DNOperationBinding): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  instance to the <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="bindingOperation" />
    ///  parameter. </param>
    ///  <param name="bindingOperation">The <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  to add to the collection. </param>
    procedure Insert(index: Int32; bindingOperation: DNOperationBinding);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="bindingOperation">The <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(bindingOperation: DNOperationBinding): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  .</summary>
    ///  <param name="bindingOperation">The <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="bindingOperation" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(bindingOperation: DNOperationBinding): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  from the <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  .</summary>
    ///  <param name="bindingOperation">The <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  to remove from the collection. </param>
    procedure Remove(bindingOperation: DNOperationBinding);
    ///<summary>Copies the entire <see langword="OperationBindingCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNOperationBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationBinding read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationBindingCollection = class(TDNGenericImport<DNOperationBindingCollectionClass, DNOperationBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{AA10AE7F-697B-5F31-9068-75B0CD8B333F}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.Operation" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationCollection')]
  DNOperationCollection = interface(DNServiceDescriptionBaseCollection)
  ['{052A90D8-17DC-3AFA-9A25-99600882790F}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperation;
    procedure set_Item(index: Int32; value: DNOperation);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Operation" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  .</summary>
    ///  <param name="operation">The <see cref="T:System.Web.Services.Description.Operation" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="operation" />
    ///  parameter has been added.</returns>
    function Add(operation: DNOperation): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Operation" />
    ///  to the <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="operation" />
    ///  parameter. </param>
    ///  <param name="operation">The <see cref="T:System.Web.Services.Description.Operation" />
    ///  to add to the collection. </param>
    procedure Insert(index: Int32; operation: DNOperation);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.Operation" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="operation">The <see cref="T:System.Web.Services.Description.Operation" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(operation: DNOperation): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.Operation" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  .</summary>
    ///  <param name="operation">The <see cref="T:System.Web.Services.Description.Operation" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="operation" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(operation: DNOperation): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.Operation" />
    ///  from the <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  .</summary>
    ///  <param name="operation">The <see cref="T:System.Web.Services.Description.Operation" />
    ///  to remove from the collection. </param>
    procedure Remove(operation: DNOperation);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.OperationCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.Operation" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.Operation" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNOperation>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperation read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationCollection = class(TDNGenericImport<DNOperationCollectionClass, DNOperationCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationFaultCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{F9F64D37-457A-5231-B828-D13433123369}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.OperationFault" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationFaultCollection')]
  DNOperationFaultCollection = interface(DNServiceDescriptionBaseCollection)
  ['{11F638AE-E3B2-3568-B40C-6132989A232C}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationFault; overload;
    procedure set_Item(index: Int32; value: DNOperationFault);
    function get_Item(name: string): DNOperationFault; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  .</summary>
    ///  <param name="operationFaultMessage">The <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="operationFaultMessage" />
    ///  parameter has been added.</returns>
    function Add(operationFaultMessage: DNOperationFault): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  to the <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="operationFaultMessage" />
    ///  parameter. </param>
    ///  <param name="operationFaultMessage">The <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  to add to the collection. </param>
    procedure Insert(index: Int32; operationFaultMessage: DNOperationFault);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="operationFaultMessage">The <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(operationFaultMessage: DNOperationFault): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  .</summary>
    ///  <param name="operationFaultMessage">The <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="operationFaultMessage" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(operationFaultMessage: DNOperationFault): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  from the <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  .</summary>
    ///  <param name="operationFaultMessage">The <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  to remove from the collection. </param>
    procedure Remove(operationFaultMessage: DNOperationFault);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.OperationFaultCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  serving as the destination of the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNOperationFault>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationFault read get_Item write set_Item; default;
    property Item[name: string]: DNOperationFault read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationFaultCollection = class(TDNGenericImport<DNOperationFaultCollectionClass, DNOperationFaultCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationMessageCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{5255AC19-FCD8-56DC-B6A3-55C77C4A7273}']
  end;

  ///<summary>Represents a collection of <see cref="T:System.Web.Services.Description.OperationInput" />
  ///  and <see cref="T:System.Web.Services.Description.OperationOutput" />
  ///  messages related to an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationMessageCollection')]
  DNOperationMessageCollection = interface(DNServiceDescriptionBaseCollection)
  ['{4E941E36-9B9C-3AB7-95F9-E53DAFED969F}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationMessage;
    procedure set_Item(index: Int32; value: DNOperationMessage);
    function get_Input: DNOperationInput;
    function get_Output: DNOperationOutput;
    function get_Flow: DNOperationFlow;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  .</summary>
    ///  <param name="operationMessage">The <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  to add to the collection.</param>
    ///<returns>The zero-based index where the <paramref name="operationMessage" />
    ///  parameter has been added.</returns>
    function Add(operationMessage: DNOperationMessage): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  to the <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="operationMessage" />
    ///  parameter.</param>
    ///  <param name="operationMessage">The <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  to add to the collection.</param>
    procedure Insert(index: Int32; operationMessage: DNOperationMessage);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="operationMessage">The <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  for which to search in the collection.</param>
    ///<returns>The zero-based index of the specified operation message, or -1 if the element was not found in the collection.</returns>
    function IndexOf(operationMessage: DNOperationMessage): Int32;
    ///<summary>Determines whether the specified <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  .</summary>
    ///  <param name="operationMessage">The <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  for which to check collection membership.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="operationMessage" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(operationMessage: DNOperationMessage): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  from the <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  .</summary>
    ///  <param name="operationMessage">The <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  to remove from the collection.</param>
    procedure Remove(operationMessage: DNOperationMessage);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  to a compatible one-dimensional array of type <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  serving as the destination for the copy action.</param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection.</param>
    procedure CopyTo(&array: TArray<DNOperationMessage>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationMessage read get_Item write set_Item; default;
    ///<summary>Gets the first occurrence of an <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  within the collection.</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  within the collection.</returns>
    property Input: DNOperationInput read get_Input;
    ///<summary>Gets the first occurrence of an <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  within the collection.</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  within the collection.</returns>
    property Output: DNOperationOutput read get_Output;
    ///<summary>Gets the type of transmission supported by the <see cref="T:System.Web.Services.Description.OperationMessageCollection" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.OperationFlow" />
    ///  values. The default is <see langword="SolicitResponse" />
    ///  .</returns>
    property Flow: DNOperationFlow read get_Flow;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationMessageCollection = class(TDNGenericImport<DNOperationMessageCollectionClass, DNOperationMessageCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{80A6DC27-6C52-595B-9A12-2E199D308278}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.Port" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.PortCollection')]
  DNPortCollection = interface(DNServiceDescriptionBaseCollection)
  ['{B8FC5BCF-9A8C-37BF-96B5-0E6163FC1CE0}']
  { getters & setters } 

    function get_Item(index: Int32): DNPort; overload;
    procedure set_Item(index: Int32; value: DNPort);
    function get_Item(name: string): DNPort; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Port" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  .</summary>
    ///  <param name="port">The <see cref="T:System.Web.Services.Description.Port" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="port" />
    ///  parameter has been added.</returns>
    function Add(port: DNPort): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Port" />
    ///  instance to the <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  at the specified index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="port" />
    ///  parameter.</param>
    ///  <param name="port">The <see cref="T:System.Web.Services.Description.Port" />
    ///  to add to the collection. </param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; port: DNPort);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.Port" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="port">The <see cref="T:System.Web.Services.Description.Port" />
    ///  for which to search in the collection.</param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(port: DNPort): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.Port" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  .</summary>
    ///  <param name="port">The <see cref="T:System.Web.Services.Description.Port" />
    ///  for which to check collection membership.</param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Web.Services.Description.Port" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(port: DNPort): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.Port" />
    ///  from the <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  .</summary>
    ///  <param name="port">The <see cref="T:System.Web.Services.Description.Port" />
    ///  to remove from the collection. </param>
    procedure Remove(port: DNPort);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.PortCollection" />
    ///  to a one-dimensional array of type <see cref="T:System.Web.Services.Description.Port" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.Port" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNPort>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPort read get_Item write set_Item; default;
    property Item[name: string]: DNPort read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPortCollection = class(TDNGenericImport<DNPortCollectionClass, DNPortCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortTypeCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{34807EB7-4837-5001-9162-57F7AF9EA7F8}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.PortType" />
  ///  class; that is, a collection of sets of operations supported by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.PortTypeCollection')]
  DNPortTypeCollection = interface(DNServiceDescriptionBaseCollection)
  ['{DC1F42E1-36A8-3FB5-9760-FF826B7B7C13}']
  { getters & setters } 

    function get_Item(index: Int32): DNPortType; overload;
    procedure set_Item(index: Int32; value: DNPortType);
    function get_Item(name: string): DNPortType; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.PortType" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  .</summary>
    ///  <param name="portType">The <see cref="T:System.Web.Services.Description.PortType" />
    ///  to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="portType" />
    ///  parameter has been added.</returns>
    function Add(portType: DNPortType): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.PortType" />
    ///  to the <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="portType" />
    ///  parameter. </param>
    ///  <param name="portType">The <see cref="T:System.Web.Services.Description.PortType" />
    ///  to add to the collection. </param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; portType: DNPortType);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.PortType" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="portType">The <see cref="T:System.Web.Services.Description.PortType" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(portType: DNPortType): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.PortType" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  .</summary>
    ///  <param name="portType">The <see cref="T:System.Web.Services.Description.PortType" />
    ///  for which to check for collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="portType" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(portType: DNPortType): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.PortType" />
    ///  from the <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  .</summary>
    ///  <param name="portType">The <see cref="T:System.Web.Services.Description.PortType" />
    ///  to remove from the collection. </param>
    procedure Remove(portType: DNPortType);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.PortTypeCollection" />
    ///  to a one-dimensional array of type <see cref="T:System.Web.Services.Description.PortType" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.PortType" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNPortType>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPortType read get_Item write set_Item; default;
    property Item[name: string]: DNPortType read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPortTypeCollection = class(TDNGenericImport<DNPortTypeCollectionClass, DNPortTypeCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{3E690398-8498-53AC-931D-503CBAEDFB47}']
  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.Service" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceCollection')]
  DNServiceCollection = interface(DNServiceDescriptionBaseCollection)
  ['{6E65C6E9-2CDF-3F63-A49D-B10C19EB64D4}']
  { getters & setters } 

    function get_Item(index: Int32): DNService; overload;
    procedure set_Item(index: Int32; value: DNService);
    function get_Item(name: string): DNService; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Service" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  .</summary>
    ///  <param name="service">The <see cref="T:System.Web.Services.Description.Service" />
    ///  instance to add to the collection. </param>
    ///<returns>The zero-based index where the <paramref name="service" />
    ///  parameter has been added.</returns>
    function Add(service: DNService): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.Service" />
    ///  instance to the <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="service" />
    ///  parameter. </param>
    ///  <param name="service">The <see cref="T:System.Web.Services.Description.Service" />
    ///  to add to the collection. </param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; service: DNService);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.Service" />
    ///  and returns the zero-based index of the first occurrence within the <see langword="ServiceCollection" />
    ///  .</summary>
    ///  <param name="service">The <see cref="T:System.Web.Services.Description.Service" />
    ///  for which to search in the collection. </param>
    ///<returns>A 32-bit signed integer.</returns>
    function IndexOf(service: DNService): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.Service" />
    ///  instance is a member of the <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  .</summary>
    ///  <param name="service">The <see cref="T:System.Web.Services.Description.Service" />
    ///  for which to check collection membership. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="service" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(service: DNService): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.Service" />
    ///  from the <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  .</summary>
    ///  <param name="service">The <see cref="T:System.Web.Services.Description.Service" />
    ///  to remove from the collection. </param>
    procedure Remove(service: DNService);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.ServiceCollection" />
    ///  to a one-dimensional array of type <see cref="T:System.Web.Services.Description.Service" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.Service" />
    ///  serving as the destination for the copy action. </param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection. </param>
    procedure CopyTo(&array: TArray<DNService>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNService read get_Item write set_Item; default;
    property Item[name: string]: DNService read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceCollection = class(TDNGenericImport<DNServiceCollectionClass, DNServiceCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{E748C7DE-515D-535A-9CE9-BD9C4717F7E0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  class.</summary>
    {class} function init: DNServiceDescriptionCollection;

  end;

  ///<summary>Represents a collection of instances of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionCollection')]
  DNServiceDescriptionCollection = interface(DNServiceDescriptionBaseCollection)
  ['{285DC0B4-86A5-3E75-8B56-57E607ABAC40}']
  { getters & setters } 

    function get_Item(index: Int32): DNServiceDescription; overload;
    procedure set_Item(index: Int32; value: DNServiceDescription);
    function get_Item(ns: string): DNServiceDescription; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  .</summary>
    ///  <param name="serviceDescription">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to add to the collection.</param>
    ///<returns>The zero-based index where the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  parameter has been added.</returns>
    function Add(serviceDescription: DNServiceDescription): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instance to the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="serviceDescription" />
    ///  parameter.</param>
    ///  <param name="serviceDescription">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to add to the collection.</param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  .</exception>
    procedure Insert(index: Int32; serviceDescription: DNServiceDescription);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  and returns the zero-based index of the first occurrence within the collection.</summary>
    ///  <param name="serviceDescription">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  for which to search in the collection.</param>
    ///<returns>The zero-based index of the specified service description, or -1 if the element was not found in the collection.</returns>
    function IndexOf(serviceDescription: DNServiceDescription): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  is a member of the collection.</summary>
    ///  <param name="serviceDescription">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  for which to check collection membership.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="serviceDescription" />
    ///  parameter is a member of the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(serviceDescription: DNServiceDescription): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  from the collection.</summary>
    ///  <param name="serviceDescription">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to remove from the collection.</param>
    procedure Remove(serviceDescription: DNServiceDescription);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  to a one-dimensional array of type <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  serving as the destination of the copy action.</param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection.</param>
    procedure CopyTo(&array: TArray<DNServiceDescription>; index: Int32);
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  and returns the <see cref="T:System.Web.Services.Description.Message" />
    ///  with the specified name that is a member of one of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances contained in the collection.</summary>
    ///  <param name="name">The <see cref="T:System.Xml.XmlQualifiedName" />
    ///  , passed by reference, whose <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  property is shared by the <see cref="T:System.Web.Services.Description.Message" />
    ///  returned.</param>
    ///<returns>The message with the specified name.</returns>
    ///<exception cref="T:System.Exception">The specified <see langword="Message" />
    ///  is not a member of any <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances within the collection. </exception>
    function GetMessage(name: DDN.System.Xml.DNXmlQualifiedName): DNMessage;
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  and returns the <see cref="T:System.Web.Services.Description.PortType" />
    ///  with the specified name that is a member of one of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances contained in the collection.</summary>
    ///  <param name="name">The <see cref="T:System.Xml.XmlQualifiedName" />
    ///  , passed by reference, whose <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  property is shared by the <see cref="T:System.Web.Services.Description.PortType" />
    ///  returned.</param>
    ///<returns>The <see langword="PortType" />
    ///  with the specified name.</returns>
    ///<exception cref="T:System.Exception">The specified <see langword="PortType" />
    ///  is not a member of any <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances within the collection.</exception>
    function GetPortType(name: DDN.System.Xml.DNXmlQualifiedName): DNPortType;
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  and returns the <see cref="T:System.Web.Services.Description.Service" />
    ///  with the specified name that is a member of one of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances contained in the collection.</summary>
    ///  <param name="name">The <see cref="T:System.Xml.XmlQualifiedName" />
    ///  , passed by reference, whose <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  property is shared by the <see cref="T:System.Web.Services.Description.Service" />
    ///  returned.</param>
    ///<returns>The service with the specified name.</returns>
    ///<exception cref="T:System.Exception">The specified <see langword="Service" />
    ///  is not a member of any <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances within the collection. </exception>
    function GetService(name: DDN.System.Xml.DNXmlQualifiedName): DNService;
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  and returns the <see cref="T:System.Web.Services.Description.Binding" />
    ///  with the specified name that is a member of one of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances contained in the collection.</summary>
    ///  <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  whose <see cref="P:System.Xml.XmlQualifiedName.Name" />
    ///  property is used to retrieve a <see cref="T:System.Web.Services.Description.Binding" />
    ///  instance.</param>
    ///<returns>The binding with the specified name.</returns>
    ///<exception cref="T:System.Exception">The specified <see langword="Binding" />
    ///  is not a member of any <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances within the collection.</exception>
    function GetBinding(name: DDN.System.Xml.DNXmlQualifiedName): DNBinding;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNServiceDescription read get_Item write set_Item; default;
    property Item[ns: string]: DNServiceDescription read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionCollection = class(TDNGenericImport<DNServiceDescriptionCollectionClass, DNServiceDescriptionCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionFormatExtensionCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{2D29C8F5-B5EA-5751-ACDB-CC9CCC736DA2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  class.</summary>
    ///  <param name="parent">The object of which this collection is a member.</param>
    {class} function init(parent: DDN.mscorlib.DNObject): DNServiceDescriptionFormatExtensionCollection;

  end;

  ///<summary>Represents the collection of extensibility elements used by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection')]
  DNServiceDescriptionFormatExtensionCollection = interface(DNServiceDescriptionBaseCollection)
  ['{498CDDD4-27D6-3C72-B879-3549553B706E}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  to the end of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  .</summary>
    ///  <param name="extension">The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , passed by reference, to add to the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  .</param>
    ///<returns>The zero-based index where the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  has been added.</returns>
    function Add(extension: DDN.mscorlib.DNObject): Int32;
    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  to the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  at the specified zero-based index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <paramref name="extension" />
    ///  parameter.</param>
    ///  <param name="extension">The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  to add to the collection.</param>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero.- or - The <paramref name="index" />
    ///  parameter is greater than <see cref="P:System.Collections.CollectionBase.Count" />
    ///  . </exception>
    procedure Insert(index: Int32; extension: DDN.mscorlib.DNObject);
    ///<summary>Searches for the specified <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  and returns the zero-based index of the first instance with the collection.</summary>
    ///  <param name="extension">The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  for which to search in the collection.</param>
    ///<returns>The zero-based index of the specified <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , or -1 if the element was not found in the collection.</returns>
    function IndexOf(extension: DDN.mscorlib.DNObject): Int32;
    ///<summary>Returns a value indicating whether the specified <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is a member of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  .</summary>
    ///  <param name="extension">The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  for which to check collection membership.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is a member of the collection; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(extension: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Removes the first occurrence of the specified <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  from the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  .</summary>
    ///  <param name="extension">The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  to remove from the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  .</param>
    procedure Remove(extension: DDN.mscorlib.DNObject);
    ///<summary>Copies the entire <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  into a one-dimensional array of type <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , starting at the specified zero-based index of the target array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  serving as the destination of the copy action.</param>
    ///  <param name="index">The zero-based index at which to start placing the copied collection.</param>
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNObject>; index: Int32);
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  and returns the first element of the specified derived <see cref="T:System.Type" />
    ///  .</summary>
    ///  <param name="type">A <see cref="T:System.Type" />
    ///  for which to search the collection.</param>
    ///<returns>If the search is successful, an object of the specified <see cref="T:System.Type" />
    ///  ; otherwise, <see langword="null" />
    ///  .</returns>
    function Find(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  and returns an array of all elements of the specified <see cref="T:System.Type" />
    ///  .</summary>
    ///  <param name="type">A <see cref="T:System.Type" />
    ///  for which to search the collection.</param>
    ///<returns>An array of <see cref="T:System.Object" />
    ///  instances representing all collection members of the specified type.</returns>
    function FindAll(&type: DDN.mscorlib.DNType): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  for a member with the specified name and namespace URI.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Xml.XmlElement" />
    ///  to be found.</param>
    ///  <param name="ns">The XML namespace URI of the <see cref="T:System.Xml.XmlElement" />
    ///  to be found.</param>
    ///<returns>If the search is successful, an <see cref="T:System.Xml.XmlElement" />
    ///  ; otherwise, <see langword="null" />
    ///  .</returns>
    function Find(name: string; ns: string): DDN.System.Xml.DNXmlElement; overload;
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  and returns an array of all members with the specified name and namespace URI.</summary>
    ///  <param name="name">The XML name attribute of the <see cref="T:System.Xml.XmlElement" />
    ///  objects to be found.</param>
    ///  <param name="ns">The XML namespace URI attribute of the <see cref="T:System.Xml.XmlElement" />
    ///  objects to be found.</param>
    ///<returns>An array of <see cref="T:System.Xml.XmlElement" />
    ///  instances.</returns>
    function FindAll(name: string; ns: string): TArray<DDN.System.Xml.DNXmlElement>; overload;
    ///<summary>Returns a value indicating whether the specified object is used by the import process when the extensibility element is imported into the XML Web service.</summary>
    ///  <param name="item">An object, either of type <see cref="T:System.Xml.XmlElement" />
    ///  or <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  to check for use by the import process.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="item" />
    ///  parameter is used; otherwise, <see langword="false" />
    ///  .</returns>
    function IsHandled(item: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a value indicating whether the specified object is necessary for the operation of the XML Web service.</summary>
    ///  <param name="item">An object, either of type <see cref="T:System.Xml.XmlElement" />
    ///  or <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  , to check whether it is necessary.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="item" />
    ///  parameter is required; otherwise, <see langword="false" />
    ///  .</returns>
    function IsRequired(item: DDN.mscorlib.DNObject): Boolean;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionFormatExtensionCollection = class(TDNGenericImport<DNServiceDescriptionFormatExtensionCollectionClass, DNServiceDescriptionFormatExtensionCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{617F08C5-F27E-544F-86E1-183997FB1769}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.WebReferenceCollection" />
    ///  class.</summary>
    {class} function init: DNWebReferenceCollection;

  end;

  ///<summary>Describes a collection of <see cref="T:System.Web.Services.Description.WebReference" />
  ///  objects.</summary>
  [DNTypeName('System.Web.Services.Description.WebReferenceCollection')]
  DNWebReferenceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{12E95E11-4A57-36AA-A3A1-FB7E361F2EFD}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebReference;
    procedure set_Item(index: Int32; value: DNWebReference);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Appends a <see cref="T:System.Web.Services.Description.WebReference" />
    ///  instance to the collection.</summary>
    ///  <param name="webReference">The Web reference to append.</param>
    ///<returns>The index of the appended Web reference.</returns>
    function Add(webReference: DNWebReference): Int32;
    ///<summary>Inserts the specified <see cref="T:System.Web.Services.Description.WebReference" />
    ///  instance at the specified index.</summary>
    ///  <param name="index">The index at which to insert the specified Web reference.</param>
    ///  <param name="webReference">The Web reference to insert.</param>
    procedure Insert(index: Int32; webReference: DNWebReference);
    ///<summary>Determines the index of the specified <see cref="T:System.Web.Services.Description.WebReference" />
    ///  instance.</summary>
    ///  <param name="webReference">The Web reference to search for.</param>
    ///<returns>The index of the specified Web reference, or -1 if the collection does not contain the specified Web reference.</returns>
    function IndexOf(webReference: DNWebReference): Int32;
    ///<summary>Determines whether the collection contains a given <see cref="T:System.Web.Services.Description.WebReference" />
    ///  instance.</summary>
    ///  <param name="webReference">The Web reference to search for.</param>
    ///<returns><see langword="true" />
    ///  if the collections contains the given Web reference instance; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(webReference: DNWebReference): Boolean;
    ///<summary>Removes the specified <see cref="T:System.Web.Services.Description.WebReference" />
    ///  instance from the collection.</summary>
    ///  <param name="webReference">The Web reference to remove.</param>
    procedure Remove(webReference: DNWebReference);
    ///<summary>Copies members of the collection to a specified array, starting at the specified array index.</summary>
    ///  <param name="array">An array of Web references into which the collection members are copied.</param>
    ///  <param name="index">The array index at which to begin copying.</param>
    procedure CopyTo(&array: TArray<DNWebReference>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebReference read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebReferenceCollection = class(TDNGenericImport<DNWebReferenceCollectionClass, DNWebReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientResultCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{32870C24-63CF-5270-932C-A1247DFF2DFF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  class. </summary>
    {class} function init: DNDiscoveryClientResultCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
  ///  objects. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientResultCollection')]
  DNDiscoveryClientResultCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{0CA71B79-6FAE-31E7-980E-051BFA551097}']
  { getters & setters } 

    function get_Item(i: Int32): DNDiscoveryClientResult;
    procedure set_Item(i: Int32; value: DNDiscoveryClientResult);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  to add to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  . </param>
    ///<returns>The position into which the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  was inserted.</returns>
    function Add(value: DNDiscoveryClientResult): Int32;
    ///<summary>Determines whether the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  contains a specific <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  to locate in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  is found in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(value: DNDiscoveryClientResult): Boolean;
    ///<summary>Removes the first occurrence of a specific <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  from the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  to remove from the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  . </param>
    procedure Remove(value: DNDiscoveryClientResult);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNDiscoveryClientResult read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientResultCollection = class(TDNGenericImport<DNDiscoveryClientResultCollectionClass, DNDiscoveryClientResultCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryReferenceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{3D648A24-D32B-51AB-8C03-29DC70F09579}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  class. </summary>
    {class} function init: DNDiscoveryReferenceCollection;

  end;

  ///<summary>A collection of discovery references. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryReferenceCollection')]
  DNDiscoveryReferenceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{E18A5B9E-5231-3029-87B7-6268E65BF0E4}']
  { getters & setters } 

    function get_Item(i: Int32): DNDiscoveryReference;
    procedure set_Item(i: Int32; value: DNDiscoveryReference);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to add to the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  . </param>
    ///<returns>The position where the <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  was inserted in the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  .</returns>
    function Add(value: DNDiscoveryReference): Int32;
    ///<summary>Determines whether the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  contains a specific <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to locate within the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  contains the <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(value: DNDiscoveryReference): Boolean;
    ///<summary>Removes a <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  from the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to remove from the <see cref="T:System.Web.Services.Discovery.DiscoveryReferenceCollection" />
    ///  . </param>
    procedure Remove(value: DNDiscoveryReference);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNDiscoveryReference read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryReferenceCollection = class(TDNGenericImport<DNDiscoveryReferenceCollectionClass, DNDiscoveryReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D7EE4A41-E982-579A-A21B-1790F67930B1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  class. </summary>
    {class} function init: DNSoapHeaderCollection;

  end;

  ///<summary>Contains a collection of instances of the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
  ///  class.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderCollection')]
  DNSoapHeaderCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{821C82E9-A3E7-3EAA-88B6-759282607AC9}']
  { getters & setters } 

    function get_Item(index: Int32): DNSoapHeader;
    procedure set_Item(index: Int32; value: DNSoapHeader);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  to the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  .</summary>
    ///  <param name="header">The <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  to add to the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . </param>
    ///<returns>The position at which the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  was inserted.</returns>
    function Add(header: DNSoapHeader): Int32;
    ///<summary>Inserts a <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  into the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  at the specified index.</summary>
    ///  <param name="index">The zero-based index at which to insert the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  into the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . </param>
    ///  <param name="header">The <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  to insert into the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />
    ///  parameteris not a valid index in the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . </exception>
    procedure Insert(index: Int32; header: DNSoapHeader);
    ///<summary>Determines the index of the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  in the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  .</summary>
    ///  <param name="header">The <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  to locate in the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . </param>
    ///<returns>The index of the <paramref name="header" />
    ///  parameter, if found in the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ; otherwise, -1.</returns>
    function IndexOf(header: DNSoapHeader): Int32;
    ///<summary>Determines whether the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  contains a specific <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  .</summary>
    ///  <param name="header">The <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  to locate in the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the value of the <paramref name="header" />
    ///  parameter is found in the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(header: DNSoapHeader): Boolean;
    ///<summary>Removes the first occurrence of a specific <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  from the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  .</summary>
    ///  <param name="header">The <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  to remove from the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . </param>
    procedure Remove(header: DNSoapHeader);
    ///<summary>Copies the elements of the <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  to an <see cref="T:System.Array" />
    ///  , starting at a particular index of the <see cref="T:System.Array" />
    ///  .</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  . The array must have zero-based indexing. </param>
    ///  <param name="index">The zero-based index in the <paramref name="array" />
    ///  parameter at which copying begins. </param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="array" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than zero. </exception><exception cref="T:System.ArgumentException">The <paramref name="array" />
    ///  parameter is multidimensional.-or- The number of elements in the source SoapHeaderCollection is greater than the available space from the <paramref name="index" />
    ///  parameter to the end of the destination array. </exception>
    procedure CopyTo(&array: TArray<DNSoapHeader>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSoapHeader read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSoapHeaderCollection = class(TDNGenericImport<DNSoapHeaderCollectionClass, DNSoapHeaderCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientDocumentCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{332825F8-A091-5868-87EC-0E6072154933}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  class. </summary>
    {class} function init: DNDiscoveryClientDocumentCollection;

  end;

  ///<summary>Represents a collection of documents discovered during XML Web services discovery that have been downloaded to the client. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientDocumentCollection')]
  DNDiscoveryClientDocumentCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{F6C3BA94-E0F0-3189-BE64-62B171FDC604}']
  { getters & setters } 

    function get_Item(url: string): DDN.mscorlib.DNObject;
    procedure set_Item(url: string; value: DDN.mscorlib.DNObject);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds an object with the specified URL to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  .</summary>
    ///  <param name="url">The URL for the document to add to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  . </param>
    ///  <param name="value">A discovered document to add to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException">An entry with a key of <paramref name="url" />
    ///  already exists in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  . </exception>
    procedure Add(url: string; value: DDN.mscorlib.DNObject);
    ///<summary>Determines if the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  contains an object with the specified URL.</summary>
    ///  <param name="url">The URL for the document to locate within the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  contains an object with the specified URL; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  is <see langword="null" />
    ///  . </exception>
    function &Contains(url: string): Boolean;
    ///<summary>Removes an object with the specified URL from the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  .</summary>
    ///  <param name="url">The URL for the discovered document to remove from the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  is <see langword="null" />
    ///  . </exception>
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>Gets an <see cref="T:System.Collections.ICollection" />
    ///  object with all the keys in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  containing the keys of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  .</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>Gets an <see cref="T:System.Collections.ICollection" />
    ///  object with all the values in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  containing the values in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  .</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientDocumentCollection = class(TDNGenericImport<DNDiscoveryClientDocumentCollectionClass, DNDiscoveryClientDocumentCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientReferenceCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{AC2BAAF9-956D-5EE1-AB5D-C0D56F541B49}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  class. </summary>
    {class} function init: DNDiscoveryClientReferenceCollection;

  end;

  ///<summary>Represents a collection of <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
  ///  objects. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientReferenceCollection')]
  DNDiscoveryClientReferenceCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{319342E4-CF06-3820-BFAA-752EA92E6EB4}']
  { getters & setters } 

    function get_Item(url: string): DNDiscoveryReference;
    procedure set_Item(url: string; value: DNDiscoveryReference);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to add to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  . </param>
    procedure Add(value: DNDiscoveryReference); overload;
    ///<summary>Adds a <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  with the specified URL and value to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  .</summary>
    ///  <param name="url">The URL for the reference to add to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  . </param>
    ///  <param name="value">The <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to add to the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  . </param>
    procedure Add(url: string; value: DNDiscoveryReference); overload;
    ///<summary>Determines if the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  contains a <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  with the specified URL.</summary>
    ///  <param name="url">The URL for the <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  to locate within the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  contains a <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  with the specified URL; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(url: string): Boolean;
    ///<summary>Removes a <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  with the specified URL from the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  .</summary>
    ///  <param name="url">A string that represents the URL for the object to remove from the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  . </param>
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DNDiscoveryReference read get_Item write set_Item; default;
    ///<summary>Gets an <see cref="T:System.Collections.ICollection" />
    ///  object with all the keys in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  containing the keys of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  .</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>Gets an <see cref="T:System.Collections.ICollection" />
    ///  object with all the values in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  containing the values in the <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  .</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientReferenceCollection = class(TDNGenericImport<DNDiscoveryClientReferenceCollectionClass, DNDiscoveryClientReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryExceptionDictionaryClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{B9B80E43-F41E-5735-AE44-FF2EBFF4C017}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  class. </summary>
    {class} function init: DNDiscoveryExceptionDictionary;

  end;

  ///<summary>Collects exceptions that occurred during XML Web services discovery. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryExceptionDictionary')]
  DNDiscoveryExceptionDictionary = interface(DDN.mscorlib.DNDictionaryBase)
  ['{8A79B40D-70F9-3888-A1DE-C51D12790B82}']
  { getters & setters } 

    function get_Item(url: string): DDN.mscorlib.DNException;
    procedure set_Item(url: string; value: DDN.mscorlib.DNException);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds an <see cref="T:System.Exception" />
    ///  with a key of <paramref name="url" />
    ///  to the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  .</summary>
    ///  <param name="url">The URL that caused an exception during XML Web services discovery. </param>
    ///  <param name="value">The <see cref="T:System.Exception" />
    ///  that occurred during XML Web services discovery. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException">An entry with a key of <paramref name="url" />
    ///  already exists in the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  . </exception>
    procedure Add(url: string; value: DDN.mscorlib.DNException);
    ///<summary>Determines whether the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  contains an <see cref="T:System.Exception" />
    ///  with the specified URL.</summary>
    ///  <param name="url">The URL of the <see cref="T:System.Exception" />
    ///  to locate within the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  contains an <see cref="T:System.Exception" />
    ///  with the specified URL; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  is <see langword="null" />
    ///  . </exception>
    function &Contains(url: string): Boolean;
    ///<summary>Removes an <see cref="T:System.Exception" />
    ///  with the specified URL from the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  .</summary>
    ///  <param name="url">The URL of the <see cref="T:System.Exception" />
    ///  to remove from the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  is <see langword="null" />
    ///  . </exception>
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DDN.mscorlib.DNException read get_Item write set_Item; default;
    ///<summary>Gets a <see cref="T:System.Collections.ICollection" />
    ///  object with all the keys in the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  containing the keys of the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  .</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>Gets a <see cref="T:System.Collections.ICollection" />
    ///  object containing all the values in the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  containing the values in the <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  .</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryExceptionDictionary = class(TDNGenericImport<DNDiscoveryExceptionDictionaryClass, DNDiscoveryExceptionDictionary>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceClass = interface(DNObjectClass)
  ['{76DF2388-4344-5160-A2EF-09B07A0EF4C2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.WebService" />
    ///  class.</summary>
    {class} function init: DNWebService;

  end;

  ///<summary>Defines the optional base class for XML Web services, which provides direct access to common ASP.NET objects, such as application and session state.</summary>
  [DNTypeName('System.Web.Services.WebService')]
  DNWebService = interface(DNObject)
  ['{071632B9-45F4-37F9-9A37-45C335B86B5C}']
  { getters & setters } 

    function get_Application: DDN.System.Web.DNHttpApplicationState;
    function get_Context: DDN.System.Web.DNHttpContext;
    function get_Session: DDN.System.Web.DNHttpSessionState;
    function get_Server: DDN.System.Web.DNHttpServerUtility;
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the application object for the current HTTP request.</summary>
    ///<returns>An <see cref="T:System.Web.HttpApplicationState" />
    ///  object.</returns>
    property Application: DDN.System.Web.DNHttpApplicationState read get_Application;
    ///<summary>Gets the ASP.NET <see cref="T:System.Web.HttpContext" />
    ///  for the current request, which encapsulates all HTTP-specific context used by the HTTP server to process Web requests.</summary>
    ///<returns>The ASP.NET <see cref="T:System.Web.HttpContext" />
    ///  for the current request.</returns>
    ///<exception cref="T:System.Exception"><paramref name="Context" />
    ///  is <see langword="null" />
    ///  . </exception>
    property Context: DDN.System.Web.DNHttpContext read get_Context;
    ///<summary>Gets the <see cref="T:System.Web.SessionState.HttpSessionState" />
    ///  instance for the current request.</summary>
    ///<returns>An <see cref="T:System.Web.SessionState.HttpSessionState" />
    ///  representing the ASP.NET session state object for the current session.</returns>
    property Session: DDN.System.Web.DNHttpSessionState read get_Session;
    ///<summary>Gets the <see cref="T:System.Web.HttpServerUtility" />
    ///  for the current request.</summary>
    ///<returns>An <see cref="T:System.Web.HttpServerUtility" />
    ///  object.</returns>
    property Server: DDN.System.Web.DNHttpServerUtility read get_Server;
    ///<summary>Gets the ASP.NET server <see cref="P:System.Web.HttpContext.User" />
    ///  object. Can be used to authenticate whether a user is authorized to execute the request.</summary>
    ///<returns>A <see cref="T:System.Security.Principal.IPrincipal" />
    ///  representing the ASP.NET server <see cref="P:System.Web.HttpContext.User" />
    ///  object.</returns>
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    ///<summary>Gets the version of the SOAP protocol used to make the SOAP request to the XML Web service.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  values. The default is <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  .</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNWebService = class(TDNGenericImport<DNWebServiceClass, DNWebService>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNProtocolElementCollectionClass = interface(DNObjectClass)
  ['{C76A5689-DBF4-5950-9351-49B8126F0140}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Web.Services.Configuration.ProtocolElementCollection" />
    ///  .</summary>
    {class} function init: DNProtocolElementCollection;

  end;

  ///<summary>Contains a strongly typed collection of <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
  ///  objects.</summary>
  [DNTypeName('System.Web.Services.Configuration.ProtocolElementCollection')]
  DNProtocolElementCollection = interface(DNObject)
  ['{3B1722C0-CF1E-3155-AE67-88E67336A395}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNProtocolElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNProtocolElement); overload;
    function get_Item(index: Int32): DNProtocolElement; overload;
    procedure set_Item(index: Int32; value: DNProtocolElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to add.</param>
    procedure Add(element: DNProtocolElement);
    ///<summary>Removes all <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  objects from the collection.</summary>
    procedure Clear;
    ///<summary>Returns a <see cref="T:System.Boolean" />
    ///  that indicates whether a <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  with the specified key exists in the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to find in the collection.</param>
    ///<returns><see langword="true" />
    ///  if the collection contains a <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  with the specified key; otherwise, <see langword="false" />
    ///  .</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Copies the elements from the collection to an array, starting at a particular index of the array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to which to copy the contents of the collection.</param>
    ///  <param name="index">The zero-based index in <paramref name="Array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNProtocolElement>; index: Int32); overload;
    ///<summary>Returns the zero-based index of a specified <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  in the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to find in the collection.</param>
    ///<returns>The zero-based index of the specified <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  , or -1 if the element was not found in the collection.</returns>
    function IndexOf(element: DNProtocolElement): Int32;
    ///<summary>Removes a specified <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to remove from the collection.</param>
    procedure Remove(element: DNProtocolElement);
    ///<summary>Removes the <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  with the specified key from the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to be removed from the collection.</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>Removes the element at the specified index in the collection.</summary>
    ///  <param name="index">The zero-based index of the <see cref="T:System.Web.Services.Configuration.ProtocolElement" />
    ///  to remove from the collection.</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNProtocolElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNProtocolElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolElementCollection = class(TDNGenericImport<DNProtocolElementCollectionClass, DNProtocolElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapExtensionTypeElementCollectionClass = interface(DNObjectClass)
  ['{96147F8F-5DD2-51D5-9394-BD5B877FE942}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElementCollection" />
    ///  .</summary>
    {class} function init: DNSoapExtensionTypeElementCollection;

  end;

  ///<summary>Contains a strongly typed collection of <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
  ///  objects.</summary>
  [DNTypeName('System.Web.Services.Configuration.SoapExtensionTypeElementCollection')]
  DNSoapExtensionTypeElementCollection = interface(DNObject)
  ['{141B31B9-5A61-34DB-AC7E-B308DAAE9575}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNSoapExtensionTypeElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNSoapExtensionTypeElement); overload;
    function get_Item(index: Int32): DNSoapExtensionTypeElement; overload;
    procedure set_Item(index: Int32; value: DNSoapExtensionTypeElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to add.</param>
    procedure Add(element: DNSoapExtensionTypeElement);
    ///<summary>Removes all <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  objects from the collection.</summary>
    procedure Clear;
    ///<summary>Returns a <see cref="T:System.Boolean" />
    ///  that indicates whether a <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  with the specified key exists in the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to find in the collection.</param>
    ///<returns><see langword="true" />
    ///  if the collection contains a <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  with the specified key; otherwise, <see langword="false" />
    ///  .</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Copies the elements from the collection to an array, starting at a specified index of the array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to which to copy the contents of the collection.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNSoapExtensionTypeElement>; index: Int32); overload;
    ///<summary>Returns the zero-based index of a specified <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  in the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to find in the collection.</param>
    ///<returns>The zero-based index of the specified <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  , or -1 if the element was not found in the collection.</returns>
    function IndexOf(element: DNSoapExtensionTypeElement): Int32;
    ///<summary>Removes a specified <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to remove from the collection.</param>
    procedure Remove(element: DNSoapExtensionTypeElement);
    ///<summary>Removes the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  with the specified key from the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to be removed from the collection.</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>Removes the element at the specified index in the collection.</summary>
    ///  <param name="index">The zero-based index of the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  to remove from the collection.</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNSoapExtensionTypeElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNSoapExtensionTypeElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapExtensionTypeElementCollection = class(TDNGenericImport<DNSoapExtensionTypeElementCollectionClass, DNSoapExtensionTypeElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNTypeElementCollectionClass = interface(DNObjectClass)
  ['{81DACE2A-BB34-5D14-80E8-931FAFAC628D}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  .</summary>
    {class} function init: DNTypeElementCollection;

  end;

  ///<summary>Contains a strongly typed collection of <see cref="T:System.Web.Services.Configuration.TypeElement" />
  ///  objects.</summary>
  [DNTypeName('System.Web.Services.Configuration.TypeElementCollection')]
  DNTypeElementCollection = interface(DNObject)
  ['{9420CE26-DB85-30A6-9A7F-98D9386A37AC}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNTypeElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNTypeElement); overload;
    function get_Item(index: Int32): DNTypeElement; overload;
    procedure set_Item(index: Int32; value: DNTypeElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to add.</param>
    procedure Add(element: DNTypeElement);
    ///<summary>Removes all <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  objects from the collection.</summary>
    procedure Clear;
    ///<summary>Returns a <see cref="T:System.Boolean" />
    ///  that indicates whether a <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  with the specified key exists in the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to find in the collection.</param>
    ///<returns><see langword="true" />
    ///  if the collection contains a <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  with the specified key; otherwise, <see langword="false" />
    ///  .</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Copies the elements from the collection to an array, starting at a specified index of the array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to which to copy the contents of the collection.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNTypeElement>; index: Int32); overload;
    ///<summary>Returns the zero-based index of a specified <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  in the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to find in the collection.</param>
    ///<returns>The zero-based index of the specified <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  , or -1 if the element was not found in the collection.</returns>
    function IndexOf(element: DNTypeElement): Int32;
    ///<summary>Removes a specified <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to remove from the collection.</param>
    procedure Remove(element: DNTypeElement);
    ///<summary>Removes the <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  with the specified key from the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to be removed from the collection.</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>Removes the element at the specified index in the collection.</summary>
    ///  <param name="index">The zero-based index of the <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  to remove from the collection.</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNTypeElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNTypeElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTypeElementCollection = class(TDNGenericImport<DNTypeElementCollectionClass, DNTypeElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsiProfilesElementCollectionClass = interface(DNObjectClass)
  ['{23B46D28-0BFE-5F15-8E92-B513760F5E51}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Web.Services.Configuration.WsiProfilesElementCollection" />
    ///  .</summary>
    {class} function init: DNWsiProfilesElementCollection;

  end;

  ///<summary>Contains a strongly typed collection of <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
  ///  objects.</summary>
  [DNTypeName('System.Web.Services.Configuration.WsiProfilesElementCollection')]
  DNWsiProfilesElementCollection = interface(DNObject)
  ['{744F08E6-7BE8-3BA9-9F37-314819E2FF48}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNWsiProfilesElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNWsiProfilesElement); overload;
    function get_Item(index: Int32): DNWsiProfilesElement; overload;
    procedure set_Item(index: Int32; value: DNWsiProfilesElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to add.</param>
    procedure Add(element: DNWsiProfilesElement);
    ///<summary>Removes all <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  objects from the collection.</summary>
    procedure Clear;
    ///<summary>Returns a <see cref="T:System.Boolean" />
    ///  that indicates whether a <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  with the specified key exists in the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to find in the collection.</param>
    ///<returns><see langword="true" />
    ///  if the collection contains a <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  with the specified key; otherwise, <see langword="false" />
    ///  .</returns>
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Copies the elements from the collection to an array, starting at a specified index of the array.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to which to copy the contents of the collection.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNWsiProfilesElement>; index: Int32); overload;
    ///<summary>Returns the zero-based index of a specified <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  in the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to find in the collection.</param>
    ///<returns>The zero-based index of the specified <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  , or -1 if the element was not found in the collection.</returns>
    function IndexOf(element: DNWsiProfilesElement): Int32;
    ///<summary>Removes a specified <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to remove from the collection.</param>
    procedure Remove(element: DNWsiProfilesElement);
    ///<summary>Removes the <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  with the specified key from the collection.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to be removed from the collection.</param>
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    ///<summary>Removes the element at the specified index in the collection.</summary>
    ///  <param name="index">The zero-based index of the <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  to remove from the collection.</param>
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNWsiProfilesElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNWsiProfilesElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsiProfilesElementCollection = class(TDNGenericImport<DNWsiProfilesElementCollectionClass, DNWsiProfilesElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWebServicesSectionClass = interface(DNObjectClass)
  ['{BDDC500A-FE8F-5F06-84B5-236CE67625CB}']
  { static getter & setter } 

    {class} function get_Current: DNWebServicesSection;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  class.</summary>
    {class} function init: DNWebServicesSection;

  { static methods } 

    ///<summary>Retrieves the specified configuration section.</summary>
    ///  <param name="config">A <see cref="T:System.Configuration.Configuration" />
    ///  object that represents the section to be retrieved.</param>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  object that represents the section being retrieved.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="config" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetSection(config: DDN.System.Configuration.DNConfiguration): DNWebServicesSection;

  { static propertys } 

    ///<summary>Gets a <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  object that represents the current section.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  object.</returns>
    {class} property Current: DNWebServicesSection read get_Current;
  end;

  ///<summary>Represents the <see langword="webServices" />
  ///  element in the configuration file. This element controls the settings of XML Web services.</summary>
  [DNTypeName('System.Web.Services.Configuration.WebServicesSection')]
  DNWebServicesSection = interface(DNObject)
  ['{9F8ADC5D-6785-3581-90CC-F758E37E0072}']
  { getters & setters } 

    function get_ConformanceWarnings: DNWsiProfilesElementCollection;
    function get_EnabledProtocols: DNWebServiceProtocols;
    function get_Protocols: DNProtocolElementCollection;
    function get_SoapEnvelopeProcessing: DNSoapEnvelopeProcessingElement;
    procedure set_SoapEnvelopeProcessing(value: DNSoapEnvelopeProcessingElement);
    function get_Diagnostics: DNDiagnosticsElement;
    procedure set_Diagnostics(value: DNDiagnosticsElement);
    function get_ServiceDescriptionFormatExtensionTypes: DNTypeElementCollection;
    function get_SoapExtensionImporterTypes: DNTypeElementCollection;
    function get_SoapExtensionReflectorTypes: DNTypeElementCollection;
    function get_SoapExtensionTypes: DNSoapExtensionTypeElementCollection;
    function get_SoapServerProtocolFactoryType: DNTypeElement;
    function get_SoapTransportImporterTypes: DNTypeElementCollection;
    function get_WsdlHelpGenerator: DNWsdlHelpGeneratorElement;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of conformance warnings for the Web Service. This property corresponds to the <see langword="configurationWarnings" />
    ///  element in the configuration file.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.WsiProfilesElementCollection" />
    ///  object that represents the collection of conformance warnings for the Web Service.</returns>
    property ConformanceWarnings: DNWsiProfilesElementCollection read get_ConformanceWarnings;
    ///<summary>Gets one of the <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  values that indicates the Web service protocol.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  values.</returns>
    property EnabledProtocols: DNWebServiceProtocols read get_EnabledProtocols;
    ///<summary>Gets the transmission protocol that is used to decrypt data sent from a client browser in an HTTP request.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  object that represents the transmission protocol that is used to decrypt data sent from a client browser in an HTTP request.</returns>
    property Protocols: DNProtocolElementCollection read get_Protocols;
    ///<summary>Gets or sets the <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  for the <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  for the current configuration file.</returns>
    property SoapEnvelopeProcessing: DNSoapEnvelopeProcessingElement read get_SoapEnvelopeProcessing write set_SoapEnvelopeProcessing;
    ///<summary>Gets or sets the <see cref="T:System.Web.Services.Configuration.DiagnosticsElement" />
    ///  for the <see cref="T:System.Web.Services.Configuration.WebServicesSection" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.DiagnosticsElement" />
    ///  for the current configuration file.</returns>
    property Diagnostics: DNDiagnosticsElement read get_Diagnostics write set_Diagnostics;
    ///<summary>Gets the <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  that specifies the service description format extension to run within the scope of the configuration file.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  that specifies the service description format extension to run within the scope of the configuration file.</returns>
    property ServiceDescriptionFormatExtensionTypes: DNTypeElementCollection read get_ServiceDescriptionFormatExtensionTypes;
    ///<summary>Gets the <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  that specifies the SOAP extensions to run when a service description for an XML Web service within the scope of the configuration file is accessed.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  that specifies the SOAP extensions to run when a service description for an XML Web service within the scope of the configuration file is accessed.</returns>
    property SoapExtensionImporterTypes: DNTypeElementCollection read get_SoapExtensionImporterTypes;
    ///<summary>Gets the <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  that specifies the SOAP extensions to run when a service description is generated for all XML Web services within the scope of the configuration file.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  that specifies the SOAP extensions to run when a service description is generated for all XML Web services within the scope of the configuration file.</returns>
    property SoapExtensionReflectorTypes: DNTypeElementCollection read get_SoapExtensionReflectorTypes;
    ///<summary>Gets the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElementCollection" />
    ///  that specifies the SOAP extensions to run with all XML Web services within the scope of the configuration file.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElementCollection" />
    ///  that specifies the SOAP extensions to run with all XML Web services within the scope of the configuration file.</returns>
    property SoapExtensionTypes: DNSoapExtensionTypeElementCollection read get_SoapExtensionTypes;
    ///<summary>Gets a <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  object that corresponds to the protocol used to call the Web service.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  object that corresponds to the protocol used to call the Web service.</returns>
    property SoapServerProtocolFactoryType: DNTypeElement read get_SoapServerProtocolFactoryType;
    ///<summary>Gets a <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  object that represents the SoapTransportImporterTypes configuration element.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.TypeElementCollection" />
    ///  object that represents the <see langword="SoapTransportImporterTypes" />
    ///  configuration element.</returns>
    property SoapTransportImporterTypes: DNTypeElementCollection read get_SoapTransportImporterTypes;
    ///<summary>Gets the Web service Help page (an .aspx file) that is displayed to a browser when the browser navigates directly to an ASMX page.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.WsdlHelpGeneratorElement" />
    ///  object that specifies the XML Web service Help page (an .aspx file) that is displayed to a browser when the browser navigates directly to an ASMX XML Web service page.</returns>
    property WsdlHelpGenerator: DNWsdlHelpGeneratorElement read get_WsdlHelpGenerator;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebServicesSection = class(TDNGenericImport<DNWebServicesSectionClass, DNWebServicesSection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNDiagnosticsElementClass = interface(DNObjectClass)
  ['{22E38B3A-5440-5519-B957-956760FA46EE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.DiagnosticsElement" />
    ///  class. </summary>
    {class} function init: DNDiagnosticsElement;

  end;

  ///<summary>Represents the &lt;diagnostics&gt; element in the Web.config configuration file.</summary>
  [DNTypeName('System.Web.Services.Configuration.DiagnosticsElement')]
  DNDiagnosticsElement = interface(DNObject)
  ['{BAF33767-9E43-3C23-B8D1-E538A6EF771A}']
  { getters & setters } 

    function get_SuppressReturningExceptions: Boolean;
    procedure set_SuppressReturningExceptions(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether the service returns exceptions.</summary>
    ///<returns><see langword="true" />
    ///  if the service returns exceptions; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property SuppressReturningExceptions: Boolean read get_SuppressReturningExceptions write set_SuppressReturningExceptions;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDiagnosticsElement = class(TDNGenericImport<DNDiagnosticsElementClass, DNDiagnosticsElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNProtocolElementClass = interface(DNObjectClass)
  ['{7538B510-782A-5831-837F-EC834436FF82}']
  { constructors } 

    ///<summary>Creates an instance of this class.</summary>
    {class} function init: DNProtocolElement; overload;
    ///<summary>Creates an instance of this class, and initializes the <see cref="P:System.Web.Services.Configuration.ProtocolElement.Name" />
    ///  property.</summary>
    ///  <param name="protocol">The value to initialize <see cref="P:System.Web.Services.Configuration.ProtocolElement.Name" />
    ///  .</param>
    {class} function init(protocol: DNWebServiceProtocols): DNProtocolElement; overload;

  end;

  ///<summary>Represents a <see langword="protocol" />
  ///  element in the Web Services configuration file. The class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Configuration.ProtocolElement')]
  DNProtocolElement = interface(DNObject)
  ['{3C1D5EBC-5430-37E1-8D66-CD655A780583}']
  { getters & setters } 

    function get_Name: DNWebServiceProtocols;
    procedure set_Name(value: DNWebServiceProtocols);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the protocol name.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  object that represents the protocol name.</returns>
    property Name: DNWebServiceProtocols read get_Name write set_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolElement = class(TDNGenericImport<DNProtocolElementClass, DNProtocolElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapEnvelopeProcessingElementClass = interface(DNObjectClass)
  ['{8820641C-A645-55B1-9151-2FA6997842A9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  class. </summary>
    {class} function init: DNSoapEnvelopeProcessingElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.SoapEnvelopeProcessingElement" />
    ///  class using the provided <see cref="T:System.Int32" />
    ///  value. </summary>
    ///  <param name="readTimeout">The value of the timeout period.</param>
    {class} function init(readTimeout: Int32): DNSoapEnvelopeProcessingElement; overload;
    ///<summary>Gets or sets the timeout period used to determine whether to terminate requests to mitigate against denial of service attacks.</summary>
    ///  <param name="readTimeout">The time to wait before terminating requests to <see cref="M:System.Xml.XmlReader.Read" />
    ///  and <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  .</param>
    ///  <param name="strict">Whether to throw an exception if the serializer encounters elements or attributes that were not in the original schema. For details, see the <see cref="P:System.Web.Services.Configuration.SoapEnvelopeProcessingElement.IsStrict" />
    ///  property.</param>
    {class} function init(readTimeout: Int32; &strict: Boolean): DNSoapEnvelopeProcessingElement; overload;

  end;

  ///<summary>Configures a timeout that helps mitigate denial of service attacks by terminating any request that takes longer than the <see cref="P:System.Web.Services.Configuration.SoapEnvelopeProcessingElement.ReadTimeout" />
  ///  property value. </summary>
  [DNTypeName('System.Web.Services.Configuration.SoapEnvelopeProcessingElement')]
  DNSoapEnvelopeProcessingElement = interface(DNObject)
  ['{11BF26C8-2F62-3960-B6B0-3CD6BCC5E30C}']
  { getters & setters } 

    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_IsStrict: Boolean;
    procedure set_IsStrict(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the timeout period used to determine whether to terminate requests to mitigate against denial of service attacks.</summary>
    ///<returns>The time to wait before terminating requests to <see cref="M:System.Xml.XmlReader.Read" />
    ///  and <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  .</returns>
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    ///<summary>Gets or sets a value that indicates whether to throw an exception if the serializer encounters unexpected elements or attributes.</summary>
    ///<returns><see langword="true" />
    ///  if the Web services serializer tries to detect unexpected elements or attributes; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsStrict: Boolean read get_IsStrict write set_IsStrict;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapEnvelopeProcessingElement = class(TDNGenericImport<DNSoapEnvelopeProcessingElementClass, DNSoapEnvelopeProcessingElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapExtensionTypeElementClass = interface(DNObjectClass)
  ['{CCA39556-08FB-51E4-97B4-B7155CF687BE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  class.</summary>
    {class} function init: DNSoapExtensionTypeElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  class.</summary>
    ///  <param name="type">Specifies the SOAP extension class to add.</param>
    ///  <param name="priority">Indicates the relative order in which a SOAP extension runs when multiple SOAP extensions are specified. Within each group, the priority attribute distinguishes the overall relative priority of the SOAP extension. A lower priority number indicates a higher priority for the SOAP extension. The lowest possible value for the priority attribute is 1.</param>
    ///  <param name="group">Along with priority, specifies the relative order in which a SOAP extension runs when multiple SOAP extensions are configured to run.</param>
    {class} function init(&type: string; priority: Int32; group: DNPriorityGroup): DNSoapExtensionTypeElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.SoapExtensionTypeElement" />
    ///  class.</summary>
    ///  <param name="type">Specifies the SOAP extension class to add.</param>
    ///  <param name="priority">Indicates the relative order in which a SOAP extension runs when multiple SOAP extensions are specified.</param>
    ///  <param name="group">Along with priority, specifies the relative order in which a SOAP extension runs when multiple SOAP extensions are configured to run.</param>
    {class} function init(&type: DDN.mscorlib.DNType; priority: Int32; group: DNPriorityGroup): DNSoapExtensionTypeElement; overload;

  end;

  ///<summary>Represents the SoapExtensionElement in the Web Services configuration file. This element adds a SOAP extension to run with all XML Web services within the scope of the configuration file. The class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Configuration.SoapExtensionTypeElement')]
  DNSoapExtensionTypeElement = interface(DNObject)
  ['{EFD42C93-4353-37DB-A5C8-31676535A1D8}']
  { getters & setters } 

    function get_Group: DNPriorityGroup;
    procedure set_Group(value: DNPriorityGroup);
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the relative order in which a SOAP extension runs when multiple SOAP extensions are configured to run.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Configuration.PriorityGroup" />
    ///  object whose value determines relative order in which a SOAP extension runs.</returns>
    property Group: DNPriorityGroup read get_Group write set_Group;
    ///<summary>Gets or sets the value that indicates the relative order in which a SOAP extension runs when multiple SOAP extensions are specified.</summary>
    ///<returns>A <see cref="T:System.Int32" />
    ///  whose value determines relative order in which a SOAP extension runs.</returns>
    property Priority: Int32 read get_Priority write set_Priority;
    ///<summary>Gets or sets the SOAP extension class to add to the SoapExtensionType element of the Web Services configuration file.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the type name of the SoapExtensionType element.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapExtensionTypeElement = class(TDNGenericImport<DNSoapExtensionTypeElementClass, DNSoapExtensionTypeElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNTypeElementClass = interface(DNObjectClass)
  ['{A3435EB6-8AA8-5E73-BD6C-9D89A7C22895}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  class.</summary>
    {class} function init: DNTypeElement; overload;
    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  class.</summary>
    ///  <param name="type">The type of the configuration attribute.</param>
    {class} function init(&type: string): DNTypeElement; overload;
    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Configuration.TypeElement" />
    ///  class.</summary>
    ///  <param name="type">The type of the configuration attribute.</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNTypeElement; overload;

  end;

  ///<summary>Represents the <see langword="type" />
  ///  element in the Web services configuration file.</summary>
  [DNTypeName('System.Web.Services.Configuration.TypeElement')]
  DNTypeElement = interface(DNObject)
  ['{2724AAC7-EBAB-3582-94FD-EAADAC298424}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the type of the configuration attribute.</summary>
    ///<returns>The type of the configuration attribute.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTypeElement = class(TDNGenericImport<DNTypeElementClass, DNTypeElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsdlHelpGeneratorElementClass = interface(DNObjectClass)
  ['{B3C1B686-B9B3-5831-B699-BBC1C776DBC7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Configuration.WsdlHelpGeneratorElement" />
    ///  class.</summary>
    {class} function init: DNWsdlHelpGeneratorElement;

  end;

  ///<summary>Represents <see langword="WsdlHelpGenerator" />
  ///  element in the configuration file that specifies the XML Web service Help page (an .aspx file) that is displayed to a browser when the browser navigates directly to an ASMX XML Web services page.</summary>
  [DNTypeName('System.Web.Services.Configuration.WsdlHelpGeneratorElement')]
  DNWsdlHelpGeneratorElement = interface(DNObject)
  ['{E0FD4447-DD52-36B2-9505-4ADCE0A3EEF3}']
  { getters & setters } 

    function get_Href: string;
    procedure set_Href(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the file path to the Help page.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the file path to the Help page.</returns>
    property Href: string read get_Href write set_Href;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsdlHelpGeneratorElement = class(TDNGenericImport<DNWsdlHelpGeneratorElementClass, DNWsdlHelpGeneratorElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsiProfilesElementClass = interface(DNObjectClass)
  ['{274BE160-6830-5FFB-8AE6-69703DA0B524}']
  { constructors } 

    ///<summary>Initializes and instance of the <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  class.</summary>
    {class} function init: DNWsiProfilesElement; overload;
    ///<summary>Initializes and instance of the <see cref="T:System.Web.Services.Configuration.WsiProfilesElement" />
    ///  class, using the specified <see cref="T:System.Web.Services.WsiProfiles" />
    ///  enumeration value.</summary>
    ///  <param name="name">A <see cref="T:System.Web.Services.WsiProfiles" />
    ///  object that specifies whether the Web service conforms to the WSI Basic Profile version 1.1.</param>
    {class} function init(name: DNWsiProfiles): DNWsiProfilesElement; overload;

  end;

  ///<summary>Represents the <see langword="WsiProfiles" />
  ///  element in the configuration file.</summary>
  [DNTypeName('System.Web.Services.Configuration.WsiProfilesElement')]
  DNWsiProfilesElement = interface(DNObject)
  ['{B679E2EE-05EC-3099-82D8-B552B2F3AE5C}']
  { getters & setters } 

    function get_Name: DNWsiProfiles;
    procedure set_Name(value: DNWsiProfiles);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets whether the Web service conforms to the WSI Basic Profile version 1.1.</summary>
    ///<returns>A <see cref="T:System.Web.Services.WsiProfiles" />
    ///  object that specifies whether the Web service conforms to the WSI Basic Profile version 1.1.</returns>
    property Name: DNWsiProfiles read get_Name write set_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsiProfilesElement = class(TDNGenericImport<DNWsiProfilesElementClass, DNWsiProfilesElement>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNInvokeCompletedEventArgsClass = interface(DNObjectClass)
  ['{80D8B0FD-CAB1-5BAB-B49E-6241DB306746}']
  end;

  ///<summary>Represents the result of an asynchronously invoked web method.</summary>
  [DNTypeName('System.Web.Services.Protocols.InvokeCompletedEventArgs')]
  DNInvokeCompletedEventArgs = interface(DNObject)
  ['{D0D18440-74F6-305C-8077-A796BA0C2F72}']
  { getters & setters } 

    function get_Results: TArray<DDN.mscorlib.DNObject>;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the results returned by the Web method.</summary>
    ///<returns>An array of objects returned by the Web method.</returns>
    property Results: TArray<DDN.mscorlib.DNObject> read get_Results;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNInvokeCompletedEventArgs = class(TDNGenericImport<DNInvokeCompletedEventArgsClass, DNInvokeCompletedEventArgs>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{D29DD0CB-A764-57A4-A8DB-1C047296C8CF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class.</summary>
    {class} function init: DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, and URI that identifies the piece of code that caused the exception.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property. </param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property. </param>
    ///  <param name="actor">A URI that identifies the code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property. </param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, URI that identifies the code that caused the exception, and reference to the root cause of the exception.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property. </param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property. </param>
    ///  <param name="actor">A URI that identifies the piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property. </param>
    ///  <param name="innerException">An exception that is the root cause of the exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property. </param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message and exception code.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property. </param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property. </param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, and reference to the root cause of the exception.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property. </param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property. </param>
    ///  <param name="innerException">An exception that is the root cause of the exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property. </param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, URI that identifies the piece of code that caused the exception, and application specific exception information.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property. </param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property. </param>
    ///  <param name="actor">A URI that identifies the piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property. </param>
    ///  <param name="detail">An <see cref="T:System.Xml.XmlNode" />
    ///  that contains application specific exception information. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  property. </param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; detail: DDN.System.Xml.DNXmlNode): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, URI that identifies the piece of code that caused the exception, application-specific exception information, and reference to the root cause of the exception.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property. </param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property. </param>
    ///  <param name="actor">A URI that identifies the piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property. </param>
    ///  <param name="detail">An <see cref="T:System.Xml.XmlNode" />
    ///  that contains application specific exception information. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  property. </param>
    ///  <param name="innerException">An exception that is the root cause of the exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property. </param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; detail: DDN.System.Xml.DNXmlNode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, and subcode.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="subCode">An optional subcode for the SOAP fault. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.SubCode" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; subCode: DNSoapFaultSubCode): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, URI that identifies the piece of code that caused the exception, application-specific exception information, and reference to the root cause of the exception.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="actor">A URI that identifies the piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property.</param>
    ///  <param name="role">A URI that represents the XML Web service's function in processing the SOAP message. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  property.</param>
    ///  <param name="detail">An <see cref="T:System.Xml.XmlNode" />
    ///  that contains application specific exception information. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  property.</param>
    ///  <param name="subCode">An optional subcode for the SOAP fault. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.SubCode" />
    ///  property.</param>
    ///  <param name="innerException">An exception that is the root cause of the exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; detail: DDN.System.Xml.DNXmlNode; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  class with the specified exception message, exception code, URI that identifies the piece of code that caused the exception, URI that represents the XML Web service's function in processing the SOAP message, the human language associated with the exception, the application-specific exception information, the subcode for the SOAP fault and reference to the root cause of the exception.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="actor">A URI that identifies the piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property.</param>
    ///  <param name="role">A URI that represents the XML Web service's function in processing the SOAP message. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  property.</param>
    ///  <param name="lang">A human language associated with the exception. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Lang" />
    ///  property.</param>
    ///  <param name="detail">An <see cref="T:System.Xml.XmlNode" />
    ///  that contains application specific exception information. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  property.</param>
    ///  <param name="subCode">An optional subcode for the SOAP fault. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.SubCode" />
    ///  property.</param>
    ///  <param name="innerException">An exception that is the root cause of the exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; lang: string; detail: DDN.System.Xml.DNXmlNode; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ServerFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_ClientFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_DetailElementName: DDN.System.Xml.DNXmlQualifiedName;

  { static fields } 

    ///<summary>Specifies that a SOAP fault code that represents an error occurred during the processing of a client call on the server, where the problem is not due to the message contents.</summary>
    {class} property ServerFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ServerFaultCode;
    ///<summary>Specifies a SOAP fault code that represents a client call that is not formatted correctly or does not contain the appropriate information.</summary>
    {class} property ClientFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ClientFaultCode;
    ///<summary>A SOAP fault code that represents an invalid namespace for a SOAP envelope was found during the processing of the SOAP message.</summary>
    {class} property VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_VersionMismatchFaultCode;
    ///<summary>A SOAP Fault Code that represents a SOAP element marked with the <see langword="MustUnderstand" />
    ///  attribute was not processed.</summary>
    {class} property MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_MustUnderstandFaultCode;
    ///<summary>Gets an <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that represents the <see cref="P:System.Web.Services.Protocols.SoapException.Detail" />
    ///  element of a SOAP Fault code.</summary>
    {class} property DetailElementName: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_DetailElementName;

  { static methods } 

    ///<summary>Returns a value that indicates whether the SOAP fault code is equivalent to the <see langword="Server" />
    ///  SOAP fault code regardless of the version of the SOAP protocol used.</summary>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that contains a SOAP fault code. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="code" />
    ///  is equivalent to the <see langword="Server" />
    ///  SOAP fault code; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsServerFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    ///<summary>Returns a value that indicates whether the SOAP fault code is equivalent to the <see langword="Client" />
    ///  SOAP fault code regardless of the version of the SOAP protocol used.</summary>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that contains a SOAP fault code. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="code" />
    ///  is equivalent to the <see langword="Client" />
    ///  SOAP fault code; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsClientFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    ///<summary>Returns a value that indicates whether the SOAP fault code is equivalent to the <see langword="VersionMismatch" />
    ///  SOAP fault code regardless of the version of the SOAP protocol used.</summary>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that contains a SOAP fault code. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="code" />
    ///  is equivalent to the <see langword="VersionMismatch" />
    ///  SOAP fault code; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsVersionMismatchFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    ///<summary>Returns a value that indicates whether the SOAP fault code is equivalent to <see langword="MustUnderstand" />
    ///  regardless of the version of the SOAP protocol used.</summary>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that contains a SOAP fault code. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="code" />
    ///  is equivalent to the <see langword="MustUnderstand" />
    ///  SOAP fault code; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsMustUnderstandFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;

  end;

  ///<summary>Represents the exception that is thrown when an XML Web service method is called over SOAP and an exception occurs.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapException')]
  DNSoapException = interface(DDN.mscorlib.DNSystemException)
  ['{F6D4AC82-366C-3BC5-AE59-ED6A0C95CADB}']
  { getters & setters } 

    function get_Actor: string;
    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_Detail: DDN.System.Xml.DNXmlNode;
    function get_Lang: string;
    function get_Node: string;
    function get_Role: string;
    function get_SubCode: DNSoapFaultSubCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Sets the <see cref="T:System.Runtime.Serialization." />
    ///<see cref="SerializationInfo" />
    ///  with information about the exception.</summary>
    ///  <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  that holds the serialized object data about the exception being thrown.</param>
    ///  <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  that contains contextual information about the source or destination.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the piece of code that caused the exception.</summary>
    ///<returns>The piece of code that caused the exception.</returns>
    property Actor: string read get_Actor;
    ///<summary>Gets the type of SOAP fault code.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the SOAP fault code that occurred.</returns>
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    ///<summary>Gets an <see cref="T:System.Xml.XmlNode" />
    ///  that represents the application-specific error information details.</summary>
    ///<returns>The application-specific error information.</returns>
    property Detail: DDN.System.Xml.DNXmlNode read get_Detail;
    ///<summary>Gets the human language associated with the exception.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  value that identifies the human language associated with the exception.</returns>
    property Lang: string read get_Lang;
    ///<summary>Gets a URI that represents the piece of code that caused the exception.</summary>
    ///<returns>The piece of code that caused the exception.</returns>
    property Node: string read get_Node;
    ///<summary>Gets a URI that represents the XML Web service's function in processing the SOAP message.</summary>
    ///<returns>The role of the XML Web service throwing the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  . The default is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Role: string read get_Role;
    ///<summary>Gets the optional error information contained in the <see langword="subcode" />
    ///  XML element of a SOAP fault.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  that represents the contents of the <see langword="subcode" />
    ///  XML element of a SOAP fault.</returns>
    property SubCode: DNSoapFaultSubCode read get_SubCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSoapException = class(TDNGenericImport<DNSoapExceptionClass, DNSoapException>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderExceptionClass = interface(DNSoapExceptionClass)
  ['{139F0F84-DD11-5FD3-A796-E4B1574F981C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  class. </summary>
    {class} function init: DNSoapHeaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  class.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">The type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="actor">The piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string): DNSoapHeaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  class.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">The type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="actor">The piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property.</param>
    ///  <param name="innerException">A reference to the root cause of an exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  class.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">The type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName): DNSoapHeaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  class.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">The type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="innerException">A reference to the root cause of an exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  class with the associated data.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">The type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="actor">The piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property.</param>
    ///  <param name="role">An URI that represents the role of the XML Web service in the processing of the SOAP message. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  property.</param>
    ///  <param name="subCode">A <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  that contains the contents of the <see langword="&lt;subcode&gt;" />
    ///  element of a SOAP fault.</param>
    ///  <param name="innerException">A reference to the root cause of the exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHeaderException" />
    ///  class with the associated data.</summary>
    ///  <param name="message">A message that identifies the reason the exception occurred. This parameter sets the <see cref="P:System.Exception.Message" />
    ///  property.</param>
    ///  <param name="code">The type of error that occurred. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Code" />
    ///  property.</param>
    ///  <param name="actor">The piece of code that caused the exception. Typically, this is a URL to an XML Web service method. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Actor" />
    ///  property.</param>
    ///  <param name="role">An URI that represents the role of the XML Web service in the processing of the SOAP message. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Role" />
    ///  property.</param>
    ///  <param name="lang">A string that identifies the human language associated with the exception. This parameter sets the <see cref="P:System.Web.Services.Protocols.SoapException.Lang" />
    ///  property.</param>
    ///  <param name="subCode">A <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  that contains the contents of the <see langword="subcode" />
    ///  element of a SOAP fault.</param>
    ///  <param name="innerException">A reference to the root cause of an exception. This parameter sets the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; lang: string; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;

  end;

  ///<summary>The SOAP representation of a server error.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderException')]
  DNSoapHeaderException = interface(DNSoapException)
  ['{A0A70FB0-CA04-36F0-BCA2-C998A22E2E45}']
  { getters & setters } 

    function get_Actor: string;
    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_Detail: DDN.System.Xml.DNXmlNode;
    function get_Lang: string;
    function get_Node: string;
    function get_Role: string;
    function get_SubCode: DNSoapFaultSubCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Sets the <see cref="T:System.Runtime.Serialization." />
    ///<see cref="SerializationInfo" />
    ///  with information about the exception.</summary>
    ///  <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  that holds the serialized object data about the exception being thrown.</param>
    ///  <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  that contains contextual information about the source or destination.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the piece of code that caused the exception.</summary>
    ///<returns>The piece of code that caused the exception.</returns>
    property Actor: string read get_Actor;
    ///<summary>Gets the type of SOAP fault code.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  that specifies the SOAP fault code that occurred.</returns>
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    ///<summary>Gets an <see cref="T:System.Xml.XmlNode" />
    ///  that represents the application-specific error information details.</summary>
    ///<returns>The application-specific error information.</returns>
    property Detail: DDN.System.Xml.DNXmlNode read get_Detail;
    ///<summary>Gets the human language associated with the exception.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  value that identifies the human language associated with the exception.</returns>
    property Lang: string read get_Lang;
    ///<summary>Gets a URI that represents the piece of code that caused the exception.</summary>
    ///<returns>The piece of code that caused the exception.</returns>
    property Node: string read get_Node;
    ///<summary>Gets a URI that represents the XML Web service's function in processing the SOAP message.</summary>
    ///<returns>The role of the XML Web service throwing the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  . The default is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Role: string read get_Role;
    ///<summary>Gets the optional error information contained in the <see langword="subcode" />
    ///  XML element of a SOAP fault.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  that represents the contents of the <see langword="subcode" />
    ///  XML element of a SOAP fault.</returns>
    property SubCode: DNSoapFaultSubCode read get_SubCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSoapHeaderException = class(TDNGenericImport<DNSoapHeaderExceptionClass, DNSoapHeaderException>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebClientProtocolClass = interface(DNObjectClass)
  ['{EA09A5F2-D74C-53C3-8FBD-F79C8AA89BC8}']
  end;

  ///<summary>Specifies the base class for all XML Web service client proxies created using ASP.NET.</summary>
  [DNTypeName('System.Web.Services.Protocols.WebClientProtocol')]
  DNWebClientProtocol = interface(DNObject)
  ['{4277F857-2873-3E94-86BA-DDEEA59EB9F6}']
  { getters & setters } 

    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Cancels a request to an XML Web service method.</summary>
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets security credentials for XML Web service client authentication.</summary>
    ///<returns>The <see cref="T:System.Net.ICredentials" />
    ///  for the XML Web service client.</returns>
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    ///<summary>Gets or sets a value that indicates whether to set the <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials" />
    ///  property to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  property.</summary>
    ///<returns><see langword="true" />
    ///  if the Credentials property is set to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  property; otherwise, <see langword="false" />
    ///  .</returns>
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    ///<summary>Gets or sets the name of the connection group for the request.</summary>
    ///<returns>The name of the connection group. The default is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    ///<summary>Gets or sets whether pre-authentication is enabled.</summary>
    ///<returns><see langword="true" />
    ///  to pre-authenticate the request; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    ///<summary>Gets or sets the base URL of the XML Web service the client is requesting.</summary>
    ///<returns>The base URL of the XML Web service the client is requesting. The default is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>The <see cref="T:System.Text.Encoding" />
    ///  used to make the client request to the XML Web service.</summary>
    ///<returns>The character encoding for the client request. The default is <see langword="null" />
    ///  , which uses the default encoding for the underlying transport and protocol.</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    ///<summary>Indicates the time an XML Web service client waits for the reply to a synchronous XML Web service request to arrive (in milliseconds).</summary>
    ///<returns>The time out, in milliseconds, for synchronous calls to the XML Web service. The default is 100000 milliseconds.</returns>
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNWebClientProtocol = class(TDNGenericImport<DNWebClientProtocolClass, DNWebClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpWebClientProtocolClass = interface(DNWebClientProtocolClass)
  ['{04C492BB-8D7E-598F-B3CA-C68B2556FB2E}']
  { static methods } 

    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  for each XML Web service method exposed by the specified type, and stores the mappings in the specified <see cref="T:System.Collections.ArrayList" />
    ///  .</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  that exposes the XML Web service methods.</param>
    ///  <param name="mappings">A <see cref="T:System.Collections.ArrayList" />
    ///  that is used to store the mappings.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="type" />
    ///  can be assigned to a <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function GenerateXmlMappings(&type: DDN.mscorlib.DNType; mappings: DDN.mscorlib.DNArrayList): Boolean; overload;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  for each XML Web service method exposed by the specified types, and stores the mappings in the specified <see cref="T:System.Collections.ArrayList" />
    ///  , as well as in a <see cref="T:System.Collections.Hashtable" />
    ///  that this method returns.</summary>
    ///  <param name="types">An array of type <see cref="T:System.Type" />
    ///  that contains the types that expose the XML Web service methods.</param>
    ///  <param name="mappings">A <see cref="T:System.Collections.ArrayList" />
    ///  that is used to store the mappings.</param>
    ///<returns>A <see cref="T:System.Collections.Hashtable" />
    ///  that contains the <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  for each XML Web service method exposed by the specified types. The types contained in <paramref name="types" />
    ///  are used as keys.</returns>
    {class} function GenerateXmlMappings(types: TArray<DDN.mscorlib.DNType>; mappings: DDN.mscorlib.DNArrayList): DDN.mscorlib.DNHashtable; overload;

  end;

  ///<summary>Represents the base class for all XML Web service client proxies that use the HTTP transport protocol.</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpWebClientProtocol')]
  DNHttpWebClientProtocol = interface(DNWebClientProtocol)
  ['{A2BAAC11-CAD5-36DF-9319-A6110144C2DA}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Cancels a request to an XML Web service method.</summary>
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets whether the client automatically follows server redirects.</summary>
    ///<returns><see langword="true" />
    ///  to automatically redirect the client to follow server redirects; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Net.WebException">The <see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  property is <see langword="false" />
    ///  and the Web server attempts to redirect the request. </exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>Gets or sets the collection of cookies.</summary>
    ///<returns>A <see cref="T:System.Net.CookieContainer" />
    ///  that represents the cookies for a Web Services client.</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>Gets the collection of client certificates.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  that represents the client certificates.</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>Gets or sets a value that indicates whether decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>Gets or sets the value for the user agent header that is sent with each request.</summary>
    ///<returns>The value of the HTTP protocol user agent header. The default is "MS Web Services Client Protocol <paramref name="number" />
    ///  ", where <paramref name="number" />
    ///  is the version of the common language runtime (for example, 1.0.3705.0).</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>Gets or sets proxy information for making an XML Web service request through a firewall.</summary>
    ///<returns>An <see cref="T:System.Net.IWebProxy" />
    ///  that contains the proxy information for making requests through a firewall. The default value is the operating system proxy settings.</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>Gets or sets a value that indicates whether connection sharing is enabled when the client uses NTLM authentication to connect to the Web server that hosts the XML Web service.</summary>
    ///<returns><see langword="true" />
    ///  if connection sharing is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    ///<summary>Gets or sets security credentials for XML Web service client authentication.</summary>
    ///<returns>The <see cref="T:System.Net.ICredentials" />
    ///  for the XML Web service client.</returns>
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    ///<summary>Gets or sets a value that indicates whether to set the <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Credentials" />
    ///  property to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  property.</summary>
    ///<returns><see langword="true" />
    ///  if the Credentials property is set to the value of the <see cref="P:System.Net.CredentialCache.DefaultCredentials" />
    ///  property; otherwise, <see langword="false" />
    ///  .</returns>
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    ///<summary>Gets or sets the name of the connection group for the request.</summary>
    ///<returns>The name of the connection group. The default is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    ///<summary>Gets or sets whether pre-authentication is enabled.</summary>
    ///<returns><see langword="true" />
    ///  to pre-authenticate the request; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    ///<summary>Gets or sets the base URL of the XML Web service the client is requesting.</summary>
    ///<returns>The base URL of the XML Web service the client is requesting. The default is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>The <see cref="T:System.Text.Encoding" />
    ///  used to make the client request to the XML Web service.</summary>
    ///<returns>The character encoding for the client request. The default is <see langword="null" />
    ///  , which uses the default encoding for the underlying transport and protocol.</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    ///<summary>Indicates the time an XML Web service client waits for the reply to a synchronous XML Web service request to arrive (in milliseconds).</summary>
    ///<returns>The time out, in milliseconds, for synchronous calls to the XML Web service. The default is 100000 milliseconds.</returns>
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpWebClientProtocol = class(TDNGenericImport<DNHttpWebClientProtocolClass, DNHttpWebClientProtocol>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{20DD4869-1A08-51DA-8B14-1EA69BCE64A5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  class.</summary>
    {class} function init: DNDiscoveryClientProtocol;

  end;

  ///<summary>Provides support for programmatically invoking XML Web services discovery.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientProtocol')]
  DNDiscoveryClientProtocol = interface(DNHttpWebClientProtocol)
  ['{0DF7E8C1-DDEA-3842-A402-90FE051ED477}']
  { getters & setters } 

    function get_AdditionalInformation: DDN.mscorlib.DNIList;
    function get_Documents: DNDiscoveryClientDocumentCollection;
    function get_Errors: DNDiscoveryExceptionDictionary;
    function get_References: DNDiscoveryClientReferenceCollection;
    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Discovers the supplied URL to determine if it is a discovery document.</summary>
    ///  <param name="url">The URL where XML Web services discovery begins. </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  containing the results of XML Web services discovery at the supplied URL.</returns>
    ///<exception cref="T:System.Net.WebException">Accessing the supplied URL returned an HTTP status code other than <see cref="F:System.Net.HttpStatusCode.OK" />
    ///  . </exception><exception cref="T:System.InvalidOperationException">The <paramref name="url" />
    ///  parameteris a valid URL, but does not point to a valid discovery document. </exception>
    function Discover(url: string): DNDiscoveryDocument;
    ///<summary>Discovers the supplied URL to determine if it is a discovery document, service description or an XML Schema Definition (XSD) schema.</summary>
    ///  <param name="url">The URL where XML Web services discovery begins. </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  containing the results of XML Web services discovery at the supplied URL. If the <paramref name="url" />
    ///  parameter refers to a service description or an XSD Schema, a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  is created in memory for it.</returns>
    ///<exception cref="T:System.Net.WebException">Accessing the supplied URL returned an HTTP status code other than <see cref="F:System.Net.HttpStatusCode.OK" />
    ///  . </exception><exception cref="T:System.InvalidOperationException">The <paramref name="url" />
    ///  parameteris a valid URL, but does not point to a valid discovery document, service description, or XSD schema. </exception>
    function DiscoverAny(url: string): DNDiscoveryDocument;
    function Download(out url: string): DDN.mscorlib.DNStream; overload;
    function Download(out url: string; out contentType: string): DDN.mscorlib.DNStream; overload;
    ///<summary>Instructs the <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  object to load any external references.</summary>
    procedure LoadExternals;
    ///<summary>Reads in a file containing a map of saved discovery documents populating the <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  and <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.References" />
    ///  properties, with discovery documents, XML Schema Definition (XSD) schemas, and service descriptions referenced in the file.</summary>
    ///  <param name="topLevelFilename">Name of file to read in, containing the map of saved discovery documents. </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  containing the results found in the file with the map of saved discovery documents. The file format is a <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoveryClientResultsFile" />
    ///  class serialized into XML; however, one would typically create the file using only the <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.WriteAll(System.String,System.String)" />
    ///  method or Disco.exe.</returns>
    function ReadAll(topLevelFilename: string): DNDiscoveryClientResultCollection;
    ///<summary>Resolves all references to discovery documents, XML Schema Definition (XSD) schemas, and service descriptions in the <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.References" />
    ///  property, as well as references found in referenced discovery documents.</summary>
    procedure ResolveAll;
    ///<summary>Resolves all references to discovery documents, XML Schema Definition (XSD) schemas and service descriptions in <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.References" />
    ///  , as well as references found in those discovery documents.</summary>
    procedure ResolveOneLevel;
    ///<summary>Writes all discovery documents, XML Schema Definition (XSD) schemas, and Service Descriptions in the <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  property to the supplied directory and creates a file in that directory.</summary>
    ///  <param name="directory">The directory in which to save all documents currently in the <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  property. </param>
    ///  <param name="topLevelFilename">The name of the file to create or overwrite containing a map of all documents saved. </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  containing the results of all files saved.</returns>
    function WriteAll(directory: string; topLevelFilename: string): DNDiscoveryClientResultCollection;
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets information in addition to references found in the discovery document.</summary>
    ///<returns>An <see cref="T:System.Collections.IList" />
    ///  containing additional information found in the discovery document.</returns>
    property AdditionalInformation: DDN.mscorlib.DNIList read get_AdditionalInformation;
    ///<summary>Gets a collection of discovery documents.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  representing the collection of discovery documents found.</returns>
    property Documents: DNDiscoveryClientDocumentCollection read get_Documents;
    ///<summary>Gets a collection of exceptions that occurred during invocation of method from this class.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryExceptionDictionary" />
    ///  of exceptions.</returns>
    property Errors: DNDiscoveryExceptionDictionary read get_Errors;
    ///<summary>A collection of references founds in resolved discovery documents.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryClientReferenceCollection" />
    ///  of references discovered.</returns>
    property References: DNDiscoveryClientReferenceCollection read get_References;
    ///<summary>Gets or sets whether the client automatically follows server redirects.</summary>
    ///<returns><see langword="true" />
    ///  to automatically redirect the client to follow server redirects; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Net.WebException">The <see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  property is <see langword="false" />
    ///  and the Web server attempts to redirect the request. </exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>Gets or sets the collection of cookies.</summary>
    ///<returns>A <see cref="T:System.Net.CookieContainer" />
    ///  that represents the cookies for a Web Services client.</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>Gets the collection of client certificates.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  that represents the client certificates.</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>Gets or sets a value that indicates whether decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>Gets or sets the value for the user agent header that is sent with each request.</summary>
    ///<returns>The value of the HTTP protocol user agent header. The default is "MS Web Services Client Protocol <paramref name="number" />
    ///  ", where <paramref name="number" />
    ///  is the version of the common language runtime (for example, 1.0.3705.0).</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>Gets or sets proxy information for making an XML Web service request through a firewall.</summary>
    ///<returns>An <see cref="T:System.Net.IWebProxy" />
    ///  that contains the proxy information for making requests through a firewall. The default value is the operating system proxy settings.</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>Gets or sets a value that indicates whether connection sharing is enabled when the client uses NTLM authentication to connect to the Web server that hosts the XML Web service.</summary>
    ///<returns><see langword="true" />
    ///  if connection sharing is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDiscoveryClientProtocol = class(TDNGenericImport<DNDiscoveryClientProtocolClass, DNDiscoveryClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpSimpleClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{0DDD2FD8-BBA9-5D80-8B38-4A60DFC2634C}']
  end;

  ///<summary>Represents the base class for communicating with an XML Web service using the simple HTTP-GET and HTTP-POST protocols bindings.</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpSimpleClientProtocol')]
  DNHttpSimpleClientProtocol = interface(DNHttpWebClientProtocol)
  ['{FA8E1429-5177-36EB-813E-9427B1FA0CF5}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets whether the client automatically follows server redirects.</summary>
    ///<returns><see langword="true" />
    ///  to automatically redirect the client to follow server redirects; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Net.WebException">The <see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  property is <see langword="false" />
    ///  and the Web server attempts to redirect the request. </exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>Gets or sets the collection of cookies.</summary>
    ///<returns>A <see cref="T:System.Net.CookieContainer" />
    ///  that represents the cookies for a Web Services client.</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>Gets the collection of client certificates.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  that represents the client certificates.</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>Gets or sets a value that indicates whether decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>Gets or sets the value for the user agent header that is sent with each request.</summary>
    ///<returns>The value of the HTTP protocol user agent header. The default is "MS Web Services Client Protocol <paramref name="number" />
    ///  ", where <paramref name="number" />
    ///  is the version of the common language runtime (for example, 1.0.3705.0).</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>Gets or sets proxy information for making an XML Web service request through a firewall.</summary>
    ///<returns>An <see cref="T:System.Net.IWebProxy" />
    ///  that contains the proxy information for making requests through a firewall. The default value is the operating system proxy settings.</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>Gets or sets a value that indicates whether connection sharing is enabled when the client uses NTLM authentication to connect to the Web server that hosts the XML Web service.</summary>
    ///<returns><see langword="true" />
    ///  if connection sharing is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpSimpleClientProtocol = class(TDNGenericImport<DNHttpSimpleClientProtocolClass, DNHttpSimpleClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpGetClientProtocolClass = interface(DNHttpSimpleClientProtocolClass)
  ['{20521212-F92D-58B4-9EDF-487640F4D0B6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HttpGetClientProtocol" />
    ///  class.</summary>
    {class} function init: DNHttpGetClientProtocol;

  end;

  ///<summary>The base class for XML Web service client proxies that use the HTTP-GET protocol.</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpGetClientProtocol')]
  DNHttpGetClientProtocol = interface(DNHttpSimpleClientProtocol)
  ['{278FFCD4-7F0B-3AAF-AD2C-BF43BED9E14C}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpGetClientProtocol = class(TDNGenericImport<DNHttpGetClientProtocolClass, DNHttpGetClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpPostClientProtocolClass = interface(DNHttpSimpleClientProtocolClass)
  ['{634771B0-779C-58FF-BE61-E21423B0D95C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HttpPostClientProtocol" />
    ///  class.</summary>
    {class} function init: DNHttpPostClientProtocol;

  end;

  ///<summary>The base class for XML Web service client proxies that use the HTTP-POST protocol.</summary>
  [DNTypeName('System.Web.Services.Protocols.HttpPostClientProtocol')]
  DNHttpPostClientProtocol = interface(DNHttpSimpleClientProtocol)
  ['{5C6804FA-EC9D-3BE2-8D8D-47F7FCE46B8A}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpPostClientProtocol = class(TDNGenericImport<DNHttpPostClientProtocolClass, DNHttpPostClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHttpClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{C7BE43AF-6807-5E8D-9DA4-993B28127797}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
    ///  class.</summary>
    {class} function init: DNSoapHttpClientProtocol;

  end;

  ///<summary>Specifies the class client that proxies derive from when using SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHttpClientProtocol')]
  DNSoapHttpClientProtocol = interface(DNHttpWebClientProtocol)
  ['{EE5E5453-6867-333F-8E25-56B63C54F470}']
  { getters & setters } 

    function get_SoapVersion: DNSoapProtocolVersion;
    procedure set_SoapVersion(value: DNSoapProtocolVersion);
    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Dynamically binds to an XML Web service described in the discovery document at <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />
    ///  .</summary>
    ///<exception cref="T:System.Exception">The binding defined in the proxy class could not be found in the discovery document at <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />
    ///  . </exception><exception cref="T:System.Exception">The proxy class does not have a binding defined. </exception>
    procedure Discover;
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the version of the SOAP protocol used to make the SOAP request to the XML Web service.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  values. The default is <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />
    ///  .</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion write set_SoapVersion;
    ///<summary>Gets or sets whether the client automatically follows server redirects.</summary>
    ///<returns><see langword="true" />
    ///  to automatically redirect the client to follow server redirects; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Net.WebException">The <see cref="P:System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect" />
    ///  property is <see langword="false" />
    ///  and the Web server attempts to redirect the request. </exception>
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    ///<summary>Gets or sets the collection of cookies.</summary>
    ///<returns>A <see cref="T:System.Net.CookieContainer" />
    ///  that represents the cookies for a Web Services client.</returns>
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    ///<summary>Gets the collection of client certificates.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />
    ///  that represents the client certificates.</returns>
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    ///<summary>Gets or sets a value that indicates whether decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if decompression is enabled for this <see cref="T:System.Web.Services.Protocols.HttpWebClientProtocol" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    ///<summary>Gets or sets the value for the user agent header that is sent with each request.</summary>
    ///<returns>The value of the HTTP protocol user agent header. The default is "MS Web Services Client Protocol <paramref name="number" />
    ///  ", where <paramref name="number" />
    ///  is the version of the common language runtime (for example, 1.0.3705.0).</returns>
    property UserAgent: string read get_UserAgent write set_UserAgent;
    ///<summary>Gets or sets proxy information for making an XML Web service request through a firewall.</summary>
    ///<returns>An <see cref="T:System.Net.IWebProxy" />
    ///  that contains the proxy information for making requests through a firewall. The default value is the operating system proxy settings.</returns>
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    ///<summary>Gets or sets a value that indicates whether connection sharing is enabled when the client uses NTLM authentication to connect to the Web server that hosts the XML Web service.</summary>
    ///<returns><see langword="true" />
    ///  if connection sharing is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSoapHttpClientProtocol = class(TDNGenericImport<DNSoapHttpClientProtocolClass, DNSoapHttpClientProtocol>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FA19947-DDE3-5DD1-9007-EC486D3EDB67}']
  end;

  ///<summary>Represents a WSDL violation of the WSI Basic Profile version 1.1.</summary>
  [DNTypeName('System.Web.Services.Description.BasicProfileViolation')]
  DNBasicProfileViolation = interface(DDN.mscorlib.DNObject)
  ['{66DBB2C6-F87D-381C-8F7F-1A8F0AB571F3}']
  { getters & setters } 

    function get_Claims: DNWsiProfiles;
    function get_Details: string;
    function get_Elements: DDN.System.DNStringCollection;
    function get_NormativeStatement: string;
    function get_Recommendation: string;

  { methods } 

    ///<summary>Returns a <see cref="T:System.String" />
    ///  that comprises information from <see cref="P:System.Web.Services.Description.BasicProfileViolation.NormativeStatement" />
    ///  , <see cref="P:System.Web.Services.Description.BasicProfileViolation.Details" />
    ///  , and <see cref="P:System.Web.Services.Description.BasicProfileViolation.Elements" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that comprises information from <see cref="P:System.Web.Services.Description.BasicProfileViolation.NormativeStatement" />
    ///  , <see cref="P:System.Web.Services.Description.BasicProfileViolation.Details" />
    ///  , and <see cref="P:System.Web.Services.Description.BasicProfileViolation.Elements" />
    ///  .</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Web.Services.WsiProfiles" />
    ///  object that specifies whether the Web service declares that it conforms to the WSI Basic Profile version 1.1.</summary>
    ///<returns>A <see cref="T:System.Web.Services.WsiProfiles" />
    ///  object that specifies whether the Web service declares that it conforms to the WSI Basic Profile version 1.1.</returns>
    property Claims: DNWsiProfiles read get_Claims;
    ///<summary>Gets a <see cref="T:System.String" />
    ///  that provides a detailed description of the WSDL violation of the Basic Profile.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that provides a detailed description of the WSDL violation of the Basic Profile.</returns>
    property Details: string read get_Details;
    ///<summary>Represents WSDL elements that do not comply with the WSI Basic Profile version 1.1 specification.</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  that contains the WSDL elements that do not comply with the WSI Basic Profile version 1.1 specification.</returns>
    property Elements: DDN.System.DNStringCollection read get_Elements;
    ///<summary>Gets the identifier for the WSDL violation of the Basic Profile version 1.1 specification. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the identifier (For example, R2038) for the WSDL violation of the Basic Profile version 1.1 specification. </returns>
    property NormativeStatement: string read get_NormativeStatement;
    ///<summary>Gets a <see cref="T:System.String" />
    ///  object that describes the WSDL violation of the Basic Profile version 1.1 specification.</summary>
    ///<returns>The <see cref="T:System.String" />
    ///  object that describes the WSDL violation of the Basic Profile version 1.1 specification.</returns>
    property Recommendation: string read get_Recommendation;
  end;

  TDNBasicProfileViolation = class(TDNGenericImport<DNBasicProfileViolationClass, DNBasicProfileViolation>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E738742-7A52-57B4-9C70-11FDBC6E26E5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.BasicProfileViolationEnumerator" />
    ///  class.</summary>
    ///  <param name="list">The <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  to be enumerated using this class.</param>
    {class} function init(list: DNBasicProfileViolationCollection): DNBasicProfileViolationEnumerator;

  end;

  ///<summary>Enumerates the elements in a <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
  ///  .</summary>
  [DNTypeName('System.Web.Services.Description.BasicProfileViolationEnumerator')]
  DNBasicProfileViolationEnumerator = interface(DDN.mscorlib.DNObject)
  ['{EBF9BFBC-F116-3FEC-AD73-51ED50522571}']
  { getters & setters } 

    function get_Current: DNBasicProfileViolation;

  { methods } 

    ///<summary>Releases all resources used by the current instance of the <see cref="T:System.Web.Services.Description.BasicProfileViolationEnumerator" />
    ///  class.Releases all resources used by the <see cref="T:System.Web.Services.Description.BasicProfileViolationEnumerator" />
    ///  . </summary>
    procedure Dispose;
    ///<summary>Enumerates to the next element in the <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  .</summary>
    ///<returns><see langword="false" />
    ///  if the end of the collection is reached; otherwise <see langword="true" />
    ///  .</returns>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the current <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  element in the <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.BasicProfileViolation" />
    ///  object representing the current element in the <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  .</returns>
    property Current: DNBasicProfileViolation read get_Current;
  end;

  TDNBasicProfileViolationEnumerator = class(TDNGenericImport<DNBasicProfileViolationEnumeratorClass, DNBasicProfileViolationEnumerator>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNDocumentableItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4532CAC-DF95-5A37-BC85-8C3BB9C73219}']
  end;

  ///<summary>Represents the abstract base class from which several classes in the <see cref="N:System.Web.Services.Description" />
  ///  namespace are derived.</summary>
  [DNTypeName('System.Web.Services.Description.DocumentableItem')]
  DNDocumentableItem = interface(DDN.mscorlib.DNObject)
  ['{A3CDDD20-DC42-3D33-9E69-8548C4136376}']
  { getters & setters } 

    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the text documentation for the instance of the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A string that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>Gets or sets the documentation element for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xml.XmlElement" />
    ///  that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>Gets or sets an array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</summary>
    ///<returns>An array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>Gets or sets the dictionary of namespace prefixes and namespaces used to preserve namespace prefixes and namespaces when a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object is constructed.</summary>
    ///<returns>A <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  dictionary containing prefix/namespace pairs.</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNDocumentableItem = class(TDNGenericImport<DNDocumentableItemClass, DNDocumentableItem>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNImportClass = interface(DNDocumentableItemClass)
  ['{20B3472F-575C-5D93-A787-0F7DD2483966}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Import" />
    ///  class.</summary>
    {class} function init: DNImport;

  end;

  ///<summary>Associates an XML namespace with a document location. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Import')]
  DNImport = interface(DNDocumentableItem)
  ['{3B61C69D-0E5F-31F6-BA7B-B78C86F08A7A}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.Import" />
    ///  class.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.Import" />
    ///  class.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets a reference to the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the <see cref="T:System.Web.Services.Description.Import" />
    ///  is a member.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the <see cref="T:System.Web.Services.Description.Import" />
    ///  is a member.</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>Gets or sets the value of the XML <see langword="namespace" />
    ///  attribute of the <see langword="import" />
    ///  element.</summary>
    ///<returns>The value of the XML <see langword="namespace" />
    ///  attribute of the <see langword="import" />
    ///  element.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets the value of the XML <see langword="location" />
    ///  attribute of the <see langword="import" />
    ///  element.</summary>
    ///<returns>The value of the XML <see langword="location" />
    ///  attribute of the <see langword="import" />
    ///  element. This value also specifies the URL of the imported document.</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>Gets or sets the text documentation for the instance of the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A string that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>Gets or sets the documentation element for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xml.XmlElement" />
    ///  that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>Gets or sets an array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</summary>
    ///<returns>An array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>Gets or sets the dictionary of namespace prefixes and namespaces used to preserve namespace prefixes and namespaces when a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object is constructed.</summary>
    ///<returns>A <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  dictionary containing prefix/namespace pairs.</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNImport = class(TDNGenericImport<DNImportClass, DNImport>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNNamedItemClass = interface(DNDocumentableItemClass)
  ['{EFA9320C-F53E-5BF6-9480-F24162673F4E}']
  end;

  ///<summary>Represents a named, item that can be documented.</summary>
  [DNTypeName('System.Web.Services.Description.NamedItem')]
  DNNamedItem = interface(DNDocumentableItem)
  ['{5A867DA0-FFED-3C2E-959C-256AA9CE10FA}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the text documentation for the instance of the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A string that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>Gets or sets the documentation element for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xml.XmlElement" />
    ///  that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>Gets or sets an array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</summary>
    ///<returns>An array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>Gets or sets the dictionary of namespace prefixes and namespaces used to preserve namespace prefixes and namespaces when a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object is constructed.</summary>
    ///<returns>A <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  dictionary containing prefix/namespace pairs.</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNNamedItem = class(TDNGenericImport<DNNamedItemClass, DNNamedItem>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBindingClass = interface(DNNamedItemClass)
  ['{E1C20336-C100-559B-91AC-B07E627F922A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Binding" />
    ///  class.</summary>
    {class} function init: DNBinding;

  end;

  ///<summary>Specifies the concrete data format and protocols used in the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Binding')]
  DNBinding = interface(DNNamedItem)
  ['{72F0A66B-ED90-3B3F-B4AA-C95E599EDB42}']
  { getters & setters } 

    function get_ServiceDescription: DNServiceDescription;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operations: DNOperationBindingCollection;
    function get_Type: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Type(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the <see cref="T:System.Web.Services.Description.Binding" />
    ///  is a member.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the <see cref="T:System.Web.Services.Description.Binding" />
    ///  is a member.</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>Gets the collection of extensibility elements used in the XML Web service.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  object that contains the collection of extensibility elements used in the XML Web service.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the collection of specifications for data formats and message protocols used in the action supported by the XML Web service.</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OperationBindingCollection" />
    ///  object that contains the collection of specifications for data formats and message protocols used in the action supported by the XML Web service.</returns>
    property Operations: DNOperationBindingCollection read get_Operations;
    ///<summary>Gets or sets a value representing the namespace-qualified name of the <see cref="T:System.Web.Services.Description.PortType" />
    ///  with which the <see langword="Binding" />
    ///  is associated.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  of the <see cref="T:System.Web.Services.Description.PortType" />
    ///  with which the <see langword="Binding" />
    ///  is associated.</returns>
    property &Type: DDN.System.Xml.DNXmlQualifiedName read get_Type write set_Type;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNBinding = class(TDNGenericImport<DNBindingClass, DNBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageClass = interface(DNNamedItemClass)
  ['{0BD73070-A3A0-577B-AFD0-3A40B4045A12}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Message" />
    ///  class. </summary>
    {class} function init: DNMessage;

  end;

  ///<summary>Provides an abstract definition of data passed by an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Message')]
  DNMessage = interface(DNNamedItem)
  ['{7831869D-5BDC-3D1D-BFED-33AF91678474}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Parts: DNMessagePartCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    ///<summary>Searches the <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  returned by the <see cref="P:System.Web.Services.Description.Message.Parts" />
    ///  property and returns an array of type <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  that contains the named instances.</summary>
    ///  <param name="partNames">An array of names of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  instances to be returned. </param>
    ///<returns>An array of type <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">No <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  instances with the specified names exist within the collection. </exception>
    function FindPartsByName(partNames: TArray<string>): TArray<DNMessagePart>;
    ///<summary>Searches the <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  returned by the <see cref="P:System.Web.Services.Description.Message.Parts" />
    ///  property, and returns the named <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</summary>
    ///  <param name="partName">A string that names the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to be returned.</param>
    ///<returns>A <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">No <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  with the specified name exists within the collection.</exception>
    function FindPartByName(partName: string): DNMessagePart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.Message" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.Message" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the current <see cref="T:System.Web.Services.Description.Message" />
    ///  is a member.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>Gets the collection of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  objects contained in the <see cref="T:System.Web.Services.Description.Message" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.MessagePartCollection" />
    ///  .</returns>
    property Parts: DNMessagePartCollection read get_Parts;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNMessage = class(TDNGenericImport<DNMessageClass, DNMessage>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageBindingClass = interface(DNNamedItemClass)
  ['{ED76ED12-9C86-52A5-BFD7-6F367C8E4BD0}']
  end;

  ///<summary>Describes how abstract content is mapped into a concrete format.</summary>
  [DNTypeName('System.Web.Services.Description.MessageBinding')]
  DNMessageBinding = interface(DNNamedItem)
  ['{25D86ADF-A83D-3D7F-B896-7C639E6AABE9}']
  { getters & setters } 

    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNMessageBinding = class(TDNGenericImport<DNMessageBindingClass, DNMessageBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNFaultBindingClass = interface(DNMessageBindingClass)
  ['{0C0E13F3-3F81-5A17-874F-47CAE475F642}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  class. </summary>
    {class} function init: DNFaultBinding;

  end;

  ///<summary>Specifies the format for any error messages that might be output as a result of the operation. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.FaultBinding')]
  DNFaultBinding = interface(DNMessageBinding)
  ['{CE8469A0-74FF-3120-8C56-5B6609080F20}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of extensibility elements associated with the current <see cref="T:System.Web.Services.Description.FaultBinding" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  . The default value is a collection with a <see cref="P:System.Collections.CollectionBase.Count" />
    ///  of zero.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNFaultBinding = class(TDNGenericImport<DNFaultBindingClass, DNFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNInputBindingClass = interface(DNMessageBindingClass)
  ['{40194096-195D-5277-83A0-3BF675E53EFE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.InputBinding" />
    ///  class. </summary>
    {class} function init: DNInputBinding;

  end;

  ///<summary>Provides a set of specifications for data formats and protocols used by the XML Web service for input messages. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.InputBinding')]
  DNInputBinding = interface(DNMessageBinding)
  ['{0430661A-1BCC-378B-834F-B2CFC7F994FC}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of extensibility elements associated with the current <see cref="T:System.Web.Services.Description.InputBinding" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNInputBinding = class(TDNGenericImport<DNInputBindingClass, DNInputBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOutputBindingClass = interface(DNMessageBindingClass)
  ['{1E4320D0-7788-5538-AECA-62D1BF68AD59}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  class.</summary>
    {class} function init: DNOutputBinding;

  end;

  ///<summary>Provides a set of specifications for data formats and protocols used by the XML Web service for output messages. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OutputBinding')]
  DNOutputBinding = interface(DNMessageBinding)
  ['{7A3A3791-9C3C-3F88-8F7D-CD62FCD0276F}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of extensibility elements associated with the current <see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  .</summary>
    ///<returns>A collection of service description format extension.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.MessageBinding" />
    ///  is a member.</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOutputBinding = class(TDNGenericImport<DNOutputBindingClass, DNOutputBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessagePartClass = interface(DNNamedItemClass)
  ['{65A2A902-F08D-56B3-9106-593D38F971B2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  class.</summary>
    {class} function init: DNMessagePart;

  end;

  ///<summary>Represents the messages to be broken up into their logical units with specific abstract information for each part. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MessagePart')]
  DNMessagePart = interface(DNNamedItem)
  ['{0596EDAA-CE70-3548-B80A-43AB840DB0B1}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Message: DNMessage;
    function get_Element: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Element(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Type: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Type(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.Message" />
    ///  of which the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  is a member.</summary>
    ///<returns>The message of which the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  is a member.</returns>
    property Message: DNMessage read get_Message;
    ///<summary>Gets or sets the name of the XML element that corresponds to the current <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</summary>
    ///<returns>The name of the XML element that corresponds to the current <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</returns>
    property Element: DDN.System.Xml.DNXmlQualifiedName read get_Element write set_Element;
    ///<summary>Gets or sets the XML data type of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  .</returns>
    property &Type: DDN.System.Xml.DNXmlQualifiedName read get_Type write set_Type;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNMessagePart = class(TDNGenericImport<DNMessagePartClass, DNMessagePart>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationClass = interface(DNNamedItemClass)
  ['{77ADA884-892D-595D-A198-CF550478F8A4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Operation" />
    ///  class.</summary>
    {class} function init: DNOperation;

  end;

  ///<summary>Provides an abstract definition of an action supported by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Operation')]
  DNOperation = interface(DNNamedItem)
  ['{5D59EB08-FE63-3657-BF73-50E844BE94D5}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_PortType: DNPortType;
    function get_ParameterOrderString: string;
    procedure set_ParameterOrderString(value: string);
    function get_ParameterOrder: TArray<string>;
    procedure set_ParameterOrder(value: TArray<string>);
    function get_Messages: DNOperationMessageCollection;
    function get_Faults: DNOperationFaultCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    ///<summary>Returns a value that indicates whether the specified <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  matches with the <see cref="T:System.Web.Services.Description.Operation" />
    ///  .</summary>
    ///  <param name="operationBinding">An <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  to be checked to determine whether it matches with the <see cref="T:System.Web.Services.Description.Operation" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.Operation" />
    ///  instance matches the <paramref name="operationBinding" />
    ///  parameter; otherwise, <see langword="false" />
    ///  .</returns>
    function IsBoundBy(operationBinding: DNOperationBinding): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.Operation" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.Operation" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.PortType" />
    ///  of which the <see cref="T:System.Web.Services.Description.Operation" />
    ///  is a member.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.PortType" />
    ///  object.</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>Gets or sets an optional Remote Procedure Call (RPC) signature that orders specification for request-response or solicit-response operations.</summary>
    ///<returns>A list of names of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  instances separated by a single space.</returns>
    property ParameterOrderString: string read get_ParameterOrderString write set_ParameterOrderString;
    ///<summary>Gets or sets an array of the elements contained in the <see cref="P:System.Web.Services.Description.Operation.ParameterOrderString" />
    ///  .</summary>
    ///<returns>An array of names of <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  instances.</returns>
    property ParameterOrder: TArray<string> read get_ParameterOrder write set_ParameterOrder;
    ///<summary>Gets the collection of instances of the <see cref="T:System.Web.Services.Description.Message" />
    ///  class defined by the current <see cref="T:System.Web.Services.Description.Operation" />
    ///  .</summary>
    ///<returns>The collection of instances of the <see cref="T:System.Web.Services.Description.Message" />
    ///  class defined by the current <see cref="T:System.Web.Services.Description.Operation" />
    ///  .</returns>
    property Messages: DNOperationMessageCollection read get_Messages;
    ///<summary>Gets the collection of faults, or error messages, defined by the current <see cref="T:System.Web.Services.Description.Operation" />
    ///  .</summary>
    ///<returns>A collection of faults, or error messages, defined by the current operation.</returns>
    property Faults: DNOperationFaultCollection read get_Faults;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperation = class(TDNGenericImport<DNOperationClass, DNOperation>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationBindingClass = interface(DNNamedItemClass)
  ['{A2146659-0BB5-5F83-AED2-CDC2F1CA6992}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  class.</summary>
    {class} function init: DNOperationBinding;

  end;

  ///<summary>Provides specifications for protocols and data formats for the messages used in the action supported by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationBinding')]
  DNOperationBinding = interface(DNNamedItem)
  ['{D061384A-7647-3EB3-AEE9-631645043AC1}']
  { getters & setters } 

    function get_Binding: DNBinding;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Input: DNInputBinding;
    procedure set_Input(value: DNInputBinding);
    function get_Output: DNOutputBinding;
    procedure set_Output(value: DNOutputBinding);
    function get_Faults: DNFaultBindingCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.Binding" />
    ///  of which the current <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  is a member.</summary>
    ///<returns>A binding of which the current <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  is a member.</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>Gets the collection of extensibility elements specific to the current <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  .</summary>
    ///<returns>A collection of extensibility elements.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets or sets the <see cref="T:System.Web.Services.Description.InputBinding" />
    ///  associated with the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.InputBinding" />
    ///  associated with the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  .</returns>
    property Input: DNInputBinding read get_Input write set_Input;
    ///<summary>Gets or sets the <see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  associated with the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Web.Services.Description.OutputBinding" />
    ///  associated with the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  .</returns>
    property Output: DNOutputBinding read get_Output write set_Output;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.FaultBindingCollection" />
    ///  associated with the <see cref="T:System.Web.Services.Description.OperationBinding" />
    ///  instance.</summary>
    ///<returns>A fault binding collection.</returns>
    property Faults: DNFaultBindingCollection read get_Faults;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationBinding = class(TDNGenericImport<DNOperationBindingClass, DNOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationMessageClass = interface(DNNamedItemClass)
  ['{E1C13CC4-2789-5FF6-BBC0-08AB66FCDD90}']
  end;

  ///<summary>Represents a message type passed by the action of an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Description.OperationMessage')]
  DNOperationMessage = interface(DNNamedItem)
  ['{84C1E90C-70CE-3C74-A0D6-64191CA9EBD3}']
  { getters & setters } 

    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.Operation" />
    ///  of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</summary>
    ///<returns>The operation of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>Gets or sets an abstract, typed definition of the data being communicated.</summary>
    ///<returns>An XML qualified name.</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNOperationMessage = class(TDNGenericImport<DNOperationMessageClass, DNOperationMessage>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationFaultClass = interface(DNOperationMessageClass)
  ['{9E25F711-D34E-52BA-8D20-F00FFE352799}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  class. </summary>
    {class} function init: DNOperationFault;

  end;

  ///<summary>Defines the specifications for error messages returned by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationFault')]
  DNOperationFault = interface(DNOperationMessage)
  ['{D334DF82-E3F5-3320-8353-059C947A4DA5}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.OperationFault" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.Operation" />
    ///  of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</summary>
    ///<returns>The operation of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>Gets or sets an abstract, typed definition of the data being communicated.</summary>
    ///<returns>An XML qualified name.</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationFault = class(TDNGenericImport<DNOperationFaultClass, DNOperationFault>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationInputClass = interface(DNOperationMessageClass)
  ['{F065755A-8814-5E5C-8C8C-9036A354DECE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  class. </summary>
    {class} function init: DNOperationInput;

  end;

  ///<summary>Defines the specifications for input messages received by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationInput')]
  DNOperationInput = interface(DNOperationMessage)
  ['{F0D1546A-CD19-31E7-9ED7-1F54A44D15C9}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.OperationInput" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.Operation" />
    ///  of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</summary>
    ///<returns>The operation of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>Gets or sets an abstract, typed definition of the data being communicated.</summary>
    ///<returns>An XML qualified name.</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationInput = class(TDNGenericImport<DNOperationInputClass, DNOperationInput>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationOutputClass = interface(DNOperationMessageClass)
  ['{F2BF5B09-6181-5720-9F1F-CAE916C31A5E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  class. </summary>
    {class} function init: DNOperationOutput;

  end;

  ///<summary>Defines the specifications for output messages returned by the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.OperationOutput')]
  DNOperationOutput = interface(DNOperationMessage)
  ['{3923EF37-EFB1-360B-A386-82992AF85D74}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.OperationOutput" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.Operation" />
    ///  of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</summary>
    ///<returns>The operation of which the <see cref="T:System.Web.Services.Description.OperationMessage" />
    ///  is a member.</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>Gets or sets an abstract, typed definition of the data being communicated.</summary>
    ///<returns>An XML qualified name.</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationOutput = class(TDNGenericImport<DNOperationOutputClass, DNOperationOutput>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortClass = interface(DNNamedItemClass)
  ['{383AEC24-A76D-5221-94D8-31446780975D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Port" />
    ///  class.</summary>
    {class} function init: DNPort;

  end;

  ///<summary>Defines an individual endpoint contained in the XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Port')]
  DNPort = interface(DNNamedItem)
  ['{07BD011F-4825-3C83-A05A-C3A18D88E935}']
  { getters & setters } 

    function get_Service: DNService;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Binding: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Binding(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.Service" />
    ///  of which the <see cref="T:System.Web.Services.Description.Port" />
    ///  is a member.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.Service" />
    ///  of which the <see cref="T:System.Web.Services.Description.Port" />
    ///  is a member.</returns>
    property Service: DNService read get_Service;
    ///<summary>Gets the collection of extensibility elements associated with the <see cref="T:System.Web.Services.Description.Port" />
    ///  .</summary>
    ///<returns>The collection of extensibility elements associated with the port.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets or sets the value of the XML <see langword="&lt;binding&gt;" />
    ///  attribute of the <see cref="T:System.Web.Services.Description.Port" />
    ///  .</summary>
    ///<returns>The value of the XML binding.</returns>
    property Binding: DDN.System.Xml.DNXmlQualifiedName read get_Binding write set_Binding;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNPort = class(TDNGenericImport<DNPortClass, DNPort>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortTypeClass = interface(DNNamedItemClass)
  ['{45347A1A-4F69-5D49-8412-094C9B23F634}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.PortType" />
    ///  class.</summary>
    {class} function init: DNPortType;

  end;

  ///<summary>Represents a named set of abstract operations and the corresponding abstract messages. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.PortType')]
  DNPortType = interface(DNNamedItem)
  ['{9071F449-C1CD-307D-83C4-034D5285DF6D}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Operations: DNOperationCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.PortType" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  associated with this <see cref="T:System.Web.Services.Description.PortType" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the <see cref="T:System.Web.Services.Description.PortType" />
    ///  is a member.</summary>
    ///<returns>A service description of which the <see cref="T:System.Web.Services.Description.PortType" />
    ///  is a member.</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.Operation" />
    ///  instances defined by the <see cref="T:System.Web.Services.Description.PortType" />
    ///  .</summary>
    ///<returns>A collection of operation instances defined by the <see cref="T:System.Web.Services.Description.PortType" />
    ///  .</returns>
    property Operations: DNOperationCollection read get_Operations;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNPortType = class(TDNGenericImport<DNPortTypeClass, DNPortType>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceClass = interface(DNNamedItemClass)
  ['{604F4993-F415-511C-B8CB-E374835647A3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Service" />
    ///  class.</summary>
    {class} function init: DNService;

  end;

  ///<summary>Groups together a set of related instances of the <see cref="T:System.Web.Services.Description.Port" />
  ///  class that are associated with an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Service')]
  DNService = interface(DNNamedItem)
  ['{DEA43AAB-E2E7-3348-81C5-C279AFC3B03D}']
  { getters & setters } 

    function get_ServiceDescription: DNServiceDescription;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Ports: DNPortCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the <see cref="T:System.Web.Services.Description.Service" />
    ///  is a member.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  of which the <see cref="T:System.Web.Services.Description.Service" />
    ///  is a member.</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>Gets the collection of extensibility elements associated with the <see cref="T:System.Web.Services.Description.Service" />
    ///  .</summary>
    ///<returns>The collection of extensibility elements associated with the <see cref="T:System.Web.Services.Description.Service" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.Port" />
    ///  instances contained in the <see cref="T:System.Web.Services.Description.Service" />
    ///  .</summary>
    ///<returns>A collection of port instances contained in the <see cref="T:System.Web.Services.Description.Service" />
    ///  .</returns>
    property Ports: DNPortCollection read get_Ports;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNService = class(TDNGenericImport<DNServiceClass, DNService>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionClass = interface(DNNamedItemClass)
  ['{C238E77B-1D57-5DCB-A949-288247734BF3}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;
    {class} function get_Serializer: DDN.System.Xml.DNXmlSerializer;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class.</summary>
    {class} function init: DNServiceDescription;

  { static methods } 

    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class by directly loading the XML from a <see cref="T:System.IO.TextReader" />
    ///  .</summary>
    ///  <param name="textReader">A <see cref="T:System.IO.TextReader" />
    ///  instance, passed by reference, which contains the text to be read. </param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(textReader: DDN.mscorlib.DNTextReader): DNServiceDescription; overload;
    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class by directly loading the XML from a <see cref="T:System.IO.Stream" />
    ///  instance.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  , passed by reference, which contains the bytes to be read.</param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream): DNServiceDescription; overload;
    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class by directly loading the XML from an <see cref="T:System.Xml.XmlReader" />
    ///  .</summary>
    ///  <param name="reader">An <see cref="T:System.Xml.XmlReader" />
    ///  , passed by reference, which contains the XML data to be read. </param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(reader: DDN.System.Xml.DNXmlReader): DNServiceDescription; overload;
    ///<summary>Initializes an instance of a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object by directly loading the XML from the specified file.</summary>
    ///  <param name="fileName">The path to the file to be read. </param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(fileName: string): DNServiceDescription; overload;
    ///<summary>Initializes an instance of a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object by directly loading the XML from the specified file.</summary>
    ///  <param name="fileName">The path to the file to be read. </param>
    ///  <param name="validate">A <see cref="T:System.Boolean" />
    ///  that indicates whether the XML should be validated against the schema specified by <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  .</param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(fileName: string; validate: Boolean): DNServiceDescription; overload;
    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class by directly loading the XML from a <see cref="T:System.IO.TextReader" />
    ///  .</summary>
    ///  <param name="textReader">A <see cref="T:System.IO.TextReader" />
    ///  instance, passed by reference, which contains the text to be read. </param>
    ///  <param name="validate">A <see cref="T:System.Boolean" />
    ///  that indicates whether the XML should be validated against the schema specified by <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  .</param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(textReader: DDN.mscorlib.DNTextReader; validate: Boolean): DNServiceDescription; overload;
    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class by directly loading the XML from a <see cref="T:System.IO.Stream" />
    ///  instance.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  , passed by reference, which contains the bytes to be read. </param>
    ///  <param name="validate">A <see cref="T:System.Boolean" />
    ///  that indicates whether the XML should be validated against the schema specified by <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  .</param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream; validate: Boolean): DNServiceDescription; overload;
    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class by directly loading the XML from an <see cref="T:System.Xml.XmlReader" />
    ///  .</summary>
    ///  <param name="reader">An <see cref="T:System.Xml.XmlReader" />
    ///  , passed by reference, which contains the XML data to be read. </param>
    ///  <param name="validate">A <see cref="T:System.Boolean" />
    ///  that indicates whether the XML should be validated against the schema specified by <see cref="P:System.Web.Services.Description.ServiceDescription.Schema" />
    ///  .</param>
    ///<returns>An instance of the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} function Read(reader: DDN.System.Xml.DNXmlReader; validate: Boolean): DNServiceDescription; overload;
    ///<summary>Gets a value that indicates whether an <see cref="T:System.Xml.XmlReader" />
    ///  represents a valid Web Services Description Language (WSDL) file that can be parsed.</summary>
    ///  <param name="reader">An <see cref="T:System.Xml.XmlReader" />
    ///</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  can recognize the node on which the <see cref="T:System.Xml.XmlReader" />
    ///  is positioned; otherwise <see langword="false" />
    ///  .</returns>
    {class} function CanRead(reader: DDN.System.Xml.DNXmlReader): Boolean;

  { static propertys } 

    ///<summary>Gets the schema associated with this <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>The schema associated with this <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
    ///<summary>Gets the XML serializer used to serialize and deserialize between a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object and a Web Services Description Language (WSDL) document.</summary>
    ///<returns>The XML serializer used to serialize and deserialize between a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object and a Web Services Description Language (WSDL) document.</returns>
    {class} property Serializer: DDN.System.Xml.DNXmlSerializer read get_Serializer;
  end;

  ///<summary>Provides a means of creating and formatting a valid Web Services Description Language (WSDL) document file, complete with appropriate namespaces, elements, and attributes, for describing an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescription')]
  DNServiceDescription = interface(DNNamedItem)
  ['{8BCC7200-84AC-38CF-AF7D-782CDD36B557}']
  { getters & setters } 

    function get_RetrievalUrl: string;
    procedure set_RetrievalUrl(value: string);
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Imports: DNImportCollection;
    function get_Types: DNTypes;
    procedure set_Types(value: DNTypes);
    function get_Messages: DNMessageCollection;
    function get_PortTypes: DNPortTypeCollection;
    function get_Bindings: DNBindingCollection;
    function get_Services: DNServiceCollection;
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_ValidationWarnings: DDN.System.DNStringCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    ///<summary>Writes out the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  as a Web Services Description Language (WSDL) file to the specified path.</summary>
    ///  <param name="fileName">The path to which the WSDL file is written. </param>
    procedure Write(fileName: string); overload;
    ///<summary>Writes out the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to the specified <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  , passed by reference, which contains the Web Services Description Language (WSDL) file produced. </param>
    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>Writes out the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  as a Web Services Description Language (WSDL) file to the <see cref="T:System.IO.TextWriter" />
    ///  .</summary>
    ///  <param name="writer">A <see cref="T:System.IO.TextWriter" />
    ///  that contains the WSDL file produced. </param>
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>Writes out the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to the <see cref="T:System.Xml.XmlWriter" />
    ///  as a Web Services Description Language (WSDL) file.</summary>
    ///  <param name="writer">An <see cref="T:System.Xml.XmlWriter" />
    ///  , passed by reference, which contains the WSDL file produced. </param>
    procedure Write(writer: DDN.System.Xml.DNXmlWriter); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URL of the XML Web service to which the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instance applies.</summary>
    ///<returns>The URL of the XML Web service. The default value is an empty string ("").</returns>
    property RetrievalUrl: string read get_RetrievalUrl write set_RetrievalUrl;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  instance of which the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  is a member.</summary>
    ///<returns>A collection of service description.</returns>
    ///<exception cref="T:System.NullReferenceException">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  has not been assigned to a parent collection. </exception>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>Gets the collection of extensibility elements contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>The collection of extensibility elements contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.Import" />
    ///  elements contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>A collection of import elements contained in the service description.</returns>
    property Imports: DNImportCollection read get_Imports;
    ///<summary>Gets or sets the <see cref="T:System.Web.Services.Description.Types" />
    ///  contained by the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.Types" />
    ///  instance that represents the data types of both the parameters and return values of the methods exposed by the XML Web service.</returns>
    property Types: DNTypes read get_Types write set_Types;
    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.Message" />
    ///  elements contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>A collection of message elements contained in the service description.</returns>
    property Messages: DNMessageCollection read get_Messages;
    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.PortType" />
    ///  elements contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>A collection of <see cref="T:System.Web.Services.Description.PortType" />
    ///  elements contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    property PortTypes: DNPortTypeCollection read get_PortTypes;
    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.Binding" />
    ///  elements contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>A collection of binding elements contained in the service description.</returns>
    property Bindings: DNBindingCollection read get_Bindings;
    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.Service" />
    ///  instances contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>A collection of service instances contained in the service description.</returns>
    property Services: DNServiceCollection read get_Services;
    ///<summary>Gets or sets the XML <see langword="targetNamespace" />
    ///  attribute of the <see langword="descriptions" />
    ///  tag enclosing a Web Services Description Language (WSDL) file.</summary>
    ///<returns>The URL of the XML Web service described by the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    ///<summary>Gets a <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  that contains any validation warnings that were generated during a call to <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.Stream,System.Boolean)" />
    ///  , <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.TextReader,System.Boolean)" />
    ///  , <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.String,System.Boolean)" />
    ///  , or <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.Xml.XmlReader,System.Boolean)" />
    ///  with the <paramref name="validate" />
    ///  parameter set to <see langword="true" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  that contains any validation warnings that were generated during a call to <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.Stream,System.Boolean)" />
    ///  , <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.IO.TextReader,System.Boolean)" />
    ///  , <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.String,System.Boolean)" />
    ///  , or <see cref="M:System.Web.Services.Description.ServiceDescription.Read(System.Xml.XmlReader,System.Boolean)" />
    ///  with the <paramref name="validate" />
    ///  parameter set to <see langword="true" />
    ///  .</returns>
    property ValidationWarnings: DDN.System.DNStringCollection read get_ValidationWarnings;
    ///<summary>Gets or sets the name of the item.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the item.</returns>
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNServiceDescription = class(TDNGenericImport<DNServiceDescriptionClass, DNServiceDescription>)
  public const
    ///<summary>The XML namespace in which the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  class is defined ("http://schemas.xmlsoap.org/wsdl/"). This field is constant.</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNTypesClass = interface(DNDocumentableItemClass)
  ['{874C7C29-DD7C-5F47-94AD-0318C93B2BB0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Types" />
    ///  class.</summary>
    {class} function init: DNTypes;

  end;

  ///<summary>Describes data type definitions relevant to exchanged messages. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Types')]
  DNTypes = interface(DNDocumentableItem)
  ['{FD53E581-5BF2-395B-B172-72C6D1EA00E3}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  elements included in the XML Web service. This property is read-only.</summary>
    ///<returns>A collection of extension elements included in the XML Web service.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the collection of XML schemas included as data type definitions for the XML Web service. This property is read-only.</summary>
    ///<returns>An <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  collection.</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>Gets or sets the text documentation for the instance of the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A string that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property Documentation: string read get_Documentation write set_Documentation;
    ///<summary>Gets or sets the documentation element for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xml.XmlElement" />
    ///  that represents the documentation for the <see cref="T:System.Web.Services.Description.DocumentableItem" />
    ///  .</returns>
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    ///<summary>Gets or sets an array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</summary>
    ///<returns>An array of type <see cref="T:System.Xml.XmlAttribute" />
    ///  that represents attribute extensions of WSDL to comply with Web Services Interoperability (WS-I) Basic Profile 1.1.</returns>
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    ///<summary>Gets or sets the dictionary of namespace prefixes and namespaces used to preserve namespace prefixes and namespaces when a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object is constructed.</summary>
    ///<returns>A <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  dictionary containing prefix/namespace pairs.</returns>
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNTypes = class(TDNGenericImport<DNTypesClass, DNTypes>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextMatchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99CDB98B-8E2A-5B5C-A341-7C8405BE23E3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  class. </summary>
    {class} function init: DNMimeTextMatch;

  end;

  ///<summary>Represents a text pattern for which the HTTP transmission is searched. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimeTextMatch')]
  DNMimeTextMatch = interface(DDN.mscorlib.DNObject)
  ['{3137DAB1-3EB9-3739-965D-0FDC02E1BE99}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Group: Int32;
    procedure set_Group(value: Int32);
    function get_Capture: Int32;
    procedure set_Capture(value: Int32);
    function get_Repeats: Int32;
    procedure set_Repeats(value: Int32);
    function get_RepeatsString: string;
    procedure set_RepeatsString(value: string);
    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_Matches: DNMimeTextMatchCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  .</summary>
    ///<returns>The name of the <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  .</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets a value indicating the MIME format of the text to be searched.</summary>
    ///<returns>A string indicating the MIME format of the text to be searched.</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets or sets a value indicating the number of groups in which to place the results of the text search.</summary>
    ///<returns>A 32-bit signed integer. The default value is 1.</returns>
    ///<exception cref="T:System.ArgumentException">The property value is negative. </exception>
    property Group: Int32 read get_Group write set_Group;
    ///<summary>Gets or sets a value indicating the zero-based index of a <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  within a group.</summary>
    ///<returns>A 32-bit signed integer. The default value is 0, indicating that the <see cref="T:System.Web.Services.Description.MimeTextMatch" />
    ///  is the first instance within a group.</returns>
    ///<exception cref="T:System.ArgumentException">The property value is negative. </exception>
    property Capture: Int32 read get_Capture write set_Capture;
    ///<summary>Gets or sets a value indicating the number of times the search is to be performed.</summary>
    ///<returns>A 32-bit signed integer. The default value is 1.</returns>
    ///<exception cref="T:System.ArgumentException">The property value is negative. </exception>
    property Repeats: Int32 read get_Repeats write set_Repeats;
    ///<summary>Gets or sets a value indicating the number of times the search is to be performed.</summary>
    ///<returns>A string indicating the number of times the search is to be performed. The default value is "1".</returns>
    property RepeatsString: string read get_RepeatsString write set_RepeatsString;
    ///<summary>Gets or sets the text pattern for the search.</summary>
    ///<returns>A string representing the text for which to search the HTTP transmission. The default value is an empty string ("").</returns>
    property Pattern: string read get_Pattern write set_Pattern;
    ///<summary>Gets or sets a value indicating whether the search should disregard the case of the text to be searched.</summary>
    ///<returns><see langword="true" />
    ///  if the search should disregard case; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    ///<summary>Gets the collection of text pattern matches that have been found by the search.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  representing the members of the <see cref="P:System.Web.Services.Description.MimeTextMatch.Group" />
    ///  property.</returns>
    property Matches: DNMimeTextMatchCollection read get_Matches;
  end;

  TDNMimeTextMatch = class(TDNGenericImport<DNMimeTextMatchClass, DNMimeTextMatch>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNProtocolImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F968D54-1145-5682-8CA5-010B7AE376C7}']
  end;

  ///<summary>Provides common functionality across communication protocols for generating classes for Web services. </summary>
  [DNTypeName('System.Web.Services.Description.ProtocolImporter')]
  DNProtocolImporter = interface(DDN.mscorlib.DNObject)
  ['{A4B23FBB-6B0D-325B-AD7C-04678CB70D7B}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_AbstractSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_ConcreteSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_CodeNamespace: DDN.System.DNCodeNamespace;
    function get_CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration;
    function get_Style: DNServiceDescriptionImportStyle;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ClassNames: DDN.System.Xml.DNCodeIdentifiers;
    function get_MethodName: string;
    function get_ClassName: string;
    function get_Port: DNPort;
    function get_PortType: DNPortType;
    function get_Binding: DNBinding;
    function get_Service: DNService;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;
    function get_ProtocolName: string;

  { methods } 

    ///<summary>For each unhandled extension or XML element in the input extensions collection, turns on a <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.RequiredExtensionsIgnored" />
    ///  or <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.OptionalExtensionsIgnored" />
    ///  warning for each unhandled extension or XML element in the input extensions collection. </summary>
    ///  <param name="comments">A <see cref="T:System.CodeDom.CodeCommentStatementCollection" />
    ///  that specifies the collection of code comments to which each warning message is added.</param>
    ///  <param name="extensions">A <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  that specifies the extensions or XML elements for which warnings should be generated if they are not handled.</param>
    procedure AddExtensionWarningComments(comments: DDN.System.DNCodeCommentStatementCollection; extensions: DNServiceDescriptionFormatExtensionCollection);
    ///<summary>Turns on an <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedBindingsIgnored" />
    ///  warning in the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration obtained through the <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  property. This method also adds a warning message to the comments for the class that is being generated.</summary>
    ///  <param name="text">Annotation to be added to the warning message, which already indicates that the binding has been ignored.</param>
    procedure UnsupportedBindingWarning(text: string);
    ///<summary>Turns on an <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  warning in the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration obtained through the <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  property. This method also adds a warning message to the comments for the class that is being generated.</summary>
    ///  <param name="text">Annotation to be added to the warning message, which already indicates that the operation binding has been ignored.</param>
    procedure UnsupportedOperationWarning(text: string);
    ///<summary>Turns on an <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  warning in the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration obtained through the <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  property. This method also adds a warning message to the comments for the class that is being generated.</summary>
    ///  <param name="text">Annotation to be added to the warning message, which already indicates that the operation binding has been ignored.</param>
    procedure UnsupportedOperationBindingWarning(text: string);
    ///<summary>Produces an Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</summary>
    ///  <param name="text">Annotation to be added to the exception message, which already indicates that the operation syntax is invalid.</param>
    ///<returns>An Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</returns>
    function OperationSyntaxException(text: string): DDN.mscorlib.DNException;
    ///<summary>Produces an Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</summary>
    ///  <param name="text">Annotation to be added to the exception message, which already indicates that the operation binding syntax is invalid.</param>
    ///<returns>An Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</returns>
    function OperationBindingSyntaxException(text: string): DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  objects that belong to the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance that are searched for bindings from which to generate binding classes.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  objects that belong to the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance that are searched for bindings from which to generate binding classes.</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>Gets all the XML schemas, both abstract and concrete, used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</summary>
    ///<returns>The XML schemas, both abstract and concrete, used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>Gets the abstract XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</summary>
    ///<returns>The abstract XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance</returns>
    property AbstractSchemas: DDN.System.Xml.DNXmlSchemas read get_AbstractSchemas;
    ///<summary>Gets the concrete XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</summary>
    ///<returns>The concrete XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</returns>
    property ConcreteSchemas: DDN.System.Xml.DNXmlSchemas read get_ConcreteSchemas;
    ///<summary>Gets a representation of the .NET Framework namespace of the binding classes that are being generated.</summary>
    ///<returns>A representation of the .NET Framework namespace of the binding classes that are being generated.</returns>
    property CodeNamespace: DDN.System.DNCodeNamespace read get_CodeNamespace;
    ///<summary>Gets a representation of the binding class that is currently being generated.</summary>
    ///<returns>A representation of the binding class that is currently being generated.</returns>
    property CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration read get_CodeTypeDeclaration;
    ///<summary>Gets an enumeration value that indicates whether a client proxy class or an abstract server class is being generated. The values are Client and Server. The value is that of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance's <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  property.</summary>
    ///<returns>An enumeration value that indicates whether a client proxy class or an abstract server class is being generated. The values are Client and Server. The value is that of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance's <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  property.</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style;
    ///<summary>Gets or sets a <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration value that indicates the types of warnings, if any, issued by the protocol importer while generating binding classes.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration value that indicates the types of warnings, if any, issued by the protocol importer while generating binding classes.</returns>
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  object that generates a unique name for the binding class that is currently being generated.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  object that generates a unique name for the binding class that is currently being generated.</returns>
    property ClassNames: DDN.System.Xml.DNCodeIdentifiers read get_ClassNames;
    ///<summary>Gets the name of the binding class method which that the protocol importer is currently generating.</summary>
    ///<returns>The name of the binding class method which that the protocol importer is currently generating.</returns>
    property MethodName: string read get_MethodName;
    ///<summary>Gets the name of the binding class that is currently being generated.</summary>
    ///<returns>The name of the binding class that is currently being generated.</returns>
    property ClassName: string read get_ClassName;
    ///<summary>Gets a Web Services Description Language (WSDL) port that contains a reference to the binding that the protocol importer is currently processing to generate a binding class. If more than one port refers to the current binding, the current port is the one in which the binding has most recently been found.</summary>
    ///<returns>The Web Services Description Language (WSDL) port that contains a reference to the binding that the protocol importer is currently processing to generate a binding class. If more than one port refers to the current binding, the current port is the one in which the binding has most recently been found.</returns>
    property Port: DNPort read get_Port;
    ///<summary>Gets the Web Services Description Language (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  that is implemented by the binding that the protocol importer is currently processing to generate a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  that is implemented by the binding that the protocol importer is currently processing to generate a binding class.</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>Gets the Web Services Description Language (WSDL) binding that the protocol importer is currently processing to generate a class.</summary>
    ///<returns>The Web Services Description Language (WSDL) binding that the protocol importer is currently processing to generate a class.</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>Gets the Web Services Description Language (WSDL) service that contains a reference to the binding that the protocol importer is currently processing to generate a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) service that contains a reference to the binding that the protocol importer is currently processing to generate a binding class.</returns>
    property Service: DNService read get_Service;
    ///<summary>Gets the abstract Web Services Description Language (WSDL) operation that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The abstract Web Services Description Language (WSDL) operation that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>Gets the Web Services Description Language (WSDL) operation binding that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) operation binding that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>Gets the Web Services Description Language (WSDL) input message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) input message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property InputMessage: DNMessage read get_InputMessage;
    ///<summary>Gets the Web Services Description Language (WSDL) output message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) output message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property OutputMessage: DNMessage read get_OutputMessage;
    ///<summary>Abstract property that concrete derived classes must implement to get the name of the protocol being used.</summary>
    ///<returns>The name of the protocol being used.</returns>
    property ProtocolName: string read get_ProtocolName;
  end;

  TDNProtocolImporter = class(TDNGenericImport<DNProtocolImporterClass, DNProtocolImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapProtocolImporterClass = interface(DNProtocolImporterClass)
  ['{195A8A9E-47B2-5771-9EB7-60BCE3C60D0D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class. </summary>
    {class} function init: DNSoapProtocolImporter;

  end;

  ///<summary>Generates classes for Web services that use the SOAP protocol.</summary>
  [DNTypeName('System.Web.Services.Description.SoapProtocolImporter')]
  DNSoapProtocolImporter = interface(DNProtocolImporter)
  ['{5C3BFE62-0766-3AAD-9EB3-D9603AF56BAB}']
  { getters & setters } 

    function get_ProtocolName: string;
    function get_SoapBinding: DNDescription_SoapBinding;
    function get_SoapImporter: DDN.System.Xml.DNSoapSchemaImporter;
    function get_XmlImporter: DDN.System.Xml.DNXmlSchemaImporter;
    function get_XmlExporter: DDN.System.Xml.DNXmlCodeExporter;
    function get_SoapExporter: DDN.System.Xml.DNSoapCodeExporter;
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_AbstractSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_ConcreteSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_CodeNamespace: DDN.System.DNCodeNamespace;
    function get_CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration;
    function get_Style: DNServiceDescriptionImportStyle;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ClassNames: DDN.System.Xml.DNCodeIdentifiers;
    function get_MethodName: string;
    function get_ClassName: string;
    function get_Port: DNPort;
    function get_PortType: DNPortType;
    function get_Binding: DNBinding;
    function get_Service: DNService;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;

  { methods } 

    ///<summary>For each unhandled extension or XML element in the input extensions collection, turns on a <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.RequiredExtensionsIgnored" />
    ///  or <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.OptionalExtensionsIgnored" />
    ///  warning for each unhandled extension or XML element in the input extensions collection. </summary>
    ///  <param name="comments">A <see cref="T:System.CodeDom.CodeCommentStatementCollection" />
    ///  that specifies the collection of code comments to which each warning message is added.</param>
    ///  <param name="extensions">A <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection" />
    ///  that specifies the extensions or XML elements for which warnings should be generated if they are not handled.</param>
    procedure AddExtensionWarningComments(comments: DDN.System.DNCodeCommentStatementCollection; extensions: DNServiceDescriptionFormatExtensionCollection);
    ///<summary>Turns on an <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedBindingsIgnored" />
    ///  warning in the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration obtained through the <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  property. This method also adds a warning message to the comments for the class that is being generated.</summary>
    ///  <param name="text">Annotation to be added to the warning message, which already indicates that the binding has been ignored.</param>
    procedure UnsupportedBindingWarning(text: string);
    ///<summary>Turns on an <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  warning in the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration obtained through the <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  property. This method also adds a warning message to the comments for the class that is being generated.</summary>
    ///  <param name="text">Annotation to be added to the warning message, which already indicates that the operation binding has been ignored.</param>
    procedure UnsupportedOperationWarning(text: string);
    ///<summary>Turns on an <see cref="F:System.Web.Services.Description.ServiceDescriptionImportWarnings.UnsupportedOperationsIgnored" />
    ///  warning in the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration obtained through the <see cref="P:System.Web.Services.Description.ProtocolImporter.Warnings" />
    ///  property. This method also adds a warning message to the comments for the class that is being generated.</summary>
    ///  <param name="text">Annotation to be added to the warning message, which already indicates that the operation binding has been ignored.</param>
    procedure UnsupportedOperationBindingWarning(text: string);
    ///<summary>Produces an Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</summary>
    ///  <param name="text">Annotation to be added to the exception message, which already indicates that the operation syntax is invalid.</param>
    ///<returns>An Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.Operation" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</returns>
    function OperationSyntaxException(text: string): DDN.mscorlib.DNException;
    ///<summary>Produces an Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</summary>
    ///  <param name="text">Annotation to be added to the exception message, which already indicates that the operation binding syntax is invalid.</param>
    ///<returns>An Exception indicating that the current <see cref="P:System.Web.Services.Description.ProtocolImporter.OperationBinding" />
    ///  instance for which a binding class is being generated is invalid within the target namespace.</returns>
    function OperationBindingSyntaxException(text: string): DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value of "Soap".</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the string "Soap".</returns>
    property ProtocolName: string read get_ProtocolName;
    ///<summary>Gets a <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  instance obtained through the <see cref="P:System.Web.Services.Description.SoapProtocolImporter.SoapBinding" />
    ///  property's <see cref="P:System.Web.Services.Description.Binding.Extensions" />
    ///  property.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  instance obtained through the <see cref="P:System.Web.Services.Description.SoapProtocolImporter.SoapBinding" />
    ///  property's <see cref="P:System.Web.Services.Description.Binding.Extensions" />
    ///  property.</returns>
    property SoapBinding: DNDescription_SoapBinding read get_SoapBinding;
    ///<summary>Gets the object of type <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate mappings between SOAP-encoded XML schema content and .NET Framework types.</summary>
    ///<returns>An object of type <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate mappings between SOAP-encoded XML schema content and .NET Framework types.</returns>
    property SoapImporter: DDN.System.Xml.DNSoapSchemaImporter read get_SoapImporter;
    ///<summary>Gets the object of type <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate mappings between literal XML schema content and .NET Framework types.</summary>
    ///<returns>An object of type <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate mappings between literal XML schema content and .NET Framework types.</returns>
    property XmlImporter: DDN.System.Xml.DNXmlSchemaImporter read get_XmlImporter;
    ///<summary>Gets the object of type <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate code from mappings between literal XML schema content and .NET Framework types.</summary>
    ///<returns>An object of type <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate code from mappings between literal XML schema content and .NET Framework types.</returns>
    property XmlExporter: DDN.System.Xml.DNXmlCodeExporter read get_XmlExporter;
    ///<summary>Gets the object of type <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate code from mappings between SOAP-encoded XML schema content and .NET Framework types.</summary>
    ///<returns>An object of type <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  used internally by the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  class to generate code from mappings between SOAP-encoded XML schema content and .NET Framework types.</returns>
    property SoapExporter: DDN.System.Xml.DNSoapCodeExporter read get_SoapExporter;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  objects that belong to the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance that are searched for bindings from which to generate binding classes.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  objects that belong to the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance that are searched for bindings from which to generate binding classes.</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>Gets all the XML schemas, both abstract and concrete, used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</summary>
    ///<returns>The XML schemas, both abstract and concrete, used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>Gets the abstract XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</summary>
    ///<returns>The abstract XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance</returns>
    property AbstractSchemas: DDN.System.Xml.DNXmlSchemas read get_AbstractSchemas;
    ///<summary>Gets the concrete XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</summary>
    ///<returns>The concrete XML schemas used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</returns>
    property ConcreteSchemas: DDN.System.Xml.DNXmlSchemas read get_ConcreteSchemas;
    ///<summary>Gets a representation of the .NET Framework namespace of the binding classes that are being generated.</summary>
    ///<returns>A representation of the .NET Framework namespace of the binding classes that are being generated.</returns>
    property CodeNamespace: DDN.System.DNCodeNamespace read get_CodeNamespace;
    ///<summary>Gets a representation of the binding class that is currently being generated.</summary>
    ///<returns>A representation of the binding class that is currently being generated.</returns>
    property CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration read get_CodeTypeDeclaration;
    ///<summary>Gets an enumeration value that indicates whether a client proxy class or an abstract server class is being generated. The values are Client and Server. The value is that of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance's <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  property.</summary>
    ///<returns>An enumeration value that indicates whether a client proxy class or an abstract server class is being generated. The values are Client and Server. The value is that of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance's <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  property.</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style;
    ///<summary>Gets or sets a <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration value that indicates the types of warnings, if any, issued by the protocol importer while generating binding classes.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  enumeration value that indicates the types of warnings, if any, issued by the protocol importer while generating binding classes.</returns>
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  object that generates a unique name for the binding class that is currently being generated.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  object that generates a unique name for the binding class that is currently being generated.</returns>
    property ClassNames: DDN.System.Xml.DNCodeIdentifiers read get_ClassNames;
    ///<summary>Gets the name of the binding class method which that the protocol importer is currently generating.</summary>
    ///<returns>The name of the binding class method which that the protocol importer is currently generating.</returns>
    property MethodName: string read get_MethodName;
    ///<summary>Gets the name of the binding class that is currently being generated.</summary>
    ///<returns>The name of the binding class that is currently being generated.</returns>
    property ClassName: string read get_ClassName;
    ///<summary>Gets a Web Services Description Language (WSDL) port that contains a reference to the binding that the protocol importer is currently processing to generate a binding class. If more than one port refers to the current binding, the current port is the one in which the binding has most recently been found.</summary>
    ///<returns>The Web Services Description Language (WSDL) port that contains a reference to the binding that the protocol importer is currently processing to generate a binding class. If more than one port refers to the current binding, the current port is the one in which the binding has most recently been found.</returns>
    property Port: DNPort read get_Port;
    ///<summary>Gets the Web Services Description Language (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  that is implemented by the binding that the protocol importer is currently processing to generate a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) <see cref="P:System.Web.Services.Description.ProtocolImporter.PortType" />
    ///  that is implemented by the binding that the protocol importer is currently processing to generate a binding class.</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>Gets the Web Services Description Language (WSDL) binding that the protocol importer is currently processing to generate a class.</summary>
    ///<returns>The Web Services Description Language (WSDL) binding that the protocol importer is currently processing to generate a class.</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>Gets the Web Services Description Language (WSDL) service that contains a reference to the binding that the protocol importer is currently processing to generate a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) service that contains a reference to the binding that the protocol importer is currently processing to generate a binding class.</returns>
    property Service: DNService read get_Service;
    ///<summary>Gets the abstract Web Services Description Language (WSDL) operation that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The abstract Web Services Description Language (WSDL) operation that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>Gets the Web Services Description Language (WSDL) operation binding that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) operation binding that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>Gets the Web Services Description Language (WSDL) input message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) input message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property InputMessage: DNMessage read get_InputMessage;
    ///<summary>Gets the Web Services Description Language (WSDL) output message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</summary>
    ///<returns>The Web Services Description Language (WSDL) output message for the abstract operation that the protocol importer is currently processing to generate a method in a binding class.</returns>
    property OutputMessage: DNMessage read get_OutputMessage;
  end;

  TDNSoapProtocolImporter = class(TDNGenericImport<DNSoapProtocolImporterClass, DNSoapProtocolImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNProtocolReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E00F61E-FB8C-59F2-B776-588477CD5910}']
  end;

  ///<summary>Provides common functionality across communication protocols for creating <see cref="T:System.Web.Services.Description.ServiceDescription" />
  ///  objects from classes that are identified as Web services.</summary>
  [DNTypeName('System.Web.Services.Description.ProtocolReflector')]
  DNProtocolReflector = interface(DDN.mscorlib.DNObject)
  ['{59BA2930-BDA6-3C4D-A672-4E86576EF2E7}']
  { getters & setters } 

    function get_Service: DNService;
    function get_ServiceDescription: DNServiceDescription;
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_SchemaExporter: DDN.System.Xml.DNXmlSchemaExporter;
    function get_ReflectionImporter: DDN.System.Xml.DNXmlReflectionImporter;
    function get_DefaultNamespace: string;
    function get_ServiceUrl: string;
    function get_ServiceType: DDN.mscorlib.DNType;
    function get_Method: DNLogicalMethodInfo;
    function get_Binding: DNBinding;
    function get_PortType: DNPortType;
    function get_Port: DNPort;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_MethodAttribute: DNWebMethodAttribute;
    function get_Methods: TArray<DNLogicalMethodInfo>;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;
    function get_HeaderMessages: DNMessageCollection;
    function get_ProtocolName: string;

  { methods } 

    ///<summary>Gets a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object for a given XML namespace and the applicable communication protocol.</summary>
    ///  <param name="ns">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instance obtained subsequently gets populated with objects that correspond to Web Services Description Language (WSDL) entities that are reflected from the input Web service class.</param>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object for a given XML namespace and the applicable communication protocol.</returns>
    function GetServiceDescription(ns: string): DNServiceDescription;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the Web Services Description Language (WSDL) service that the protocol reflector is currently generating to contain a reference to the binding being generated.</summary>
    ///<returns>The Web Services Description Language (WSDL) service that the protocol reflector is currently generating to contain a reference to the binding being generated.</returns>
    property Service: DNService read get_Service;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object currently being created to contain the binding being generated.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object currently being created to contain the binding being generated.</returns>
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    ///<summary>Gets the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  objects that have so far been created and added to the corresponding to the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  obtained through the <see cref="P:System.Web.Services.Description.ServiceDescriptionReflector.ServiceDescriptions" />
    ///  property of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance. </summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  objects that have so far been created and added to the corresponding to the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  obtained through the <see cref="P:System.Web.Services.Description.ServiceDescriptionReflector.ServiceDescriptions" />
    ///  property of the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance.</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>Gets the XML schemas being generated by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance.</summary>
    ///<returns>The XML schemas being generated by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance.</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlSchemaExporter" />
    ///  instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlSchemaExporter" />
    ///  instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance.</returns>
    property SchemaExporter: DDN.System.Xml.DNXmlSchemaExporter read get_SchemaExporter;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  instance being used by the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  instance.</returns>
    property ReflectionImporter: DDN.System.Xml.DNXmlReflectionImporter read get_ReflectionImporter;
    ///<summary>Gets the default namespace, as identified by the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object's <see cref="F:System.Web.Services.Description.ServiceDescription.Namespace" />
    ///  property.</summary>
    ///<returns>The default namespace, as identified by the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object's <see cref="F:System.Web.Services.Description.ServiceDescription.Namespace" />
    ///  property.</returns>
    property DefaultNamespace: string read get_DefaultNamespace;
    ///<summary>Gets the endpoint of the associated Web service as a Uniform Resource Locator (URL), obtained from the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  object.</summary>
    ///<returns>The endpoint of the associated Web service as a Uniform Resource Locator (URL), obtained from the associated <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  object.</returns>
    property ServiceUrl: string read get_ServiceUrl;
    ///<summary>Gets the type of the Web service class being reflected to produce <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  objects.</summary>
    ///<returns>The type of the Web service class being reflected to produce <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  objects.</returns>
    property ServiceType: DDN.mscorlib.DNType read get_ServiceType;
    ///<summary>Gets the Web service method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>The Web service method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    property Method: DNLogicalMethodInfo read get_Method;
    ///<summary>Gets the Web Services Description Language (WSDL) binding currently being generated and added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>The Web Services Description Language (WSDL) binding currently being generated and added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</returns>
    property Binding: DNBinding read get_Binding;
    ///<summary>Gets the Web Services Description Language (WSDL) <see langword="portType" />
    ///  that the protocol reflector is currently generating to be implemented by the binding being generated.</summary>
    ///<returns>The Web Services Description Language (WSDL) <see langword="portType" />
    ///  that the protocol reflector is currently generating to be implemented by the binding being generated.</returns>
    property PortType: DNPortType read get_PortType;
    ///<summary>Gets the Web Services Description Language (WSDL) port that the protocol reflector is currently generating to contain a reference to the binding being generated.</summary>
    ///<returns>The Web Services Description Language (WSDL) port that the protocol reflector is currently generating to contain a reference to the binding being generated.</returns>
    property Port: DNPort read get_Port;
    ///<summary>Gets the abstract Web Services Description Language (WSDL) operation that the protocol reflector is currently generating from a Web service method.</summary>
    ///<returns>The abstract Web Services Description Language (WSDL) operation that the protocol reflector is currently generating from a Web service method</returns>
    property Operation: DNOperation read get_Operation;
    ///<summary>Gets the Web Services Description Language (WSDL) operation binding that the protocol importer is currently generating from a Web service method.</summary>
    ///<returns>The Web Services Description Language (WSDL) operation binding that the protocol importer is currently generating from a Web service method.</returns>
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    ///<summary>Gets the <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  for the method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.WebMethodAttribute" />
    ///  for the method that the protocol reflector is currently processing to generate a Web Services Description Language (WSDL) operation to be placed in the generated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///</returns>
    property MethodAttribute: DNWebMethodAttribute read get_MethodAttribute;
    ///<summary>Gets the Web service methods belonging to the Web service class, as identified by the associated <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  object's <see cref="P:System.Web.Services.Description.ProtocolReflector.Methods" />
    ///  property.</summary>
    ///<returns>The Web service methods belonging to the Web service class, as identified by the associated <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  object's <see cref="P:System.Web.Services.Description.ProtocolReflector.Methods" />
    ///  property.</returns>
    property Methods: TArray<DNLogicalMethodInfo> read get_Methods;
    ///<summary>Gets the Web Services Description Language (WSDL) input message for the abstract operation that the protocol reflector is currently generating from a Web service method.</summary>
    ///<returns>The Web Services Description Language (WSDL) input message for the abstract operation that the protocol reflector is currently generating from a Web service method.</returns>
    property InputMessage: DNMessage read get_InputMessage;
    ///<summary>Gets the Web Services Description Language (WSDL) output message for the abstract operation that the protocol reflector is currently generating from a Web service method.</summary>
    ///<returns>The Web Services Description Language (WSDL) output message for the abstract operation that the protocol reflector is currently generating from a Web service method.</returns>
    property OutputMessage: DNMessage read get_OutputMessage;
    ///<summary>Gets SOAP header message definitions to be added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object.</summary>
    ///<returns>SOAP header message definitions to be added to the associated <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object.</returns>
    property HeaderMessages: DNMessageCollection read get_HeaderMessages;
    ///<summary>When overridden in a derived class, gets the name of the protocol being used.</summary>
    ///<returns>The name of the protocol being used.</returns>
    property ProtocolName: string read get_ProtocolName;
  end;

  TDNProtocolReflector = class(TDNGenericImport<DNProtocolReflectorClass, DNProtocolReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionFormatExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BA940F31-4FDE-5486-AD68-6019B8C14D4C}']
  end;

  ///<summary>Represents an extensibility element added to an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionFormatExtension')]
  DNServiceDescriptionFormatExtension = interface(DDN.mscorlib.DNObject)
  ['{4B053390-4782-35FD-B385-41E959724571}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNServiceDescriptionFormatExtension = class(TDNGenericImport<DNServiceDescriptionFormatExtensionClass, DNServiceDescriptionFormatExtension>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpAddressBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{1C700106-6759-57B6-8BFF-76F9272F1B65}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.HttpAddressBinding" />
    ///  class. </summary>
    {class} function init: DNHttpAddressBinding;

  end;

  ///<summary>Represents an extensibility element added to a <see cref="T:System.Web.Services.Description.Port" />
  ///  within an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.HttpAddressBinding')]
  DNHttpAddressBinding = interface(DNServiceDescriptionFormatExtension)
  ['{E0C80317-09F5-30B2-8FB5-A7A165A8023F}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value representing the URL of the XML Web service.</summary>
    ///<returns>A string specifying the URI for the <see cref="T:System.Web.Services.Description.Port" />
    ///  . The default value is an empty string ("").</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpAddressBinding = class(TDNGenericImport<DNHttpAddressBindingClass, DNHttpAddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{1DC4D0DA-5BB0-5617-AB22-8EB54A997F03}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.HttpBinding" />
    ///  class. </summary>
    {class} function init: DNHttpBinding;

  end;

  ///<summary>Represents an extensibility element added to a <see cref="T:System.Web.Services.Description.Binding" />
  ///  within an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.HttpBinding')]
  DNHttpBinding = interface(DNServiceDescriptionFormatExtension)
  ['{0B79E71A-FB26-3701-A240-E9671AF62C99}']
  { getters & setters } 

    function get_Verb: string;
    procedure set_Verb(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether the HTTP request will be made using the "GET" or "POST" method.</summary>
    ///<returns>A string containing one of two possible values, "GET" or "POST". The default value is an empty string ("").</returns>
    property Verb: string read get_Verb write set_Verb;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpBinding = class(TDNGenericImport<DNHttpBindingClass, DNHttpBinding>)
  public const
    ///<summary>Specifies the URI for the XML namespace representing the HTTP transport for use with SOAP. This field is constant.</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/http/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpOperationBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DF9163D7-5EF3-5F59-AB53-DAA40957E068}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.HttpOperationBinding" />
    ///  class. </summary>
    {class} function init: DNHttpOperationBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  within an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.HttpOperationBinding')]
  DNHttpOperationBinding = interface(DNServiceDescriptionFormatExtension)
  ['{72447989-C247-3B50-B539-174632EA0829}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URL relative to the location specified by the <see cref="T:System.Web.Services.Description.HttpAddressBinding" />
    ///  , within the Web Services Description Language (WSDL) document, of the operation supported by the <see cref="T:System.Web.Services.Description.HttpOperationBinding" />
    ///  .</summary>
    ///<returns>An unencoded string representing the relative path. The default value is an empty string ("").</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpOperationBinding = class(TDNGenericImport<DNHttpOperationBindingClass, DNHttpOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpUrlEncodedBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{B9F8DCC4-030F-530C-8EB1-F875A5DC6E60}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.HttpUrlEncodedBinding" />
    ///  class. </summary>
    {class} function init: DNHttpUrlEncodedBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  within an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.HttpUrlEncodedBinding')]
  DNHttpUrlEncodedBinding = interface(DNServiceDescriptionFormatExtension)
  ['{A8E9F29B-FFA1-3935-8831-61DCB5F8699C}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpUrlEncodedBinding = class(TDNGenericImport<DNHttpUrlEncodedBindingClass, DNHttpUrlEncodedBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpUrlReplacementBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DC12ED70-DB21-5B29-9B41-5362FB2BC752}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.HttpUrlReplacementBinding" />
    ///  class. </summary>
    {class} function init: DNHttpUrlReplacementBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  within an XML Web service. It specifies the format for data transmission through HTTP. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.HttpUrlReplacementBinding')]
  DNHttpUrlReplacementBinding = interface(DNServiceDescriptionFormatExtension)
  ['{1F56DF7C-9632-36C7-828C-E2F78E3AD0EE}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpUrlReplacementBinding = class(TDNGenericImport<DNHttpUrlReplacementBindingClass, DNHttpUrlReplacementBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeContentBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{4F79A2E0-67F6-56C3-8F79-1F42D8DA2A92}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  class. </summary>
    {class} function init: DNMimeContentBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  within an XML Web service, specifying the MIME format for the body of the HTTP transmission. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimeContentBinding')]
  DNMimeContentBinding = interface(DNServiceDescriptionFormatExtension)
  ['{2AC82FCF-9A51-3431-B679-A9F19DE57991}']
  { getters & setters } 

    function get_Part: string;
    procedure set_Part(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to which the <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  applies.</summary>
    ///<returns>A string representing the name of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  with which the current <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  is associated. The default value is an empty string ("").</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>Gets or sets a value indicating the format of the body of the HTTP transmission.</summary>
    ///<returns>A string indicating the format of the body of the HTTP transmission. The default value is an empty string ("").</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeContentBinding = class(TDNGenericImport<DNMimeContentBindingClass, DNMimeContentBinding>)
  public const
    ///<summary>Specifies the URI for the XML namespace of the <see cref="T:System.Web.Services.Description.MimeContentBinding" />
    ///  class. This field is constant.</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/mime/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeMultipartRelatedBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DBEC29B5-F914-5F67-A4DD-749A0E64F4A7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  class. </summary>
    {class} function init: DNMimeMultipartRelatedBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  , specifying the individual MIME formats for the parts of the HTTP transmission. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimeMultipartRelatedBinding')]
  DNMimeMultipartRelatedBinding = interface(DNServiceDescriptionFormatExtension)
  ['{C88EB1EF-0525-33BC-A86E-21A667D15E29}']
  { getters & setters } 

    function get_Parts: DNMimePartCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of extensibility elements added to the <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  to specify the MIME format for the parts of the MIME message.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.MimePartCollection" />
    ///  representing extensibility elements added to the <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  .</returns>
    property Parts: DNMimePartCollection read get_Parts;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeMultipartRelatedBinding = class(TDNGenericImport<DNMimeMultipartRelatedBindingClass, DNMimeMultipartRelatedBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimePartClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{CBDF42A7-C95A-5E49-B11D-8F75DF078D33}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimePart" />
    ///  class.</summary>
    {class} function init: DNMimePart;

  end;

  ///<summary>Represents an extensibility element added to a <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
  ///  , specifying the concrete MIME type for the <see cref="T:System.Web.Services.Description.MessagePart" />
  ///  to which the <see langword="MimePart" />
  ///  applies. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimePart')]
  DNMimePart = interface(DNServiceDescriptionFormatExtension)
  ['{5772EC04-543F-3DB5-8436-7E7BABAC5850}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of MIME extensibility elements for the part of the <see cref="T:System.Web.Services.Description.MimeMultipartRelatedBinding" />
    ///  of which the <see cref="T:System.Web.Services.Description.MimePart" />
    ///  is a member.</summary>
    ///<returns>A collection of service description format extension.</returns>
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimePart = class(TDNGenericImport<DNMimePartClass, DNMimePart>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{919A10C2-3463-5C89-B84A-487B59771EC2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimeTextBinding" />
    ///  class. </summary>
    {class} function init: DNMimeTextBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  , an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  , or a <see cref="T:System.Web.Services.Description.MimePart" />
  ///  , specifying the text patterns for which to search the HTTP transmission. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimeTextBinding')]
  DNMimeTextBinding = interface(DNServiceDescriptionFormatExtension)
  ['{F2002E31-CA87-392D-8E93-950762F1ED89}']
  { getters & setters } 

    function get_Matches: DNMimeTextMatchCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of MIME text patterns for which the HTTP transmission is searched.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.MimeTextMatchCollection" />
    ///  representing the MIME text patterns to search for.</returns>
    property Matches: DNMimeTextMatchCollection read get_Matches;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeTextBinding = class(TDNGenericImport<DNMimeTextBindingClass, DNMimeTextBinding>)
  public const
    ///<summary>Specifies the URI for the XML namespace of the <see cref="T:System.Web.Services.Description.MimeTextBinding" />
    ///  class. This field is constant.</summary>
   Namespace = 'http://microsoft.com/wsdl/mime/textMatching/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeXmlBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{0EB14F68-86D5-5BB5-A979-E71AE03A18EE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.MimeXmlBinding" />
    ///  class. </summary>
    {class} function init: DNMimeXmlBinding;

  end;

  ///<summary>Represents an extensibility element added to a <see cref="T:System.Web.Services.Description.MimePart" />
  ///  , an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  . It specifies the schema for XML messages that are not SOAP compliant. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.MimeXmlBinding')]
  DNMimeXmlBinding = interface(DNServiceDescriptionFormatExtension)
  ['{202782E1-F0BF-30AC-B810-EAA5B6B3A8A4}']
  { getters & setters } 

    function get_Part: string;
    procedure set_Part(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to which the <see cref="T:System.Web.Services.Description.MimeXmlBinding" />
    ///  applies.</summary>
    ///<returns>The name of the corresponding <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  . The default value is an empty string ("").</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeXmlBinding = class(TDNGenericImport<DNMimeXmlBindingClass, DNMimeXmlBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapAddressBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{BF14C764-E48D-5C75-A486-E18208C80555}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.SoapAddressBinding" />
    ///  class. </summary>
    {class} function init: DNSoapAddressBinding;

  end;

  ///<summary>Represents an extensibility element added to a <see cref="T:System.Web.Services.Description.Port" />
  ///  within an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Description.SoapAddressBinding')]
  DNSoapAddressBinding = interface(DNServiceDescriptionFormatExtension)
  ['{9394509A-247C-3837-A5AD-842F11DD1A31}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value representing the URI for the <see cref="T:System.Web.Services.Description.Port" />
    ///  to which the <see cref="T:System.Web.Services.Description.SoapAddressBinding" />
    ///  applies.</summary>
    ///<returns>A string containing a URI. The default value is an empty string ("").</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapAddressBinding = class(TDNGenericImport<DNSoapAddressBindingClass, DNSoapAddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12AddressBindingClass = interface(DNSoapAddressBindingClass)
  ['{BB6890B6-F58A-5C3F-A5B3-90FF6B917B85}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Soap12AddressBinding" />
    ///  class. </summary>
    {class} function init: DNSoap12AddressBinding;

  end;

  ///<summary>Represents a service description format extension applied to a <see cref="T:System.Web.Services.Description.Port" />
  ///  when an XML Web service supports the SOAP protocol version 1.2. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Soap12AddressBinding')]
  DNSoap12AddressBinding = interface(DNSoapAddressBinding)
  ['{E6FB2398-2D89-3AE0-9EAD-756622618FD7}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value representing the URI for the <see cref="T:System.Web.Services.Description.Port" />
    ///  to which the <see cref="T:System.Web.Services.Description.SoapAddressBinding" />
    ///  applies.</summary>
    ///<returns>A string containing a URI. The default value is an empty string ("").</returns>
    property Location: string read get_Location write set_Location;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12AddressBinding = class(TDNGenericImport<DNSoap12AddressBindingClass, DNSoap12AddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNDescription_SoapBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{7556E67D-34D3-53FB-A96C-F2C440F84C3B}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;

  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  class.</summary>
    {class} function init: DNDescription_SoapBinding;

  { static propertys } 

    ///<summary>Gets the binding schema that is to be used to transmit data by using the SOAP protocol version 1.1.</summary>
    ///<returns>An <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  object that represents the binding schema that is to be used to transmit data by using the SOAP protocol version 1.1.</returns>
    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
  end;

  ///<summary>Represents an extension added to a <see cref="T:System.Web.Services.Description.Binding" />
  ///  within an XML Web service. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.SoapBinding')]
  DNDescription_SoapBinding = interface(DNServiceDescriptionFormatExtension)
  ['{5C157D9E-2E33-32D4-B91C-9FB7973816F4}']
  { getters & setters } 

    function get_Transport: string;
    procedure set_Transport(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URI with the specification for HTTP transmission of SOAP data.</summary>
    ///<returns>A string value representing the URI for the specification for data transmission by means of SOAP. The default is an empty string ("").</returns>
    property Transport: string read get_Transport write set_Transport;
    ///<summary>Specifies the type of SOAP binding used by the current <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  values. The default is <see langword="Document" />
    ///  .</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNDescription_SoapBinding = class(TDNGenericImport<DNDescription_SoapBindingClass, DNDescription_SoapBinding>)
  public const
    ///<summary>Gets the URI for the XML namespace of the <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  class. This field is constant.</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/soap/';
    ///<summary>Gets the URI for the standard protocol specifying HTTP transmission of SOAP data. This field is constant.</summary>
   HttpTransport = 'http://schemas.xmlsoap.org/soap/http';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12BindingClass = interface(DNDescription_SoapBindingClass)
  ['{3BFCBBDD-42FE-5377-A4EE-1DF31D66A968}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Soap12Binding" />
    ///  class. </summary>
    {class} function init: DNSoap12Binding;

  end;

  ///<summary>Represents a binding in a Web Services Description Language (WSDL) document to the SOAP version 1.2 protocol. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Soap12Binding')]
  DNSoap12Binding = interface(DNDescription_SoapBinding)
  ['{104F99E0-1E53-33A2-89AE-90043973EEDB}']
  { getters & setters } 

    function get_Transport: string;
    procedure set_Transport(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URI with the specification for HTTP transmission of SOAP data.</summary>
    ///<returns>A string value representing the URI for the specification for data transmission by means of SOAP. The default is an empty string ("").</returns>
    property Transport: string read get_Transport write set_Transport;
    ///<summary>Specifies the type of SOAP binding used by the current <see cref="T:System.Web.Services.Description.SoapBinding" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  values. The default is <see langword="Document" />
    ///  .</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12Binding = class(TDNGenericImport<DNSoap12BindingClass, DNSoap12Binding>)
  public const
    ///<summary>Represents the XML namespace of a binding to the SOAP protocol version 1.2. This field is constant.</summary>
   Namespace = 'http://schemas.xmlsoap.org/wsdl/soap12/';
    ///<summary>Represents the transport protocol for the SOAP message is HTTP. This field is constant.</summary>
   HttpTransport = 'http://schemas.xmlsoap.org/soap/http';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapBodyBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{64FA76A2-FC20-5C9F-B455-844C8C244D05}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.SoapBodyBinding" />
    ///  class. </summary>
    {class} function init: DNSoapBodyBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  .</summary>
  [DNTypeName('System.Web.Services.Description.SoapBodyBinding')]
  DNSoapBodyBinding = interface(DNServiceDescriptionFormatExtension)
  ['{B3D26E8E-4FC1-3FF0-8161-8CC1C073772E}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_PartsString: string;
    procedure set_PartsString(value: string);
    function get_Parts: TArray<string>;
    procedure set_Parts(value: TArray<string>);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Indicates whether the message parts are encoded using specified encoding rules, or define the concrete schema of the message.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  values. The default is <see langword="Default" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Get or sets the URI representing the location of the specifications for encoding of content not specifically defined by the <see cref="P:System.Web.Services.Description.SoapBodyBinding.Encoding" />
    ///  property.</summary>
    ///<returns>A string containing a URI.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets a string containing a list of space-delimited URIs. The URIs represent the encoding style (or styles) to be used to encode messages within the SOAP body.</summary>
    ///<returns>A string containing a list of URIs. The default value is an empty string ("").</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Gets or sets a value indicating which parts of the transmitted message appear within the SOAP body portion of the transmission.</summary>
    ///<returns>A space-delimited string containing the appropriate message parts.</returns>
    property PartsString: string read get_PartsString write set_PartsString;
    ///<summary>Gets or sets a value indicating which parts of the transmitted message appear within the SOAP body portion of the transmission.</summary>
    ///<returns>A string array containing the names of the appropriate message parts.</returns>
    property Parts: TArray<string> read get_Parts write set_Parts;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapBodyBinding = class(TDNGenericImport<DNSoapBodyBindingClass, DNSoapBodyBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12BodyBindingClass = interface(DNSoapBodyBindingClass)
  ['{46EEFC0D-E2C7-523F-8692-E8DE549BEB13}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Soap12BodyBinding" />
    ///  class. </summary>
    {class} function init: DNSoap12BodyBinding;

  end;

  ///<summary>Represents a service description format extension applied to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  when an XML Web service supports the SOAP protocol version 1.2. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Soap12BodyBinding')]
  DNSoap12BodyBinding = interface(DNSoapBodyBinding)
  ['{C2E83DE7-A249-3CED-A222-53C2D893A01D}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_PartsString: string;
    procedure set_PartsString(value: string);
    function get_Parts: TArray<string>;
    procedure set_Parts(value: TArray<string>);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Indicates whether the message parts are encoded using specified encoding rules, or define the concrete schema of the message.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  values. The default is <see langword="Default" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Get or sets the URI representing the location of the specifications for encoding of content not specifically defined by the <see cref="P:System.Web.Services.Description.SoapBodyBinding.Encoding" />
    ///  property.</summary>
    ///<returns>A string containing a URI.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets a string containing a list of space-delimited URIs. The URIs represent the encoding style (or styles) to be used to encode messages within the SOAP body.</summary>
    ///<returns>A string containing a list of URIs. The default value is an empty string ("").</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Gets or sets a value indicating which parts of the transmitted message appear within the SOAP body portion of the transmission.</summary>
    ///<returns>A space-delimited string containing the appropriate message parts.</returns>
    property PartsString: string read get_PartsString write set_PartsString;
    ///<summary>Gets or sets a value indicating which parts of the transmitted message appear within the SOAP body portion of the transmission.</summary>
    ///<returns>A string array containing the names of the appropriate message parts.</returns>
    property Parts: TArray<string> read get_Parts write set_Parts;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12BodyBinding = class(TDNGenericImport<DNSoap12BodyBindingClass, DNSoap12BodyBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapFaultBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{BFC821D6-D1DD-5596-8FEE-1D8A6E7920BD}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Description.SoapFaultBinding" />
    ///  class.</summary>
    {class} function init: DNSoapFaultBinding;

  end;

  ///<summary>Represents an extensibility element added to a <see cref="T:System.Web.Services.Description.FaultBinding" />
  ///  within an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Description.SoapFaultBinding')]
  DNSoapFaultBinding = interface(DNServiceDescriptionFormatExtension)
  ['{1E2734B6-40BB-32DE-BC96-B8BFB1A9C203}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Specifies whether the fault message is encoded using rules specified by the <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  property, or is encapsulated within a concrete XML schema.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  values. The default is <see langword="Default" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Gets or sets the value of the name attribute that relates the soap fault to the wsdl fault defined for the specified operation.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the name attribute that relates the soap fault to the wsdl fault defined for the operation.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Get or sets the URI representing the location of the specification for encoding of content not specifically defined by the <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  property.</summary>
    ///<returns>A string representing a URI.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets a URI representing the encoding style used to encode the SOAP fault message.</summary>
    ///<returns>A string containing a URI. The default value is an empty string ("").</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapFaultBinding = class(TDNGenericImport<DNSoapFaultBindingClass, DNSoapFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12FaultBindingClass = interface(DNSoapFaultBindingClass)
  ['{39F0C6DE-C95F-506C-8E21-14B5317874A1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Soap12FaultBinding" />
    ///  class. </summary>
    {class} function init: DNSoap12FaultBinding;

  end;

  ///<summary>Represents a service description format extension applied to an <see cref="T:System.Web.Services.Description.FaultBinding" />
  ///  when an XML Web service supports the SOAP protocol version 1.2. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Soap12FaultBinding')]
  DNSoap12FaultBinding = interface(DNSoapFaultBinding)
  ['{9738C068-F155-3188-B097-BB9C82C6BAF2}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Specifies whether the fault message is encoded using rules specified by the <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  property, or is encapsulated within a concrete XML schema.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  values. The default is <see langword="Default" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Gets or sets the value of the name attribute that relates the soap fault to the wsdl fault defined for the specified operation.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the name attribute that relates the soap fault to the wsdl fault defined for the operation.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Get or sets the URI representing the location of the specification for encoding of content not specifically defined by the <see cref="P:System.Web.Services.Description.SoapFaultBinding.Encoding" />
    ///  property.</summary>
    ///<returns>A string representing a URI.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets a URI representing the encoding style used to encode the SOAP fault message.</summary>
    ///<returns>A string containing a URI. The default value is an empty string ("").</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12FaultBinding = class(TDNGenericImport<DNSoap12FaultBindingClass, DNSoap12FaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapHeaderBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{802D010C-F16B-55B7-928C-42F881C997E2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  class. </summary>
    {class} function init: DNSoapHeaderBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  within an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Description.SoapHeaderBinding')]
  DNSoapHeaderBinding = interface(DNServiceDescriptionFormatExtension)
  ['{9DBF5F11-6B80-3F11-8AA0-2BE02565CC07}']
  { getters & setters } 

    function get_MapToProperty: Boolean;
    procedure set_MapToProperty(value: Boolean);
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Fault: DNSoapHeaderFaultBinding;
    procedure set_Fault(value: DNSoapHeaderFaultBinding);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  instance is mapped to a specific property in generated proxy classes.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  maps to a specific property; otherwise <see langword="false" />
    ///  .</returns>
    property MapToProperty: Boolean read get_MapToProperty write set_MapToProperty;
    ///<summary>Gets or sets a value specifying the name of the <see cref="T:System.Web.Services.Description.Message" />
    ///  within the XML Web service to which the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  applies.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  representing the name of the <see cref="T:System.Web.Services.Description.Message" />
    ///  .</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>Gets or sets a value indicating to which <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  within the XML Web service the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  applies.</summary>
    ///<returns>A string representing the name of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to which the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  applies.</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>Specifies whether the header is encoded using rules specified by the <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  property, or is encapsulated within a concrete XML schema.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  values. The default is <see langword="Default" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Gets or sets a URI representing the encoding style used to encode the SOAP header.</summary>
    ///<returns>A string containing a URI. The default value is an empty string ("").</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Get or sets the URI representing the location of the specification for encoding of content not specifically defined by the <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  property.</summary>
    ///<returns>A string representing a URI.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets the extension type controlling the output in a WSDL document for the <see langword="headerfault" />
    ///  XML element of a SOAP header.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  representing the SOAP header types used to transmit error information.</returns>
    property Fault: DNSoapHeaderFaultBinding read get_Fault write set_Fault;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapHeaderBinding = class(TDNGenericImport<DNSoapHeaderBindingClass, DNSoapHeaderBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12HeaderBindingClass = interface(DNSoapHeaderBindingClass)
  ['{06CE11DE-4E59-5357-8DCD-6B6ECAC440BD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Soap12HeaderBinding" />
    ///  class. </summary>
    {class} function init: DNSoap12HeaderBinding;

  end;

  ///<summary>Represents a service description format extension applied to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  when an XML Web service supports the SOAP protocol version 1.2. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Soap12HeaderBinding')]
  DNSoap12HeaderBinding = interface(DNSoapHeaderBinding)
  ['{35707944-017B-30FC-8DC1-9B39698697DD}']
  { getters & setters } 

    function get_MapToProperty: Boolean;
    procedure set_MapToProperty(value: Boolean);
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Fault: DNSoapHeaderFaultBinding;
    procedure set_Fault(value: DNSoapHeaderFaultBinding);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  instance is mapped to a specific property in generated proxy classes.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  maps to a specific property; otherwise <see langword="false" />
    ///  .</returns>
    property MapToProperty: Boolean read get_MapToProperty write set_MapToProperty;
    ///<summary>Gets or sets a value specifying the name of the <see cref="T:System.Web.Services.Description.Message" />
    ///  within the XML Web service to which the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  applies.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  representing the name of the <see cref="T:System.Web.Services.Description.Message" />
    ///  .</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>Gets or sets a value indicating to which <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  within the XML Web service the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  applies.</summary>
    ///<returns>A string representing the name of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to which the <see cref="T:System.Web.Services.Description.SoapHeaderBinding" />
    ///  applies.</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>Specifies whether the header is encoded using rules specified by the <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  property, or is encapsulated within a concrete XML schema.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  values. The default is <see langword="Default" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Gets or sets a URI representing the encoding style used to encode the SOAP header.</summary>
    ///<returns>A string containing a URI. The default value is an empty string ("").</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Get or sets the URI representing the location of the specification for encoding of content not specifically defined by the <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  property.</summary>
    ///<returns>A string representing a URI.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets or sets the extension type controlling the output in a WSDL document for the <see langword="headerfault" />
    ///  XML element of a SOAP header.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  representing the SOAP header types used to transmit error information.</returns>
    property Fault: DNSoapHeaderFaultBinding read get_Fault write set_Fault;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12HeaderBinding = class(TDNGenericImport<DNSoap12HeaderBindingClass, DNSoap12HeaderBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapHeaderFaultBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{A464D7F5-A5D4-56E0-BD6A-2CEE787C410E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  class. </summary>
    {class} function init: DNSoapHeaderFaultBinding;

  end;

  ///<summary>Represents an extensibility element added to an <see cref="T:System.Web.Services.Description.InputBinding" />
  ///  or an <see cref="T:System.Web.Services.Description.OutputBinding" />
  ///  within an XML Web service. It specifies the SOAP header types used to transmit error information within the SOAP header.</summary>
  [DNTypeName('System.Web.Services.Description.SoapHeaderFaultBinding')]
  DNSoapHeaderFaultBinding = interface(DNServiceDescriptionFormatExtension)
  ['{4EB4EC5A-66DB-3309-BAC9-D140CA269A43}']
  { getters & setters } 

    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value specifying the name of the <see cref="T:System.Web.Services.Description.Message" />
    ///  within the XML Web service to which the <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  applies.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  representing the name of the <see cref="T:System.Web.Services.Description.Message" />
    ///  . The default value is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    ///<summary>Gets or sets a value indicating which <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  within the XML Web service the <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  applies to.</summary>
    ///<returns>The name of the <see cref="T:System.Web.Services.Description.MessagePart" />
    ///  to which the <see cref="T:System.Web.Services.Description.SoapHeaderFaultBinding" />
    ///  applies.</returns>
    property Part: string read get_Part write set_Part;
    ///<summary>Specifies whether the header is encoded using rules specified by the <see cref="P:System.Web.Services.Description.SoapHeaderBinding.Encoding" />
    ///  property, or is encapsulated within a concrete schema.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  values. The default is <see langword="Default" />
    ///  .</returns>
    property Use: DNSoapBindingUse read get_Use write set_Use;
    ///<summary>Gets or sets a URI representing the encoding style used to encode the error message for the SOAP header.</summary>
    ///<returns>A string containing a URI. The default value is an empty string ("").</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>Get or sets a URI representing the location of the specifications for encoding content not specifically defined by the <see cref="P:System.Web.Services.Description.SoapHeaderFaultBinding.Encoding" />
    ///  property.</summary>
    ///<returns>Returns a string representing a URI.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapHeaderFaultBinding = class(TDNGenericImport<DNSoapHeaderFaultBindingClass, DNSoapHeaderFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapOperationBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{03F31EE8-D48C-524B-81A5-D23C193BA96D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.SoapOperationBinding" />
    ///  class. </summary>
    {class} function init: DNSoapOperationBinding;

  end;

  ///<summary>Represents an extension added to an <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  within an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Description.SoapOperationBinding')]
  DNSoapOperationBinding = interface(DNServiceDescriptionFormatExtension)
  ['{ED7F89ED-9265-3E1F-949C-C7F67A7F585A}']
  { getters & setters } 

    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URI for the SOAP header.</summary>
    ///<returns>A string containing the URI for the SOAP header.</returns>
    property SoapAction: string read get_SoapAction write set_SoapAction;
    ///<summary>Gets or sets the type of SOAP binding used by the <see cref="T:System.Web.Services.Description.SoapOperationBinding" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  values. The default is <see langword="Document" />
    ///  .</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    ///<summary>Gets the parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</summary>
    ///<returns>The parent of the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  .</returns>
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is necessary for the action to which it refers.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process when the extensibility element is imported.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Web.Services.Description.ServiceDescriptionFormatExtension" />
    ///  is used by the import process; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapOperationBinding = class(TDNGenericImport<DNSoapOperationBindingClass, DNSoapOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12OperationBindingClass = interface(DNSoapOperationBindingClass)
  ['{75582412-474B-5B25-8ACB-3710B777D45D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.Soap12OperationBinding" />
    ///  class. </summary>
    {class} function init: DNSoap12OperationBinding;

  end;

  ///<summary>Represents a service description format extension applied to an <see cref="T:System.Web.Services.Description.OperationBinding" />
  ///  when an XML Web service supports the SOAP protocol version 1.2. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Description.Soap12OperationBinding')]
  DNSoap12OperationBinding = interface(DNSoapOperationBinding)
  ['{7C923004-9C40-3F26-8D22-9629686C3FFC}']
  { getters & setters } 

    function get_SoapActionRequired: Boolean;
    procedure set_SoapActionRequired(value: Boolean);
    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether an XML Web service anticipates requiring the <see langword="SOAPAction" />
    ///  HTTP header.</summary>
    ///<returns><see langword="true" />
    ///  if an XML Web service anticipates requiring the <see langword="SOAPAction" />
    ///  HTTP header; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property SoapActionRequired: Boolean read get_SoapActionRequired write set_SoapActionRequired;
    ///<summary>Gets or sets the URI for the SOAP header.</summary>
    ///<returns>A string containing the URI for the SOAP header.</returns>
    property SoapAction: string read get_SoapAction write set_SoapAction;
    ///<summary>Gets or sets the type of SOAP binding used by the <see cref="T:System.Web.Services.Description.SoapOperationBinding" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.SoapBindingStyle" />
    ///  values. The default is <see langword="Document" />
    ///  .</returns>
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12OperationBinding = class(TDNGenericImport<DNSoap12OperationBindingClass, DNSoap12OperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5F0638B-C43D-55EC-B404-EAB91EBAE301}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  class.</summary>
    {class} function init: DNServiceDescriptionImporter;

  { static methods } 

    ///<summary>Compiles a collection of Web references to produce a client proxy or a server stub.</summary>
    ///  <param name="webReferences">A <see cref="T:System.Web.Services.Description.WebReferenceCollection" />
    ///  of Web references to compile.</param>
    ///  <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  that specifies the code provider.</param>
    ///  <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  that specifies the unit into which code is compiled.</param>
    ///  <param name="options">A <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  that specifies code generation options.</param>
    ///<returns>A <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  of compiler warnings.</returns>
    {class} function GenerateWebReferences(webReferences: DNWebReferenceCollection; codeProvider: DDN.System.DNCodeDomProvider; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNWebReferenceOptions): DDN.System.DNStringCollection;

  end;

  ///<summary>Exposes a means of generating client proxy classes for XML Web services.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImporter')]
  DNServiceDescriptionImporter = interface(DDN.mscorlib.DNObject)
  ['{C6A12A8C-8A97-38EE-9394-9114437AF225}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_Style: DNServiceDescriptionImportStyle;
    procedure set_Style(value: DNServiceDescriptionImportStyle);
    function get_CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions;
    procedure set_CodeGenerationOptions(value: DDN.System.Xml.DNCodeGenerationOptions);
    function get_CodeGenerator: DDN.System.DNCodeDomProvider;
    procedure set_CodeGenerator(value: DDN.System.DNCodeDomProvider);
    function get_ProtocolName: string;
    procedure set_ProtocolName(value: string);

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to the collection of <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  values to be imported.</summary>
    ///  <param name="serviceDescription">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instance to add to the collection </param>
    ///  <param name="appSettingUrlKey">Sets the initial value of the <see langword="Url" />
    ///  property of the proxy class to be generated from the instance represented by the <paramref name="serviceDescription" />
    ///  parameter. Specifies that it should be generated from the web.config file's <see langword="&lt;appsetting&gt;" />
    ///  section. </param>
    ///  <param name="appSettingBaseUrl">Sets the initial value of the <see langword="Url" />
    ///  property of the proxy class to be generated from the instance represented by the <paramref name="serviceDescription" />
    ///  parameter. Specifies that it should be constructed from a combination of the value of this parameter and the URL specified by the <see langword="location" />
    ///  attribute in the WSDL document. </param>
    procedure AddServiceDescription(serviceDescription: DNServiceDescription; appSettingUrlKey: string; appSettingBaseUrl: string);
    ///<summary>Imports the specified <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  values, that generates code as specified by the <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.Style" />
    ///  property.</summary>
    ///  <param name="codeNamespace">The namespace into which the <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  values are imported. </param>
    ///  <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  instance in which the code that represents the <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  value is generated. </param>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  value that describes any error that occurred; or 0 if no error occurred.</returns>
    function Import(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit): DNServiceDescriptionImportWarnings;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances to be imported.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  instance that contains the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances slated to be imported by the <see cref="T:System.Web.Services.Description.ServiceDescriptionImporter" />
    ///  instance.</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  used by the <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  property.</summary>
    ///<returns>An <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  object that contains the XML schemas used by the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  instances in the <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  collection.</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    ///<summary>Gets or sets a value that determines the style of code (client or server) that is generated when the <see cref="P:System.Web.Services.Description.ServiceDescriptionImporter.ServiceDescriptions" />
    ///  values are imported.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportStyle" />
    ///  values. The default is <see cref="F:System.Web.Services.Description.ServiceDescriptionImportStyle.Client" />
    ///  .</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style write set_Style;
    ///<summary>Gets or sets various options for code generation.</summary>
    ///<returns>A member or combination of members of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  enumeration.</returns>
    property CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions read get_CodeGenerationOptions write set_CodeGenerationOptions;
    ///<summary>Gets or sets the code generator used by the service description importer.</summary>
    ///<returns>The <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />
    ///  interface used by the service description importer to generate proxy code.</returns>
    property CodeGenerator: DDN.System.DNCodeDomProvider read get_CodeGenerator write set_CodeGenerator;
    ///<summary>Gets or sets the protocol used to access the described XML Web services.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the case-insensitive name of the protocol to be imported.</returns>
    property ProtocolName: string read get_ProtocolName write set_ProtocolName;
  end;

  TDNServiceDescriptionImporter = class(TDNGenericImport<DNServiceDescriptionImporterClass, DNServiceDescriptionImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{897BD507-381A-5F27-A6F5-0B755DE48C0A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.ServiceDescriptionReflector" />
    ///  class.</summary>
    {class} function init: DNServiceDescriptionReflector;

  end;

  ///<summary>Provides a managed way of dynamically viewing, creating or invoking types supported by an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionReflector')]
  DNServiceDescriptionReflector = interface(DDN.mscorlib.DNObject)
  ['{6DEC1030-B63B-3E06-8D81-0B96ABF1922A}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;

  { methods } 

    ///<summary>Creates a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  including the specified <see cref="T:System.Type" />
    ///  for the XML Web service at the specified URL.</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  of the class or interface to reflect. </param>
    ///  <param name="url">The address (URL) of the XML Web service. </param>
    procedure Reflect(&type: DDN.mscorlib.DNType; url: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a reference to the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  associated with the XML Web service.</summary>
    ///<returns>A reference to the <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  associated with the XML Web service.</returns>
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    ///<summary>Gets a reference to the <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  associated with the XML Web service.</summary>
    ///<returns>An <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  collection.</returns>
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
  end;

  TDNServiceDescriptionReflector = class(TDNGenericImport<DNServiceDescriptionReflectorClass, DNServiceDescriptionReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapExtensionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A956D768-0252-5EA5-B926-E99ED73E1194}']
  end;

  ///<summary>Provides a common interface and functionality for classes to generate code attributes that specify SOAP extensions.</summary>
  [DNTypeName('System.Web.Services.Description.SoapExtensionImporter')]
  DNSoapExtensionImporter = interface(DDN.mscorlib.DNObject)
  ['{CE806377-A53C-3B54-A005-80076BF6D263}']
  { getters & setters } 

    function get_ImportContext: DNSoapProtocolImporter;
    procedure set_ImportContext(value: DNSoapProtocolImporter);

  { methods } 

    ///<summary>When overridden in a derived class, adds code attribute declarations to any method that represents an operation in a binding.</summary>
    ///  <param name="metadata">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
    ///  into which the <see cref="M:System.Web.Services.Description.SoapExtensionImporter.ImportMethod(System.CodeDom.CodeAttributeDeclarationCollection)" />
    ///  method can place new <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  instances.</param>
    procedure ImportMethod(metadata: DDN.System.DNCodeAttributeDeclarationCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  instance that invokes the <see cref="M:System.Web.Services.Description.SoapExtensionImporter.ImportMethod(System.CodeDom.CodeAttributeDeclarationCollection)" />
    ///  method.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  instance that invokes the <see cref="M:System.Web.Services.Description.SoapExtensionImporter.ImportMethod(System.CodeDom.CodeAttributeDeclarationCollection)" />
    ///  method.</returns>
    property ImportContext: DNSoapProtocolImporter read get_ImportContext write set_ImportContext;
  end;

  TDNSoapExtensionImporter = class(TDNGenericImport<DNSoapExtensionImporterClass, DNSoapExtensionImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapExtensionReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9734253B-E9D0-587E-B208-CBB057B6A3B2}']
  end;

  ///<summary>Provides a common interface and functionality for classes to add SOAP extension information to a <see cref="T:System.Web.Services.Description.ServiceDescription" />
  ///  object on a per-method basis.</summary>
  [DNTypeName('System.Web.Services.Description.SoapExtensionReflector')]
  DNSoapExtensionReflector = interface(DDN.mscorlib.DNObject)
  ['{0AA575E2-082A-3A24-B439-11435D0EA1F8}']
  { getters & setters } 

    function get_ReflectionContext: DNProtocolReflector;
    procedure set_ReflectionContext(value: DNProtocolReflector);

  { methods } 

    ///<summary>Generates service-specific description information that gets placed in a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object corresponding to a binding.</summary>
    procedure ReflectDescription;
    ///<summary><see langword="Abstract" />
    ///  method that a derived class must implement to add SOAP extension information to a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object on a per-method basis.</summary>
    procedure ReflectMethod;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the instance of a class derived from the abstract <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  class that invokes the <see cref="M:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod" />
    ///  method.</summary>
    ///<returns>The instance of a class derived from the abstract <see cref="T:System.Web.Services.Description.ProtocolReflector" />
    ///  class that invokes the <see cref="M:System.Web.Services.Description.SoapExtensionReflector.ReflectMethod" />
    ///  method.</returns>
    property ReflectionContext: DNProtocolReflector read get_ReflectionContext write set_ReflectionContext;
  end;

  TDNSoapExtensionReflector = class(TDNGenericImport<DNSoapExtensionReflectorClass, DNSoapExtensionReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapTransportImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC1347AB-1794-58E2-BB5E-10F1D3AE05B3}']
  end;

  ///<summary>Serves as a base class for derived classes that import SOAP transmission protocols into XML Web services.</summary>
  [DNTypeName('System.Web.Services.Description.SoapTransportImporter')]
  DNSoapTransportImporter = interface(DDN.mscorlib.DNObject)
  ['{710E0CB5-0A54-3A94-990E-12DB08E391C2}']
  { getters & setters } 

    function get_ImportContext: DNSoapProtocolImporter;
    procedure set_ImportContext(value: DNSoapProtocolImporter);

  { methods } 

    ///<summary>When overridden in a derived class, this method determines whether the specified transport protocol is supported by the XML Web service.</summary>
    ///  <param name="transport">A URI representing the transport protocol to be checked. </param>
    ///<returns><see langword="true" />
    ///  if the transport protocol is supported; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSupportedTransport(transport: string): Boolean;
    ///<summary>When overridden in a derived class, this method uses information contained in the <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object model (available through the <see cref="P:System.Web.Services.Description.SoapTransportImporter.ImportContext" />
    ///  property) to add transport-specific code to the class being generated.</summary>
    procedure ImportClass;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a reference to the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  performing the import action.</summary>
    ///<returns>A reference to the <see cref="T:System.Web.Services.Description.SoapProtocolImporter" />
    ///  performing the import action.</returns>
    property ImportContext: DNSoapProtocolImporter read get_ImportContext write set_ImportContext;
  end;

  TDNSoapTransportImporter = class(TDNGenericImport<DNSoapTransportImporterClass, DNSoapTransportImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0EE847A3-B426-5B19-B1DE-7A9FEA958424}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.WebReference" />
    ///  class with the given data.</summary>
    ///  <param name="documents">A <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  that specifies a collection of description documents.</param>
    ///  <param name="proxyCode">A <see cref="T:System.CodeDom.CodeNamespace" />
    ///  that specifies a namespace for code compilation.</param>
    ///  <param name="protocolName">The protocol used by the XML Web service.</param>
    ///  <param name="appSettingUrlKey">The URL key of the Web reference.</param>
    ///  <param name="appSettingBaseUrl">The base URL of the Web reference.</param>
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace; protocolName: string; appSettingUrlKey: string; appSettingBaseUrl: string): DNWebReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.WebReference" />
    ///  class with the given description document collection and proxy code namespace.</summary>
    ///  <param name="documents">A <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  that specifies a collection of description documents.</param>
    ///  <param name="proxyCode">A <see cref="T:System.CodeDom.CodeNamespace" />
    ///  that specifies a namespace for code compilation.</param>
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace): DNWebReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Description.WebReference" />
    ///  class with the given data.</summary>
    ///  <param name="documents">A <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  that specifies a collection of description documents.</param>
    ///  <param name="proxyCode">A <see cref="T:System.CodeDom.CodeNamespace" />
    ///  that specifies a namespace for code compilation.</param>
    ///  <param name="appSettingUrlKey">The URL key of the Web reference.</param>
    ///  <param name="appSettingBaseUrl">The base URL of the Web reference.</param>
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace; appSettingUrlKey: string; appSettingBaseUrl: string): DNWebReference; overload;

  end;

  ///<summary>Describes a reference to a collection of XML Web services.</summary>
  [DNTypeName('System.Web.Services.Description.WebReference')]
  DNWebReference = interface(DDN.mscorlib.DNObject)
  ['{299634D7-C075-335A-9215-BBDCC86D09DA}']
  { getters & setters } 

    function get_AppSettingBaseUrl: string;
    function get_AppSettingUrlKey: string;
    function get_Documents: DNDiscoveryClientDocumentCollection;
    function get_ProxyCode: DDN.System.DNCodeNamespace;
    function get_ValidationWarnings: DDN.System.DNStringCollection;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ProtocolName: string;
    procedure set_ProtocolName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the base URL of the Web reference.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the base URL of the Web reference.</returns>
    property AppSettingBaseUrl: string read get_AppSettingBaseUrl;
    ///<summary>Gets the URL key of the web reference.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the URL key of the Web reference.</returns>
    property AppSettingUrlKey: string read get_AppSettingUrlKey;
    ///<summary>Gets the collection of description documents associated with the Web reference.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Discovery.DiscoveryClientDocumentCollection" />
    ///  used to initialize the <see cref="T:System.Web.Services.Description.WebReference" />
    ///  instance.</returns>
    property Documents: DNDiscoveryClientDocumentCollection read get_Documents;
    ///<summary>Gets the code namespace associated with the Web reference.</summary>
    ///<returns>The <see cref="T:System.CodeDom.CodeNamespace" />
    ///  in which proxy code will be generated when the <see cref="M:System.Web.Services.Description.ServiceDescriptionImporter.GenerateWebReferences(System.Web.Services.Description.WebReferenceCollection,System.CodeDom.Compiler.CodeDomProvider,System.CodeDom.CodeCompileUnit,System.Web.Services.Description.WebReferenceOptions)" />
    ///  method is called.</returns>
    property ProxyCode: DDN.System.DNCodeNamespace read get_ProxyCode;
    ///<summary>Gets a collection of warnings generated when validating the description documents.</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  of validation warning text.</returns>
    property ValidationWarnings: DDN.System.DNStringCollection read get_ValidationWarnings;
    ///<summary>Gets a collection of warnings generated when importing Web Services Description Language (WSDL) service description documents.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescriptionImportWarnings" />
    ///  collection of warnings generated when importing WSDL service description documents.</returns>
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    ///<summary>Gets or sets the protocol associated with the Web reference.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the protocol associated with the Web reference.</returns>
    property ProtocolName: string read get_ProtocolName write set_ProtocolName;
  end;

  TDNWebReference = class(TDNGenericImport<DNWebReferenceClass, DNWebReference>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{399CCCBF-0F38-5841-BFDF-3E3DD860445E}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;

  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</summary>
    {class} function init: DNWebReferenceOptions;

  { static methods } 

    ///<summary>Returns a new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  based on the code generation options described in the specified <see cref="T:System.IO.TextReader" />
    ///  .</summary>
    ///  <param name="reader">The <see cref="T:System.IO.TextReader" />
    ///  that contains the code generation options.</param>
    ///  <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  to be associated with the new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</param>
    ///<returns>A new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  based on the code generation options described in the specified <see cref="T:System.IO.TextReader" />
    ///  .</returns>
    {class} function Read(reader: DDN.mscorlib.DNTextReader; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;
    ///<summary>Returns a new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  based on the code generation options described in the specified stream.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  that contains the code generation options.</param>
    ///  <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  to be associated with the new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</param>
    ///<returns>A new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  based on the code generation options described in the specified stream.</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;
    ///<summary>Returns a new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  based on the code generation options described in the specified <see cref="T:System.Xml.XmlReader" />
    ///  .</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  that contains the code generation options.</param>
    ///  <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  to be associated with the new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</param>
    ///<returns>A new instance of <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  based on the code generation options described in the specified <see cref="T:System.Xml.XmlReader" />
    ///  .</returns>
    {class} function Read(xmlReader: DDN.System.Xml.DNXmlReader; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;

  { static propertys } 

    ///<summary>Gets the <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</returns>
    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
  end;

  ///<summary>The <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
  ///  class represents code generation options specified in an XML text file.</summary>
  [DNTypeName('System.Web.Services.Description.WebReferenceOptions')]
  DNWebReferenceOptions = interface(DDN.mscorlib.DNObject)
  ['{3302EADB-2127-3F1A-AD04-C5A48295E7C1}']
  { getters & setters } 

    function get_CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions;
    procedure set_CodeGenerationOptions(value: DDN.System.Xml.DNCodeGenerationOptions);
    function get_SchemaImporterExtensions: DDN.System.DNStringCollection;
    function get_Style: DNServiceDescriptionImportStyle;
    procedure set_Style(value: DNServiceDescriptionImportStyle);
    function get_Verbose: Boolean;
    procedure set_Verbose(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</returns>
    property CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions read get_CodeGenerationOptions write set_CodeGenerationOptions;
    ///<summary>Gets a <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  that represents the schema importer extensions associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  that represents the schema importer extensions associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</returns>
    property SchemaImporterExtensions: DDN.System.DNStringCollection read get_SchemaImporterExtensions;
    ///<summary>Gets or sets the <see cref="T:System.Web.Services.Description.ServiceDescriptionImportStyle" />
    ///  associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Description.ServiceDescriptionImportStyle" />
    ///  associated with this <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</returns>
    property Style: DNServiceDescriptionImportStyle read get_Style write set_Style;
    ///<summary>Gets or sets a <see cref="T:System.Boolean" />
    ///  value that indicates whether verbose warning messages are to be generated during compilation of a client proxy or a server stub.</summary>
    ///<returns><see langword="true" />
    ///  if verbose warning messages are to be generated during compilation of a client proxy or a server stub; otherwise, <see langword="false" />
    ///  .</returns>
    property Verbose: Boolean read get_Verbose write set_Verbose;
  end;

  TDNWebReferenceOptions = class(TDNGenericImport<DNWebReferenceOptionsClass, DNWebReferenceOptions>)
  public const
    ///<summary>A <see cref="T:System.String" />
    ///  that contains the target namespace for the <see cref="T:System.Web.Services.Description.WebReferenceOptions" />
    ///  .</summary>
   TargetNamespace = 'http://microsoft.com/webReference/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebServicesInteroperabilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7542D5AC-75B3-50E5-BE65-21CA437D1771}']
  { static methods } 

    ///<summary>Verifies whether a given Web service or services conforms to a given WS-I specification, and provides a list of any violations that it finds.</summary>
    ///  <param name="claims">A member of <see cref="T:System.Web.Services.WsiProfiles" />
    ///  that indicates a Web services interoperability specification.</param>
    ///  <param name="description">A <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  that describes a Web service.</param>
    ///  <param name="violations">A <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  that contains any violations that were found.</param>
    ///<returns><see langword="true" />
    ///  if the Web service described by <paramref name="description" />
    ///  conforms to the Web services interoperability specification indicated by <paramref name="claims" />
    ///  ; otherwise<see langword=" false" />
    ///  .</returns>
    {class} function CheckConformance(claims: DNWsiProfiles; description: DNServiceDescription; violations: DNBasicProfileViolationCollection): Boolean; overload;
    ///<summary>Verifies whether a given Web service or services conforms to a given WS-I specification, and provides a list of any violations that it finds.</summary>
    ///  <param name="claims">A member of <see cref="T:System.Web.Services.WsiProfiles" />
    ///  that indicates a Web services interoperability specification.</param>
    ///  <param name="descriptions">A <see cref="T:System.Web.Services.Description.ServiceDescriptionCollection" />
    ///  that contains Web service descriptions.</param>
    ///  <param name="violations">A <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  that contains any violations that were found.</param>
    ///<returns><see langword="true" />
    ///  if the Web service descriptions contained in <paramref name="descriptions" />
    ///  conform to the Web services interoperability specification indicated by <paramref name="claims" />
    ///  ; <see langword="false" />
    ///  otherwise.</returns>
    {class} function CheckConformance(claims: DNWsiProfiles; descriptions: DNServiceDescriptionCollection; violations: DNBasicProfileViolationCollection): Boolean; overload;
    ///<summary>Verifies whether a given Web service or services conforms to a given WS-I specification, and provides a list of any violations that it finds.</summary>
    ///  <param name="claims">A member of <see cref="T:System.Web.Services.WsiProfiles" />
    ///  that indicates a Web services interoperability specification.</param>
    ///  <param name="webReference">A <see cref="T:System.Web.Services.Description.WebReference" />
    ///  that describes a Web service.</param>
    ///  <param name="violations">A <see cref="T:System.Web.Services.Description.BasicProfileViolationCollection" />
    ///  that contains any violations that were found.</param>
    ///<returns><see langword="true" />
    ///  if the Web service described by <paramref name="webReference" />
    ///  conforms to the Web services interoperability specification indicated by <paramref name="claims" />
    ///  ; <see langword="false" />
    ///  otherwise.</returns>
    {class} function CheckConformance(claims: DNWsiProfiles; webReference: DNWebReference; violations: DNBasicProfileViolationCollection): Boolean; overload;

  end;

  ///<summary>The <see cref="T:System.Web.Services.Description.WebServicesInteroperability" />
  ///  class provides methods to verify whether a given Web service or services conforms to a given Web Services Interoperability (WS-I) Organization specification.</summary>
  [DNTypeName('System.Web.Services.Description.WebServicesInteroperability')]
  DNWebServicesInteroperability = interface(DDN.mscorlib.DNObject)
  ['{46564511-E6C3-3536-AE9E-DDE549E3BB7C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebServicesInteroperability = class(TDNGenericImport<DNWebServicesInteroperabilityClass, DNWebServicesInteroperability>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientProtocol_DiscoveryClientResultsFileClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66F1E0DA-F05A-5FDC-8769-6611A9F05BBF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol.DiscoveryClientResultsFile" />
    ///  class. </summary>
    {class} function init: DNDiscoveryClientProtocol_DiscoveryClientResultsFile;

  end;

  ///<summary>Represents the root element of an XML document containing the results of all files written when the <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.WriteAll(System.String,System.String)" />
  ///  method is invoked.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile')]
  DNDiscoveryClientProtocol_DiscoveryClientResultsFile = interface(DDN.mscorlib.DNObject)
  ['{D5F055DF-ADA6-3386-A4E5-5482E48FB580}']
  { getters & setters } 

    function get_Results: DNDiscoveryClientResultCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  objects.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryClientResultCollection" />
    ///  containing the results from a <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.ReadAll(System.String)" />
    ///  or <see cref="M:System.Web.Services.Discovery.DiscoveryClientProtocol.WriteAll(System.String,System.String)" />
    ///  invocation.</returns>
    property Results: DNDiscoveryClientResultCollection read get_Results;
  end;

  TDNDiscoveryClientProtocol_DiscoveryClientResultsFile = class(TDNGenericImport<DNDiscoveryClientProtocol_DiscoveryClientResultsFileClass, DNDiscoveryClientProtocol_DiscoveryClientResultsFile>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43FB6836-EF92-5E30-B4EE-D8DC704585A1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  class.</summary>
    {class} function init: DNDiscoveryClientResult; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryClientResult" />
    ///  class and sets the <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.ReferenceTypeName" />
    ///  property to <paramref name="referenceType" />
    ///  , the <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Url" />
    ///  property to <paramref name="url" />
    ///  and the <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Filename" />
    ///  property to <paramref name="filename" />
    ///  .</summary>
    ///  <param name="referenceType">Name of the class representing the type of reference in the discovery document. Sets the <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.ReferenceTypeName" />
    ///  property. </param>
    ///  <param name="url">URL for the reference. Sets the <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Url" />
    ///  property. </param>
    ///  <param name="filename">Name of the file in which the reference was saved. Sets the <see cref="P:System.Web.Services.Discovery.DiscoveryClientResult.Filename" />
    ///  property. </param>
    {class} function init(referenceType: DDN.mscorlib.DNType; url: string; filename: string): DNDiscoveryClientResult; overload;

  end;

  ///<summary>Represents the details of a discovery reference without the contents of the referenced document. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientResult')]
  DNDiscoveryClientResult = interface(DDN.mscorlib.DNObject)
  ['{41F364AF-DC21-3011-B955-3E3AD937E270}']
  { getters & setters } 

    function get_ReferenceTypeName: string;
    procedure set_ReferenceTypeName(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Filename: string;
    procedure set_Filename(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Name of the class representing the type of reference in the discovery document.</summary>
    ///<returns>Name of the class representing the type of a reference. Default value is <see langword="null" />
    ///  .</returns>
    property ReferenceTypeName: string read get_ReferenceTypeName write set_ReferenceTypeName;
    ///<summary>Gets or sets the URL for the reference.</summary>
    ///<returns>The URL of the reference.</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>Gets or sets the name of the file in which the reference is saved.</summary>
    ///<returns>Name of the file in which the reference is saved.</returns>
    property Filename: string read get_Filename write set_Filename;
  end;

  TDNDiscoveryClientResult = class(TDNGenericImport<DNDiscoveryClientResultClass, DNDiscoveryClientResult>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E737A20B-28A2-5BEE-905F-E00D5EF072C9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  class.</summary>
    {class} function init: DNDiscoveryDocument;

  { static methods } 

    ///<summary>Reads and returns a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  from the passed <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  from which to read the <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  containing the contents of a discovery document from the passed <see cref="T:System.IO.Stream" />
    ///  .</returns>
    {class} function Read(stream: DDN.mscorlib.DNStream): DNDiscoveryDocument; overload;
    ///<summary>Reads and returns a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  from the passed <see cref="T:System.IO.TextReader" />
    ///  .</summary>
    ///  <param name="reader">The <see cref="T:System.IO.TextReader" />
    ///  from which to read the <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  containing the contents of a discovery document from the passed <see cref="T:System.IO.TextReader" />
    ///  .</returns>
    {class} function Read(reader: DDN.mscorlib.DNTextReader): DNDiscoveryDocument; overload;
    ///<summary>Reads and returns a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  from the passed <see cref="T:System.Xml.XmlReader" />
    ///  .</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  from which to read the <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  containing the contents of a discovery document from the passed <see cref="T:System.Xml.XmlReader" />
    ///  .</returns>
    {class} function Read(xmlReader: DDN.System.Xml.DNXmlReader): DNDiscoveryDocument; overload;
    ///<summary>Returns a value indicating whether the passed <see cref="T:System.Xml.XmlReader" />
    ///  can be deserialized into a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  .</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  that is tested whether it can be deserialized into a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if <see cref="T:System.Xml.XmlReader" />
    ///  can be deserialized into a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function CanRead(xmlReader: DDN.System.Xml.DNXmlReader): Boolean;

  end;

  ///<summary>Represents a discovery document. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocument')]
  DNDiscoveryDocument = interface(DDN.mscorlib.DNObject)
  ['{5E28BEB4-6A98-3974-985D-E5B6F6D9E558}']
  { getters & setters } 

    function get_References: DDN.mscorlib.DNIList;

  { methods } 

    ///<summary>Writes this <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  into the passed <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  into which this <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  is written. </param>
    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>Writes this <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  into the passed <see cref="T:System.IO.TextWriter" />
    ///  .</summary>
    ///  <param name="writer">The <see cref="T:System.IO.TextWriter" />
    ///  into which this <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  is written. </param>
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>Writes this <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  into the passed <see cref="T:System.Xml.XmlWriter" />
    ///  .</summary>
    ///  <param name="writer">The <see cref="T:System.Xml.XmlWriter" />
    ///  into which this <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  is written. </param>
    procedure Write(writer: DDN.System.Xml.DNXmlWriter); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>A list of references contained within the discovery document.</summary>
    ///<returns>An <see cref="T:System.Collections.IList" />
    ///  containing the references within the discovery document.</returns>
    property References: DDN.mscorlib.DNIList read get_References;
  end;

  TDNDiscoveryDocument = class(TDNGenericImport<DNDiscoveryDocumentClass, DNDiscoveryDocument>)
  public const
    ///<summary>Namespace of the discovery XML element of a discovery document.</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B3F2E33F-FDEB-5DA2-9205-394B5801F725}']
  { static methods } 

    ///<summary>Returns a file name based on the passed URL.</summary>
    ///  <param name="url">The URL on which the name of the file is based. </param>
    ///<returns>Name of the file based on the passed URL.</returns>
    {class} function FilenameFromUrl(url: string): string;

  end;

  ///<summary>The base class for discoverable references using XML Web services discovery.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryReference')]
  DNDiscoveryReference = interface(DDN.mscorlib.DNObject)
  ['{90F3DA69-A16C-38AD-94EE-F23F3B9C73C5}']
  { getters & setters } 

    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);
    function get_DefaultFilename: string;
    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    ///<summary>Downloads the referenced document at <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  to resolve whether the referenced document is valid.</summary>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  . </exception>
    procedure Resolve;
    ///<summary>When overridden in a derived class, writes the document to a <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="document">The document to write into a <see cref="T:System.IO.Stream" />
    ///  . </param>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  into which the <paramref name="document" />
    ///  is written. </param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>Reads the passed <see cref="T:System.IO.Stream" />
    ///  and returns an instance of the class representing the type of referenced document.</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  containing the reference document. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  with an underlying type matching the type of referenced document.</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process.</summary>
    ///<returns>An instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process </returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
    ///<summary>Gets the name of the default file to use when saving the referenced discovery document, XSD schema, or Service Description.</summary>
    ///<returns>Name of the default file to use when saving the referenced document.</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>Gets or sets the URL of the referenced document.</summary>
    ///<returns>The URL of the referenced document.</returns>
    property Url: string read get_Url write set_Url;
  end;

  TDNDiscoveryReference = class(TDNGenericImport<DNDiscoveryReferenceClass, DNDiscoveryReference>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNContractReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{77770136-A368-5ECC-A2DF-55A7AAC0B018}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  class using default values.</summary>
    {class} function init: DNContractReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  class using the supplied reference to a Service Description.</summary>
    ///  <param name="href">The URL for a Sevice Descritpion. Initializes the <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  property value. </param>
    {class} function init(href: string): DNContractReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  class using the supplied references to a service description and a XML Web service implementing the service description.</summary>
    ///  <param name="href">The URL for a service description. Initializes the <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  property value. </param>
    ///  <param name="docRef">The URL for a XML Web service implementing the service description at <paramref name="href" />
    ///  . Initializes the <see cref="P:System.Web.Services.Discovery.ContractReference.DocRef" />
    ///  property value. </param>
    {class} function init(href: string; docRef: string): DNContractReference; overload;

  end;

  ///<summary>Represents a reference in a discovery document to a service description.</summary>
  [DNTypeName('System.Web.Services.Discovery.ContractReference')]
  DNContractReference = interface(DNDiscoveryReference)
  ['{01089313-9BB8-3EDD-9D52-944D2FBC10BA}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_DocRef: string;
    procedure set_DocRef(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Contract: DNServiceDescription;
    function get_DefaultFilename: string;
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    ///<summary>Writes the passed-in service description into the passed-in <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="document">The <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  to write into <paramref name="stream" />
    ///  . </param>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  into which the serialized <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  is written. </param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>Reads the service description from the passed <see cref="T:System.IO.Stream" />
    ///  and returns the service description.</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  containing the service description. </param>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  containing the contents of the referenced service description.</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>Downloads the referenced document at <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  to resolve whether the referenced document is valid.</summary>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  . </exception>
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URL to the referenced service description.</summary>
    ///<returns>The URL to the referenced service description.</returns>
    property Ref: string read get_Ref write set_Ref;
    ///<summary>Gets and sets the URL for a XML Web service implementing the service description referenced in the <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  property.</summary>
    ///<returns>The URL for a XML Web service implementing the Service Description referenced in the <see cref="P:System.Web.Services.Discovery.ContractReference.Ref" />
    ///  property.</returns>
    property DocRef: string read get_DocRef write set_DocRef;
    ///<summary>Gets or sets the URL for the referenced Service Description.</summary>
    ///<returns>The URL for the referenced service description.</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>Gets a <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object representing the service description.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.ServiceDescription" />
    ///  object representing the service description.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  . </exception><exception cref="T:System.Exception">The <see cref="P:System.Web.Services.Discovery.DiscoveryClientProtocol.Documents" />
    ///  property of <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  does not contain a discovery document with an URL of <see cref="P:System.Web.Services.Discovery.ContractReference.Url" />
    ///  . </exception>
    property Contract: DNServiceDescription read get_Contract;
    ///<summary>Gets the name of the file to use by default when saving the referenced service description.</summary>
    ///<returns>Name of the default file to use when saving the referenced service description to a file.</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>Gets or sets the instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process.</summary>
    ///<returns>An instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process </returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNContractReference = class(TDNGenericImport<DNContractReferenceClass, DNContractReference>)
  public const
    ///<summary>XML namespace for service description references in discovery documents.</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/scl/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{6042B283-1FA3-5850-9326-F7BBC3ECE3DC}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  class.</summary>
    {class} function init: DNDiscoveryDocumentReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  class, setting the <see cref="P:System.Web.Services.Discovery.DiscoveryDocumentReference.Ref" />
    ///  property to the value of <paramref name="href" />
    ///  .</summary>
    ///  <param name="href">Reference to a discovery document. The <see cref="P:System.Web.Services.Discovery.DiscoveryDocumentReference.Ref" />
    ///  property is set to the value of <paramref name="href" />
    ///  . </param>
    {class} function init(href: string): DNDiscoveryDocumentReference; overload;

  end;

  ///<summary>Represents a reference to a discovery document. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentReference')]
  DNDiscoveryDocumentReference = interface(DNDiscoveryReference)
  ['{523E0D39-B0E1-3EBF-A2AE-40352826C739}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_DefaultFilename: string;
    function get_Document: DNDiscoveryDocument;
    function get_Url: string;
    procedure set_Url(value: string);
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    ///<summary>Verifies that all referenced documents within the discovery document are valid.</summary>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  .-or- The discovery document could not be downloaded and verified successfully. </exception>
    procedure ResolveAll;
    ///<summary>Writes the passed <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  into the passed <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="document">The <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  to write into <paramref name="stream" />
    ///  . </param>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  into which the serialized discovery document is written. </param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>Reads and returns the discovery document from the passed <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  containing the discovery document. </param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  containing the contents of the referenced discovery document.</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>Downloads the referenced document at <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  to resolve whether the referenced document is valid.</summary>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  . </exception>
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the reference to a discovery document.</summary>
    ///<returns>Reference to a discovery document.</returns>
    property Ref: string read get_Ref write set_Ref;
    ///<summary>Gets the name of the default file to use when saving the referenced discovery document.</summary>
    ///<returns>Name of the default file to use when saving the referenced document to a file.</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>Gets the contents of the referenced discovery document as a <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocument" />
    ///  representing the contents of the referenced discovery document.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  .-or- An error occurred during the download or resolution of the XSD schema using <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  . </exception>
    property Document: DNDiscoveryDocument read get_Document;
    ///<summary>Gets or sets the URL of the referenced discovery document.</summary>
    ///<returns>The URL of the referenced discovery document.</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>Gets or sets the instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process.</summary>
    ///<returns>An instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process </returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNDiscoveryDocumentReference = class(TDNGenericImport<DNDiscoveryDocumentReferenceClass, DNDiscoveryDocumentReference>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNSchemaReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{6CC92EDB-83B4-57FC-A5C3-1EE08168601E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  class using default values.</summary>
    {class} function init: DNSchemaReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  class using the supplied URL as the XSD schema reference.</summary>
    ///  <param name="url">The URL for the XSD schema. Initializes the <see cref="P:System.Web.Services.Discovery.SchemaReference.Ref" />
    ///  property. </param>
    {class} function init(url: string): DNSchemaReference; overload;

  end;

  ///<summary>Represents a reference in a discovery document to an XML Schema Definition (XSD) language schema. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.SchemaReference')]
  DNSchemaReference = interface(DNDiscoveryReference)
  ['{F0C3D543-85B7-3A1A-9038-D146C8FA9B05}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_DefaultFilename: string;
    function get_Schema: DDN.System.Xml.DNXmlSchema;
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    ///<summary>Writes the passed XSD schema into the passed <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="document">The <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  to write into <paramref name="stream" />
    ///  . </param>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  into which the serialized XSD schema is written. </param>
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    ///<summary>Reads and returns the XSD schema from the passed <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  containing the XSD schema. </param>
    ///<returns>An <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  containing the contents of the referenced XSD schema.</returns>
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>Downloads the referenced document at <see cref="P:System.Web.Services.Discovery.DiscoveryReference.Url" />
    ///  to resolve whether the referenced document is valid.</summary>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  . </exception>
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URL to the referenced XSD schema.</summary>
    ///<returns>The URL for the referenced XSD schema. The default value is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Ref: string read get_Ref write set_Ref;
    ///<summary>Gets or sets the <see langword="targetNamespace" />
    ///  XML attribute of the XSD schema.</summary>
    ///<returns>The <see langword="targetNamespace" />
    ///  XML attribute of the XSD schema. The default value is <see langword="null" />
    ///  .</returns>
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    ///<summary>Gets or sets the URL for the schema reference.</summary>
    ///<returns>The URL for the referenced XSD schema. The default value is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Url: string read get_Url write set_Url;
    ///<summary>Gets the name of the default file to use when saving the referenced XSD schema.</summary>
    ///<returns>Default name to use when saving the referenced XSD schema to a file.</returns>
    property DefaultFilename: string read get_DefaultFilename;
    ///<summary>Gets an <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  object representing the XSD schema.</summary>
    ///<returns>An <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  object representing the XSD schema.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  property is <see langword="null" />
    ///  .-or- An error occurred during the download or resolution of the XSD schema using <see cref="P:System.Web.Services.Discovery.DiscoveryReference.ClientProtocol" />
    ///  . </exception>
    property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
    ///<summary>Gets or sets the instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process.</summary>
    ///<returns>An instance of <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" />
    ///  used in a discovery process </returns>
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNSchemaReference = class(TDNGenericImport<DNSchemaReferenceClass, DNSchemaReference>)
  public const
    ///<summary>XML namespace for XSD schema references in discovery documents.</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/schema/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryRequestHandlerClass = interface(DNObjectClass)
  ['{71B31E13-D4AA-5537-B179-EEB4788B6F34}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryRequestHandler" />
    ///  class. </summary>
    {class} function init: DNDiscoveryRequestHandler;

  end;

  ///<summary>An ASP.NET HTTP handler that processes a request for a Web services discovery document.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryRequestHandler')]
  DNDiscoveryRequestHandler = interface(DDN.System.Web.DNIHttpHandler)
  ['{E474F4B4-3CE1-308C-9A95-9BC212EA19E6}']
  { getters & setters } 

    function get_IsReusable: Boolean;

  { methods } 

    ///<summary>Handles an HTTP request for a discovery document, which is serialized to the HTTP response.</summary>
    ///  <param name="context">The <see cref="P:System.Web.HttpContext.Request" />
    ///  and <see cref="P:System.Web.HttpContext.Response" />
    ///  properties of the <see cref="T:System.Web.HttpContext" />
    ///  class are used for input and output, respectively.</param>
    procedure ProcessRequest(context: DDN.System.Web.DNHttpContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value of <see langword="true" />
    ///  , indicates whether the instance of <see cref="T:System.Web.Services.Discovery.DiscoveryRequestHandler" />
    ///  (or a derived class) is reusable. </summary>
    ///<returns>This property always returns <see langword="true" />
    ///  .</returns>
    property IsReusable: Boolean read get_IsReusable;
  end;

  TDNDiscoveryRequestHandler = class(TDNGenericImport<DNDiscoveryRequestHandlerClass, DNDiscoveryRequestHandler>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoverySearchPatternClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70FFB100-4E57-5FD6-BF9C-F82A76B44867}']
  end;

  ///<summary>Establishes an interface for file extension search patterns for discoverable file types.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoverySearchPattern')]
  DNDiscoverySearchPattern = interface(DDN.mscorlib.DNObject)
  ['{E8EBF995-6092-3F91-AEF1-C9664C65E01D}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>When overridden in a derived class, returns the <see cref="T:System.Web.Services.Discovery.DiscoveryReference" />
    ///  object for a given file name.</summary>
    ///  <param name="filename">The name of a discovery file or a file that appears in a dynamically generated discovery document. For example, an .asmx or .xsd file.</param>
    ///<returns>A file name.</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the file name pattern to use as a search target.</summary>
    ///<returns>A file name pattern.</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNDiscoverySearchPattern = class(TDNGenericImport<DNDiscoverySearchPatternClass, DNDiscoverySearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNContractSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{EC1B7EEF-0008-5EF0-A235-B4E64C48C379}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.ContractSearchPattern" />
    ///  class. </summary>
    {class} function init: DNContractSearchPattern;

  end;

  ///<summary>Obtains the file locations and descriptions of ASP.NET Web services. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.ContractSearchPattern')]
  DNContractSearchPattern = interface(DNDiscoverySearchPattern)
  ['{EF0788F1-EDE3-3193-9ABD-5E686D2DEE1D}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>Creates the <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  object for the specified .asmx file.</summary>
    ///  <param name="filename">The file-system path of the Web service's .asmx file.</param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.ContractReference" />
    ///  object with the specified file name for its .asmx file.</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the file name pattern to use as a search target.</summary>
    ///<returns>The literal string "*.asmx".</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNContractSearchPattern = class(TDNGenericImport<DNContractSearchPatternClass, DNContractSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentLinksPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{D8AFA33F-7606-5F28-AF86-B583BFF034B6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentLinksPattern" />
    ///  class. </summary>
    {class} function init: DNDiscoveryDocumentLinksPattern;

  end;

  ///<summary>Obtains the file locations of Web services discovery documents for use in populating another Web services discovery document.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentLinksPattern')]
  DNDiscoveryDocumentLinksPattern = interface(DNDiscoverySearchPattern)
  ['{A00BEED2-2CFB-3BA8-B2C8-9D5501154CB8}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>Returns the <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  object for a given discovery document.</summary>
    ///  <param name="filename">The file-system path of the discovery document.</param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  object that specifies the location of a .vsdisco file.</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the file-name pattern to use as a search target.</summary>
    ///<returns>The literal string "*.disco".</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNDiscoveryDocumentLinksPattern = class(TDNGenericImport<DNDiscoveryDocumentLinksPatternClass, DNDiscoveryDocumentLinksPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{4E2C0BCB-5130-576C-A20B-2D6E10CAB147}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentSearchPattern" />
    ///  class. </summary>
    {class} function init: DNDiscoveryDocumentSearchPattern;

  end;

  ///<summary>Obtains the file locations of Web services discovery documents for use in populating another Web services discovery document. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentSearchPattern')]
  DNDiscoveryDocumentSearchPattern = interface(DNDiscoverySearchPattern)
  ['{7586A445-02FC-33C5-B321-EABD06695DFE}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>Returns the <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  object for a given discovery document.</summary>
    ///  <param name="filename">The file system path of the discovery document.</param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.DiscoveryDocumentReference" />
    ///  object that specifies the location of a .vsdisco file.</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the file name pattern to use as a search target.</summary>
    ///<returns>The literal string "*.vsdisco".</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNDiscoveryDocumentSearchPattern = class(TDNGenericImport<DNDiscoveryDocumentSearchPatternClass, DNDiscoveryDocumentSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNXmlSchemaSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{0B5F096A-CE67-59D4-991A-B938639C52BE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.XmlSchemaSearchPattern" />
    ///  class. </summary>
    {class} function init: DNXmlSchemaSearchPattern;

  end;

  ///<summary>Obtains the file locations of XML Schema documents for use in populating a Web services discovery document. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.XmlSchemaSearchPattern')]
  DNXmlSchemaSearchPattern = interface(DNDiscoverySearchPattern)
  ['{2CBB8153-9935-31B8-8045-769B8BAE1966}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    ///<summary>Returns the <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  object for a given discovery document.</summary>
    ///  <param name="filename">The file system path of the XML Schema document.</param>
    ///<returns>A <see cref="T:System.Web.Services.Discovery.SchemaReference" />
    ///  object that specifies the file name for an XML Schema document.</returns>
    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the file name pattern to use as a search target.</summary>
    ///<returns>The literal string "*.xsd".</returns>
    property Pattern: string read get_Pattern;
  end;

  TDNXmlSchemaSearchPattern = class(TDNGenericImport<DNXmlSchemaSearchPatternClass, DNXmlSchemaSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDynamicDiscoveryDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4755B04-9186-5755-AFB0-2BA15BDA53C8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  class. </summary>
    {class} function init: DNDynamicDiscoveryDocument;

  { static methods } 

    ///<summary>Deserializes an XML document into a <see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  instance.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  object from which the XML dynamic discovery document is deserialized.</param>
    ///<returns>The <see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  that was loaded.</returns>
    {class} function Load(stream: DDN.mscorlib.DNStream): DNDynamicDiscoveryDocument;

  end;

  ///<summary>Represents an XML document that specifies a list of file system directory paths that should not be searched for references to add to a Web services discovery document.</summary>
  [DNTypeName('System.Web.Services.Discovery.DynamicDiscoveryDocument')]
  DNDynamicDiscoveryDocument = interface(DDN.mscorlib.DNObject)
  ['{B19F428A-459D-37F9-8377-FC1E8420AC93}']
  { getters & setters } 

    function get_ExcludePaths: TArray<DNExcludePathInfo>;
    procedure set_ExcludePaths(value: TArray<DNExcludePathInfo>);

  { methods } 

    ///<summary>Serializes a <see cref="T:System.Web.Services.Discovery.DynamicDiscoveryDocument" />
    ///  instance into an XML document specified as an output stream.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  object to which the XML dynamic discovery document is serialized.</param>
    procedure Write(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the file-system directory paths that should not be searched for references to add to a discovery document.</summary>
    ///<returns>An array of <see cref="T:System.Web.Services.Discovery.ExcludePathInfo" />
    ///  objects.</returns>
    property ExcludePaths: TArray<DNExcludePathInfo> read get_ExcludePaths write set_ExcludePaths;
  end;

  TDNDynamicDiscoveryDocument = class(TDNGenericImport<DNDynamicDiscoveryDocumentClass, DNDynamicDiscoveryDocument>)
  public const
    ///<summary>Contains the dynamic discovery document namespace "urn:schemas-dynamicdiscovery:disco.2000-03-17". This field is constant.</summary>
   Namespace = 'urn:schemas-dynamicdiscovery:disco.2000-03-17';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNExcludePathInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC419DBB-B529-5BF6-A5FD-7B9DF06C9706}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.ExcludePathInfo" />
    ///  class. </summary>
    {class} function init: DNExcludePathInfo; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.ExcludePathInfo" />
    ///  class and specifies the file system path to exclude from searches. </summary>
    ///  <param name="path">The path to exclude from searches.</param>
    {class} function init(path: string): DNExcludePathInfo; overload;

  end;

  ///<summary>Represents a file system directory path that should not be searched for references to add to a Web services discovery document.</summary>
  [DNTypeName('System.Web.Services.Discovery.ExcludePathInfo')]
  DNExcludePathInfo = interface(DDN.mscorlib.DNObject)
  ['{885281C6-1D9E-3CFE-8AC4-5F4BCE453653}']
  { getters & setters } 

    function get_Path: string;
    procedure set_Path(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the file system directory path that should not be searched for references to add to a discovery document.</summary>
    ///<returns>The file system directory path that should be excluded from searches.</returns>
    property Path: string read get_Path write set_Path;
  end;

  TDNExcludePathInfo = class(TDNGenericImport<DNExcludePathInfoClass, DNExcludePathInfo>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscovery_SoapBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{23A56EDF-D428-54C2-9C3A-AD60B2D2E6CD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Discovery.SoapBinding" />
    ///  class. </summary>
    {class} function init: DNDiscovery_SoapBinding;

  end;

  ///<summary>Represents a SOAP binding in a discovery document. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Discovery.SoapBinding')]
  DNDiscovery_SoapBinding = interface(DDN.mscorlib.DNObject)
  ['{24E235B1-486C-319F-BA46-5CE77DDE6828}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_Binding: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Binding(value: DDN.System.Xml.DNXmlQualifiedName);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the URL of the XML Web service implementing the SOAP binding.</summary>
    ///<returns>The URL of the XML Web service implementing the SOAP binding. The default value is <see cref="F:System.String.Empty" />
    ///  .</returns>
    property Address: string read get_Address write set_Address;
    ///<summary>Gets or sets the XML qualified name of the SOAP binding implemented by the XML Web service.</summary>
    ///<returns>The <see cref="T:System.Xml.XmlQualifiedName" />
    ///  of the SOAP binding implemented by the XML Web service.</returns>
    property Binding: DDN.System.Xml.DNXmlQualifiedName read get_Binding write set_Binding;
  end;

  TDNDiscovery_SoapBinding = class(TDNGenericImport<DNDiscovery_SoapBindingClass, DNDiscovery_SoapBinding>)
  public const
    ///<summary>The XML namespace of the element that specifies a SOAP binding within a discovery document.</summary>
   Namespace = 'http://schemas.xmlsoap.org/disco/soap/';
  end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNLogicalMethodInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6697680C-9086-5CEE-8A60-A481DEE3F45C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  class with the <see cref="T:System.Reflection.MethodInfo" />
    ///  passed in.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo" />
    ///  to initialize the properties of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  common to the <see cref="T:System.Reflection.MethodInfo" />
    ///  . </param>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Reflection.MethodBase.IsStatic" />
    ///  property of the <paramref name="methodInfo" />
    ///  parameter is <see langword="true" />
    ///  .-or- The <see cref="M:System.Reflection.MethodBase.GetParameters" />
    ///  method of the <paramref name="methodInfo" />
    ///  parameter does not contain all the parameters required by the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  . </exception>
    {class} function init(methodInfo: DDN.mscorlib.DNMethodInfo): DNLogicalMethodInfo;

  { static methods } 

    ///<summary>Given an array of <see cref="T:System.Reflection.MethodInfo" />
    ///  that can contain information about both asynchronous and synchronous methods, creates an array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///  <param name="methodInfos">An array of <see cref="T:System.Reflection.MethodInfo" />
    ///  representing the asynchronous and synchronous methods for which to create <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  objects. </param>
    ///<returns>An array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  , representing the methods within <paramref name="methodInfos" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">A <see langword="Begin" />
    ///  asynchronous method is included in <paramref name="methodInfos" />
    ///  without a corresponding <see langword="End" />
    ///  method. </exception>
    {class} function Create(methodInfos: TArray<DDN.mscorlib.DNMethodInfo>): TArray<DNLogicalMethodInfo>; overload;
    ///<summary>Given an array of <see cref="T:System.Reflection.MethodInfo" />
    ///  , where the returned array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  can be restricted to only asynchronous or synchronous methods, creates an array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///  <param name="methodInfos">An array of <see cref="T:System.Reflection.MethodInfo" />
    ///  representing the asynchronous and synchronous methods for which to create <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  objects. </param>
    ///  <param name="types">A bitwise combination of the <see cref="T:System.Web.Services.Protocols.LogicalMethodTypes" />
    ///  values. Determines whether just asynchronous or synchronous methods or both are included in the returned array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  . </param>
    ///<returns>An array of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  , representing the methods within <paramref name="methodInfos" />
    ///  , filtered by the value of <paramref name="types" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">A <see langword="Begin" />
    ///  asynchronous method is included in <paramref name="methodInfos" />
    ///  without a corresponding <see langword="End" />
    ///  method. </exception>
    {class} function Create(methodInfos: TArray<DDN.mscorlib.DNMethodInfo>; types: DNLogicalMethodTypes): TArray<DNLogicalMethodInfo>; overload;
    ///<summary>Returns a value indicating whether the method passed in represents a <see langword="Begin" />
    ///  method of an asynchronous invocation.</summary>
    ///  <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo" />
    ///  that might be a <see langword="Begin" />
    ///  method of an asynchronous invocation. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="methodInfo" />
    ///  parameter is a <see langword="Begin" />
    ///  method of an asynchronous invocation; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsBeginMethod(methodInfo: DDN.mscorlib.DNMethodInfo): Boolean;
    ///<summary>Returns a value indicating whether the method passed in represents an <see langword="End" />
    ///  method of an asynchronous invocation.</summary>
    ///  <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo" />
    ///  that might be an <see langword="End" />
    ///  method of an asynchronous invocation. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="methodInfo" />
    ///  parameter is an <see langword="End" />
    ///  method of an asynchronous invocation; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsEndMethod(methodInfo: DDN.mscorlib.DNMethodInfo): Boolean;

  end;

  ///<summary>Represents the attributes and metadata for an XML Web service method. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.LogicalMethodInfo')]
  DNLogicalMethodInfo = interface(DDN.mscorlib.DNObject)
  ['{4DA24A3C-2F47-3D15-B269-2E8CF4194796}']
  { getters & setters } 

    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_AsyncResultParameter: DDN.mscorlib.DNParameterInfo;
    function get_AsyncCallbackParameter: DDN.mscorlib.DNParameterInfo;
    function get_AsyncStateParameter: DDN.mscorlib.DNParameterInfo;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_IsVoid: Boolean;
    function get_IsAsync: Boolean;
    function get_InParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_OutParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_Parameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_CustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnTypeCustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider;
    function get_MethodInfo: DDN.mscorlib.DNMethodInfo;
    function get_BeginMethodInfo: DDN.mscorlib.DNMethodInfo;
    function get_EndMethodInfo: DDN.mscorlib.DNMethodInfo;

  { methods } 

    ///<summary>Returns a string that represents the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</returns>
    function ToString: string;
    ///<summary>Returns the first custom attribute applied to the type, if any custom attributes are applied to the type.</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to which the custom attributes are applied. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  containing the first custom attribute applied to the <paramref name="type" />
    ///  parameter.</returns>
    ///<exception cref="T:System.TypeLoadException">The custom attribute type can not be loaded. </exception>
    function GetCustomAttribute(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>Invokes the method represented by the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///  <param name="target">The instance of the <see cref="T:System.Object" />
    ///  to invoke the method. </param>
    ///  <param name="values">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, the <paramref name="values" />
    ///  parameter should be <see langword="null" />
    ///  . </param>
    ///<returns>An array of type <see cref="T:System.Object" />
    ///  representing the return value and out parameters of the invoked method.</returns>
    ///<exception cref="T:System.Reflection.TargetException">The <paramref name="target" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException">The number, type, and order of parameters in the <paramref name="values" />
    ///  parameter do not match the signature of the invoked method. </exception><exception cref="T:System.MemberAccessException">The caller does not have permission to invoke the method. </exception><exception cref="T:System.Reflection.TargetInvocationException">The invoked method throws an exception. </exception>
    function Invoke(target: DDN.mscorlib.DNObject; values: TArray<DDN.mscorlib.DNObject>): TArray<DDN.mscorlib.DNObject>;
    ///<summary>Begins an asynchronous invocation of the method represented by this <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///  <param name="target">The instance of the <see cref="T:System.Object" />
    ///  on which to invoke the method on. </param>
    ///  <param name="values">An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, <paramref name="values" />
    ///  should be <see langword="null" />
    ///  . </param>
    ///  <param name="callback">The delegate to call when the asynchronous invoke is complete. If <paramref name="callback" />
    ///  is <see langword="null" />
    ///  , the delegate is not called. </param>
    ///  <param name="asyncState">State information that is passed on to the delegate. </param>
    ///<returns>An <see cref="T:System.IAsyncResult" />
    ///  which is passed to <see cref="M:System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)" />
    ///  to obtain the return values from the remote method call.</returns>
    ///<exception cref="T:System.Reflection.TargetException">The <paramref name="target" />
    ///  parameteris <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException">The number, type, and order of parameters in <paramref name="values" />
    ///  do not match the signature of the invoked method. </exception><exception cref="T:System.MemberAccessException">The caller does not have permission to invoke the method. </exception>
    function BeginInvoke(target: DDN.mscorlib.DNObject; values: TArray<DDN.mscorlib.DNObject>; callback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>Ends an asynchronous invocation of the method represented by the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///  <param name="target">The instance of the <see cref="T:System.Object" />
    ///  on which to invoke the method. </param>
    ///  <param name="asyncResult">The <see cref="T:System.IAsyncResult" />
    ///  returned from <see cref="M:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)" />
    ///  . </param>
    ///<returns>An array of objects containing the return value and any by-reference or out parameters of the derived class method.</returns>
    ///<exception cref="T:System.Reflection.TargetException">The <paramref name="target" />
    ///  parameter is <see langword="null" />
    ///  . </exception><exception cref="T:System.MemberAccessException">The caller does not have permission to invoke the method. </exception><exception cref="T:System.Reflection.TargetInvocationException">The invoked method throws an exception. </exception>
    function EndInvoke(target: DDN.mscorlib.DNObject; asyncResult: DDN.mscorlib.DNIAsyncResult): TArray<DDN.mscorlib.DNObject>;
    ///<summary>Returns the custom attributes applied to the specified type.</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to which the custom attributes are applied. </param>
    ///<returns>An array of <see cref="T:System.Object" />
    ///  containing the custom attributes applied to <paramref name="type" />
    ///  .</returns>
    ///<exception cref="T:System.TypeLoadException">The custom attribute type can not be loaded. </exception>
    function GetCustomAttributes(&type: DDN.mscorlib.DNType): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the class that declares the method represented by the current <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  for the class declaring the method represented by the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>Gets the name of the method represented by this <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///<returns>The name of the method represented by this <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</returns>
    property Name: string read get_Name;
    ///<summary>Gets the return value of a <see langword="Begin" />
    ///  asynchronous method invocation.</summary>
    ///<returns>A <see cref="T:System.Reflection.ParameterInfo" />
    ///  representing the <see cref="T:System.IAsyncResult" />
    ///  returned from a <see langword="Begin" />
    ///  asynchronous method invocation.</returns>
    property AsyncResultParameter: DDN.mscorlib.DNParameterInfo read get_AsyncResultParameter;
    ///<summary>Gets the parameter information for the <paramref name="AsyncCallback" />
    ///  parameter of a Begin method in an asynchronous invocation.</summary>
    ///<returns>A <see cref="T:System.Reflection.ParameterInfo" />
    ///  representing the <paramref name="AsyncCallback" />
    ///  parameter of a <see langword="Begin" />
    ///  asynchronous method invocation.</returns>
    property AsyncCallbackParameter: DDN.mscorlib.DNParameterInfo read get_AsyncCallbackParameter;
    ///<summary>Gets the parameter information for the <paramref name="AsyncState" />
    ///  parameter of a <see langword="Begin" />
    ///  method in an asynchronous invocation.</summary>
    ///<returns>A <see cref="T:System.Reflection.ParameterInfo" />
    ///  representing the <paramref name="AsyncState" />
    ///  parameter of a <see langword="Begin" />
    ///  method in an asynchronous invocation.</returns>
    property AsyncStateParameter: DDN.mscorlib.DNParameterInfo read get_AsyncStateParameter;
    ///<summary>Gets the return type of this method.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  returned by this method.</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>Gets a value indicating whether the return type for the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  is <see langword="void" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the return type is void; otherwise, <see langword="false" />
    ///  .</returns>
    property IsVoid: Boolean read get_IsVoid;
    ///<summary>Gets a value indicating whether the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  is invoked asynchronously.</summary>
    ///<returns><see langword="true" />
    ///  if the method is invoked asynchronously; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAsync: Boolean read get_IsAsync;
    ///<summary>Gets the parameters passed into the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</summary>
    ///<returns>An array of type <see cref="T:System.Reflection.ParameterInfo" />
    ///  containing the parameters passed into the method represented by the instance of <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  .</returns>
    property InParameters: TArray<DDN.mscorlib.DNParameterInfo> read get_InParameters;
    ///<summary>Gets the out parameters for the method.</summary>
    ///<returns>An array of <see cref="T:System.Reflection.ParameterInfo" />
    ///  representing the out parameters for the method, in order.</returns>
    property OutParameters: TArray<DDN.mscorlib.DNParameterInfo> read get_OutParameters;
    ///<summary>Gets the parameters for the method.</summary>
    ///<returns>An array of <see cref="T:System.Reflection.ParameterInfo" />
    ///  representing the parameters for the method.</returns>
    property Parameters: TArray<DDN.mscorlib.DNParameterInfo> read get_Parameters;
    ///<summary>Gets the custom attributes applied to the method.</summary>
    ///<returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" />
    ///  representing the custom attributes for the method.</returns>
    property CustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider read get_CustomAttributeProvider;
    ///<summary>Gets the custom attributes for the return type.</summary>
    ///<returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" />
    ///  representing the custom attributes for the return type.</returns>
    property ReturnTypeCustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributeProvider;
    ///<summary>Gets the attributes and metadata for a synchronous method.</summary>
    ///<returns>A <see cref="T:System.Reflection.MethodInfo" />
    ///  representing the attributes and metadata for a method. If <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync" />
    ///  is <see langword="true" />
    ///  , then the value of this property is <see langword="null" />
    ///  .</returns>
    property MethodInfo: DDN.mscorlib.DNMethodInfo read get_MethodInfo;
    ///<summary>Gets the attributes and metadata for a <see langword="Begin" />
    ///  method in an asynchronous invocation.</summary>
    ///<returns>A <see cref="T:System.Reflection.MethodInfo" />
    ///  representing the attributes and metadata for a <see langword="Begin" />
    ///  asynchronous method invocation.</returns>
    property BeginMethodInfo: DDN.mscorlib.DNMethodInfo read get_BeginMethodInfo;
    ///<summary>Gets the attributes and metadata for an <see langword="End" />
    ///  method of an asynchronous invocation to a method.</summary>
    ///<returns>A <see cref="T:System.Reflection.MethodInfo" />
    ///  representing the attributes and metadata for an <see langword="End" />
    ///  asynchronous method invocation.</returns>
    property EndMethodInfo: DDN.mscorlib.DNMethodInfo read get_EndMethodInfo;
  end;

  TDNLogicalMethodInfo = class(TDNGenericImport<DNLogicalMethodInfoClass, DNLogicalMethodInfo>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeFormatterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F62E823-8C56-5DC2-B774-67E0B97696D1}']
  { static methods } 

    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="type">The Type, derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  ,- for which an initializer is obtained.</param>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>A <see cref="T:System.Object" />
    ///  object that contains the initializer for the specified method.</returns>
    {class} function GetInitializer(&type: DDN.mscorlib.DNType; methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>Returns an array of initializer objects corresponding to an input array of method definitions for a specified class derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  .</summary>
    ///  <param name="type">The Type, derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  , for which initializers are obtained.</param>
    ///  <param name="methodInfos">An array of type <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web methods for which the initializers are obtained.</param>
    ///<returns>An array of initializer objects corresponding to the input array of method definitions for a specified class derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  .</returns>
    {class} function GetInitializers(&type: DDN.mscorlib.DNType; methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>Creates and initializes an instance of a concrete class derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  .</summary>
    ///  <param name="type">The Type, derived from <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  , of which to create an instance.</param>
    ///  <param name="initializer">An object used to initialize the instance obtained earlier through the derived class's implementation of the <see cref="M:System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
    ///  method.</param>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.MimeFormatter" />
    ///  object.</returns>
    {class} function CreateInstance(&type: DDN.mscorlib.DNType; initializer: DDN.mscorlib.DNObject): DNMimeFormatter;

  end;

  ///<summary>Provides an abstract base class for all readers and writers for Web services and clients implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeFormatter')]
  DNMimeFormatter = interface(DDN.mscorlib.DNObject)
  ['{284D5254-6A9F-3E69-AC8C-A85AD71E2256}']
  { methods } 

    ///<summary>When overridden in a derived class, returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, initializes an instance.</summary>
    ///  <param name="initializer">An object of a type appropriate to the particular class that is implementing the method. </param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, returns an array of initializer objects corresponding to an input array of method definitions.</summary>
    ///  <param name="methodInfos">An array of Web methods where, for each method, the object of the corresponding index in the returned initializer array is obtained.</param>
    ///<returns>An array of initializer objects corresponding to the input array of method definitions.</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeFormatter = class(TDNGenericImport<DNMimeFormatterClass, DNMimeFormatter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeParameterReaderClass = interface(DNMimeFormatterClass)
  ['{46F06763-887E-5DC1-9919-1311E61603D1}']
  end;

  ///<summary>Provides a common base implementation for readers of request parameters for Web services implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeParameterReader')]
  DNMimeParameterReader = interface(DNMimeFormatter)
  ['{80787D1F-6A15-38FF-A164-F73A920F7687}']
  { methods } 

    ///<summary>When overridden in a derived class, deserializes an HTTP request into an array of Web method parameter values.</summary>
    ///  <param name="request">An <see cref="T:System.Web.HttpRequest" />
    ///  object containing the input message for an operation.</param>
    ///<returns>An array of <see cref="T:System.Object" />
    ///  objects that contains the deserialized HTTP request.</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    ///<summary>When overridden in a derived class, returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>When overridden in a derived class, initializes an instance.</summary>
    ///  <param name="initializer">An object of a type appropriate to the particular class that is implementing the method. </param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, returns an array of initializer objects corresponding to an input array of method definitions.</summary>
    ///  <param name="methodInfos">An array of Web methods where, for each method, the object of the corresponding index in the returned initializer array is obtained.</param>
    ///<returns>An array of initializer objects corresponding to the input array of method definitions.</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeParameterReader = class(TDNGenericImport<DNMimeParameterReaderClass, DNMimeParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNValueCollectionParameterReaderClass = interface(DNMimeParameterReaderClass)
  ['{3A5E5934-CB3B-5262-BC22-794D576173C6}']
  { static methods } 

    ///<summary>Determines whether a method definition's parameter definitions are supported by the <see cref="T:System.Web.Services.Protocols.ValueCollectionParameterReader" />
    ///  class.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the method to check.</param>
    ///<returns><see langword="true" />
    ///  if a method's parameter definitions are supported by the reader; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsSupported(methodInfo: DNLogicalMethodInfo): Boolean; overload;
    ///<summary>Determines whether a particular parameter type is supported by the <see cref="T:System.Web.Services.Protocols.ValueCollectionParameterReader" />
    ///  class.</summary>
    ///  <param name="paramInfo">A <see cref="T:System.Reflection.ParameterInfo" />
    ///  that specifies the parameter to check.</param>
    ///<returns><see langword="true" />
    ///  if a method's parameter definitions are supported by the reader; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsSupported(paramInfo: DDN.mscorlib.DNParameterInfo): Boolean; overload;

  end;

  ///<summary>Serves as a base class for readers of incoming request parameters for Web services implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.ValueCollectionParameterReader')]
  DNValueCollectionParameterReader = interface(DNMimeParameterReader)
  ['{87200DE8-D4C2-3885-99E0-FFCB1DF3DB65}']
  { methods } 

    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  representing the Web method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="o">A <see cref="T:System.Reflection.ParameterInfo" />
    ///  array, obtained through the <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  property of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  class.</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, deserializes an HTTP request into an array of Web method parameter values.</summary>
    ///  <param name="request">An <see cref="T:System.Web.HttpRequest" />
    ///  object containing the input message for an operation.</param>
    ///<returns>An array of <see cref="T:System.Object" />
    ///  objects that contains the deserialized HTTP request.</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValueCollectionParameterReader = class(TDNGenericImport<DNValueCollectionParameterReaderClass, DNValueCollectionParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHtmlFormParameterReaderClass = interface(DNValueCollectionParameterReaderClass)
  ['{2C51CF19-6C19-5F0A-9778-EDEA0395332D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HtmlFormParameterReader" />
    ///  class. </summary>
    {class} function init: DNHtmlFormParameterReader;

  end;

  ///<summary>Reads incoming request parameters for Web services implemented using HTTP, with name-value pairs encoded like an HTML form rather than as a SOAP message.</summary>
  [DNTypeName('System.Web.Services.Protocols.HtmlFormParameterReader')]
  DNHtmlFormParameterReader = interface(DNValueCollectionParameterReader)
  ['{256D6606-712B-3DFE-9177-AC34F15E59FD}']
  { methods } 

    ///<summary>Reads name-value pairs into Web method parameter values.</summary>
    ///  <param name="request">An <see cref="T:System.Web.HttpRequest" />
    ///  object containing HTML name-value pairs encoded in the body of an HTTP request.</param>
    ///<returns>An array of objects contain the name-value pairs.</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  representing the Web method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="o">A <see cref="T:System.Reflection.ParameterInfo" />
    ///  array, obtained through the <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  property of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  class.</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlFormParameterReader = class(TDNGenericImport<DNHtmlFormParameterReaderClass, DNHtmlFormParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlParameterReaderClass = interface(DNValueCollectionParameterReaderClass)
  ['{0B3401D9-C9B0-5BE7-9EA6-DD0F7A93D7A7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.UrlParameterReader" />
    ///  class. </summary>
    {class} function init: DNUrlParameterReader;

  end;

  ///<summary>Reads incoming request parameters for Web services implemented using HTTP with name-value pairs encoded in the URL's query string rather than as a SOAP message.</summary>
  [DNTypeName('System.Web.Services.Protocols.UrlParameterReader')]
  DNUrlParameterReader = interface(DNValueCollectionParameterReader)
  ['{FC6BB276-DA0C-36AA-9512-F376BAD96097}']
  { methods } 

    ///<summary>Reads name/value pairs encoded in the query string of an HTTP request into Web method parameter values.</summary>
    ///  <param name="request">A <see cref="T:System.Net.WebResponse" />
    ///  objectcontaining HTML URL-encoded name/value pairs.</param>
    ///<returns>An array of name/value pairs.</returns>
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  representing the Web method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="o">A <see cref="T:System.Reflection.ParameterInfo" />
    ///  array, obtained through the <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  property of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  class.</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUrlParameterReader = class(TDNGenericImport<DNUrlParameterReaderClass, DNUrlParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeParameterWriterClass = interface(DNMimeFormatterClass)
  ['{3124C45A-3F1F-5A60-AC5D-AE0DB23A1EE2}']
  end;

  ///<summary>Provides a common base implementation for writers of out-going request parameters for Web service clients implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeParameterWriter')]
  DNMimeParameterWriter = interface(DNMimeFormatter)
  ['{E46DD746-C6AB-3310-9D98-2A059777B025}']
  { getters & setters } 

    function get_UsesWriteRequest: Boolean;
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    ///<summary>When overridden in a derived class, modifies the outgoing HTTP request's Uniform Request Locator (URL).</summary>
    ///  <param name="url">The HTTP request's original Uniform Resource Locator (URL).</param>
    ///  <param name="parameters">The Web method parameter values to be added to the URL, if necessary.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the modified, outgoing HTTP request's Uniform Request Locator (URL).</returns>
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    ///<summary>When overridden in a derived class, initializes the out-going HTTP request.</summary>
    ///  <param name="request">The out-going request, where the <see cref="T:System.Net.WebRequest" />
    ///  class allows transport protocols besides HTTP.</param>
    ///  <param name="values">The Web method parameter values.</param>
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>When overridden in a derived class, serializes Web method parameter values into a stream representing the outgoing HTTP request body.</summary>
    ///  <param name="requestStream">An input stream for the outgoing HTTP request's body.</param>
    ///  <param name="values">The Web method parameter values.</param>
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>When overridden in a derived class, returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>When overridden in a derived class, initializes an instance.</summary>
    ///  <param name="initializer">An object of a type appropriate to the particular class that is implementing the method. </param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, returns an array of initializer objects corresponding to an input array of method definitions.</summary>
    ///  <param name="methodInfos">An array of Web methods where, for each method, the object of the corresponding index in the returned initializer array is obtained.</param>
    ///<returns>An array of initializer objects corresponding to the input array of method definitions.</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether Web method parameter values are serialized to the out-going HTTP request body.</summary>
    ///<returns><see langword="true" />
    ///  if the Web method parameter values are serialized to the out-going HTTP request body; otherwise <see langword="false" />
    ///  .</returns>
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
    ///<summary>Gets or sets the encoding used to write parameters to the HTTP request.</summary>
    ///<returns>The encoding used to write parameters to the HTTP request.</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
  end;

  TDNMimeParameterWriter = class(TDNGenericImport<DNMimeParameterWriterClass, DNMimeParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlEncodedParameterWriterClass = interface(DNMimeParameterWriterClass)
  ['{76340785-26B0-5E0A-8132-C99D869C54D7}']
  end;

  ///<summary>Provides URL encoding functionality for writers of out-going request parameters for Web service clients implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.UrlEncodedParameterWriter')]
  DNUrlEncodedParameterWriter = interface(DNMimeParameterWriter)
  ['{03DCFB9A-1903-314F-B141-F856A427BF70}']
  { getters & setters } 

    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_UsesWriteRequest: Boolean;

  { methods } 

    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="initializer">A <see cref="T:System.Reflection.ParameterInfo" />
    ///  array obtained through the <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  property of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  class.</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, modifies the outgoing HTTP request's Uniform Request Locator (URL).</summary>
    ///  <param name="url">The HTTP request's original Uniform Resource Locator (URL).</param>
    ///  <param name="parameters">The Web method parameter values to be added to the URL, if necessary.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the modified, outgoing HTTP request's Uniform Request Locator (URL).</returns>
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    ///<summary>When overridden in a derived class, initializes the out-going HTTP request.</summary>
    ///  <param name="request">The out-going request, where the <see cref="T:System.Net.WebRequest" />
    ///  class allows transport protocols besides HTTP.</param>
    ///  <param name="values">The Web method parameter values.</param>
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>When overridden in a derived class, serializes Web method parameter values into a stream representing the outgoing HTTP request body.</summary>
    ///  <param name="requestStream">An input stream for the outgoing HTTP request's body.</param>
    ///  <param name="values">The Web method parameter values.</param>
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the encoding used to write parameters to the HTTP request.</summary>
    ///<returns>The encoding used to write parameters to the HTTP request.</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    ///<summary>Gets a value that indicates whether Web method parameter values are serialized to the out-going HTTP request body.</summary>
    ///<returns><see langword="true" />
    ///  if the Web method parameter values are serialized to the out-going HTTP request body; otherwise <see langword="false" />
    ///  .</returns>
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
  end;

  TDNUrlEncodedParameterWriter = class(TDNGenericImport<DNUrlEncodedParameterWriterClass, DNUrlEncodedParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHtmlFormParameterWriterClass = interface(DNUrlEncodedParameterWriterClass)
  ['{48AA461E-801D-5DA2-822B-51FE8178E48A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.HtmlFormParameterWriter" />
    ///  class. </summary>
    {class} function init: DNHtmlFormParameterWriter;

  end;

  ///<summary>Writes outgoing request parameters for Web services implemented using HTTP with name-value pairs encoded like an HTML form rather than as a SOAP message.</summary>
  [DNTypeName('System.Web.Services.Protocols.HtmlFormParameterWriter')]
  DNHtmlFormParameterWriter = interface(DNUrlEncodedParameterWriter)
  ['{D1AEDAAC-FBC4-3DFF-A672-E2002E2CCF56}']
  { getters & setters } 

    function get_UsesWriteRequest: Boolean;
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    ///<summary>Serializes Web method parameter values into a stream representing the outgoing HTTP request body.</summary>
    ///  <param name="requestStream">An input stream for the outgoing HTTP request's body.</param>
    ///  <param name="values">The Web method parameter values.</param>
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>Initializes the outgoing HTTP request. </summary>
    ///  <param name="request">The outgoing request.</param>
    ///  <param name="values">The Web method parameter values.</param>
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="initializer">A <see cref="T:System.Reflection.ParameterInfo" />
    ///  array obtained through the <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  property of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  class.</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether Web method parameter values are serialized to the outgoing HTTP request body.</summary>
    ///<returns><see langword="true" />
    ///  to indicate that the Web method parameters are serialized. This property always returns <see langword="true" />
    ///  .</returns>
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
    ///<summary>Gets or sets the encoding used to write parameters to the HTTP request.</summary>
    ///<returns>The encoding used to write parameters to the HTTP request.</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
  end;

  TDNHtmlFormParameterWriter = class(TDNGenericImport<DNHtmlFormParameterWriterClass, DNHtmlFormParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlParameterWriterClass = interface(DNUrlEncodedParameterWriterClass)
  ['{B05F3615-F23B-591E-87E3-F562E2D19DF2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.UrlParameterWriter" />
    ///  class.</summary>
    {class} function init: DNUrlParameterWriter;

  end;

  ///<summary>Writes out-going request parameters for Web services implemented using HTTP with name-value pairs encoded in the URL's query string rather than as a SOAP message.</summary>
  [DNTypeName('System.Web.Services.Protocols.UrlParameterWriter')]
  DNUrlParameterWriter = interface(DNUrlEncodedParameterWriter)
  ['{FA412673-0615-315F-A795-7FE17A11DCE2}']
  { getters & setters } 

    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_UsesWriteRequest: Boolean;

  { methods } 

    ///<summary>Writes Web method parameter values to the query string of an HTTP request.</summary>
    ///  <param name="url">The HTTP request's original URL.</param>
    ///  <param name="parameters">The Web method parameter values to be added to the URL, if necessary.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  object that contains the query string and the parameter values.</returns>
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="initializer">A <see cref="T:System.Reflection.ParameterInfo" />
    ///  array obtained through the <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
    ///  property of the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  class.</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the encoding used to write parameters to the HTTP request.</summary>
    ///<returns>The encoding used to write parameters to the HTTP request.</returns>
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
  end;

  TDNUrlParameterWriter = class(TDNGenericImport<DNUrlParameterWriterClass, DNUrlParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeReturnReaderClass = interface(DNMimeFormatterClass)
  ['{B324ABCD-6677-5F9C-9878-CA7BBA341037}']
  end;

  ///<summary>Provides a common base implementation for readers of incoming response return values for Web service clients implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.MimeReturnReader')]
  DNMimeReturnReader = interface(DNMimeFormatter)
  ['{E88BB6D4-A595-3BFA-A2F1-359DFB50A96F}']
  { methods } 

    ///<summary>When overridden in a derived class, deserializes an HTTP response into a Web method return value.</summary>
    ///  <param name="response">A <see cref="T:System.Net.WebResponse" />
    ///  object containing the output message for an operation.</param>
    ///  <param name="responseStream">A <see cref="T:System.IO.Stream" />
    ///  whose content is the body of the HTTP response represented by the <see cref="T:System.Net.WebResponse" />
    ///  parameter.</param>
    ///<returns>An HTTP response deserialized into a Web method return value.</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    ///<summary>When overridden in a derived class, returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>When overridden in a derived class, initializes an instance.</summary>
    ///  <param name="initializer">An object of a type appropriate to the particular class that is implementing the method. </param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, returns an array of initializer objects corresponding to an input array of method definitions.</summary>
    ///  <param name="methodInfos">An array of Web methods where, for each method, the object of the corresponding index in the returned initializer array is obtained.</param>
    ///<returns>An array of initializer objects corresponding to the input array of method definitions.</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeReturnReader = class(TDNGenericImport<DNMimeReturnReaderClass, DNMimeReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNAnyReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{A77D50DB-AE0D-5FB4-9181-E6596DD60EB2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.AnyReturnReader" />
    ///  class. </summary>
    {class} function init: DNAnyReturnReader;

  end;

  ///<summary>Provides a minimal reader of incoming response return values for Web service clients implemented using HTTP but without SOAP. </summary>
  [DNTypeName('System.Web.Services.Protocols.AnyReturnReader')]
  DNAnyReturnReader = interface(DNMimeReturnReader)
  ['{002AFC50-3974-36A8-B720-411DEEBB7896}']
  { methods } 

    ///<summary>Initializes an instance of the <see cref="T:System.Web.Services.Protocols.AnyReturnReader" />
    ///  class.</summary>
    ///  <param name="o">Another instance of the <see cref="T:System.Web.Services.Protocols.AnyReturnReader" />
    ///  class, on which the <see cref="M:System.Web.Services.Protocols.AnyReturnReader.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
    ///  method was previously called.</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>Returns the parameter passed to the <see cref="M:System.Web.Services.Protocols.AnyReturnReader.Initialize(System.Object)" />
    ///  method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that indicates the Web method for which the initializer is obtained.</param>
    ///<returns>The parameter passed to the <see cref="M:System.Web.Services.Protocols.AnyReturnReader.Initialize(System.Object)" />
    ///  method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Returns the input HTTP response stream.</summary>
    ///  <param name="response">A representation of the HTTP response sent by a Web service, containing the output message for an operation.</param>
    ///  <param name="responseStream">An output stream whose content is the body of the HTTP response represented by the <paramref name="response" />
    ///  parameter.</param>
    ///<returns>The input HTTP response stream.</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAnyReturnReader = class(TDNGenericImport<DNAnyReturnReaderClass, DNAnyReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNNopReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{B503C687-89A0-5017-89B8-4CBC9F3E1104}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.NopReturnReader" />
    ///  class. </summary>
    {class} function init: DNNopReturnReader;

  end;

  ///<summary>Serves as a non-acting reader of incoming response return values for Web service clients implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.NopReturnReader')]
  DNNopReturnReader = interface(DNMimeReturnReader)
  ['{40607C71-AC71-37B7-BDE9-5EFAFC6AADD9}']
  { methods } 

    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="initializer">Another instance of the <see cref="T:System.Web.Services.Protocols.NopReturnReader" />
    ///  class, on which the <see cref="M:System.Web.Services.Protocols.NopReturnReader.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)" />
    ///  method was previously called.</param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>Returns <see langword="null" />
    ///  instead of deserializing the HTTP response stream into a Web method return value.</summary>
    ///  <param name="response">A <see cref="T:System.Net.WebResponse" />
    ///  object  containing the output message for an operation.</param>
    ///  <param name="responseStream">A <see cref="T:System.IO.Stream" />
    ///  whose content is the body of the HTTP response represented by the <paramref name="response" />
    ///  parameter.</param>
    ///<returns><see langword="null" />
    ///  .</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNopReturnReader = class(TDNGenericImport<DNNopReturnReaderClass, DNNopReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNTextReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{4C3083F6-8F2D-5655-B5A0-7BCAEEBFC0BB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.TextReturnReader" />
    ///  class. </summary>
    {class} function init: DNTextReturnReader;

  end;

  ///<summary>Reads return values from HTTP response text for Web service clients implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.TextReturnReader')]
  DNTextReturnReader = interface(DNMimeReturnReader)
  ['{6ED79D6B-C9E5-3194-9A05-D5E9EB9D039B}']
  { methods } 

    ///<summary>Initializes an instance.</summary>
    ///  <param name="o">A <see cref="T:System.Web.Services.Protocols.PatternMatcher" />
    ///  object for the return type of the Web method being invoked.</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An initializer for the specified method</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Parses text contained in the HTTP response.</summary>
    ///  <param name="response">A <see cref="T:System.Net.WebResponse" />
    ///  object  containing the output message for an operation.</param>
    ///  <param name="responseStream">A <see cref="T:System.IO.Stream" />
    ///  whose content is the body of the HTTP response represented by the <paramref name="response" />
    ///  parameter.</param>
    ///<returns>An object containing the deserialized Web method return value.</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextReturnReader = class(TDNGenericImport<DNTextReturnReaderClass, DNTextReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNXmlReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{9DEC7BBB-57A2-555E-A993-09280FA69043}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.XmlReturnReader" />
    ///  class. </summary>
    {class} function init: DNXmlReturnReader;

  end;

  ///<summary>Reads return values from XML that is encoded in the body of incoming responses for Web service clients implemented using HTTP but without SOAP.</summary>
  [DNTypeName('System.Web.Services.Protocols.XmlReturnReader')]
  DNXmlReturnReader = interface(DNMimeReturnReader)
  ['{03A9DC5C-2178-3937-BA29-99777C9BBB8B}']
  { methods } 

    ///<summary>Returns an array of initializer objects corresponding to an input array of method definitions.</summary>
    ///  <param name="methodInfos">An array of type <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web methods for which the initializers are obtained.</param>
    ///<returns>An array of initializer objects corresponding to an input array of method definitions.</returns>
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    ///<summary>Initializes an instance.</summary>
    ///  <param name="o">An <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  for the return type of the Web method being invoked.</param>
    procedure Initialize(o: DDN.mscorlib.DNObject);
    ///<summary>Returns an initializer for the specified method.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  that specifies the Web method for which the initializer is obtained.</param>
    ///<returns>An initializer for the specified method.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    ///<summary>Gets a return value deserialized from an XML document contained in the HTTP response.</summary>
    ///  <param name="response">An <see cref="T:System.Web.HttpRequest" />
    ///  object containing the output message for an operation.</param>
    ///  <param name="responseStream">A <see cref="T:System.IO.Stream" />
    ///  whose content is the body of the HTTP response represented by the <paramref name="response" />
    ///  parameter.</param>
    ///<returns>A return value deserialized from an XML document contained in the HTTP response.</returns>
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlReturnReader = class(TDNGenericImport<DNXmlReturnReaderClass, DNXmlReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNPatternMatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A22DCBB-41E5-5EB2-B18D-62DDFB5D9CFB}']
  { constructors } 

    ///<summary>Creates a <see cref="T:System.Web.Services.Protocols.PatternMatcher" />
    ///  instance based on the input type.</summary>
    ///  <param name="type">A <see cref="T:System.Type" />
    ///  that specifies the return type for a Web method.</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNPatternMatcher;

  end;

  ///<summary>Searches HTTP response text for return values for Web service clients.</summary>
  [DNTypeName('System.Web.Services.Protocols.PatternMatcher')]
  DNPatternMatcher = interface(DDN.mscorlib.DNObject)
  ['{CA3D0A00-420E-3691-AD3A-BCF0FAD4A23B}']
  { methods } 

    ///<summary>Searches a text input to deserialize an object representing a Web method return value.</summary>
    ///  <param name="text">The text to search, which is the body of the HTTP response.</param>
    ///<returns>An object representing a Web method return value.</returns>
    function Match(text: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPatternMatcher = class(TDNGenericImport<DNPatternMatcherClass, DNPatternMatcher>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerProtocolClass = interface(DDN.mscorlib.DNObjectClass)
  ['{913CCBD7-5C79-59B9-AE0C-A08C064B1E93}']
  end;

  ///<summary>The .NET Framework uses classes that are derived from the <see cref="T:System.Web.Services.Protocols.ServerProtocol" />
  ///  class to process XML Web service requests.</summary>
  [DNTypeName('System.Web.Services.Protocols.ServerProtocol')]
  DNServerProtocol = interface(DDN.mscorlib.DNObject)
  ['{CC7803E5-1458-378B-890B-3F58B094C1F0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerProtocol = class(TDNGenericImport<DNServerProtocolClass, DNServerProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerProtocolClass = interface(DNServerProtocolClass)
  ['{EA846EA3-425E-5093-B85A-1BDF73873A50}']
  end;

  ///<summary>The .NET Framework creates an instance of the <see cref="T:System.Web.Services.Protocols.SoapServerProtocol" />
  ///  class to process XML Web service requests.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerProtocol')]
  DNSoapServerProtocol = interface(DNServerProtocol)
  ['{B1994DE6-F115-332B-8C69-53742C002F1B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerProtocol = class(TDNGenericImport<DNSoapServerProtocolClass, DNSoapServerProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerProtocolFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54FF517C-B605-5D38-91AF-F542CF662DAF}']
  end;

  ///<summary>The .NET Framework uses classes that are derived from the <see cref="T:System.Web.Services.Protocols.ServerProtocolFactory" />
  ///  class to process XML Web service requests.</summary>
  [DNTypeName('System.Web.Services.Protocols.ServerProtocolFactory')]
  DNServerProtocolFactory = interface(DDN.mscorlib.DNObject)
  ['{6C6E52FC-5999-3C7A-85C9-3E799FF8DAE4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerProtocolFactory = class(TDNGenericImport<DNServerProtocolFactoryClass, DNServerProtocolFactory>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerProtocolFactoryClass = interface(DNServerProtocolFactoryClass)
  ['{B08F4FC3-91FE-5C37-B622-BECC7F9096F0}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Web.Services.Protocols.SoapServerProtocolFactory" />
    ///  .</summary>
    {class} function init: DNSoapServerProtocolFactory;

  end;

  ///<summary>The .NET Framework creates an instance of the <see cref="T:System.Web.Services.Protocols.SoapServerProtocolFactory" />
  ///  class to process XML Web service requests.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerProtocolFactory')]
  DNSoapServerProtocolFactory = interface(DNServerProtocolFactory)
  ['{E6BAE3D2-681A-390B-9EC2-507A5BD7D5FE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerProtocolFactory = class(TDNGenericImport<DNSoapServerProtocolFactoryClass, DNSoapServerProtocolFactory>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F044A3B-0A87-58E1-BF23-33D380E85709}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Web.Services.Protocols.ServerType" />
    ///  .</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  that exposes the XML Web service.</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNServerType;

  end;

  ///<summary>The .NET Framework uses the <see cref="T:System.Web.Services.Protocols.ServerType" />
  ///  class to process XML Web service requests.</summary>
  [DNTypeName('System.Web.Services.Protocols.ServerType')]
  DNServerType = interface(DDN.mscorlib.DNObject)
  ['{AAE43349-2E66-3D4C-A1F2-D1EEF093D513}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerType = class(TDNGenericImport<DNServerTypeClass, DNServerType>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerTypeClass = interface(DNServerTypeClass)
  ['{A2C3CA33-D768-5592-A9C1-00E3690716CA}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapServerType" />
    ///  class.</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  on which this XML Web service is based.</param>
    ///  <param name="protocolsSupported">A <see cref="T:System.Web.Services.Configuration.WebServiceProtocols" />
    ///  value that specifies the transmission protocols that are used to decrypt data sent in the XML Web service request.</param>
    {class} function init(&type: DDN.mscorlib.DNType; protocolsSupported: DNWebServiceProtocols): DNSoapServerType;

  end;

  ///<summary>The <see cref="T:System.Web.Services.Protocols.SoapServerType" />
  ///  class represents the type on which the XML Web service is based.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerType')]
  DNSoapServerType = interface(DNServerType)
  ['{63B909EE-EA6C-31F0-ABA0-2A69FC094189}']
  { getters & setters } 

    function get_ServiceNamespace: string;
    function get_ServiceDefaultIsEncoded: Boolean;
    function get_ServiceRoutingOnSoapAction: Boolean;

  { methods } 

    ///<summary>Returns the <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  associated with the specified key.</summary>
    ///  <param name="key">The key associated with the desired <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  .</param>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  associated with the specified key.</returns>
    function GetMethod(key: DDN.mscorlib.DNObject): DNSoapServerMethod;
    ///<summary>Returns the duplicate <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  associated with the specified key.</summary>
    ///  <param name="key">The key associated with the desired duplicate <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  .</param>
    ///<returns>The duplicate <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  associated with the specified key.</returns>
    function GetDuplicateMethod(key: DDN.mscorlib.DNObject): DNSoapServerMethod;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.String" />
    ///  that contains the namespace to which this XML Web service belongs.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the namespace to which this XML Web service belongs.</returns>
    property ServiceNamespace: string read get_ServiceNamespace;
    ///<summary>Returns a <see cref="T:System.Boolean" />
    ///  that indicates whether SOAP data transmissions sent to and from this XML Web service are encoded by default.</summary>
    ///<returns><see langword="true" />
    ///  if SOAP data transmissions sent to and from this XML Web service are encoded by default; otherwise, <see langword="false" />
    ///  .</returns>
    property ServiceDefaultIsEncoded: Boolean read get_ServiceDefaultIsEncoded;
    ///<summary>Returns a <see cref="T:System.Boolean" />
    ///  that indicates whether SOAP messages that are routed to this XML Web service are routed based on the <see langword="SOAPAction" />
    ///  HTTP header.</summary>
    ///<returns><see langword="true" />
    ///  if SOAP messages that are routed to this XML Web service are routed based on the <see langword="SOAPAction" />
    ///  HTTP header; otherwise, <see langword="false" />
    ///  .</returns>
    property ServiceRoutingOnSoapAction: Boolean read get_ServiceRoutingOnSoapAction;
  end;

  TDNSoapServerType = class(TDNGenericImport<DNSoapServerTypeClass, DNSoapServerType>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoap12FaultCodesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7184267-0167-5DBC-A49C-124DC0455072}']
  { static fields getter & setter } 

   function __fakeFieldGet_ReceiverFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_SenderFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_DataEncodingUnknownFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_RpcProcedureNotPresentFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_RpcBadArgumentsFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_EncodingMissingIdFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_EncodingUntypedValueFaultCode: DDN.System.Xml.DNXmlQualifiedName;

  { static fields } 

    ///<summary>Represents the SOAP version 1.2 <see langword="Receiver" />
    ///  fault code indicating an error occurred during the processing of a client call on the server due to a problem with the recipient.</summary>
    {class} property ReceiverFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ReceiverFaultCode;
    ///<summary>Represents the SOAP version 1.2 <see langword="Sender" />
    ///  fault code indicating a client call was not formatted correctly or did not contain the appropriate information.</summary>
    {class} property SenderFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_SenderFaultCode;
    ///<summary>Represents the SOAP version 1.2 <see langword="VersionMismatch" />
    ///  fault code indicating the XML Web service expected SOAP messages conforming to the SOAP 1.2 specification, yet received one conforming to SOAP 1.1.</summary>
    {class} property VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_VersionMismatchFaultCode;
    ///<summary>Represents the SOAP version 1.2 <see langword="MustUnderstand" />
    ///  fault code indicating a SOAP header marked with the <see langword="MustUnderstand" />
    ///  attribute was not processed.</summary>
    {class} property MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_MustUnderstandFaultCode;
    ///<summary>Represents the SOAP version 1.2 <see langword="DataEncodingUnknown" />
    ///  fault code indicating the SOAP message is encoded in an unrecognized format.</summary>
    {class} property DataEncodingUnknownFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_DataEncodingUnknownFaultCode;
    ///<summary>Represents the SOAP version 1.2 <see langword="rpc:ProcedureNotPresent" />
    ///  fault subcode indicating the XML Web service does not support the requested XML Web service method.</summary>
    {class} property RpcProcedureNotPresentFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_RpcProcedureNotPresentFaultCode;
    ///<summary>Represents the SOAP version 1.2 <see langword="rpc:BadArguments" />
    ///  fault subcode indicating that arguments sent to the XML Web service method were incorrect or could not be parsed.</summary>
    {class} property RpcBadArgumentsFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_RpcBadArgumentsFaultCode;
    ///<summary>Represents the fault code for missing ID in SOAP encoding data.</summary>
    {class} property EncodingMissingIdFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_EncodingMissingIdFaultCode;
    ///<summary>Represents the SOAP version 1.2 <see langword="enc:UntypedValue" />
    ///  fault subcode indicating that the SOAP message was RPC-encoded and the type name property of an encoded graph node was not specified.</summary>
    {class} property EncodingUntypedValueFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_EncodingUntypedValueFaultCode;

  end;

  ///<summary>Defines the SOAP fault codes that appear in a SOAP message when an error occurs while communicating with XML Web services using the SOAP version 1.2 protocol.</summary>
  [DNTypeName('System.Web.Services.Protocols.Soap12FaultCodes')]
  DNSoap12FaultCodes = interface(DDN.mscorlib.DNObject)
  ['{C8DA73E1-6ABD-324D-92BE-A62A82CD6B3B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoap12FaultCodes = class(TDNGenericImport<DNSoap12FaultCodesClass, DNSoap12FaultCodes>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3575D082-F365-589E-946B-0D765142C114}']
  end;

  ///<summary>The base class for SOAP extensions for XML Web services created using ASP.NET.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapExtension')]
  DNSoapExtension = interface(DDN.mscorlib.DNObject)
  ['{C81B0412-FAE7-3FF1-8FE2-7E2BFD12C744}']
  { methods } 

    ///<summary>When overridden in a derived class, allows a SOAP extension access to the memory buffer containing the SOAP request or response.</summary>
    ///  <param name="stream">A memory buffer containing the SOAP request or response. </param>
    ///<returns>A <see cref="T:System.IO.Stream" />
    ///  representing a new memory buffer that this SOAP extension can modify.</returns>
    function ChainStream(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNStream;
    ///<summary>When overridden in a derived class, allows a SOAP extension to initialize data specific to an XML Web service method using an attribute applied to the XML Web service method at a one time performance cost.</summary>
    ///  <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  representing the specific function prototype for the XML Web service method to which the SOAP extension is applied. </param>
    ///  <param name="attribute">The <see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    ///  applied to the XML Web service method. </param>
    ///<returns>The <see cref="T:System.Object" />
    ///  that the SOAP extension initializes for caching.</returns>
    function GetInitializer(methodInfo: DNLogicalMethodInfo; attribute: DNSoapExtensionAttribute): DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, allows a SOAP extension to initialize data specific to a class implementing an XML Web service at a one time performance cost.</summary>
    ///  <param name="serviceType">The type of the class implementing the XML Web service to which the SOAP extension is applied. </param>
    ///<returns>The <see cref="T:System.Object" />
    ///  that the SOAP extension initializes for caching.</returns>
    function GetInitializer(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>When overridden in a derived class, allows a SOAP extension to initialize itself using the data cached in the <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
    ///  method.</summary>
    ///  <param name="initializer">The <see cref="T:System.Object" />
    ///  returned from <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
    ///  cached by ASP.NET. </param>
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    ///<summary>When overridden in a derived class, allows a SOAP extension to receive a <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  to process at each <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  .</summary>
    ///  <param name="message">The <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  to process. </param>
    procedure ProcessMessage(message: DNSoapMessage);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapExtension = class(TDNGenericImport<DNSoapExtensionClass, DNSoapExtension>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapFaultSubCodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{223389A4-D159-5DB5-A83A-02B9703B22B3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapFaultSubcode" />
    ///  class sets the application specific error code.</summary>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  specifying the application specific error code. Sets the <see cref="P:System.Web.Services.Protocols.SoapFaultSubcode.Code" />
    ///  property. </param>
    {class} function init(code: DDN.System.Xml.DNXmlQualifiedName): DNSoapFaultSubCode; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  class setting the application specific error code and additional error information.</summary>
    ///  <param name="code">An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  specifying the application specific error code. Sets the <see cref="P:System.Web.Services.Protocols.SoapFaultSubCode.Code" />
    ///  property. </param>
    ///  <param name="subCode">A <see cref="T:System.Web.Services.Protocols.SoapFaultSubCode" />
    ///  specifying additional application specific error information. Sets the <see cref="P:System.Web.Services.Protocols.SoapFaultSubCode.SubCode" />
    ///  property. </param>
    {class} function init(code: DDN.System.Xml.DNXmlQualifiedName; subCode: DNSoapFaultSubCode): DNSoapFaultSubCode; overload;

  end;

  ///<summary>Represents the contents of the optional <see langword="Subcode" />
  ///  element of a SOAP fault when SOAP version 1.2 is used to communicate between a client and an XML Web service.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapFaultSubCode')]
  DNSoapFaultSubCode = interface(DDN.mscorlib.DNObject)
  ['{F645307A-8394-38E4-BBD0-2D9C71EA3190}']
  { getters & setters } 

    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_SubCode: DNSoapFaultSubCode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the application specific error code in the form of an XML qualified name.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlQualifiedName" />
    ///  representing the application specific error code.</returns>
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    ///<summary>Gets additional error information contained within a child <see langword="Subcode" />
    ///  element.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapFaultSubcode" />
    ///  containing additional error information.</returns>
    property SubCode: DNSoapFaultSubCode read get_SubCode;
  end;

  TDNSoapFaultSubCode = class(TDNGenericImport<DNSoapFaultSubCodeClass, DNSoapFaultSubCode>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{758D8773-CA73-5A6F-B170-07D21332F56A}']
  end;

  ///<summary>When overridden in a derived class, represents the content of a SOAP header.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeader')]
  DNSoapHeader = interface(DDN.mscorlib.DNObject)
  ['{4210CD23-EEEA-3069-AC29-65142F4779A4}']
  { getters & setters } 

    function get_EncodedMustUnderstand: string;
    procedure set_EncodedMustUnderstand(value: string);
    function get_EncodedMustUnderstand12: string;
    procedure set_EncodedMustUnderstand12(value: string);
    function get_MustUnderstand: Boolean;
    procedure set_MustUnderstand(value: Boolean);
    function get_Actor: string;
    procedure set_Actor(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_DidUnderstand: Boolean;
    procedure set_DidUnderstand(value: Boolean);
    function get_EncodedRelay: string;
    procedure set_EncodedRelay(value: string);
    function get_Relay: Boolean;
    procedure set_Relay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the <see langword="mustUnderstand" />
    ///  XML attribute for the SOAP header when communicating with SOAP protocol version 1.1.</summary>
    ///<returns>The value of the <see langword="mustUnderstand" />
    ///  attribute. The default is "0".</returns>
    ///<exception cref="T:System.ArgumentException">The property is set to a value other than: "0", "1", "true", or "false". </exception>
    property EncodedMustUnderstand: string read get_EncodedMustUnderstand write set_EncodedMustUnderstand;
    ///<summary>Gets or sets the value of the <see langword="mustUnderstand" />
    ///  XML attribute for the SOAP header when communicating with SOAP protocol version 1.2.</summary>
    ///<returns>The value of the <see langword="mustUnderstand" />
    ///  XML attribute of a SOAP header. The default is "0".</returns>
    ///<exception cref="T:System.ArgumentException">The property is set to a value other than: "0", "1", "true", or "false". </exception>
    property EncodedMustUnderstand12: string read get_EncodedMustUnderstand12 write set_EncodedMustUnderstand12;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  must be understood.</summary>
    ///<returns><see langword="true" />
    ///  if the XML Web service must properly interpret and process the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property MustUnderstand: Boolean read get_MustUnderstand write set_MustUnderstand;
    ///<summary>Gets or sets the recipient of the SOAP header.</summary>
    ///<returns>The recipient of the SOAP header. The default is an empty string ("").</returns>
    property Actor: string read get_Actor write set_Actor;
    ///<summary>Gets or sets the recipient of the SOAP header.</summary>
    ///<returns>A URI that represents the recipient of the SOAP header. The default is an empty string ("").</returns>
    property Role: string read get_Role write set_Role;
    ///<summary>Gets or sets a value indicating whether an XML Web service method properly processed a SOAP header.</summary>
    ///<returns><see langword="true" />
    ///  if the SOAP header was properly processed; otherwise <see langword="false" />
    ///  .</returns>
    property DidUnderstand: Boolean read get_DidUnderstand write set_DidUnderstand;
    ///<summary>Gets or sets the relay attribute of the SOAP 1.2 header.</summary>
    ///<returns>Either "0", "false", "1", or "true".</returns>
    property EncodedRelay: string read get_EncodedRelay write set_EncodedRelay;
    ///<summary>Gets or sets a value that indicates whether the SOAP header is to be relayed to the next SOAP node if the current node does not understand the header.</summary>
    ///<returns><see langword="true" />
    ///  if the SOAP header has a "relay" attribute set to "true"; otherwise, <see langword="false" />
    ///  .</returns>
    property Relay: Boolean read get_Relay write set_Relay;
  end;

  TDNSoapHeader = class(TDNGenericImport<DNSoapHeaderClass, DNSoapHeader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapUnknownHeaderClass = interface(DNSoapHeaderClass)
  ['{937A2935-1A5F-5E29-82E9-04CCAF97F771}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.SoapUnknownHeader" />
    ///  class. </summary>
    {class} function init: DNSoapUnknownHeader;

  end;

  ///<summary>Represents the data received from a SOAP header that was not understood by the recipient XML Web service or XML Web service client. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapUnknownHeader')]
  DNSoapUnknownHeader = interface(DNSoapHeader)
  ['{AB9471A2-168F-3D8C-B1E3-442AB8AA9A86}']
  { getters & setters } 

    function get_Element: DDN.System.Xml.DNXmlElement;
    procedure set_Element(value: DDN.System.Xml.DNXmlElement);
    function get_EncodedMustUnderstand: string;
    procedure set_EncodedMustUnderstand(value: string);
    function get_EncodedMustUnderstand12: string;
    procedure set_EncodedMustUnderstand12(value: string);
    function get_MustUnderstand: Boolean;
    procedure set_MustUnderstand(value: Boolean);
    function get_Actor: string;
    procedure set_Actor(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_DidUnderstand: Boolean;
    procedure set_DidUnderstand(value: Boolean);
    function get_EncodedRelay: string;
    procedure set_EncodedRelay(value: string);
    function get_Relay: Boolean;
    procedure set_Relay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the XML Header element for a SOAP request or response.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlElement" />
    ///  representing the raw XML of the SOAP header.</returns>
    property Element: DDN.System.Xml.DNXmlElement read get_Element write set_Element;
    ///<summary>Gets or sets the value of the <see langword="mustUnderstand" />
    ///  XML attribute for the SOAP header when communicating with SOAP protocol version 1.1.</summary>
    ///<returns>The value of the <see langword="mustUnderstand" />
    ///  attribute. The default is "0".</returns>
    ///<exception cref="T:System.ArgumentException">The property is set to a value other than: "0", "1", "true", or "false". </exception>
    property EncodedMustUnderstand: string read get_EncodedMustUnderstand write set_EncodedMustUnderstand;
    ///<summary>Gets or sets the value of the <see langword="mustUnderstand" />
    ///  XML attribute for the SOAP header when communicating with SOAP protocol version 1.2.</summary>
    ///<returns>The value of the <see langword="mustUnderstand" />
    ///  XML attribute of a SOAP header. The default is "0".</returns>
    ///<exception cref="T:System.ArgumentException">The property is set to a value other than: "0", "1", "true", or "false". </exception>
    property EncodedMustUnderstand12: string read get_EncodedMustUnderstand12 write set_EncodedMustUnderstand12;
    ///<summary>Gets or sets a value indicating whether the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  must be understood.</summary>
    ///<returns><see langword="true" />
    ///  if the XML Web service must properly interpret and process the <see cref="T:System.Web.Services.Protocols.SoapHeader" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property MustUnderstand: Boolean read get_MustUnderstand write set_MustUnderstand;
    ///<summary>Gets or sets the recipient of the SOAP header.</summary>
    ///<returns>The recipient of the SOAP header. The default is an empty string ("").</returns>
    property Actor: string read get_Actor write set_Actor;
    ///<summary>Gets or sets the recipient of the SOAP header.</summary>
    ///<returns>A URI that represents the recipient of the SOAP header. The default is an empty string ("").</returns>
    property Role: string read get_Role write set_Role;
    ///<summary>Gets or sets a value indicating whether an XML Web service method properly processed a SOAP header.</summary>
    ///<returns><see langword="true" />
    ///  if the SOAP header was properly processed; otherwise <see langword="false" />
    ///  .</returns>
    property DidUnderstand: Boolean read get_DidUnderstand write set_DidUnderstand;
    ///<summary>Gets or sets the relay attribute of the SOAP 1.2 header.</summary>
    ///<returns>Either "0", "false", "1", or "true".</returns>
    property EncodedRelay: string read get_EncodedRelay write set_EncodedRelay;
    ///<summary>Gets or sets a value that indicates whether the SOAP header is to be relayed to the next SOAP node if the current node does not understand the header.</summary>
    ///<returns><see langword="true" />
    ///  if the SOAP header has a "relay" attribute set to "true"; otherwise, <see langword="false" />
    ///  .</returns>
    property Relay: Boolean read get_Relay write set_Relay;
  end;

  TDNSoapUnknownHeader = class(TDNGenericImport<DNSoapUnknownHeaderClass, DNSoapUnknownHeader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderHandlingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DFEEC10D-1F96-532B-9F27-10C8D36BD47E}']
  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.Web.Services.Protocols.SoapHeaderHandling" />
    ///  .</summary>
    {class} function init: DNSoapHeaderHandling;

  { static methods } 

    ///<summary>Writes the specified SOAP header content to the SOAP message.</summary>
    ///  <param name="writer">The <see cref="T:System.Xml.XmlWriter" />
    ///  to be used in writing the headers.</param>
    ///  <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  to be used in writing the headers.</param>
    ///  <param name="headers">The <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  that contains the SOAP headers to be written.</param>
    ///  <param name="mappings">An array of type <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  that contains the mappings for the SOAP headers.</param>
    ///  <param name="direction">A <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  value that indicates the direction of the SOAP headers.</param>
    ///  <param name="isEncoded">A <see cref="T:System.Boolean" />
    ///  that indicates whether the SOAP headers are encoded.</param>
    ///  <param name="defaultNS">A <see cref="T:System.String" />
    ///  that contains the default namespace for the XML Web service.</param>
    ///  <param name="serviceDefaultIsEncoded">A <see cref="T:System.Boolean" />
    ///  that indicates whether data sent to and from the XML Web service is encoded by default.</param>
    ///  <param name="envelopeNS">A <see cref="T:System.String" />
    ///  that contains the namespace for the SOAP message envelope.</param>
    {class} procedure WriteHeaders(writer: DDN.System.Xml.DNXmlWriter; serializer: DDN.System.Xml.DNXmlSerializer; headers: DNSoapHeaderCollection; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; isEncoded: Boolean; defaultNS: string; serviceDefaultIsEncoded: Boolean; envelopeNS: string);
    ///<summary>Writes the specified SOAP header content to the SOAP message.</summary>
    ///  <param name="writer">The <see cref="T:System.Xml.XmlWriter" />
    ///  to be used in writing the headers.</param>
    ///  <param name="headers">The <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  that contains the SOAP headers to be written.</param>
    ///  <param name="envelopeNS">A <see cref="T:System.String" />
    ///  that contains the namespace for the SOAP message envelope.</param>
    {class} procedure WriteUnknownHeaders(writer: DDN.System.Xml.DNXmlWriter; headers: DNSoapHeaderCollection; envelopeNS: string);
    ///<summary>Sets the SOAP header content for the specified SOAP message.</summary>
    ///  <param name="headers">The <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  that contains the SOAP headers.</param>
    ///  <param name="target">A <see cref="T:System.Object" />
    ///  that represents the SOAP message.</param>
    ///  <param name="mappings">An array of type <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  that contains the mappings for the SOAP headers.</param>
    ///  <param name="direction">A <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  value that indicates the direction of the SOAP headers.</param>
    ///  <param name="client">This parameter is currently not used.</param>
    {class} procedure SetHeaderMembers(headers: DNSoapHeaderCollection; target: DDN.mscorlib.DNObject; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; client: Boolean);
    ///<summary>Gets the SOAP header content for the specified SOAP message.</summary>
    ///  <param name="headers">The <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  that contains the SOAP headers.</param>
    ///  <param name="target">A <see cref="T:System.Object" />
    ///  that represents the SOAP message.</param>
    ///  <param name="mappings">An array of type <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  that contains the mappings for the SOAP headers.</param>
    ///  <param name="direction">A <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  value that indicates the direction of the SOAP headers.</param>
    ///  <param name="client">This parameter is currently not used.</param>
    {class} procedure GetHeaderMembers(headers: DNSoapHeaderCollection; target: DDN.mscorlib.DNObject; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; client: Boolean);
    ///<summary>Checks to ensure that the SOAP headers that must be understood have been understood; if not, this method throws an exception.</summary>
    ///  <param name="headers">The <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  that contains the SOAP headers.</param>
    ///<exception cref="T:System.Web.Services.Protocols.SoapHeaderException">A SOAP header that must be understood was not understood.</exception>
    {class} procedure EnsureHeadersUnderstood(headers: DNSoapHeaderCollection);

  end;

  ///<summary>The <see cref="T:System.Web.Services.Protocols.SoapHeaderHandling" />
  ///  class is used to get, set, write, and read SOAP header content to and from SOAP messages.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderHandling')]
  DNSoapHeaderHandling = interface(DDN.mscorlib.DNObject)
  ['{B275EBAF-7107-3FEC-9836-0135F4678B98}']
  { methods } 

    ///<summary>Returns a <see cref="T:System.String" />
    ///  that contains the SOAP header content of the SOAP message.</summary>
    ///  <param name="reader">The <see cref="T:System.Xml.XmlReader" />
    ///  to be used in writing the headers.</param>
    ///  <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  to be used in reading the headers.</param>
    ///  <param name="headers">The <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  that contains the SOAP headers.</param>
    ///  <param name="mappings">An array of type <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
    ///  that contains the mappings for the SOAP headers.</param>
    ///  <param name="direction">A <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  value that indicates the direction of the SOAP headers.</param>
    ///  <param name="envelopeNS">A <see cref="T:System.String" />
    ///  that contains the namespace for the SOAP message envelope.</param>
    ///  <param name="encodingStyle">A <see cref="T:System.String" />
    ///  that contains the encoding style for the SOAP headers.</param>
    ///  <param name="checkRequiredHeaders">A <see cref="T:System.Boolean" />
    ///  that indicates whether to check for the required SOAP headers.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the SOAP header content of the SOAP message.</returns>
    function ReadHeaders(reader: DDN.System.Xml.DNXmlReader; serializer: DDN.System.Xml.DNXmlSerializer; headers: DNSoapHeaderCollection; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; envelopeNS: string; encodingStyle: string; checkRequiredHeaders: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapHeaderHandling = class(TDNGenericImport<DNSoapHeaderHandlingClass, DNSoapHeaderHandling>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7A529E6-B51D-5701-A8CE-BEC1E7BD01AF}']
  end;

  ///<summary>The <see cref="T:System.Web.Services.Protocols.SoapHeaderMapping" />
  ///  class represents a SOAP header mapping.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderMapping')]
  DNSoapHeaderMapping = interface(DDN.mscorlib.DNObject)
  ['{5D7D8EF6-E5B4-3C57-BFF7-7EBF4589B414}']
  { getters & setters } 

    function get_HeaderType: DDN.mscorlib.DNType;
    function get_Repeats: Boolean;
    function get_Custom: Boolean;
    function get_Direction: DNSoapHeaderDirection;
    function get_MemberInfo: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Type" />
    ///  that represents the type of the SOAP header mapping.</summary>
    ///<returns>A <see cref="T:System.Type" />
    ///  that represents the type of the SOAP header mapping.</returns>
    property HeaderType: DDN.mscorlib.DNType read get_HeaderType;
    ///<summary>Gets a <see cref="T:System.Boolean" />
    ///  value that indicates whether the SOAP header mapping repeats.</summary>
    ///<returns><see langword="true" />
    ///  if the SOAP header mapping repeats; otherwise, <see langword="false" />
    ///  .</returns>
    property Repeats: Boolean read get_Repeats;
    ///<summary>Gets a <see cref="T:System.Boolean" />
    ///  value that indicates whether the SOAP header mapping is custom-defined.</summary>
    ///<returns><see langword="true" />
    ///  if the SOAP header mapping is custom-defined; otherwise, <see langword="false" />
    ///  .</returns>
    property Custom: Boolean read get_Custom;
    ///<summary>Gets a <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  value that indicates the direction of the SOAP header mapping.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapHeaderDirection" />
    ///  value that indicates the direction of the SOAP header mapping.</returns>
    property Direction: DNSoapHeaderDirection read get_Direction;
    ///<summary>Gets the <see cref="T:System.Reflection.MemberInfo" />
    ///  associated with the SOAP header mapping.</summary>
    ///<returns>The <see cref="T:System.Reflection.MemberInfo" />
    ///  associated with the SOAP header mapping.</returns>
    property MemberInfo: DDN.mscorlib.DNMemberInfo read get_MemberInfo;
  end;

  TDNSoapHeaderMapping = class(TDNGenericImport<DNSoapHeaderMappingClass, DNSoapHeaderMapping>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapMessageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4881606C-0DE9-5FDF-83E3-A249BFD8D695}']
  end;

  ///<summary>Represents the data in a SOAP request or SOAP response at a specific <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
  ///  .</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapMessage')]
  DNSoapMessage = interface(DDN.mscorlib.DNObject)
  ['{CB2AAFE1-CE77-3E28-9F44-C3A1CBCAFE4F}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;

  { methods } 

    ///<summary>Gets the return value of an XML Web service method.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the return value of the XML Web service method.</returns>
    ///<exception cref="T:System.InvalidOperationException">The XML Web service method does not have a return value.OR The return value is not available. For details see the Remarks section </exception>
    function GetReturnValue: DDN.mscorlib.DNObject;
    ///<summary>Gets the parameter passed into the XML Web service method at the specified index.</summary>
    ///  <param name="index">The zero-based index of the parameter in the array of parameters. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the parameter at the specified index.</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than 0 or greater than the length of the parameters array. </exception><exception cref="T:System.InvalidOperationException">Accessing this property when in parameters are not available. For details see the Remarks section. </exception>
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    ///<summary>Gets the out parameter passed into the XML Web service method at the specified index.</summary>
    ///  <param name="index">The zero-based index of the parameter in the array of parameters. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the parameter at the specified index.</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is greater than the length of the parameters array. </exception><exception cref="T:System.InvalidOperationException">Accessing this property when out parameters are not available. For details see the Remarks section. </exception>
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating the <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay" />
    ///  property of either the <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  or the <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  attribute applied to the XML Web service method.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay" />
    ///  property of the <see cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
    ///  or <see cref="T:System.Web.Services.Protocols.SoapRpcMethodAttribute" />
    ///  applied to the XML Web service method is <see langword="true" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>Gets the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  from the call to the XML Web service method.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  that occurred in the call to the XML Web service method. <see langword="null" />
    ///  if no <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  has occurred during the call to the Web Sevice method.</returns>
    property Exception: DNSoapException read get_Exception write set_Exception;
    ///<summary>When overridden in a derived class, gets a representation of the method prototype for the XML Web service method for which the SOAP request is intended.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  representing the XML Web service method for which the SOAP request is intended.</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>A collection of the SOAP headers applied to the current SOAP request or SOAP response.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  of the SOAP headers applied to the current SOAP request or SOAP response. <see langword="null" />
    ///  , if there are no SOAP headers.</returns>
    property Headers: DNSoapHeaderCollection read get_Headers;
    ///<summary>Gets the data representing the SOAP request or SOAP response in the form of a <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///<returns>A read-only instance of the <see cref="T:System.IO.Stream" />
    ///  class.</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>Gets or sets the HTTP <see langword="Content-Type" />
    ///  of the SOAP request or SOAP response.</summary>
    ///<returns>The HTTP <see langword="Content-Type" />
    ///  of the SOAP request or SOAP response. The default is "text/xml".</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Protocols.SoapMessage.ContentType" />
    ///  is accessed <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  or <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  stages. </exception>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>Gets or sets the contents of the <see langword="Content-Encoding" />
    ///  HTTP header.</summary>
    ///<returns>The contents of the <see langword="Content-Encoding" />
    ///  HTTP header.</returns>
    ///<exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  is <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  or <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  stages. </exception>
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    ///<summary>Gets the <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  of the <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  of the <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  .</returns>
    property Stage: DNSoapMessageStage read get_Stage;
    ///<summary>When overridden in a derived class, gets the base URL of the XML Web service.</summary>
    ///<returns>The base URL of the XML Web service.</returns>
    property Url: string read get_Url;
    ///<summary>When overridden in a derived class, gets the SOAPAction HTTP request header field for the SOAP request or SOAP response.</summary>
    ///<returns>The SOAPAction HTTP request header field for the SOAP request or SOAP response.</returns>
    property Action: string read get_Action;
    ///<summary>Gets the version of the SOAP protocol used to communicate with the XML Web service.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  values. The default is <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  .</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
  end;

  TDNSoapMessage = class(TDNGenericImport<DNSoapMessageClass, DNSoapMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapClientMessageClass = interface(DNSoapMessageClass)
  ['{497F0C9E-60CF-5DFE-B16C-0F4DF1C31FF7}']
  end;

  ///<summary>Represents the data in a SOAP request sent or a SOAP response received by an XML Web service client at a specific <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
  ///  . This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapClientMessage')]
  DNSoapClientMessage = interface(DNSoapMessage)
  ['{FEAB897A-5917-3354-B972-44B0A597EC37}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Client: DNSoapHttpClientProtocol;
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;

  { methods } 

    ///<summary>Gets the return value of an XML Web service method.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the return value of the XML Web service method.</returns>
    ///<exception cref="T:System.InvalidOperationException">The XML Web service method does not have a return value.OR The return value is not available. For details see the Remarks section </exception>
    function GetReturnValue: DDN.mscorlib.DNObject;
    ///<summary>Gets the parameter passed into the XML Web service method at the specified index.</summary>
    ///  <param name="index">The zero-based index of the parameter in the array of parameters. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the parameter at the specified index.</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than 0 or greater than the length of the parameters array. </exception><exception cref="T:System.InvalidOperationException">Accessing this property when in parameters are not available. For details see the Remarks section. </exception>
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    ///<summary>Gets the out parameter passed into the XML Web service method at the specified index.</summary>
    ///  <param name="index">The zero-based index of the parameter in the array of parameters. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the parameter at the specified index.</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is greater than the length of the parameters array. </exception><exception cref="T:System.InvalidOperationException">Accessing this property when out parameters are not available. For details see the Remarks section. </exception>
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether the client waits for the server to finish processing an XML Web service method.</summary>
    ///<returns><see langword="true" />
    ///  if the client does not wait for the server to completely process a method.</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>Gets an instance of the client proxy class, which derives from <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
    ///  .</summary>
    ///<returns>An instance of the client proxy class.</returns>
    property Client: DNSoapHttpClientProtocol read get_Client;
    ///<summary>Gets a representation of the method prototype of the XML Web service method for which the SOAP request is intended.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  representing the XML Web service method for which the SOAP request is intended.</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>Gets the URL of the XML Web service.</summary>
    ///<returns>The URL of the XML Web service.</returns>
    property Url: string read get_Url;
    ///<summary>Gets the <see langword="SOAPAction" />
    ///  HTTP request header field for the SOAP request or SOAP response.</summary>
    ///<returns>The <see langword="SOAPAction" />
    ///  HTTP request header field for the SOAP request or SOAP response.</returns>
    property Action: string read get_Action;
    ///<summary>Gets the version of the SOAP protocol used to communicate with the XML Web service.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  values. The default is <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  .</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    ///<summary>Gets the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  from the call to the XML Web service method.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  that occurred in the call to the XML Web service method. <see langword="null" />
    ///  if no <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  has occurred during the call to the Web Sevice method.</returns>
    property Exception: DNSoapException read get_Exception write set_Exception;
    ///<summary>A collection of the SOAP headers applied to the current SOAP request or SOAP response.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  of the SOAP headers applied to the current SOAP request or SOAP response. <see langword="null" />
    ///  , if there are no SOAP headers.</returns>
    property Headers: DNSoapHeaderCollection read get_Headers;
    ///<summary>Gets the data representing the SOAP request or SOAP response in the form of a <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///<returns>A read-only instance of the <see cref="T:System.IO.Stream" />
    ///  class.</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>Gets or sets the HTTP <see langword="Content-Type" />
    ///  of the SOAP request or SOAP response.</summary>
    ///<returns>The HTTP <see langword="Content-Type" />
    ///  of the SOAP request or SOAP response. The default is "text/xml".</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Protocols.SoapMessage.ContentType" />
    ///  is accessed <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  or <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  stages. </exception>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>Gets or sets the contents of the <see langword="Content-Encoding" />
    ///  HTTP header.</summary>
    ///<returns>The contents of the <see langword="Content-Encoding" />
    ///  HTTP header.</returns>
    ///<exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  is <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  or <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  stages. </exception>
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    ///<summary>Gets the <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  of the <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  of the <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  .</returns>
    property Stage: DNSoapMessageStage read get_Stage;
  end;

  TDNSoapClientMessage = class(TDNGenericImport<DNSoapClientMessageClass, DNSoapClientMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerMessageClass = interface(DNSoapMessageClass)
  ['{51478656-4A84-5ACD-AF6F-2A21ABB89572}']
  end;

  ///<summary>Represents the data in a SOAP request received or a SOAP response sent by an XML Web service method at a specific <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
  ///  . This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerMessage')]
  DNSoapServerMessage = interface(DNSoapMessage)
  ['{DFAC0AC2-0D55-34C0-A619-DDA7C0E14D3A}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Server: DDN.mscorlib.DNObject;
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;

  { methods } 

    ///<summary>Gets the return value of an XML Web service method.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the return value of the XML Web service method.</returns>
    ///<exception cref="T:System.InvalidOperationException">The XML Web service method does not have a return value.OR The return value is not available. For details see the Remarks section </exception>
    function GetReturnValue: DDN.mscorlib.DNObject;
    ///<summary>Gets the parameter passed into the XML Web service method at the specified index.</summary>
    ///  <param name="index">The zero-based index of the parameter in the array of parameters. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the parameter at the specified index.</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is less than 0 or greater than the length of the parameters array. </exception><exception cref="T:System.InvalidOperationException">Accessing this property when in parameters are not available. For details see the Remarks section. </exception>
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    ///<summary>Gets the out parameter passed into the XML Web service method at the specified index.</summary>
    ///  <param name="index">The zero-based index of the parameter in the array of parameters. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the parameter at the specified index.</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">The <paramref name="index" />
    ///  parameter is greater than the length of the parameters array. </exception><exception cref="T:System.InvalidOperationException">Accessing this property when out parameters are not available. For details see the Remarks section. </exception>
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether the client waits for the server to finish processing an XML Web service method.</summary>
    ///<returns><see langword="true" />
    ///  if the client waits for the server to completely process a method; otherwise, <see langword="false" />
    ///  .</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>Gets the base URL of the XML Web service.</summary>
    ///<returns>The base URL of the XML Web service.</returns>
    property Url: string read get_Url;
    ///<summary>Gets the SOAPAction HTTP request header field for the SOAP request or SOAP response.</summary>
    ///<returns>The SOAPAction HTTP request header field for the SOAP request or SOAP response.</returns>
    property Action: string read get_Action;
    ///<summary>Gets the version of the SOAP protocol used to communicate with the XML Web service.</summary>
    ///<returns>One of the <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
    ///  values. The default is <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />
    ///  .</returns>
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    ///<summary>Gets the instance of the class handling the method invocation on the Web server.</summary>
    ///<returns>The instance of the class implementing the XML Web service.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  is not <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  or <see cref="F:System.Web.Services.Protocols.SoapMessageStage.BeforeSerialize" />
    ///  . </exception>
    property Server: DDN.mscorlib.DNObject read get_Server;
    ///<summary>Gets a representation of the method prototype for the XML Web service method for which the SOAP request is intended.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  representing the XML Web service method for which the SOAP request is intended.</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>Gets the <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  from the call to the XML Web service method.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  that occurred in the call to the XML Web service method. <see langword="null" />
    ///  if no <see cref="T:System.Web.Services.Protocols.SoapException" />
    ///  has occurred during the call to the Web Sevice method.</returns>
    property Exception: DNSoapException read get_Exception write set_Exception;
    ///<summary>A collection of the SOAP headers applied to the current SOAP request or SOAP response.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapHeaderCollection" />
    ///  of the SOAP headers applied to the current SOAP request or SOAP response. <see langword="null" />
    ///  , if there are no SOAP headers.</returns>
    property Headers: DNSoapHeaderCollection read get_Headers;
    ///<summary>Gets the data representing the SOAP request or SOAP response in the form of a <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///<returns>A read-only instance of the <see cref="T:System.IO.Stream" />
    ///  class.</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>Gets or sets the HTTP <see langword="Content-Type" />
    ///  of the SOAP request or SOAP response.</summary>
    ///<returns>The HTTP <see langword="Content-Type" />
    ///  of the SOAP request or SOAP response. The default is "text/xml".</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.Services.Protocols.SoapMessage.ContentType" />
    ///  is accessed <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  or <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  stages. </exception>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>Gets or sets the contents of the <see langword="Content-Encoding" />
    ///  HTTP header.</summary>
    ///<returns>The contents of the <see langword="Content-Encoding" />
    ///  HTTP header.</returns>
    ///<exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  is <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize" />
    ///  or <see cref="F:System.Web.Services.Protocols.SoapMessageStage.AfterDeserialize" />
    ///  stages. </exception>
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    ///<summary>Gets the <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  of the <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    ///  of the <see cref="T:System.Web.Services.Protocols.SoapMessage" />
    ///  .</returns>
    property Stage: DNSoapMessageStage read get_Stage;
  end;

  TDNSoapServerMessage = class(TDNGenericImport<DNSoapServerMessageClass, DNSoapServerMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerMethodClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D48E5C24-2B08-57E3-9542-7A24DAF6FA46}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  .</summary>
    {class} function init: DNSoapServerMethod; overload;
    ///<summary>Creates a new <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  .</summary>
    ///  <param name="serverType">The <see cref="T:System.Type" />
    ///  to which this method belongs.</param>
    ///  <param name="methodInfo">The <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  with which to initialize this <see cref="T:System.Web.Services.Protocols.SoapServerMethod" />
    ///  .</param>
    {class} function init(serverType: DDN.mscorlib.DNType; methodInfo: DNLogicalMethodInfo): DNSoapServerMethod; overload;

  end;

  ///<summary>Represents the attributes and metadata for an XML Web service method. This class cannot be inherited.</summary>
  [DNTypeName('System.Web.Services.Protocols.SoapServerMethod')]
  DNSoapServerMethod = interface(DDN.mscorlib.DNObject)
  ['{6626E454-1EA0-3187-A5C2-F6AF5EA57F1C}']
  { getters & setters } 

    function get_MethodInfo: DNLogicalMethodInfo;
    function get_ReturnSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_ParameterSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_InHeaderSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_OutHeaderSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_InHeaderMappings: TArray<DNSoapHeaderMapping>;
    function get_OutHeaderMappings: TArray<DNSoapHeaderMapping>;
    function get_Action: string;
    function get_OneWay: Boolean;
    function get_Rpc: Boolean;
    function get_BindingUse: DNSoapBindingUse;
    function get_ParameterStyle: DNSoapParameterStyle;
    function get_WsiClaims: DNWsiProfiles;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  associated with this XML Web service method.</summary>
    ///<returns>The <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
    ///  associated with this XML Web service method.</returns>
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with return values from this Web service method.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with return values from this Web service method.</returns>
    property ReturnSerializer: DDN.System.Xml.DNXmlSerializer read get_ReturnSerializer;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with parameters that are passed to this Web service method.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with parameters that are passed to this Web service method.</returns>
    property ParameterSerializer: DDN.System.Xml.DNXmlSerializer read get_ParameterSerializer;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with SOAP requests to this Web service method.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with SOAP requests to this Web service method.</returns>
    property InHeaderSerializer: DDN.System.Xml.DNXmlSerializer read get_InHeaderSerializer;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with SOAP responses from this Web service method.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  used with SOAP responses from this Web service method.</returns>
    property OutHeaderSerializer: DDN.System.Xml.DNXmlSerializer read get_OutHeaderSerializer;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  used with SOAP requests to this Web service method.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  used with SOAP requests to this Web service method.</returns>
    property InHeaderMappings: TArray<DNSoapHeaderMapping> read get_InHeaderMappings;
    ///<summary>Gets the <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  used with SOAP responses from this Web service method.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  used with SOAP responses from this Web service method.</returns>
    property OutHeaderMappings: TArray<DNSoapHeaderMapping> read get_OutHeaderMappings;
    ///<summary>Gets the <see langword="SOAPAction" />
    ///  HTTP header field of SOAP requests that are sent to this XML Web service method.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the <see langword="SOAPAction" />
    ///  HTTP header field of SOAP requests that are sent to this XML Web service method.</returns>
    property Action: string read get_Action;
    ///<summary>Gets a <see cref="T:System.Boolean" />
    ///  that indicates whether an XML Web service client waits for the Web server to finish processing this XML Web service method.</summary>
    ///<returns><see langword="true" />
    ///  if the XML Web service client does not wait for the Web server to completely process this XML Web service method; otherwise, <see langword="false" />
    ///  .</returns>
    property OneWay: Boolean read get_OneWay;
    ///<summary>Gets a <see cref="T:System.Boolean" />
    ///  that indicates whether SOAP messages sent to and from this XML Web service method use RPC formatting.</summary>
    ///<returns><see langword="true" />
    ///  if SOAP messages sent to and from this XML Web service method use RPC formatting; otherwise, <see langword="false" />
    ///  .</returns>
    property Rpc: Boolean read get_Rpc;
    ///<summary>Gets a <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  value that specifies whether the parts of SOAP messages sent to this XML Web service method are encoded as abstract type definitions or concrete schema definitions.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Description.SoapBindingUse" />
    ///  value that specifies whether the parts of SOAP messages sent to this XML Web service method are encoded as abstract type definitions or concrete schema definitions.</returns>
    property BindingUse: DNSoapBindingUse read get_BindingUse;
    ///<summary>Gets a <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  object that specifies how parameters are formatted in SOAP messages sent to this XML Web service method.</summary>
    ///<returns>A <see cref="T:System.Web.Services.Protocols.SoapParameterStyle" />
    ///  that specifies how parameters are formatted in SOAP messages sent to this XML Web service method.</returns>
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle;
    ///<summary>Gets a <see cref="T:System.Web.Services.WsiProfiles" />
    ///  value that indicates the Web Services Interoperability (WSI) specification to which this Web service claims to conform.</summary>
    ///<returns>A <see cref="T:System.Web.Services.WsiProfiles" />
    ///  value that indicates the Web Services Interoperability (WSI) specification to which this Web service claims to conform.</returns>
    property WsiClaims: DNWsiProfiles read get_WsiClaims;
  end;

  TDNSoapServerMethod = class(TDNGenericImport<DNSoapServerMethodClass, DNSoapServerMethod>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebClientAsyncResultClass = interface(DNObjectClass)
  ['{63988241-EDFE-5356-AC0E-9FF0E370EA34}']
  end;

  ///<summary>Provides an implementation of <see cref="T:System.IAsyncResult" />
  ///  for use by XML Web service proxies to implement the standard asynchronous method pattern.</summary>
  [DNTypeName('System.Web.Services.Protocols.WebClientAsyncResult')]
  DNWebClientAsyncResult = interface(DDN.mscorlib.DNIAsyncResult)
  ['{AC44DAAA-AB35-31BF-BACB-313A93716ADC}']
  { getters & setters } 

    function get_AsyncState: DDN.mscorlib.DNObject;
    function get_AsyncWaitHandle: DDN.mscorlib.DNWaitHandle;
    function get_CompletedSynchronously: Boolean;
    function get_IsCompleted: Boolean;

  { methods } 

    ///<summary>Cancels an asynchronous XML Web service request.</summary>
    procedure &Abort;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the object provided in the last parameter to the <see langword="Begin" />
    ///  method asynchronous call.</summary>
    ///<returns>The <see cref="T:System.Object" />
    ///  provided in the last parameter to the <see langword="Begin" />
    ///  method call.</returns>
    property AsyncState: DDN.mscorlib.DNObject read get_AsyncState;
    ///<summary>Gets a <see cref="T:System.Threading.WaitHandle" />
    ///  that is used to wait for an asynchronous operation to complete.</summary>
    ///<returns>A <see cref="T:System.Threading.WaitHandle" />
    ///  that is used to wait for an asynchronous operation to complete.</returns>
    property AsyncWaitHandle: DDN.mscorlib.DNWaitHandle read get_AsyncWaitHandle;
    ///<summary>Gets a value indicating whether the Begin call completed synchronously.</summary>
    ///<returns><see langword="true" />
    ///  if the Begin call completed synchronously; otherwise, <see langword="false" />
    ///  .</returns>
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
    ///<summary>Gets a value indicating whether the asynchronous XML Web service request has completed.</summary>
    ///<returns><see langword="true" />
    ///  if the asynchronous XML Web service request has completed; otherwise, <see langword="false" />
    ///  .</returns>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNWebClientAsyncResult = class(TDNGenericImport<DNWebClientAsyncResultClass, DNWebClientAsyncResult>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebServiceHandlerFactoryClass = interface(DNObjectClass)
  ['{58CADD48-A1D7-58B8-86D8-E0F1493E7CA3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Web.Services.Protocols.WebServiceHandlerFactory" />
    ///  class. </summary>
    {class} function init: DNWebServiceHandlerFactory;

  end;

  ///<summary>Dynamically manufactures Web service handler instances, whose type or types implement the <see cref="T:System.Web.IHttpHandler" />
  ///  interface.</summary>
  [DNTypeName('System.Web.Services.Protocols.WebServiceHandlerFactory')]
  DNWebServiceHandlerFactory = interface(DDN.System.Web.DNIHttpHandlerFactory)
  ['{255F1769-1D32-31BA-8D77-5C21467D59CB}']
  { methods } 

    ///<summary>Returns an <see cref="T:System.Web.IHttpHandler" />
    ///  instance.</summary>
    ///  <param name="context">An <see cref="T:System.Web.HttpContext" />
    ///  that provides references to intrinsic server objects (For example, <see cref="P:System.Web.HttpContext.Request" />
    ///  , <see cref="P:System.Web.HttpContext.Response" />
    ///  , <see cref="P:System.Web.HttpContext.Session" />
    ///  , and <see cref="P:System.Web.HttpContext.Server" />
    ///  ) used to service HTTP requests.</param>
    ///  <param name="verb">The HTTP data transfer method (GET or POST) that the client uses.</param>
    ///  <param name="url">The raw URL of the requested resource.</param>
    ///  <param name="filePath">The file-system path of the requested resource.</param>
    ///<returns>An <see cref="T:System.Web.IHttpHandler" />
    ///  instance.</returns>
    function GetHandler(context: DDN.System.Web.DNHttpContext; verb: string; url: string; filePath: string): DDN.System.Web.DNIHttpHandler;
    ///<summary>Releases the <see cref="T:System.Web.IHttpHandler" />
    ///  instance.</summary>
    ///  <param name="handler">The <see cref="T:System.Web.IHttpHandler" />
    ///  instance to release.</param>
    procedure ReleaseHandler(handler: DDN.System.Web.DNIHttpHandler);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebServiceHandlerFactory = class(TDNGenericImport<DNWebServiceHandlerFactoryClass, DNWebServiceHandlerFactory>) end;


implementation


initialization
  LoadAssemblyModule('System.Web.Services.dll', True);

finalization

end.
