//----------------------------------------------------------------------------
//  System.Collections.dll: System.Collections, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Collections
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMCOLLECTIONS}
unit DDNC.System.Collections;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Runtime;

type


{ declares }

  DNBitArray = interface; // type: System.Collections.BitArray, namespace: System.Collections
  DNCollectionExtensions = interface; // type: System.Collections.Generic.CollectionExtensions, namespace: System.Collections.Generic
  DNSortedDictionary_KeyValuePairComparer<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer, namespace: System.Collections.Generic
  DNHashSet<T> = interface; // type: System.Collections.Generic.HashSet`1, namespace: System.Collections.Generic
  DNLinkedList<T> = interface; // type: System.Collections.Generic.LinkedList`1, namespace: System.Collections.Generic
  DNLinkedListNode<T> = interface; // type: System.Collections.Generic.LinkedListNode`1, namespace: System.Collections.Generic
  DNQueue<T> = interface; // type: System.Collections.Generic.Queue`1, namespace: System.Collections.Generic
  DNSortedDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection, namespace: System.Collections.Generic
  DNSortedList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2, namespace: System.Collections.Generic
  DNSortedList_KeyList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2+KeyList, namespace: System.Collections.Generic
  DNSortedList_ValueList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2+ValueList, namespace: System.Collections.Generic
  DNSortedSet<T> = interface; // type: System.Collections.Generic.SortedSet`1, namespace: System.Collections.Generic
  DNTreeSet<T> = interface; // type: System.Collections.Generic.TreeSet`1, namespace: System.Collections.Generic
  DNStack<T> = interface; // type: System.Collections.Generic.Stack`1, namespace: System.Collections.Generic
  DNStructuralComparisons = interface; // type: System.Collections.StructuralComparisons, namespace: System.Collections
  DNHashSet_Enumerator<T> = interface; // type: System.Collections.Generic.HashSet`1+Enumerator, namespace: System.Collections.Generic
  DNLinkedList_Enumerator<T> = interface; // type: System.Collections.Generic.LinkedList`1+Enumerator, namespace: System.Collections.Generic
  DNQueue_Enumerator<T> = interface; // type: System.Collections.Generic.Queue`1+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedSet_Enumerator<T> = interface; // type: System.Collections.Generic.SortedSet`1+Enumerator, namespace: System.Collections.Generic
  DNStack_Enumerator<T> = interface; // type: System.Collections.Generic.Stack`1+Enumerator, namespace: System.Collections.Generic


{ objects }

  //-------------namespace: System.Collections----------------
  DNBitArrayClass = interface(DNObjectClass)
  ['{715C57F2-EDB5-5273-BD09-4A53B3FE32ED}']
  { constructors } 

    {class} function init(length: Int32): DNBitArray; overload;
    {class} function init(length: Int32; defaultValue: Boolean): DNBitArray; overload;
    {class} function init(bytes: TArray<Byte>): DNBitArray; overload;
    {class} function init(values: TArray<Boolean>): DNBitArray; overload;
    {class} function init(values: TArray<Int32>): DNBitArray; overload;
    {class} function init(bits: DNBitArray): DNBitArray; overload;

  end;

  [DNTypeName('System.Collections.BitArray')]
  DNBitArray = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{E59B31A6-643F-3C45-A805-BB24F654A6C8}']
  { getters & setters } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Count: Int32;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Get(index: Int32): Boolean;
    procedure &Set(index: Int32; value: Boolean);
    procedure SetAll(value: Boolean);
    function &And(value: DNBitArray): DNBitArray;
    function &Or(value: DNBitArray): DNBitArray;
    function &Xor(value: DNBitArray): DNBitArray;
    function &Not: DNBitArray;
    function RightShift(count: Int32): DNBitArray;
    function LeftShift(count: Int32): DNBitArray;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function Clone: DDNC.System.Private.CoreLib.DNObject;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
    property Length: Int32 read get_Length write set_Length;
    property Count: Int32 read get_Count;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNBitArray = class(TDNGenericImport<DNBitArrayClass, DNBitArray>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNCollectionExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{63FB77C1-6E12-5E6C-80DE-27FA825B154B}']
  end;

  [DNTypeName('System.Collections.Generic.CollectionExtensions')]
  DNCollectionExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6A3CDA85-BB6F-321B-8BD7-838F72EC1262}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCollectionExtensions = class(TDNGenericImport<DNCollectionExtensionsClass, DNCollectionExtensions>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyValuePairComparerClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNComparerClass<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>)
  ['{463E3495-028A-5289-98C5-777B028D719C}']
  { constructors } 

    {class} function init(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary_KeyValuePairComparer<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyValuePairComparer')]
  DNSortedDictionary_KeyValuePairComparer<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNComparer<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>)
  ['{5BBBC8C7-65C2-3BE9-8872-846DA010A73A}']
  { methods } 

    function Compare(x: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>; y: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSortedDictionary_KeyValuePairComparer<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyValuePairComparerClass<TKey, TValue>, DNSortedDictionary_KeyValuePairComparer<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSetClass<T> = interface(DNObjectClass)
  ['{2D924E7A-5EE7-5D39-9B70-606BE0820CC8}']
  { constructors } 

    {class} function init: DNHashSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32): DNHashSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNHashSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>; comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32; comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNHashSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<DNHashSet<T>>;

  end;

  [DNTypeName('System.Collections.Generic.HashSet`1')]
  DNHashSet<T> = interface(DDNC.System.Private.CoreLib.DNICollection<T>)
  ['{335D3B17-3492-3097-8309-2B6BC68E642D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;

  { methods } 

    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    function GetEnumerator: DNHashSet_Enumerator<T>;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure OnDeserialization(sender: DDNC.System.Private.CoreLib.DNObject);
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function EnsureCapacity(capacity: Int32): Int32;
    procedure TrimExcess;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_Comparer;
  end;

  TDNHashSet<T> = class(TDNGenericImport<DNHashSetClass<T>, DNHashSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListClass<T> = interface(DNObjectClass)
  ['{B83C1135-13F8-5B72-8871-084311DCEF7F}']
  { constructors } 

    {class} function init: DNLinkedList<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNLinkedList<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1')]
  DNLinkedList<T> = interface(DDNC.System.Private.CoreLib.DNICollection<T>)
  ['{FDF01D27-1A02-3876-A1D0-B610E5FDDC73}']
  { getters & setters } 

    function get_Count: Int32;
    function get_First: DNLinkedListNode<T>;
    function get_Last: DNLinkedListNode<T>;

  { methods } 

    function AddAfter(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    procedure AddAfter(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    function AddBefore(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    procedure AddBefore(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    function AddFirst(value: T): DNLinkedListNode<T>; overload;
    procedure AddFirst(node: DNLinkedListNode<T>); overload;
    function AddLast(value: T): DNLinkedListNode<T>; overload;
    procedure AddLast(node: DNLinkedListNode<T>); overload;
    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function Find(value: T): DNLinkedListNode<T>;
    function FindLast(value: T): DNLinkedListNode<T>;
    function GetEnumerator: DNLinkedList_Enumerator<T>;
    procedure Remove(node: DNLinkedListNode<T>);
    procedure RemoveFirst;
    procedure RemoveLast;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure OnDeserialization(sender: DDNC.System.Private.CoreLib.DNObject);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property First: DNLinkedListNode<T> read get_First;
    property Last: DNLinkedListNode<T> read get_Last;
  end;

  TDNLinkedList<T> = class(TDNGenericImport<DNLinkedListClass<T>, DNLinkedList<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListNodeClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{707C44F1-B55D-5066-8C54-AB9450055971}']
  { constructors } 

    {class} function init(value: T): DNLinkedListNode<T>;

  end;

  [DNTypeName('System.Collections.Generic.LinkedListNode`1')]
  DNLinkedListNode<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8EE4ED39-DB76-34BE-9DF2-28C8A4AA5D43}']
  { getters & setters } 

    function get_List: DNLinkedList<T>;
    function get_Next: DNLinkedListNode<T>;
    function get_Previous: DNLinkedListNode<T>;
    function get_Value: T;
    procedure set_Value(value: T);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property List: DNLinkedList<T> read get_List;
    property Next: DNLinkedListNode<T> read get_Next;
    property Previous: DNLinkedListNode<T> read get_Previous;
    property Value: T read get_Value write set_Value;
  end;

  TDNLinkedListNode<T> = class(TDNGenericImport<DNLinkedListNodeClass<T>, DNLinkedListNode<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueueClass<T> = interface(DNObjectClass)
  ['{3C85BB6D-C478-53B2-A5A4-AD00B7F519F2}']
  { constructors } 

    {class} function init: DNQueue<T>; overload;
    {class} function init(capacity: Int32): DNQueue<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNQueue<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Queue`1')]
  DNQueue<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{C77F16B9-2D13-39BB-8B9C-23A9FD26E4E8}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    procedure Enqueue(item: T);
    function GetEnumerator: DNQueue_Enumerator<T>;
    function Dequeue: T;
    function TryDequeue(out result: T): Boolean;
    function Peek: T;
    function TryPeek(out result: T): Boolean;
    function &Contains(item: T): Boolean;
    function ToArray: TArray<T>;
    procedure TrimExcess;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNQueue<T> = class(TDNGenericImport<DNQueueClass<T>, DNQueue<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{FA52AF7F-6289-5D47-8396-A26252CA86A6}']
  { constructors } 

    {class} function init: DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2')]
  DNSortedDictionary<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{A7C72CB9-15F7-3D2D-BAE3-C0219FEB90FF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    function get_Keys: DNSortedDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNSortedDictionary_ValueCollection<TKey, TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    procedure CopyTo(&array: TArray<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>; index: Int32);
    function GetEnumerator: DNSortedDictionary_Enumerator<TKey, TValue>;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_Comparer;
    property Keys: DNSortedDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNSortedDictionary_ValueCollection<TKey, TValue> read get_Values;
  end;

  TDNSortedDictionary<TKey, TValue> = class(TDNGenericImport<DNSortedDictionaryClass<TKey, TValue>, DNSortedDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{CA209588-3EF8-5188-A06E-66A251635888}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_KeyCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection')]
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TKey>)
  ['{237D6B0C-858A-3B15-8AB9-F054199F39A6}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TKey>; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollectionClass<TKey, TValue>, DNSortedDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{530895E0-2E65-5F8F-BA2A-30A24B3275FF}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_ValueCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection')]
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TValue>)
  ['{ABACC0C6-8884-3FE9-A751-560C8107E76A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TValue>; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollectionClass<TKey, TValue>, DNSortedDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedListClass<TKey, TValue> = interface(DNObjectClass)
  ['{A1630B81-12D6-517B-83CA-0D9AB0A1EF49}']
  { constructors } 

    {class} function init: DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32): DNSortedList<TKey, TValue>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>; comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedList`2')]
  DNSortedList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{F6DB4989-B2E1-3D37-8C6C-F9926B863937}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIList<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIList<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>;
    function IndexOfKey(key: TKey): Int32;
    function IndexOfValue(value: TValue): Int32;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    procedure RemoveAt(index: Int32);
    procedure TrimExcess;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIList<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIList<TValue> read get_Values;
  end;

  TDNSortedList<TKey, TValue> = class(TDNGenericImport<DNSortedListClass<TKey, TValue>, DNSortedList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedList_KeyListClass<TKey, TValue> = interface(DNObjectClass)
  ['{BBDF202F-1492-5D16-A8E5-297C60A2ABB8}']
  end;

  [DNTypeName('System.Collections.Generic.SortedList`2+KeyList')]
  DNSortedList_KeyList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIList<TKey>)
  ['{6AC02A31-BBDB-32D0-B766-D8B53274D6B8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(key: TKey): Boolean;
    procedure CopyTo(&array: TArray<TKey>; arrayIndex: Int32);
    procedure Insert(index: Int32; value: TKey);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TKey>;
    function IndexOf(key: TKey): Int32;
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSortedList_KeyList<TKey, TValue> = class(TDNGenericImport<DNSortedList_KeyListClass<TKey, TValue>, DNSortedList_KeyList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedList_ValueListClass<TKey, TValue> = interface(DNObjectClass)
  ['{D474B119-65C2-5B31-9510-BA8716BAD161}']
  end;

  [DNTypeName('System.Collections.Generic.SortedList`2+ValueList')]
  DNSortedList_ValueList<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIList<TValue>)
  ['{A6F73BF9-311B-3993-80B1-93B2DF5ACA3D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(value: TValue): Boolean;
    procedure CopyTo(&array: TArray<TValue>; arrayIndex: Int32);
    procedure Insert(index: Int32; value: TValue);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TValue>;
    function IndexOf(value: TValue): Int32;
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSortedList_ValueList<TKey, TValue> = class(TDNGenericImport<DNSortedList_ValueListClass<TKey, TValue>, DNSortedList_ValueList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSetClass<T> = interface(DNObjectClass)
  ['{62696C46-0A19-5500-A81A-E4E84E518F4E}']
  { constructors } 

    {class} function init: DNSortedSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNSortedSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<DNSortedSet<T>>; overload;
    {class} function CreateSetComparer(memberEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DDNC.System.Private.CoreLib.DNIEqualityComparer<DNSortedSet<T>>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1')]
  DNSortedSet<T> = interface(DDNC.System.Runtime.DNISet<T>)
  ['{9C30E060-0C5C-369F-99FB-2EDC4894626F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    function get_Min: T;
    function get_Max: T;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32; count: Int32); overload;
    function GetEnumerator: DNSortedSet_Enumerator<T>;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function GetViewBetween(lowerValue: T; upperValue: T): DNSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_Comparer;
    property Min: T read get_Min;
    property Max: T read get_Max;
  end;

  TDNSortedSet<T> = class(TDNGenericImport<DNSortedSetClass<T>, DNSortedSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNTreeSetClass<T> = interface(DNSortedSetClass<T>)
  ['{264D35A3-CFB4-5CC9-8858-307AEDCD6E31}']
  { constructors } 

    {class} function init: DNTreeSet<T>; overload;
    {class} function init(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNTreeSet<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.TreeSet`1')]
  DNTreeSet<T> = interface(DNSortedSet<T>)
  ['{69E37E53-992B-304D-BC3D-5FD34FF179F0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    function get_Min: T;
    function get_Max: T;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32; count: Int32); overload;
    function GetEnumerator: DNSortedSet_Enumerator<T>;
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function GetViewBetween(lowerValue: T; upperValue: T): DNSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_Comparer;
    property Min: T read get_Min;
    property Max: T read get_Max;
  end;

  TDNTreeSet<T> = class(TDNGenericImport<DNTreeSetClass<T>, DNTreeSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStackClass<T> = interface(DNObjectClass)
  ['{D95048C7-DD64-5A60-9E91-4F2FBAB95A5E}']
  { constructors } 

    {class} function init: DNStack<T>; overload;
    {class} function init(capacity: Int32): DNStack<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNStack<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Stack`1')]
  DNStack<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{F6058201-081C-3F40-81BE-470180FED88B}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function GetEnumerator: DNStack_Enumerator<T>;
    procedure TrimExcess;
    function Peek: T;
    function TryPeek(out result: T): Boolean;
    function Pop: T;
    function TryPop(out result: T): Boolean;
    procedure Push(item: T);
    function ToArray: TArray<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStack<T> = class(TDNGenericImport<DNStackClass<T>, DNStack<T>>) end;

  //-------------namespace: System.Collections----------------
  DNStructuralComparisonsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{865DD4E4-13D4-5130-A9CD-5331908452D7}']
  { static getter & setter } 

    {class} function get_StructuralComparer: DDNC.System.Private.CoreLib.DNIComparer;
    {class} function get_StructuralEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer;

  { static propertys } 

    {class} property StructuralComparer: DDNC.System.Private.CoreLib.DNIComparer read get_StructuralComparer;
    {class} property StructuralEqualityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer read get_StructuralEqualityComparer;
  end;

  [DNTypeName('System.Collections.StructuralComparisons')]
  DNStructuralComparisons = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3DCB247D-E8B6-32F2-9945-62DF31437707}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStructuralComparisons = class(TDNGenericImport<DNStructuralComparisonsClass, DNStructuralComparisons>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4259A75F-1083-547B-9C6C-BA031F87DA51}']
  end;

  [DNTypeName('System.Collections.Generic.HashSet`1+Enumerator')]
  DNHashSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1DFD28F1-8221-36F7-A45F-44EBAFFF8713}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNHashSet_Enumerator<T> = class(TDNGenericImport<DNHashSet_EnumeratorClass<T>, DNHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedList_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E5A1441A-75CB-52F3-8F9F-4D70BF7E5F69}']
  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1+Enumerator')]
  DNLinkedList_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{CBBA2564-7516-371B-B1EE-C0B6D76083FD}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNLinkedList_Enumerator<T> = class(TDNGenericImport<DNLinkedList_EnumeratorClass<T>, DNLinkedList_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueue_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{929211C9-4D8C-54EE-9122-2F73D03D1DA9}']
  end;

  [DNTypeName('System.Collections.Generic.Queue`1+Enumerator')]
  DNQueue_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{740565C5-60E4-30EA-A714-E077646EE2B1}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNQueue_Enumerator<T> = class(TDNGenericImport<DNQueue_EnumeratorClass<T>, DNQueue_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F29022E8-1A0C-51F1-A334-84B0723A7E91}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+Enumerator')]
  DNSortedDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{920E7693-40D0-3593-8F53-174B26EDDE46}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNSortedDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_EnumeratorClass<TKey, TValue>, DNSortedDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{6099F7BF-1D9A-50A5-8F56-7071928707B9}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator')]
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7B262DD8-0EF2-38B4-9DCB-2EB64FE00563}']
  { getters & setters } 

    function get_Current: TKey;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: TKey read get_Current;
  end;

  TDNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C0F30AF0-8E83-54D0-8CAA-2F0C2DE8472B}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator')]
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D6DA7DC1-EDEC-3CFC-A8B6-D8FFE0FA009B}']
  { getters & setters } 

    function get_Current: TValue;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: TValue read get_Current;
  end;

  TDNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{88FBBDFB-98C2-53E7-92A5-D8C6A6C4A555}']
  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1+Enumerator')]
  DNSortedSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9E2F483C-6AE9-3B62-801E-64E52D3292B0}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNSortedSet_Enumerator<T> = class(TDNGenericImport<DNSortedSet_EnumeratorClass<T>, DNSortedSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStack_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{43F9D18F-83AD-56BE-A7D5-53151086080E}']
  end;

  [DNTypeName('System.Collections.Generic.Stack`1+Enumerator')]
  DNStack_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{219D5625-1824-309A-8C5F-5CC767C26281}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNStack_Enumerator<T> = class(TDNGenericImport<DNStack_EnumeratorClass<T>, DNStack_Enumerator<T>>) end;


implementation


initialization
  LoadAssemblyModule('System.Collections.dll', True);

finalization

end.
